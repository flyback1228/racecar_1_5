
racecar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e98  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  08017138  08017138  00027138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017a1c  08017a1c  00027a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08017a24  08017a24  00027a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017a30  08017a30  00027a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000248  24000000  08017a34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004524  24000248  08017c7c  00030248  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400476c  08017c7c  0003476c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030276  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002f6e6  00000000  00000000  000302b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000486e  00000000  00000000  0005f99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ee8  00000000  00000000  00064210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000181c  00000000  00000000  000660f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f81e  00000000  00000000  00067914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024fd5  00000000  00000000  000a7132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001867f8  00000000  00000000  000cc107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000095a8  00000000  00000000  00252900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  0025bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017120 	.word	0x08017120

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	08017120 	.word	0x08017120

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <_ZL6millisv>:

static inline uint32_t micros(void){
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
}

static inline uint32_t millis(void){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000U);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_ZL6millisv+0x24>)
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_ZL6millisv+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4907      	ldr	r1, [pc, #28]	; (80006b8 <_ZL6millisv+0x2c>)
 800069a:	fba1 1303 	umull	r1, r3, r1, r3
 800069e:	099b      	lsrs	r3, r3, #6
 80006a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e0001000 	.word	0xe0001000
 80006b4:	24000070 	.word	0x24000070
 80006b8:	10624dd3 	.word	0x10624dd3

080006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>:
#include <jy901/JY901_Control.h>
#include <jy901/JY901_Serial.h>
#include <string.h>
#include "utility.h"

CJY901::CJY901(UART_HandleTypeDef* huart) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	_huart=huart;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	67da      	str	r2, [r3, #124]	; 0x7c
  _lastTime = millis();
 80006cc:	f7ff ffde 	bl	800068c <_ZL6millisv>
 80006d0:	4602      	mov	r2, r0
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <_ZN6CJY9019parseDataEPh>:


bool CJY901::parseData(uint8_t* rxBuffer) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]

  // do sum check to confirm data is not corrupted
  uint8_t sum = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	73bb      	strb	r3, [r7, #14]
 80006f6:	e009      	b.n	800070c <_ZN6CJY9019parseDataEPh+0x28>
    sum += rxBuffer[cnt];
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4413      	add	r3, r2
 8000704:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	3301      	adds	r3, #1
 800070a:	73bb      	strb	r3, [r7, #14]
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	2b09      	cmp	r3, #9
 8000710:	d9f2      	bls.n	80006f8 <_ZN6CJY9019parseDataEPh+0x14>
  if (sum != rxBuffer[10])
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	330a      	adds	r3, #10
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	7bfa      	ldrb	r2, [r7, #15]
 800071a:	429a      	cmp	r2, r3
 800071c:	d001      	beq.n	8000722 <_ZN6CJY9019parseDataEPh+0x3e>
    return false;
 800071e:	2300      	movs	r3, #0
 8000720:	e0a6      	b.n	8000870 <_ZN6CJY9019parseDataEPh+0x18c>

  switch (rxBuffer[1]) {  // these cases are based on Manual p26,27,28,29 and 30
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3b50      	subs	r3, #80	; 0x50
 800072a:	2b0a      	cmp	r3, #10
 800072c:	f200 8099 	bhi.w	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
 8000730:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <_ZN6CJY9019parseDataEPh+0x54>)
 8000732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000736:	bf00      	nop
 8000738:	08000765 	.word	0x08000765
 800073c:	08000779 	.word	0x08000779
 8000740:	0800078d 	.word	0x0800078d
 8000744:	080007a1 	.word	0x080007a1
 8000748:	080007b5 	.word	0x080007b5
 800074c:	080007c9 	.word	0x080007c9
 8000750:	080007dd 	.word	0x080007dd
 8000754:	080007f7 	.word	0x080007f7
 8000758:	08000811 	.word	0x08000811
 800075c:	0800083b 	.word	0x0800083b
 8000760:	0800084f 	.word	0x0800084f
    case 0x50:
      memcpy(&JY901_data.time, &rxBuffer[2], 8);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	3302      	adds	r3, #2
 800076e:	2208      	movs	r2, #8
 8000770:	4619      	mov	r1, r3
 8000772:	f015 f826 	bl	80157c2 <memcpy>
      break;  // time
 8000776:	e074      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x51:
      memcpy(&JY901_data.acc, &rxBuffer[2], 8);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	3302      	adds	r3, #2
 8000782:	2208      	movs	r2, #8
 8000784:	4619      	mov	r1, r3
 8000786:	f015 f81c 	bl	80157c2 <memcpy>
      break;  // acceleration
 800078a:	e06a      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x52:
      memcpy(&JY901_data.gyro, &rxBuffer[2], 8);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	3302      	adds	r3, #2
 8000796:	2208      	movs	r2, #8
 8000798:	4619      	mov	r1, r3
 800079a:	f015 f812 	bl	80157c2 <memcpy>
      break;  // angular velocity
 800079e:	e060      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x53:
      memcpy(&JY901_data.angle, &rxBuffer[2], 8);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	3302      	adds	r3, #2
 80007aa:	2208      	movs	r2, #8
 80007ac:	4619      	mov	r1, r3
 80007ae:	f015 f808 	bl	80157c2 <memcpy>
      break;  // angle
 80007b2:	e056      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x54:
      memcpy(&JY901_data.mag, &rxBuffer[2], 8);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3302      	adds	r3, #2
 80007be:	2208      	movs	r2, #8
 80007c0:	4619      	mov	r1, r3
 80007c2:	f014 fffe 	bl	80157c2 <memcpy>
      break;  // magnetic field and temperature
 80007c6:	e04c      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x55:
      memcpy(&JY901_data.dStatus, &rxBuffer[2], 8);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	3302      	adds	r3, #2
 80007d2:	2208      	movs	r2, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	f014 fff4 	bl	80157c2 <memcpy>
      break;  // D port status
 80007da:	e042      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x56:
      memcpy(&JY901_data.pressure, &rxBuffer[2], 4);  // pressure
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3354      	adds	r3, #84	; 0x54
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	3202      	adds	r2, #2
 80007e4:	6812      	ldr	r2, [r2, #0]
 80007e6:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.altitude, &rxBuffer[6], 4);  // altitude
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3358      	adds	r3, #88	; 0x58
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	3206      	adds	r2, #6
 80007f0:	6812      	ldr	r2, [r2, #0]
 80007f2:	601a      	str	r2, [r3, #0]
      break;
 80007f4:	e035      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x57:
      memcpy(&JY901_data.lon, &rxBuffer[2], 4);  // longtitude
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	335c      	adds	r3, #92	; 0x5c
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	3202      	adds	r2, #2
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.lat, &rxBuffer[6], 4);  // latitude
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3360      	adds	r3, #96	; 0x60
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	3206      	adds	r2, #6
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	601a      	str	r2, [r3, #0]
      break;
 800080e:	e028      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x58:
      memcpy(&JY901_data.GPSHeight, &rxBuffer[2], 2);    //
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3364      	adds	r3, #100	; 0x64
 8000814:	683a      	ldr	r2, [r7, #0]
 8000816:	3202      	adds	r2, #2
 8000818:	8812      	ldrh	r2, [r2, #0]
 800081a:	b292      	uxth	r2, r2
 800081c:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSYaw, &rxBuffer[4], 2);       // GPS data
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3366      	adds	r3, #102	; 0x66
 8000822:	683a      	ldr	r2, [r7, #0]
 8000824:	3204      	adds	r2, #4
 8000826:	8812      	ldrh	r2, [r2, #0]
 8000828:	b292      	uxth	r2, r2
 800082a:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSVelocity, &rxBuffer[6], 4);  //
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3368      	adds	r3, #104	; 0x68
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	3206      	adds	r2, #6
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	601a      	str	r2, [r3, #0]
      break;
 8000838:	e013      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x59:
      memcpy(&JY901_data.quater, &rxBuffer[2], 8);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	3302      	adds	r3, #2
 8000844:	2208      	movs	r2, #8
 8000846:	4619      	mov	r1, r3
 8000848:	f014 ffbb 	bl	80157c2 <memcpy>
      break;  // quaternion
 800084c:	e009      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x5A:
      memcpy(&JY901_data.GPS_DOP, &rxBuffer[2], 8);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	3302      	adds	r3, #2
 8000858:	2208      	movs	r2, #8
 800085a:	4619      	mov	r1, r3
 800085c:	f014 ffb1 	bl	80157c2 <memcpy>
      break;  // GPS DOP
 8000860:	bf00      	nop
  }
  _lastTime = millis();  // last receive time
 8000862:	f7ff ff13 	bl	800068c <_ZL6millisv>
 8000866:	4602      	mov	r2, r0
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  return true;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <_Z41__static_initialization_and_destruction_0ii>:
	  HAL_UART_Transmit(_huart, JY901_GPSBAUDRATE, 5, 10);
  }
  //Serial1.write(JY901_GPSBAUDRATE, 5);
}

CJY901 JY901;
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d108      	bne.n	800089a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088e:	4293      	cmp	r3, r2
 8000890:	d103      	bne.n	800089a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000892:	2100      	movs	r1, #0
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000896:	f7ff ff11 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	24000264 	.word	0x24000264

080008a8 <_GLOBAL__sub_I_JY901_SAVECONF>:
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff ffe1 	bl	8000878 <_Z41__static_initialization_and_destruction_0ii>
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_ZN3PIDIfEC1EPfS1_S1_fffh>:

template <typename T>
PID<T>::PID() { }

template <typename T>
PID<T>::PID(T *input, T *output, T *setpoint, T kp, T ki, T kd,uint8_t add_input)
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	61f8      	str	r0, [r7, #28]
 80008c0:	61b9      	str	r1, [r7, #24]
 80008c2:	617a      	str	r2, [r7, #20]
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80008ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80008ce:	ed87 1a01 	vstr	s2, [r7, #4]
{
	output_   = output;
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	619a      	str	r2, [r3, #24]
	input_    = input;
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	615a      	str	r2, [r3, #20]
	setpoint_ = setpoint;
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	61da      	str	r2, [r3, #28]
//	mode_     = PID_MODE_MANUAL;
	
	PID<T>::set_tunings(kp, ki, kd, add_input);
 80008e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008e8:	4619      	mov	r1, r3
 80008ea:	ed97 1a01 	vldr	s2, [r7, #4]
 80008ee:	edd7 0a02 	vldr	s1, [r7, #8]
 80008f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80008f6:	69f8      	ldr	r0, [r7, #28]
 80008f8:	f000 f8f9 	bl	8000aee <_ZN3PIDIfE11set_tuningsEfffh>
	
	last_time_ = HAL_GetTick();
 80008fc:	f006 fd16 	bl	800732c <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	605a      	str	r2, [r3, #4]
}
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4618      	mov	r0, r3
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <_ZN3PIDIfE7computeEv>:


template <typename T>
void PID<T>::compute(void)
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
{
//	if(mode_ == PID_MODE_MANUAL)return;
	uint32_t now = HAL_GetTick();
 8000918:	f006 fd08 	bl	800732c <HAL_GetTick>
 800091c:	61f8      	str	r0, [r7, #28]
	uint32_t dt = now - last_time_;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	69fa      	ldr	r2, [r7, #28]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	61bb      	str	r3, [r7, #24]
	
	T input = *input_;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	617b      	str	r3, [r7, #20]
	T error = *setpoint_-input;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	ed93 7a00 	vldr	s14, [r3]
 8000938:	edd7 7a05 	vldr	s15, [r7, #20]
 800093c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000940:	edc7 7a04 	vstr	s15, [r7, #16]
	T dInput = input-last_input_;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800094a:	ed97 7a05 	vldr	s14, [r7, #20]
 800094e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000952:	edc7 7a03 	vstr	s15, [r7, #12]
	//T output;
	

	
	output_sum_ += ki_ * error * dt/1000.0;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	edd3 7a08 	vldr	s15, [r3, #32]
 800095c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	ed93 7a03 	vldr	s14, [r3, #12]
 8000966:	edd7 7a04 	vldr	s15, [r7, #16]
 800096a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	ee07 3a90 	vmov	s15, r3
 8000974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800097c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000980:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 8000a70 <_ZN3PIDIfE7computeEv+0x160>
 8000984:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800098c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	edc3 7a08 	vstr	s15, [r3, #32]
	output_sum_ -= kp_ * dInput*add_input_error_to_proportional_;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	ed93 7a08 	vldr	s14, [r3, #32]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	edd3 6a02 	vldr	s13, [r3, #8]
 80009a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80009a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	edc3 7a08 	vstr	s15, [r3, #32]
	clip(&output_sum_, out_min_, out_max_);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f103 0220 	add.w	r2, r3, #32
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80009d6:	eef0 0a47 	vmov.f32	s1, s14
 80009da:	eeb0 0a67 	vmov.f32	s0, s15
 80009de:	4610      	mov	r0, r2
 80009e0:	f000 f8b0 	bl	8000b44 <_Z4clipIfEvPT_S0_S0_>
	
	T output = output_sum_ - kp_ * error - kd_ * dInput * 1000.0 / dt;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80009f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80009f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	ed93 7a04 	vldr	s14, [r3, #16]
 8000a06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a12:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8000a70 <_ZN3PIDIfE7computeEv+0x160>
 8000a16:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000a24:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a30:	edc7 7a02 	vstr	s15, [r7, #8]
	*output_ = output;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	601a      	str	r2, [r3, #0]
	clip(output_, out_min_, out_max_);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	699a      	ldr	r2, [r3, #24]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000a4c:	eef0 0a47 	vmov.f32	s1, s14
 8000a50:	eeb0 0a67 	vmov.f32	s0, s15
 8000a54:	4610      	mov	r0, r2
 8000a56:	f000 f875 	bl	8000b44 <_Z4clipIfEvPT_S0_S0_>
		
	last_input_ = input;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
	last_time_  = now;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	605a      	str	r2, [r3, #4]
}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	00000000 	.word	0x00000000
 8000a74:	408f4000 	.word	0x408f4000

08000a78 <_ZN3PIDIfE17set_output_limitsEff>:
//}


/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
template <typename T>
void PID<T>::set_output_limits(T min, T max)
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a84:	edc7 0a01 	vstr	s1, [r7, #4]
{

	if (min >= max)return;
 8000a88:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a98:	da25      	bge.n	8000ae6 <_ZN3PIDIfE17set_output_limitsEff+0x6e>
	
	out_min_ = min;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
	out_max_ = max;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
	
	clip(output_,out_min_,out_max_);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	699a      	ldr	r2, [r3, #24]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000ab6:	eef0 0a47 	vmov.f32	s1, s14
 8000aba:	eeb0 0a67 	vmov.f32	s0, s15
 8000abe:	4610      	mov	r0, r2
 8000ac0:	f000 f840 	bl	8000b44 <_Z4clipIfEvPT_S0_S0_>
	clip(&output_sum_,out_min_,out_max_);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f103 0220 	add.w	r2, r3, #32
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000ad6:	eef0 0a47 	vmov.f32	s1, s14
 8000ada:	eeb0 0a67 	vmov.f32	s0, s15
 8000ade:	4610      	mov	r0, r2
 8000ae0:	f000 f830 	bl	8000b44 <_Z4clipIfEvPT_S0_S0_>
 8000ae4:	e000      	b.n	8000ae8 <_ZN3PIDIfE17set_output_limitsEff+0x70>
	if (min >= max)return;
 8000ae6:	bf00      	nop
	
}
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZN3PIDIfE11set_tuningsEfffh>:
}



template <typename T>
void PID<T>::set_tunings(T kp, T ki, T kd, uint8_t add_input)
 8000aee:	b480      	push	{r7}
 8000af0:	b087      	sub	sp, #28
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6178      	str	r0, [r7, #20]
 8000af6:	ed87 0a04 	vstr	s0, [r7, #16]
 8000afa:	edc7 0a03 	vstr	s1, [r7, #12]
 8000afe:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b02:	460b      	mov	r3, r1
 8000b04:	71fb      	strb	r3, [r7, #7]
{
	kp_=kp;
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]
	ki_=ki;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	60da      	str	r2, [r3, #12]
	kd_=kd;
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	611a      	str	r2, [r3, #16]
	add_input_error_to_proportional_=add_input;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	701a      	strb	r2, [r3, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_ZN3PIDIfE5resetEv>:
void PID<T>::reset(){
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	last_time_ = HAL_GetTick();
 8000b32:	f006 fbfb 	bl	800732c <HAL_GetTick>
 8000b36:	4602      	mov	r2, r0
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	605a      	str	r2, [r3, #4]
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <_Z4clipIfEvPT_S0_S0_>:
//	T GetKd(void);
	
};

template<typename T>
void clip(T* value,T min,T max){
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b50:	edc7 0a01 	vstr	s1, [r7, #4]
	if(*value>max)*value=max;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	edd3 7a00 	vldr	s15, [r3]
 8000b5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b66:	d503      	bpl.n	8000b70 <_Z4clipIfEvPT_S0_S0_+0x2c>
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
	else if(*value<min)*value=min;
}
 8000b6e:	e00d      	b.n	8000b8c <_Z4clipIfEvPT_S0_S0_+0x48>
	else if(*value<min)*value=min;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	edd3 7a00 	vldr	s15, [r3]
 8000b76:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	dc00      	bgt.n	8000b86 <_Z4clipIfEvPT_S0_S0_+0x42>
}
 8000b84:	e002      	b.n	8000b8c <_Z4clipIfEvPT_S0_S0_+0x48>
	else if(*value<min)*value=min;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <QSPI_W25Q64JV_AutoPollingMemReady>:
/*
 * 写操作时先读取内部数据
 */
static uint8_t w25q64jv_buf[W25Q64JV_SECTOR_SIZE];

static int QSPI_W25Q64JV_AutoPollingMemReady(uint32_t timeout) {
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b096      	sub	sp, #88	; 0x58
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

    QSPI_CommandTypeDef cmd = {
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	2238      	movs	r2, #56	; 0x38
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f014 fd37 	bl	801561c <memset>
 8000bae:	2305      	movs	r3, #5
 8000bb0:	623b      	str	r3, [r7, #32]
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bbc:	647b      	str	r3, [r7, #68]	; 0x44
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_STATUS_REG1,
        .DataMode = QSPI_DATA_1_LINE,
    };

    QSPI_AutoPollingTypeDef conf = {
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <QSPI_W25Q64JV_AutoPollingMemReady+0x60>)
 8000bc0:	f107 0408 	add.w	r4, r7, #8
 8000bc4:	461d      	mov	r5, r3
 8000bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bce:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, timeout) != HAL_OK) {
 8000bd2:	f107 0208 	add.w	r2, r7, #8
 8000bd6:	f107 0120 	add.w	r1, r7, #32
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <QSPI_W25Q64JV_AutoPollingMemReady+0x64>)
 8000bde:	f00b fd5c 	bl	800c69a <HAL_QSPI_AutoPolling>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <QSPI_W25Q64JV_AutoPollingMemReady+0x56>
        return QSPI_ERROR;
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bec:	e000      	b.n	8000bf0 <QSPI_W25Q64JV_AutoPollingMemReady+0x58>
    }

    return QSPI_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3758      	adds	r7, #88	; 0x58
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf8:	08017138 	.word	0x08017138
 8000bfc:	24001988 	.word	0x24001988

08000c00 <QSPI_W25Q64JV_WriteEnable>:

static int QSPI_W25Q64JV_WriteEnable() {
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	b094      	sub	sp, #80	; 0x50
 8000c04:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2238      	movs	r2, #56	; 0x38
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f014 fd04 	bl	801561c <memset>
 8000c14:	2306      	movs	r3, #6
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_WRITE_ENABLE,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c26:	4619      	mov	r1, r3
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <QSPI_W25Q64JV_WriteEnable+0x8c>)
 8000c2a:	f00b fba9 	bl	800c380 <HAL_QSPI_Command>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <QSPI_W25Q64JV_WriteEnable+0x3a>
        return QSPI_ERROR;
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c38:	e023      	b.n	8000c82 <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.Instruction = W25Q64JV_STATUS_REG1;
 8000c40:	2305      	movs	r3, #5
 8000c42:	61bb      	str	r3, [r7, #24]

    cmd.DataMode = QSPI_DATA_1_LINE;
 8000c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    cmd.DummyCycles = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.NbData = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	643b      	str	r3, [r7, #64]	; 0x40

    QSPI_AutoPollingTypeDef conf = {
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <QSPI_W25Q64JV_WriteEnable+0x90>)
 8000c54:	463c      	mov	r4, r7
 8000c56:	461d      	mov	r5, r3
 8000c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c60:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c64:	463a      	mov	r2, r7
 8000c66:	f107 0118 	add.w	r1, r7, #24
 8000c6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c6e:	4807      	ldr	r0, [pc, #28]	; (8000c8c <QSPI_W25Q64JV_WriteEnable+0x8c>)
 8000c70:	f00b fd13 	bl	800c69a <HAL_QSPI_AutoPolling>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <QSPI_W25Q64JV_WriteEnable+0x80>
        return QSPI_ERROR;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7e:	e000      	b.n	8000c82 <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    return QSPI_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3750      	adds	r7, #80	; 0x50
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24001988 	.word	0x24001988
 8000c90:	08017150 	.word	0x08017150

08000c94 <QSPI_W25Q64JV_Init>:
void QSPI_W25Q64JV_Init() {
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <QSPI_W25Q64JV_Reset>:

int QSPI_W25Q64JV_Reset() {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	; 0x38
 8000ca8:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 8000caa:	463b      	mov	r3, r7
 8000cac:	2238      	movs	r2, #56	; 0x38
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f014 fcb3 	bl	801561c <memset>
 8000cb6:	2366      	movs	r3, #102	; 0x66
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cbe:	61bb      	str	r3, [r7, #24]
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_ENABLE_RESET,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4814      	ldr	r0, [pc, #80]	; (8000d1c <QSPI_W25Q64JV_Reset+0x78>)
 8000cca:	f00b fb59 	bl	800c380 <HAL_QSPI_Command>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <QSPI_W25Q64JV_Reset+0x36>
        return QSPI_ERROR;
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cd8:	e01c      	b.n	8000d14 <QSPI_W25Q64JV_Reset+0x70>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cde:	61bb      	str	r3, [r7, #24]
    cmd.Instruction = W25Q64JV_RESET_DEVICE;
 8000ce0:	2399      	movs	r3, #153	; 0x99
 8000ce2:	603b      	str	r3, [r7, #0]
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cea:	4619      	mov	r1, r3
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <QSPI_W25Q64JV_Reset+0x78>)
 8000cee:	f00b fb47 	bl	800c380 <HAL_QSPI_Command>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <QSPI_W25Q64JV_Reset+0x5a>
        return QSPI_ERROR;
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cfc:	e00a      	b.n	8000d14 <QSPI_W25Q64JV_Reset+0x70>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000cfe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d02:	f7ff ff49 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <QSPI_W25Q64JV_Reset+0x6e>
        return QSPI_ERROR;
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d10:	e000      	b.n	8000d14 <QSPI_W25Q64JV_Reset+0x70>
    }

    return QSPI_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	24001988 	.word	0x24001988

08000d20 <QSPI_W25Q64JV_EraseSector>:

int QSPI_W25Q64JV_EraseSector(uint32_t SectorAddress) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b090      	sub	sp, #64	; 0x40
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 8000d28:	f7ff ff6a 	bl	8000c00 <QSPI_W25Q64JV_WriteEnable>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d002      	beq.n	8000d38 <QSPI_W25Q64JV_EraseSector+0x18>
        return QSPI_ERROR;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d36:	e02c      	b.n	8000d92 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    QSPI_CommandTypeDef cmd = {
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	2238      	movs	r2, #56	; 0x38
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f014 fc6b 	bl	801561c <memset>
 8000d46:	2320      	movs	r3, #32
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	623b      	str	r3, [r7, #32]
 8000d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
        .AddressMode = QSPI_ADDRESS_1_LINE,
        .Address = SectorAddress,
        .AddressSize = QSPI_ADDRESS_24_BITS,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <QSPI_W25Q64JV_EraseSector+0x7c>)
 8000d6c:	f00b fb08 	bl	800c380 <HAL_QSPI_Command>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <QSPI_W25Q64JV_EraseSector+0x5c>
        return QSPI_ERROR;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d7a:	e00a      	b.n	8000d92 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000d7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d80:	f7ff ff0a 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <QSPI_W25Q64JV_EraseSector+0x70>
        return QSPI_ERROR;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8e:	e000      	b.n	8000d92 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    return QSPI_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3740      	adds	r7, #64	; 0x40
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	24001988 	.word	0x24001988

08000da0 <QSPI_W25Q64JV_Read>:

int QSPI_W25Q64JV_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b092      	sub	sp, #72	; 0x48
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000dac:	f241 3088 	movw	r0, #5000	; 0x1388
 8000db0:	f7ff fef2 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <QSPI_W25Q64JV_Read+0x20>
        return QSPI_ERROR;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dbe:	e044      	b.n	8000e4a <QSPI_W25Q64JV_Read+0xaa>
    }

    QSPI_CommandTypeDef cmd = {
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2238      	movs	r2, #56	; 0x38
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f014 fc27 	bl	801561c <memset>
 8000dce:	23eb      	movs	r3, #235	; 0xeb
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	23f0      	movs	r3, #240	; 0xf0
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	2304      	movs	r3, #4
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
 8000de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000df0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
 8000df6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
        .DataMode = QSPI_DATA_4_LINES,
        .DummyCycles = 4,
        .NbData = Size,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4812      	ldr	r0, [pc, #72]	; (8000e54 <QSPI_W25Q64JV_Read+0xb4>)
 8000e0c:	f00b fab8 	bl	800c380 <HAL_QSPI_Command>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <QSPI_W25Q64JV_Read+0x7c>
        return QSPI_ERROR;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1a:	e016      	b.n	8000e4a <QSPI_W25Q64JV_Read+0xaa>
    }

    if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <QSPI_W25Q64JV_Read+0xb4>)
 8000e24:	f00b fb9c 	bl	800c560 <HAL_QSPI_Receive>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <QSPI_W25Q64JV_Read+0x94>
        return QSPI_ERROR;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e32:	e00a      	b.n	8000e4a <QSPI_W25Q64JV_Read+0xaa>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000e34:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e38:	f7ff feae 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <QSPI_W25Q64JV_Read+0xa8>
        return QSPI_ERROR;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e46:	e000      	b.n	8000e4a <QSPI_W25Q64JV_Read+0xaa>
    }

    return QSPI_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3748      	adds	r7, #72	; 0x48
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24001988 	.word	0x24001988

08000e58 <QSPI_W25Q64JV_PageProgram>:

int QSPI_W25Q64JV_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b092      	sub	sp, #72	; 0x48
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000e64:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e68:	f7ff fe96 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <QSPI_W25Q64JV_PageProgram+0x20>
        return QSPI_ERROR;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e76:	e045      	b.n	8000f04 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 8000e78:	f7ff fec2 	bl	8000c00 <QSPI_W25Q64JV_WriteEnable>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <QSPI_W25Q64JV_PageProgram+0x30>
        return QSPI_ERROR;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e86:	e03d      	b.n	8000f04 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    QSPI_CommandTypeDef cmd = {
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2238      	movs	r2, #56	; 0x38
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f014 fbc3 	bl	801561c <memset>
 8000e96:	2302      	movs	r3, #2
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	63bb      	str	r3, [r7, #56]	; 0x38
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .DummyCycles = 0,
        .NbData = Size,
    };
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4811      	ldr	r0, [pc, #68]	; (8000f0c <QSPI_W25Q64JV_PageProgram+0xb4>)
 8000ec6:	f00b fa5b 	bl	800c380 <HAL_QSPI_Command>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <QSPI_W25Q64JV_PageProgram+0x7e>
        return QSPI_ERROR;
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed4:	e016      	b.n	8000f04 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <QSPI_W25Q64JV_PageProgram+0xb4>)
 8000ede:	f00b faad 	bl	800c43c <HAL_QSPI_Transmit>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <QSPI_W25Q64JV_PageProgram+0x96>
        return QSPI_ERROR;
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eec:	e00a      	b.n	8000f04 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000eee:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ef2:	f7ff fe51 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <QSPI_W25Q64JV_PageProgram+0xaa>
        return QSPI_ERROR;
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f00:	e000      	b.n	8000f04 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    return QSPI_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3748      	adds	r7, #72	; 0x48
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	24001988 	.word	0x24001988

08000f10 <QSPI_W25Q64JV_Write_NoCheck>:

/*
 * 必须确保写的地址范围内的数据全部为0xFF
 * 具有自动换页的功能
 */
int QSPI_W25Q64JV_Write_NoCheck(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
    uint32_t pageremain = W25Q64JV_PAGE_SIZE - WriteAddr % W25Q64JV_PAGE_SIZE;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000f28:	617b      	str	r3, [r7, #20]
    if (Size <= pageremain) {
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d801      	bhi.n	8000f36 <QSPI_W25Q64JV_Write_NoCheck+0x26>
        pageremain = Size;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	617b      	str	r3, [r7, #20]
    }
    while (1) {
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f7ff ff8c 	bl	8000e58 <QSPI_W25Q64JV_PageProgram>
 8000f40:	6138      	str	r0, [r7, #16]
        if (ret != QSPI_OK || Size == pageremain) break;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d117      	bne.n	8000f78 <QSPI_W25Q64JV_Write_NoCheck+0x68>
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d013      	beq.n	8000f78 <QSPI_W25Q64JV_Write_NoCheck+0x68>
        pData += pageremain;
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4413      	add	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]
        WriteAddr += pageremain;
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
        Size -= pageremain;
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	607b      	str	r3, [r7, #4]
        pageremain = Size > W25Q64JV_PAGE_SIZE ? W25Q64JV_PAGE_SIZE : Size;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f6e:	bf28      	it	cs
 8000f70:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8000f74:	617b      	str	r3, [r7, #20]
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8000f76:	e7de      	b.n	8000f36 <QSPI_W25Q64JV_Write_NoCheck+0x26>
    }
    return ret;
 8000f78:	693b      	ldr	r3, [r7, #16]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <QSPI_W25Q64JV_Write>:

int QSPI_W25Q64JV_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    uint32_t secpos = WriteAddr / W25Q64JV_SECTOR_SIZE;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	0b1b      	lsrs	r3, r3, #12
 8000f98:	61bb      	str	r3, [r7, #24]
    uint16_t secoff = WriteAddr % W25Q64JV_SECTOR_SIZE;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa2:	82fb      	strh	r3, [r7, #22]
    uint16_t secremain = W25Q64JV_SECTOR_SIZE - secoff;
 8000fa4:	8afb      	ldrh	r3, [r7, #22]
 8000fa6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000faa:	82bb      	strh	r3, [r7, #20]
    uint32_t i;
    while (1) {
    	if (Size <= secremain) secremain = Size;
 8000fac:	8abb      	ldrh	r3, [r7, #20]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d801      	bhi.n	8000fb8 <QSPI_W25Q64JV_Write+0x34>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	82bb      	strh	r3, [r7, #20]
        ret = QSPI_W25Q64JV_Read(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);  //读出整个扇区的内容
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	031b      	lsls	r3, r3, #12
 8000fbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4835      	ldr	r0, [pc, #212]	; (8001098 <QSPI_W25Q64JV_Write+0x114>)
 8000fc4:	f7ff feec 	bl	8000da0 <QSPI_W25Q64JV_Read>
 8000fc8:	61f8      	str	r0, [r7, #28]
        if (ret != QSPI_OK) break;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d157      	bne.n	8001080 <QSPI_W25Q64JV_Write+0xfc>
        for (i = 0; i < secremain; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e009      	b.n	8000fea <QSPI_W25Q64JV_Write+0x66>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8000fd6:	8afa      	ldrh	r2, [r7, #22]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <QSPI_W25Q64JV_Write+0x114>)
 8000fde:	5cd3      	ldrb	r3, [r2, r3]
 8000fe0:	2bff      	cmp	r3, #255	; 0xff
 8000fe2:	d107      	bne.n	8000ff4 <QSPI_W25Q64JV_Write+0x70>
        for (i = 0; i < secremain; i++) {
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	8abb      	ldrh	r3, [r7, #20]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d3f1      	bcc.n	8000fd6 <QSPI_W25Q64JV_Write+0x52>
 8000ff2:	e000      	b.n	8000ff6 <QSPI_W25Q64JV_Write+0x72>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8000ff4:	bf00      	nop
        }
        if (i < secremain) {
 8000ff6:	8abb      	ldrh	r3, [r7, #20]
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d21d      	bcs.n	800103a <QSPI_W25Q64JV_Write+0xb6>
            ret = QSPI_W25Q64JV_EraseSector(secpos * W25Q64JV_SECTOR_SIZE);
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	031b      	lsls	r3, r3, #12
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fe8c 	bl	8000d20 <QSPI_W25Q64JV_EraseSector>
 8001008:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d139      	bne.n	8001084 <QSPI_W25Q64JV_Write+0x100>
            memcpy(w25q64jv_buf + secoff, pData, secremain);
 8001010:	8afb      	ldrh	r3, [r7, #22]
 8001012:	4a21      	ldr	r2, [pc, #132]	; (8001098 <QSPI_W25Q64JV_Write+0x114>)
 8001014:	4413      	add	r3, r2
 8001016:	8aba      	ldrh	r2, [r7, #20]
 8001018:	68f9      	ldr	r1, [r7, #12]
 800101a:	4618      	mov	r0, r3
 800101c:	f014 fbd1 	bl	80157c2 <memcpy>
            ret = QSPI_W25Q64JV_Write_NoCheck(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	031b      	lsls	r3, r3, #12
 8001024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001028:	4619      	mov	r1, r3
 800102a:	481b      	ldr	r0, [pc, #108]	; (8001098 <QSPI_W25Q64JV_Write+0x114>)
 800102c:	f7ff ff70 	bl	8000f10 <QSPI_W25Q64JV_Write_NoCheck>
 8001030:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00a      	beq.n	800104e <QSPI_W25Q64JV_Write+0xca>
 8001038:	e029      	b.n	800108e <QSPI_W25Q64JV_Write+0x10a>
        } else {
            ret = QSPI_W25Q64JV_Write_NoCheck(pData, WriteAddr, secremain);
 800103a:	8abb      	ldrh	r3, [r7, #20]
 800103c:	461a      	mov	r2, r3
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff ff65 	bl	8000f10 <QSPI_W25Q64JV_Write_NoCheck>
 8001046:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d11c      	bne.n	8001088 <QSPI_W25Q64JV_Write+0x104>
        }
        if (Size == secremain) break;
 800104e:	8abb      	ldrh	r3, [r7, #20]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	429a      	cmp	r2, r3
 8001054:	d01a      	beq.n	800108c <QSPI_W25Q64JV_Write+0x108>
        secpos++;
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	3301      	adds	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
        secoff = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	82fb      	strh	r3, [r7, #22]
        pData += secremain;
 8001060:	8abb      	ldrh	r3, [r7, #20]
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
        WriteAddr += secremain;
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	4413      	add	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
        Size -= secremain;
 8001070:	8abb      	ldrh	r3, [r7, #20]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	607b      	str	r3, [r7, #4]
        secremain = (Size - W25Q64JV_SECTOR_SIZE) ? W25Q64JV_SECTOR_SIZE : Size;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	82bb      	strh	r3, [r7, #20]
    	if (Size <= secremain) secremain = Size;
 800107e:	e795      	b.n	8000fac <QSPI_W25Q64JV_Write+0x28>
        if (ret != QSPI_OK) break;
 8001080:	bf00      	nop
 8001082:	e004      	b.n	800108e <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8001084:	bf00      	nop
 8001086:	e002      	b.n	800108e <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8001088:	bf00      	nop
 800108a:	e000      	b.n	800108e <QSPI_W25Q64JV_Write+0x10a>
        if (Size == secremain) break;
 800108c:	bf00      	nop
    }
    return ret;
 800108e:	69fb      	ldr	r3, [r7, #28]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	240002e8 	.word	0x240002e8

0800109c <QSPI_W25Q64JV_DeviceID>:
    }

    return QSPI_OK;
}

int QSPI_W25Q64JV_DeviceID(uint8_t id[2]) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b090      	sub	sp, #64	; 0x40
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    QSPI_CommandTypeDef cmd = {
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	2238      	movs	r2, #56	; 0x38
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f014 fab5 	bl	801561c <memset>
 80010b2:	2390      	movs	r3, #144	; 0x90
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010ce:	2302      	movs	r3, #2
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .NbData = 2,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <QSPI_W25Q64JV_DeviceID+0x74>)
 80010de:	f00b f94f 	bl	800c380 <HAL_QSPI_Command>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <QSPI_W25Q64JV_DeviceID+0x52>
        return QSPI_ERROR;
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ec:	e00c      	b.n	8001108 <QSPI_W25Q64JV_DeviceID+0x6c>
    }

    if (HAL_QSPI_Receive(&hqspi, id, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80010ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4806      	ldr	r0, [pc, #24]	; (8001110 <QSPI_W25Q64JV_DeviceID+0x74>)
 80010f6:	f00b fa33 	bl	800c560 <HAL_QSPI_Receive>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <QSPI_W25Q64JV_DeviceID+0x6a>
        return QSPI_ERROR;
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001104:	e000      	b.n	8001108 <QSPI_W25Q64JV_DeviceID+0x6c>
    }
    return QSPI_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3740      	adds	r7, #64	; 0x40
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	24001988 	.word	0x24001988

08001114 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800111c:	1d39      	adds	r1, r7, #4
 800111e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001122:	2201      	movs	r2, #1
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <__io_putchar+0x20>)
 8001126:	f011 fa85 	bl	8012634 <HAL_UART_Transmit>
  return ch;
 800112a:	687b      	ldr	r3, [r7, #4]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	24001590 	.word	0x24001590

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113c:	f006 f870 	bl	8007220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001140:	f000 f828 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001144:	f000 fe7a 	bl	8001e3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001148:	f000 fe30 	bl	8001dac <MX_DMA_Init>
  MX_BDMA_Init();
 800114c:	f000 fe0e 	bl	8001d6c <MX_BDMA_Init>
  MX_UART8_Init();
 8001150:	f000 fada 	bl	8001708 <MX_UART8_Init>
  MX_UART4_Init();
 8001154:	f000 f9f4 	bl	8001540 <MX_UART4_Init>
  MX_QUADSPI_Init();
 8001158:	f000 fb22 	bl	80017a0 <MX_QUADSPI_Init>
  MX_ADC1_Init();
 800115c:	f000 f896 	bl	800128c <MX_ADC1_Init>
  MX_UART5_Init();
 8001160:	f000 fa3a 	bl	80015d8 <MX_UART5_Init>
  MX_UART7_Init();
 8001164:	f000 fa84 	bl	8001670 <MX_UART7_Init>
  MX_LPUART1_UART_Init();
 8001168:	f000 f99c 	bl	80014a4 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800116c:	f000 fb44 	bl	80017f8 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001170:	f000 fdd4 	bl	8001d1c <MX_TIM16_Init>
  MX_TIM3_Init();
 8001174:	f000 fbd8 	bl	8001928 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001178:	f000 fc58 	bl	8001a2c <MX_TIM5_Init>
  MX_TIM15_Init();
 800117c:	f000 fd2c 	bl	8001bd8 <MX_TIM15_Init>
  MX_IWDG1_Init();
 8001180:	f000 f972 	bl	8001468 <MX_IWDG1_Init>
  MX_TIM6_Init();
 8001184:	f000 fcf0 	bl	8001b68 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8001188:	f003 fef4 	bl	8004f74 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 800118c:	f003 ff1e 	bl	8004fcc <loop>
  {
 8001190:	e7fc      	b.n	800118c <main+0x54>
	...

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b09c      	sub	sp, #112	; 0x70
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	224c      	movs	r2, #76	; 0x4c
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f014 fa3a 	bl	801561c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2220      	movs	r2, #32
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f014 fa34 	bl	801561c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011b4:	2002      	movs	r0, #2
 80011b6:	f00b f835 	bl	800c224 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4b31      	ldr	r3, [pc, #196]	; (8001284 <SystemClock_Config+0xf0>)
 80011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c2:	4a30      	ldr	r2, [pc, #192]	; (8001284 <SystemClock_Config+0xf0>)
 80011c4:	f023 0301 	bic.w	r3, r3, #1
 80011c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011ca:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <SystemClock_Config+0xf0>)
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <SystemClock_Config+0xf4>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a2b      	ldr	r2, [pc, #172]	; (8001288 <SystemClock_Config+0xf4>)
 80011da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <SystemClock_Config+0xf4>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011ec:	bf00      	nop
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <SystemClock_Config+0xf4>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011fa:	d1f8      	bne.n	80011ee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011fc:	2309      	movs	r3, #9
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001206:	2301      	movs	r3, #1
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120a:	2302      	movs	r3, #2
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120e:	2302      	movs	r3, #2
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001212:	2305      	movs	r3, #5
 8001214:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001216:	23a0      	movs	r3, #160	; 0xa0
 8001218:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800121e:	2302      	movs	r3, #2
 8001220:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001222:	2302      	movs	r3, #2
 8001224:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001226:	2308      	movs	r3, #8
 8001228:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800122a:	2300      	movs	r3, #0
 800122c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4618      	mov	r0, r3
 8001238:	f00b fc72 	bl	800cb20 <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001242:	f000 fec1 	bl	8001fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001246:	233f      	movs	r3, #63	; 0x3f
 8001248:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124a:	2303      	movs	r3, #3
 800124c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001252:	2308      	movs	r3, #8
 8001254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV4;
 8001256:	2350      	movs	r3, #80	; 0x50
 8001258:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800125a:	2350      	movs	r3, #80	; 0x50
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800125e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001262:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8001264:	2350      	movs	r3, #80	; 0x50
 8001266:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2102      	movs	r1, #2
 800126c:	4618      	mov	r0, r3
 800126e:	f00c f8b1 	bl	800d3d4 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001278:	f000 fea6 	bl	8001fc8 <Error_Handler>
  }
}
 800127c:	bf00      	nop
 800127e:	3770      	adds	r7, #112	; 0x70
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	58000400 	.word	0x58000400
 8001288:	58024800 	.word	0x58024800

0800128c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]
 80012ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012b0:	4b63      	ldr	r3, [pc, #396]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012b2:	4a64      	ldr	r2, [pc, #400]	; (8001444 <MX_ADC1_Init+0x1b8>)
 80012b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80012b6:	4b62      	ldr	r3, [pc, #392]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80012be:	4b60      	ldr	r3, [pc, #384]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012c4:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ca:	4b5d      	ldr	r3, [pc, #372]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012cc:	2204      	movs	r2, #4
 80012ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012d0:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012d6:	4b5a      	ldr	r3, [pc, #360]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012d8:	2201      	movs	r2, #1
 80012da:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012de:	2208      	movs	r2, #8
 80012e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e2:	4b57      	ldr	r3, [pc, #348]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e8:	4b55      	ldr	r3, [pc, #340]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ee:	4b54      	ldr	r3, [pc, #336]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012f4:	4b52      	ldr	r3, [pc, #328]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012f6:	2203      	movs	r2, #3
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001300:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001302:	2200      	movs	r2, #0
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001306:	4b4e      	ldr	r3, [pc, #312]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800130e:	484c      	ldr	r0, [pc, #304]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001310:	f006 fa50 	bl	80077b4 <HAL_ADC_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800131a:	f000 fe55 	bl	8001fc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4845      	ldr	r0, [pc, #276]	; (8001440 <MX_ADC1_Init+0x1b4>)
 800132a:	f007 fcdd 	bl	8008ce8 <HAL_ADCEx_MultiModeConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001334:	f000 fe48 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001338:	4b43      	ldr	r3, [pc, #268]	; (8001448 <MX_ADC1_Init+0x1bc>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800133c:	2306      	movs	r3, #6
 800133e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8001340:	2304      	movs	r3, #4
 8001342:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001344:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001348:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800134a:	2304      	movs	r3, #4
 800134c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4839      	ldr	r0, [pc, #228]	; (8001440 <MX_ADC1_Init+0x1b4>)
 800135c:	f006 fef2 	bl	8008144 <HAL_ADC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001366:	f000 fe2f 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <MX_ADC1_Init+0x1c0>)
 800136c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800136e:	230c      	movs	r3, #12
 8001370:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	4619      	mov	r1, r3
 8001376:	4832      	ldr	r0, [pc, #200]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001378:	f006 fee4 	bl	8008144 <HAL_ADC_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001382:	f000 fe21 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <MX_ADC1_Init+0x1c4>)
 8001388:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800138a:	2312      	movs	r3, #18
 800138c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	482b      	ldr	r0, [pc, #172]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001394:	f006 fed6 	bl	8008144 <HAL_ADC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800139e:	f000 fe13 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <MX_ADC1_Init+0x1c8>)
 80013a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013a6:	2318      	movs	r3, #24
 80013a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	4619      	mov	r1, r3
 80013ae:	4824      	ldr	r0, [pc, #144]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80013b0:	f006 fec8 	bl	8008144 <HAL_ADC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80013ba:	f000 fe05 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <MX_ADC1_Init+0x1cc>)
 80013c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	481c      	ldr	r0, [pc, #112]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80013ce:	f006 feb9 	bl	8008144 <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80013d8:	f000 fdf6 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <MX_ADC1_Init+0x1d0>)
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013e0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4815      	ldr	r0, [pc, #84]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80013ec:	f006 feaa 	bl	8008144 <HAL_ADC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80013f6:	f000 fde7 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_ADC1_Init+0x1d4>)
 80013fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013fe:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001402:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_ADC1_Init+0x1b4>)
 800140a:	f006 fe9b 	bl	8008144 <HAL_ADC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001414:	f000 fdd8 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_ADC1_Init+0x1d8>)
 800141a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800141c:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001420:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001428:	f006 fe8c 	bl	8008144 <HAL_ADC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8001432:	f000 fdc9 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	240012e8 	.word	0x240012e8
 8001444:	40022000 	.word	0x40022000
 8001448:	0c900008 	.word	0x0c900008
 800144c:	10c00010 	.word	0x10c00010
 8001450:	14f00020 	.word	0x14f00020
 8001454:	21800100 	.word	0x21800100
 8001458:	25b00200 	.word	0x25b00200
 800145c:	2a000400 	.word	0x2a000400
 8001460:	2e300800 	.word	0x2e300800
 8001464:	4b840000 	.word	0x4b840000

08001468 <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_IWDG1_Init+0x34>)
 800146e:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <MX_IWDG1_Init+0x38>)
 8001470:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_32;
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <MX_IWDG1_Init+0x34>)
 8001474:	2203      	movs	r2, #3
 8001476:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 1999;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_IWDG1_Init+0x34>)
 800147a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800147e:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 1999;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_IWDG1_Init+0x34>)
 8001482:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001486:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_IWDG1_Init+0x34>)
 800148a:	f00a fe6c 	bl	800c166 <HAL_IWDG_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001494:	f000 fd98 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	240013c4 	.word	0x240013c4
 80014a0:	58004800 	.word	0x58004800

080014a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014aa:	4a23      	ldr	r2, [pc, #140]	; (8001538 <MX_LPUART1_UART_Init+0x94>)
 80014ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014b0:	4a22      	ldr	r2, [pc, #136]	; (800153c <MX_LPUART1_UART_Init+0x98>)
 80014b2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014c8:	220c      	movs	r2, #12
 80014ca:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014ea:	4812      	ldr	r0, [pc, #72]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014ec:	f011 f852 	bl	8012594 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80014f6:	f000 fd67 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014fe:	f013 f80f 	bl	8014520 <HAL_UARTEx_SetTxFifoThreshold>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001508:	f000 fd5e 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150c:	2100      	movs	r1, #0
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 8001510:	f013 f844 	bl	801459c <HAL_UARTEx_SetRxFifoThreshold>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800151a:	f000 fd55 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 8001520:	f012 ffc5 	bl	80144ae <HAL_UARTEx_DisableFifoMode>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800152a:	f000 fd4d 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	240013d4 	.word	0x240013d4
 8001538:	58000c00 	.word	0x58000c00
 800153c:	00033324 	.word	0x00033324

08001540 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <MX_UART4_Init+0x90>)
 8001546:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <MX_UART4_Init+0x94>)
 8001548:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_UART4_Init+0x90>)
 800154c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001550:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <MX_UART4_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_UART4_Init+0x90>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_UART4_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_UART4_Init+0x90>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_UART4_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_UART4_Init+0x90>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_UART4_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_UART4_Init+0x90>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_UART4_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001588:	4811      	ldr	r0, [pc, #68]	; (80015d0 <MX_UART4_Init+0x90>)
 800158a:	f011 f803 	bl	8012594 <HAL_UART_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001594:	f000 fd18 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001598:	2100      	movs	r1, #0
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_UART4_Init+0x90>)
 800159c:	f012 ffc0 	bl	8014520 <HAL_UARTEx_SetTxFifoThreshold>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80015a6:	f000 fd0f 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <MX_UART4_Init+0x90>)
 80015ae:	f012 fff5 	bl	801459c <HAL_UARTEx_SetRxFifoThreshold>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80015b8:	f000 fd06 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_UART4_Init+0x90>)
 80015be:	f012 ff76 	bl	80144ae <HAL_UARTEx_DisableFifoMode>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80015c8:	f000 fcfe 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	24001468 	.word	0x24001468
 80015d4:	40004c00 	.word	0x40004c00

080015d8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <MX_UART5_Init+0x90>)
 80015de:	4a23      	ldr	r2, [pc, #140]	; (800166c <MX_UART5_Init+0x94>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80015e2:	4b21      	ldr	r3, [pc, #132]	; (8001668 <MX_UART5_Init+0x90>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <MX_UART5_Init+0x90>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <MX_UART5_Init+0x90>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <MX_UART5_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_UART5_Init+0x90>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <MX_UART5_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_UART5_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_UART5_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_UART5_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_UART5_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001620:	4811      	ldr	r0, [pc, #68]	; (8001668 <MX_UART5_Init+0x90>)
 8001622:	f010 ffb7 	bl	8012594 <HAL_UART_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800162c:	f000 fccc 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001630:	2100      	movs	r1, #0
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <MX_UART5_Init+0x90>)
 8001634:	f012 ff74 	bl	8014520 <HAL_UARTEx_SetTxFifoThreshold>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800163e:	f000 fcc3 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001642:	2100      	movs	r1, #0
 8001644:	4808      	ldr	r0, [pc, #32]	; (8001668 <MX_UART5_Init+0x90>)
 8001646:	f012 ffa9 	bl	801459c <HAL_UARTEx_SetRxFifoThreshold>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001650:	f000 fcba 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <MX_UART5_Init+0x90>)
 8001656:	f012 ff2a 	bl	80144ae <HAL_UARTEx_DisableFifoMode>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001660:	f000 fcb2 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	240014fc 	.word	0x240014fc
 800166c:	40005000 	.word	0x40005000

08001670 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MX_UART7_Init+0x90>)
 8001676:	4a23      	ldr	r2, [pc, #140]	; (8001704 <MX_UART7_Init+0x94>)
 8001678:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_UART7_Init+0x90>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_UART7_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_UART7_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_UART7_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_UART7_Init+0x90>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_UART7_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_UART7_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_UART7_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_UART7_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <MX_UART7_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80016b8:	4811      	ldr	r0, [pc, #68]	; (8001700 <MX_UART7_Init+0x90>)
 80016ba:	f010 ff6b 	bl	8012594 <HAL_UART_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80016c4:	f000 fc80 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c8:	2100      	movs	r1, #0
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_UART7_Init+0x90>)
 80016cc:	f012 ff28 	bl	8014520 <HAL_UARTEx_SetTxFifoThreshold>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80016d6:	f000 fc77 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016da:	2100      	movs	r1, #0
 80016dc:	4808      	ldr	r0, [pc, #32]	; (8001700 <MX_UART7_Init+0x90>)
 80016de:	f012 ff5d 	bl	801459c <HAL_UARTEx_SetRxFifoThreshold>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80016e8:	f000 fc6e 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_UART7_Init+0x90>)
 80016ee:	f012 fede 	bl	80144ae <HAL_UARTEx_DisableFifoMode>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80016f8:	f000 fc66 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	24001590 	.word	0x24001590
 8001704:	40007800 	.word	0x40007800

08001708 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <MX_UART8_Init+0x90>)
 800170e:	4a23      	ldr	r2, [pc, #140]	; (800179c <MX_UART8_Init+0x94>)
 8001710:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <MX_UART8_Init+0x90>)
 8001714:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001718:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <MX_UART8_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_UART8_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_UART8_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_UART8_Init+0x90>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <MX_UART8_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_UART8_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_UART8_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_UART8_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_UART8_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001750:	4811      	ldr	r0, [pc, #68]	; (8001798 <MX_UART8_Init+0x90>)
 8001752:	f010 ff1f 	bl	8012594 <HAL_UART_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800175c:	f000 fc34 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <MX_UART8_Init+0x90>)
 8001764:	f012 fedc 	bl	8014520 <HAL_UARTEx_SetTxFifoThreshold>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800176e:	f000 fc2b 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001772:	2100      	movs	r1, #0
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <MX_UART8_Init+0x90>)
 8001776:	f012 ff11 	bl	801459c <HAL_UARTEx_SetRxFifoThreshold>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001780:	f000 fc22 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <MX_UART8_Init+0x90>)
 8001786:	f012 fe92 	bl	80144ae <HAL_UARTEx_DisableFifoMode>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001790:	f000 fc1a 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24001624 	.word	0x24001624
 800179c:	40007c00 	.word	0x40007c00

080017a0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <MX_QUADSPI_Init+0x54>)
 80017a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 10;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017ac:	220a      	movs	r2, #10
 80017ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017b8:	2210      	movs	r2, #16
 80017ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017be:	2216      	movs	r2, #22
 80017c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017de:	f00a fd5b 	bl	800c298 <HAL_QSPI_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80017e8:	f000 fbee 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	24001988 	.word	0x24001988
 80017f4:	52005000 	.word	0x52005000

080017f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08e      	sub	sp, #56	; 0x38
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <MX_TIM2_Init+0x12c>)
 800182c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001830:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001832:	4b3c      	ldr	r3, [pc, #240]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001834:	2263      	movs	r2, #99	; 0x63
 8001836:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <MX_TIM2_Init+0x12c>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800183e:	4b39      	ldr	r3, [pc, #228]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001840:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001844:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800184c:	4b35      	ldr	r3, [pc, #212]	; (8001924 <MX_TIM2_Init+0x12c>)
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001852:	4834      	ldr	r0, [pc, #208]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001854:	f00e fe48 	bl	80104e8 <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800185e:	f000 fbb3 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186c:	4619      	mov	r1, r3
 800186e:	482d      	ldr	r0, [pc, #180]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001870:	f00f fe00 	bl	8011474 <HAL_TIM_ConfigClockSource>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800187a:	f000 fba5 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800187e:	4829      	ldr	r0, [pc, #164]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001880:	f00e ff02 	bl	8010688 <HAL_TIM_PWM_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800188a:	f000 fb9d 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4821      	ldr	r0, [pc, #132]	; (8001924 <MX_TIM2_Init+0x12c>)
 800189e:	f010 fdcd 	bl	801243c <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018a8:	f000 fb8e 	bl	8001fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ac:	2360      	movs	r3, #96	; 0x60
 80018ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018bc:	463b      	mov	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4818      	ldr	r0, [pc, #96]	; (8001924 <MX_TIM2_Init+0x12c>)
 80018c4:	f00f fcc2 	bl	801124c <HAL_TIM_PWM_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80018ce:	f000 fb7b 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018d2:	463b      	mov	r3, r7
 80018d4:	2204      	movs	r2, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	4812      	ldr	r0, [pc, #72]	; (8001924 <MX_TIM2_Init+0x12c>)
 80018da:	f00f fcb7 	bl	801124c <HAL_TIM_PWM_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80018e4:	f000 fb70 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018e8:	463b      	mov	r3, r7
 80018ea:	2208      	movs	r2, #8
 80018ec:	4619      	mov	r1, r3
 80018ee:	480d      	ldr	r0, [pc, #52]	; (8001924 <MX_TIM2_Init+0x12c>)
 80018f0:	f00f fcac 	bl	801124c <HAL_TIM_PWM_ConfigChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80018fa:	f000 fb65 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	220c      	movs	r2, #12
 8001902:	4619      	mov	r1, r3
 8001904:	4807      	ldr	r0, [pc, #28]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001906:	f00f fca1 	bl	801124c <HAL_TIM_PWM_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8001910:	f000 fb5a 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001914:	4803      	ldr	r0, [pc, #12]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001916:	f005 f9a1 	bl	8006c5c <HAL_TIM_MspPostInit>

}
 800191a:	bf00      	nop
 800191c:	3738      	adds	r7, #56	; 0x38
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	240019d4 	.word	0x240019d4

08001928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08e      	sub	sp, #56	; 0x38
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001948:	463b      	mov	r3, r7
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800195a:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <MX_TIM3_Init+0xfc>)
 800195c:	4a32      	ldr	r2, [pc, #200]	; (8001a28 <MX_TIM3_Init+0x100>)
 800195e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001960:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001962:	2263      	movs	r2, #99	; 0x63
 8001964:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <MX_TIM3_Init+0xfc>)
 800196e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001972:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <MX_TIM3_Init+0xfc>)
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001980:	4828      	ldr	r0, [pc, #160]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001982:	f00e fdb1 	bl	80104e8 <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800198c:	f000 fb1c 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199a:	4619      	mov	r1, r3
 800199c:	4821      	ldr	r0, [pc, #132]	; (8001a24 <MX_TIM3_Init+0xfc>)
 800199e:	f00f fd69 	bl	8011474 <HAL_TIM_ConfigClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80019a8:	f000 fb0e 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019ac:	481d      	ldr	r0, [pc, #116]	; (8001a24 <MX_TIM3_Init+0xfc>)
 80019ae:	f00e fe6b 	bl	8010688 <HAL_TIM_PWM_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80019b8:	f000 fb06 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4816      	ldr	r0, [pc, #88]	; (8001a24 <MX_TIM3_Init+0xfc>)
 80019cc:	f010 fd36 	bl	801243c <HAL_TIMEx_MasterConfigSynchronization>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019d6:	f000 faf7 	bl	8001fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019da:	2360      	movs	r3, #96	; 0x60
 80019dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	4619      	mov	r1, r3
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <MX_TIM3_Init+0xfc>)
 80019f2:	f00f fc2b 	bl	801124c <HAL_TIM_PWM_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80019fc:	f000 fae4 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	2204      	movs	r2, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4807      	ldr	r0, [pc, #28]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001a08:	f00f fc20 	bl	801124c <HAL_TIM_PWM_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001a12:	f000 fad9 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a16:	4803      	ldr	r0, [pc, #12]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001a18:	f005 f920 	bl	8006c5c <HAL_TIM_MspPostInit>

}
 8001a1c:	bf00      	nop
 8001a1e:	3738      	adds	r7, #56	; 0x38
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	24001a20 	.word	0x24001a20
 8001a28:	40000400 	.word	0x40000400

08001a2c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b090      	sub	sp, #64	; 0x40
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a68:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a6a:	4a3e      	ldr	r2, [pc, #248]	; (8001b64 <MX_TIM5_Init+0x138>)
 8001a6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8001a6e:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a70:	2263      	movs	r2, #99	; 0x63
 8001a72:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a80:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a8e:	4834      	ldr	r0, [pc, #208]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a90:	f00e fd2a 	bl	80104e8 <HAL_TIM_Base_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001a9a:	f000 fa95 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	482d      	ldr	r0, [pc, #180]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001aac:	f00f fce2 	bl	8011474 <HAL_TIM_ConfigClockSource>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001ab6:	f000 fa87 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001aba:	4829      	ldr	r0, [pc, #164]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001abc:	f00e ff54 	bl	8010968 <HAL_TIM_IC_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001ac6:	f000 fa7f 	bl	8001fc8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001aca:	2304      	movs	r3, #4
 8001acc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ace:	2350      	movs	r3, #80	; 0x50
 8001ad0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	481e      	ldr	r0, [pc, #120]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001ae6:	f00f fdbd 	bl	8011664 <HAL_TIM_SlaveConfigSynchro>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8001af0:	f000 fa6a 	bl	8001fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001af8:	2301      	movs	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4814      	ldr	r0, [pc, #80]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001b0e:	f00f fb00 	bl	8011112 <HAL_TIM_IC_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8001b18:	f000 fa56 	bl	8001fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b20:	2302      	movs	r3, #2
 8001b22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2204      	movs	r2, #4
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001b2e:	f00f faf0 	bl	8011112 <HAL_TIM_IC_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8001b38:	f000 fa46 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b44:	463b      	mov	r3, r7
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001b4a:	f010 fc77 	bl	801243c <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8001b54:	f000 fa38 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	3740      	adds	r7, #64	; 0x40
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	24001a6c 	.word	0x24001a6c
 8001b64:	40000c00 	.word	0x40000c00

08001b68 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b7a:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <MX_TIM6_Init+0x6c>)
 8001b7c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b80:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b84:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b9c:	f00e fca4 	bl	80104e8 <HAL_TIM_Base_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ba6:	f000 fa0f 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001bb8:	f010 fc40 	bl	801243c <HAL_TIMEx_MasterConfigSynchronization>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001bc2:	f000 fa01 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	24001ab8 	.word	0x24001ab8
 8001bd4:	40001000 	.word	0x40001000

08001bd8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b090      	sub	sp, #64	; 0x40
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001c14:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c16:	4a40      	ldr	r2, [pc, #256]	; (8001d18 <MX_TIM15_Init+0x140>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c1c:	2263      	movs	r2, #99	; 0x63
 8001c1e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c2c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c3a:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c3c:	2280      	movs	r2, #128	; 0x80
 8001c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001c40:	4834      	ldr	r0, [pc, #208]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c42:	f00e fc51 	bl	80104e8 <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001c4c:	f000 f9bc 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	482d      	ldr	r0, [pc, #180]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c5e:	f00f fc09 	bl	8011474 <HAL_TIM_ConfigClockSource>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001c68:	f000 f9ae 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001c6c:	4829      	ldr	r0, [pc, #164]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c6e:	f00e fe7b 	bl	8010968 <HAL_TIM_IC_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001c78:	f000 f9a6 	bl	8001fc8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c80:	2350      	movs	r3, #80	; 0x50
 8001c82:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	481f      	ldr	r0, [pc, #124]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c98:	f00f fce4 	bl	8011664 <HAL_TIM_SlaveConfigSynchro>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8001ca2:	f000 f991 	bl	8001fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001caa:	2301      	movs	r3, #1
 8001cac:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4815      	ldr	r0, [pc, #84]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001cc0:	f00f fa27 	bl	8011112 <HAL_TIM_IC_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001cca:	f000 f97d 	bl	8001fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001ce0:	f00f fa17 	bl	8011112 <HAL_TIM_IC_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8001cea:	f000 f96d 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001cfc:	f010 fb9e 	bl	801243c <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001d06:	f000 f95f 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	3740      	adds	r7, #64	; 0x40
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	24001b04 	.word	0x24001b04
 8001d18:	40014000 	.word	0x40014000

08001d1c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d22:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <MX_TIM16_Init+0x4c>)
 8001d24:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9999;
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d28:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d2c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d3a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d50:	f00e fbca 	bl	80104e8 <HAL_TIM_Base_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001d5a:	f000 f935 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	24001b50 	.word	0x24001b50
 8001d68:	40014400 	.word	0x40014400

08001d6c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <MX_BDMA_Init+0x3c>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <MX_BDMA_Init+0x3c>)
 8001d7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_BDMA_Init+0x3c>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2081      	movs	r0, #129	; 0x81
 8001d96:	f007 f960 	bl	800905a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001d9a:	2081      	movs	r0, #129	; 0x81
 8001d9c:	f007 f977 	bl	800908e <HAL_NVIC_EnableIRQ>

}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	58024400 	.word	0x58024400

08001dac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <MX_DMA_Init+0x8c>)
 8001db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001db8:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <MX_DMA_Init+0x8c>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <MX_DMA_Init+0x8c>)
 8001dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	200b      	movs	r0, #11
 8001dd6:	f007 f940 	bl	800905a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001dda:	200b      	movs	r0, #11
 8001ddc:	f007 f957 	bl	800908e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	200c      	movs	r0, #12
 8001de6:	f007 f938 	bl	800905a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001dea:	200c      	movs	r0, #12
 8001dec:	f007 f94f 	bl	800908e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2100      	movs	r1, #0
 8001df4:	200d      	movs	r0, #13
 8001df6:	f007 f930 	bl	800905a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001dfa:	200d      	movs	r0, #13
 8001dfc:	f007 f947 	bl	800908e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	200e      	movs	r0, #14
 8001e06:	f007 f928 	bl	800905a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e0a:	200e      	movs	r0, #14
 8001e0c:	f007 f93f 	bl	800908e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	200f      	movs	r0, #15
 8001e16:	f007 f920 	bl	800905a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e1a:	200f      	movs	r0, #15
 8001e1c:	f007 f937 	bl	800908e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	2010      	movs	r0, #16
 8001e26:	f007 f918 	bl	800905a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e2a:	2010      	movs	r0, #16
 8001e2c:	f007 f92f 	bl	800908e <HAL_NVIC_EnableIRQ>

}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	58024400 	.word	0x58024400

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e52:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e58:	4a57      	ldr	r2, [pc, #348]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e5a:	f043 0310 	orr.w	r3, r3, #16
 8001e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e62:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e70:	4b51      	ldr	r3, [pc, #324]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e76:	4a50      	ldr	r2, [pc, #320]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e80:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8e:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e94:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9e:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb2:	4a41      	ldr	r2, [pc, #260]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ebc:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed0:	4a39      	ldr	r2, [pc, #228]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001ed2:	f043 0302 	orr.w	r3, r3, #2
 8001ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eda:	4b37      	ldr	r3, [pc, #220]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eee:	4a32      	ldr	r2, [pc, #200]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2168      	movs	r1, #104	; 0x68
 8001f0a:	482c      	ldr	r0, [pc, #176]	; (8001fbc <MX_GPIO_Init+0x180>)
 8001f0c:	f00a f8de 	bl	800c0cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2120      	movs	r1, #32
 8001f14:	482a      	ldr	r0, [pc, #168]	; (8001fc0 <MX_GPIO_Init+0x184>)
 8001f16:	f00a f8d9 	bl	800c0cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4825      	ldr	r0, [pc, #148]	; (8001fc4 <MX_GPIO_Init+0x188>)
 8001f2e:	f009 ff05 	bl	800bd3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PID_MODE_INPUT_Pin */
  GPIO_InitStruct.Pin = PID_MODE_INPUT_Pin;
 8001f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f38:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PID_MODE_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <MX_GPIO_Init+0x188>)
 8001f4a:	f009 fef7 	bl	800bd3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8001f4e:	2368      	movs	r3, #104	; 0x68
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	4815      	ldr	r0, [pc, #84]	; (8001fbc <MX_GPIO_Init+0x180>)
 8001f66:	f009 fee9 	bl	800bd3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Output_Pin */
  GPIO_InitStruct.Pin = Manual_Output_Pin;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Manual_Output_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480f      	ldr	r0, [pc, #60]	; (8001fc0 <MX_GPIO_Init+0x184>)
 8001f82:	f009 fedb 	bl	800bd3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	4619      	mov	r1, r3
 8001f98:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <MX_GPIO_Init+0x184>)
 8001f9a:	f009 fecf 	bl	800bd3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2017      	movs	r0, #23
 8001fa4:	f007 f859 	bl	800905a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fa8:	2017      	movs	r0, #23
 8001faa:	f007 f870 	bl	800908e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fae:	bf00      	nop
 8001fb0:	3730      	adds	r7, #48	; 0x30
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	58024400 	.word	0x58024400
 8001fbc:	58020c00 	.word	0x58020c00
 8001fc0:	58020400 	.word	0x58020400
 8001fc4:	58021000 	.word	0x58021000

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <Error_Handler+0x8>

08001fd2 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bfb8      	it	lt
 8001fe0:	425b      	neglt	r3, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <_ZN3ros3MsgC1Ev+0x1c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	08017658 	.word	0x08017658

08002030 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
      data()
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ffe8 	bl	8002010 <_ZN3ros3MsgC1Ev>
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3304      	adds	r3, #4
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ffcf 	bl	8001fee <_ZN3ros4TimeC1Ev>
    {
    }
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	08017640 	.word	0x08017640

08002060 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6859      	ldr	r1, [r3, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4413      	add	r3, r2
 8002078:	b2ca      	uxtb	r2, r1
 800207a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0a19      	lsrs	r1, r3, #8
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4413      	add	r3, r2
 800208a:	b2ca      	uxtb	r2, r1
 800208c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	0c19      	lsrs	r1, r3, #16
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3302      	adds	r3, #2
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	4413      	add	r3, r2
 800209c:	b2ca      	uxtb	r2, r1
 800209e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	0e19      	lsrs	r1, r3, #24
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	3303      	adds	r3, #3
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	b2ca      	uxtb	r2, r1
 80020b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3304      	adds	r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	b2ca      	uxtb	r2, r1
 80020c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	0a19      	lsrs	r1, r3, #8
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3301      	adds	r3, #1
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	b2ca      	uxtb	r2, r1
 80020d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	0c19      	lsrs	r1, r3, #16
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3302      	adds	r3, #2
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	b2ca      	uxtb	r2, r1
 80020e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0e19      	lsrs	r1, r3, #24
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3303      	adds	r3, #3
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	b2ca      	uxtb	r2, r1
 80020fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3304      	adds	r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
      return offset;
 8002102:	68fb      	ldr	r3, [r7, #12]
    }
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3301      	adds	r3, #1
 8002134:	6839      	ldr	r1, [r7, #0]
 8002136:	440b      	add	r3, r1
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3302      	adds	r3, #2
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	440b      	add	r3, r1
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3303      	adds	r3, #3
 8002160:	6839      	ldr	r1, [r7, #0]
 8002162:	440b      	add	r3, r1
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	061b      	lsls	r3, r3, #24
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3304      	adds	r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3301      	adds	r3, #1
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	440b      	add	r3, r1
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3302      	adds	r3, #2
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	440b      	add	r3, r1
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3303      	adds	r3, #3
 80021b6:	6839      	ldr	r1, [r7, #0]
 80021b8:	440b      	add	r3, r1
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3304      	adds	r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]
     return offset;
 80021ca:	68fb      	ldr	r3, [r7, #12]
    }
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	08017168 	.word	0x08017168

080021f4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	08017178 	.word	0x08017178

08002210 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fef8 	bl	8002010 <_ZN3ros3MsgC1Ev>
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002230:	609a      	str	r2, [r3, #8]
      message_type(""),
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a07      	ldr	r2, [pc, #28]	; (8002254 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002236:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a06      	ldr	r2, [pc, #24]	; (8002254 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800223c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	615a      	str	r2, [r3, #20]
    {
    }
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	08017628 	.word	0x08017628
 8002254:	0801719c 	.word	0x0801719c

08002258 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	8899      	ldrh	r1, [r3, #4]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	4413      	add	r3, r2
 8002270:	b2ca      	uxtb	r2, r1
 8002272:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	889b      	ldrh	r3, [r3, #4]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	b299      	uxth	r1, r3
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3301      	adds	r3, #1
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	4413      	add	r3, r2
 8002284:	b2ca      	uxtb	r2, r1
 8002286:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	3302      	adds	r3, #2
 800228c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f874 	bl	8000380 <strlen>
 8002298:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	69b9      	ldr	r1, [r7, #24]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 ff14 	bl	80050d0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3304      	adds	r3, #4
 80022ac:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	18d0      	adds	r0, r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4619      	mov	r1, r3
 80022bc:	f013 fa81 	bl	80157c2 <memcpy>
      offset += length_topic_name;
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4413      	add	r3, r2
 80022c6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f857 	bl	8000380 <strlen>
 80022d2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	6979      	ldr	r1, [r7, #20]
 80022dc:	4618      	mov	r0, r3
 80022de:	f002 fef7 	bl	80050d0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	18d0      	adds	r0, r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f013 fa64 	bl	80157c2 <memcpy>
      offset += length_message_type;
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4413      	add	r3, r2
 8002300:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe f83a 	bl	8000380 <strlen>
 800230c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	4413      	add	r3, r2
 8002314:	6939      	ldr	r1, [r7, #16]
 8002316:	4618      	mov	r0, r3
 8002318:	f002 feda 	bl	80050d0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	3304      	adds	r3, #4
 8002320:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	18d0      	adds	r0, r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4619      	mov	r1, r3
 8002330:	f013 fa47 	bl	80157c2 <memcpy>
      offset += length_md5sum;
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002342:	68f9      	ldr	r1, [r7, #12]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	4413      	add	r3, r2
 800234a:	b2ca      	uxtb	r2, r1
 800234c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	0a19      	lsrs	r1, r3, #8
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3301      	adds	r3, #1
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	4413      	add	r3, r2
 800235a:	b2ca      	uxtb	r2, r1
 800235c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	0c19      	lsrs	r1, r3, #16
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3302      	adds	r3, #2
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	4413      	add	r3, r2
 800236a:	b2ca      	uxtb	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	0e19      	lsrs	r1, r3, #24
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3303      	adds	r3, #3
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	4413      	add	r3, r2
 800237a:	b2ca      	uxtb	r2, r1
 800237c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	61fb      	str	r3, [r7, #28]
      return offset;
 8002384:	69fb      	ldr	r3, [r7, #28]
    }
 8002386:	4618      	mov	r0, r3
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800238e:	b580      	push	{r7, lr}
 8002390:	b08a      	sub	sp, #40	; 0x28
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	889b      	ldrh	r3, [r3, #4]
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	3301      	adds	r3, #1
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	440b      	add	r3, r1
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	b21b      	sxth	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	3302      	adds	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	441a      	add	r2, r3
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 fe97 	bl	800510e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	3304      	adds	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	e00b      	b.n	8002404 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	441a      	add	r2, r3
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	3b01      	subs	r3, #1
 80023f6:	6839      	ldr	r1, [r7, #0]
 80023f8:	440b      	add	r3, r1
 80023fa:	7812      	ldrb	r2, [r2, #0]
 80023fc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	3301      	adds	r3, #1
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	4413      	add	r3, r2
 800240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240c:	429a      	cmp	r2, r3
 800240e:	d3ed      	bcc.n	80023ec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4413      	add	r3, r2
 8002416:	3b01      	subs	r3, #1
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	4413      	add	r3, r2
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	3b01      	subs	r3, #1
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	441a      	add	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	4413      	add	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	441a      	add	r2, r3
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f002 fe64 	bl	800510e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	3304      	adds	r3, #4
 800244a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	e00b      	b.n	800246a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	441a      	add	r2, r3
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	3b01      	subs	r3, #1
 800245c:	6839      	ldr	r1, [r7, #0]
 800245e:	440b      	add	r3, r1
 8002460:	7812      	ldrb	r2, [r2, #0]
 8002462:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	3301      	adds	r3, #1
 8002468:	623b      	str	r3, [r7, #32]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	429a      	cmp	r2, r3
 8002474:	d3ed      	bcc.n	8002452 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	3b01      	subs	r3, #1
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4413      	add	r3, r2
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	3b01      	subs	r3, #1
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	441a      	add	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	441a      	add	r2, r3
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 fe31 	bl	800510e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	3304      	adds	r3, #4
 80024b0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e00b      	b.n	80024d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	441a      	add	r2, r3
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	6839      	ldr	r1, [r7, #0]
 80024c4:	440b      	add	r3, r1
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3301      	adds	r3, #1
 80024ce:	61fb      	str	r3, [r7, #28]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4413      	add	r3, r2
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3ed      	bcc.n	80024b8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	3b01      	subs	r3, #1
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	441a      	add	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	6839      	ldr	r1, [r7, #0]
 800250a:	440a      	add	r2, r1
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	3301      	adds	r3, #1
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	440b      	add	r3, r1
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	4313      	orrs	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3302      	adds	r3, #2
 800252a:	6839      	ldr	r1, [r7, #0]
 800252c:	440b      	add	r3, r1
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	041b      	lsls	r3, r3, #16
 8002532:	4313      	orrs	r3, r2
 8002534:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	3303      	adds	r3, #3
 800253c:	6839      	ldr	r1, [r7, #0]
 800253e:	440b      	add	r3, r1
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	061b      	lsls	r3, r3, #24
 8002544:	4313      	orrs	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	3304      	adds	r3, #4
 8002552:	61bb      	str	r3, [r7, #24]
     return offset;
 8002554:	69bb      	ldr	r3, [r7, #24]
    }
 8002556:	4618      	mov	r0, r3
 8002558:	3728      	adds	r7, #40	; 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	080171a0 	.word	0x080171a0

0800257c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	080171bc 	.word	0x080171bc

08002598 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fd34 	bl	8002010 <_ZN3ros3MsgC1Ev>
 80025a8:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
      level(0),
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	711a      	strb	r2, [r3, #4]
      msg("")
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80025b8:	609a      	str	r2, [r3, #8]
    {
    }
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	08017610 	.word	0x08017610
 80025c8:	0801719c 	.word	0x0801719c

080025cc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	7912      	ldrb	r2, [r2, #4]
 80025e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	3301      	adds	r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd fec5 	bl	8000380 <strlen>
 80025f6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	4618      	mov	r0, r3
 8002602:	f002 fd65 	bl	80050d0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3304      	adds	r3, #4
 800260a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	18d0      	adds	r0, r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	4619      	mov	r1, r3
 800261a:	f013 f8d2 	bl	80157c2 <memcpy>
      offset += length_msg;
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4413      	add	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
      return offset;
 8002626:	68fb      	ldr	r3, [r7, #12]
    }
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	4413      	add	r3, r2
 8002644:	781a      	ldrb	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	3301      	adds	r3, #1
 800264e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	441a      	add	r2, r3
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fd56 	bl	800510e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	3304      	adds	r3, #4
 8002666:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	e00b      	b.n	8002686 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	441a      	add	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3b01      	subs	r3, #1
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	440b      	add	r3, r1
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3301      	adds	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	429a      	cmp	r2, r3
 8002690:	d3ed      	bcc.n	800266e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	3b01      	subs	r3, #1
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	441a      	add	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
     return offset;
 80026b6:	693b      	ldr	r3, [r7, #16]
    }
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	080171e0 	.word	0x080171e0

080026dc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	080171f4 	.word	0x080171f4

080026f8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fc84 	bl	8002010 <_ZN3ros3MsgC1Ev>
 8002708:	4a11      	ldr	r2, [pc, #68]	; (8002750 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	080175f8 	.word	0x080175f8

08002754 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	4413      	add	r3, r2
 800276c:	b2ca      	uxtb	r2, r1
 800276e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	0a19      	lsrs	r1, r3, #8
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	3301      	adds	r3, #1
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4413      	add	r3, r2
 800277e:	b2ca      	uxtb	r2, r1
 8002780:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	0c19      	lsrs	r1, r3, #16
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	3302      	adds	r3, #2
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	4413      	add	r3, r2
 8002790:	b2ca      	uxtb	r2, r1
 8002792:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0e19      	lsrs	r1, r3, #24
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	3303      	adds	r3, #3
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	b2ca      	uxtb	r2, r1
 80027a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	3304      	adds	r3, #4
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80027ac:	2300      	movs	r3, #0
 80027ae:	623b      	str	r3, [r7, #32]
 80027b0:	e02a      	b.n	8002808 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80027c0:	6939      	ldr	r1, [r7, #16]
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	b2ca      	uxtb	r2, r1
 80027ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	0a19      	lsrs	r1, r3, #8
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	3301      	adds	r3, #1
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	b2ca      	uxtb	r2, r1
 80027da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	0c19      	lsrs	r1, r3, #16
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	3302      	adds	r3, #2
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	b2ca      	uxtb	r2, r1
 80027ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	0e19      	lsrs	r1, r3, #24
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	3303      	adds	r3, #3
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	b2ca      	uxtb	r2, r1
 80027fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	3304      	adds	r3, #4
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	3301      	adds	r3, #1
 8002806:	623b      	str	r3, [r7, #32]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	6a3a      	ldr	r2, [r7, #32]
 800280e:	429a      	cmp	r2, r3
 8002810:	d3cf      	bcc.n	80027b2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6919      	ldr	r1, [r3, #16]
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4413      	add	r3, r2
 800281c:	b2ca      	uxtb	r2, r1
 800281e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	0a19      	lsrs	r1, r3, #8
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	3301      	adds	r3, #1
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	b2ca      	uxtb	r2, r1
 8002830:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	0c19      	lsrs	r1, r3, #16
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	3302      	adds	r3, #2
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	4413      	add	r3, r2
 8002840:	b2ca      	uxtb	r2, r1
 8002842:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	0e19      	lsrs	r1, r3, #24
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	3303      	adds	r3, #3
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	4413      	add	r3, r2
 8002852:	b2ca      	uxtb	r2, r1
 8002854:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	3304      	adds	r3, #4
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	e02a      	b.n	80028b8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002870:	68f9      	ldr	r1, [r7, #12]
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4413      	add	r3, r2
 8002878:	b2ca      	uxtb	r2, r1
 800287a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	0a19      	lsrs	r1, r3, #8
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	3301      	adds	r3, #1
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	4413      	add	r3, r2
 8002888:	b2ca      	uxtb	r2, r1
 800288a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	0c19      	lsrs	r1, r3, #16
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	3302      	adds	r3, #2
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	4413      	add	r3, r2
 8002898:	b2ca      	uxtb	r2, r1
 800289a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	0e19      	lsrs	r1, r3, #24
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	3303      	adds	r3, #3
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	b2ca      	uxtb	r2, r1
 80028aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	3304      	adds	r3, #4
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3301      	adds	r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3cf      	bcc.n	8002862 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69d9      	ldr	r1, [r3, #28]
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	b2ca      	uxtb	r2, r1
 80028ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	0a19      	lsrs	r1, r3, #8
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	3301      	adds	r3, #1
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	b2ca      	uxtb	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	0c19      	lsrs	r1, r3, #16
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	3302      	adds	r3, #2
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	b2ca      	uxtb	r2, r1
 80028f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	0e19      	lsrs	r1, r3, #24
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	3303      	adds	r3, #3
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	4413      	add	r3, r2
 8002902:	b2ca      	uxtb	r2, r1
 8002904:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	3304      	adds	r3, #4
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	e027      	b.n	8002962 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fd2e 	bl	8000380 <strlen>
 8002924:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	4413      	add	r3, r2
 800292c:	6979      	ldr	r1, [r7, #20]
 800292e:	4618      	mov	r0, r3
 8002930:	f002 fbce 	bl	80050d0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	3304      	adds	r3, #4
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	18d0      	adds	r0, r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4619      	mov	r1, r3
 8002950:	f012 ff37 	bl	80157c2 <memcpy>
      offset += length_stringsi;
 8002954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	4413      	add	r3, r2
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	3301      	adds	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	429a      	cmp	r2, r3
 800296a:	d3d2      	bcc.n	8002912 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800296e:	4618      	mov	r0, r3
 8002970:	3728      	adds	r7, #40	; 0x28
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002976:	b580      	push	{r7, lr}
 8002978:	b08e      	sub	sp, #56	; 0x38
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4413      	add	r3, r2
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	3301      	adds	r3, #1
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	4413      	add	r3, r2
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	6a3a      	ldr	r2, [r7, #32]
 800299c:	4313      	orrs	r3, r2
 800299e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	3302      	adds	r3, #2
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	6a3a      	ldr	r2, [r7, #32]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80029b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b4:	3303      	adds	r3, #3
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	061b      	lsls	r3, r3, #24
 80029be:	6a3a      	ldr	r2, [r7, #32]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	3304      	adds	r3, #4
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	6a3a      	ldr	r2, [r7, #32]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d90a      	bls.n	80029ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f011 ffa0 	bl	8014924 <realloc>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a3a      	ldr	r2, [r7, #32]
 80029ee:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80029f0:	2300      	movs	r3, #0
 80029f2:	633b      	str	r3, [r7, #48]	; 0x30
 80029f4:	e035      	b.n	8002a62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029fe:	6839      	ldr	r1, [r7, #0]
 8002a00:	440a      	add	r2, r1
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	6839      	ldr	r1, [r7, #0]
 8002a10:	440b      	add	r3, r1
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1e:	3302      	adds	r3, #2
 8002a20:	6839      	ldr	r1, [r7, #0]
 8002a22:	440b      	add	r3, r1
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	041b      	lsls	r3, r3, #16
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a30:	3303      	adds	r3, #3
 8002a32:	6839      	ldr	r1, [r7, #0]
 8002a34:	440b      	add	r3, r1
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a46:	3304      	adds	r3, #4
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	3208      	adds	r2, #8
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	3301      	adds	r3, #1
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d3c4      	bcc.n	80029f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a78:	3301      	adds	r3, #1
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9c:	3303      	adds	r3, #3
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	3304      	adds	r3, #4
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d90a      	bls.n	8002ad2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f011 ff2c 	bl	8014924 <realloc>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002adc:	e035      	b.n	8002b4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae6:	6839      	ldr	r1, [r7, #0]
 8002ae8:	440a      	add	r2, r1
 8002aea:	7812      	ldrb	r2, [r2, #0]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	3301      	adds	r3, #1
 8002af6:	6839      	ldr	r1, [r7, #0]
 8002af8:	440b      	add	r3, r1
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b06:	3302      	adds	r3, #2
 8002b08:	6839      	ldr	r1, [r7, #0]
 8002b0a:	440b      	add	r3, r1
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	041b      	lsls	r3, r3, #16
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b18:	3303      	adds	r3, #3
 8002b1a:	6839      	ldr	r1, [r7, #0]
 8002b1c:	440b      	add	r3, r1
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2e:	3304      	adds	r3, #4
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	3214      	adds	r2, #20
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	3301      	adds	r3, #1
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d3c4      	bcc.n	8002ade <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b60:	3301      	adds	r3, #1
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	4413      	add	r3, r2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	3302      	adds	r3, #2
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	041b      	lsls	r3, r3, #16
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	3303      	adds	r3, #3
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b96:	3304      	adds	r3, #4
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d90a      	bls.n	8002bba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f011 feb8 	bl	8014924 <realloc>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc4:	e03e      	b.n	8002c44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	441a      	add	r2, r3
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fa9b 	bl	800510e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bda:	3304      	adds	r3, #4
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	e00b      	b.n	8002bfc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	441a      	add	r2, r3
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	3b01      	subs	r3, #1
 8002bee:	6839      	ldr	r1, [r7, #0]
 8002bf0:	440b      	add	r3, r1
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4413      	add	r3, r2
 8002c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3ed      	bcc.n	8002be4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	441a      	add	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4413      	add	r3, r2
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	3220      	adds	r2, #32
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	3301      	adds	r3, #1
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d3bb      	bcc.n	8002bc6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002c50:	4618      	mov	r0, r3
 8002c52:	3738      	adds	r7, #56	; 0x38
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	080174d4 	.word	0x080174d4

08002c74 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	08017218 	.word	0x08017218

08002c90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	611a      	str	r2, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68d8      	ldr	r0, [r3, #12]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6891      	ldr	r1, [r2, #8]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	4798      	blx	r3
 8002cdc:	4603      	mov	r3, r0
  };
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
  }
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a4b      	ldr	r2, [pc, #300]	; (8002e40 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d077      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a48      	ldr	r2, [pc, #288]	; (8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d06f      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a45      	ldr	r2, [pc, #276]	; (8002e48 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d067      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a42      	ldr	r2, [pc, #264]	; (8002e4c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d05f      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a3f      	ldr	r2, [pc, #252]	; (8002e50 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d057      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3c      	ldr	r2, [pc, #240]	; (8002e54 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d04f      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a39      	ldr	r2, [pc, #228]	; (8002e58 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d047      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a36      	ldr	r2, [pc, #216]	; (8002e5c <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d03f      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a33      	ldr	r2, [pc, #204]	; (8002e60 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d037      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a30      	ldr	r2, [pc, #192]	; (8002e64 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d02f      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2d      	ldr	r2, [pc, #180]	; (8002e68 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d027      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01f      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d017      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a24      	ldr	r2, [pc, #144]	; (8002e74 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00f      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d10a      	bne.n	8002e1e <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1c:	e009      	b.n	8002e32 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40020010 	.word	0x40020010
 8002e44:	40020028 	.word	0x40020028
 8002e48:	40020040 	.word	0x40020040
 8002e4c:	40020058 	.word	0x40020058
 8002e50:	40020070 	.word	0x40020070
 8002e54:	40020088 	.word	0x40020088
 8002e58:	400200a0 	.word	0x400200a0
 8002e5c:	400200b8 	.word	0x400200b8
 8002e60:	40020410 	.word	0x40020410
 8002e64:	40020428 	.word	0x40020428
 8002e68:	40020440 	.word	0x40020440
 8002e6c:	40020458 	.word	0x40020458
 8002e70:	40020470 	.word	0x40020470
 8002e74:	40020488 	.word	0x40020488
 8002e78:	400204a0 	.word	0x400204a0
 8002e7c:	400204b8 	.word	0x400204b8

08002e80 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <_ZN13STM32HardwareC1Ev+0x34>)
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	24001468 	.word	0x24001468

08002eb8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f804 	bl	8002ece <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f00f fcb4 	bl	8012850 <HAL_UART_Receive_DMA>
    }
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002efc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff fefb 	bl	8002d00 <_ZN13STM32Hardware10getRdmaIndEv>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	429c      	cmp	r4, r3
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d012      	beq.n	8002f40 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f20:	1c59      	adds	r1, r3, #1
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	791b      	ldrb	r3, [r3, #4]
 8002f2e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002f40:	68fb      	ldr	r3, [r7, #12]
    }
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd90      	pop	{r4, r7, pc}
	...

08002f4c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d108      	bne.n	8002f72 <_ZN13STM32Hardware5flushEv+0x26>
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f083 0301 	eor.w	r3, r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <_ZN13STM32Hardware5flushEv+0x26>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <_ZN13STM32Hardware5flushEv+0x28>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d03f      	beq.n	8002ff8 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002f78:	4b21      	ldr	r3, [pc, #132]	; (8003000 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d031      	beq.n	8002ff2 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d20a      	bcs.n	8002fb4 <_ZN13STM32Hardware5flushEv+0x68>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	e006      	b.n	8002fc2 <_ZN13STM32Hardware5flushEv+0x76>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002fce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	89fa      	ldrh	r2, [r7, #14]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f00f fbb9 	bl	8012750 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002fe4:	89fb      	ldrh	r3, [r7, #14]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002ff2:	4b03      	ldr	r3, [pc, #12]	; (8003000 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
      }
    }
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	24001b9c 	.word	0x24001b9c

08003004 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
      int n = length;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301a:	bfa8      	it	ge
 800301c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8003020:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003028:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	4293      	cmp	r3, r2
 8003030:	bf28      	it	cs
 8003032:	4613      	movcs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800303c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	4618      	mov	r0, r3
 800304a:	f012 fbba 	bl	80157c2 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	4413      	add	r3, r2
 8003058:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	429a      	cmp	r2, r3
 8003068:	d00b      	beq.n	8003082 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	18d1      	adds	r1, r2, r3
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	461a      	mov	r2, r3
 800307e:	f012 fba0 	bl	80157c2 <memcpy>
      }

      flush();
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff ff62 	bl	8002f4c <_ZN13STM32Hardware5flushEv>
    }
 8003088:	bf00      	nop
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	f004 f948 	bl	800732c <HAL_GetTick>
 800309c:	4603      	mov	r3, r0
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe ffac 	bl	8002010 <_ZN3ros3MsgC1Ev>
 80030b8:	4a08      	ldr	r2, [pc, #32]	; (80030dc <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	601a      	str	r2, [r3, #0]
      label(""),
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80030c2:	605a      	str	r2, [r3, #4]
      size(0),
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
      stride(0)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	60da      	str	r2, [r3, #12]
    {
    }
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	080175b4 	.word	0x080175b4
 80030e0:	0801719c 	.word	0x0801719c

080030e4 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd f942 	bl	8000380 <strlen>
 80030fc:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	4413      	add	r3, r2
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	4618      	mov	r0, r3
 8003108:	f001 ffe2 	bl	80050d0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3304      	adds	r3, #4
 8003110:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	18d0      	adds	r0, r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	4619      	mov	r1, r3
 8003120:	f012 fb4f 	bl	80157c2 <memcpy>
      offset += length_label;
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4413      	add	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6899      	ldr	r1, [r3, #8]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	4413      	add	r3, r2
 8003136:	b2ca      	uxtb	r2, r1
 8003138:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0a19      	lsrs	r1, r3, #8
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3301      	adds	r3, #1
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	4413      	add	r3, r2
 8003148:	b2ca      	uxtb	r2, r1
 800314a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	0c19      	lsrs	r1, r3, #16
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3302      	adds	r3, #2
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	4413      	add	r3, r2
 800315a:	b2ca      	uxtb	r2, r1
 800315c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0e19      	lsrs	r1, r3, #24
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3303      	adds	r3, #3
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	4413      	add	r3, r2
 800316c:	b2ca      	uxtb	r2, r1
 800316e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3304      	adds	r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68d9      	ldr	r1, [r3, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4413      	add	r3, r2
 8003180:	b2ca      	uxtb	r2, r1
 8003182:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0a19      	lsrs	r1, r3, #8
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3301      	adds	r3, #1
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	4413      	add	r3, r2
 8003192:	b2ca      	uxtb	r2, r1
 8003194:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	0c19      	lsrs	r1, r3, #16
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3302      	adds	r3, #2
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	b2ca      	uxtb	r2, r1
 80031a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	0e19      	lsrs	r1, r3, #24
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3303      	adds	r3, #3
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	4413      	add	r3, r2
 80031b6:	b2ca      	uxtb	r2, r1
 80031b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3304      	adds	r3, #4
 80031be:	60fb      	str	r3, [r7, #12]
      return offset;
 80031c0:	68fb      	ldr	r3, [r7, #12]
    }
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	441a      	add	r2, r3
 80031de:	f107 030c 	add.w	r3, r7, #12
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f001 ff92 	bl	800510e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	3304      	adds	r3, #4
 80031ee:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e00b      	b.n	800320e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	441a      	add	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	3b01      	subs	r3, #1
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	440b      	add	r3, r1
 8003204:	7812      	ldrb	r2, [r2, #0]
 8003206:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	3301      	adds	r3, #1
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	429a      	cmp	r2, r3
 8003218:	d3ed      	bcc.n	80031f6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	3b01      	subs	r3, #1
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	4413      	add	r3, r2
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	3b01      	subs	r3, #1
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	3301      	adds	r3, #1
 8003254:	6839      	ldr	r1, [r7, #0]
 8003256:	440b      	add	r3, r1
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	3302      	adds	r3, #2
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	440b      	add	r3, r1
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	3303      	adds	r3, #3
 8003280:	6839      	ldr	r1, [r7, #0]
 8003282:	440b      	add	r3, r1
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	3304      	adds	r3, #4
 8003292:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	4413      	add	r3, r2
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	3301      	adds	r3, #1
 80032aa:	6839      	ldr	r1, [r7, #0]
 80032ac:	440b      	add	r3, r1
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	3302      	adds	r3, #2
 80032c0:	6839      	ldr	r1, [r7, #0]
 80032c2:	440b      	add	r3, r1
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	3303      	adds	r3, #3
 80032d6:	6839      	ldr	r1, [r7, #0]
 80032d8:	440b      	add	r3, r1
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	3304      	adds	r3, #4
 80032e8:	613b      	str	r3, [r7, #16]
     return offset;
 80032ea:	693b      	ldr	r3, [r7, #16]
    }
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	0801723c 	.word	0x0801723c

08003310 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	4b03      	ldr	r3, [pc, #12]	; (8003328 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	0801725c 	.word	0x0801725c

0800332c <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fe6a 	bl	8002010 <_ZN3ros3MsgC1Ev>
 800333c:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3308      	adds	r3, #8
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff feab 	bl	80030a8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	61da      	str	r2, [r3, #28]
    {
    }
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	0801759c 	.word	0x0801759c

0800336c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	4413      	add	r3, r2
 8003384:	b2ca      	uxtb	r2, r1
 8003386:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	0a19      	lsrs	r1, r3, #8
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3301      	adds	r3, #1
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	4413      	add	r3, r2
 8003396:	b2ca      	uxtb	r2, r1
 8003398:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	0c19      	lsrs	r1, r3, #16
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3302      	adds	r3, #2
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	b2ca      	uxtb	r2, r1
 80033aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0e19      	lsrs	r1, r3, #24
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3303      	adds	r3, #3
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	b2ca      	uxtb	r2, r1
 80033bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3304      	adds	r3, #4
 80033c2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	e017      	b.n	80033fa <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	18d0      	adds	r0, r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699a      	ldr	r2, [r3, #24]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	4413      	add	r3, r2
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	440a      	add	r2, r1
 80033e8:	4611      	mov	r1, r2
 80033ea:	4798      	blx	r3
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4413      	add	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	3301      	adds	r3, #1
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d3e2      	bcc.n	80033ca <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69d9      	ldr	r1, [r3, #28]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	4413      	add	r3, r2
 800340e:	b2ca      	uxtb	r2, r1
 8003410:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	0a19      	lsrs	r1, r3, #8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3301      	adds	r3, #1
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	4413      	add	r3, r2
 8003420:	b2ca      	uxtb	r2, r1
 8003422:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	0c19      	lsrs	r1, r3, #16
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3302      	adds	r3, #2
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	4413      	add	r3, r2
 8003432:	b2ca      	uxtb	r2, r1
 8003434:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	0e19      	lsrs	r1, r3, #24
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3303      	adds	r3, #3
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	4413      	add	r3, r2
 8003444:	b2ca      	uxtb	r2, r1
 8003446:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3304      	adds	r3, #4
 800344c:	60fb      	str	r3, [r7, #12]
      return offset;
 800344e:	68fb      	ldr	r3, [r7, #12]
    }
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	4413      	add	r3, r2
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	3301      	adds	r3, #1
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	4413      	add	r3, r2
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3302      	adds	r3, #2
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	4413      	add	r3, r2
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	3303      	adds	r3, #3
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	4413      	add	r3, r2
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	061b      	lsls	r3, r3, #24
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	3304      	adds	r3, #4
 80034aa:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d90a      	bls.n	80034cc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f011 fa2f 	bl	8014924 <realloc>
 80034c6:	4602      	mov	r2, r0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	e01a      	b.n	800350e <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f103 0008 	add.w	r0, r3, #8
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	4413      	add	r3, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	f7ff fe70 	bl	80031ca <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 80034ea:	4602      	mov	r2, r0
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4413      	add	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	18d0      	adds	r0, r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3308      	adds	r3, #8
 8003500:	2210      	movs	r2, #16
 8003502:	4619      	mov	r1, r3
 8003504:	f012 f95d 	bl	80157c2 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	3301      	adds	r3, #1
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	429a      	cmp	r2, r3
 8003516:	d3df      	bcc.n	80034d8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	4413      	add	r3, r2
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	3301      	adds	r3, #1
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	440b      	add	r3, r1
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	3302      	adds	r3, #2
 8003544:	6839      	ldr	r1, [r7, #0]
 8003546:	440b      	add	r3, r1
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	041b      	lsls	r3, r3, #16
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	3303      	adds	r3, #3
 800355a:	6839      	ldr	r1, [r7, #0]
 800355c:	440b      	add	r3, r1
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3304      	adds	r3, #4
 800356c:	617b      	str	r3, [r7, #20]
     return offset;
 800356e:	697b      	ldr	r3, [r7, #20]
    }
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	08017280 	.word	0x08017280

08003594 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	0801729c 	.word	0x0801729c

080035b0 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fd28 	bl	8002010 <_ZN3ros3MsgC1Ev>
 80035c0:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
      layout(),
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff feae 	bl	800332c <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	08017584 	.word	0x08017584

080035f4 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	1d18      	adds	r0, r3, #4
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	4413      	add	r3, r2
 800360c:	4619      	mov	r1, r3
 800360e:	f7ff fead 	bl	800336c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8003612:	4602      	mov	r2, r0
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4413      	add	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	4413      	add	r3, r2
 8003624:	b2ca      	uxtb	r2, r1
 8003626:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	0a19      	lsrs	r1, r3, #8
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	3301      	adds	r3, #1
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	4413      	add	r3, r2
 8003636:	b2ca      	uxtb	r2, r1
 8003638:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	0c19      	lsrs	r1, r3, #16
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3302      	adds	r3, #2
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	4413      	add	r3, r2
 8003648:	b2ca      	uxtb	r2, r1
 800364a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	0e19      	lsrs	r1, r3, #24
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	3303      	adds	r3, #3
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	4413      	add	r3, r2
 800365a:	b2ca      	uxtb	r2, r1
 800365c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3304      	adds	r3, #4
 8003662:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	e02a      	b.n	80036c0 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8003678:	68f9      	ldr	r1, [r7, #12]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	4413      	add	r3, r2
 8003680:	b2ca      	uxtb	r2, r1
 8003682:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	0a19      	lsrs	r1, r3, #8
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	3301      	adds	r3, #1
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	4413      	add	r3, r2
 8003690:	b2ca      	uxtb	r2, r1
 8003692:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	0c19      	lsrs	r1, r3, #16
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3302      	adds	r3, #2
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	b2ca      	uxtb	r2, r1
 80036a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	0e19      	lsrs	r1, r3, #24
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	3303      	adds	r3, #3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	4413      	add	r3, r2
 80036b0:	b2ca      	uxtb	r2, r1
 80036b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3304      	adds	r3, #4
 80036b8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3301      	adds	r3, #1
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3cf      	bcc.n	800366a <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 80036ca:	697b      	ldr	r3, [r7, #20]
    }
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	1d18      	adds	r0, r3, #4
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	4413      	add	r3, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	f7ff feb3 	bl	8003458 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 80036f2:	4602      	mov	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	4413      	add	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3301      	adds	r3, #1
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	4413      	add	r3, r2
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3302      	adds	r3, #2
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	4413      	add	r3, r2
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3303      	adds	r3, #3
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	4413      	add	r3, r2
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	061b      	lsls	r3, r3, #24
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3304      	adds	r3, #4
 800373e:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	429a      	cmp	r2, r3
 8003748:	d90a      	bls.n	8003760 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4619      	mov	r1, r3
 8003754:	4610      	mov	r0, r2
 8003756:	f011 f8e5 	bl	8014924 <realloc>
 800375a:	4602      	mov	r2, r0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	e035      	b.n	80037d8 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	6839      	ldr	r1, [r7, #0]
 8003776:	440a      	add	r2, r1
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	4313      	orrs	r3, r2
 800377c:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3301      	adds	r3, #1
 8003784:	6839      	ldr	r1, [r7, #0]
 8003786:	440b      	add	r3, r1
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	4313      	orrs	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	3302      	adds	r3, #2
 8003796:	6839      	ldr	r1, [r7, #0]
 8003798:	440b      	add	r3, r1
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	4313      	orrs	r3, r2
 80037a0:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3303      	adds	r3, #3
 80037a8:	6839      	ldr	r1, [r7, #0]
 80037aa:	440b      	add	r3, r1
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	061b      	lsls	r3, r3, #24
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3304      	adds	r3, #4
 80037be:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	3228      	adds	r2, #40	; 0x28
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3301      	adds	r3, #1
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d3c4      	bcc.n	800376c <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 80037e2:	697b      	ldr	r3, [r7, #20]
    }
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	080172c0 	.word	0x080172c0

08003808 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	080172dc 	.word	0x080172dc

08003824 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
      data(0)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fbee 	bl	8002010 <_ZN3ros3MsgC1Ev>
 8003834:	4a05      	ldr	r2, [pc, #20]	; (800384c <_ZN8std_msgs7Float32C1Ev+0x28>)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	605a      	str	r2, [r3, #4]
    {
    }
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4618      	mov	r0, r3
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	0801756c 	.word	0x0801756c

08003850 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	4413      	add	r3, r2
 800386c:	b2ca      	uxtb	r2, r1
 800386e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	0a19      	lsrs	r1, r3, #8
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	4413      	add	r3, r2
 800387c:	b2ca      	uxtb	r2, r1
 800387e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	0c19      	lsrs	r1, r3, #16
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3302      	adds	r3, #2
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	4413      	add	r3, r2
 800388c:	b2ca      	uxtb	r2, r1
 800388e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	0e19      	lsrs	r1, r3, #24
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3303      	adds	r3, #3
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	4413      	add	r3, r2
 800389c:	b2ca      	uxtb	r2, r1
 800389e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3304      	adds	r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
      return offset;
 80038a6:	68fb      	ldr	r3, [r7, #12]
    }
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6839      	ldr	r1, [r7, #0]
 80038cc:	440a      	add	r2, r1
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3301      	adds	r3, #1
 80038da:	6839      	ldr	r1, [r7, #0]
 80038dc:	440b      	add	r3, r1
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3302      	adds	r3, #2
 80038ec:	6839      	ldr	r1, [r7, #0]
 80038ee:	440b      	add	r3, r1
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3303      	adds	r3, #3
 80038fe:	6839      	ldr	r1, [r7, #0]
 8003900:	440b      	add	r3, r1
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	4313      	orrs	r3, r2
 8003908:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	3304      	adds	r3, #4
 8003914:	60fb      	str	r3, [r7, #12]
     return offset;
 8003916:	68fb      	ldr	r3, [r7, #12]
    }
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <_ZN8std_msgs7Float327getTypeEv+0x18>)
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	08017300 	.word	0x08017300

08003940 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	08017314 	.word	0x08017314

0800395c <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
      data(0)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fb52 	bl	8002010 <_ZN3ros3MsgC1Ev>
 800396c:	4a05      	ldr	r2, [pc, #20]	; (8003984 <_ZN8std_msgs4BoolC1Ev+0x28>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	711a      	strb	r2, [r3, #4]
    {
    }
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	08017554 	.word	0x08017554

08003988 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	791b      	ldrb	r3, [r3, #4]
 800399a:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	4413      	add	r3, r2
 80039a2:	7a3a      	ldrb	r2, [r7, #8]
 80039a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3301      	adds	r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
      return offset;
 80039ac:	68fb      	ldr	r3, [r7, #12]
    }
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039cc:	7a3a      	ldrb	r2, [r7, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6839      	ldr	r1, [r7, #0]
 80039d2:	440b      	add	r3, r1
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 80039dc:	7a3a      	ldrb	r2, [r7, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3301      	adds	r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
     return offset;
 80039e8:	68fb      	ldr	r3, [r7, #12]
    }
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	08017338 	.word	0x08017338

08003a14 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	08017348 	.word	0x08017348

08003a30 <_ZL8DWT_Initv>:
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 8003a34:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <_ZL8DWT_Initv+0x28>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a07      	ldr	r2, [pc, #28]	; (8003a58 <_ZL8DWT_Initv+0x28>)
 8003a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <_ZL8DWT_Initv+0x2c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a05      	ldr	r2, [pc, #20]	; (8003a5c <_ZL8DWT_Initv+0x2c>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6013      	str	r3, [r2, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000edf0 	.word	0xe000edf0
 8003a5c:	e0001000 	.word	0xe0001000

08003a60 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	080175e4 	.word	0x080175e4

08003a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff ffe8 	bl	8003a60 <_ZN3ros15NodeHandleBase_C1Ev>
 8003a90:	4a48      	ldr	r2, [pc, #288]	; (8003bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev+0x134>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff f9f0 	bl	8002e80 <_ZN13STM32HardwareC1Ev>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003ac6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003aca:	2100      	movs	r1, #0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f011 fda5 	bl	801561c <memset>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003adc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f011 fd9a 	bl	801561c <memset>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003aee:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003af2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f011 fd8f 	bl	801561c <memset>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b04:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8003b08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f011 fd84 	bl	801561c <memset>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b36:	461a      	mov	r2, r3
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b44:	461a      	mov	r2, r3
 8003b46:	2300      	movs	r3, #0
 8003b48:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b52:	461a      	mov	r2, r3
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c2 3760 	str.w	r3, [r2, #1888]	; 0x760
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8c2 3764 	str.w	r3, [r2, #1892]	; 0x764
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	f242 736c 	movw	r3, #10092	; 0x276c
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe fda7 	bl	80026f8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	08017540 	.word	0x08017540

08003bb8 <_Z13read_ble_dataPh>:
//uint8_t publish_frequency = 20;
//uint8_t pid_frequency = 10;


//read esc data from ble
HAL_StatusTypeDef read_ble_data(uint8_t* data){
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	static uint8_t start_index = 0;
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003bc0:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <_Z13read_ble_dataPh+0x134>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	e01e      	b.n	8003c06 <_Z13read_ble_dataPh+0x4e>
		if(data[i]==0xFE && data[(i+1)%ESC_DATA_SIZE]==0x01){
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2bfe      	cmp	r3, #254	; 0xfe
 8003bd2:	d115      	bne.n	8003c00 <_Z13read_ble_dataPh+0x48>
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	425a      	negs	r2, r3
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	f002 021f 	and.w	r2, r2, #31
 8003be2:	bf58      	it	pl
 8003be4:	4253      	negpl	r3, r2
 8003be6:	461a      	mov	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4413      	add	r3, r2
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d106      	bne.n	8003c00 <_Z13read_ble_dataPh+0x48>
			start_index = i%ESC_DATA_SIZE;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	4b3c      	ldr	r3, [pc, #240]	; (8003cec <_Z13read_ble_dataPh+0x134>)
 8003bfc:	701a      	strb	r2, [r3, #0]
			break;
 8003bfe:	e009      	b.n	8003c14 <_Z13read_ble_dataPh+0x5c>
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	3301      	adds	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
 8003c06:	4b39      	ldr	r3, [pc, #228]	; (8003cec <_Z13read_ble_dataPh+0x134>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	f103 021f 	add.w	r2, r3, #31
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	dad9      	bge.n	8003bc8 <_Z13read_ble_dataPh+0x10>
		}
	}

	if(data[(2+start_index)%ESC_DATA_SIZE]!=0x00)return HAL_ERROR;
 8003c14:	4b35      	ldr	r3, [pc, #212]	; (8003cec <_Z13read_ble_dataPh+0x134>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	3302      	adds	r3, #2
 8003c1a:	425a      	negs	r2, r3
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	f002 021f 	and.w	r2, r2, #31
 8003c24:	bf58      	it	pl
 8003c26:	4253      	negpl	r3, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <_Z13read_ble_dataPh+0x80>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e129      	b.n	8003e8c <_Z13read_ble_dataPh+0x2d4>
	if(data[(3+start_index)%ESC_DATA_SIZE]!=0x03)return HAL_ERROR;
 8003c38:	4b2c      	ldr	r3, [pc, #176]	; (8003cec <_Z13read_ble_dataPh+0x134>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	3303      	adds	r3, #3
 8003c3e:	425a      	negs	r2, r3
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	f002 021f 	and.w	r2, r2, #31
 8003c48:	bf58      	it	pl
 8003c4a:	4253      	negpl	r3, r2
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d001      	beq.n	8003c5c <_Z13read_ble_dataPh+0xa4>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e117      	b.n	8003e8c <_Z13read_ble_dataPh+0x2d4>
	if(data[(4+start_index)%ESC_DATA_SIZE]!=0x30)return HAL_ERROR;
 8003c5c:	4b23      	ldr	r3, [pc, #140]	; (8003cec <_Z13read_ble_dataPh+0x134>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	3304      	adds	r3, #4
 8003c62:	425a      	negs	r2, r3
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	f002 021f 	and.w	r2, r2, #31
 8003c6c:	bf58      	it	pl
 8003c6e:	4253      	negpl	r3, r2
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b30      	cmp	r3, #48	; 0x30
 8003c7a:	d001      	beq.n	8003c80 <_Z13read_ble_dataPh+0xc8>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e105      	b.n	8003e8c <_Z13read_ble_dataPh+0x2d4>
	if(data[(5+start_index)%ESC_DATA_SIZE]!=0x5c)return HAL_ERROR;
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <_Z13read_ble_dataPh+0x134>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	3305      	adds	r3, #5
 8003c86:	425a      	negs	r2, r3
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	f002 021f 	and.w	r2, r2, #31
 8003c90:	bf58      	it	pl
 8003c92:	4253      	negpl	r3, r2
 8003c94:	461a      	mov	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b5c      	cmp	r3, #92	; 0x5c
 8003c9e:	d001      	beq.n	8003ca4 <_Z13read_ble_dataPh+0xec>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0f3      	b.n	8003e8c <_Z13read_ble_dataPh+0x2d4>
	if(data[(6+start_index)%ESC_DATA_SIZE]!=0x17)return HAL_ERROR;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <_Z13read_ble_dataPh+0x134>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	3306      	adds	r3, #6
 8003caa:	425a      	negs	r2, r3
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	f002 021f 	and.w	r2, r2, #31
 8003cb4:	bf58      	it	pl
 8003cb6:	4253      	negpl	r3, r2
 8003cb8:	461a      	mov	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b17      	cmp	r3, #23
 8003cc2:	d001      	beq.n	8003cc8 <_Z13read_ble_dataPh+0x110>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0e1      	b.n	8003e8c <_Z13read_ble_dataPh+0x2d4>
	if(data[(7+start_index)%ESC_DATA_SIZE]!=0x06)return HAL_ERROR;
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <_Z13read_ble_dataPh+0x134>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	3307      	adds	r3, #7
 8003cce:	425a      	negs	r2, r3
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	f002 021f 	and.w	r2, r2, #31
 8003cd8:	bf58      	it	pl
 8003cda:	4253      	negpl	r3, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b06      	cmp	r3, #6
 8003ce6:	d003      	beq.n	8003cf0 <_Z13read_ble_dataPh+0x138>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0cf      	b.n	8003e8c <_Z13read_ble_dataPh+0x2d4>
 8003cec:	2400453c 	.word	0x2400453c

	esc_sensor.throttle = (int16_t)(data[(9+start_index)%ESC_DATA_SIZE]);
 8003cf0:	4b69      	ldr	r3, [pc, #420]	; (8003e98 <_Z13read_ble_dataPh+0x2e0>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	3309      	adds	r3, #9
 8003cf6:	425a      	negs	r2, r3
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	f002 021f 	and.w	r2, r2, #31
 8003d00:	bf58      	it	pl
 8003d02:	4253      	negpl	r3, r2
 8003d04:	461a      	mov	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	b21a      	sxth	r2, r3
 8003d0e:	4b63      	ldr	r3, [pc, #396]	; (8003e9c <_Z13read_ble_dataPh+0x2e4>)
 8003d10:	801a      	strh	r2, [r3, #0]
	if(data[(11+start_index)%ESC_DATA_SIZE]!=0x01)esc_sensor.throttle=-esc_sensor.throttle;
 8003d12:	4b61      	ldr	r3, [pc, #388]	; (8003e98 <_Z13read_ble_dataPh+0x2e0>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	330b      	adds	r3, #11
 8003d18:	425a      	negs	r2, r3
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	f002 021f 	and.w	r2, r2, #31
 8003d22:	bf58      	it	pl
 8003d24:	4253      	negpl	r3, r2
 8003d26:	461a      	mov	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d008      	beq.n	8003d44 <_Z13read_ble_dataPh+0x18c>
 8003d32:	4b5a      	ldr	r3, [pc, #360]	; (8003e9c <_Z13read_ble_dataPh+0x2e4>)
 8003d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	425b      	negs	r3, r3
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b21a      	sxth	r2, r3
 8003d40:	4b56      	ldr	r3, [pc, #344]	; (8003e9c <_Z13read_ble_dataPh+0x2e4>)
 8003d42:	801a      	strh	r2, [r3, #0]

	esc_sensor.rpm = ((uint32_t)(data[(14+start_index)%ESC_DATA_SIZE] <<8) | (data[(13+start_index)%ESC_DATA_SIZE]))*10;
 8003d44:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <_Z13read_ble_dataPh+0x2e0>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	330e      	adds	r3, #14
 8003d4a:	425a      	negs	r2, r3
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	f002 021f 	and.w	r2, r2, #31
 8003d54:	bf58      	it	pl
 8003d56:	4253      	negpl	r3, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	4619      	mov	r1, r3
 8003d64:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <_Z13read_ble_dataPh+0x2e0>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	330d      	adds	r3, #13
 8003d6a:	425a      	negs	r2, r3
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	f002 021f 	and.w	r2, r2, #31
 8003d74:	bf58      	it	pl
 8003d76:	4253      	negpl	r3, r2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	ea41 0203 	orr.w	r2, r1, r3
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <_Z13read_ble_dataPh+0x2e4>)
 8003d90:	605a      	str	r2, [r3, #4]
	esc_sensor.voltage = (float)(data[(15+start_index)%ESC_DATA_SIZE])/10.0f;
 8003d92:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <_Z13read_ble_dataPh+0x2e0>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	330f      	adds	r3, #15
 8003d98:	425a      	negs	r2, r3
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	f002 021f 	and.w	r2, r2, #31
 8003da2:	bf58      	it	pl
 8003da4:	4253      	negpl	r3, r2
 8003da6:	461a      	mov	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003db6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <_Z13read_ble_dataPh+0x2e4>)
 8003dc0:	edc3 7a02 	vstr	s15, [r3, #8]
	esc_sensor.current = ((uint16_t)(data[(16+start_index)%ESC_DATA_SIZE] <<8) | (data[(17+start_index)%ESC_DATA_SIZE]))/10.0;
 8003dc4:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <_Z13read_ble_dataPh+0x2e0>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	3310      	adds	r3, #16
 8003dca:	425a      	negs	r2, r3
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	f002 021f 	and.w	r2, r2, #31
 8003dd4:	bf58      	it	pl
 8003dd6:	4253      	negpl	r3, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	4619      	mov	r1, r3
 8003de8:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <_Z13read_ble_dataPh+0x2e0>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	3311      	adds	r3, #17
 8003dee:	425a      	negs	r2, r3
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	f002 021f 	and.w	r2, r2, #31
 8003df8:	bf58      	it	pl
 8003dfa:	4253      	negpl	r3, r2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	430b      	orrs	r3, r1
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003e0e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003e12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003e16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e1a:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <_Z13read_ble_dataPh+0x2e4>)
 8003e1c:	edc3 7a03 	vstr	s15, [r3, #12]
	esc_sensor.temperature = (uint16_t)(data[(18+start_index)%ESC_DATA_SIZE] <<8) | (data[(19+start_index)%ESC_DATA_SIZE]);
 8003e20:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <_Z13read_ble_dataPh+0x2e0>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	3312      	adds	r3, #18
 8003e26:	425a      	negs	r2, r3
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	f002 021f 	and.w	r2, r2, #31
 8003e30:	bf58      	it	pl
 8003e32:	4253      	negpl	r3, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <_Z13read_ble_dataPh+0x2e0>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	3313      	adds	r3, #19
 8003e48:	4259      	negs	r1, r3
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	f001 011f 	and.w	r1, r1, #31
 8003e52:	bf58      	it	pl
 8003e54:	424b      	negpl	r3, r1
 8003e56:	4619      	mov	r1, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	440b      	add	r3, r1
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	4313      	orrs	r3, r2
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <_Z13read_ble_dataPh+0x2e4>)
 8003e66:	821a      	strh	r2, [r3, #16]

	current_esc_speed = esc_sensor.rpm/parameters.esc_rpm_to_speed_ratio;
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <_Z13read_ble_dataPh+0x2e4>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <_Z13read_ble_dataPh+0x2e8>)
 8003e76:	ed93 7a06 	vldr	s14, [r3, #24]
 8003e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <_Z13read_ble_dataPh+0x2ec>)
 8003e80:	edc3 7a00 	vstr	s15, [r3]
	esc_receive_indicator = 0;
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <_Z13read_ble_dataPh+0x2f0>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	2400453c 	.word	0x2400453c
 8003e9c:	24004368 	.word	0x24004368
 8003ea0:	24000004 	.word	0x24000004
 8003ea4:	24004410 	.word	0x24004410
 8003ea8:	2400439d 	.word	0x2400439d

08003eac <_Z15read_speed_dataPh>:

//read speed data from f103
//the first data are "acsr", then the fifth is the integer part of speed1, and the sixth is the decimal part of speed1..
HAL_StatusTypeDef read_speed_data(uint8_t* data){
 8003eac:	b5b0      	push	{r4, r5, r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0;i<2*SPEED_PIN_COUNT;++i){
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	73fb      	strb	r3, [r7, #15]
 8003eb8:	e01d      	b.n	8003ef6 <_Z15read_speed_dataPh+0x4a>
		if(data[i]=='A' && data[i+1]=='C'&& data[i+2]=='S'&& data[i+3]=='R')break;
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b41      	cmp	r3, #65	; 0x41
 8003ec4:	d114      	bne.n	8003ef0 <_Z15read_speed_dataPh+0x44>
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b43      	cmp	r3, #67	; 0x43
 8003ed2:	d10d      	bne.n	8003ef0 <_Z15read_speed_dataPh+0x44>
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b53      	cmp	r3, #83	; 0x53
 8003ee0:	d106      	bne.n	8003ef0 <_Z15read_speed_dataPh+0x44>
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	3303      	adds	r3, #3
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b52      	cmp	r3, #82	; 0x52
 8003eee:	d006      	beq.n	8003efe <_Z15read_speed_dataPh+0x52>
	for(i = 0;i<2*SPEED_PIN_COUNT;++i){
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b1f      	cmp	r3, #31
 8003efa:	d9de      	bls.n	8003eba <_Z15read_speed_dataPh+0xe>
 8003efc:	e000      	b.n	8003f00 <_Z15read_speed_dataPh+0x54>
		if(data[i]=='A' && data[i+1]=='C'&& data[i+2]=='S'&& data[i+3]=='R')break;
 8003efe:	bf00      	nop
	}
	if(i==2*SPEED_PIN_COUNT)return HAL_ERROR;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d101      	bne.n	8003f0a <_Z15read_speed_dataPh+0x5e>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e02b      	b.n	8003f62 <_Z15read_speed_dataPh+0xb6>

	if(i==0){
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10f      	bne.n	8003f30 <_Z15read_speed_dataPh+0x84>
		memcpy(speed,&data[4],2*SPEED_PIN_COUNT);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <_Z15read_speed_dataPh+0xc0>)
 8003f16:	4614      	mov	r4, r2
 8003f18:	461d      	mov	r5, r3
 8003f1a:	6828      	ldr	r0, [r5, #0]
 8003f1c:	6869      	ldr	r1, [r5, #4]
 8003f1e:	68aa      	ldr	r2, [r5, #8]
 8003f20:	68eb      	ldr	r3, [r5, #12]
 8003f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f24:	6928      	ldr	r0, [r5, #16]
 8003f26:	6969      	ldr	r1, [r5, #20]
 8003f28:	69aa      	ldr	r2, [r5, #24]
 8003f2a:	69eb      	ldr	r3, [r5, #28]
 8003f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f2e:	e014      	b.n	8003f5a <_Z15read_speed_dataPh+0xae>
	}else{
		memcpy(speed,&data[i+4],2*SPEED_PIN_COUNT-i);
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	3304      	adds	r3, #4
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	18d1      	adds	r1, r2, r3
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	f1c3 0320 	rsb	r3, r3, #32
 8003f3e:	461a      	mov	r2, r3
 8003f40:	480a      	ldr	r0, [pc, #40]	; (8003f6c <_Z15read_speed_dataPh+0xc0>)
 8003f42:	f011 fc3e 	bl	80157c2 <memcpy>
		memcpy(&speed[2*SPEED_PIN_COUNT-i],data,i);
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	f1c3 0320 	rsb	r3, r3, #32
 8003f4c:	4a07      	ldr	r2, [pc, #28]	; (8003f6c <_Z15read_speed_dataPh+0xc0>)
 8003f4e:	4413      	add	r3, r2
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f011 fc34 	bl	80157c2 <memcpy>
	/*
	for(int j=0;j<2*SPEED_PIN_COUNT;++j){
		//speed[j] = data[(2*j+i+4)%(2*SPEED_PIN_COUNT+4)]+data[(2*j+1+i+4)%(2*SPEED_PIN_COUNT+4)]/100.0;
		speed[j] = data[(j+i+4)%(2*SPEED_PIN_COUNT+4)];
	}*/
	f103_receive_indicator = 0;
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <_Z15read_speed_dataPh+0xc4>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bdb0      	pop	{r4, r5, r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	240043c4 	.word	0x240043c4
 8003f70:	2400439e 	.word	0x2400439e

08003f74 <HAL_UART_TxCpltCallback>:

//ros structure required
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <HAL_UART_TxCpltCallback+0x28>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d106      	bne.n	8003f92 <HAL_UART_TxCpltCallback+0x1e>
		nh.getHardware()->flush();
 8003f84:	4806      	ldr	r0, [pc, #24]	; (8003fa0 <HAL_UART_TxCpltCallback+0x2c>)
 8003f86:	f001 f8e8 	bl	800515a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe ffdd 	bl	8002f4c <_ZN13STM32Hardware5flushEv>
	}
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	24001468 	.word	0x24001468
 8003fa0:	24001ba0 	.word	0x24001ba0

08003fa4 <HAL_UART_RxCpltCallback>:

//uart data receive callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart4.Instance){
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b34      	ldr	r3, [pc, #208]	; (8004084 <HAL_UART_RxCpltCallback+0xe0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d107      	bne.n	8003fc8 <HAL_UART_RxCpltCallback+0x24>
		nh.getHardware()->reset_rbuf();
 8003fb8:	4833      	ldr	r0, [pc, #204]	; (8004088 <HAL_UART_RxCpltCallback+0xe4>)
 8003fba:	f001 f8ce 	bl	800515a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe ff84 	bl	8002ece <_ZN13STM32Hardware10reset_rbufEv>

			jy901_data_length = i;
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
		}
	}
}
 8003fc6:	e059      	b.n	800407c <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_esc.Instance){
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b2f      	ldr	r3, [pc, #188]	; (800408c <HAL_UART_RxCpltCallback+0xe8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d103      	bne.n	8003fdc <HAL_UART_RxCpltCallback+0x38>
		read_ble_data(esc_receive);
 8003fd4:	482e      	ldr	r0, [pc, #184]	; (8004090 <HAL_UART_RxCpltCallback+0xec>)
 8003fd6:	f7ff fdef 	bl	8003bb8 <_Z13read_ble_dataPh>
}
 8003fda:	e04f      	b.n	800407c <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_f103.Instance){
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <HAL_UART_RxCpltCallback+0xf0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d103      	bne.n	8003ff0 <HAL_UART_RxCpltCallback+0x4c>
		read_speed_data(speed_receive);
 8003fe8:	482b      	ldr	r0, [pc, #172]	; (8004098 <HAL_UART_RxCpltCallback+0xf4>)
 8003fea:	f7ff ff5f 	bl	8003eac <_Z15read_speed_dataPh>
}
 8003fee:	e045      	b.n	800407c <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_imu.Instance){
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b29      	ldr	r3, [pc, #164]	; (800409c <HAL_UART_RxCpltCallback+0xf8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d13f      	bne.n	800407c <HAL_UART_RxCpltCallback+0xd8>
		if(jy901_data[0]==0x55 && jy901_data_length==11){
 8003ffc:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b55      	cmp	r3, #85	; 0x55
 8004002:	d110      	bne.n	8004026 <HAL_UART_RxCpltCallback+0x82>
 8004004:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b0b      	cmp	r3, #11
 800400a:	d10c      	bne.n	8004026 <HAL_UART_RxCpltCallback+0x82>
			jy901.parseData(jy901_data);
 800400c:	4924      	ldr	r1, [pc, #144]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 800400e:	4826      	ldr	r0, [pc, #152]	; (80040a8 <HAL_UART_RxCpltCallback+0x104>)
 8004010:	f7fc fb68 	bl	80006e4 <_ZN6CJY9019parseDataEPh>
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8004014:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b29b      	uxth	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	4920      	ldr	r1, [pc, #128]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 800401e:	481f      	ldr	r0, [pc, #124]	; (800409c <HAL_UART_RxCpltCallback+0xf8>)
 8004020:	f00e fc16 	bl	8012850 <HAL_UART_Receive_DMA>
}
 8004024:	e02a      	b.n	800407c <HAL_UART_RxCpltCallback+0xd8>
		}else if(jy901_data_length!=11){
 8004026:	4b1f      	ldr	r3, [pc, #124]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b0b      	cmp	r3, #11
 800402c:	d00b      	beq.n	8004046 <HAL_UART_RxCpltCallback+0xa2>
			jy901_data_length = 11;
 800402e:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004030:	220b      	movs	r2, #11
 8004032:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	4918      	ldr	r1, [pc, #96]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 800403e:	4817      	ldr	r0, [pc, #92]	; (800409c <HAL_UART_RxCpltCallback+0xf8>)
 8004040:	f00e fc06 	bl	8012850 <HAL_UART_Receive_DMA>
}
 8004044:	e01a      	b.n	800407c <HAL_UART_RxCpltCallback+0xd8>
			uint8_t i = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
			for(;i<11;++i){
 800404a:	e007      	b.n	800405c <HAL_UART_RxCpltCallback+0xb8>
				if(jy901_data[i]==0x55)break;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 8004050:	5cd3      	ldrb	r3, [r2, r3]
 8004052:	2b55      	cmp	r3, #85	; 0x55
 8004054:	d006      	beq.n	8004064 <HAL_UART_RxCpltCallback+0xc0>
			for(;i<11;++i){
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	3301      	adds	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	2b0a      	cmp	r3, #10
 8004060:	d9f4      	bls.n	800404c <HAL_UART_RxCpltCallback+0xa8>
 8004062:	e000      	b.n	8004066 <HAL_UART_RxCpltCallback+0xc2>
				if(jy901_data[i]==0x55)break;
 8004064:	bf00      	nop
			jy901_data_length = i;
 8004066:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	7013      	strb	r3, [r2, #0]
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 800406c:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	490a      	ldr	r1, [pc, #40]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 8004076:	4809      	ldr	r0, [pc, #36]	; (800409c <HAL_UART_RxCpltCallback+0xf8>)
 8004078:	f00e fbea 	bl	8012850 <HAL_UART_Receive_DMA>
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	24001468 	.word	0x24001468
 8004088:	24001ba0 	.word	0x24001ba0
 800408c:	240013d4 	.word	0x240013d4
 8004090:	2400437c 	.word	0x2400437c
 8004094:	240014fc 	.word	0x240014fc
 8004098:	240043a0 	.word	0x240043a0
 800409c:	24001624 	.word	0x24001624
 80040a0:	240044a8 	.word	0x240044a8
 80040a4:	24000000 	.word	0x24000000
 80040a8:	240044b4 	.word	0x240044b4

080040ac <HAL_UARTEx_RxEventCallback>:

//uart receive callback for cp2102
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a63      	ldr	r2, [pc, #396]	; (800424c <HAL_UARTEx_RxEventCallback+0x1a0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	f040 80c0 	bne.w	8004244 <HAL_UARTEx_RxEventCallback+0x198>
	{
		if(usb_buf[0]=='x' && usb_buf[1]=='i' && usb_buf[2]=='l' && usb_buf[3]=='i' && usb_buf[4]=='n'){
 80040c4:	4b62      	ldr	r3, [pc, #392]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b78      	cmp	r3, #120	; 0x78
 80040ca:	d116      	bne.n	80040fa <HAL_UARTEx_RxEventCallback+0x4e>
 80040cc:	4b60      	ldr	r3, [pc, #384]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	2b69      	cmp	r3, #105	; 0x69
 80040d2:	d112      	bne.n	80040fa <HAL_UARTEx_RxEventCallback+0x4e>
 80040d4:	4b5e      	ldr	r3, [pc, #376]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80040d6:	789b      	ldrb	r3, [r3, #2]
 80040d8:	2b6c      	cmp	r3, #108	; 0x6c
 80040da:	d10e      	bne.n	80040fa <HAL_UARTEx_RxEventCallback+0x4e>
 80040dc:	4b5c      	ldr	r3, [pc, #368]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80040de:	78db      	ldrb	r3, [r3, #3]
 80040e0:	2b69      	cmp	r3, #105	; 0x69
 80040e2:	d10a      	bne.n	80040fa <HAL_UARTEx_RxEventCallback+0x4e>
 80040e4:	4b5a      	ldr	r3, [pc, #360]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80040e6:	791b      	ldrb	r3, [r3, #4]
 80040e8:	2b6e      	cmp	r3, #110	; 0x6e
 80040ea:	d106      	bne.n	80040fa <HAL_UARTEx_RxEventCallback+0x4e>
			HAL_UART_Transmit(&huart7, (uint8_t*)(&parameters) , sizeof(ParameterTypeDef), 10);
 80040ec:	230a      	movs	r3, #10
 80040ee:	226c      	movs	r2, #108	; 0x6c
 80040f0:	4958      	ldr	r1, [pc, #352]	; (8004254 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80040f2:	4859      	ldr	r0, [pc, #356]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80040f4:	f00e fa9e 	bl	8012634 <HAL_UART_Transmit>
 80040f8:	e03e      	b.n	8004178 <HAL_UARTEx_RxEventCallback+0xcc>
		}else if(usb_buf[0]=='a' && usb_buf[1]=='c' && usb_buf[2]=='s' && usb_buf[3]=='r'){
 80040fa:	4b55      	ldr	r3, [pc, #340]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b61      	cmp	r3, #97	; 0x61
 8004100:	d137      	bne.n	8004172 <HAL_UARTEx_RxEventCallback+0xc6>
 8004102:	4b53      	ldr	r3, [pc, #332]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	2b63      	cmp	r3, #99	; 0x63
 8004108:	d133      	bne.n	8004172 <HAL_UARTEx_RxEventCallback+0xc6>
 800410a:	4b51      	ldr	r3, [pc, #324]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800410c:	789b      	ldrb	r3, [r3, #2]
 800410e:	2b73      	cmp	r3, #115	; 0x73
 8004110:	d12f      	bne.n	8004172 <HAL_UARTEx_RxEventCallback+0xc6>
 8004112:	4b4f      	ldr	r3, [pc, #316]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8004114:	78db      	ldrb	r3, [r3, #3]
 8004116:	2b72      	cmp	r3, #114	; 0x72
 8004118:	d12b      	bne.n	8004172 <HAL_UARTEx_RxEventCallback+0xc6>
			uint32_t i = sizeof(ParameterTypeDef)-4;
 800411a:	2368      	movs	r3, #104	; 0x68
 800411c:	60fb      	str	r3, [r7, #12]
			if(usb_buf[i]!='b' || usb_buf[i+1]!='4'|| usb_buf[i+2]!='0'|| usb_buf[i+3]!='1'){
 800411e:	4a4c      	ldr	r2, [pc, #304]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b62      	cmp	r3, #98	; 0x62
 8004128:	d111      	bne.n	800414e <HAL_UARTEx_RxEventCallback+0xa2>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3301      	adds	r3, #1
 800412e:	4a48      	ldr	r2, [pc, #288]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8004130:	5cd3      	ldrb	r3, [r2, r3]
 8004132:	2b34      	cmp	r3, #52	; 0x34
 8004134:	d10b      	bne.n	800414e <HAL_UARTEx_RxEventCallback+0xa2>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3302      	adds	r3, #2
 800413a:	4a45      	ldr	r2, [pc, #276]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800413c:	5cd3      	ldrb	r3, [r2, r3]
 800413e:	2b30      	cmp	r3, #48	; 0x30
 8004140:	d105      	bne.n	800414e <HAL_UARTEx_RxEventCallback+0xa2>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3303      	adds	r3, #3
 8004146:	4a42      	ldr	r2, [pc, #264]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8004148:	5cd3      	ldrb	r3, [r2, r3]
 800414a:	2b31      	cmp	r3, #49	; 0x31
 800414c:	d003      	beq.n	8004156 <HAL_UARTEx_RxEventCallback+0xaa>
				printf("Receive Wrong Data\n");
 800414e:	4843      	ldr	r0, [pc, #268]	; (800425c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004150:	f011 f984 	bl	801545c <puts>
				memcpy(&parameters,usb_buf,sizeof(ParameterTypeDef));
				printf("Write the Configuration Complete!\n");
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));
			}

		}else{
 8004154:	e010      	b.n	8004178 <HAL_UARTEx_RxEventCallback+0xcc>
				memcpy(&parameters,usb_buf,sizeof(ParameterTypeDef));
 8004156:	226c      	movs	r2, #108	; 0x6c
 8004158:	493d      	ldr	r1, [pc, #244]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800415a:	483e      	ldr	r0, [pc, #248]	; (8004254 <HAL_UARTEx_RxEventCallback+0x1a8>)
 800415c:	f011 fb31 	bl	80157c2 <memcpy>
				printf("Write the Configuration Complete!\n");
 8004160:	483f      	ldr	r0, [pc, #252]	; (8004260 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8004162:	f011 f97b 	bl	801545c <puts>
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));
 8004166:	226c      	movs	r2, #108	; 0x6c
 8004168:	2100      	movs	r1, #0
 800416a:	483a      	ldr	r0, [pc, #232]	; (8004254 <HAL_UARTEx_RxEventCallback+0x1a8>)
 800416c:	f7fc ff0a 	bl	8000f84 <QSPI_W25Q64JV_Write>
		}else{
 8004170:	e002      	b.n	8004178 <HAL_UARTEx_RxEventCallback+0xcc>
			printf("Receive Wrong Data\n");
 8004172:	483a      	ldr	r0, [pc, #232]	; (800425c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004174:	f011 f972 	bl	801545c <puts>
			//HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 8004178:	2264      	movs	r2, #100	; 0x64
 800417a:	4935      	ldr	r1, [pc, #212]	; (8004250 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800417c:	4836      	ldr	r0, [pc, #216]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1ac>)
 800417e:	f010 fa4b 	bl	8014618 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004182:	4b38      	ldr	r3, [pc, #224]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a38      	ldr	r2, [pc, #224]	; (8004268 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d04a      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 800418c:	4b35      	ldr	r3, [pc, #212]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a36      	ldr	r2, [pc, #216]	; (800426c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d045      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 8004196:	4b33      	ldr	r3, [pc, #204]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a35      	ldr	r2, [pc, #212]	; (8004270 <HAL_UARTEx_RxEventCallback+0x1c4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d040      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a33      	ldr	r2, [pc, #204]	; (8004274 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d03b      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 80041aa:	4b2e      	ldr	r3, [pc, #184]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a32      	ldr	r2, [pc, #200]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d036      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 80041b4:	4b2b      	ldr	r3, [pc, #172]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a30      	ldr	r2, [pc, #192]	; (800427c <HAL_UARTEx_RxEventCallback+0x1d0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d031      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2f      	ldr	r2, [pc, #188]	; (8004280 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d02c      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 80041c8:	4b26      	ldr	r3, [pc, #152]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d027      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 80041d2:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2c      	ldr	r2, [pc, #176]	; (8004288 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d022      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a2a      	ldr	r2, [pc, #168]	; (800428c <HAL_UARTEx_RxEventCallback+0x1e0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01d      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 80041e6:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a29      	ldr	r2, [pc, #164]	; (8004290 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d018      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 80041f0:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a26      	ldr	r2, [pc, #152]	; (8004298 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 8004204:	4b17      	ldr	r3, [pc, #92]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a24      	ldr	r2, [pc, #144]	; (800429c <HAL_UARTEx_RxEventCallback+0x1f0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a23      	ldr	r2, [pc, #140]	; (80042a0 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_UARTEx_RxEventCallback+0x176>
 8004218:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a21      	ldr	r2, [pc, #132]	; (80042a4 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d108      	bne.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0208 	bic.w	r2, r2, #8
 8004230:	601a      	str	r2, [r3, #0]
	}
}
 8004232:	e007      	b.n	8004244 <HAL_UARTEx_RxEventCallback+0x198>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0204 	bic.w	r2, r2, #4
 8004242:	601a      	str	r2, [r3, #0]
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40007800 	.word	0x40007800
 8004250:	24004414 	.word	0x24004414
 8004254:	24000004 	.word	0x24000004
 8004258:	24001590 	.word	0x24001590
 800425c:	0801736c 	.word	0x0801736c
 8004260:	08017380 	.word	0x08017380
 8004264:	24001898 	.word	0x24001898
 8004268:	40020010 	.word	0x40020010
 800426c:	40020028 	.word	0x40020028
 8004270:	40020040 	.word	0x40020040
 8004274:	40020058 	.word	0x40020058
 8004278:	40020070 	.word	0x40020070
 800427c:	40020088 	.word	0x40020088
 8004280:	400200a0 	.word	0x400200a0
 8004284:	400200b8 	.word	0x400200b8
 8004288:	40020410 	.word	0x40020410
 800428c:	40020428 	.word	0x40020428
 8004290:	40020440 	.word	0x40020440
 8004294:	40020458 	.word	0x40020458
 8004298:	40020470 	.word	0x40020470
 800429c:	40020488 	.word	0x40020488
 80042a0:	400204a0 	.word	0x400204a0
 80042a4:	400204b8 	.word	0x400204b8

080042a8 <HAL_UART_ErrorCallback>:

//error handle of uart
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==huart_esc.Instance) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b48      	ldr	r3, [pc, #288]	; (80043d8 <HAL_UART_ErrorCallback+0x130>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d105      	bne.n	80042c8 <HAL_UART_ErrorCallback+0x20>
    	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 80042bc:	2220      	movs	r2, #32
 80042be:	4947      	ldr	r1, [pc, #284]	; (80043dc <HAL_UART_ErrorCallback+0x134>)
 80042c0:	4845      	ldr	r0, [pc, #276]	; (80043d8 <HAL_UART_ErrorCallback+0x130>)
 80042c2:	f00e fac5 	bl	8012850 <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart_imu, (uint8_t*)jy901_data, 11);
	}else if(UartHandle->Instance==UART7){
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
	}
}
 80042c6:	e082      	b.n	80043ce <HAL_UART_ErrorCallback+0x126>
    }else if(UartHandle->Instance==huart_f103.Instance) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b44      	ldr	r3, [pc, #272]	; (80043e0 <HAL_UART_ErrorCallback+0x138>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d105      	bne.n	80042e0 <HAL_UART_ErrorCallback+0x38>
    	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, 2*SPEED_PIN_COUNT+1);
 80042d4:	2221      	movs	r2, #33	; 0x21
 80042d6:	4943      	ldr	r1, [pc, #268]	; (80043e4 <HAL_UART_ErrorCallback+0x13c>)
 80042d8:	4841      	ldr	r0, [pc, #260]	; (80043e0 <HAL_UART_ErrorCallback+0x138>)
 80042da:	f00e fab9 	bl	8012850 <HAL_UART_Receive_DMA>
}
 80042de:	e076      	b.n	80043ce <HAL_UART_ErrorCallback+0x126>
    else if(UartHandle->Instance==huart_imu.Instance) {
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b40      	ldr	r3, [pc, #256]	; (80043e8 <HAL_UART_ErrorCallback+0x140>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d105      	bne.n	80042f8 <HAL_UART_ErrorCallback+0x50>
		HAL_UART_Receive_DMA(&huart_imu, (uint8_t*)jy901_data, 11);
 80042ec:	220b      	movs	r2, #11
 80042ee:	493f      	ldr	r1, [pc, #252]	; (80043ec <HAL_UART_ErrorCallback+0x144>)
 80042f0:	483d      	ldr	r0, [pc, #244]	; (80043e8 <HAL_UART_ErrorCallback+0x140>)
 80042f2:	f00e faad 	bl	8012850 <HAL_UART_Receive_DMA>
}
 80042f6:	e06a      	b.n	80043ce <HAL_UART_ErrorCallback+0x126>
	}else if(UartHandle->Instance==UART7){
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a3c      	ldr	r2, [pc, #240]	; (80043f0 <HAL_UART_ErrorCallback+0x148>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d165      	bne.n	80043ce <HAL_UART_ErrorCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 8004302:	2264      	movs	r2, #100	; 0x64
 8004304:	493b      	ldr	r1, [pc, #236]	; (80043f4 <HAL_UART_ErrorCallback+0x14c>)
 8004306:	483c      	ldr	r0, [pc, #240]	; (80043f8 <HAL_UART_ErrorCallback+0x150>)
 8004308:	f010 f986 	bl	8014618 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 800430c:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a3b      	ldr	r2, [pc, #236]	; (8004400 <HAL_UART_ErrorCallback+0x158>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d04a      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a3a      	ldr	r2, [pc, #232]	; (8004404 <HAL_UART_ErrorCallback+0x15c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d045      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 8004320:	4b36      	ldr	r3, [pc, #216]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a38      	ldr	r2, [pc, #224]	; (8004408 <HAL_UART_ErrorCallback+0x160>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d040      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 800432a:	4b34      	ldr	r3, [pc, #208]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a37      	ldr	r2, [pc, #220]	; (800440c <HAL_UART_ErrorCallback+0x164>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d03b      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 8004334:	4b31      	ldr	r3, [pc, #196]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a35      	ldr	r2, [pc, #212]	; (8004410 <HAL_UART_ErrorCallback+0x168>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d036      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 800433e:	4b2f      	ldr	r3, [pc, #188]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a34      	ldr	r2, [pc, #208]	; (8004414 <HAL_UART_ErrorCallback+0x16c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d031      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 8004348:	4b2c      	ldr	r3, [pc, #176]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a32      	ldr	r2, [pc, #200]	; (8004418 <HAL_UART_ErrorCallback+0x170>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d02c      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 8004352:	4b2a      	ldr	r3, [pc, #168]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a31      	ldr	r2, [pc, #196]	; (800441c <HAL_UART_ErrorCallback+0x174>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d027      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2f      	ldr	r2, [pc, #188]	; (8004420 <HAL_UART_ErrorCallback+0x178>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d022      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 8004366:	4b25      	ldr	r3, [pc, #148]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a2e      	ldr	r2, [pc, #184]	; (8004424 <HAL_UART_ErrorCallback+0x17c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d01d      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 8004370:	4b22      	ldr	r3, [pc, #136]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2c      	ldr	r2, [pc, #176]	; (8004428 <HAL_UART_ErrorCallback+0x180>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d018      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2b      	ldr	r2, [pc, #172]	; (800442c <HAL_UART_ErrorCallback+0x184>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 8004384:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a29      	ldr	r2, [pc, #164]	; (8004430 <HAL_UART_ErrorCallback+0x188>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00e      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a28      	ldr	r2, [pc, #160]	; (8004434 <HAL_UART_ErrorCallback+0x18c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 8004398:	4b18      	ldr	r3, [pc, #96]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a26      	ldr	r2, [pc, #152]	; (8004438 <HAL_UART_ErrorCallback+0x190>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_UART_ErrorCallback+0x104>
 80043a2:	4b16      	ldr	r3, [pc, #88]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a25      	ldr	r2, [pc, #148]	; (800443c <HAL_UART_ErrorCallback+0x194>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d108      	bne.n	80043be <HAL_UART_ErrorCallback+0x116>
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0208 	bic.w	r2, r2, #8
 80043ba:	601a      	str	r2, [r3, #0]
}
 80043bc:	e007      	b.n	80043ce <HAL_UART_ErrorCallback+0x126>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <HAL_UART_ErrorCallback+0x154>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0204 	bic.w	r2, r2, #4
 80043cc:	601a      	str	r2, [r3, #0]
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	240013d4 	.word	0x240013d4
 80043dc:	2400437c 	.word	0x2400437c
 80043e0:	240014fc 	.word	0x240014fc
 80043e4:	240043a0 	.word	0x240043a0
 80043e8:	24001624 	.word	0x24001624
 80043ec:	240044a8 	.word	0x240044a8
 80043f0:	40007800 	.word	0x40007800
 80043f4:	24004414 	.word	0x24004414
 80043f8:	24001590 	.word	0x24001590
 80043fc:	24001898 	.word	0x24001898
 8004400:	40020010 	.word	0x40020010
 8004404:	40020028 	.word	0x40020028
 8004408:	40020040 	.word	0x40020040
 800440c:	40020058 	.word	0x40020058
 8004410:	40020070 	.word	0x40020070
 8004414:	40020088 	.word	0x40020088
 8004418:	400200a0 	.word	0x400200a0
 800441c:	400200b8 	.word	0x400200b8
 8004420:	40020410 	.word	0x40020410
 8004424:	40020428 	.word	0x40020428
 8004428:	40020440 	.word	0x40020440
 800442c:	40020458 	.word	0x40020458
 8004430:	40020470 	.word	0x40020470
 8004434:	40020488 	.word	0x40020488
 8004438:	400204a0 	.word	0x400204a0
 800443c:	400204b8 	.word	0x400204b8

08004440 <HAL_TIM_IC_CaptureCallback>:

//pwm input capture callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

	if(input_mode == INPUT_MODE_SOFTWARE)return;
 8004448:	4b4e      	ldr	r3, [pc, #312]	; (8004584 <HAL_TIM_IC_CaptureCallback+0x144>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8095 	beq.w	800457c <HAL_TIM_IC_CaptureCallback+0x13c>

	uint32_t temp_freq;
	if(htim->Instance==TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a4c      	ldr	r2, [pc, #304]	; (8004588 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d131      	bne.n	80044c0 <HAL_TIM_IC_CaptureCallback+0x80>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7f1b      	ldrb	r3, [r3, #28]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d12d      	bne.n	80044c0 <HAL_TIM_IC_CaptureCallback+0x80>
		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004464:	2100      	movs	r1, #0
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f00d f93e 	bl	80116e8 <HAL_TIM_ReadCapturedValue>
 800446c:	61f8      	str	r0, [r7, #28]
		uint32_t temp_servo_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800446e:	2104      	movs	r1, #4
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f00d f939 	bl	80116e8 <HAL_TIM_ReadCapturedValue>
 8004476:	61b8      	str	r0, [r7, #24]
		int32_t diff = temp_servo_duty - servo_duty;
 8004478:	4b44      	ldr	r3, [pc, #272]	; (800458c <HAL_TIM_IC_CaptureCallback+0x14c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]
		if(abs(diff) > 2){
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7fd fda5 	bl	8001fd2 <_ZSt3absl>
 8004488:	4603      	mov	r3, r0
 800448a:	2b02      	cmp	r3, #2
 800448c:	bfcc      	ite	gt
 800448e:	2301      	movgt	r3, #1
 8004490:	2300      	movle	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d006      	beq.n	80044a6 <HAL_TIM_IC_CaptureCallback+0x66>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,temp_servo_duty);
 8004498:	4b3d      	ldr	r3, [pc, #244]	; (8004590 <HAL_TIM_IC_CaptureCallback+0x150>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	635a      	str	r2, [r3, #52]	; 0x34
			servo_duty = temp_servo_duty;
 80044a0:	4a3a      	ldr	r2, [pc, #232]	; (800458c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCounter(htim,0);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80044ae:	2100      	movs	r1, #0
 80044b0:	4838      	ldr	r0, [pc, #224]	; (8004594 <HAL_TIM_IC_CaptureCallback+0x154>)
 80044b2:	f00c fbbf 	bl	8010c34 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 80044b6:	2104      	movs	r1, #4
 80044b8:	4836      	ldr	r0, [pc, #216]	; (8004594 <HAL_TIM_IC_CaptureCallback+0x154>)
 80044ba:	f00c fab7 	bl	8010a2c <HAL_TIM_IC_Start>

	}else if(htim->Instance==TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80044be:	e035      	b.n	800452c <HAL_TIM_IC_CaptureCallback+0xec>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a34      	ldr	r2, [pc, #208]	; (8004598 <HAL_TIM_IC_CaptureCallback+0x158>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d130      	bne.n	800452c <HAL_TIM_IC_CaptureCallback+0xec>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7f1b      	ldrb	r3, [r3, #28]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d12c      	bne.n	800452c <HAL_TIM_IC_CaptureCallback+0xec>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80044d2:	2100      	movs	r1, #0
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f00d f907 	bl	80116e8 <HAL_TIM_ReadCapturedValue>
 80044da:	61f8      	str	r0, [r7, #28]
		uint32_t temp_esc_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80044dc:	2104      	movs	r1, #4
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f00d f902 	bl	80116e8 <HAL_TIM_ReadCapturedValue>
 80044e4:	6138      	str	r0, [r7, #16]
		int32_t diff = temp_esc_duty - esc_duty;
 80044e6:	4b2d      	ldr	r3, [pc, #180]	; (800459c <HAL_TIM_IC_CaptureCallback+0x15c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	60fb      	str	r3, [r7, #12]
		if(abs(diff) >2){
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7fd fd6e 	bl	8001fd2 <_ZSt3absl>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	bfcc      	ite	gt
 80044fc:	2301      	movgt	r3, #1
 80044fe:	2300      	movle	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <HAL_TIM_IC_CaptureCallback+0xd4>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,temp_esc_duty);
 8004506:	4b22      	ldr	r3, [pc, #136]	; (8004590 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
			esc_duty = temp_esc_duty;
 800450e:	4a23      	ldr	r2, [pc, #140]	; (800459c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCounter(htim,0);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800451c:	2100      	movs	r1, #0
 800451e:	4820      	ldr	r0, [pc, #128]	; (80045a0 <HAL_TIM_IC_CaptureCallback+0x160>)
 8004520:	f00c fb88 	bl	8010c34 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8004524:	2104      	movs	r1, #4
 8004526:	481e      	ldr	r0, [pc, #120]	; (80045a0 <HAL_TIM_IC_CaptureCallback+0x160>)
 8004528:	f00c fa80 	bl	8010a2c <HAL_TIM_IC_Start>

	}
	int32_t diff = temp_freq-input_freq;
 800452c:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <HAL_TIM_IC_CaptureCallback+0x164>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	60bb      	str	r3, [r7, #8]
	if(input_freq<1000 || abs(diff)>50){
 8004536:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800453e:	d305      	bcc.n	800454c <HAL_TIM_IC_CaptureCallback+0x10c>
 8004540:	68b8      	ldr	r0, [r7, #8]
 8004542:	f7fd fd46 	bl	8001fd2 <_ZSt3absl>
 8004546:	4603      	mov	r3, r0
 8004548:	2b32      	cmp	r3, #50	; 0x32
 800454a:	dd01      	ble.n	8004550 <HAL_TIM_IC_CaptureCallback+0x110>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_TIM_IC_CaptureCallback+0x112>
 8004550:	2300      	movs	r3, #0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d013      	beq.n	800457e <HAL_TIM_IC_CaptureCallback+0x13e>
		input_freq=temp_freq;
 8004556:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <HAL_TIM_IC_CaptureCallback+0x150>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c
 8004564:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	60d3      	str	r3, [r2, #12]
		esc_servo_arr = 1000000/input_freq-1;
 800456a:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <HAL_TIM_IC_CaptureCallback+0x164>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a0e      	ldr	r2, [pc, #56]	; (80045a8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e000      	b.n	800457e <HAL_TIM_IC_CaptureCallback+0x13e>
	if(input_mode == INPUT_MODE_SOFTWARE)return;
 800457c:	bf00      	nop
	}


}
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	24004478 	.word	0x24004478
 8004588:	40000c00 	.word	0x40000c00
 800458c:	2400449c 	.word	0x2400449c
 8004590:	24001a20 	.word	0x24001a20
 8004594:	24001a6c 	.word	0x24001a6c
 8004598:	40014000 	.word	0x40014000
 800459c:	240044a0 	.word	0x240044a0
 80045a0:	24001b04 	.word	0x24001b04
 80045a4:	240044a4 	.word	0x240044a4
 80045a8:	000f4240 	.word	0x000f4240
 80045ac:	24004480 	.word	0x24004480

080045b0 <HAL_TIM_PeriodElapsedCallback>:

//timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

	//ros publish
	if(htim->Instance==TIM16){
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10b      	bne.n	80045da <HAL_TIM_PeriodElapsedCallback+0x2a>
		uint8_t index = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 5] = jy901.getGyroZ();
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 6] = jy901.getRoll();
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 7] = jy901.getPitch();
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 8] = jy901.getYaw();*/

		ros_pub->publish(&sensor_msg);
 80045c6:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4919      	ldr	r1, [pc, #100]	; (8004630 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fe fb76 	bl	8002cbe <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 80045d2:	4818      	ldr	r0, [pc, #96]	; (8004634 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80045d4:	f000 fdcd 	bl	8005172 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv>
 80045d8:	e022      	b.n	8004620 <HAL_TIM_PeriodElapsedCallback+0x70>
	}else if(htim->Instance==TIM6)//pid computation
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a16      	ldr	r2, [pc, #88]	; (8004638 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d11d      	bne.n	8004620 <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 80045e4:	4b15      	ldr	r3, [pc, #84]	; (800463c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d016      	beq.n	800461a <HAL_TIM_PeriodElapsedCallback+0x6a>
 80045ec:	4b14      	ldr	r3, [pc, #80]	; (8004640 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d012      	beq.n	800461a <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(error_code & 0x01)return;
 80045f4:	4b13      	ldr	r3, [pc, #76]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10e      	bne.n	800461e <HAL_TIM_PeriodElapsedCallback+0x6e>
		pid_ptr->compute();
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fc f983 	bl	8000910 <_ZN3PIDIfE7computeEv>

		set_esc_duty_cycle(pid_esc_duty_cycle_output);
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800460c:	edd3 7a00 	vldr	s15, [r3]
 8004610:	eeb0 0a67 	vmov.f32	s0, s15
 8004614:	f000 f83a 	bl	800468c <set_esc_duty_cycle>
 8004618:	e002      	b.n	8004620 <HAL_TIM_PeriodElapsedCallback+0x70>
		if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 800461a:	bf00      	nop
 800461c:	e000      	b.n	8004620 <HAL_TIM_PeriodElapsedCallback+0x70>
		if(error_code & 0x01)return;
 800461e:	bf00      	nop
		}*/


	}

}
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40014400 	.word	0x40014400
 800462c:	24004364 	.word	0x24004364
 8004630:	24004334 	.word	0x24004334
 8004634:	24001ba0 	.word	0x24001ba0
 8004638:	40001000 	.word	0x40001000
 800463c:	24004478 	.word	0x24004478
 8004640:	24004404 	.word	0x24004404
 8004644:	2400439c 	.word	0x2400439c
 8004648:	24004538 	.word	0x24004538
 800464c:	2400440c 	.word	0x2400440c

08004650 <_Z14speed_callbackRKN8std_msgs7Float32E>:
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
	}
}

//ros speed subscriber callback
void speed_callback(const std_msgs::Float32& msg){
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <_Z14speed_callbackRKN8std_msgs7Float32E+0x30>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d008      	beq.n	8004672 <_Z14speed_callbackRKN8std_msgs7Float32E+0x22>
 8004660:	4b08      	ldr	r3, [pc, #32]	; (8004684 <_Z14speed_callbackRKN8std_msgs7Float32E+0x34>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d004      	beq.n	8004672 <_Z14speed_callbackRKN8std_msgs7Float32E+0x22>
	pid_speed_set=msg.data;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	4a06      	ldr	r2, [pc, #24]	; (8004688 <_Z14speed_callbackRKN8std_msgs7Float32E+0x38>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	e000      	b.n	8004674 <_Z14speed_callbackRKN8std_msgs7Float32E+0x24>
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 8004672:	bf00      	nop
}
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	24004478 	.word	0x24004478
 8004684:	24004404 	.word	0x24004404
 8004688:	24004408 	.word	0x24004408

0800468c <set_esc_duty_cycle>:

//set the duty cycle of the esc,
//input: fake_duty_cycle, a virtual duty cycle range from -1.0~1.0, where minus represents reverse
void set_esc_duty_cycle(float fake_duty_cycle){
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	ed87 0a01 	vstr	s0, [r7, #4]
	float esc_duty_cycle = parameters.esc_offset + fake_duty_cycle * (parameters.esc_max-parameters.esc_min) / 2.0;
 8004696:	4b23      	ldr	r3, [pc, #140]	; (8004724 <set_esc_duty_cycle+0x98>)
 8004698:	edd3 7a07 	vldr	s15, [r3, #28]
 800469c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80046a0:	4b20      	ldr	r3, [pc, #128]	; (8004724 <set_esc_duty_cycle+0x98>)
 80046a2:	ed93 7a08 	vldr	s14, [r3, #32]
 80046a6:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <set_esc_duty_cycle+0x98>)
 80046a8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80046ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80046b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80046bc:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80046c0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80046c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046cc:	edc7 7a03 	vstr	s15, [r7, #12]
	//convert duty cycle to pwm ccr
	int32_t esc_ccr = esc_duty_cycle * esc_servo_arr;
 80046d0:	4b15      	ldr	r3, [pc, #84]	; (8004728 <set_esc_duty_cycle+0x9c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	ee07 3a90 	vmov	s15, r3
 80046d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80046e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046e8:	ee17 3a90 	vmov	r3, s15
 80046ec:	60bb      	str	r3, [r7, #8]
	if(abs(esc_ccr - pre_esc_ccr)>=esc_set_precision){
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <set_esc_duty_cycle+0xa0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fd fc6b 	bl	8001fd2 <_ZSt3absl>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b04      	cmp	r3, #4
 8004700:	bfcc      	ite	gt
 8004702:	2301      	movgt	r3, #1
 8004704:	2300      	movle	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d006      	beq.n	800471a <set_esc_duty_cycle+0x8e>
		pre_esc_ccr = esc_ccr;
 800470c:	4a07      	ldr	r2, [pc, #28]	; (800472c <set_esc_duty_cycle+0xa0>)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,esc_ccr);
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <set_esc_duty_cycle+0xa4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	24000004 	.word	0x24000004
 8004728:	24004480 	.word	0x24004480
 800472c:	24004488 	.word	0x24004488
 8004730:	24001a20 	.word	0x24001a20

08004734 <set_servo_duty_cycle>:

//set the duty cycle of the esc,
//input: steering_angle, unit is degree
void set_servo_duty_cycle(float steering_angle){
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	ed87 0a01 	vstr	s0, [r7, #4]
	float servo_duty_cycle = parameters.steering_to_dutycycle_ratio*steering_angle + parameters.steering_offset;
 800473e:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <set_servo_duty_cycle+0x78>)
 8004740:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004744:	edd7 7a01 	vldr	s15, [r7, #4]
 8004748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800474c:	4b17      	ldr	r3, [pc, #92]	; (80047ac <set_servo_duty_cycle+0x78>)
 800474e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004756:	edc7 7a03 	vstr	s15, [r7, #12]

	//convert duty cycle to pwm ccr
	int32_t servo_ccr = servo_duty_cycle*esc_servo_arr;
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <set_servo_duty_cycle+0x7c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004766:	edd7 7a03 	vldr	s15, [r7, #12]
 800476a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004772:	ee17 3a90 	vmov	r3, s15
 8004776:	60bb      	str	r3, [r7, #8]
	if(abs(servo_ccr - pre_servo_ccr)>=servo_set_precision){
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <set_servo_duty_cycle+0x80>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	4618      	mov	r0, r3
 8004782:	f7fd fc26 	bl	8001fd2 <_ZSt3absl>
 8004786:	4603      	mov	r3, r0
 8004788:	2b04      	cmp	r3, #4
 800478a:	bfcc      	ite	gt
 800478c:	2301      	movgt	r3, #1
 800478e:	2300      	movle	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d006      	beq.n	80047a4 <set_servo_duty_cycle+0x70>
		pre_servo_ccr = servo_ccr;
 8004796:	4a07      	ldr	r2, [pc, #28]	; (80047b4 <set_servo_duty_cycle+0x80>)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,servo_ccr);
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <set_servo_duty_cycle+0x84>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	24000004 	.word	0x24000004
 80047b0:	24004480 	.word	0x24004480
 80047b4:	24004484 	.word	0x24004484
 80047b8:	24001a20 	.word	0x24001a20

080047bc <_Z19duty_cycle_callbackRKN8std_msgs7Float32E>:

//ros duty cycle subscriber callback
void duty_cycle_callback(const std_msgs::Float32& msg){
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_AUTOMATIC)return;
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x30>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d00b      	beq.n	80047e4 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x28>
 80047cc:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x34>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d007      	beq.n	80047e4 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x28>
	set_esc_duty_cycle(msg.data);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80047da:	eeb0 0a67 	vmov.f32	s0, s15
 80047de:	f7ff ff55 	bl	800468c <set_esc_duty_cycle>
 80047e2:	e000      	b.n	80047e6 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x2a>
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_AUTOMATIC)return;
 80047e4:	bf00      	nop
}
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	24004478 	.word	0x24004478
 80047f0:	24004404 	.word	0x24004404

080047f4 <_Z17steering_callbackRKN8std_msgs7Float32E>:

//ros steering subscriber callback
void steering_callback(const std_msgs::Float32& msg){
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER)return;
 80047fc:	4b07      	ldr	r3, [pc, #28]	; (800481c <_Z17steering_callbackRKN8std_msgs7Float32E+0x28>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d007      	beq.n	8004814 <_Z17steering_callbackRKN8std_msgs7Float32E+0x20>
	set_servo_duty_cycle(msg.data);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	edd3 7a01 	vldr	s15, [r3, #4]
 800480a:	eeb0 0a67 	vmov.f32	s0, s15
 800480e:	f7ff ff91 	bl	8004734 <set_servo_duty_cycle>
 8004812:	e000      	b.n	8004816 <_Z17steering_callbackRKN8std_msgs7Float32E+0x22>
	if(input_mode == INPUT_MODE_CONTROLLER)return;
 8004814:	bf00      	nop
}
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	24004478 	.word	0x24004478

08004820 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE>:

//ros brake subscriber callback
void brake_callback(const std_msgs::Float32MultiArray& msg){
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	uint32_t c = msg.data[0]*brake_arr;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	ed93 7a00 	vldr	s14, [r3]
 8004830:	4b3c      	ldr	r3, [pc, #240]	; (8004924 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004844:	ee17 3a90 	vmov	r3, s15
 8004848:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[0]){
 800484a:	4b37      	ldr	r3, [pc, #220]	; (8004928 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	429a      	cmp	r2, r3
 8004852:	d006      	beq.n	8004862 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x42>
		pre_brake[0]=c;
 8004854:	4a34      	ldr	r2, [pc, #208]	; (8004928 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,c);
 800485a:	4b34      	ldr	r3, [pc, #208]	; (800492c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	635a      	str	r2, [r3, #52]	; 0x34
	}
	c = msg.data[1]*brake_arr;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	3304      	adds	r3, #4
 8004868:	ed93 7a00 	vldr	s14, [r3]
 800486c:	4b2d      	ldr	r3, [pc, #180]	; (8004924 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004880:	ee17 3a90 	vmov	r3, s15
 8004884:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[1]){
 8004886:	4b28      	ldr	r3, [pc, #160]	; (8004928 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	429a      	cmp	r2, r3
 800488e:	d006      	beq.n	800489e <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x7e>
		pre_brake[1]=c;
 8004890:	4a25      	ldr	r2, [pc, #148]	; (8004928 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6053      	str	r3, [r2, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,c);
 8004896:	4b25      	ldr	r3, [pc, #148]	; (800492c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	c = msg.data[2]*brake_arr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	3308      	adds	r3, #8
 80048a4:	ed93 7a00 	vldr	s14, [r3]
 80048a8:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	ee07 3a90 	vmov	s15, r3
 80048b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048bc:	ee17 3a90 	vmov	r3, s15
 80048c0:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[2]){
 80048c2:	4b19      	ldr	r3, [pc, #100]	; (8004928 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d006      	beq.n	80048da <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xba>
		pre_brake[2]=c;
 80048cc:	4a16      	ldr	r2, [pc, #88]	; (8004928 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,c);
 80048d2:	4b16      	ldr	r3, [pc, #88]	; (800492c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	c = msg.data[3]*brake_arr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	330c      	adds	r3, #12
 80048e0:	ed93 7a00 	vldr	s14, [r3]
 80048e4:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f8:	ee17 3a90 	vmov	r3, s15
 80048fc:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[3]){
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	429a      	cmp	r2, r3
 8004906:	d006      	beq.n	8004916 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xf6>
		pre_brake[3]=c;
 8004908:	4a07      	ldr	r2, [pc, #28]	; (8004928 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,c);
 800490e:	4b07      	ldr	r3, [pc, #28]	; (800492c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	2400447c 	.word	0x2400447c
 8004928:	2400448c 	.word	0x2400448c
 800492c:	240019d4 	.word	0x240019d4

08004930 <_Z19input_mode_callbackRKN8std_msgs4BoolE>:

void input_mode_callback(const std_msgs::Bool& msg){
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, (GPIO_PinState)msg.data);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	791b      	ldrb	r3, [r3, #4]
 800493c:	461a      	mov	r2, r3
 800493e:	2120      	movs	r1, #32
 8004940:	4803      	ldr	r0, [pc, #12]	; (8004950 <_Z19input_mode_callbackRKN8std_msgs4BoolE+0x20>)
 8004942:	f007 fbc3 	bl	800c0cc <HAL_GPIO_WritePin>

}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	58020400 	.word	0x58020400

08004954 <_Z17pid_mode_callbackRKN8std_msgs4BoolE>:

void pid_mode_callback(const std_msgs::Bool& msg){
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
	if(msg.data != (bool)pid_mode){
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	791b      	ldrb	r3, [r3, #4]
 8004960:	461a      	mov	r2, r3
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x4c>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2300      	moveq	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	429a      	cmp	r2, r3
 8004972:	d010      	beq.n	8004996 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x42>
		pid_mode = (PIDMode_TypeDef)msg.data;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	791b      	ldrb	r3, [r3, #4]
 8004978:	461a      	mov	r2, r3
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x4c>)
 800497c:	701a      	strb	r2, [r3, #0]
		pid_ptr->reset();
 800497e:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x50>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fc f8d1 	bl	8000b2a <_ZN3PIDIfE5resetEv>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, (GPIO_PinState)msg.data);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	791b      	ldrb	r3, [r3, #4]
 800498c:	461a      	mov	r2, r3
 800498e:	2120      	movs	r1, #32
 8004990:	4805      	ldr	r0, [pc, #20]	; (80049a8 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x54>)
 8004992:	f007 fb9b 	bl	800c0cc <HAL_GPIO_WritePin>
	}
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	24004404 	.word	0x24004404
 80049a4:	24004538 	.word	0x24004538
 80049a8:	58020c00 	.word	0x58020c00

080049ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_9) {
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049bc:	d11b      	bne.n	80049f6 <HAL_GPIO_EXTI_Callback+0x4a>
	  auto state = HAL_GPIO_ReadPin(PID_MODE_INPUT_GPIO_Port, PID_MODE_INPUT_Pin);
 80049be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049c2:	480f      	ldr	r0, [pc, #60]	; (8004a00 <HAL_GPIO_EXTI_Callback+0x54>)
 80049c4:	f007 fb6a 	bl	800c09c <HAL_GPIO_ReadPin>
 80049c8:	4603      	mov	r3, r0
 80049ca:	73fb      	strb	r3, [r7, #15]
	  if(state==GPIO_PIN_SET){
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d108      	bne.n	80049e4 <HAL_GPIO_EXTI_Callback+0x38>
		  pid_mode = PID_MODE_AUTOMATIC;
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <HAL_GPIO_EXTI_Callback+0x58>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
		  pid_ptr->reset();
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_GPIO_EXTI_Callback+0x5c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fc f8a4 	bl	8000b2a <_ZN3PIDIfE5resetEv>
 80049e2:	e002      	b.n	80049ea <HAL_GPIO_EXTI_Callback+0x3e>
	  }else{
		  pid_mode = PID_MODE_MANUAL;
 80049e4:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <HAL_GPIO_EXTI_Callback+0x58>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	461a      	mov	r2, r3
 80049ee:	2120      	movs	r1, #32
 80049f0:	4806      	ldr	r0, [pc, #24]	; (8004a0c <HAL_GPIO_EXTI_Callback+0x60>)
 80049f2:	f007 fb6b 	bl	800c0cc <HAL_GPIO_WritePin>
  }
}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	58021000 	.word	0x58021000
 8004a04:	24004404 	.word	0x24004404
 8004a08:	24004538 	.word	0x24004538
 8004a0c:	58020c00 	.word	0x58020c00

08004a10 <_Z9adc_setupv>:

void adc_setup(){
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)force_raw,8);
 8004a14:	2208      	movs	r2, #8
 8004a16:	4903      	ldr	r1, [pc, #12]	; (8004a24 <_Z9adc_setupv+0x14>)
 8004a18:	4803      	ldr	r0, [pc, #12]	; (8004a28 <_Z9adc_setupv+0x18>)
 8004a1a:	f003 f86d 	bl	8007af8 <HAL_ADC_Start_DMA>
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	240043e4 	.word	0x240043e4
 8004a28:	240012e8 	.word	0x240012e8

08004a2c <_Z10uart_setupv>:

void uart_setup(){
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 8004a30:	2220      	movs	r2, #32
 8004a32:	493b      	ldr	r1, [pc, #236]	; (8004b20 <_Z10uart_setupv+0xf4>)
 8004a34:	483b      	ldr	r0, [pc, #236]	; (8004b24 <_Z10uart_setupv+0xf8>)
 8004a36:	f00d ff0b 	bl	8012850 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, 2*SPEED_PIN_COUNT+4);
 8004a3a:	2224      	movs	r2, #36	; 0x24
 8004a3c:	493a      	ldr	r1, [pc, #232]	; (8004b28 <_Z10uart_setupv+0xfc>)
 8004a3e:	483b      	ldr	r0, [pc, #236]	; (8004b2c <_Z10uart_setupv+0x100>)
 8004a40:	f00d ff06 	bl	8012850 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart8, jy901_data, 11);
 8004a44:	220b      	movs	r2, #11
 8004a46:	493a      	ldr	r1, [pc, #232]	; (8004b30 <_Z10uart_setupv+0x104>)
 8004a48:	483a      	ldr	r0, [pc, #232]	; (8004b34 <_Z10uart_setupv+0x108>)
 8004a4a:	f00d ff01 	bl	8012850 <HAL_UART_Receive_DMA>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart7, usb_buf, 100);
 8004a4e:	2264      	movs	r2, #100	; 0x64
 8004a50:	4939      	ldr	r1, [pc, #228]	; (8004b38 <_Z10uart_setupv+0x10c>)
 8004a52:	483a      	ldr	r0, [pc, #232]	; (8004b3c <_Z10uart_setupv+0x110>)
 8004a54:	f00f fde0 	bl	8014618 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004a58:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a39      	ldr	r2, [pc, #228]	; (8004b44 <_Z10uart_setupv+0x118>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d04a      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004a62:	4b37      	ldr	r3, [pc, #220]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a38      	ldr	r2, [pc, #224]	; (8004b48 <_Z10uart_setupv+0x11c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d045      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004a6c:	4b34      	ldr	r3, [pc, #208]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a36      	ldr	r2, [pc, #216]	; (8004b4c <_Z10uart_setupv+0x120>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d040      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004a76:	4b32      	ldr	r3, [pc, #200]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a35      	ldr	r2, [pc, #212]	; (8004b50 <_Z10uart_setupv+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d03b      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004a80:	4b2f      	ldr	r3, [pc, #188]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a33      	ldr	r2, [pc, #204]	; (8004b54 <_Z10uart_setupv+0x128>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d036      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004a8a:	4b2d      	ldr	r3, [pc, #180]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a32      	ldr	r2, [pc, #200]	; (8004b58 <_Z10uart_setupv+0x12c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d031      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004a94:	4b2a      	ldr	r3, [pc, #168]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a30      	ldr	r2, [pc, #192]	; (8004b5c <_Z10uart_setupv+0x130>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d02c      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004a9e:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2f      	ldr	r2, [pc, #188]	; (8004b60 <_Z10uart_setupv+0x134>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d027      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2d      	ldr	r2, [pc, #180]	; (8004b64 <_Z10uart_setupv+0x138>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d022      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004ab2:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2c      	ldr	r2, [pc, #176]	; (8004b68 <_Z10uart_setupv+0x13c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d01d      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004abc:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <_Z10uart_setupv+0x140>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004ac6:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a29      	ldr	r2, [pc, #164]	; (8004b70 <_Z10uart_setupv+0x144>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <_Z10uart_setupv+0x148>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004ada:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <_Z10uart_setupv+0x14c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004ae4:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a24      	ldr	r2, [pc, #144]	; (8004b7c <_Z10uart_setupv+0x150>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <_Z10uart_setupv+0xcc>
 8004aee:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a23      	ldr	r2, [pc, #140]	; (8004b80 <_Z10uart_setupv+0x154>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d108      	bne.n	8004b0a <_Z10uart_setupv+0xde>
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0208 	bic.w	r2, r2, #8
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e008      	b.n	8004b1c <_Z10uart_setupv+0xf0>
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <_Z10uart_setupv+0x114>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0204 	bic.w	r2, r2, #4
 8004b18:	601a      	str	r2, [r3, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	2400437c 	.word	0x2400437c
 8004b24:	240013d4 	.word	0x240013d4
 8004b28:	240043a0 	.word	0x240043a0
 8004b2c:	240014fc 	.word	0x240014fc
 8004b30:	240044a8 	.word	0x240044a8
 8004b34:	24001624 	.word	0x24001624
 8004b38:	24004414 	.word	0x24004414
 8004b3c:	24001590 	.word	0x24001590
 8004b40:	24001898 	.word	0x24001898
 8004b44:	40020010 	.word	0x40020010
 8004b48:	40020028 	.word	0x40020028
 8004b4c:	40020040 	.word	0x40020040
 8004b50:	40020058 	.word	0x40020058
 8004b54:	40020070 	.word	0x40020070
 8004b58:	40020088 	.word	0x40020088
 8004b5c:	400200a0 	.word	0x400200a0
 8004b60:	400200b8 	.word	0x400200b8
 8004b64:	40020410 	.word	0x40020410
 8004b68:	40020428 	.word	0x40020428
 8004b6c:	40020440 	.word	0x40020440
 8004b70:	40020458 	.word	0x40020458
 8004b74:	40020470 	.word	0x40020470
 8004b78:	40020488 	.word	0x40020488
 8004b7c:	400204a0 	.word	0x400204a0
 8004b80:	400204b8 	.word	0x400204b8

08004b84 <_Z11timer_setupv>:

void timer_setup(){
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0

	//set tim16 ARR value based on topic publish frequency and start tim16, 10000 = 100M/(9999+1), where 9999 is the prescale of timer16
	__HAL_TIM_SET_PRESCALER(&htim16,9999);
 8004b88:	4b6e      	ldr	r3, [pc, #440]	; (8004d44 <_Z11timer_setupv+0x1c0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004b90:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim16,10000/parameters.publish_frequency-1);
 8004b92:	4b6d      	ldr	r3, [pc, #436]	; (8004d48 <_Z11timer_setupv+0x1c4>)
 8004b94:	7d5b      	ldrb	r3, [r3, #21]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f242 7310 	movw	r3, #10000	; 0x2710
 8004b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ba0:	1e5a      	subs	r2, r3, #1
 8004ba2:	4b68      	ldr	r3, [pc, #416]	; (8004d44 <_Z11timer_setupv+0x1c0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ba8:	4b67      	ldr	r3, [pc, #412]	; (8004d48 <_Z11timer_setupv+0x1c4>)
 8004baa:	7d5b      	ldrb	r3, [r3, #21]
 8004bac:	461a      	mov	r2, r3
 8004bae:	f242 7310 	movw	r3, #10000	; 0x2710
 8004bb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4b62      	ldr	r3, [pc, #392]	; (8004d44 <_Z11timer_setupv+0x1c0>)
 8004bbc:	60da      	str	r2, [r3, #12]

	//set tim6 ARR value based on PID calculation frequency and start tim7
	__HAL_TIM_SET_PRESCALER(&htim6,9999);
 8004bbe:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <_Z11timer_setupv+0x1c8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f242 720f 	movw	r2, #9999	; 0x270f
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim6,uint32_t(10000/parameters.pid_frequency-1));
 8004bc8:	4b5f      	ldr	r3, [pc, #380]	; (8004d48 <_Z11timer_setupv+0x1c4>)
 8004bca:	7d1b      	ldrb	r3, [r3, #20]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f242 7310 	movw	r3, #10000	; 0x2710
 8004bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bd6:	1e5a      	subs	r2, r3, #1
 8004bd8:	4b5c      	ldr	r3, [pc, #368]	; (8004d4c <_Z11timer_setupv+0x1c8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bde:	4b5a      	ldr	r3, [pc, #360]	; (8004d48 <_Z11timer_setupv+0x1c4>)
 8004be0:	7d1b      	ldrb	r3, [r3, #20]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f242 7310 	movw	r3, #10000	; 0x2710
 8004be8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bec:	3b01      	subs	r3, #1
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4b56      	ldr	r3, [pc, #344]	; (8004d4c <_Z11timer_setupv+0x1c8>)
 8004bf2:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim6);
 8004bf4:	4855      	ldr	r0, [pc, #340]	; (8004d4c <_Z11timer_setupv+0x1c8>)
 8004bf6:	f00b fccf 	bl	8010598 <HAL_TIM_Base_Start_IT>

	//start esc and steering servo pwm output
	input_freq = parameters.steering_esc_pwm_frequency;
 8004bfa:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <_Z11timer_setupv+0x1c4>)
 8004bfc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c04:	ee17 2a90 	vmov	r2, s15
 8004c08:	4b51      	ldr	r3, [pc, #324]	; (8004d50 <_Z11timer_setupv+0x1cc>)
 8004c0a:	601a      	str	r2, [r3, #0]
	esc_servo_arr = 1000000/parameters.steering_esc_pwm_frequency-1;
 8004c0c:	4b4e      	ldr	r3, [pc, #312]	; (8004d48 <_Z11timer_setupv+0x1c4>)
 8004c0e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004c12:	eddf 6a50 	vldr	s13, [pc, #320]	; 8004d54 <_Z11timer_setupv+0x1d0>
 8004c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c26:	ee17 2a90 	vmov	r2, s15
 8004c2a:	4b4b      	ldr	r3, [pc, #300]	; (8004d58 <_Z11timer_setupv+0x1d4>)
 8004c2c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim3,esc_servo_arr);
 8004c2e:	4b4b      	ldr	r3, [pc, #300]	; (8004d5c <_Z11timer_setupv+0x1d8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a49      	ldr	r2, [pc, #292]	; (8004d58 <_Z11timer_setupv+0x1d4>)
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c38:	4b47      	ldr	r3, [pc, #284]	; (8004d58 <_Z11timer_setupv+0x1d4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a47      	ldr	r2, [pc, #284]	; (8004d5c <_Z11timer_setupv+0x1d8>)
 8004c3e:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,parameters.steering_offset);
 8004c40:	4b41      	ldr	r3, [pc, #260]	; (8004d48 <_Z11timer_setupv+0x1c4>)
 8004c42:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004c46:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <_Z11timer_setupv+0x1d8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4e:	ee17 2a90 	vmov	r2, s15
 8004c52:	635a      	str	r2, [r3, #52]	; 0x34
	pre_servo_ccr = parameters.steering_offset;
 8004c54:	4b3c      	ldr	r3, [pc, #240]	; (8004d48 <_Z11timer_setupv+0x1c4>)
 8004c56:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c5e:	ee17 2a90 	vmov	r2, s15
 8004c62:	4b3f      	ldr	r3, [pc, #252]	; (8004d60 <_Z11timer_setupv+0x1dc>)
 8004c64:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,parameters.esc_offset);
 8004c66:	4b38      	ldr	r3, [pc, #224]	; (8004d48 <_Z11timer_setupv+0x1c4>)
 8004c68:	edd3 7a07 	vldr	s15, [r3, #28]
 8004c6c:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <_Z11timer_setupv+0x1d8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c74:	ee17 2a90 	vmov	r2, s15
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
	pre_esc_ccr = parameters.esc_offset;
 8004c7a:	4b33      	ldr	r3, [pc, #204]	; (8004d48 <_Z11timer_setupv+0x1c4>)
 8004c7c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c84:	ee17 2a90 	vmov	r2, s15
 8004c88:	4b36      	ldr	r3, [pc, #216]	; (8004d64 <_Z11timer_setupv+0x1e0>)
 8004c8a:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4833      	ldr	r0, [pc, #204]	; (8004d5c <_Z11timer_setupv+0x1d8>)
 8004c90:	f00b fd5c 	bl	801074c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004c94:	2104      	movs	r1, #4
 8004c96:	4831      	ldr	r0, [pc, #196]	; (8004d5c <_Z11timer_setupv+0x1d8>)
 8004c98:	f00b fd58 	bl	801074c <HAL_TIM_PWM_Start>

	//set brake pwm, prescaler 99, timer frequency is 100MHz
	__HAL_TIM_SET_PRESCALER(&htim2,99);
 8004c9c:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <_Z11timer_setupv+0x1e4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2263      	movs	r2, #99	; 0x63
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28
	//set tim2 ARR value based on brake frequency and start tim6, 1000000 = 100M/(99+1)
	brake_arr = uint32_t(1000000/parameters.brake_pwm_frequency-1);
 8004ca4:	4b28      	ldr	r3, [pc, #160]	; (8004d48 <_Z11timer_setupv+0x1c4>)
 8004ca6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8004caa:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004d54 <_Z11timer_setupv+0x1d0>
 8004cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbe:	ee17 2a90 	vmov	r2, s15
 8004cc2:	4b2a      	ldr	r3, [pc, #168]	; (8004d6c <_Z11timer_setupv+0x1e8>)
 8004cc4:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim2,brake_arr);
 8004cc6:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <_Z11timer_setupv+0x1e4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a28      	ldr	r2, [pc, #160]	; (8004d6c <_Z11timer_setupv+0x1e8>)
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cd0:	4b26      	ldr	r3, [pc, #152]	; (8004d6c <_Z11timer_setupv+0x1e8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a24      	ldr	r2, [pc, #144]	; (8004d68 <_Z11timer_setupv+0x1e4>)
 8004cd6:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4823      	ldr	r0, [pc, #140]	; (8004d68 <_Z11timer_setupv+0x1e4>)
 8004cdc:	f00b fd36 	bl	801074c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004ce0:	2104      	movs	r1, #4
 8004ce2:	4821      	ldr	r0, [pc, #132]	; (8004d68 <_Z11timer_setupv+0x1e4>)
 8004ce4:	f00b fd32 	bl	801074c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004ce8:	2108      	movs	r1, #8
 8004cea:	481f      	ldr	r0, [pc, #124]	; (8004d68 <_Z11timer_setupv+0x1e4>)
 8004cec:	f00b fd2e 	bl	801074c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004cf0:	210c      	movs	r1, #12
 8004cf2:	481d      	ldr	r0, [pc, #116]	; (8004d68 <_Z11timer_setupv+0x1e4>)
 8004cf4:	f00b fd2a 	bl	801074c <HAL_TIM_PWM_Start>
	//initial value zeros
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <_Z11timer_setupv+0x1e4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8004d00:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <_Z11timer_setupv+0x1e4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2200      	movs	r2, #0
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8004d08:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <_Z11timer_setupv+0x1e4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,0);
 8004d10:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <_Z11timer_setupv+0x1e4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40

	//pwm input capture for servo and esc
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4815      	ldr	r0, [pc, #84]	; (8004d70 <_Z11timer_setupv+0x1ec>)
 8004d1c:	f00b ff8a 	bl	8010c34 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8004d20:	2104      	movs	r1, #4
 8004d22:	4813      	ldr	r0, [pc, #76]	; (8004d70 <_Z11timer_setupv+0x1ec>)
 8004d24:	f00b fe82 	bl	8010a2c <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4812      	ldr	r0, [pc, #72]	; (8004d74 <_Z11timer_setupv+0x1f0>)
 8004d2c:	f00b ff82 	bl	8010c34 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8004d30:	2104      	movs	r1, #4
 8004d32:	4810      	ldr	r0, [pc, #64]	; (8004d74 <_Z11timer_setupv+0x1f0>)
 8004d34:	f00b fe7a 	bl	8010a2c <HAL_TIM_IC_Start>

	//start ros publish
	//this timer should start as the last one.
	HAL_TIM_Base_Start_IT(&htim16);
 8004d38:	4802      	ldr	r0, [pc, #8]	; (8004d44 <_Z11timer_setupv+0x1c0>)
 8004d3a:	f00b fc2d 	bl	8010598 <HAL_TIM_Base_Start_IT>


}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	24001b50 	.word	0x24001b50
 8004d48:	24000004 	.word	0x24000004
 8004d4c:	24001ab8 	.word	0x24001ab8
 8004d50:	240044a4 	.word	0x240044a4
 8004d54:	49742400 	.word	0x49742400
 8004d58:	24004480 	.word	0x24004480
 8004d5c:	24001a20 	.word	0x24001a20
 8004d60:	24004484 	.word	0x24004484
 8004d64:	24004488 	.word	0x24004488
 8004d68:	240019d4 	.word	0x240019d4
 8004d6c:	2400447c 	.word	0x2400447c
 8004d70:	24001a6c 	.word	0x24001a6c
 8004d74:	24001b04 	.word	0x24001b04

08004d78 <_Z9ros_setupv>:
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
ros::Subscriber<std_msgs::Bool> input_mode_sub("Commands/input_mode", &input_mode_callback );
ros::Subscriber<std_msgs::Bool> pid_mode_sub("Commands/pid_mode", &pid_mode_callback );

void ros_setup(){
 8004d78:	b598      	push	{r3, r4, r7, lr}
 8004d7a:	af00      	add	r7, sp, #0

	//setup the sensor message, the first 16 data are speed, next 8 data are force, next

	nh.initNode();
 8004d7c:	4823      	ldr	r0, [pc, #140]	; (8004e0c <_Z9ros_setupv+0x94>)
 8004d7e:	f000 fce5 	bl	800574c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8initNodeEv>

	nh.subscribe(speed_sub);
 8004d82:	4923      	ldr	r1, [pc, #140]	; (8004e10 <_Z9ros_setupv+0x98>)
 8004d84:	4821      	ldr	r0, [pc, #132]	; (8004e0c <_Z9ros_setupv+0x94>)
 8004d86:	f000 fd0a 	bl	800579e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(input_mode_sub);
 8004d8a:	4922      	ldr	r1, [pc, #136]	; (8004e14 <_Z9ros_setupv+0x9c>)
 8004d8c:	481f      	ldr	r0, [pc, #124]	; (8004e0c <_Z9ros_setupv+0x94>)
 8004d8e:	f000 fd06 	bl	800579e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(brake_sub);
 8004d92:	4921      	ldr	r1, [pc, #132]	; (8004e18 <_Z9ros_setupv+0xa0>)
 8004d94:	481d      	ldr	r0, [pc, #116]	; (8004e0c <_Z9ros_setupv+0x94>)
 8004d96:	f000 fd02 	bl	800579e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(steering_sub);
 8004d9a:	4920      	ldr	r1, [pc, #128]	; (8004e1c <_Z9ros_setupv+0xa4>)
 8004d9c:	481b      	ldr	r0, [pc, #108]	; (8004e0c <_Z9ros_setupv+0x94>)
 8004d9e:	f000 fcfe 	bl	800579e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(duty_cycle_sub);
 8004da2:	491f      	ldr	r1, [pc, #124]	; (8004e20 <_Z9ros_setupv+0xa8>)
 8004da4:	4819      	ldr	r0, [pc, #100]	; (8004e0c <_Z9ros_setupv+0x94>)
 8004da6:	f000 fcfa 	bl	800579e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(pid_mode_sub);
 8004daa:	491e      	ldr	r1, [pc, #120]	; (8004e24 <_Z9ros_setupv+0xac>)
 8004dac:	4817      	ldr	r0, [pc, #92]	; (8004e0c <_Z9ros_setupv+0x94>)
 8004dae:	f000 fcf6 	bl	800579e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>

	sensor_msg.data_length = 2*wheel_speed_size;
 8004db2:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <_Z9ros_setupv+0xb0>)
 8004db4:	2220      	movs	r2, #32
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24
	//sensor_msg.data_length = 2*wheel_speed_size + 4*force_size + sizeof(esc_sensor) + sizeof(jy901.JY901_data.acc) + sizeof(jy901.JY901_data.gyro)+sizeof(jy901.JY901_data.angle)+1;
	sensor_msg.data = new std_msgs::Float32MultiArray::_data_type[sensor_msg.data_length];
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <_Z9ros_setupv+0xb0>)
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d201      	bcs.n	8004dc8 <_Z9ros_setupv+0x50>
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	e001      	b.n	8004dcc <_Z9ros_setupv+0x54>
 8004dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f00f fcd8 	bl	8014782 <_Znaj>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <_Z9ros_setupv+0xb0>)
 8004dd8:	62da      	str	r2, [r3, #44]	; 0x2c

	ros_pub = new ros::Publisher("stm32_sensor", &sensor_msg);
 8004dda:	2014      	movs	r0, #20
 8004ddc:	f00f fcc0 	bl	8014760 <_Znwj>
 8004de0:	4603      	mov	r3, r0
 8004de2:	461c      	mov	r4, r3
 8004de4:	2300      	movs	r3, #0
 8004de6:	4a10      	ldr	r2, [pc, #64]	; (8004e28 <_Z9ros_setupv+0xb0>)
 8004de8:	4910      	ldr	r1, [pc, #64]	; (8004e2c <_Z9ros_setupv+0xb4>)
 8004dea:	4620      	mov	r0, r4
 8004dec:	f7fd ff50 	bl	8002c90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <_Z9ros_setupv+0xb8>)
 8004df2:	601c      	str	r4, [r3, #0]
	nh.advertise(*ros_pub);
 8004df4:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <_Z9ros_setupv+0xb8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4804      	ldr	r0, [pc, #16]	; (8004e0c <_Z9ros_setupv+0x94>)
 8004dfc:	f000 fcfc 	bl	80057f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	HAL_Delay(1000);
 8004e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e04:	f002 fa9e 	bl	8007344 <HAL_Delay>
}
 8004e08:	bf00      	nop
 8004e0a:	bd98      	pop	{r3, r4, r7, pc}
 8004e0c:	24001ba0 	.word	0x24001ba0
 8004e10:	24004540 	.word	0x24004540
 8004e14:	240045d8 	.word	0x240045d8
 8004e18:	24004594 	.word	0x24004594
 8004e1c:	24004578 	.word	0x24004578
 8004e20:	2400455c 	.word	0x2400455c
 8004e24:	240045f4 	.word	0x240045f4
 8004e28:	24004334 	.word	0x24004334
 8004e2c:	080173a4 	.word	0x080173a4
 8004e30:	24004364 	.word	0x24004364

08004e34 <_Z15read_parametersv>:
	//blue and yellow led, default off
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
}

void read_parameters(){
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
	QSPI_W25Q64JV_Init();
 8004e3a:	f7fb ff2b 	bl	8000c94 <QSPI_W25Q64JV_Init>
	QSPI_W25Q64JV_Reset();
 8004e3e:	f7fb ff31 	bl	8000ca4 <QSPI_W25Q64JV_Reset>

	uint8_t id[2];
	if (QSPI_OK != QSPI_W25Q64JV_DeviceID(id)) {
 8004e42:	1d3b      	adds	r3, r7, #4
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fc f929 	bl	800109c <QSPI_W25Q64JV_DeviceID>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <_Z15read_parametersv+0x2c>
	    printf("Initializing ROM\n");
 8004e5a:	4820      	ldr	r0, [pc, #128]	; (8004edc <_Z15read_parametersv+0xa8>)
 8004e5c:	f010 fafe 	bl	801545c <puts>
	}
	printf("Connect to ROM, ROM ID: [0x%02x,0x%02x]\n",id[0],id[1]);
 8004e60:	793b      	ldrb	r3, [r7, #4]
 8004e62:	4619      	mov	r1, r3
 8004e64:	797b      	ldrb	r3, [r7, #5]
 8004e66:	461a      	mov	r2, r3
 8004e68:	481d      	ldr	r0, [pc, #116]	; (8004ee0 <_Z15read_parametersv+0xac>)
 8004e6a:	f010 fa91 	bl	8015390 <iprintf>

	char header[4];
	QSPI_W25Q64JV_Read((uint8_t*)header, 0x00, 4);
 8004e6e:	463b      	mov	r3, r7
 8004e70:	2204      	movs	r2, #4
 8004e72:	2100      	movs	r1, #0
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fb ff93 	bl	8000da0 <QSPI_W25Q64JV_Read>
	if(header[0]!='a' || header[1]!='c' || header[2]!='s' || header[3]!='r'){
 8004e7a:	783b      	ldrb	r3, [r7, #0]
 8004e7c:	2b61      	cmp	r3, #97	; 0x61
 8004e7e:	d108      	bne.n	8004e92 <_Z15read_parametersv+0x5e>
 8004e80:	787b      	ldrb	r3, [r7, #1]
 8004e82:	2b63      	cmp	r3, #99	; 0x63
 8004e84:	d105      	bne.n	8004e92 <_Z15read_parametersv+0x5e>
 8004e86:	78bb      	ldrb	r3, [r7, #2]
 8004e88:	2b73      	cmp	r3, #115	; 0x73
 8004e8a:	d102      	bne.n	8004e92 <_Z15read_parametersv+0x5e>
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	2b72      	cmp	r3, #114	; 0x72
 8004e90:	d003      	beq.n	8004e9a <_Z15read_parametersv+0x66>
		printf("Reading parameters fails, use default parameters\n");
 8004e92:	4814      	ldr	r0, [pc, #80]	; (8004ee4 <_Z15read_parametersv+0xb0>)
 8004e94:	f010 fae2 	bl	801545c <puts>
		return;
 8004e98:	e01c      	b.n	8004ed4 <_Z15read_parametersv+0xa0>
	}

	QSPI_W25Q64JV_Read((uint8_t*)(&parameters), 0x00, sizeof(ParameterTypeDef));
 8004e9a:	226c      	movs	r2, #108	; 0x6c
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4812      	ldr	r0, [pc, #72]	; (8004ee8 <_Z15read_parametersv+0xb4>)
 8004ea0:	f7fb ff7e 	bl	8000da0 <QSPI_W25Q64JV_Read>
	if(parameters.tailer[0]!='b' || parameters.tailer[1]!='4' || parameters.tailer[2]!='0' || parameters.tailer[3]!='1'){
 8004ea4:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <_Z15read_parametersv+0xb4>)
 8004ea6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004eaa:	2b62      	cmp	r3, #98	; 0x62
 8004eac:	d10e      	bne.n	8004ecc <_Z15read_parametersv+0x98>
 8004eae:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <_Z15read_parametersv+0xb4>)
 8004eb0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004eb4:	2b34      	cmp	r3, #52	; 0x34
 8004eb6:	d109      	bne.n	8004ecc <_Z15read_parametersv+0x98>
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <_Z15read_parametersv+0xb4>)
 8004eba:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004ebe:	2b30      	cmp	r3, #48	; 0x30
 8004ec0:	d104      	bne.n	8004ecc <_Z15read_parametersv+0x98>
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <_Z15read_parametersv+0xb4>)
 8004ec4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8004ec8:	2b31      	cmp	r3, #49	; 0x31
 8004eca:	d003      	beq.n	8004ed4 <_Z15read_parametersv+0xa0>
		printf("Reading parameters fails, use default parameters\n");
 8004ecc:	4805      	ldr	r0, [pc, #20]	; (8004ee4 <_Z15read_parametersv+0xb0>)
 8004ece:	f010 fac5 	bl	801545c <puts>
		return;
 8004ed2:	bf00      	nop
	}
}
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	080173b4 	.word	0x080173b4
 8004ee0:	080173c8 	.word	0x080173c8
 8004ee4:	080173f4 	.word	0x080173f4
 8004ee8:	24000004 	.word	0x24000004

08004eec <_Z9reset_pidv>:

void reset_pid(){
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af02      	add	r7, sp, #8
	//reset pid class
	if(pid_ptr)delete pid_ptr;
 8004ef2:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <_Z9reset_pidv+0x74>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <_Z9reset_pidv+0x1e>
 8004efa:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <_Z9reset_pidv+0x74>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <_Z9reset_pidv+0x1e>
 8004f02:	2130      	movs	r1, #48	; 0x30
 8004f04:	4618      	mov	r0, r3
 8004f06:	f00f fc29 	bl	801475c <_ZdlPvj>
	pid_ptr = new PID<float>(&current_esc_speed,&pid_esc_duty_cycle_output,&pid_speed_set,parameters.kp,parameters.ki,parameters.kd);
 8004f0a:	2030      	movs	r0, #48	; 0x30
 8004f0c:	f00f fc28 	bl	8014760 <_Znwj>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461c      	mov	r4, r3
 8004f14:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <_Z9reset_pidv+0x78>)
 8004f16:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f1a:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <_Z9reset_pidv+0x78>)
 8004f1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004f20:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <_Z9reset_pidv+0x78>)
 8004f22:	edd3 6a04 	vldr	s13, [r3, #16]
 8004f26:	2300      	movs	r3, #0
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	eeb0 1a66 	vmov.f32	s2, s13
 8004f2e:	eef0 0a47 	vmov.f32	s1, s14
 8004f32:	eeb0 0a67 	vmov.f32	s0, s15
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <_Z9reset_pidv+0x7c>)
 8004f38:	4a0c      	ldr	r2, [pc, #48]	; (8004f6c <_Z9reset_pidv+0x80>)
 8004f3a:	490d      	ldr	r1, [pc, #52]	; (8004f70 <_Z9reset_pidv+0x84>)
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f7fb fcbb 	bl	80008b8 <_ZN3PIDIfEC1EPfS1_S1_fffh>
 8004f42:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <_Z9reset_pidv+0x74>)
 8004f44:	601c      	str	r4, [r3, #0]
	pid_ptr->set_output_limits(-1,+1);
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <_Z9reset_pidv+0x74>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004f4e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb fd90 	bl	8000a78 <_ZN3PIDIfE17set_output_limitsEff>
}
 8004f58:	bf00      	nop
 8004f5a:	3704      	adds	r7, #4
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd90      	pop	{r4, r7, pc}
 8004f60:	24004538 	.word	0x24004538
 8004f64:	24000004 	.word	0x24000004
 8004f68:	24004408 	.word	0x24004408
 8004f6c:	2400440c 	.word	0x2400440c
 8004f70:	24004410 	.word	0x24004410

08004f74 <setup>:


void setup(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
	DWT_Init();
 8004f78:	f7fe fd5a 	bl	8003a30 <_ZL8DWT_Initv>
	read_parameters();
 8004f7c:	f7ff ff5a 	bl	8004e34 <_Z15read_parametersv>
	reset_pid();
 8004f80:	f7ff ffb4 	bl	8004eec <_Z9reset_pidv>
	uart_setup();
 8004f84:	f7ff fd52 	bl	8004a2c <_Z10uart_setupv>
	adc_setup();
 8004f88:	f7ff fd42 	bl	8004a10 <_Z9adc_setupv>
	ros_setup();
 8004f8c:	f7ff fef4 	bl	8004d78 <_Z9ros_setupv>
	timer_setup();
 8004f90:	f7ff fdf8 	bl	8004b84 <_Z11timer_setupv>
	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8004f94:	2200      	movs	r2, #0
 8004f96:	2120      	movs	r1, #32
 8004f98:	4808      	ldr	r0, [pc, #32]	; (8004fbc <setup+0x48>)
 8004f9a:	f007 f897 	bl	800c0cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	2108      	movs	r1, #8
 8004fa2:	4807      	ldr	r0, [pc, #28]	; (8004fc0 <setup+0x4c>)
 8004fa4:	f007 f892 	bl	800c0cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, (GPIO_PinState)pid_mode);
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <setup+0x50>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	2120      	movs	r1, #32
 8004fb0:	4805      	ldr	r0, [pc, #20]	; (8004fc8 <setup+0x54>)
 8004fb2:	f007 f88b 	bl	800c0cc <HAL_GPIO_WritePin>
}
 8004fb6:	bf00      	nop
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	58020400 	.word	0x58020400
 8004fc0:	58021000 	.word	0x58021000
 8004fc4:	24004404 	.word	0x24004404
 8004fc8:	58020c00 	.word	0x58020c00

08004fcc <loop>:

uint8_t loop_index = 0;

void loop(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
	auto state = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin);
 8004fd2:	2180      	movs	r1, #128	; 0x80
 8004fd4:	4836      	ldr	r0, [pc, #216]	; (80050b0 <loop+0xe4>)
 8004fd6:	f007 f861 	bl	800c09c <HAL_GPIO_ReadPin>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	71fb      	strb	r3, [r7, #7]

	if(state==GPIO_PIN_SET){
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d103      	bne.n	8004fec <loop+0x20>
		input_mode = INPUT_MODE_CONTROLLER;
 8004fe4:	4b33      	ldr	r3, [pc, #204]	; (80050b4 <loop+0xe8>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e005      	b.n	8004ff8 <loop+0x2c>
	}else if(state==GPIO_PIN_RESET){
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d102      	bne.n	8004ff8 <loop+0x2c>
		input_mode = INPUT_MODE_SOFTWARE;
 8004ff2:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <loop+0xe8>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, state);
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	2108      	movs	r1, #8
 8004ffe:	482e      	ldr	r0, [pc, #184]	; (80050b8 <loop+0xec>)
 8005000:	f007 f864 	bl	800c0cc <HAL_GPIO_WritePin>

	loop_index++;
 8005004:	4b2d      	ldr	r3, [pc, #180]	; (80050bc <loop+0xf0>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	b2da      	uxtb	r2, r3
 800500c:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <loop+0xf0>)
 800500e:	701a      	strb	r2, [r3, #0]

	if(esc_receive_indicator <=5 )esc_receive_indicator++;
 8005010:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <loop+0xf4>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b05      	cmp	r3, #5
 8005016:	d805      	bhi.n	8005024 <loop+0x58>
 8005018:	4b29      	ldr	r3, [pc, #164]	; (80050c0 <loop+0xf4>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	b2da      	uxtb	r2, r3
 8005020:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <loop+0xf4>)
 8005022:	701a      	strb	r2, [r3, #0]
	if(f103_receive_indicator<=5)f103_receive_indicator++;
 8005024:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <loop+0xf8>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b05      	cmp	r3, #5
 800502a:	d805      	bhi.n	8005038 <loop+0x6c>
 800502c:	4b25      	ldr	r3, [pc, #148]	; (80050c4 <loop+0xf8>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	3301      	adds	r3, #1
 8005032:	b2da      	uxtb	r2, r3
 8005034:	4b23      	ldr	r3, [pc, #140]	; (80050c4 <loop+0xf8>)
 8005036:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100);
 8005038:	2064      	movs	r0, #100	; 0x64
 800503a:	f002 f983 	bl	8007344 <HAL_Delay>
	if(loop_index==5){
 800503e:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <loop+0xf0>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b05      	cmp	r3, #5
 8005044:	d12c      	bne.n	80050a0 <loop+0xd4>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8005046:	2140      	movs	r1, #64	; 0x40
 8005048:	481b      	ldr	r0, [pc, #108]	; (80050b8 <loop+0xec>)
 800504a:	f007 f858 	bl	800c0fe <HAL_GPIO_TogglePin>
		loop_index=0;
 800504e:	4b1b      	ldr	r3, [pc, #108]	; (80050bc <loop+0xf0>)
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]

		if(esc_receive_indicator>5)error_code = error_code | 0b00000001;
 8005054:	4b1a      	ldr	r3, [pc, #104]	; (80050c0 <loop+0xf4>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b05      	cmp	r3, #5
 800505a:	d907      	bls.n	800506c <loop+0xa0>
 800505c:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <loop+0xfc>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	b2da      	uxtb	r2, r3
 8005066:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <loop+0xfc>)
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	e006      	b.n	800507a <loop+0xae>
		else error_code = error_code & 0b11111110;
 800506c:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <loop+0xfc>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	b2da      	uxtb	r2, r3
 8005076:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <loop+0xfc>)
 8005078:	701a      	strb	r2, [r3, #0]

		if(f103_receive_indicator>5)error_code = error_code | 0b00000010;
 800507a:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <loop+0xf8>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b05      	cmp	r3, #5
 8005080:	d907      	bls.n	8005092 <loop+0xc6>
 8005082:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <loop+0xfc>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	f043 0302 	orr.w	r3, r3, #2
 800508a:	b2da      	uxtb	r2, r3
 800508c:	4b0e      	ldr	r3, [pc, #56]	; (80050c8 <loop+0xfc>)
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e006      	b.n	80050a0 <loop+0xd4>
		else error_code = error_code & 0b11111101;
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <loop+0xfc>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f023 0302 	bic.w	r3, r3, #2
 800509a:	b2da      	uxtb	r2, r3
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <loop+0xfc>)
 800509e:	701a      	strb	r2, [r3, #0]


	}
	HAL_IWDG_Refresh(&hiwdg1);
 80050a0:	480a      	ldr	r0, [pc, #40]	; (80050cc <loop+0x100>)
 80050a2:	f007 f8af 	bl	800c204 <HAL_IWDG_Refresh>
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	58020400 	.word	0x58020400
 80050b4:	24004478 	.word	0x24004478
 80050b8:	58020c00 	.word	0x58020c00
 80050bc:	24004610 	.word	0x24004610
 80050c0:	2400439d 	.word	0x2400439d
 80050c4:	2400439e 	.word	0x2400439e
 80050c8:	2400439c 	.word	0x2400439c
 80050cc:	240013c4 	.word	0x240013c4

080050d0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	e00c      	b.n	80050fa <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	fa22 f103 	lsr.w	r1, r2, r3
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	b2ca      	uxtb	r2, r1
 80050f2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3301      	adds	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d9ef      	bls.n	80050e0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e010      	b.n	8005146 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	440a      	add	r2, r1
 800512e:	7812      	ldrb	r2, [r2, #0]
 8005130:	4611      	mov	r1, r2
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	00d2      	lsls	r2, r2, #3
 8005136:	fa01 f202 	lsl.w	r2, r1, r2
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3301      	adds	r3, #1
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d9eb      	bls.n	8005124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
  }
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	4618      	mov	r0, r3
 8005180:	f7fd ff86 	bl	8003090 <_ZN13STM32Hardware4timeEv>
 8005184:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800518c:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005198:	4293      	cmp	r3, r2
 800519a:	d905      	bls.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x36>
    {
      configured_ = false;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051ae:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00e      	beq.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051bc:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d906      	bls.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051cc:	461a      	mov	r2, r3
 80051ce:	2300      	movs	r3, #0
 80051d0:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d014      	beq.n	8005208 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x96>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3304      	adds	r3, #4
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fd ff54 	bl	8003090 <_ZN13STM32Hardware4timeEv>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad2      	subs	r2, r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80051f4:	429a      	cmp	r2, r3
 80051f6:	bf8c      	ite	hi
 80051f8:	2301      	movhi	r3, #1
 80051fa:	2300      	movls	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x96>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8005202:	f06f 0301 	mvn.w	r3, #1
 8005206:	e221      	b.n	800564c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
        }
      }
      int data = hardware_.read();
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3304      	adds	r3, #4
 800520c:	4618      	mov	r0, r3
 800520e:	f7fd fe6f 	bl	8002ef0 <_ZN13STM32Hardware4readEv>
 8005212:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f2c0 81fa 	blt.w	8005610 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x49e>
        break;
      checksum_ += data;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005222:	f8d3 2754 	ldr.w	r2, [r3, #1876]	; 0x754
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4413      	add	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005230:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800523a:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800523e:	2b07      	cmp	r3, #7
 8005240:	d12b      	bne.n	800529a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x128>
      {
        message_in[index_++] = data;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005248:	f8d3 3750 	ldr.w	r3, [r3, #1872]	; 0x750
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8005254:	f8c1 2750 	str.w	r2, [r1, #1872]	; 0x750
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	b2d1      	uxtb	r1, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	4413      	add	r3, r2
 8005260:	460a      	mov	r2, r1
 8005262:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800526c:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 8005270:	3b01      	subs	r3, #1
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005278:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005282:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1a4      	bne.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005290:	461a      	mov	r2, r3
 8005292:	2308      	movs	r3, #8
 8005294:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005298:	e79c      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052a0:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d130      	bne.n	800530a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x198>
      {
        if (data == 0xff)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2bff      	cmp	r3, #255	; 0xff
 80052ac:	d112      	bne.n	80052d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x162>
        {
          mode_++;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052b4:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80052b8:	3301      	adds	r3, #1
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80052c0:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3314      	adds	r3, #20
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80052ce:	f8c2 3764 	str.w	r3, [r2, #1892]	; 0x764
 80052d2:	e77f      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fd fed9 	bl	8003090 <_ZN13STM32Hardware4timeEv>
 80052de:	4602      	mov	r2, r0
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	bf8c      	ite	hi
 80052ec:	2301      	movhi	r3, #1
 80052ee:	2300      	movls	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f43f af6e 	beq.w	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
          return SPIN_TIMEOUT;
 8005304:	f06f 0301 	mvn.w	r3, #1
 8005308:	e1a0      	b.n	800564c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005310:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005314:	2b01      	cmp	r3, #1
 8005316:	d121      	bne.n	800535c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x1ea>
      {
        if (data == PROTOCOL_VER)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2bfe      	cmp	r3, #254	; 0xfe
 800531c:	d10b      	bne.n	8005336 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x1c4>
        {
          mode_++;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005324:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005328:	3301      	adds	r3, #1
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005330:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005334:	e74e      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800533c:	461a      	mov	r2, r3
 800533e:	2300      	movs	r3, #0
 8005340:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
          if (configured_ == false)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800534a:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 800534e:	2b00      	cmp	r3, #0
 8005350:	f47f af40 	bne.w	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fa7f 	bl	8005858 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
 800535a:	e73b      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005362:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005366:	2b02      	cmp	r3, #2
 8005368:	d120      	bne.n	80053ac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x23a>
      {
        bytes_ = data;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005370:	461a      	mov	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        index_ = 0;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800537e:	461a      	mov	r2, r3
 8005380:	2300      	movs	r3, #0
 8005382:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
        mode_++;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800538c:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005390:	3301      	adds	r3, #1
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005398:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        checksum_ = data;               /* first byte for calculating size checksum */
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053a2:	461a      	mov	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 80053aa:	e713      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053b2:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d118      	bne.n	80053ec <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x27a>
      {
        bytes_ += data << 8;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053c0:	f8d3 2748 	ldr.w	r2, [r3, #1864]	; 0x748
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	4413      	add	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80053d0:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        mode_++;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053da:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80053de:	3301      	adds	r3, #1
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80053e6:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80053ea:	e6f3      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053f2:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d11f      	bne.n	800543a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x2c8>
      {
        if ((checksum_ % 256) == 255)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005400:	f8d3 3754 	ldr.w	r3, [r3, #1876]	; 0x754
 8005404:	425a      	negs	r2, r3
 8005406:	b2db      	uxtb	r3, r3
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	bf58      	it	pl
 800540c:	4253      	negpl	r3, r2
 800540e:	2bff      	cmp	r3, #255	; 0xff
 8005410:	d10b      	bne.n	800542a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x2b8>
          mode_++;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005418:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800541c:	3301      	adds	r3, #1
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005424:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005428:	e6d4      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005430:	461a      	mov	r2, r3
 8005432:	2300      	movs	r3, #0
 8005434:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005438:	e6cc      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005440:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005444:	2b05      	cmp	r3, #5
 8005446:	d119      	bne.n	800547c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x30a>
      {
        topic_ = data;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800544e:	461a      	mov	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
        mode_++;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800545c:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005460:	3301      	adds	r3, #1
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005468:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        checksum_ = data;               /* first byte included in checksum */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005472:	461a      	mov	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 800547a:	e6ab      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005482:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005486:	2b06      	cmp	r3, #6
 8005488:	d123      	bne.n	80054d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x360>
      {
        topic_ += data << 8;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005490:	f8d3 274c 	ldr.w	r2, [r3, #1868]	; 0x74c
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	4413      	add	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80054a0:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
        mode_ = MODE_MESSAGE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054aa:	461a      	mov	r2, r3
 80054ac:	2307      	movs	r3, #7
 80054ae:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        if (bytes_ == 0)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054b8:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f47f ae89 	bne.w	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054c8:	461a      	mov	r2, r3
 80054ca:	2308      	movs	r3, #8
 80054cc:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80054d0:	e680      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054d8:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80054dc:	2b08      	cmp	r3, #8
 80054de:	f47f ae79 	bne.w	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054e8:	461a      	mov	r2, r3
 80054ea:	2300      	movs	r3, #0
 80054ec:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        if ((checksum_ % 256) == 255)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054f6:	f8d3 3754 	ldr.w	r3, [r3, #1876]	; 0x754
 80054fa:	425a      	negs	r2, r3
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	bf58      	it	pl
 8005502:	4253      	negpl	r3, r2
 8005504:	2bff      	cmp	r3, #255	; 0xff
 8005506:	f47f ae65 	bne.w	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005510:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d116      	bne.n	8005546 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x3d4>
          {
            requestSyncTime();
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f99d 	bl	8005858 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f9b8 	bl	8005894 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
            last_sync_receive_time = c_time;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005538:	461a      	mov	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f8c2 3760 	str.w	r3, [r2, #1888]	; 0x760
            return SPIN_ERR;
 8005540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005544:	e082      	b.n	800564c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800554c:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005550:	2b0a      	cmp	r3, #10
 8005552:	d107      	bne.n	8005564 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x3f2>
          {
            syncTime(message_in);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fa83 	bl	8005a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh>
 8005562:	e637      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800556a:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 800556e:	2b06      	cmp	r3, #6
 8005570:	d111      	bne.n	8005596 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x424>
          {
            req_param_resp.deserialize(message_in);
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	f242 736c 	movw	r3, #10092	; 0x276c
 8005578:	4413      	add	r3, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8005580:	4611      	mov	r1, r2
 8005582:	4618      	mov	r0, r3
 8005584:	f7fd f9f7 	bl	8002976 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8005594:	e61e      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800559c:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80055a0:	2b0b      	cmp	r3, #11
 80055a2:	d106      	bne.n	80055b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x440>
          {
            configured_ = false;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 80055b0:	e610      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055b8:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80055bc:	3b64      	subs	r3, #100	; 0x64
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f43f ae02 	beq.w	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055d6:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80055da:	3b64      	subs	r3, #100	; 0x64
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	6858      	ldr	r0, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055ee:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80055f2:	3b64      	subs	r3, #100	; 0x64
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800560a:	4611      	mov	r1, r2
 800560c:	4798      	blx	r3
    while (true)
 800560e:	e5e1      	b.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        break;
 8005610:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005618:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 800561c:	2b00      	cmp	r3, #0
 800561e:	d014      	beq.n	800564a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4d8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005626:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005632:	4293      	cmp	r3, r2
 8005634:	d909      	bls.n	800564a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4d8>
    {
      requestSyncTime();
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f90e 	bl	8005858 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005642:	461a      	mov	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
    }

    return SPIN_OK;
 800564a:	2300      	movs	r3, #0
  }
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	4a04      	ldr	r2, [pc, #16]	; (8005670 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	080175cc 	.word	0x080175cc

08005674 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff ffe5 	bl	8005654 <_ZN3ros11Subscriber_C1Ev>
 800568a:	4a0b      	ldr	r2, [pc, #44]	; (80056b8 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	330c      	adds	r3, #12
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe f8c5 	bl	8003824 <_ZN8std_msgs7Float32C1Ev>
    cb_(cb),
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	609a      	str	r2, [r3, #8]
  };
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	08017528 	.word	0x08017528

080056bc <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff ffc1 	bl	8005654 <_ZN3ros11Subscriber_C1Ev>
 80056d2:	4a0b      	ldr	r2, [pc, #44]	; (8005700 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	330c      	adds	r3, #12
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fd ff67 	bl	80035b0 <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	63da      	str	r2, [r3, #60]	; 0x3c
    endpoint_(endpoint)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
    topic_ = topic_name;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	609a      	str	r2, [r3, #8]
  };
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	08017510 	.word	0x08017510

08005704 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff ff9d 	bl	8005654 <_ZN3ros11Subscriber_C1Ev>
 800571a:	4a0b      	ldr	r2, [pc, #44]	; (8005748 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	330c      	adds	r3, #12
 8005724:	4618      	mov	r0, r3
 8005726:	f7fe f919 	bl	800395c <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	609a      	str	r2, [r3, #8]
  };
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	080174f8 	.word	0x080174f8

0800574c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8initNodeEv>:
  void initNode()
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	4618      	mov	r0, r3
 800575a:	f7fd fbad 	bl	8002eb8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
    bytes_ = 0;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005772:	461a      	mov	r2, r3
 8005774:	2300      	movs	r3, #0
 8005776:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
    index_ = 0;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005780:	461a      	mov	r2, r3
 8005782:	2300      	movs	r3, #0
 8005784:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
    topic_ = 0;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800578e:	461a      	mov	r2, r3
 8005790:	2300      	movs	r3, #0
 8005792:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
  };
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e01a      	b.n	80057e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10e      	bne.n	80057de <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	605a      	str	r2, [r3, #4]
        return true;
 80057da:	2301      	movs	r3, #1
 80057dc:	e006      	b.n	80057ec <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b63      	cmp	r3, #99	; 0x63
 80057e8:	dde1      	ble.n	80057ae <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80057ea:	2300      	movs	r3, #0
  }
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e01d      	b.n	8005844 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d111      	bne.n	800583e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	60da      	str	r2, [r3, #12]
        return true;
 800583a:	2301      	movs	r3, #1
 800583c:	e006      	b.n	800584c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3301      	adds	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b63      	cmp	r3, #99	; 0x63
 8005848:	ddde      	ble.n	8005808 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
    return false;
 800584a:	2300      	movs	r3, #0
  }
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005860:	f107 030c 	add.w	r3, r7, #12
 8005864:	4618      	mov	r0, r3
 8005866:	f7fc fbe3 	bl	8002030 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f107 020c 	add.w	r2, r7, #12
 8005874:	210a      	movs	r1, #10
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
    rt_time = hardware_.time();
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3304      	adds	r3, #4
 800587e:	4618      	mov	r0, r3
 8005880:	f7fd fc06 	bl	8003090 <_ZN13STM32Hardware4timeEv>
 8005884:	4602      	mov	r2, r0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800588c:	bf00      	nop
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b08b      	sub	sp, #44	; 0x2c
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800589c:	f107 030c 	add.w	r3, r7, #12
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fc fcb5 	bl	8002210 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80058a6:	2300      	movs	r3, #0
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	e062      	b.n	8005972 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d056      	beq.n	800596c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	6859      	ldr	r1, [r3, #4]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3308      	adds	r3, #8
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4608      	mov	r0, r1
 800590c:	4798      	blx	r3
 800590e:	4603      	mov	r3, r0
 8005910:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	6859      	ldr	r1, [r3, #4]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4608      	mov	r0, r1
 800593a:	4798      	blx	r3
 800593c:	4603      	mov	r3, r0
 800593e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005944:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681c      	ldr	r4, [r3, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	f7fd f9c3 	bl	8002ce6 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005960:	4601      	mov	r1, r0
 8005962:	f107 030c 	add.w	r3, r7, #12
 8005966:	461a      	mov	r2, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	3301      	adds	r3, #1
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	2b63      	cmp	r3, #99	; 0x63
 8005976:	dd99      	ble.n	80058ac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005978:	2300      	movs	r3, #0
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
 800597c:	e067      	b.n	8005a4e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x1ba>
    {
      if (subscribers[i] != 0) // non-empty slot
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d05b      	beq.n	8005a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	6859      	ldr	r1, [r3, #4]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3308      	adds	r3, #8
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4608      	mov	r0, r1
 80059da:	4798      	blx	r3
 80059dc:	4603      	mov	r3, r0
 80059de:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	6859      	ldr	r1, [r3, #4]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4608      	mov	r0, r1
 8005a04:	4798      	blx	r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a0e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681c      	ldr	r4, [r3, #0]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	6859      	ldr	r1, [r3, #4]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3304      	adds	r3, #4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4608      	mov	r0, r1
 8005a3a:	4798      	blx	r3
 8005a3c:	4601      	mov	r1, r0
 8005a3e:	f107 030c 	add.w	r3, r7, #12
 8005a42:	461a      	mov	r2, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	2b63      	cmp	r3, #99	; 0x63
 8005a52:	dd94      	ble.n	800597e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
  }
 8005a60:	bf00      	nop
 8005a62:	372c      	adds	r7, #44	; 0x2c
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd90      	pop	{r4, r7, pc}

08005a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005a72:	f107 0308 	add.w	r3, r7, #8
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fc fada 	bl	8002030 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fd fb05 	bl	8003090 <_ZN13STM32Hardware4timeEv>
 8005a86:	4602      	mov	r2, r0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005a92:	f107 0308 	add.w	r3, r7, #8
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fc fb39 	bl	8002110 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4916      	ldr	r1, [pc, #88]	; (8005afc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8005aa4:	fba1 1303 	umull	r1, r3, r1, r3
 8005aa8:	099b      	lsrs	r3, r3, #6
 8005aaa:	4413      	add	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8005aae:	6939      	ldr	r1, [r7, #16]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8005ab4:	fba3 0302 	umull	r0, r3, r3, r2
 8005ab8:	099b      	lsrs	r3, r3, #6
 8005aba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005abe:	fb00 f303 	mul.w	r3, r0, r3
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	4a0e      	ldr	r2, [pc, #56]	; (8005b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x98>)
 8005ac6:	fb02 f303 	mul.w	r3, r2, r3
 8005aca:	440b      	add	r3, r1
 8005acc:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005ace:	f107 0308 	add.w	r3, r7, #8
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f8c0 	bl	8005c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fd fad5 	bl	8003090 <_ZN13STM32Hardware4timeEv>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005aee:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
  }
 8005af2:	bf00      	nop
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	10624dd3 	.word	0x10624dd3
 8005b00:	000f4240 	.word	0x000f4240

08005b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b63      	cmp	r3, #99	; 0x63
 8005b14:	dd0b      	ble.n	8005b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b1c:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 8005b20:	f083 0301 	eor.w	r3, r3, #1
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e090      	b.n	8005c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68f9      	ldr	r1, [r7, #12]
 8005b36:	f241 4324 	movw	r3, #5156	; 0x1424
 8005b3a:	440b      	add	r3, r1
 8005b3c:	3307      	adds	r3, #7
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	4790      	blx	r2
 8005b44:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    message_out[1] = PROTOCOL_VER;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b58:	22fe      	movs	r2, #254	; 0xfe
 8005b5a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b68:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	0a1b      	lsrs	r3, r3, #8
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7c:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b86:	f893 2426 	ldrb.w	r2, [r3, #1062]	; 0x426
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b90:	f893 3427 	ldrb.w	r3, [r3, #1063]	; 0x427
 8005b94:	4413      	add	r3, r2
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb0:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	b21b      	sxth	r3, r3
 8005bb8:	121b      	asrs	r3, r3, #8
 8005bba:	b21b      	sxth	r3, r3
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc4:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

    /* calculate checksum */
    int chk = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005bcc:	2305      	movs	r3, #5
 8005bce:	61bb      	str	r3, [r7, #24]
 8005bd0:	e00d      	b.n	8005bee <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	441a      	add	r2, r3
 8005bd8:	f241 4324 	movw	r3, #5156	; 0x1424
 8005bdc:	4413      	add	r3, r2
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	3301      	adds	r3, #1
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	3306      	adds	r3, #6
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	ddec      	ble.n	8005bd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	3307      	adds	r3, #7
 8005bfc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	425a      	negs	r2, r3
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	bf58      	it	pl
 8005c08:	4253      	negpl	r3, r2
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	1c59      	adds	r1, r3, #1
 8005c10:	6179      	str	r1, [r7, #20]
 8005c12:	43d2      	mvns	r2, r2
 8005c14:	b2d1      	uxtb	r1, r2
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	441a      	add	r2, r3
 8005c1a:	f241 4324 	movw	r3, #5156	; 0x1424
 8005c1e:	4413      	add	r3, r2
 8005c20:	460a      	mov	r2, r1
 8005c22:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2a:	dc0b      	bgt.n	8005c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1d18      	adds	r0, r3, #4
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	f241 4324 	movw	r3, #5156	; 0x1424
 8005c36:	4413      	add	r3, r2
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	f7fd f9e2 	bl	8003004 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	e005      	b.n	8005c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005c44:	4904      	ldr	r1, [pc, #16]	; (8005c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x154>)
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f848 	bl	8005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8005c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8005c50:	4618      	mov	r0, r3
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	08017428 	.word	0x08017428

08005c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fd fa10 	bl	8003090 <_ZN13STM32Hardware4timeEv>
 8005c70:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4915      	ldr	r1, [pc, #84]	; (8005cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8005c7a:	fba1 1303 	umull	r1, r3, r1, r3
 8005c7e:	099b      	lsrs	r3, r3, #6
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	1e5a      	subs	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6859      	ldr	r1, [r3, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8005c92:	fba3 0302 	umull	r0, r3, r3, r2
 8005c96:	099b      	lsrs	r3, r3, #6
 8005c98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c9c:	fb00 f303 	mul.w	r3, r0, r3
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	4a0c      	ldr	r2, [pc, #48]	; (8005cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
 8005ca8:	1aca      	subs	r2, r1, r3
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x7c>)
 8005cac:	4413      	add	r3, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f001 fa56 	bl	8007174 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	10624dd3 	.word	0x10624dd3
 8005cd4:	000f4240 	.word	0x000f4240
 8005cd8:	3b9aca00 	.word	0x3b9aca00

08005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	2103      	movs	r1, #3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f804 	bl	8005cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE3logEcPKc>
  }
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	460b      	mov	r3, r1
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8005d06:	f107 0314 	add.w	r3, r7, #20
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fc fc44 	bl	8002598 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005d10:	7afb      	ldrb	r3, [r7, #11]
 8005d12:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f107 0214 	add.w	r2, r7, #20
 8005d22:	2107      	movs	r1, #7
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	4798      	blx	r3
  }
 8005d28:	bf00      	nop
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <_Z41__static_initialization_and_destruction_0ii>:
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d132      	bne.n	8005da6 <_Z41__static_initialization_and_destruction_0ii+0x76>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d12d      	bne.n	8005da6 <_Z41__static_initialization_and_destruction_0ii+0x76>
ros::NodeHandle nh;
 8005d4a:	4819      	ldr	r0, [pc, #100]	; (8005db0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005d4c:	f7fd fe98 	bl	8003a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev>
std_msgs::Float32MultiArray sensor_msg;
 8005d50:	4818      	ldr	r0, [pc, #96]	; (8005db4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005d52:	f7fd fc2d 	bl	80035b0 <_ZN8std_msgs17Float32MultiArrayC1Ev>
CJY901 jy901(&huart8);
 8005d56:	4918      	ldr	r1, [pc, #96]	; (8005db8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005d58:	4818      	ldr	r0, [pc, #96]	; (8005dbc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005d5a:	f7fa fcaf 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
ros::Subscriber<std_msgs::Float32> speed_sub("Commands/speed", &speed_callback );
 8005d5e:	2301      	movs	r3, #1
 8005d60:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005d62:	4918      	ldr	r1, [pc, #96]	; (8005dc4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005d64:	4818      	ldr	r0, [pc, #96]	; (8005dc8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8005d66:	f7ff fc85 	bl	8005674 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> duty_cycle_sub("Commands/duty_cycle", &duty_cycle_callback );
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4a17      	ldr	r2, [pc, #92]	; (8005dcc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8005d6e:	4918      	ldr	r1, [pc, #96]	; (8005dd0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005d70:	4818      	ldr	r0, [pc, #96]	; (8005dd4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8005d72:	f7ff fc7f 	bl	8005674 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
 8005d76:	2301      	movs	r3, #1
 8005d78:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8005d7a:	4918      	ldr	r1, [pc, #96]	; (8005ddc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8005d7c:	4818      	ldr	r0, [pc, #96]	; (8005de0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8005d7e:	f7ff fc79 	bl	8005674 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
 8005d82:	2301      	movs	r3, #1
 8005d84:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8005d86:	4918      	ldr	r1, [pc, #96]	; (8005de8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8005d88:	4818      	ldr	r0, [pc, #96]	; (8005dec <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005d8a:	f7ff fc97 	bl	80056bc <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> input_mode_sub("Commands/input_mode", &input_mode_callback );
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4a17      	ldr	r2, [pc, #92]	; (8005df0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8005d92:	4918      	ldr	r1, [pc, #96]	; (8005df4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005d94:	4818      	ldr	r0, [pc, #96]	; (8005df8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8005d96:	f7ff fcb5 	bl	8005704 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> pid_mode_sub("Commands/pid_mode", &pid_mode_callback );
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	4a17      	ldr	r2, [pc, #92]	; (8005dfc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8005d9e:	4918      	ldr	r1, [pc, #96]	; (8005e00 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8005da0:	4818      	ldr	r0, [pc, #96]	; (8005e04 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8005da2:	f7ff fcaf 	bl	8005704 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	24001ba0 	.word	0x24001ba0
 8005db4:	24004334 	.word	0x24004334
 8005db8:	24001624 	.word	0x24001624
 8005dbc:	240044b4 	.word	0x240044b4
 8005dc0:	08004651 	.word	0x08004651
 8005dc4:	08017464 	.word	0x08017464
 8005dc8:	24004540 	.word	0x24004540
 8005dcc:	080047bd 	.word	0x080047bd
 8005dd0:	08017474 	.word	0x08017474
 8005dd4:	2400455c 	.word	0x2400455c
 8005dd8:	080047f5 	.word	0x080047f5
 8005ddc:	08017488 	.word	0x08017488
 8005de0:	24004578 	.word	0x24004578
 8005de4:	08004821 	.word	0x08004821
 8005de8:	0801749c 	.word	0x0801749c
 8005dec:	24004594 	.word	0x24004594
 8005df0:	08004931 	.word	0x08004931
 8005df4:	080174ac 	.word	0x080174ac
 8005df8:	240045d8 	.word	0x240045d8
 8005dfc:	08004955 	.word	0x08004955
 8005e00:	080174c0 	.word	0x080174c0
 8005e04:	240045f4 	.word	0x240045f4

08005e08 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	330c      	adds	r3, #12
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fd fdce 	bl	80039ba <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	320c      	adds	r2, #12
 8005e26:	4610      	mov	r0, r2
 8005e28:	4798      	blx	r3
  }
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
  }
 8005e3e:	4618      	mov	r0, r3
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	330c      	adds	r3, #12
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fd fdce 	bl	80039f8 <_ZN8std_msgs4Bool7getTypeEv>
 8005e5c:	4603      	mov	r3, r0
  }
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b082      	sub	sp, #8
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	330c      	adds	r3, #12
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fd fdce 	bl	8003a14 <_ZN8std_msgs4Bool6getMD5Ev>
 8005e78:	4603      	mov	r3, r0
  }
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	330c      	adds	r3, #12
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fd fc1e 	bl	80036d4 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	320c      	adds	r2, #12
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4798      	blx	r3
  }
 8005ea4:	bf00      	nop
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 8005eb8:	4618      	mov	r0, r3
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fd fc8b 	bl	80037ec <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 8005ed6:	4603      	mov	r3, r0
  }
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	330c      	adds	r3, #12
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fd fc8b 	bl	8003808 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 8005ef2:	4603      	mov	r3, r0
  }
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fd fcd1 	bl	80038b4 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	320c      	adds	r2, #12
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4798      	blx	r3
  }
 8005f1e:	bf00      	nop
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
  }
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fd fcea 	bl	8003924 <_ZN8std_msgs7Float327getTypeEv>
 8005f50:	4603      	mov	r3, r0
  }
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	330c      	adds	r3, #12
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fd fcea 	bl	8003940 <_ZN8std_msgs7Float326getMD5Ev>
 8005f6c:	4603      	mov	r3, r0
  }
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
    return configured_;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005f84:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
  };
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <_GLOBAL__sub_I_nh>:
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	f7ff fec7 	bl	8005d30 <_Z41__static_initialization_and_destruction_0ii>
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <HAL_MspInit+0x30>)
 8005fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fb0:	4a08      	ldr	r2, [pc, #32]	; (8005fd4 <HAL_MspInit+0x30>)
 8005fb2:	f043 0302 	orr.w	r3, r3, #2
 8005fb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <HAL_MspInit+0x30>)
 8005fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	58024400 	.word	0x58024400

08005fd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b0bc      	sub	sp, #240	; 0xf0
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fe0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	605a      	str	r2, [r3, #4]
 8005fea:	609a      	str	r2, [r3, #8]
 8005fec:	60da      	str	r2, [r3, #12]
 8005fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ff0:	f107 0318 	add.w	r3, r7, #24
 8005ff4:	22c0      	movs	r2, #192	; 0xc0
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f00f fb0f 	bl	801561c <memset>
  if(hadc->Instance==ADC1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a67      	ldr	r2, [pc, #412]	; (80061a0 <HAL_ADC_MspInit+0x1c8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	f040 80c6 	bne.w	8006196 <HAL_ADC_MspInit+0x1be>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800600a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 10;
 8006016:	230a      	movs	r3, #10
 8006018:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 128;
 800601a:	2380      	movs	r3, #128	; 0x80
 800601c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800601e:	2302      	movs	r3, #2
 8006020:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8006022:	2302      	movs	r3, #2
 8006024:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 8;
 8006026:	2308      	movs	r3, #8
 8006028:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800602a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800602e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8006030:	2300      	movs	r3, #0
 8006032:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8006038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800603c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006040:	f107 0318 	add.w	r3, r7, #24
 8006044:	4618      	mov	r0, r3
 8006046:	f007 fd51 	bl	800daec <HAL_RCCEx_PeriphCLKConfig>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8006050:	f7fb ffba 	bl	8001fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006054:	4b53      	ldr	r3, [pc, #332]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 8006056:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800605a:	4a52      	ldr	r2, [pc, #328]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 800605c:	f043 0320 	orr.w	r3, r3, #32
 8006060:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006064:	4b4f      	ldr	r3, [pc, #316]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 8006066:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006072:	4b4c      	ldr	r3, [pc, #304]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 8006074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006078:	4a4a      	ldr	r2, [pc, #296]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 800607a:	f043 0304 	orr.w	r3, r3, #4
 800607e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006082:	4b48      	ldr	r3, [pc, #288]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 8006084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006090:	4b44      	ldr	r3, [pc, #272]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 8006092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006096:	4a43      	ldr	r2, [pc, #268]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060a0:	4b40      	ldr	r3, [pc, #256]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 80060a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060ae:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 80060b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060b4:	4a3b      	ldr	r2, [pc, #236]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 80060b6:	f043 0302 	orr.w	r3, r3, #2
 80060ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060be:	4b39      	ldr	r3, [pc, #228]	; (80061a4 <HAL_ADC_MspInit+0x1cc>)
 80060c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	60bb      	str	r3, [r7, #8]
 80060ca:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 80060cc:	2333      	movs	r3, #51	; 0x33
 80060ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060d2:	2303      	movs	r3, #3
 80060d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80060e2:	4619      	mov	r1, r3
 80060e4:	4830      	ldr	r0, [pc, #192]	; (80061a8 <HAL_ADC_MspInit+0x1d0>)
 80060e6:	f005 fe29 	bl	800bd3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 80060ea:	2350      	movs	r3, #80	; 0x50
 80060ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060f0:	2303      	movs	r3, #3
 80060f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006100:	4619      	mov	r1, r3
 8006102:	482a      	ldr	r0, [pc, #168]	; (80061ac <HAL_ADC_MspInit+0x1d4>)
 8006104:	f005 fe1a 	bl	800bd3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 8006108:	2303      	movs	r3, #3
 800610a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800610e:	2303      	movs	r3, #3
 8006110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006114:	2300      	movs	r3, #0
 8006116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800611a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800611e:	4619      	mov	r1, r3
 8006120:	4823      	ldr	r0, [pc, #140]	; (80061b0 <HAL_ADC_MspInit+0x1d8>)
 8006122:	f005 fe0b 	bl	800bd3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8006126:	4b23      	ldr	r3, [pc, #140]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 8006128:	4a23      	ldr	r2, [pc, #140]	; (80061b8 <HAL_ADC_MspInit+0x1e0>)
 800612a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800612c:	4b21      	ldr	r3, [pc, #132]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 800612e:	2209      	movs	r2, #9
 8006130:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006132:	4b20      	ldr	r3, [pc, #128]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 8006134:	2200      	movs	r2, #0
 8006136:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006138:	4b1e      	ldr	r3, [pc, #120]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 800613a:	2200      	movs	r2, #0
 800613c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800613e:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 8006140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006144:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006146:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 8006148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800614c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800614e:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 8006150:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006154:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006156:	4b17      	ldr	r3, [pc, #92]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 8006158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800615c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 8006160:	2200      	movs	r2, #0
 8006162:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006164:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 8006166:	2200      	movs	r2, #0
 8006168:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800616a:	4812      	ldr	r0, [pc, #72]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 800616c:	f002 ffaa 	bl	80090c4 <HAL_DMA_Init>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 8006176:	f7fb ff27 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a0d      	ldr	r2, [pc, #52]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 800617e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006180:	4a0c      	ldr	r2, [pc, #48]	; (80061b4 <HAL_ADC_MspInit+0x1dc>)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006186:	2200      	movs	r2, #0
 8006188:	2100      	movs	r1, #0
 800618a:	2012      	movs	r0, #18
 800618c:	f002 ff65 	bl	800905a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006190:	2012      	movs	r0, #18
 8006192:	f002 ff7c 	bl	800908e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006196:	bf00      	nop
 8006198:	37f0      	adds	r7, #240	; 0xf0
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40022000 	.word	0x40022000
 80061a4:	58024400 	.word	0x58024400
 80061a8:	58020800 	.word	0x58020800
 80061ac:	58020000 	.word	0x58020000
 80061b0:	58020400 	.word	0x58020400
 80061b4:	2400134c 	.word	0x2400134c
 80061b8:	40020028 	.word	0x40020028

080061bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b0c4      	sub	sp, #272	; 0x110
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061ca:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	609a      	str	r2, [r3, #8]
 80061d8:	60da      	str	r2, [r3, #12]
 80061da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80061dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80061e0:	22c0      	movs	r2, #192	; 0xc0
 80061e2:	2100      	movs	r1, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f00f fa19 	bl	801561c <memset>
  if(huart->Instance==LPUART1)
 80061ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4aa7      	ldr	r2, [pc, #668]	; (8006494 <HAL_UART_MspInit+0x2d8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	f040 8084 	bne.w	8006306 <HAL_UART_MspInit+0x14a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80061fe:	f04f 0204 	mov.w	r2, #4
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 800620a:	2300      	movs	r3, #0
 800620c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006210:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006214:	4618      	mov	r0, r3
 8006216:	f007 fc69 	bl	800daec <HAL_RCCEx_PeriphCLKConfig>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 8006220:	f7fb fed2 	bl	8001fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006224:	4b9c      	ldr	r3, [pc, #624]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 8006226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800622a:	4a9b      	ldr	r2, [pc, #620]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 800622c:	f043 0308 	orr.w	r3, r3, #8
 8006230:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006234:	4b98      	ldr	r3, [pc, #608]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 8006236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	637b      	str	r3, [r7, #52]	; 0x34
 8006240:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006242:	4b95      	ldr	r3, [pc, #596]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 8006244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006248:	4a93      	ldr	r2, [pc, #588]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006252:	4b91      	ldr	r3, [pc, #580]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 8006254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	633b      	str	r3, [r7, #48]	; 0x30
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006260:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006264:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006268:	2302      	movs	r3, #2
 800626a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800626e:	2300      	movs	r3, #0
 8006270:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 800627a:	2303      	movs	r3, #3
 800627c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006280:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006284:	4619      	mov	r1, r3
 8006286:	4885      	ldr	r0, [pc, #532]	; (800649c <HAL_UART_MspInit+0x2e0>)
 8006288:	f005 fd58 	bl	800bd3c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 800628c:	4b84      	ldr	r3, [pc, #528]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 800628e:	4a85      	ldr	r2, [pc, #532]	; (80064a4 <HAL_UART_MspInit+0x2e8>)
 8006290:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 8006292:	4b83      	ldr	r3, [pc, #524]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 8006294:	2209      	movs	r2, #9
 8006296:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006298:	4b81      	ldr	r3, [pc, #516]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 800629a:	2200      	movs	r2, #0
 800629c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800629e:	4b80      	ldr	r3, [pc, #512]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062a4:	4b7e      	ldr	r3, [pc, #504]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 80062a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062aa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062ac:	4b7c      	ldr	r3, [pc, #496]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062b2:	4b7b      	ldr	r3, [pc, #492]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80062b8:	4b79      	ldr	r3, [pc, #484]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 80062ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062be:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80062c0:	4b77      	ldr	r3, [pc, #476]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80062c6:	4876      	ldr	r0, [pc, #472]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 80062c8:	f002 fefc 	bl	80090c4 <HAL_DMA_Init>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 80062d2:	f7fb fe79 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80062d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a6f      	ldr	r2, [pc, #444]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 80062e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80062e6:	4a6e      	ldr	r2, [pc, #440]	; (80064a0 <HAL_UART_MspInit+0x2e4>)
 80062e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80062f4:	2200      	movs	r2, #0
 80062f6:	2100      	movs	r1, #0
 80062f8:	208e      	movs	r0, #142	; 0x8e
 80062fa:	f002 feae 	bl	800905a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80062fe:	208e      	movs	r0, #142	; 0x8e
 8006300:	f002 fec5 	bl	800908e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8006304:	e2d4      	b.n	80068b0 <HAL_UART_MspInit+0x6f4>
  else if(huart->Instance==UART4)
 8006306:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800630a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a65      	ldr	r2, [pc, #404]	; (80064a8 <HAL_UART_MspInit+0x2ec>)
 8006314:	4293      	cmp	r3, r2
 8006316:	f040 80d3 	bne.w	80064c0 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800631a:	f04f 0202 	mov.w	r2, #2
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006326:	2300      	movs	r3, #0
 8006328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800632c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006330:	4618      	mov	r0, r3
 8006332:	f007 fbdb 	bl	800daec <HAL_RCCEx_PeriphCLKConfig>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_UART_MspInit+0x184>
      Error_Handler();
 800633c:	f7fb fe44 	bl	8001fc8 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8006340:	4b55      	ldr	r3, [pc, #340]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 8006342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006346:	4a54      	ldr	r2, [pc, #336]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 8006348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800634c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006350:	4b51      	ldr	r3, [pc, #324]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 8006352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800635e:	4b4e      	ldr	r3, [pc, #312]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 8006360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006364:	4a4c      	ldr	r2, [pc, #304]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 8006366:	f043 0308 	orr.w	r3, r3, #8
 800636a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800636e:	4b4a      	ldr	r3, [pc, #296]	; (8006498 <HAL_UART_MspInit+0x2dc>)
 8006370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800637c:	2303      	movs	r3, #3
 800637e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006382:	2302      	movs	r3, #2
 8006384:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800638e:	2300      	movs	r3, #0
 8006390:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006394:	2308      	movs	r3, #8
 8006396:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800639a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800639e:	4619      	mov	r1, r3
 80063a0:	4842      	ldr	r0, [pc, #264]	; (80064ac <HAL_UART_MspInit+0x2f0>)
 80063a2:	f005 fccb 	bl	800bd3c <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80063a6:	4b42      	ldr	r3, [pc, #264]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 80063a8:	4a42      	ldr	r2, [pc, #264]	; (80064b4 <HAL_UART_MspInit+0x2f8>)
 80063aa:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80063ac:	4b40      	ldr	r3, [pc, #256]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 80063ae:	223f      	movs	r2, #63	; 0x3f
 80063b0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063b2:	4b3f      	ldr	r3, [pc, #252]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063b8:	4b3d      	ldr	r3, [pc, #244]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063be:	4b3c      	ldr	r3, [pc, #240]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 80063c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063c4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063c6:	4b3a      	ldr	r3, [pc, #232]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063cc:	4b38      	ldr	r3, [pc, #224]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80063d2:	4b37      	ldr	r3, [pc, #220]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80063d8:	4b35      	ldr	r3, [pc, #212]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 80063da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80063de:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063e0:	4b33      	ldr	r3, [pc, #204]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80063e6:	4832      	ldr	r0, [pc, #200]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 80063e8:	f002 fe6c 	bl	80090c4 <HAL_DMA_Init>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_UART_MspInit+0x23a>
      Error_Handler();
 80063f2:	f7fb fde9 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80063f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2b      	ldr	r2, [pc, #172]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 8006402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006406:	4a2a      	ldr	r2, [pc, #168]	; (80064b0 <HAL_UART_MspInit+0x2f4>)
 8006408:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800640c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006414:	4b28      	ldr	r3, [pc, #160]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 8006416:	4a29      	ldr	r2, [pc, #164]	; (80064bc <HAL_UART_MspInit+0x300>)
 8006418:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800641a:	4b27      	ldr	r3, [pc, #156]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 800641c:	2240      	movs	r2, #64	; 0x40
 800641e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006420:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 8006422:	2240      	movs	r2, #64	; 0x40
 8006424:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006426:	4b24      	ldr	r3, [pc, #144]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 8006428:	2200      	movs	r2, #0
 800642a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800642c:	4b22      	ldr	r3, [pc, #136]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 800642e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006432:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006434:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 8006436:	2200      	movs	r2, #0
 8006438:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800643a:	4b1f      	ldr	r3, [pc, #124]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 800643c:	2200      	movs	r2, #0
 800643e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8006440:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 8006442:	2200      	movs	r2, #0
 8006444:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006446:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 8006448:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800644c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800644e:	4b1a      	ldr	r3, [pc, #104]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 8006450:	2200      	movs	r2, #0
 8006452:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006454:	4818      	ldr	r0, [pc, #96]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 8006456:	f002 fe35 	bl	80090c4 <HAL_DMA_Init>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <HAL_UART_MspInit+0x2a8>
      Error_Handler();
 8006460:	f7fb fdb2 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8006464:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006468:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a12      	ldr	r2, [pc, #72]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 8006470:	67da      	str	r2, [r3, #124]	; 0x7c
 8006472:	4a11      	ldr	r2, [pc, #68]	; (80064b8 <HAL_UART_MspInit+0x2fc>)
 8006474:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006478:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006480:	2200      	movs	r2, #0
 8006482:	2100      	movs	r1, #0
 8006484:	2034      	movs	r0, #52	; 0x34
 8006486:	f002 fde8 	bl	800905a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800648a:	2034      	movs	r0, #52	; 0x34
 800648c:	f002 fdff 	bl	800908e <HAL_NVIC_EnableIRQ>
}
 8006490:	e20e      	b.n	80068b0 <HAL_UART_MspInit+0x6f4>
 8006492:	bf00      	nop
 8006494:	58000c00 	.word	0x58000c00
 8006498:	58024400 	.word	0x58024400
 800649c:	58020000 	.word	0x58020000
 80064a0:	240016b8 	.word	0x240016b8
 80064a4:	58025408 	.word	0x58025408
 80064a8:	40004c00 	.word	0x40004c00
 80064ac:	58020c00 	.word	0x58020c00
 80064b0:	24001730 	.word	0x24001730
 80064b4:	40020058 	.word	0x40020058
 80064b8:	240017a8 	.word	0x240017a8
 80064bc:	40020070 	.word	0x40020070
  else if(huart->Instance==UART5)
 80064c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a9f      	ldr	r2, [pc, #636]	; (800674c <HAL_UART_MspInit+0x590>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	f040 8087 	bne.w	80065e2 <HAL_UART_MspInit+0x426>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80064d4:	f04f 0202 	mov.w	r2, #2
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80064e0:	2300      	movs	r3, #0
 80064e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064ea:	4618      	mov	r0, r3
 80064ec:	f007 fafe 	bl	800daec <HAL_RCCEx_PeriphCLKConfig>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_UART_MspInit+0x33e>
      Error_Handler();
 80064f6:	f7fb fd67 	bl	8001fc8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80064fa:	4b95      	ldr	r3, [pc, #596]	; (8006750 <HAL_UART_MspInit+0x594>)
 80064fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006500:	4a93      	ldr	r2, [pc, #588]	; (8006750 <HAL_UART_MspInit+0x594>)
 8006502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006506:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800650a:	4b91      	ldr	r3, [pc, #580]	; (8006750 <HAL_UART_MspInit+0x594>)
 800650c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006518:	4b8d      	ldr	r3, [pc, #564]	; (8006750 <HAL_UART_MspInit+0x594>)
 800651a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800651e:	4a8c      	ldr	r2, [pc, #560]	; (8006750 <HAL_UART_MspInit+0x594>)
 8006520:	f043 0302 	orr.w	r3, r3, #2
 8006524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006528:	4b89      	ldr	r3, [pc, #548]	; (8006750 <HAL_UART_MspInit+0x594>)
 800652a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	623b      	str	r3, [r7, #32]
 8006534:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006536:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800653a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800653e:	2302      	movs	r3, #2
 8006540:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006544:	2300      	movs	r3, #0
 8006546:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800654a:	2300      	movs	r3, #0
 800654c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8006550:	230e      	movs	r3, #14
 8006552:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006556:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800655a:	4619      	mov	r1, r3
 800655c:	487d      	ldr	r0, [pc, #500]	; (8006754 <HAL_UART_MspInit+0x598>)
 800655e:	f005 fbed 	bl	800bd3c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream5;
 8006562:	4b7d      	ldr	r3, [pc, #500]	; (8006758 <HAL_UART_MspInit+0x59c>)
 8006564:	4a7d      	ldr	r2, [pc, #500]	; (800675c <HAL_UART_MspInit+0x5a0>)
 8006566:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8006568:	4b7b      	ldr	r3, [pc, #492]	; (8006758 <HAL_UART_MspInit+0x59c>)
 800656a:	2241      	movs	r2, #65	; 0x41
 800656c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800656e:	4b7a      	ldr	r3, [pc, #488]	; (8006758 <HAL_UART_MspInit+0x59c>)
 8006570:	2200      	movs	r2, #0
 8006572:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006574:	4b78      	ldr	r3, [pc, #480]	; (8006758 <HAL_UART_MspInit+0x59c>)
 8006576:	2200      	movs	r2, #0
 8006578:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800657a:	4b77      	ldr	r3, [pc, #476]	; (8006758 <HAL_UART_MspInit+0x59c>)
 800657c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006580:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006582:	4b75      	ldr	r3, [pc, #468]	; (8006758 <HAL_UART_MspInit+0x59c>)
 8006584:	2200      	movs	r2, #0
 8006586:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006588:	4b73      	ldr	r3, [pc, #460]	; (8006758 <HAL_UART_MspInit+0x59c>)
 800658a:	2200      	movs	r2, #0
 800658c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800658e:	4b72      	ldr	r3, [pc, #456]	; (8006758 <HAL_UART_MspInit+0x59c>)
 8006590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006594:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006596:	4b70      	ldr	r3, [pc, #448]	; (8006758 <HAL_UART_MspInit+0x59c>)
 8006598:	2200      	movs	r2, #0
 800659a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800659c:	4b6e      	ldr	r3, [pc, #440]	; (8006758 <HAL_UART_MspInit+0x59c>)
 800659e:	2200      	movs	r2, #0
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80065a2:	486d      	ldr	r0, [pc, #436]	; (8006758 <HAL_UART_MspInit+0x59c>)
 80065a4:	f002 fd8e 	bl	80090c4 <HAL_DMA_Init>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_UART_MspInit+0x3f6>
      Error_Handler();
 80065ae:	f7fb fd0b 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80065b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a66      	ldr	r2, [pc, #408]	; (8006758 <HAL_UART_MspInit+0x59c>)
 80065be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80065c2:	4a65      	ldr	r2, [pc, #404]	; (8006758 <HAL_UART_MspInit+0x59c>)
 80065c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80065d0:	2200      	movs	r2, #0
 80065d2:	2100      	movs	r1, #0
 80065d4:	2035      	movs	r0, #53	; 0x35
 80065d6:	f002 fd40 	bl	800905a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80065da:	2035      	movs	r0, #53	; 0x35
 80065dc:	f002 fd57 	bl	800908e <HAL_NVIC_EnableIRQ>
}
 80065e0:	e166      	b.n	80068b0 <HAL_UART_MspInit+0x6f4>
  else if(huart->Instance==UART7)
 80065e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a5c      	ldr	r2, [pc, #368]	; (8006760 <HAL_UART_MspInit+0x5a4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	f040 80bf 	bne.w	8006774 <HAL_UART_MspInit+0x5b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80065f6:	f04f 0202 	mov.w	r2, #2
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006602:	2300      	movs	r3, #0
 8006604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006608:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800660c:	4618      	mov	r0, r3
 800660e:	f007 fa6d 	bl	800daec <HAL_RCCEx_PeriphCLKConfig>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_UART_MspInit+0x460>
      Error_Handler();
 8006618:	f7fb fcd6 	bl	8001fc8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800661c:	4b4c      	ldr	r3, [pc, #304]	; (8006750 <HAL_UART_MspInit+0x594>)
 800661e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006622:	4a4b      	ldr	r2, [pc, #300]	; (8006750 <HAL_UART_MspInit+0x594>)
 8006624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006628:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800662c:	4b48      	ldr	r3, [pc, #288]	; (8006750 <HAL_UART_MspInit+0x594>)
 800662e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006632:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800663a:	4b45      	ldr	r3, [pc, #276]	; (8006750 <HAL_UART_MspInit+0x594>)
 800663c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006640:	4a43      	ldr	r2, [pc, #268]	; (8006750 <HAL_UART_MspInit+0x594>)
 8006642:	f043 0310 	orr.w	r3, r3, #16
 8006646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800664a:	4b41      	ldr	r3, [pc, #260]	; (8006750 <HAL_UART_MspInit+0x594>)
 800664c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006658:	4b3d      	ldr	r3, [pc, #244]	; (8006750 <HAL_UART_MspInit+0x594>)
 800665a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800665e:	4a3c      	ldr	r2, [pc, #240]	; (8006750 <HAL_UART_MspInit+0x594>)
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006668:	4b39      	ldr	r3, [pc, #228]	; (8006750 <HAL_UART_MspInit+0x594>)
 800666a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800667a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800667e:	2302      	movs	r3, #2
 8006680:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006684:	2300      	movs	r3, #0
 8006686:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800668a:	2300      	movs	r3, #0
 800668c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8006690:	2307      	movs	r3, #7
 8006692:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006696:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800669a:	4619      	mov	r1, r3
 800669c:	4831      	ldr	r0, [pc, #196]	; (8006764 <HAL_UART_MspInit+0x5a8>)
 800669e:	f005 fb4d 	bl	800bd3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80066a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066aa:	2302      	movs	r3, #2
 80066ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066b6:	2300      	movs	r3, #0
 80066b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 80066bc:	230b      	movs	r3, #11
 80066be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066c2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80066c6:	4619      	mov	r1, r3
 80066c8:	4827      	ldr	r0, [pc, #156]	; (8006768 <HAL_UART_MspInit+0x5ac>)
 80066ca:	f005 fb37 	bl	800bd3c <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 80066ce:	4b27      	ldr	r3, [pc, #156]	; (800676c <HAL_UART_MspInit+0x5b0>)
 80066d0:	4a27      	ldr	r2, [pc, #156]	; (8006770 <HAL_UART_MspInit+0x5b4>)
 80066d2:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80066d4:	4b25      	ldr	r3, [pc, #148]	; (800676c <HAL_UART_MspInit+0x5b0>)
 80066d6:	224f      	movs	r2, #79	; 0x4f
 80066d8:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066da:	4b24      	ldr	r3, [pc, #144]	; (800676c <HAL_UART_MspInit+0x5b0>)
 80066dc:	2200      	movs	r2, #0
 80066de:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066e0:	4b22      	ldr	r3, [pc, #136]	; (800676c <HAL_UART_MspInit+0x5b0>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066e6:	4b21      	ldr	r3, [pc, #132]	; (800676c <HAL_UART_MspInit+0x5b0>)
 80066e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066ec:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066ee:	4b1f      	ldr	r3, [pc, #124]	; (800676c <HAL_UART_MspInit+0x5b0>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066f4:	4b1d      	ldr	r3, [pc, #116]	; (800676c <HAL_UART_MspInit+0x5b0>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80066fa:	4b1c      	ldr	r3, [pc, #112]	; (800676c <HAL_UART_MspInit+0x5b0>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006700:	4b1a      	ldr	r3, [pc, #104]	; (800676c <HAL_UART_MspInit+0x5b0>)
 8006702:	2200      	movs	r2, #0
 8006704:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006706:	4b19      	ldr	r3, [pc, #100]	; (800676c <HAL_UART_MspInit+0x5b0>)
 8006708:	2200      	movs	r2, #0
 800670a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800670c:	4817      	ldr	r0, [pc, #92]	; (800676c <HAL_UART_MspInit+0x5b0>)
 800670e:	f002 fcd9 	bl	80090c4 <HAL_DMA_Init>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_UART_MspInit+0x560>
      Error_Handler();
 8006718:	f7fb fc56 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800671c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006720:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a11      	ldr	r2, [pc, #68]	; (800676c <HAL_UART_MspInit+0x5b0>)
 8006728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800672c:	4a0f      	ldr	r2, [pc, #60]	; (800676c <HAL_UART_MspInit+0x5b0>)
 800672e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006732:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800673a:	2200      	movs	r2, #0
 800673c:	2100      	movs	r1, #0
 800673e:	2052      	movs	r0, #82	; 0x52
 8006740:	f002 fc8b 	bl	800905a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006744:	2052      	movs	r0, #82	; 0x52
 8006746:	f002 fca2 	bl	800908e <HAL_NVIC_EnableIRQ>
}
 800674a:	e0b1      	b.n	80068b0 <HAL_UART_MspInit+0x6f4>
 800674c:	40005000 	.word	0x40005000
 8006750:	58024400 	.word	0x58024400
 8006754:	58020400 	.word	0x58020400
 8006758:	24001820 	.word	0x24001820
 800675c:	40020088 	.word	0x40020088
 8006760:	40007800 	.word	0x40007800
 8006764:	58021000 	.word	0x58021000
 8006768:	58020000 	.word	0x58020000
 800676c:	24001898 	.word	0x24001898
 8006770:	40020040 	.word	0x40020040
  else if(huart->Instance==UART8)
 8006774:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006778:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a4e      	ldr	r2, [pc, #312]	; (80068bc <HAL_UART_MspInit+0x700>)
 8006782:	4293      	cmp	r3, r2
 8006784:	f040 8094 	bne.w	80068b0 <HAL_UART_MspInit+0x6f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8006788:	f04f 0202 	mov.w	r2, #2
 800678c:	f04f 0300 	mov.w	r3, #0
 8006790:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006794:	2300      	movs	r3, #0
 8006796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800679a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800679e:	4618      	mov	r0, r3
 80067a0:	f007 f9a4 	bl	800daec <HAL_RCCEx_PeriphCLKConfig>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_UART_MspInit+0x5f2>
      Error_Handler();
 80067aa:	f7fb fc0d 	bl	8001fc8 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80067ae:	4b44      	ldr	r3, [pc, #272]	; (80068c0 <HAL_UART_MspInit+0x704>)
 80067b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067b4:	4a42      	ldr	r2, [pc, #264]	; (80068c0 <HAL_UART_MspInit+0x704>)
 80067b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80067be:	4b40      	ldr	r3, [pc, #256]	; (80068c0 <HAL_UART_MspInit+0x704>)
 80067c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067c4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80067c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067da:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80067dc:	4b38      	ldr	r3, [pc, #224]	; (80068c0 <HAL_UART_MspInit+0x704>)
 80067de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067e2:	4a37      	ldr	r2, [pc, #220]	; (80068c0 <HAL_UART_MspInit+0x704>)
 80067e4:	f043 0310 	orr.w	r3, r3, #16
 80067e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80067ec:	4b34      	ldr	r3, [pc, #208]	; (80068c0 <HAL_UART_MspInit+0x704>)
 80067ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067f2:	f003 0210 	and.w	r2, r3, #16
 80067f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006808:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800680a:	2303      	movs	r3, #3
 800680c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006810:	2302      	movs	r3, #2
 8006812:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006816:	2300      	movs	r3, #0
 8006818:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800681c:	2300      	movs	r3, #0
 800681e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006822:	2308      	movs	r3, #8
 8006824:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006828:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800682c:	4619      	mov	r1, r3
 800682e:	4825      	ldr	r0, [pc, #148]	; (80068c4 <HAL_UART_MspInit+0x708>)
 8006830:	f005 fa84 	bl	800bd3c <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream0;
 8006834:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 8006836:	4a25      	ldr	r2, [pc, #148]	; (80068cc <HAL_UART_MspInit+0x710>)
 8006838:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800683a:	4b23      	ldr	r3, [pc, #140]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 800683c:	2251      	movs	r2, #81	; 0x51
 800683e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006840:	4b21      	ldr	r3, [pc, #132]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 8006842:	2200      	movs	r2, #0
 8006844:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006846:	4b20      	ldr	r3, [pc, #128]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 8006848:	2200      	movs	r2, #0
 800684a:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800684c:	4b1e      	ldr	r3, [pc, #120]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 800684e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006852:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006854:	4b1c      	ldr	r3, [pc, #112]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 8006856:	2200      	movs	r2, #0
 8006858:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800685a:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 800685c:	2200      	movs	r2, #0
 800685e:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8006860:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 8006862:	2200      	movs	r2, #0
 8006864:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 8006868:	2200      	movs	r2, #0
 800686a:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800686c:	4b16      	ldr	r3, [pc, #88]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 800686e:	2200      	movs	r2, #0
 8006870:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8006872:	4815      	ldr	r0, [pc, #84]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 8006874:	f002 fc26 	bl	80090c4 <HAL_DMA_Init>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_UART_MspInit+0x6c6>
      Error_Handler();
 800687e:	f7fb fba3 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8006882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006886:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a0e      	ldr	r2, [pc, #56]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 800688e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006892:	4a0d      	ldr	r2, [pc, #52]	; (80068c8 <HAL_UART_MspInit+0x70c>)
 8006894:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006898:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80068a0:	2200      	movs	r2, #0
 80068a2:	2100      	movs	r1, #0
 80068a4:	2053      	movs	r0, #83	; 0x53
 80068a6:	f002 fbd8 	bl	800905a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80068aa:	2053      	movs	r0, #83	; 0x53
 80068ac:	f002 fbef 	bl	800908e <HAL_NVIC_EnableIRQ>
}
 80068b0:	bf00      	nop
 80068b2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40007c00 	.word	0x40007c00
 80068c0:	58024400 	.word	0x58024400
 80068c4:	58021000 	.word	0x58021000
 80068c8:	24001910 	.word	0x24001910
 80068cc:	40020010 	.word	0x40020010

080068d0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b0bc      	sub	sp, #240	; 0xf0
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	609a      	str	r2, [r3, #8]
 80068e4:	60da      	str	r2, [r3, #12]
 80068e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80068e8:	f107 0318 	add.w	r3, r7, #24
 80068ec:	22c0      	movs	r2, #192	; 0xc0
 80068ee:	2100      	movs	r1, #0
 80068f0:	4618      	mov	r0, r3
 80068f2:	f00e fe93 	bl	801561c <memset>
  if(hqspi->Instance==QUADSPI)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a55      	ldr	r2, [pc, #340]	; (8006a50 <HAL_QSPI_MspInit+0x180>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	f040 80a3 	bne.w	8006a48 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8006902:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006906:	f04f 0300 	mov.w	r3, #0
 800690a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800690e:	2300      	movs	r3, #0
 8006910:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006912:	f107 0318 	add.w	r3, r7, #24
 8006916:	4618      	mov	r0, r3
 8006918:	f007 f8e8 	bl	800daec <HAL_RCCEx_PeriphCLKConfig>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8006922:	f7fb fb51 	bl	8001fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006926:	4b4b      	ldr	r3, [pc, #300]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 8006928:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800692c:	4a49      	ldr	r2, [pc, #292]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 800692e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006932:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8006936:	4b47      	ldr	r3, [pc, #284]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 8006938:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800693c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006944:	4b43      	ldr	r3, [pc, #268]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 8006946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800694a:	4a42      	ldr	r2, [pc, #264]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 800694c:	f043 0310 	orr.w	r3, r3, #16
 8006950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006954:	4b3f      	ldr	r3, [pc, #252]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 8006956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800695a:	f003 0310 	and.w	r3, r3, #16
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006962:	4b3c      	ldr	r3, [pc, #240]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 8006964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006968:	4a3a      	ldr	r2, [pc, #232]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 800696a:	f043 0302 	orr.w	r3, r3, #2
 800696e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006972:	4b38      	ldr	r3, [pc, #224]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 8006974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006980:	4b34      	ldr	r3, [pc, #208]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 8006982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006986:	4a33      	ldr	r2, [pc, #204]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 8006988:	f043 0308 	orr.w	r3, r3, #8
 800698c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006990:	4b30      	ldr	r3, [pc, #192]	; (8006a54 <HAL_QSPI_MspInit+0x184>)
 8006992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	60bb      	str	r3, [r7, #8]
 800699c:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800699e:	2304      	movs	r3, #4
 80069a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a4:	2302      	movs	r3, #2
 80069a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069b0:	2300      	movs	r3, #0
 80069b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80069b6:	2309      	movs	r3, #9
 80069b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80069c0:	4619      	mov	r1, r3
 80069c2:	4825      	ldr	r0, [pc, #148]	; (8006a58 <HAL_QSPI_MspInit+0x188>)
 80069c4:	f005 f9ba 	bl	800bd3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80069c8:	2304      	movs	r3, #4
 80069ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ce:	2302      	movs	r3, #2
 80069d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069da:	2300      	movs	r3, #0
 80069dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80069e0:	2309      	movs	r3, #9
 80069e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80069ea:	4619      	mov	r1, r3
 80069ec:	481b      	ldr	r0, [pc, #108]	; (8006a5c <HAL_QSPI_MspInit+0x18c>)
 80069ee:	f005 f9a5 	bl	800bd3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80069f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80069f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069fa:	2302      	movs	r3, #2
 80069fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a06:	2300      	movs	r3, #0
 8006a08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006a0c:	2309      	movs	r3, #9
 8006a0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a12:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006a16:	4619      	mov	r1, r3
 8006a18:	4811      	ldr	r0, [pc, #68]	; (8006a60 <HAL_QSPI_MspInit+0x190>)
 8006a1a:	f005 f98f 	bl	800bd3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006a1e:	2340      	movs	r3, #64	; 0x40
 8006a20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a24:	2302      	movs	r3, #2
 8006a26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a30:	2300      	movs	r3, #0
 8006a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006a36:	230a      	movs	r3, #10
 8006a38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006a40:	4619      	mov	r1, r3
 8006a42:	4806      	ldr	r0, [pc, #24]	; (8006a5c <HAL_QSPI_MspInit+0x18c>)
 8006a44:	f005 f97a 	bl	800bd3c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8006a48:	bf00      	nop
 8006a4a:	37f0      	adds	r7, #240	; 0xf0
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	52005000 	.word	0x52005000
 8006a54:	58024400 	.word	0x58024400
 8006a58:	58021000 	.word	0x58021000
 8006a5c:	58020400 	.word	0x58020400
 8006a60:	58020c00 	.word	0x58020c00

08006a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b090      	sub	sp, #64	; 0x40
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	605a      	str	r2, [r3, #4]
 8006a76:	609a      	str	r2, [r3, #8]
 8006a78:	60da      	str	r2, [r3, #12]
 8006a7a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a84:	d10f      	bne.n	8006aa6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006a86:	4b6d      	ldr	r3, [pc, #436]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a8c:	4a6b      	ldr	r2, [pc, #428]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006a8e:	f043 0301 	orr.w	r3, r3, #1
 8006a92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a96:	4b69      	ldr	r3, [pc, #420]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8006aa4:	e0c5      	b.n	8006c32 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM3)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a65      	ldr	r2, [pc, #404]	; (8006c40 <HAL_TIM_Base_MspInit+0x1dc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d10f      	bne.n	8006ad0 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006ab0:	4b62      	ldr	r3, [pc, #392]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006ab2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ab6:	4a61      	ldr	r2, [pc, #388]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006ab8:	f043 0302 	orr.w	r3, r3, #2
 8006abc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006ac0:	4b5e      	ldr	r3, [pc, #376]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006ac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ace:	e0b0      	b.n	8006c32 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM5)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a5b      	ldr	r2, [pc, #364]	; (8006c44 <HAL_TIM_Base_MspInit+0x1e0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d136      	bne.n	8006b48 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006ada:	4b58      	ldr	r3, [pc, #352]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ae0:	4a56      	ldr	r2, [pc, #344]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006ae2:	f043 0308 	orr.w	r3, r3, #8
 8006ae6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006aea:	4b54      	ldr	r3, [pc, #336]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	623b      	str	r3, [r7, #32]
 8006af6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006af8:	4b50      	ldr	r3, [pc, #320]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006afe:	4a4f      	ldr	r2, [pc, #316]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006b00:	f043 0301 	orr.w	r3, r3, #1
 8006b04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b08:	4b4c      	ldr	r3, [pc, #304]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	61fb      	str	r3, [r7, #28]
 8006b14:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006b16:	2301      	movs	r3, #1
 8006b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b22:	2300      	movs	r3, #0
 8006b24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006b26:	2302      	movs	r3, #2
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4845      	ldr	r0, [pc, #276]	; (8006c48 <HAL_TIM_Base_MspInit+0x1e4>)
 8006b32:	f005 f903 	bl	800bd3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006b36:	2200      	movs	r2, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	2032      	movs	r0, #50	; 0x32
 8006b3c:	f002 fa8d 	bl	800905a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006b40:	2032      	movs	r0, #50	; 0x32
 8006b42:	f002 faa4 	bl	800908e <HAL_NVIC_EnableIRQ>
}
 8006b46:	e074      	b.n	8006c32 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM6)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a3f      	ldr	r2, [pc, #252]	; (8006c4c <HAL_TIM_Base_MspInit+0x1e8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d117      	bne.n	8006b82 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006b52:	4b3a      	ldr	r3, [pc, #232]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b58:	4a38      	ldr	r2, [pc, #224]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006b5a:	f043 0310 	orr.w	r3, r3, #16
 8006b5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b62:	4b36      	ldr	r3, [pc, #216]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006b70:	2200      	movs	r2, #0
 8006b72:	2100      	movs	r1, #0
 8006b74:	2036      	movs	r0, #54	; 0x36
 8006b76:	f002 fa70 	bl	800905a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006b7a:	2036      	movs	r0, #54	; 0x36
 8006b7c:	f002 fa87 	bl	800908e <HAL_NVIC_EnableIRQ>
}
 8006b80:	e057      	b.n	8006c32 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM15)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a32      	ldr	r2, [pc, #200]	; (8006c50 <HAL_TIM_Base_MspInit+0x1ec>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d136      	bne.n	8006bfa <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006b8c:	4b2b      	ldr	r3, [pc, #172]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b92:	4a2a      	ldr	r2, [pc, #168]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006b9c:	4b27      	ldr	r3, [pc, #156]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006baa:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bb0:	4a22      	ldr	r2, [pc, #136]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006bb2:	f043 0310 	orr.w	r3, r3, #16
 8006bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006bba:	4b20      	ldr	r3, [pc, #128]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	613b      	str	r3, [r7, #16]
 8006bc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006bc8:	2320      	movs	r3, #32
 8006bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006bd8:	2304      	movs	r3, #4
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006be0:	4619      	mov	r1, r3
 8006be2:	481c      	ldr	r0, [pc, #112]	; (8006c54 <HAL_TIM_Base_MspInit+0x1f0>)
 8006be4:	f005 f8aa 	bl	800bd3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8006be8:	2200      	movs	r2, #0
 8006bea:	2100      	movs	r1, #0
 8006bec:	2074      	movs	r0, #116	; 0x74
 8006bee:	f002 fa34 	bl	800905a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8006bf2:	2074      	movs	r0, #116	; 0x74
 8006bf4:	f002 fa4b 	bl	800908e <HAL_NVIC_EnableIRQ>
}
 8006bf8:	e01b      	b.n	8006c32 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM16)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a16      	ldr	r2, [pc, #88]	; (8006c58 <HAL_TIM_Base_MspInit+0x1f4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d116      	bne.n	8006c32 <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006c04:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006c06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c0a:	4a0c      	ldr	r2, [pc, #48]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c14:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <HAL_TIM_Base_MspInit+0x1d8>)
 8006c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8006c22:	2200      	movs	r2, #0
 8006c24:	2100      	movs	r1, #0
 8006c26:	2075      	movs	r0, #117	; 0x75
 8006c28:	f002 fa17 	bl	800905a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8006c2c:	2075      	movs	r0, #117	; 0x75
 8006c2e:	f002 fa2e 	bl	800908e <HAL_NVIC_EnableIRQ>
}
 8006c32:	bf00      	nop
 8006c34:	3740      	adds	r7, #64	; 0x40
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	58024400 	.word	0x58024400
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000c00 	.word	0x40000c00
 8006c48:	58020000 	.word	0x58020000
 8006c4c:	40001000 	.word	0x40001000
 8006c50:	40014000 	.word	0x40014000
 8006c54:	58021000 	.word	0x58021000
 8006c58:	40014400 	.word	0x40014400

08006c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08a      	sub	sp, #40	; 0x28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c64:	f107 0314 	add.w	r3, r7, #20
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	605a      	str	r2, [r3, #4]
 8006c6e:	609a      	str	r2, [r3, #8]
 8006c70:	60da      	str	r2, [r3, #12]
 8006c72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7c:	d120      	bne.n	8006cc0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c7e:	4b24      	ldr	r3, [pc, #144]	; (8006d10 <HAL_TIM_MspPostInit+0xb4>)
 8006c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c84:	4a22      	ldr	r2, [pc, #136]	; (8006d10 <HAL_TIM_MspPostInit+0xb4>)
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c8e:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <HAL_TIM_MspPostInit+0xb4>)
 8006c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	613b      	str	r3, [r7, #16]
 8006c9a:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8006c9c:	f248 030e 	movw	r3, #32782	; 0x800e
 8006ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006caa:	2300      	movs	r3, #0
 8006cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cb2:	f107 0314 	add.w	r3, r7, #20
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4816      	ldr	r0, [pc, #88]	; (8006d14 <HAL_TIM_MspPostInit+0xb8>)
 8006cba:	f005 f83f 	bl	800bd3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006cbe:	e023      	b.n	8006d08 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a14      	ldr	r2, [pc, #80]	; (8006d18 <HAL_TIM_MspPostInit+0xbc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d11e      	bne.n	8006d08 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cca:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <HAL_TIM_MspPostInit+0xb4>)
 8006ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cd0:	4a0f      	ldr	r2, [pc, #60]	; (8006d10 <HAL_TIM_MspPostInit+0xb4>)
 8006cd2:	f043 0304 	orr.w	r3, r3, #4
 8006cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006cda:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <HAL_TIM_MspPostInit+0xb4>)
 8006cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ce8:	23c0      	movs	r3, #192	; 0xc0
 8006cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cec:	2302      	movs	r3, #2
 8006cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cfc:	f107 0314 	add.w	r3, r7, #20
 8006d00:	4619      	mov	r1, r3
 8006d02:	4806      	ldr	r0, [pc, #24]	; (8006d1c <HAL_TIM_MspPostInit+0xc0>)
 8006d04:	f005 f81a 	bl	800bd3c <HAL_GPIO_Init>
}
 8006d08:	bf00      	nop
 8006d0a:	3728      	adds	r7, #40	; 0x28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	58024400 	.word	0x58024400
 8006d14:	58020000 	.word	0x58020000
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	58020800 	.word	0x58020800

08006d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006d24:	e7fe      	b.n	8006d24 <NMI_Handler+0x4>

08006d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d26:	b480      	push	{r7}
 8006d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d2a:	e7fe      	b.n	8006d2a <HardFault_Handler+0x4>

08006d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d30:	e7fe      	b.n	8006d30 <MemManage_Handler+0x4>

08006d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d32:	b480      	push	{r7}
 8006d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d36:	e7fe      	b.n	8006d36 <BusFault_Handler+0x4>

08006d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d3c:	e7fe      	b.n	8006d3c <UsageFault_Handler+0x4>

08006d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d42:	bf00      	nop
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d50:	bf00      	nop
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d5e:	bf00      	nop
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d6c:	f000 faca 	bl	8007304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d70:	bf00      	nop
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8006d78:	4802      	ldr	r0, [pc, #8]	; (8006d84 <DMA1_Stream0_IRQHandler+0x10>)
 8006d7a:	f003 fccd 	bl	800a718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006d7e:	bf00      	nop
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	24001910 	.word	0x24001910

08006d88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006d8c:	4802      	ldr	r0, [pc, #8]	; (8006d98 <DMA1_Stream1_IRQHandler+0x10>)
 8006d8e:	f003 fcc3 	bl	800a718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006d92:	bf00      	nop
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	2400134c 	.word	0x2400134c

08006d9c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8006da0:	4802      	ldr	r0, [pc, #8]	; (8006dac <DMA1_Stream2_IRQHandler+0x10>)
 8006da2:	f003 fcb9 	bl	800a718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006da6:	bf00      	nop
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	24001898 	.word	0x24001898

08006db0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006db4:	4802      	ldr	r0, [pc, #8]	; (8006dc0 <DMA1_Stream3_IRQHandler+0x10>)
 8006db6:	f003 fcaf 	bl	800a718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006dba:	bf00      	nop
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	24001730 	.word	0x24001730

08006dc4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006dc8:	4802      	ldr	r0, [pc, #8]	; (8006dd4 <DMA1_Stream4_IRQHandler+0x10>)
 8006dca:	f003 fca5 	bl	800a718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006dce:	bf00      	nop
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	240017a8 	.word	0x240017a8

08006dd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006ddc:	4802      	ldr	r0, [pc, #8]	; (8006de8 <DMA1_Stream5_IRQHandler+0x10>)
 8006dde:	f003 fc9b 	bl	800a718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006de2:	bf00      	nop
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	24001820 	.word	0x24001820

08006dec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006df0:	4802      	ldr	r0, [pc, #8]	; (8006dfc <ADC_IRQHandler+0x10>)
 8006df2:	f000 ff45 	bl	8007c80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006df6:	bf00      	nop
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	240012e8 	.word	0x240012e8

08006e00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PID_MODE_INPUT_Pin);
 8006e04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006e08:	f005 f993 	bl	800c132 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006e0c:	bf00      	nop
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006e14:	4802      	ldr	r0, [pc, #8]	; (8006e20 <TIM5_IRQHandler+0x10>)
 8006e16:	f00a f85d 	bl	8010ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006e1a:	bf00      	nop
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	24001a6c 	.word	0x24001a6c

08006e24 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006e28:	4802      	ldr	r0, [pc, #8]	; (8006e34 <UART4_IRQHandler+0x10>)
 8006e2a:	f00b fd5d 	bl	80128e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006e2e:	bf00      	nop
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	24001468 	.word	0x24001468

08006e38 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006e3c:	4802      	ldr	r0, [pc, #8]	; (8006e48 <UART5_IRQHandler+0x10>)
 8006e3e:	f00b fd53 	bl	80128e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006e42:	bf00      	nop
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	240014fc 	.word	0x240014fc

08006e4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006e50:	4802      	ldr	r0, [pc, #8]	; (8006e5c <TIM6_DAC_IRQHandler+0x10>)
 8006e52:	f00a f83f 	bl	8010ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006e56:	bf00      	nop
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	24001ab8 	.word	0x24001ab8

08006e60 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006e64:	4802      	ldr	r0, [pc, #8]	; (8006e70 <UART7_IRQHandler+0x10>)
 8006e66:	f00b fd3f 	bl	80128e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8006e6a:	bf00      	nop
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	24001590 	.word	0x24001590

08006e74 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8006e78:	4802      	ldr	r0, [pc, #8]	; (8006e84 <UART8_IRQHandler+0x10>)
 8006e7a:	f00b fd35 	bl	80128e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8006e7e:	bf00      	nop
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	24001624 	.word	0x24001624

08006e88 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8006e8c:	4802      	ldr	r0, [pc, #8]	; (8006e98 <TIM15_IRQHandler+0x10>)
 8006e8e:	f00a f821 	bl	8010ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8006e92:	bf00      	nop
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	24001b04 	.word	0x24001b04

08006e9c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006ea0:	4802      	ldr	r0, [pc, #8]	; (8006eac <TIM16_IRQHandler+0x10>)
 8006ea2:	f00a f817 	bl	8010ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8006ea6:	bf00      	nop
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	24001b50 	.word	0x24001b50

08006eb0 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006eb4:	4802      	ldr	r0, [pc, #8]	; (8006ec0 <BDMA_Channel0_IRQHandler+0x10>)
 8006eb6:	f003 fc2f 	bl	800a718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8006eba:	bf00      	nop
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	240016b8 	.word	0x240016b8

08006ec4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006ec8:	4802      	ldr	r0, [pc, #8]	; (8006ed4 <LPUART1_IRQHandler+0x10>)
 8006eca:	f00b fd0d 	bl	80128e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006ece:	bf00      	nop
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	240013d4 	.word	0x240013d4

08006ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  return 1;
 8006edc:	2301      	movs	r3, #1
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <_kill>:

int _kill(int pid, int sig)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006ef2:	f00e fc39 	bl	8015768 <__errno>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2216      	movs	r2, #22
 8006efa:	601a      	str	r2, [r3, #0]
  return -1;
 8006efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <_exit>:

void _exit (int status)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff ffe7 	bl	8006ee8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006f1a:	e7fe      	b.n	8006f1a <_exit+0x12>

08006f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	e00a      	b.n	8006f44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006f2e:	f3af 8000 	nop.w
 8006f32:	4601      	mov	r1, r0
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	60ba      	str	r2, [r7, #8]
 8006f3a:	b2ca      	uxtb	r2, r1
 8006f3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	3301      	adds	r3, #1
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	dbf0      	blt.n	8006f2e <_read+0x12>
  }

  return len;
 8006f4c:	687b      	ldr	r3, [r7, #4]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b086      	sub	sp, #24
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	e009      	b.n	8006f7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	60ba      	str	r2, [r7, #8]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fa f8cf 	bl	8001114 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	dbf1      	blt.n	8006f68 <_write+0x12>
  }
  return len;
 8006f84:	687b      	ldr	r3, [r7, #4]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <_close>:

int _close(int file)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fb6:	605a      	str	r2, [r3, #4]
  return 0;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <_isatty>:

int _isatty(int file)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006fce:	2301      	movs	r3, #1
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
	...

08006ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007000:	4a14      	ldr	r2, [pc, #80]	; (8007054 <_sbrk+0x5c>)
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <_sbrk+0x60>)
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800700c:	4b13      	ldr	r3, [pc, #76]	; (800705c <_sbrk+0x64>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007014:	4b11      	ldr	r3, [pc, #68]	; (800705c <_sbrk+0x64>)
 8007016:	4a12      	ldr	r2, [pc, #72]	; (8007060 <_sbrk+0x68>)
 8007018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800701a:	4b10      	ldr	r3, [pc, #64]	; (800705c <_sbrk+0x64>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4413      	add	r3, r2
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	429a      	cmp	r2, r3
 8007026:	d207      	bcs.n	8007038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007028:	f00e fb9e 	bl	8015768 <__errno>
 800702c:	4603      	mov	r3, r0
 800702e:	220c      	movs	r2, #12
 8007030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007036:	e009      	b.n	800704c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007038:	4b08      	ldr	r3, [pc, #32]	; (800705c <_sbrk+0x64>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800703e:	4b07      	ldr	r3, [pc, #28]	; (800705c <_sbrk+0x64>)
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4413      	add	r3, r2
 8007046:	4a05      	ldr	r2, [pc, #20]	; (800705c <_sbrk+0x64>)
 8007048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800704a:	68fb      	ldr	r3, [r7, #12]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	24080000 	.word	0x24080000
 8007058:	00000400 	.word	0x00000400
 800705c:	24004614 	.word	0x24004614
 8007060:	24004770 	.word	0x24004770

08007064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007068:	4b37      	ldr	r3, [pc, #220]	; (8007148 <SystemInit+0xe4>)
 800706a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706e:	4a36      	ldr	r2, [pc, #216]	; (8007148 <SystemInit+0xe4>)
 8007070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007078:	4b34      	ldr	r3, [pc, #208]	; (800714c <SystemInit+0xe8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	2b06      	cmp	r3, #6
 8007082:	d807      	bhi.n	8007094 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007084:	4b31      	ldr	r3, [pc, #196]	; (800714c <SystemInit+0xe8>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f023 030f 	bic.w	r3, r3, #15
 800708c:	4a2f      	ldr	r2, [pc, #188]	; (800714c <SystemInit+0xe8>)
 800708e:	f043 0307 	orr.w	r3, r3, #7
 8007092:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007094:	4b2e      	ldr	r3, [pc, #184]	; (8007150 <SystemInit+0xec>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a2d      	ldr	r2, [pc, #180]	; (8007150 <SystemInit+0xec>)
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80070a0:	4b2b      	ldr	r3, [pc, #172]	; (8007150 <SystemInit+0xec>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80070a6:	4b2a      	ldr	r3, [pc, #168]	; (8007150 <SystemInit+0xec>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	4929      	ldr	r1, [pc, #164]	; (8007150 <SystemInit+0xec>)
 80070ac:	4b29      	ldr	r3, [pc, #164]	; (8007154 <SystemInit+0xf0>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <SystemInit+0xe8>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d007      	beq.n	80070ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80070be:	4b23      	ldr	r3, [pc, #140]	; (800714c <SystemInit+0xe8>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f023 030f 	bic.w	r3, r3, #15
 80070c6:	4a21      	ldr	r2, [pc, #132]	; (800714c <SystemInit+0xe8>)
 80070c8:	f043 0307 	orr.w	r3, r3, #7
 80070cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80070ce:	4b20      	ldr	r3, [pc, #128]	; (8007150 <SystemInit+0xec>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80070d4:	4b1e      	ldr	r3, [pc, #120]	; (8007150 <SystemInit+0xec>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80070da:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <SystemInit+0xec>)
 80070dc:	2200      	movs	r2, #0
 80070de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80070e0:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <SystemInit+0xec>)
 80070e2:	4a1d      	ldr	r2, [pc, #116]	; (8007158 <SystemInit+0xf4>)
 80070e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80070e6:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <SystemInit+0xec>)
 80070e8:	4a1c      	ldr	r2, [pc, #112]	; (800715c <SystemInit+0xf8>)
 80070ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80070ec:	4b18      	ldr	r3, [pc, #96]	; (8007150 <SystemInit+0xec>)
 80070ee:	4a1c      	ldr	r2, [pc, #112]	; (8007160 <SystemInit+0xfc>)
 80070f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80070f2:	4b17      	ldr	r3, [pc, #92]	; (8007150 <SystemInit+0xec>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80070f8:	4b15      	ldr	r3, [pc, #84]	; (8007150 <SystemInit+0xec>)
 80070fa:	4a19      	ldr	r2, [pc, #100]	; (8007160 <SystemInit+0xfc>)
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80070fe:	4b14      	ldr	r3, [pc, #80]	; (8007150 <SystemInit+0xec>)
 8007100:	2200      	movs	r2, #0
 8007102:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007104:	4b12      	ldr	r3, [pc, #72]	; (8007150 <SystemInit+0xec>)
 8007106:	4a16      	ldr	r2, [pc, #88]	; (8007160 <SystemInit+0xfc>)
 8007108:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800710a:	4b11      	ldr	r3, [pc, #68]	; (8007150 <SystemInit+0xec>)
 800710c:	2200      	movs	r2, #0
 800710e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007110:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <SystemInit+0xec>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a0e      	ldr	r2, [pc, #56]	; (8007150 <SystemInit+0xec>)
 8007116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800711a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800711c:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <SystemInit+0xec>)
 800711e:	2200      	movs	r2, #0
 8007120:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007122:	4b10      	ldr	r3, [pc, #64]	; (8007164 <SystemInit+0x100>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4b10      	ldr	r3, [pc, #64]	; (8007168 <SystemInit+0x104>)
 8007128:	4013      	ands	r3, r2
 800712a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800712e:	d202      	bcs.n	8007136 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007130:	4b0e      	ldr	r3, [pc, #56]	; (800716c <SystemInit+0x108>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007136:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <SystemInit+0x10c>)
 8007138:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800713c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800713e:	bf00      	nop
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	e000ed00 	.word	0xe000ed00
 800714c:	52002000 	.word	0x52002000
 8007150:	58024400 	.word	0x58024400
 8007154:	eaf6ed7f 	.word	0xeaf6ed7f
 8007158:	02020200 	.word	0x02020200
 800715c:	01ff0000 	.word	0x01ff0000
 8007160:	01010280 	.word	0x01010280
 8007164:	5c001000 	.word	0x5c001000
 8007168:	ffff0000 	.word	0xffff0000
 800716c:	51008108 	.word	0x51008108
 8007170:	52004000 	.word	0x52004000

08007174 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	0a5a      	lsrs	r2, r3, #9
 8007184:	490f      	ldr	r1, [pc, #60]	; (80071c4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8007186:	fba1 1202 	umull	r1, r2, r1, r2
 800718a:	09d2      	lsrs	r2, r2, #7
 800718c:	490e      	ldr	r1, [pc, #56]	; (80071c8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800718e:	fb01 f202 	mul.w	r2, r1, r2
 8007192:	1a9b      	subs	r3, r3, r2
 8007194:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	0a5b      	lsrs	r3, r3, #9
 800719c:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800719e:	fba2 2303 	umull	r2, r3, r2, r3
 80071a2:	09db      	lsrs	r3, r3, #7
 80071a4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	441a      	add	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]
}
 80071b8:	bf00      	nop
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	00044b83 	.word	0x00044b83
 80071c8:	3b9aca00 	.word	0x3b9aca00

080071cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80071cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007204 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80071d0:	f7ff ff48 	bl	8007064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80071d4:	480c      	ldr	r0, [pc, #48]	; (8007208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80071d6:	490d      	ldr	r1, [pc, #52]	; (800720c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80071d8:	4a0d      	ldr	r2, [pc, #52]	; (8007210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80071da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80071dc:	e002      	b.n	80071e4 <LoopCopyDataInit>

080071de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80071de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80071e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80071e2:	3304      	adds	r3, #4

080071e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80071e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80071e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80071e8:	d3f9      	bcc.n	80071de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80071ea:	4a0a      	ldr	r2, [pc, #40]	; (8007214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80071ec:	4c0a      	ldr	r4, [pc, #40]	; (8007218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80071ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80071f0:	e001      	b.n	80071f6 <LoopFillZerobss>

080071f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80071f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80071f4:	3204      	adds	r2, #4

080071f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80071f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80071f8:	d3fb      	bcc.n	80071f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80071fa:	f00e fabb 	bl	8015774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071fe:	f7f9 ff9b 	bl	8001138 <main>
  bx  lr
 8007202:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007204:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8007208:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800720c:	24000248 	.word	0x24000248
  ldr r2, =_sidata
 8007210:	08017a34 	.word	0x08017a34
  ldr r2, =_sbss
 8007214:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 8007218:	2400476c 	.word	0x2400476c

0800721c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800721c:	e7fe      	b.n	800721c <ADC3_IRQHandler>
	...

08007220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007226:	2003      	movs	r0, #3
 8007228:	f001 ff0c 	bl	8009044 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800722c:	f006 fa88 	bl	800d740 <HAL_RCC_GetSysClockFreq>
 8007230:	4602      	mov	r2, r0
 8007232:	4b15      	ldr	r3, [pc, #84]	; (8007288 <HAL_Init+0x68>)
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	4913      	ldr	r1, [pc, #76]	; (800728c <HAL_Init+0x6c>)
 800723e:	5ccb      	ldrb	r3, [r1, r3]
 8007240:	f003 031f 	and.w	r3, r3, #31
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
 8007248:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800724a:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <HAL_Init+0x68>)
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	4a0e      	ldr	r2, [pc, #56]	; (800728c <HAL_Init+0x6c>)
 8007254:	5cd3      	ldrb	r3, [r2, r3]
 8007256:	f003 031f 	and.w	r3, r3, #31
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
 8007260:	4a0b      	ldr	r2, [pc, #44]	; (8007290 <HAL_Init+0x70>)
 8007262:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007264:	4a0b      	ldr	r2, [pc, #44]	; (8007294 <HAL_Init+0x74>)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800726a:	200f      	movs	r0, #15
 800726c:	f000 f814 	bl	8007298 <HAL_InitTick>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e002      	b.n	8007280 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800727a:	f7fe fe93 	bl	8005fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	58024400 	.word	0x58024400
 800728c:	08017668 	.word	0x08017668
 8007290:	24000074 	.word	0x24000074
 8007294:	24000070 	.word	0x24000070

08007298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80072a0:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <HAL_InitTick+0x60>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e021      	b.n	80072f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80072ac:	4b13      	ldr	r3, [pc, #76]	; (80072fc <HAL_InitTick+0x64>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <HAL_InitTick+0x60>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	4619      	mov	r1, r3
 80072b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80072be:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fef1 	bl	80090aa <HAL_SYSTICK_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e00e      	b.n	80072f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b0f      	cmp	r3, #15
 80072d6:	d80a      	bhi.n	80072ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80072d8:	2200      	movs	r2, #0
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072e0:	f001 febb 	bl	800905a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80072e4:	4a06      	ldr	r2, [pc, #24]	; (8007300 <HAL_InitTick+0x68>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e000      	b.n	80072f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	2400007c 	.word	0x2400007c
 80072fc:	24000070 	.word	0x24000070
 8007300:	24000078 	.word	0x24000078

08007304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007304:	b480      	push	{r7}
 8007306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007308:	4b06      	ldr	r3, [pc, #24]	; (8007324 <HAL_IncTick+0x20>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	4b06      	ldr	r3, [pc, #24]	; (8007328 <HAL_IncTick+0x24>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4413      	add	r3, r2
 8007314:	4a04      	ldr	r2, [pc, #16]	; (8007328 <HAL_IncTick+0x24>)
 8007316:	6013      	str	r3, [r2, #0]
}
 8007318:	bf00      	nop
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	2400007c 	.word	0x2400007c
 8007328:	24004618 	.word	0x24004618

0800732c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
  return uwTick;
 8007330:	4b03      	ldr	r3, [pc, #12]	; (8007340 <HAL_GetTick+0x14>)
 8007332:	681b      	ldr	r3, [r3, #0]
}
 8007334:	4618      	mov	r0, r3
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	24004618 	.word	0x24004618

08007344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800734c:	f7ff ffee 	bl	800732c <HAL_GetTick>
 8007350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800735c:	d005      	beq.n	800736a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800735e:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <HAL_Delay+0x44>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4413      	add	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800736a:	bf00      	nop
 800736c:	f7ff ffde 	bl	800732c <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	429a      	cmp	r2, r3
 800737a:	d8f7      	bhi.n	800736c <HAL_Delay+0x28>
  {
  }
}
 800737c:	bf00      	nop
 800737e:	bf00      	nop
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	2400007c 	.word	0x2400007c

0800738c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007390:	4b03      	ldr	r3, [pc, #12]	; (80073a0 <HAL_GetREVID+0x14>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	0c1b      	lsrs	r3, r3, #16
}
 8007396:	4618      	mov	r0, r3
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	5c001000 	.word	0x5c001000

080073a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	609a      	str	r2, [r3, #8]
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	609a      	str	r2, [r3, #8]
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3360      	adds	r3, #96	; 0x60
 800741e:	461a      	mov	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	430b      	orrs	r3, r1
 800743a:	431a      	orrs	r2, r3
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8007440:	bf00      	nop
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f003 031f 	and.w	r3, r3, #31
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	fa01 f303 	lsl.w	r3, r1, r3
 800746c:	431a      	orrs	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	611a      	str	r2, [r3, #16]
}
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800747e:	b480      	push	{r7}
 8007480:	b087      	sub	sp, #28
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3360      	adds	r3, #96	; 0x60
 800748e:	461a      	mov	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	601a      	str	r2, [r3, #0]
  }
}
 80074a8:	bf00      	nop
 80074aa:	371c      	adds	r7, #28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e000      	b.n	80074ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80074da:	b480      	push	{r7}
 80074dc:	b087      	sub	sp, #28
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3330      	adds	r3, #48	; 0x30
 80074ea:	461a      	mov	r2, r3
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	f003 030c 	and.w	r3, r3, #12
 80074f6:	4413      	add	r3, r2
 80074f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	211f      	movs	r1, #31
 8007506:	fa01 f303 	lsl.w	r3, r1, r3
 800750a:	43db      	mvns	r3, r3
 800750c:	401a      	ands	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	0e9b      	lsrs	r3, r3, #26
 8007512:	f003 011f 	and.w	r1, r3, #31
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f003 031f 	and.w	r3, r3, #31
 800751c:	fa01 f303 	lsl.w	r3, r1, r3
 8007520:	431a      	orrs	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007526:	bf00      	nop
 8007528:	371c      	adds	r7, #28
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f023 0203 	bic.w	r2, r3, #3
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	60da      	str	r2, [r3, #12]
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007564:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800756c:	2301      	movs	r3, #1
 800756e:	e000      	b.n	8007572 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800757e:	b480      	push	{r7}
 8007580:	b087      	sub	sp, #28
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3314      	adds	r3, #20
 800758e:	461a      	mov	r2, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	0e5b      	lsrs	r3, r3, #25
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	f003 0304 	and.w	r3, r3, #4
 800759a:	4413      	add	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	0d1b      	lsrs	r3, r3, #20
 80075a6:	f003 031f 	and.w	r3, r3, #31
 80075aa:	2107      	movs	r1, #7
 80075ac:	fa01 f303 	lsl.w	r3, r1, r3
 80075b0:	43db      	mvns	r3, r3
 80075b2:	401a      	ands	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	0d1b      	lsrs	r3, r3, #20
 80075b8:	f003 031f 	and.w	r3, r3, #31
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	fa01 f303 	lsl.w	r3, r1, r3
 80075c2:	431a      	orrs	r2, r3
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80075c8:	bf00      	nop
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075ec:	43db      	mvns	r3, r3
 80075ee:	401a      	ands	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f003 0318 	and.w	r3, r3, #24
 80075f6:	4908      	ldr	r1, [pc, #32]	; (8007618 <LL_ADC_SetChannelSingleDiff+0x44>)
 80075f8:	40d9      	lsrs	r1, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	400b      	ands	r3, r1
 80075fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007602:	431a      	orrs	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	000fffff 	.word	0x000fffff

0800761c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f003 031f 	and.w	r3, r3, #31
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	4b04      	ldr	r3, [pc, #16]	; (8007674 <LL_ADC_DisableDeepPowerDown+0x20>)
 8007662:	4013      	ands	r3, r2
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6093      	str	r3, [r2, #8]
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	5fffffc0 	.word	0x5fffffc0

08007678 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800768c:	d101      	bne.n	8007692 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80076ae:	4013      	ands	r3, r2
 80076b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	6fffffc0 	.word	0x6fffffc0

080076c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076dc:	d101      	bne.n	80076e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80076de:	2301      	movs	r3, #1
 80076e0:	e000      	b.n	80076e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	4b05      	ldr	r3, [pc, #20]	; (8007714 <LL_ADC_Enable+0x24>)
 80076fe:	4013      	ands	r3, r2
 8007700:	f043 0201 	orr.w	r2, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	7fffffc0 	.word	0x7fffffc0

08007718 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b01      	cmp	r3, #1
 800772a:	d101      	bne.n	8007730 <LL_ADC_IsEnabled+0x18>
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <LL_ADC_IsEnabled+0x1a>
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	4b05      	ldr	r3, [pc, #20]	; (8007764 <LL_ADC_REG_StartConversion+0x24>)
 800774e:	4013      	ands	r3, r2
 8007750:	f043 0204 	orr.w	r2, r3, #4
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	7fffffc0 	.word	0x7fffffc0

08007768 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f003 0304 	and.w	r3, r3, #4
 8007778:	2b04      	cmp	r3, #4
 800777a:	d101      	bne.n	8007780 <LL_ADC_REG_IsConversionOngoing+0x18>
 800777c:	2301      	movs	r3, #1
 800777e:	e000      	b.n	8007782 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 0308 	and.w	r3, r3, #8
 800779e:	2b08      	cmp	r3, #8
 80077a0:	d101      	bne.n	80077a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e000      	b.n	80077a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80077b4:	b590      	push	{r4, r7, lr}
 80077b6:	b089      	sub	sp, #36	; 0x24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e18f      	b.n	8007aee <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d109      	bne.n	80077f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7fe fbfb 	bl	8005fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff ff3f 	bl	8007678 <LL_ADC_IsDeepPowerDownEnabled>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d004      	beq.n	800780a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff ff25 	bl	8007654 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff ff5a 	bl	80076c8 <LL_ADC_IsInternalRegulatorEnabled>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d114      	bne.n	8007844 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff ff3e 	bl	80076a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007824:	4b87      	ldr	r3, [pc, #540]	; (8007a44 <HAL_ADC_Init+0x290>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	099b      	lsrs	r3, r3, #6
 800782a:	4a87      	ldr	r2, [pc, #540]	; (8007a48 <HAL_ADC_Init+0x294>)
 800782c:	fba2 2303 	umull	r2, r3, r2, r3
 8007830:	099b      	lsrs	r3, r3, #6
 8007832:	3301      	adds	r3, #1
 8007834:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007836:	e002      	b.n	800783e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	3b01      	subs	r3, #1
 800783c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1f9      	bne.n	8007838 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff ff3d 	bl	80076c8 <LL_ADC_IsInternalRegulatorEnabled>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10d      	bne.n	8007870 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007858:	f043 0210 	orr.w	r2, r3, #16
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007864:	f043 0201 	orr.w	r2, r3, #1
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff ff77 	bl	8007768 <LL_ADC_REG_IsConversionOngoing>
 800787a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 8129 	bne.w	8007adc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	f040 8125 	bne.w	8007adc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007896:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800789a:	f043 0202 	orr.w	r2, r3, #2
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff ff36 	bl	8007718 <LL_ADC_IsEnabled>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d136      	bne.n	8007920 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a65      	ldr	r2, [pc, #404]	; (8007a4c <HAL_ADC_Init+0x298>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d004      	beq.n	80078c6 <HAL_ADC_Init+0x112>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a63      	ldr	r2, [pc, #396]	; (8007a50 <HAL_ADC_Init+0x29c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d10e      	bne.n	80078e4 <HAL_ADC_Init+0x130>
 80078c6:	4861      	ldr	r0, [pc, #388]	; (8007a4c <HAL_ADC_Init+0x298>)
 80078c8:	f7ff ff26 	bl	8007718 <LL_ADC_IsEnabled>
 80078cc:	4604      	mov	r4, r0
 80078ce:	4860      	ldr	r0, [pc, #384]	; (8007a50 <HAL_ADC_Init+0x29c>)
 80078d0:	f7ff ff22 	bl	8007718 <LL_ADC_IsEnabled>
 80078d4:	4603      	mov	r3, r0
 80078d6:	4323      	orrs	r3, r4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	bf0c      	ite	eq
 80078dc:	2301      	moveq	r3, #1
 80078de:	2300      	movne	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	e008      	b.n	80078f6 <HAL_ADC_Init+0x142>
 80078e4:	485b      	ldr	r0, [pc, #364]	; (8007a54 <HAL_ADC_Init+0x2a0>)
 80078e6:	f7ff ff17 	bl	8007718 <LL_ADC_IsEnabled>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bf0c      	ite	eq
 80078f0:	2301      	moveq	r3, #1
 80078f2:	2300      	movne	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d012      	beq.n	8007920 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a53      	ldr	r2, [pc, #332]	; (8007a4c <HAL_ADC_Init+0x298>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <HAL_ADC_Init+0x15a>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a51      	ldr	r2, [pc, #324]	; (8007a50 <HAL_ADC_Init+0x29c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d101      	bne.n	8007912 <HAL_ADC_Init+0x15e>
 800790e:	4a52      	ldr	r2, [pc, #328]	; (8007a58 <HAL_ADC_Init+0x2a4>)
 8007910:	e000      	b.n	8007914 <HAL_ADC_Init+0x160>
 8007912:	4a52      	ldr	r2, [pc, #328]	; (8007a5c <HAL_ADC_Init+0x2a8>)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	4619      	mov	r1, r3
 800791a:	4610      	mov	r0, r2
 800791c:	f7ff fd42 	bl	80073a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007920:	f7ff fd34 	bl	800738c <HAL_GetREVID>
 8007924:	4603      	mov	r3, r0
 8007926:	f241 0203 	movw	r2, #4099	; 0x1003
 800792a:	4293      	cmp	r3, r2
 800792c:	d914      	bls.n	8007958 <HAL_ADC_Init+0x1a4>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2b10      	cmp	r3, #16
 8007934:	d110      	bne.n	8007958 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	7d5b      	ldrb	r3, [r3, #21]
 800793a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007940:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007946:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	7f1b      	ldrb	r3, [r3, #28]
 800794c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800794e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007950:	f043 030c 	orr.w	r3, r3, #12
 8007954:	61bb      	str	r3, [r7, #24]
 8007956:	e00d      	b.n	8007974 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7d5b      	ldrb	r3, [r3, #21]
 800795c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007962:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007968:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	7f1b      	ldrb	r3, [r3, #28]
 800796e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007970:	4313      	orrs	r3, r2
 8007972:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	7f1b      	ldrb	r3, [r3, #28]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d106      	bne.n	800798a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	3b01      	subs	r3, #1
 8007982:	045b      	lsls	r3, r3, #17
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	4313      	orrs	r3, r2
 8007988:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	2b00      	cmp	r3, #0
 8007990:	d009      	beq.n	80079a6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	4b2c      	ldr	r3, [pc, #176]	; (8007a60 <HAL_ADC_Init+0x2ac>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	69b9      	ldr	r1, [r7, #24]
 80079b6:	430b      	orrs	r3, r1
 80079b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fed2 	bl	8007768 <LL_ADC_REG_IsConversionOngoing>
 80079c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff fedf 	bl	800778e <LL_ADC_INJ_IsConversionOngoing>
 80079d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d15f      	bne.n	8007a98 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d15c      	bne.n	8007a98 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	7d1b      	ldrb	r3, [r3, #20]
 80079e2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80079e8:	4313      	orrs	r3, r2
 80079ea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <HAL_ADC_Init+0x2b0>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6812      	ldr	r2, [r2, #0]
 80079fa:	69b9      	ldr	r1, [r7, #24]
 80079fc:	430b      	orrs	r3, r1
 80079fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d130      	bne.n	8007a6c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <HAL_ADC_Init+0x2b4>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a1e:	3a01      	subs	r2, #1
 8007a20:	0411      	lsls	r1, r2, #16
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007a26:	4311      	orrs	r1, r2
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a2c:	4311      	orrs	r1, r2
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007a32:	430a      	orrs	r2, r1
 8007a34:	431a      	orrs	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0201 	orr.w	r2, r2, #1
 8007a3e:	611a      	str	r2, [r3, #16]
 8007a40:	e01c      	b.n	8007a7c <HAL_ADC_Init+0x2c8>
 8007a42:	bf00      	nop
 8007a44:	24000070 	.word	0x24000070
 8007a48:	053e2d63 	.word	0x053e2d63
 8007a4c:	40022000 	.word	0x40022000
 8007a50:	40022100 	.word	0x40022100
 8007a54:	58026000 	.word	0x58026000
 8007a58:	40022300 	.word	0x40022300
 8007a5c:	58026300 	.word	0x58026300
 8007a60:	fff0c003 	.word	0xfff0c003
 8007a64:	ffffbffc 	.word	0xffffbffc
 8007a68:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0201 	bic.w	r2, r2, #1
 8007a7a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 ffc4 	bl	8008a20 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10c      	bne.n	8007aba <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	f023 010f 	bic.w	r1, r3, #15
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	1e5a      	subs	r2, r3, #1
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8007ab8:	e007      	b.n	8007aca <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 020f 	bic.w	r2, r2, #15
 8007ac8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ace:	f023 0303 	bic.w	r3, r3, #3
 8007ad2:	f043 0201 	orr.w	r2, r3, #1
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	655a      	str	r2, [r3, #84]	; 0x54
 8007ada:	e007      	b.n	8007aec <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae0:	f043 0210 	orr.w	r2, r3, #16
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007aec:	7ffb      	ldrb	r3, [r7, #31]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3724      	adds	r7, #36	; 0x24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd90      	pop	{r4, r7, pc}
 8007af6:	bf00      	nop

08007af8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a55      	ldr	r2, [pc, #340]	; (8007c60 <HAL_ADC_Start_DMA+0x168>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d004      	beq.n	8007b18 <HAL_ADC_Start_DMA+0x20>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a54      	ldr	r2, [pc, #336]	; (8007c64 <HAL_ADC_Start_DMA+0x16c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d101      	bne.n	8007b1c <HAL_ADC_Start_DMA+0x24>
 8007b18:	4b53      	ldr	r3, [pc, #332]	; (8007c68 <HAL_ADC_Start_DMA+0x170>)
 8007b1a:	e000      	b.n	8007b1e <HAL_ADC_Start_DMA+0x26>
 8007b1c:	4b53      	ldr	r3, [pc, #332]	; (8007c6c <HAL_ADC_Start_DMA+0x174>)
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff fd7c 	bl	800761c <LL_ADC_GetMultimode>
 8007b24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff fe1c 	bl	8007768 <LL_ADC_REG_IsConversionOngoing>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f040 808c 	bne.w	8007c50 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <HAL_ADC_Start_DMA+0x4e>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e087      	b.n	8007c56 <HAL_ADC_Start_DMA+0x15e>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b05      	cmp	r3, #5
 8007b58:	d002      	beq.n	8007b60 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b09      	cmp	r3, #9
 8007b5e:	d170      	bne.n	8007c42 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fe3f 	bl	80087e4 <ADC_Enable>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d163      	bne.n	8007c38 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b74:	4b3e      	ldr	r3, [pc, #248]	; (8007c70 <HAL_ADC_Start_DMA+0x178>)
 8007b76:	4013      	ands	r3, r2
 8007b78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a37      	ldr	r2, [pc, #220]	; (8007c64 <HAL_ADC_Start_DMA+0x16c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d002      	beq.n	8007b90 <HAL_ADC_Start_DMA+0x98>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	e000      	b.n	8007b92 <HAL_ADC_Start_DMA+0x9a>
 8007b90:	4b33      	ldr	r3, [pc, #204]	; (8007c60 <HAL_ADC_Start_DMA+0x168>)
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	6812      	ldr	r2, [r2, #0]
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d002      	beq.n	8007ba0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d105      	bne.n	8007bac <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d006      	beq.n	8007bc6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbc:	f023 0206 	bic.w	r2, r3, #6
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	659a      	str	r2, [r3, #88]	; 0x58
 8007bc4:	e002      	b.n	8007bcc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd0:	4a28      	ldr	r2, [pc, #160]	; (8007c74 <HAL_ADC_Start_DMA+0x17c>)
 8007bd2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd8:	4a27      	ldr	r2, [pc, #156]	; (8007c78 <HAL_ADC_Start_DMA+0x180>)
 8007bda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be0:	4a26      	ldr	r2, [pc, #152]	; (8007c7c <HAL_ADC_Start_DMA+0x184>)
 8007be2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	221c      	movs	r2, #28
 8007bea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0210 	orr.w	r2, r2, #16
 8007c02:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	f7ff fc8f 	bl	8007532 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3340      	adds	r3, #64	; 0x40
 8007c1e:	4619      	mov	r1, r3
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f001 fdaa 	bl	800977c <HAL_DMA_Start_IT>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff fd85 	bl	8007740 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007c36:	e00d      	b.n	8007c54 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8007c40:	e008      	b.n	8007c54 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007c4e:	e001      	b.n	8007c54 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007c50:	2302      	movs	r3, #2
 8007c52:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	40022000 	.word	0x40022000
 8007c64:	40022100 	.word	0x40022100
 8007c68:	40022300 	.word	0x40022300
 8007c6c:	58026300 	.word	0x58026300
 8007c70:	fffff0fe 	.word	0xfffff0fe
 8007c74:	080088f9 	.word	0x080088f9
 8007c78:	080089d1 	.word	0x080089d1
 8007c7c:	080089ed 	.word	0x080089ed

08007c80 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08a      	sub	sp, #40	; 0x28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007c88:	2300      	movs	r3, #0
 8007c8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a87      	ldr	r2, [pc, #540]	; (8007ec0 <HAL_ADC_IRQHandler+0x240>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d004      	beq.n	8007cb0 <HAL_ADC_IRQHandler+0x30>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a86      	ldr	r2, [pc, #536]	; (8007ec4 <HAL_ADC_IRQHandler+0x244>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d101      	bne.n	8007cb4 <HAL_ADC_IRQHandler+0x34>
 8007cb0:	4b85      	ldr	r3, [pc, #532]	; (8007ec8 <HAL_ADC_IRQHandler+0x248>)
 8007cb2:	e000      	b.n	8007cb6 <HAL_ADC_IRQHandler+0x36>
 8007cb4:	4b85      	ldr	r3, [pc, #532]	; (8007ecc <HAL_ADC_IRQHandler+0x24c>)
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff fcb0 	bl	800761c <LL_ADC_GetMultimode>
 8007cbc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d017      	beq.n	8007cf8 <HAL_ADC_IRQHandler+0x78>
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d012      	beq.n	8007cf8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd6:	f003 0310 	and.w	r3, r3, #16
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d105      	bne.n	8007cea <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fff2 	bl	8008cd4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	f003 0304 	and.w	r3, r3, #4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d004      	beq.n	8007d0c <HAL_ADC_IRQHandler+0x8c>
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10a      	bne.n	8007d22 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 8083 	beq.w	8007e1e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	f003 0308 	and.w	r3, r3, #8
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d07d      	beq.n	8007e1e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	f003 0310 	and.w	r3, r3, #16
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d105      	bne.n	8007d3a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff fbb8 	bl	80074b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d062      	beq.n	8007e10 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a5d      	ldr	r2, [pc, #372]	; (8007ec4 <HAL_ADC_IRQHandler+0x244>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d002      	beq.n	8007d5a <HAL_ADC_IRQHandler+0xda>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	e000      	b.n	8007d5c <HAL_ADC_IRQHandler+0xdc>
 8007d5a:	4b59      	ldr	r3, [pc, #356]	; (8007ec0 <HAL_ADC_IRQHandler+0x240>)
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d008      	beq.n	8007d76 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d005      	beq.n	8007d76 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b05      	cmp	r3, #5
 8007d6e:	d002      	beq.n	8007d76 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	2b09      	cmp	r3, #9
 8007d74:	d104      	bne.n	8007d80 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	623b      	str	r3, [r7, #32]
 8007d7e:	e00c      	b.n	8007d9a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a4f      	ldr	r2, [pc, #316]	; (8007ec4 <HAL_ADC_IRQHandler+0x244>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d002      	beq.n	8007d90 <HAL_ADC_IRQHandler+0x110>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	e000      	b.n	8007d92 <HAL_ADC_IRQHandler+0x112>
 8007d90:	4b4b      	ldr	r3, [pc, #300]	; (8007ec0 <HAL_ADC_IRQHandler+0x240>)
 8007d92:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d135      	bne.n	8007e10 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b08      	cmp	r3, #8
 8007db0:	d12e      	bne.n	8007e10 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff fcd6 	bl	8007768 <LL_ADC_REG_IsConversionOngoing>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d11a      	bne.n	8007df8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 020c 	bic.w	r2, r2, #12
 8007dd0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d112      	bne.n	8007e10 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dee:	f043 0201 	orr.w	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	655a      	str	r2, [r3, #84]	; 0x54
 8007df6:	e00b      	b.n	8007e10 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfc:	f043 0210 	orr.w	r2, r3, #16
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e08:	f043 0201 	orr.w	r2, r3, #1
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f96f 	bl	80080f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	220c      	movs	r2, #12
 8007e1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	f003 0320 	and.w	r3, r3, #32
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <HAL_ADC_IRQHandler+0x1b2>
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	f003 0320 	and.w	r3, r3, #32
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10b      	bne.n	8007e4a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80a0 	beq.w	8007f7e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 809a 	beq.w	8007f7e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4e:	f003 0310 	and.w	r3, r3, #16
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d105      	bne.n	8007e62 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff fb76 	bl	8007558 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007e6c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fb1e 	bl	80074b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007e78:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a11      	ldr	r2, [pc, #68]	; (8007ec4 <HAL_ADC_IRQHandler+0x244>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d002      	beq.n	8007e8a <HAL_ADC_IRQHandler+0x20a>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	e000      	b.n	8007e8c <HAL_ADC_IRQHandler+0x20c>
 8007e8a:	4b0d      	ldr	r3, [pc, #52]	; (8007ec0 <HAL_ADC_IRQHandler+0x240>)
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6812      	ldr	r2, [r2, #0]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d008      	beq.n	8007ea6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b06      	cmp	r3, #6
 8007e9e:	d002      	beq.n	8007ea6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b07      	cmp	r3, #7
 8007ea4:	d104      	bne.n	8007eb0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	623b      	str	r3, [r7, #32]
 8007eae:	e014      	b.n	8007eda <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a03      	ldr	r2, [pc, #12]	; (8007ec4 <HAL_ADC_IRQHandler+0x244>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00a      	beq.n	8007ed0 <HAL_ADC_IRQHandler+0x250>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	e008      	b.n	8007ed2 <HAL_ADC_IRQHandler+0x252>
 8007ec0:	40022000 	.word	0x40022000
 8007ec4:	40022100 	.word	0x40022100
 8007ec8:	40022300 	.word	0x40022300
 8007ecc:	58026300 	.word	0x58026300
 8007ed0:	4b84      	ldr	r3, [pc, #528]	; (80080e4 <HAL_ADC_IRQHandler+0x464>)
 8007ed2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d047      	beq.n	8007f70 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <HAL_ADC_IRQHandler+0x27a>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d03f      	beq.n	8007f70 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d13a      	bne.n	8007f70 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f04:	2b40      	cmp	r3, #64	; 0x40
 8007f06:	d133      	bne.n	8007f70 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d12e      	bne.n	8007f70 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff fc39 	bl	800778e <LL_ADC_INJ_IsConversionOngoing>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d11a      	bne.n	8007f58 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007f30:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d112      	bne.n	8007f70 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4e:	f043 0201 	orr.w	r2, r3, #1
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	655a      	str	r2, [r3, #84]	; 0x54
 8007f56:	e00b      	b.n	8007f70 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5c:	f043 0210 	orr.w	r2, r3, #16
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f68:	f043 0201 	orr.w	r2, r3, #1
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fe87 	bl	8008c84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2260      	movs	r2, #96	; 0x60
 8007f7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d011      	beq.n	8007fac <HAL_ADC_IRQHandler+0x32c>
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00c      	beq.n	8007fac <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f8bc 	bl	800811c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2280      	movs	r2, #128	; 0x80
 8007faa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d012      	beq.n	8007fdc <HAL_ADC_IRQHandler+0x35c>
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00d      	beq.n	8007fdc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fe6d 	bl	8008cac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d012      	beq.n	800800c <HAL_ADC_IRQHandler+0x38c>
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00d      	beq.n	800800c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fe5f 	bl	8008cc0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800800a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f003 0310 	and.w	r3, r3, #16
 8008012:	2b00      	cmp	r3, #0
 8008014:	d043      	beq.n	800809e <HAL_ADC_IRQHandler+0x41e>
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	f003 0310 	and.w	r3, r3, #16
 800801c:	2b00      	cmp	r3, #0
 800801e:	d03e      	beq.n	800809e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008024:	2b00      	cmp	r3, #0
 8008026:	d102      	bne.n	800802e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8008028:	2301      	movs	r3, #1
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
 800802c:	e021      	b.n	8008072 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d015      	beq.n	8008060 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a2a      	ldr	r2, [pc, #168]	; (80080e4 <HAL_ADC_IRQHandler+0x464>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d004      	beq.n	8008048 <HAL_ADC_IRQHandler+0x3c8>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a29      	ldr	r2, [pc, #164]	; (80080e8 <HAL_ADC_IRQHandler+0x468>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d101      	bne.n	800804c <HAL_ADC_IRQHandler+0x3cc>
 8008048:	4b28      	ldr	r3, [pc, #160]	; (80080ec <HAL_ADC_IRQHandler+0x46c>)
 800804a:	e000      	b.n	800804e <HAL_ADC_IRQHandler+0x3ce>
 800804c:	4b28      	ldr	r3, [pc, #160]	; (80080f0 <HAL_ADC_IRQHandler+0x470>)
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff faf2 	bl	8007638 <LL_ADC_GetMultiDMATransfer>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00b      	beq.n	8008072 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800805a:	2301      	movs	r3, #1
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
 800805e:	e008      	b.n	8008072 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800806e:	2301      	movs	r3, #1
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	2b01      	cmp	r3, #1
 8008076:	d10e      	bne.n	8008096 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008088:	f043 0202 	orr.w	r2, r3, #2
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f84d 	bl	8008130 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2210      	movs	r2, #16
 800809c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d018      	beq.n	80080da <HAL_ADC_IRQHandler+0x45a>
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d013      	beq.n	80080da <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c2:	f043 0208 	orr.w	r2, r3, #8
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080d2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fddf 	bl	8008c98 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80080da:	bf00      	nop
 80080dc:	3728      	adds	r7, #40	; 0x28
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	40022000 	.word	0x40022000
 80080e8:	40022100 	.word	0x40022100
 80080ec:	40022300 	.word	0x40022300
 80080f0:	58026300 	.word	0x58026300

080080f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008144:	b590      	push	{r4, r7, lr}
 8008146:	b0a1      	sub	sp, #132	; 0x84
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008154:	2300      	movs	r3, #0
 8008156:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	4a9d      	ldr	r2, [pc, #628]	; (80083d4 <HAL_ADC_ConfigChannel+0x290>)
 800815e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <HAL_ADC_ConfigChannel+0x2a>
 800816a:	2302      	movs	r3, #2
 800816c:	e321      	b.n	80087b2 <HAL_ADC_ConfigChannel+0x66e>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4618      	mov	r0, r3
 800817c:	f7ff faf4 	bl	8007768 <LL_ADC_REG_IsConversionOngoing>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	f040 8306 	bne.w	8008794 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008190:	2b00      	cmp	r3, #0
 8008192:	d108      	bne.n	80081a6 <HAL_ADC_ConfigChannel+0x62>
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	0e9b      	lsrs	r3, r3, #26
 800819a:	f003 031f 	and.w	r3, r3, #31
 800819e:	2201      	movs	r2, #1
 80081a0:	fa02 f303 	lsl.w	r3, r2, r3
 80081a4:	e016      	b.n	80081d4 <HAL_ADC_ConfigChannel+0x90>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ae:	fa93 f3a3 	rbit	r3, r3
 80081b2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80081b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081b6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80081b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80081be:	2320      	movs	r3, #32
 80081c0:	e003      	b.n	80081ca <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80081c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081c4:	fab3 f383 	clz	r3, r3
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f003 031f 	and.w	r3, r3, #31
 80081ce:	2201      	movs	r2, #1
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	69d1      	ldr	r1, [r2, #28]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	6812      	ldr	r2, [r2, #0]
 80081de:	430b      	orrs	r3, r1
 80081e0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6818      	ldr	r0, [r3, #0]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	6859      	ldr	r1, [r3, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f7ff f973 	bl	80074da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff fab5 	bl	8007768 <LL_ADC_REG_IsConversionOngoing>
 80081fe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff fac2 	bl	800778e <LL_ADC_INJ_IsConversionOngoing>
 800820a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800820c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 80b3 	bne.w	800837a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008216:	2b00      	cmp	r3, #0
 8008218:	f040 80af 	bne.w	800837a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	6819      	ldr	r1, [r3, #0]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	461a      	mov	r2, r3
 800822a:	f7ff f9a8 	bl	800757e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800822e:	4b6a      	ldr	r3, [pc, #424]	; (80083d8 <HAL_ADC_ConfigChannel+0x294>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800823a:	d10b      	bne.n	8008254 <HAL_ADC_ConfigChannel+0x110>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	695a      	ldr	r2, [r3, #20]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	089b      	lsrs	r3, r3, #2
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	fa02 f303 	lsl.w	r3, r2, r3
 8008252:	e01d      	b.n	8008290 <HAL_ADC_ConfigChannel+0x14c>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f003 0310 	and.w	r3, r3, #16
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10b      	bne.n	800827a <HAL_ADC_ConfigChannel+0x136>
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	695a      	ldr	r2, [r3, #20]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	089b      	lsrs	r3, r3, #2
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	fa02 f303 	lsl.w	r3, r2, r3
 8008278:	e00a      	b.n	8008290 <HAL_ADC_ConfigChannel+0x14c>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	695a      	ldr	r2, [r3, #20]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	089b      	lsrs	r3, r3, #2
 8008286:	f003 0304 	and.w	r3, r3, #4
 800828a:	005b      	lsls	r3, r3, #1
 800828c:	fa02 f303 	lsl.w	r3, r2, r3
 8008290:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	2b04      	cmp	r3, #4
 8008298:	d027      	beq.n	80082ea <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6919      	ldr	r1, [r3, #16]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082a8:	f7ff f8b0 	bl	800740c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	6919      	ldr	r1, [r3, #16]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	7e5b      	ldrb	r3, [r3, #25]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d102      	bne.n	80082c2 <HAL_ADC_ConfigChannel+0x17e>
 80082bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082c0:	e000      	b.n	80082c4 <HAL_ADC_ConfigChannel+0x180>
 80082c2:	2300      	movs	r3, #0
 80082c4:	461a      	mov	r2, r3
 80082c6:	f7ff f8da 	bl	800747e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	6919      	ldr	r1, [r3, #16]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	7e1b      	ldrb	r3, [r3, #24]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d102      	bne.n	80082e0 <HAL_ADC_ConfigChannel+0x19c>
 80082da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082de:	e000      	b.n	80082e2 <HAL_ADC_ConfigChannel+0x19e>
 80082e0:	2300      	movs	r3, #0
 80082e2:	461a      	mov	r2, r3
 80082e4:	f7ff f8b2 	bl	800744c <LL_ADC_SetDataRightShift>
 80082e8:	e047      	b.n	800837a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	069b      	lsls	r3, r3, #26
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d107      	bne.n	800830e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800830c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008314:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	069b      	lsls	r3, r3, #26
 800831e:	429a      	cmp	r2, r3
 8008320:	d107      	bne.n	8008332 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008330:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008338:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	069b      	lsls	r3, r3, #26
 8008342:	429a      	cmp	r2, r3
 8008344:	d107      	bne.n	8008356 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008354:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800835c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	069b      	lsls	r3, r3, #26
 8008366:	429a      	cmp	r2, r3
 8008368:	d107      	bne.n	800837a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008378:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff f9ca 	bl	8007718 <LL_ADC_IsEnabled>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 820d 	bne.w	80087a6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	6819      	ldr	r1, [r3, #0]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	461a      	mov	r2, r3
 800839a:	f7ff f91b 	bl	80075d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	4a0c      	ldr	r2, [pc, #48]	; (80083d4 <HAL_ADC_ConfigChannel+0x290>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	f040 8133 	bne.w	8008610 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d110      	bne.n	80083dc <HAL_ADC_ConfigChannel+0x298>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	0e9b      	lsrs	r3, r3, #26
 80083c0:	3301      	adds	r3, #1
 80083c2:	f003 031f 	and.w	r3, r3, #31
 80083c6:	2b09      	cmp	r3, #9
 80083c8:	bf94      	ite	ls
 80083ca:	2301      	movls	r3, #1
 80083cc:	2300      	movhi	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	e01e      	b.n	8008410 <HAL_ADC_ConfigChannel+0x2cc>
 80083d2:	bf00      	nop
 80083d4:	47ff0000 	.word	0x47ff0000
 80083d8:	5c001000 	.word	0x5c001000
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083e4:	fa93 f3a3 	rbit	r3, r3
 80083e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80083ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80083ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80083f4:	2320      	movs	r3, #32
 80083f6:	e003      	b.n	8008400 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80083f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083fa:	fab3 f383 	clz	r3, r3
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	3301      	adds	r3, #1
 8008402:	f003 031f 	and.w	r3, r3, #31
 8008406:	2b09      	cmp	r3, #9
 8008408:	bf94      	ite	ls
 800840a:	2301      	movls	r3, #1
 800840c:	2300      	movhi	r3, #0
 800840e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008410:	2b00      	cmp	r3, #0
 8008412:	d079      	beq.n	8008508 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800841c:	2b00      	cmp	r3, #0
 800841e:	d107      	bne.n	8008430 <HAL_ADC_ConfigChannel+0x2ec>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	0e9b      	lsrs	r3, r3, #26
 8008426:	3301      	adds	r3, #1
 8008428:	069b      	lsls	r3, r3, #26
 800842a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800842e:	e015      	b.n	800845c <HAL_ADC_ConfigChannel+0x318>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008438:	fa93 f3a3 	rbit	r3, r3
 800843c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800843e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008440:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8008442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8008448:	2320      	movs	r3, #32
 800844a:	e003      	b.n	8008454 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800844c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800844e:	fab3 f383 	clz	r3, r3
 8008452:	b2db      	uxtb	r3, r3
 8008454:	3301      	adds	r3, #1
 8008456:	069b      	lsls	r3, r3, #26
 8008458:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008464:	2b00      	cmp	r3, #0
 8008466:	d109      	bne.n	800847c <HAL_ADC_ConfigChannel+0x338>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	0e9b      	lsrs	r3, r3, #26
 800846e:	3301      	adds	r3, #1
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	2101      	movs	r1, #1
 8008476:	fa01 f303 	lsl.w	r3, r1, r3
 800847a:	e017      	b.n	80084ac <HAL_ADC_ConfigChannel+0x368>
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008484:	fa93 f3a3 	rbit	r3, r3
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800848a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800848e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8008494:	2320      	movs	r3, #32
 8008496:	e003      	b.n	80084a0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8008498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800849a:	fab3 f383 	clz	r3, r3
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	3301      	adds	r3, #1
 80084a2:	f003 031f 	and.w	r3, r3, #31
 80084a6:	2101      	movs	r1, #1
 80084a8:	fa01 f303 	lsl.w	r3, r1, r3
 80084ac:	ea42 0103 	orr.w	r1, r2, r3
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10a      	bne.n	80084d2 <HAL_ADC_ConfigChannel+0x38e>
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	0e9b      	lsrs	r3, r3, #26
 80084c2:	3301      	adds	r3, #1
 80084c4:	f003 021f 	and.w	r2, r3, #31
 80084c8:	4613      	mov	r3, r2
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	4413      	add	r3, r2
 80084ce:	051b      	lsls	r3, r3, #20
 80084d0:	e018      	b.n	8008504 <HAL_ADC_ConfigChannel+0x3c0>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	fa93 f3a3 	rbit	r3, r3
 80084de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80084ea:	2320      	movs	r3, #32
 80084ec:	e003      	b.n	80084f6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	fab3 f383 	clz	r3, r3
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	3301      	adds	r3, #1
 80084f8:	f003 021f 	and.w	r2, r3, #31
 80084fc:	4613      	mov	r3, r2
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	4413      	add	r3, r2
 8008502:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008504:	430b      	orrs	r3, r1
 8008506:	e07e      	b.n	8008606 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008510:	2b00      	cmp	r3, #0
 8008512:	d107      	bne.n	8008524 <HAL_ADC_ConfigChannel+0x3e0>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	0e9b      	lsrs	r3, r3, #26
 800851a:	3301      	adds	r3, #1
 800851c:	069b      	lsls	r3, r3, #26
 800851e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008522:	e015      	b.n	8008550 <HAL_ADC_ConfigChannel+0x40c>
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	fa93 f3a3 	rbit	r3, r3
 8008530:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800853c:	2320      	movs	r3, #32
 800853e:	e003      	b.n	8008548 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	fab3 f383 	clz	r3, r3
 8008546:	b2db      	uxtb	r3, r3
 8008548:	3301      	adds	r3, #1
 800854a:	069b      	lsls	r3, r3, #26
 800854c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008558:	2b00      	cmp	r3, #0
 800855a:	d109      	bne.n	8008570 <HAL_ADC_ConfigChannel+0x42c>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	0e9b      	lsrs	r3, r3, #26
 8008562:	3301      	adds	r3, #1
 8008564:	f003 031f 	and.w	r3, r3, #31
 8008568:	2101      	movs	r1, #1
 800856a:	fa01 f303 	lsl.w	r3, r1, r3
 800856e:	e017      	b.n	80085a0 <HAL_ADC_ConfigChannel+0x45c>
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	fa93 f3a3 	rbit	r3, r3
 800857c:	61bb      	str	r3, [r7, #24]
  return result;
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8008588:	2320      	movs	r3, #32
 800858a:	e003      	b.n	8008594 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	fab3 f383 	clz	r3, r3
 8008592:	b2db      	uxtb	r3, r3
 8008594:	3301      	adds	r3, #1
 8008596:	f003 031f 	and.w	r3, r3, #31
 800859a:	2101      	movs	r1, #1
 800859c:	fa01 f303 	lsl.w	r3, r1, r3
 80085a0:	ea42 0103 	orr.w	r1, r2, r3
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10d      	bne.n	80085cc <HAL_ADC_ConfigChannel+0x488>
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	0e9b      	lsrs	r3, r3, #26
 80085b6:	3301      	adds	r3, #1
 80085b8:	f003 021f 	and.w	r2, r3, #31
 80085bc:	4613      	mov	r3, r2
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	4413      	add	r3, r2
 80085c2:	3b1e      	subs	r3, #30
 80085c4:	051b      	lsls	r3, r3, #20
 80085c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80085ca:	e01b      	b.n	8008604 <HAL_ADC_ConfigChannel+0x4c0>
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	fa93 f3a3 	rbit	r3, r3
 80085d8:	60fb      	str	r3, [r7, #12]
  return result;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80085e4:	2320      	movs	r3, #32
 80085e6:	e003      	b.n	80085f0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	fab3 f383 	clz	r3, r3
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	3301      	adds	r3, #1
 80085f2:	f003 021f 	and.w	r2, r3, #31
 80085f6:	4613      	mov	r3, r2
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	4413      	add	r3, r2
 80085fc:	3b1e      	subs	r3, #30
 80085fe:	051b      	lsls	r3, r3, #20
 8008600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008604:	430b      	orrs	r3, r1
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	6892      	ldr	r2, [r2, #8]
 800860a:	4619      	mov	r1, r3
 800860c:	f7fe ffb7 	bl	800757e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	f280 80c6 	bge.w	80087a6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a67      	ldr	r2, [pc, #412]	; (80087bc <HAL_ADC_ConfigChannel+0x678>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d004      	beq.n	800862e <HAL_ADC_ConfigChannel+0x4ea>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a65      	ldr	r2, [pc, #404]	; (80087c0 <HAL_ADC_ConfigChannel+0x67c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d101      	bne.n	8008632 <HAL_ADC_ConfigChannel+0x4ee>
 800862e:	4b65      	ldr	r3, [pc, #404]	; (80087c4 <HAL_ADC_ConfigChannel+0x680>)
 8008630:	e000      	b.n	8008634 <HAL_ADC_ConfigChannel+0x4f0>
 8008632:	4b65      	ldr	r3, [pc, #404]	; (80087c8 <HAL_ADC_ConfigChannel+0x684>)
 8008634:	4618      	mov	r0, r3
 8008636:	f7fe fedb 	bl	80073f0 <LL_ADC_GetCommonPathInternalCh>
 800863a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a5e      	ldr	r2, [pc, #376]	; (80087bc <HAL_ADC_ConfigChannel+0x678>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d004      	beq.n	8008650 <HAL_ADC_ConfigChannel+0x50c>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a5d      	ldr	r2, [pc, #372]	; (80087c0 <HAL_ADC_ConfigChannel+0x67c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d10e      	bne.n	800866e <HAL_ADC_ConfigChannel+0x52a>
 8008650:	485a      	ldr	r0, [pc, #360]	; (80087bc <HAL_ADC_ConfigChannel+0x678>)
 8008652:	f7ff f861 	bl	8007718 <LL_ADC_IsEnabled>
 8008656:	4604      	mov	r4, r0
 8008658:	4859      	ldr	r0, [pc, #356]	; (80087c0 <HAL_ADC_ConfigChannel+0x67c>)
 800865a:	f7ff f85d 	bl	8007718 <LL_ADC_IsEnabled>
 800865e:	4603      	mov	r3, r0
 8008660:	4323      	orrs	r3, r4
 8008662:	2b00      	cmp	r3, #0
 8008664:	bf0c      	ite	eq
 8008666:	2301      	moveq	r3, #1
 8008668:	2300      	movne	r3, #0
 800866a:	b2db      	uxtb	r3, r3
 800866c:	e008      	b.n	8008680 <HAL_ADC_ConfigChannel+0x53c>
 800866e:	4857      	ldr	r0, [pc, #348]	; (80087cc <HAL_ADC_ConfigChannel+0x688>)
 8008670:	f7ff f852 	bl	8007718 <LL_ADC_IsEnabled>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	bf0c      	ite	eq
 800867a:	2301      	moveq	r3, #1
 800867c:	2300      	movne	r3, #0
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d07d      	beq.n	8008780 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a51      	ldr	r2, [pc, #324]	; (80087d0 <HAL_ADC_ConfigChannel+0x68c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d130      	bne.n	80086f0 <HAL_ADC_ConfigChannel+0x5ac>
 800868e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d12b      	bne.n	80086f0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a4b      	ldr	r2, [pc, #300]	; (80087cc <HAL_ADC_ConfigChannel+0x688>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	f040 8081 	bne.w	80087a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a44      	ldr	r2, [pc, #272]	; (80087bc <HAL_ADC_ConfigChannel+0x678>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_ADC_ConfigChannel+0x574>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a43      	ldr	r2, [pc, #268]	; (80087c0 <HAL_ADC_ConfigChannel+0x67c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d101      	bne.n	80086bc <HAL_ADC_ConfigChannel+0x578>
 80086b8:	4a42      	ldr	r2, [pc, #264]	; (80087c4 <HAL_ADC_ConfigChannel+0x680>)
 80086ba:	e000      	b.n	80086be <HAL_ADC_ConfigChannel+0x57a>
 80086bc:	4a42      	ldr	r2, [pc, #264]	; (80087c8 <HAL_ADC_ConfigChannel+0x684>)
 80086be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086c4:	4619      	mov	r1, r3
 80086c6:	4610      	mov	r0, r2
 80086c8:	f7fe fe7f 	bl	80073ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80086cc:	4b41      	ldr	r3, [pc, #260]	; (80087d4 <HAL_ADC_ConfigChannel+0x690>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	099b      	lsrs	r3, r3, #6
 80086d2:	4a41      	ldr	r2, [pc, #260]	; (80087d8 <HAL_ADC_ConfigChannel+0x694>)
 80086d4:	fba2 2303 	umull	r2, r3, r2, r3
 80086d8:	099b      	lsrs	r3, r3, #6
 80086da:	3301      	adds	r3, #1
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80086e0:	e002      	b.n	80086e8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1f9      	bne.n	80086e2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80086ee:	e05a      	b.n	80087a6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a39      	ldr	r2, [pc, #228]	; (80087dc <HAL_ADC_ConfigChannel+0x698>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d11e      	bne.n	8008738 <HAL_ADC_ConfigChannel+0x5f4>
 80086fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d119      	bne.n	8008738 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a30      	ldr	r2, [pc, #192]	; (80087cc <HAL_ADC_ConfigChannel+0x688>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d14b      	bne.n	80087a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a2a      	ldr	r2, [pc, #168]	; (80087bc <HAL_ADC_ConfigChannel+0x678>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d004      	beq.n	8008722 <HAL_ADC_ConfigChannel+0x5de>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a28      	ldr	r2, [pc, #160]	; (80087c0 <HAL_ADC_ConfigChannel+0x67c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d101      	bne.n	8008726 <HAL_ADC_ConfigChannel+0x5e2>
 8008722:	4a28      	ldr	r2, [pc, #160]	; (80087c4 <HAL_ADC_ConfigChannel+0x680>)
 8008724:	e000      	b.n	8008728 <HAL_ADC_ConfigChannel+0x5e4>
 8008726:	4a28      	ldr	r2, [pc, #160]	; (80087c8 <HAL_ADC_ConfigChannel+0x684>)
 8008728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800872e:	4619      	mov	r1, r3
 8008730:	4610      	mov	r0, r2
 8008732:	f7fe fe4a 	bl	80073ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008736:	e036      	b.n	80087a6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a28      	ldr	r2, [pc, #160]	; (80087e0 <HAL_ADC_ConfigChannel+0x69c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d131      	bne.n	80087a6 <HAL_ADC_ConfigChannel+0x662>
 8008742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d12c      	bne.n	80087a6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a1e      	ldr	r2, [pc, #120]	; (80087cc <HAL_ADC_ConfigChannel+0x688>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d127      	bne.n	80087a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a18      	ldr	r2, [pc, #96]	; (80087bc <HAL_ADC_ConfigChannel+0x678>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d004      	beq.n	800876a <HAL_ADC_ConfigChannel+0x626>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a16      	ldr	r2, [pc, #88]	; (80087c0 <HAL_ADC_ConfigChannel+0x67c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d101      	bne.n	800876e <HAL_ADC_ConfigChannel+0x62a>
 800876a:	4a16      	ldr	r2, [pc, #88]	; (80087c4 <HAL_ADC_ConfigChannel+0x680>)
 800876c:	e000      	b.n	8008770 <HAL_ADC_ConfigChannel+0x62c>
 800876e:	4a16      	ldr	r2, [pc, #88]	; (80087c8 <HAL_ADC_ConfigChannel+0x684>)
 8008770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008772:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008776:	4619      	mov	r1, r3
 8008778:	4610      	mov	r0, r2
 800877a:	f7fe fe26 	bl	80073ca <LL_ADC_SetCommonPathInternalCh>
 800877e:	e012      	b.n	80087a6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008784:	f043 0220 	orr.w	r2, r3, #32
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008792:	e008      	b.n	80087a6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008798:	f043 0220 	orr.w	r2, r3, #32
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80087ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3784      	adds	r7, #132	; 0x84
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd90      	pop	{r4, r7, pc}
 80087ba:	bf00      	nop
 80087bc:	40022000 	.word	0x40022000
 80087c0:	40022100 	.word	0x40022100
 80087c4:	40022300 	.word	0x40022300
 80087c8:	58026300 	.word	0x58026300
 80087cc:	58026000 	.word	0x58026000
 80087d0:	cb840000 	.word	0xcb840000
 80087d4:	24000070 	.word	0x24000070
 80087d8:	053e2d63 	.word	0x053e2d63
 80087dc:	c7520000 	.word	0xc7520000
 80087e0:	cfb80000 	.word	0xcfb80000

080087e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fe ff91 	bl	8007718 <LL_ADC_IsEnabled>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d16e      	bne.n	80088da <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	4b38      	ldr	r3, [pc, #224]	; (80088e4 <ADC_Enable+0x100>)
 8008804:	4013      	ands	r3, r2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00d      	beq.n	8008826 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800880e:	f043 0210 	orr.w	r2, r3, #16
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881a:	f043 0201 	orr.w	r2, r3, #1
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e05a      	b.n	80088dc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4618      	mov	r0, r3
 800882c:	f7fe ff60 	bl	80076f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008830:	f7fe fd7c 	bl	800732c <HAL_GetTick>
 8008834:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a2b      	ldr	r2, [pc, #172]	; (80088e8 <ADC_Enable+0x104>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d004      	beq.n	800884a <ADC_Enable+0x66>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a29      	ldr	r2, [pc, #164]	; (80088ec <ADC_Enable+0x108>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d101      	bne.n	800884e <ADC_Enable+0x6a>
 800884a:	4b29      	ldr	r3, [pc, #164]	; (80088f0 <ADC_Enable+0x10c>)
 800884c:	e000      	b.n	8008850 <ADC_Enable+0x6c>
 800884e:	4b29      	ldr	r3, [pc, #164]	; (80088f4 <ADC_Enable+0x110>)
 8008850:	4618      	mov	r0, r3
 8008852:	f7fe fee3 	bl	800761c <LL_ADC_GetMultimode>
 8008856:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a23      	ldr	r2, [pc, #140]	; (80088ec <ADC_Enable+0x108>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d002      	beq.n	8008868 <ADC_Enable+0x84>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	e000      	b.n	800886a <ADC_Enable+0x86>
 8008868:	4b1f      	ldr	r3, [pc, #124]	; (80088e8 <ADC_Enable+0x104>)
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6812      	ldr	r2, [r2, #0]
 800886e:	4293      	cmp	r3, r2
 8008870:	d02c      	beq.n	80088cc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d130      	bne.n	80088da <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008878:	e028      	b.n	80088cc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe ff4a 	bl	8007718 <LL_ADC_IsEnabled>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d104      	bne.n	8008894 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe ff2e 	bl	80076f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008894:	f7fe fd4a 	bl	800732c <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d914      	bls.n	80088cc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d00d      	beq.n	80088cc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b4:	f043 0210 	orr.w	r2, r3, #16
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c0:	f043 0201 	orr.w	r2, r3, #1
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e007      	b.n	80088dc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d1cf      	bne.n	800887a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	8000003f 	.word	0x8000003f
 80088e8:	40022000 	.word	0x40022000
 80088ec:	40022100 	.word	0x40022100
 80088f0:	40022300 	.word	0x40022300
 80088f4:	58026300 	.word	0x58026300

080088f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008904:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800890e:	2b00      	cmp	r3, #0
 8008910:	d14b      	bne.n	80089aa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008916:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0308 	and.w	r3, r3, #8
 8008928:	2b00      	cmp	r3, #0
 800892a:	d021      	beq.n	8008970 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fdbf 	bl	80074b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d032      	beq.n	80089a2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d12b      	bne.n	80089a2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d11f      	bne.n	80089a2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008966:	f043 0201 	orr.w	r2, r3, #1
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	655a      	str	r2, [r3, #84]	; 0x54
 800896e:	e018      	b.n	80089a2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d111      	bne.n	80089a2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d105      	bne.n	80089a2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899a:	f043 0201 	orr.w	r2, r3, #1
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f7ff fba6 	bl	80080f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80089a8:	e00e      	b.n	80089c8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ae:	f003 0310 	and.w	r3, r3, #16
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f7ff fbba 	bl	8008130 <HAL_ADC_ErrorCallback>
}
 80089bc:	e004      	b.n	80089c8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	4798      	blx	r3
}
 80089c8:	bf00      	nop
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff fb92 	bl	8008108 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80089e4:	bf00      	nop
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0a:	f043 0204 	orr.w	r2, r3, #4
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f7ff fb8c 	bl	8008130 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008a18:	bf00      	nop
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a7a      	ldr	r2, [pc, #488]	; (8008c18 <ADC_ConfigureBoostMode+0x1f8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d004      	beq.n	8008a3c <ADC_ConfigureBoostMode+0x1c>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a79      	ldr	r2, [pc, #484]	; (8008c1c <ADC_ConfigureBoostMode+0x1fc>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d109      	bne.n	8008a50 <ADC_ConfigureBoostMode+0x30>
 8008a3c:	4b78      	ldr	r3, [pc, #480]	; (8008c20 <ADC_ConfigureBoostMode+0x200>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bf14      	ite	ne
 8008a48:	2301      	movne	r3, #1
 8008a4a:	2300      	moveq	r3, #0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	e008      	b.n	8008a62 <ADC_ConfigureBoostMode+0x42>
 8008a50:	4b74      	ldr	r3, [pc, #464]	; (8008c24 <ADC_ConfigureBoostMode+0x204>)
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bf14      	ite	ne
 8008a5c:	2301      	movne	r3, #1
 8008a5e:	2300      	moveq	r3, #0
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d01c      	beq.n	8008aa0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008a66:	f004 ffe5 	bl	800da34 <HAL_RCC_GetHCLKFreq>
 8008a6a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a74:	d010      	beq.n	8008a98 <ADC_ConfigureBoostMode+0x78>
 8008a76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a7a:	d873      	bhi.n	8008b64 <ADC_ConfigureBoostMode+0x144>
 8008a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a80:	d002      	beq.n	8008a88 <ADC_ConfigureBoostMode+0x68>
 8008a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a86:	d16d      	bne.n	8008b64 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	0c1b      	lsrs	r3, r3, #16
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a94:	60fb      	str	r3, [r7, #12]
        break;
 8008a96:	e068      	b.n	8008b6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	089b      	lsrs	r3, r3, #2
 8008a9c:	60fb      	str	r3, [r7, #12]
        break;
 8008a9e:	e064      	b.n	8008b6a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008aa0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008aa4:	f04f 0100 	mov.w	r1, #0
 8008aa8:	f006 fa2a 	bl	800ef00 <HAL_RCCEx_GetPeriphCLKFreq>
 8008aac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008ab6:	d051      	beq.n	8008b5c <ADC_ConfigureBoostMode+0x13c>
 8008ab8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008abc:	d854      	bhi.n	8008b68 <ADC_ConfigureBoostMode+0x148>
 8008abe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008ac2:	d047      	beq.n	8008b54 <ADC_ConfigureBoostMode+0x134>
 8008ac4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008ac8:	d84e      	bhi.n	8008b68 <ADC_ConfigureBoostMode+0x148>
 8008aca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008ace:	d03d      	beq.n	8008b4c <ADC_ConfigureBoostMode+0x12c>
 8008ad0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008ad4:	d848      	bhi.n	8008b68 <ADC_ConfigureBoostMode+0x148>
 8008ad6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ada:	d033      	beq.n	8008b44 <ADC_ConfigureBoostMode+0x124>
 8008adc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ae0:	d842      	bhi.n	8008b68 <ADC_ConfigureBoostMode+0x148>
 8008ae2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008ae6:	d029      	beq.n	8008b3c <ADC_ConfigureBoostMode+0x11c>
 8008ae8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008aec:	d83c      	bhi.n	8008b68 <ADC_ConfigureBoostMode+0x148>
 8008aee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008af2:	d01a      	beq.n	8008b2a <ADC_ConfigureBoostMode+0x10a>
 8008af4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008af8:	d836      	bhi.n	8008b68 <ADC_ConfigureBoostMode+0x148>
 8008afa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008afe:	d014      	beq.n	8008b2a <ADC_ConfigureBoostMode+0x10a>
 8008b00:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008b04:	d830      	bhi.n	8008b68 <ADC_ConfigureBoostMode+0x148>
 8008b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b0a:	d00e      	beq.n	8008b2a <ADC_ConfigureBoostMode+0x10a>
 8008b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b10:	d82a      	bhi.n	8008b68 <ADC_ConfigureBoostMode+0x148>
 8008b12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b16:	d008      	beq.n	8008b2a <ADC_ConfigureBoostMode+0x10a>
 8008b18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b1c:	d824      	bhi.n	8008b68 <ADC_ConfigureBoostMode+0x148>
 8008b1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b22:	d002      	beq.n	8008b2a <ADC_ConfigureBoostMode+0x10a>
 8008b24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b28:	d11e      	bne.n	8008b68 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	0c9b      	lsrs	r3, r3, #18
 8008b30:	005b      	lsls	r3, r3, #1
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b38:	60fb      	str	r3, [r7, #12]
        break;
 8008b3a:	e016      	b.n	8008b6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	091b      	lsrs	r3, r3, #4
 8008b40:	60fb      	str	r3, [r7, #12]
        break;
 8008b42:	e012      	b.n	8008b6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	095b      	lsrs	r3, r3, #5
 8008b48:	60fb      	str	r3, [r7, #12]
        break;
 8008b4a:	e00e      	b.n	8008b6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	099b      	lsrs	r3, r3, #6
 8008b50:	60fb      	str	r3, [r7, #12]
        break;
 8008b52:	e00a      	b.n	8008b6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	09db      	lsrs	r3, r3, #7
 8008b58:	60fb      	str	r3, [r7, #12]
        break;
 8008b5a:	e006      	b.n	8008b6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	0a1b      	lsrs	r3, r3, #8
 8008b60:	60fb      	str	r3, [r7, #12]
        break;
 8008b62:	e002      	b.n	8008b6a <ADC_ConfigureBoostMode+0x14a>
        break;
 8008b64:	bf00      	nop
 8008b66:	e000      	b.n	8008b6a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8008b68:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8008b6a:	f7fe fc0f 	bl	800738c <HAL_GetREVID>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d815      	bhi.n	8008ba4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4a2b      	ldr	r2, [pc, #172]	; (8008c28 <ADC_ConfigureBoostMode+0x208>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d908      	bls.n	8008b92 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b8e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008b90:	e03e      	b.n	8008c10 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ba0:	609a      	str	r2, [r3, #8]
}
 8008ba2:	e035      	b.n	8008c10 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	4a1f      	ldr	r2, [pc, #124]	; (8008c2c <ADC_ConfigureBoostMode+0x20c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d808      	bhi.n	8008bc4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008bc0:	609a      	str	r2, [r3, #8]
}
 8008bc2:	e025      	b.n	8008c10 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4a1a      	ldr	r2, [pc, #104]	; (8008c30 <ADC_ConfigureBoostMode+0x210>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d80a      	bhi.n	8008be2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bde:	609a      	str	r2, [r3, #8]
}
 8008be0:	e016      	b.n	8008c10 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4a13      	ldr	r2, [pc, #76]	; (8008c34 <ADC_ConfigureBoostMode+0x214>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d80a      	bhi.n	8008c00 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bfc:	609a      	str	r2, [r3, #8]
}
 8008bfe:	e007      	b.n	8008c10 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689a      	ldr	r2, [r3, #8]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008c0e:	609a      	str	r2, [r3, #8]
}
 8008c10:	bf00      	nop
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	40022000 	.word	0x40022000
 8008c1c:	40022100 	.word	0x40022100
 8008c20:	40022300 	.word	0x40022300
 8008c24:	58026300 	.word	0x58026300
 8008c28:	01312d00 	.word	0x01312d00
 8008c2c:	005f5e10 	.word	0x005f5e10
 8008c30:	00bebc20 	.word	0x00bebc20
 8008c34:	017d7840 	.word	0x017d7840

08008c38 <LL_ADC_IsEnabled>:
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <LL_ADC_IsEnabled+0x18>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e000      	b.n	8008c52 <LL_ADC_IsEnabled+0x1a>
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <LL_ADC_REG_IsConversionOngoing>:
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d101      	bne.n	8008c76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e000      	b.n	8008c78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008ce8:	b590      	push	{r4, r7, lr}
 8008cea:	b09f      	sub	sp, #124	; 0x7c
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d101      	bne.n	8008d06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008d02:	2302      	movs	r3, #2
 8008d04:	e0be      	b.n	8008e84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008d12:	2300      	movs	r3, #0
 8008d14:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a5c      	ldr	r2, [pc, #368]	; (8008e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d102      	bne.n	8008d26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008d20:	4b5b      	ldr	r3, [pc, #364]	; (8008e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008d22:	60bb      	str	r3, [r7, #8]
 8008d24:	e001      	b.n	8008d2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008d26:	2300      	movs	r3, #0
 8008d28:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10b      	bne.n	8008d48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d34:	f043 0220 	orr.w	r2, r3, #32
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e09d      	b.n	8008e84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff ff87 	bl	8008c5e <LL_ADC_REG_IsConversionOngoing>
 8008d50:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7ff ff81 	bl	8008c5e <LL_ADC_REG_IsConversionOngoing>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d17f      	bne.n	8008e62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d17c      	bne.n	8008e62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a47      	ldr	r2, [pc, #284]	; (8008e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d004      	beq.n	8008d7c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a46      	ldr	r2, [pc, #280]	; (8008e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d101      	bne.n	8008d80 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8008d7c:	4b45      	ldr	r3, [pc, #276]	; (8008e94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008d7e:	e000      	b.n	8008d82 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008d80:	4b45      	ldr	r3, [pc, #276]	; (8008e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008d82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d039      	beq.n	8008e00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d9c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a3a      	ldr	r2, [pc, #232]	; (8008e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d004      	beq.n	8008db2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a38      	ldr	r2, [pc, #224]	; (8008e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d10e      	bne.n	8008dd0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008db2:	4836      	ldr	r0, [pc, #216]	; (8008e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008db4:	f7ff ff40 	bl	8008c38 <LL_ADC_IsEnabled>
 8008db8:	4604      	mov	r4, r0
 8008dba:	4835      	ldr	r0, [pc, #212]	; (8008e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008dbc:	f7ff ff3c 	bl	8008c38 <LL_ADC_IsEnabled>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	4323      	orrs	r3, r4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	bf0c      	ite	eq
 8008dc8:	2301      	moveq	r3, #1
 8008dca:	2300      	movne	r3, #0
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	e008      	b.n	8008de2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8008dd0:	4832      	ldr	r0, [pc, #200]	; (8008e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008dd2:	f7ff ff31 	bl	8008c38 <LL_ADC_IsEnabled>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	bf0c      	ite	eq
 8008ddc:	2301      	moveq	r3, #1
 8008dde:	2300      	movne	r3, #0
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d047      	beq.n	8008e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008de8:	689a      	ldr	r2, [r3, #8]
 8008dea:	4b2d      	ldr	r3, [pc, #180]	; (8008ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008dec:	4013      	ands	r3, r2
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	6811      	ldr	r1, [r2, #0]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	6892      	ldr	r2, [r2, #8]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	431a      	orrs	r2, r3
 8008dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dfc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008dfe:	e03a      	b.n	8008e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a1e      	ldr	r2, [pc, #120]	; (8008e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d004      	beq.n	8008e20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a1d      	ldr	r2, [pc, #116]	; (8008e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d10e      	bne.n	8008e3e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8008e20:	481a      	ldr	r0, [pc, #104]	; (8008e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008e22:	f7ff ff09 	bl	8008c38 <LL_ADC_IsEnabled>
 8008e26:	4604      	mov	r4, r0
 8008e28:	4819      	ldr	r0, [pc, #100]	; (8008e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008e2a:	f7ff ff05 	bl	8008c38 <LL_ADC_IsEnabled>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	4323      	orrs	r3, r4
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	bf0c      	ite	eq
 8008e36:	2301      	moveq	r3, #1
 8008e38:	2300      	movne	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	e008      	b.n	8008e50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008e3e:	4817      	ldr	r0, [pc, #92]	; (8008e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008e40:	f7ff fefa 	bl	8008c38 <LL_ADC_IsEnabled>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	bf0c      	ite	eq
 8008e4a:	2301      	moveq	r3, #1
 8008e4c:	2300      	movne	r3, #0
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d010      	beq.n	8008e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	4b11      	ldr	r3, [pc, #68]	; (8008ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e5e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e60:	e009      	b.n	8008e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e66:	f043 0220 	orr.w	r2, r3, #32
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008e74:	e000      	b.n	8008e78 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008e80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	377c      	adds	r7, #124	; 0x7c
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd90      	pop	{r4, r7, pc}
 8008e8c:	40022000 	.word	0x40022000
 8008e90:	40022100 	.word	0x40022100
 8008e94:	40022300 	.word	0x40022300
 8008e98:	58026300 	.word	0x58026300
 8008e9c:	58026000 	.word	0x58026000
 8008ea0:	fffff0e0 	.word	0xfffff0e0

08008ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f003 0307 	and.w	r3, r3, #7
 8008eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008eb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008ecc:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ed2:	4a04      	ldr	r2, [pc, #16]	; (8008ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	60d3      	str	r3, [r2, #12]
}
 8008ed8:	bf00      	nop
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	e000ed00 	.word	0xe000ed00
 8008ee8:	05fa0000 	.word	0x05fa0000

08008eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ef0:	4b04      	ldr	r3, [pc, #16]	; (8008f04 <__NVIC_GetPriorityGrouping+0x18>)
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	0a1b      	lsrs	r3, r3, #8
 8008ef6:	f003 0307 	and.w	r3, r3, #7
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	e000ed00 	.word	0xe000ed00

08008f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	db0b      	blt.n	8008f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f1a:	88fb      	ldrh	r3, [r7, #6]
 8008f1c:	f003 021f 	and.w	r2, r3, #31
 8008f20:	4907      	ldr	r1, [pc, #28]	; (8008f40 <__NVIC_EnableIRQ+0x38>)
 8008f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f26:	095b      	lsrs	r3, r3, #5
 8008f28:	2001      	movs	r0, #1
 8008f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8008f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008f32:	bf00      	nop
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	e000e100 	.word	0xe000e100

08008f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	db0a      	blt.n	8008f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	490c      	ldr	r1, [pc, #48]	; (8008f90 <__NVIC_SetPriority+0x4c>)
 8008f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f62:	0112      	lsls	r2, r2, #4
 8008f64:	b2d2      	uxtb	r2, r2
 8008f66:	440b      	add	r3, r1
 8008f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008f6c:	e00a      	b.n	8008f84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	4908      	ldr	r1, [pc, #32]	; (8008f94 <__NVIC_SetPriority+0x50>)
 8008f74:	88fb      	ldrh	r3, [r7, #6]
 8008f76:	f003 030f 	and.w	r3, r3, #15
 8008f7a:	3b04      	subs	r3, #4
 8008f7c:	0112      	lsls	r2, r2, #4
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	440b      	add	r3, r1
 8008f82:	761a      	strb	r2, [r3, #24]
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	e000e100 	.word	0xe000e100
 8008f94:	e000ed00 	.word	0xe000ed00

08008f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b089      	sub	sp, #36	; 0x24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	f1c3 0307 	rsb	r3, r3, #7
 8008fb2:	2b04      	cmp	r3, #4
 8008fb4:	bf28      	it	cs
 8008fb6:	2304      	movcs	r3, #4
 8008fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	2b06      	cmp	r3, #6
 8008fc0:	d902      	bls.n	8008fc8 <NVIC_EncodePriority+0x30>
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	3b03      	subs	r3, #3
 8008fc6:	e000      	b.n	8008fca <NVIC_EncodePriority+0x32>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd6:	43da      	mvns	r2, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	401a      	ands	r2, r3
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fea:	43d9      	mvns	r1, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ff0:	4313      	orrs	r3, r2
         );
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3724      	adds	r7, #36	; 0x24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
	...

08009000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3b01      	subs	r3, #1
 800900c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009010:	d301      	bcc.n	8009016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009012:	2301      	movs	r3, #1
 8009014:	e00f      	b.n	8009036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009016:	4a0a      	ldr	r2, [pc, #40]	; (8009040 <SysTick_Config+0x40>)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3b01      	subs	r3, #1
 800901c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800901e:	210f      	movs	r1, #15
 8009020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009024:	f7ff ff8e 	bl	8008f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009028:	4b05      	ldr	r3, [pc, #20]	; (8009040 <SysTick_Config+0x40>)
 800902a:	2200      	movs	r2, #0
 800902c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800902e:	4b04      	ldr	r3, [pc, #16]	; (8009040 <SysTick_Config+0x40>)
 8009030:	2207      	movs	r2, #7
 8009032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	e000e010 	.word	0xe000e010

08009044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff ff29 	bl	8008ea4 <__NVIC_SetPriorityGrouping>
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b086      	sub	sp, #24
 800905e:	af00      	add	r7, sp, #0
 8009060:	4603      	mov	r3, r0
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
 8009066:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009068:	f7ff ff40 	bl	8008eec <__NVIC_GetPriorityGrouping>
 800906c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	68b9      	ldr	r1, [r7, #8]
 8009072:	6978      	ldr	r0, [r7, #20]
 8009074:	f7ff ff90 	bl	8008f98 <NVIC_EncodePriority>
 8009078:	4602      	mov	r2, r0
 800907a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800907e:	4611      	mov	r1, r2
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff ff5f 	bl	8008f44 <__NVIC_SetPriority>
}
 8009086:	bf00      	nop
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	4603      	mov	r3, r0
 8009096:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff ff33 	bl	8008f08 <__NVIC_EnableIRQ>
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff ffa4 	bl	8009000 <SysTick_Config>
 80090b8:	4603      	mov	r3, r0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80090cc:	f7fe f92e 	bl	800732c <HAL_GetTick>
 80090d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e316      	b.n	800970a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a66      	ldr	r2, [pc, #408]	; (800927c <HAL_DMA_Init+0x1b8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d04a      	beq.n	800917c <HAL_DMA_Init+0xb8>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a65      	ldr	r2, [pc, #404]	; (8009280 <HAL_DMA_Init+0x1bc>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d045      	beq.n	800917c <HAL_DMA_Init+0xb8>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a63      	ldr	r2, [pc, #396]	; (8009284 <HAL_DMA_Init+0x1c0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d040      	beq.n	800917c <HAL_DMA_Init+0xb8>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a62      	ldr	r2, [pc, #392]	; (8009288 <HAL_DMA_Init+0x1c4>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d03b      	beq.n	800917c <HAL_DMA_Init+0xb8>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a60      	ldr	r2, [pc, #384]	; (800928c <HAL_DMA_Init+0x1c8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d036      	beq.n	800917c <HAL_DMA_Init+0xb8>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a5f      	ldr	r2, [pc, #380]	; (8009290 <HAL_DMA_Init+0x1cc>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d031      	beq.n	800917c <HAL_DMA_Init+0xb8>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a5d      	ldr	r2, [pc, #372]	; (8009294 <HAL_DMA_Init+0x1d0>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d02c      	beq.n	800917c <HAL_DMA_Init+0xb8>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a5c      	ldr	r2, [pc, #368]	; (8009298 <HAL_DMA_Init+0x1d4>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d027      	beq.n	800917c <HAL_DMA_Init+0xb8>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a5a      	ldr	r2, [pc, #360]	; (800929c <HAL_DMA_Init+0x1d8>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d022      	beq.n	800917c <HAL_DMA_Init+0xb8>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a59      	ldr	r2, [pc, #356]	; (80092a0 <HAL_DMA_Init+0x1dc>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d01d      	beq.n	800917c <HAL_DMA_Init+0xb8>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a57      	ldr	r2, [pc, #348]	; (80092a4 <HAL_DMA_Init+0x1e0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d018      	beq.n	800917c <HAL_DMA_Init+0xb8>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a56      	ldr	r2, [pc, #344]	; (80092a8 <HAL_DMA_Init+0x1e4>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d013      	beq.n	800917c <HAL_DMA_Init+0xb8>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a54      	ldr	r2, [pc, #336]	; (80092ac <HAL_DMA_Init+0x1e8>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d00e      	beq.n	800917c <HAL_DMA_Init+0xb8>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a53      	ldr	r2, [pc, #332]	; (80092b0 <HAL_DMA_Init+0x1ec>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d009      	beq.n	800917c <HAL_DMA_Init+0xb8>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a51      	ldr	r2, [pc, #324]	; (80092b4 <HAL_DMA_Init+0x1f0>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d004      	beq.n	800917c <HAL_DMA_Init+0xb8>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a50      	ldr	r2, [pc, #320]	; (80092b8 <HAL_DMA_Init+0x1f4>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d101      	bne.n	8009180 <HAL_DMA_Init+0xbc>
 800917c:	2301      	movs	r3, #1
 800917e:	e000      	b.n	8009182 <HAL_DMA_Init+0xbe>
 8009180:	2300      	movs	r3, #0
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 813b 	beq.w	80093fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a37      	ldr	r2, [pc, #220]	; (800927c <HAL_DMA_Init+0x1b8>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d04a      	beq.n	8009238 <HAL_DMA_Init+0x174>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a36      	ldr	r2, [pc, #216]	; (8009280 <HAL_DMA_Init+0x1bc>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d045      	beq.n	8009238 <HAL_DMA_Init+0x174>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a34      	ldr	r2, [pc, #208]	; (8009284 <HAL_DMA_Init+0x1c0>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d040      	beq.n	8009238 <HAL_DMA_Init+0x174>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a33      	ldr	r2, [pc, #204]	; (8009288 <HAL_DMA_Init+0x1c4>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d03b      	beq.n	8009238 <HAL_DMA_Init+0x174>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a31      	ldr	r2, [pc, #196]	; (800928c <HAL_DMA_Init+0x1c8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d036      	beq.n	8009238 <HAL_DMA_Init+0x174>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a30      	ldr	r2, [pc, #192]	; (8009290 <HAL_DMA_Init+0x1cc>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d031      	beq.n	8009238 <HAL_DMA_Init+0x174>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a2e      	ldr	r2, [pc, #184]	; (8009294 <HAL_DMA_Init+0x1d0>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d02c      	beq.n	8009238 <HAL_DMA_Init+0x174>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a2d      	ldr	r2, [pc, #180]	; (8009298 <HAL_DMA_Init+0x1d4>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d027      	beq.n	8009238 <HAL_DMA_Init+0x174>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a2b      	ldr	r2, [pc, #172]	; (800929c <HAL_DMA_Init+0x1d8>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d022      	beq.n	8009238 <HAL_DMA_Init+0x174>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a2a      	ldr	r2, [pc, #168]	; (80092a0 <HAL_DMA_Init+0x1dc>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d01d      	beq.n	8009238 <HAL_DMA_Init+0x174>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a28      	ldr	r2, [pc, #160]	; (80092a4 <HAL_DMA_Init+0x1e0>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d018      	beq.n	8009238 <HAL_DMA_Init+0x174>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a27      	ldr	r2, [pc, #156]	; (80092a8 <HAL_DMA_Init+0x1e4>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d013      	beq.n	8009238 <HAL_DMA_Init+0x174>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a25      	ldr	r2, [pc, #148]	; (80092ac <HAL_DMA_Init+0x1e8>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00e      	beq.n	8009238 <HAL_DMA_Init+0x174>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a24      	ldr	r2, [pc, #144]	; (80092b0 <HAL_DMA_Init+0x1ec>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d009      	beq.n	8009238 <HAL_DMA_Init+0x174>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a22      	ldr	r2, [pc, #136]	; (80092b4 <HAL_DMA_Init+0x1f0>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d004      	beq.n	8009238 <HAL_DMA_Init+0x174>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a21      	ldr	r2, [pc, #132]	; (80092b8 <HAL_DMA_Init+0x1f4>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d108      	bne.n	800924a <HAL_DMA_Init+0x186>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 0201 	bic.w	r2, r2, #1
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	e007      	b.n	800925a <HAL_DMA_Init+0x196>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0201 	bic.w	r2, r2, #1
 8009258:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800925a:	e02f      	b.n	80092bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800925c:	f7fe f866 	bl	800732c <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b05      	cmp	r3, #5
 8009268:	d928      	bls.n	80092bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2220      	movs	r2, #32
 800926e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2203      	movs	r2, #3
 8009274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e246      	b.n	800970a <HAL_DMA_Init+0x646>
 800927c:	40020010 	.word	0x40020010
 8009280:	40020028 	.word	0x40020028
 8009284:	40020040 	.word	0x40020040
 8009288:	40020058 	.word	0x40020058
 800928c:	40020070 	.word	0x40020070
 8009290:	40020088 	.word	0x40020088
 8009294:	400200a0 	.word	0x400200a0
 8009298:	400200b8 	.word	0x400200b8
 800929c:	40020410 	.word	0x40020410
 80092a0:	40020428 	.word	0x40020428
 80092a4:	40020440 	.word	0x40020440
 80092a8:	40020458 	.word	0x40020458
 80092ac:	40020470 	.word	0x40020470
 80092b0:	40020488 	.word	0x40020488
 80092b4:	400204a0 	.word	0x400204a0
 80092b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1c8      	bne.n	800925c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	4b83      	ldr	r3, [pc, #524]	; (80094e4 <HAL_DMA_Init+0x420>)
 80092d6:	4013      	ands	r3, r2
 80092d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80092e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	4313      	orrs	r3, r2
 8009306:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930c:	2b04      	cmp	r3, #4
 800930e:	d107      	bne.n	8009320 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009318:	4313      	orrs	r3, r2
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	4313      	orrs	r3, r2
 800931e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009320:	4b71      	ldr	r3, [pc, #452]	; (80094e8 <HAL_DMA_Init+0x424>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	4b71      	ldr	r3, [pc, #452]	; (80094ec <HAL_DMA_Init+0x428>)
 8009326:	4013      	ands	r3, r2
 8009328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800932c:	d328      	bcc.n	8009380 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2b28      	cmp	r3, #40	; 0x28
 8009334:	d903      	bls.n	800933e <HAL_DMA_Init+0x27a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2b2e      	cmp	r3, #46	; 0x2e
 800933c:	d917      	bls.n	800936e <HAL_DMA_Init+0x2aa>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	2b3e      	cmp	r3, #62	; 0x3e
 8009344:	d903      	bls.n	800934e <HAL_DMA_Init+0x28a>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	2b42      	cmp	r3, #66	; 0x42
 800934c:	d90f      	bls.n	800936e <HAL_DMA_Init+0x2aa>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	2b46      	cmp	r3, #70	; 0x46
 8009354:	d903      	bls.n	800935e <HAL_DMA_Init+0x29a>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2b48      	cmp	r3, #72	; 0x48
 800935c:	d907      	bls.n	800936e <HAL_DMA_Init+0x2aa>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	2b4e      	cmp	r3, #78	; 0x4e
 8009364:	d905      	bls.n	8009372 <HAL_DMA_Init+0x2ae>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	2b52      	cmp	r3, #82	; 0x52
 800936c:	d801      	bhi.n	8009372 <HAL_DMA_Init+0x2ae>
 800936e:	2301      	movs	r3, #1
 8009370:	e000      	b.n	8009374 <HAL_DMA_Init+0x2b0>
 8009372:	2300      	movs	r3, #0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800937e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f023 0307 	bic.w	r3, r3, #7
 8009396:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	4313      	orrs	r3, r2
 80093a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	d117      	bne.n	80093da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00e      	beq.n	80093da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f002 fb33 	bl	800ba28 <DMA_CheckFifoParam>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d008      	beq.n	80093da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2240      	movs	r2, #64	; 0x40
 80093cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e197      	b.n	800970a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f002 fa6e 	bl	800b8c4 <DMA_CalcBaseAndBitshift>
 80093e8:	4603      	mov	r3, r0
 80093ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f0:	f003 031f 	and.w	r3, r3, #31
 80093f4:	223f      	movs	r2, #63	; 0x3f
 80093f6:	409a      	lsls	r2, r3
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	609a      	str	r2, [r3, #8]
 80093fc:	e0cd      	b.n	800959a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a3b      	ldr	r2, [pc, #236]	; (80094f0 <HAL_DMA_Init+0x42c>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d022      	beq.n	800944e <HAL_DMA_Init+0x38a>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a39      	ldr	r2, [pc, #228]	; (80094f4 <HAL_DMA_Init+0x430>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d01d      	beq.n	800944e <HAL_DMA_Init+0x38a>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a38      	ldr	r2, [pc, #224]	; (80094f8 <HAL_DMA_Init+0x434>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d018      	beq.n	800944e <HAL_DMA_Init+0x38a>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a36      	ldr	r2, [pc, #216]	; (80094fc <HAL_DMA_Init+0x438>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d013      	beq.n	800944e <HAL_DMA_Init+0x38a>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a35      	ldr	r2, [pc, #212]	; (8009500 <HAL_DMA_Init+0x43c>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00e      	beq.n	800944e <HAL_DMA_Init+0x38a>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a33      	ldr	r2, [pc, #204]	; (8009504 <HAL_DMA_Init+0x440>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d009      	beq.n	800944e <HAL_DMA_Init+0x38a>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a32      	ldr	r2, [pc, #200]	; (8009508 <HAL_DMA_Init+0x444>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d004      	beq.n	800944e <HAL_DMA_Init+0x38a>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a30      	ldr	r2, [pc, #192]	; (800950c <HAL_DMA_Init+0x448>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d101      	bne.n	8009452 <HAL_DMA_Init+0x38e>
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <HAL_DMA_Init+0x390>
 8009452:	2300      	movs	r3, #0
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 8097 	beq.w	8009588 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a24      	ldr	r2, [pc, #144]	; (80094f0 <HAL_DMA_Init+0x42c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d021      	beq.n	80094a8 <HAL_DMA_Init+0x3e4>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a22      	ldr	r2, [pc, #136]	; (80094f4 <HAL_DMA_Init+0x430>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d01c      	beq.n	80094a8 <HAL_DMA_Init+0x3e4>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a21      	ldr	r2, [pc, #132]	; (80094f8 <HAL_DMA_Init+0x434>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d017      	beq.n	80094a8 <HAL_DMA_Init+0x3e4>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1f      	ldr	r2, [pc, #124]	; (80094fc <HAL_DMA_Init+0x438>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d012      	beq.n	80094a8 <HAL_DMA_Init+0x3e4>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a1e      	ldr	r2, [pc, #120]	; (8009500 <HAL_DMA_Init+0x43c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00d      	beq.n	80094a8 <HAL_DMA_Init+0x3e4>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a1c      	ldr	r2, [pc, #112]	; (8009504 <HAL_DMA_Init+0x440>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d008      	beq.n	80094a8 <HAL_DMA_Init+0x3e4>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a1b      	ldr	r2, [pc, #108]	; (8009508 <HAL_DMA_Init+0x444>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d003      	beq.n	80094a8 <HAL_DMA_Init+0x3e4>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a19      	ldr	r2, [pc, #100]	; (800950c <HAL_DMA_Init+0x448>)
 80094a6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	4b13      	ldr	r3, [pc, #76]	; (8009510 <HAL_DMA_Init+0x44c>)
 80094c4:	4013      	ands	r3, r2
 80094c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	2b40      	cmp	r3, #64	; 0x40
 80094ce:	d021      	beq.n	8009514 <HAL_DMA_Init+0x450>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	2b80      	cmp	r3, #128	; 0x80
 80094d6:	d102      	bne.n	80094de <HAL_DMA_Init+0x41a>
 80094d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80094dc:	e01b      	b.n	8009516 <HAL_DMA_Init+0x452>
 80094de:	2300      	movs	r3, #0
 80094e0:	e019      	b.n	8009516 <HAL_DMA_Init+0x452>
 80094e2:	bf00      	nop
 80094e4:	fe10803f 	.word	0xfe10803f
 80094e8:	5c001000 	.word	0x5c001000
 80094ec:	ffff0000 	.word	0xffff0000
 80094f0:	58025408 	.word	0x58025408
 80094f4:	5802541c 	.word	0x5802541c
 80094f8:	58025430 	.word	0x58025430
 80094fc:	58025444 	.word	0x58025444
 8009500:	58025458 	.word	0x58025458
 8009504:	5802546c 	.word	0x5802546c
 8009508:	58025480 	.word	0x58025480
 800950c:	58025494 	.word	0x58025494
 8009510:	fffe000f 	.word	0xfffe000f
 8009514:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	68d2      	ldr	r2, [r2, #12]
 800951a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800951c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009524:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800952c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009534:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800953c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009544:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	4313      	orrs	r3, r2
 800954a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	4b6e      	ldr	r3, [pc, #440]	; (8009714 <HAL_DMA_Init+0x650>)
 800955c:	4413      	add	r3, r2
 800955e:	4a6e      	ldr	r2, [pc, #440]	; (8009718 <HAL_DMA_Init+0x654>)
 8009560:	fba2 2303 	umull	r2, r3, r2, r3
 8009564:	091b      	lsrs	r3, r3, #4
 8009566:	009a      	lsls	r2, r3, #2
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f002 f9a9 	bl	800b8c4 <DMA_CalcBaseAndBitshift>
 8009572:	4603      	mov	r3, r0
 8009574:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800957a:	f003 031f 	and.w	r3, r3, #31
 800957e:	2201      	movs	r2, #1
 8009580:	409a      	lsls	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	605a      	str	r2, [r3, #4]
 8009586:	e008      	b.n	800959a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2240      	movs	r2, #64	; 0x40
 800958c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2203      	movs	r2, #3
 8009592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e0b7      	b.n	800970a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a5f      	ldr	r2, [pc, #380]	; (800971c <HAL_DMA_Init+0x658>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d072      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a5d      	ldr	r2, [pc, #372]	; (8009720 <HAL_DMA_Init+0x65c>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d06d      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a5c      	ldr	r2, [pc, #368]	; (8009724 <HAL_DMA_Init+0x660>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d068      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a5a      	ldr	r2, [pc, #360]	; (8009728 <HAL_DMA_Init+0x664>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d063      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a59      	ldr	r2, [pc, #356]	; (800972c <HAL_DMA_Init+0x668>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d05e      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a57      	ldr	r2, [pc, #348]	; (8009730 <HAL_DMA_Init+0x66c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d059      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a56      	ldr	r2, [pc, #344]	; (8009734 <HAL_DMA_Init+0x670>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d054      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a54      	ldr	r2, [pc, #336]	; (8009738 <HAL_DMA_Init+0x674>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d04f      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a53      	ldr	r2, [pc, #332]	; (800973c <HAL_DMA_Init+0x678>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d04a      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a51      	ldr	r2, [pc, #324]	; (8009740 <HAL_DMA_Init+0x67c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d045      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a50      	ldr	r2, [pc, #320]	; (8009744 <HAL_DMA_Init+0x680>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d040      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a4e      	ldr	r2, [pc, #312]	; (8009748 <HAL_DMA_Init+0x684>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d03b      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a4d      	ldr	r2, [pc, #308]	; (800974c <HAL_DMA_Init+0x688>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d036      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a4b      	ldr	r2, [pc, #300]	; (8009750 <HAL_DMA_Init+0x68c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d031      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a4a      	ldr	r2, [pc, #296]	; (8009754 <HAL_DMA_Init+0x690>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d02c      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a48      	ldr	r2, [pc, #288]	; (8009758 <HAL_DMA_Init+0x694>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d027      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a47      	ldr	r2, [pc, #284]	; (800975c <HAL_DMA_Init+0x698>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d022      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a45      	ldr	r2, [pc, #276]	; (8009760 <HAL_DMA_Init+0x69c>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d01d      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a44      	ldr	r2, [pc, #272]	; (8009764 <HAL_DMA_Init+0x6a0>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d018      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a42      	ldr	r2, [pc, #264]	; (8009768 <HAL_DMA_Init+0x6a4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d013      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a41      	ldr	r2, [pc, #260]	; (800976c <HAL_DMA_Init+0x6a8>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d00e      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a3f      	ldr	r2, [pc, #252]	; (8009770 <HAL_DMA_Init+0x6ac>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d009      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a3e      	ldr	r2, [pc, #248]	; (8009774 <HAL_DMA_Init+0x6b0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d004      	beq.n	800968a <HAL_DMA_Init+0x5c6>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a3c      	ldr	r2, [pc, #240]	; (8009778 <HAL_DMA_Init+0x6b4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d101      	bne.n	800968e <HAL_DMA_Init+0x5ca>
 800968a:	2301      	movs	r3, #1
 800968c:	e000      	b.n	8009690 <HAL_DMA_Init+0x5cc>
 800968e:	2300      	movs	r3, #0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d032      	beq.n	80096fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f002 fa43 	bl	800bb20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	2b80      	cmp	r3, #128	; 0x80
 80096a0:	d102      	bne.n	80096a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096b0:	b2d2      	uxtb	r2, r2
 80096b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80096bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d010      	beq.n	80096e8 <HAL_DMA_Init+0x624>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	2b08      	cmp	r3, #8
 80096cc:	d80c      	bhi.n	80096e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f002 fac0 	bl	800bc54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	e008      	b.n	80096fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	a7fdabf8 	.word	0xa7fdabf8
 8009718:	cccccccd 	.word	0xcccccccd
 800971c:	40020010 	.word	0x40020010
 8009720:	40020028 	.word	0x40020028
 8009724:	40020040 	.word	0x40020040
 8009728:	40020058 	.word	0x40020058
 800972c:	40020070 	.word	0x40020070
 8009730:	40020088 	.word	0x40020088
 8009734:	400200a0 	.word	0x400200a0
 8009738:	400200b8 	.word	0x400200b8
 800973c:	40020410 	.word	0x40020410
 8009740:	40020428 	.word	0x40020428
 8009744:	40020440 	.word	0x40020440
 8009748:	40020458 	.word	0x40020458
 800974c:	40020470 	.word	0x40020470
 8009750:	40020488 	.word	0x40020488
 8009754:	400204a0 	.word	0x400204a0
 8009758:	400204b8 	.word	0x400204b8
 800975c:	58025408 	.word	0x58025408
 8009760:	5802541c 	.word	0x5802541c
 8009764:	58025430 	.word	0x58025430
 8009768:	58025444 	.word	0x58025444
 800976c:	58025458 	.word	0x58025458
 8009770:	5802546c 	.word	0x5802546c
 8009774:	58025480 	.word	0x58025480
 8009778:	58025494 	.word	0x58025494

0800977c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e226      	b.n	8009be6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d101      	bne.n	80097a6 <HAL_DMA_Start_IT+0x2a>
 80097a2:	2302      	movs	r3, #2
 80097a4:	e21f      	b.n	8009be6 <HAL_DMA_Start_IT+0x46a>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	f040 820a 	bne.w	8009bd0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2202      	movs	r2, #2
 80097c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a68      	ldr	r2, [pc, #416]	; (8009970 <HAL_DMA_Start_IT+0x1f4>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d04a      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a66      	ldr	r2, [pc, #408]	; (8009974 <HAL_DMA_Start_IT+0x1f8>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d045      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a65      	ldr	r2, [pc, #404]	; (8009978 <HAL_DMA_Start_IT+0x1fc>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d040      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a63      	ldr	r2, [pc, #396]	; (800997c <HAL_DMA_Start_IT+0x200>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d03b      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a62      	ldr	r2, [pc, #392]	; (8009980 <HAL_DMA_Start_IT+0x204>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d036      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a60      	ldr	r2, [pc, #384]	; (8009984 <HAL_DMA_Start_IT+0x208>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d031      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a5f      	ldr	r2, [pc, #380]	; (8009988 <HAL_DMA_Start_IT+0x20c>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d02c      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a5d      	ldr	r2, [pc, #372]	; (800998c <HAL_DMA_Start_IT+0x210>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d027      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a5c      	ldr	r2, [pc, #368]	; (8009990 <HAL_DMA_Start_IT+0x214>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d022      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a5a      	ldr	r2, [pc, #360]	; (8009994 <HAL_DMA_Start_IT+0x218>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d01d      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a59      	ldr	r2, [pc, #356]	; (8009998 <HAL_DMA_Start_IT+0x21c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d018      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a57      	ldr	r2, [pc, #348]	; (800999c <HAL_DMA_Start_IT+0x220>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d013      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a56      	ldr	r2, [pc, #344]	; (80099a0 <HAL_DMA_Start_IT+0x224>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d00e      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a54      	ldr	r2, [pc, #336]	; (80099a4 <HAL_DMA_Start_IT+0x228>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d009      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a53      	ldr	r2, [pc, #332]	; (80099a8 <HAL_DMA_Start_IT+0x22c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d004      	beq.n	800986a <HAL_DMA_Start_IT+0xee>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a51      	ldr	r2, [pc, #324]	; (80099ac <HAL_DMA_Start_IT+0x230>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d108      	bne.n	800987c <HAL_DMA_Start_IT+0x100>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 0201 	bic.w	r2, r2, #1
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	e007      	b.n	800988c <HAL_DMA_Start_IT+0x110>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0201 	bic.w	r2, r2, #1
 800988a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	68b9      	ldr	r1, [r7, #8]
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f001 fe6a 	bl	800b56c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a34      	ldr	r2, [pc, #208]	; (8009970 <HAL_DMA_Start_IT+0x1f4>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d04a      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a33      	ldr	r2, [pc, #204]	; (8009974 <HAL_DMA_Start_IT+0x1f8>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d045      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a31      	ldr	r2, [pc, #196]	; (8009978 <HAL_DMA_Start_IT+0x1fc>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d040      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a30      	ldr	r2, [pc, #192]	; (800997c <HAL_DMA_Start_IT+0x200>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d03b      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a2e      	ldr	r2, [pc, #184]	; (8009980 <HAL_DMA_Start_IT+0x204>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d036      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a2d      	ldr	r2, [pc, #180]	; (8009984 <HAL_DMA_Start_IT+0x208>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d031      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a2b      	ldr	r2, [pc, #172]	; (8009988 <HAL_DMA_Start_IT+0x20c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d02c      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a2a      	ldr	r2, [pc, #168]	; (800998c <HAL_DMA_Start_IT+0x210>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d027      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a28      	ldr	r2, [pc, #160]	; (8009990 <HAL_DMA_Start_IT+0x214>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d022      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a27      	ldr	r2, [pc, #156]	; (8009994 <HAL_DMA_Start_IT+0x218>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d01d      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a25      	ldr	r2, [pc, #148]	; (8009998 <HAL_DMA_Start_IT+0x21c>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d018      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a24      	ldr	r2, [pc, #144]	; (800999c <HAL_DMA_Start_IT+0x220>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d013      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a22      	ldr	r2, [pc, #136]	; (80099a0 <HAL_DMA_Start_IT+0x224>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d00e      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a21      	ldr	r2, [pc, #132]	; (80099a4 <HAL_DMA_Start_IT+0x228>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d009      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a1f      	ldr	r2, [pc, #124]	; (80099a8 <HAL_DMA_Start_IT+0x22c>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d004      	beq.n	8009938 <HAL_DMA_Start_IT+0x1bc>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a1e      	ldr	r2, [pc, #120]	; (80099ac <HAL_DMA_Start_IT+0x230>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d101      	bne.n	800993c <HAL_DMA_Start_IT+0x1c0>
 8009938:	2301      	movs	r3, #1
 800993a:	e000      	b.n	800993e <HAL_DMA_Start_IT+0x1c2>
 800993c:	2300      	movs	r3, #0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d036      	beq.n	80099b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f023 021e 	bic.w	r2, r3, #30
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f042 0216 	orr.w	r2, r2, #22
 8009954:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995a:	2b00      	cmp	r3, #0
 800995c:	d03e      	beq.n	80099dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f042 0208 	orr.w	r2, r2, #8
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e035      	b.n	80099dc <HAL_DMA_Start_IT+0x260>
 8009970:	40020010 	.word	0x40020010
 8009974:	40020028 	.word	0x40020028
 8009978:	40020040 	.word	0x40020040
 800997c:	40020058 	.word	0x40020058
 8009980:	40020070 	.word	0x40020070
 8009984:	40020088 	.word	0x40020088
 8009988:	400200a0 	.word	0x400200a0
 800998c:	400200b8 	.word	0x400200b8
 8009990:	40020410 	.word	0x40020410
 8009994:	40020428 	.word	0x40020428
 8009998:	40020440 	.word	0x40020440
 800999c:	40020458 	.word	0x40020458
 80099a0:	40020470 	.word	0x40020470
 80099a4:	40020488 	.word	0x40020488
 80099a8:	400204a0 	.word	0x400204a0
 80099ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f023 020e 	bic.w	r2, r3, #14
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f042 020a 	orr.w	r2, r2, #10
 80099c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d007      	beq.n	80099dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f042 0204 	orr.w	r2, r2, #4
 80099da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a83      	ldr	r2, [pc, #524]	; (8009bf0 <HAL_DMA_Start_IT+0x474>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d072      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a82      	ldr	r2, [pc, #520]	; (8009bf4 <HAL_DMA_Start_IT+0x478>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d06d      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a80      	ldr	r2, [pc, #512]	; (8009bf8 <HAL_DMA_Start_IT+0x47c>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d068      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a7f      	ldr	r2, [pc, #508]	; (8009bfc <HAL_DMA_Start_IT+0x480>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d063      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a7d      	ldr	r2, [pc, #500]	; (8009c00 <HAL_DMA_Start_IT+0x484>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d05e      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a7c      	ldr	r2, [pc, #496]	; (8009c04 <HAL_DMA_Start_IT+0x488>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d059      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a7a      	ldr	r2, [pc, #488]	; (8009c08 <HAL_DMA_Start_IT+0x48c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d054      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a79      	ldr	r2, [pc, #484]	; (8009c0c <HAL_DMA_Start_IT+0x490>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d04f      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a77      	ldr	r2, [pc, #476]	; (8009c10 <HAL_DMA_Start_IT+0x494>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d04a      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a76      	ldr	r2, [pc, #472]	; (8009c14 <HAL_DMA_Start_IT+0x498>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d045      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a74      	ldr	r2, [pc, #464]	; (8009c18 <HAL_DMA_Start_IT+0x49c>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d040      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a73      	ldr	r2, [pc, #460]	; (8009c1c <HAL_DMA_Start_IT+0x4a0>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d03b      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a71      	ldr	r2, [pc, #452]	; (8009c20 <HAL_DMA_Start_IT+0x4a4>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d036      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a70      	ldr	r2, [pc, #448]	; (8009c24 <HAL_DMA_Start_IT+0x4a8>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d031      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a6e      	ldr	r2, [pc, #440]	; (8009c28 <HAL_DMA_Start_IT+0x4ac>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d02c      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a6d      	ldr	r2, [pc, #436]	; (8009c2c <HAL_DMA_Start_IT+0x4b0>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d027      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a6b      	ldr	r2, [pc, #428]	; (8009c30 <HAL_DMA_Start_IT+0x4b4>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d022      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a6a      	ldr	r2, [pc, #424]	; (8009c34 <HAL_DMA_Start_IT+0x4b8>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d01d      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a68      	ldr	r2, [pc, #416]	; (8009c38 <HAL_DMA_Start_IT+0x4bc>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d018      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a67      	ldr	r2, [pc, #412]	; (8009c3c <HAL_DMA_Start_IT+0x4c0>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d013      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a65      	ldr	r2, [pc, #404]	; (8009c40 <HAL_DMA_Start_IT+0x4c4>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d00e      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a64      	ldr	r2, [pc, #400]	; (8009c44 <HAL_DMA_Start_IT+0x4c8>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d009      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a62      	ldr	r2, [pc, #392]	; (8009c48 <HAL_DMA_Start_IT+0x4cc>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d004      	beq.n	8009acc <HAL_DMA_Start_IT+0x350>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a61      	ldr	r2, [pc, #388]	; (8009c4c <HAL_DMA_Start_IT+0x4d0>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d101      	bne.n	8009ad0 <HAL_DMA_Start_IT+0x354>
 8009acc:	2301      	movs	r3, #1
 8009ace:	e000      	b.n	8009ad2 <HAL_DMA_Start_IT+0x356>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d01a      	beq.n	8009b0c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d007      	beq.n	8009af4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009af2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d007      	beq.n	8009b0c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b0a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a37      	ldr	r2, [pc, #220]	; (8009bf0 <HAL_DMA_Start_IT+0x474>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d04a      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a36      	ldr	r2, [pc, #216]	; (8009bf4 <HAL_DMA_Start_IT+0x478>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d045      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a34      	ldr	r2, [pc, #208]	; (8009bf8 <HAL_DMA_Start_IT+0x47c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d040      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a33      	ldr	r2, [pc, #204]	; (8009bfc <HAL_DMA_Start_IT+0x480>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d03b      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a31      	ldr	r2, [pc, #196]	; (8009c00 <HAL_DMA_Start_IT+0x484>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d036      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a30      	ldr	r2, [pc, #192]	; (8009c04 <HAL_DMA_Start_IT+0x488>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d031      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a2e      	ldr	r2, [pc, #184]	; (8009c08 <HAL_DMA_Start_IT+0x48c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d02c      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a2d      	ldr	r2, [pc, #180]	; (8009c0c <HAL_DMA_Start_IT+0x490>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d027      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a2b      	ldr	r2, [pc, #172]	; (8009c10 <HAL_DMA_Start_IT+0x494>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d022      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a2a      	ldr	r2, [pc, #168]	; (8009c14 <HAL_DMA_Start_IT+0x498>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d01d      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a28      	ldr	r2, [pc, #160]	; (8009c18 <HAL_DMA_Start_IT+0x49c>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d018      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a27      	ldr	r2, [pc, #156]	; (8009c1c <HAL_DMA_Start_IT+0x4a0>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d013      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a25      	ldr	r2, [pc, #148]	; (8009c20 <HAL_DMA_Start_IT+0x4a4>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d00e      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a24      	ldr	r2, [pc, #144]	; (8009c24 <HAL_DMA_Start_IT+0x4a8>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d009      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a22      	ldr	r2, [pc, #136]	; (8009c28 <HAL_DMA_Start_IT+0x4ac>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d004      	beq.n	8009bac <HAL_DMA_Start_IT+0x430>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a21      	ldr	r2, [pc, #132]	; (8009c2c <HAL_DMA_Start_IT+0x4b0>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d108      	bne.n	8009bbe <HAL_DMA_Start_IT+0x442>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f042 0201 	orr.w	r2, r2, #1
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	e012      	b.n	8009be4 <HAL_DMA_Start_IT+0x468>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0201 	orr.w	r2, r2, #1
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	e009      	b.n	8009be4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	40020010 	.word	0x40020010
 8009bf4:	40020028 	.word	0x40020028
 8009bf8:	40020040 	.word	0x40020040
 8009bfc:	40020058 	.word	0x40020058
 8009c00:	40020070 	.word	0x40020070
 8009c04:	40020088 	.word	0x40020088
 8009c08:	400200a0 	.word	0x400200a0
 8009c0c:	400200b8 	.word	0x400200b8
 8009c10:	40020410 	.word	0x40020410
 8009c14:	40020428 	.word	0x40020428
 8009c18:	40020440 	.word	0x40020440
 8009c1c:	40020458 	.word	0x40020458
 8009c20:	40020470 	.word	0x40020470
 8009c24:	40020488 	.word	0x40020488
 8009c28:	400204a0 	.word	0x400204a0
 8009c2c:	400204b8 	.word	0x400204b8
 8009c30:	58025408 	.word	0x58025408
 8009c34:	5802541c 	.word	0x5802541c
 8009c38:	58025430 	.word	0x58025430
 8009c3c:	58025444 	.word	0x58025444
 8009c40:	58025458 	.word	0x58025458
 8009c44:	5802546c 	.word	0x5802546c
 8009c48:	58025480 	.word	0x58025480
 8009c4c:	58025494 	.word	0x58025494

08009c50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009c58:	f7fd fb68 	bl	800732c <HAL_GetTick>
 8009c5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e2dc      	b.n	800a222 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d008      	beq.n	8009c86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2280      	movs	r2, #128	; 0x80
 8009c78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e2cd      	b.n	800a222 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a76      	ldr	r2, [pc, #472]	; (8009e64 <HAL_DMA_Abort+0x214>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d04a      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a74      	ldr	r2, [pc, #464]	; (8009e68 <HAL_DMA_Abort+0x218>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d045      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a73      	ldr	r2, [pc, #460]	; (8009e6c <HAL_DMA_Abort+0x21c>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d040      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a71      	ldr	r2, [pc, #452]	; (8009e70 <HAL_DMA_Abort+0x220>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d03b      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a70      	ldr	r2, [pc, #448]	; (8009e74 <HAL_DMA_Abort+0x224>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d036      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a6e      	ldr	r2, [pc, #440]	; (8009e78 <HAL_DMA_Abort+0x228>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d031      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a6d      	ldr	r2, [pc, #436]	; (8009e7c <HAL_DMA_Abort+0x22c>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d02c      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a6b      	ldr	r2, [pc, #428]	; (8009e80 <HAL_DMA_Abort+0x230>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d027      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a6a      	ldr	r2, [pc, #424]	; (8009e84 <HAL_DMA_Abort+0x234>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d022      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a68      	ldr	r2, [pc, #416]	; (8009e88 <HAL_DMA_Abort+0x238>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d01d      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a67      	ldr	r2, [pc, #412]	; (8009e8c <HAL_DMA_Abort+0x23c>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d018      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a65      	ldr	r2, [pc, #404]	; (8009e90 <HAL_DMA_Abort+0x240>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d013      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a64      	ldr	r2, [pc, #400]	; (8009e94 <HAL_DMA_Abort+0x244>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00e      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a62      	ldr	r2, [pc, #392]	; (8009e98 <HAL_DMA_Abort+0x248>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d009      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a61      	ldr	r2, [pc, #388]	; (8009e9c <HAL_DMA_Abort+0x24c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d004      	beq.n	8009d26 <HAL_DMA_Abort+0xd6>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a5f      	ldr	r2, [pc, #380]	; (8009ea0 <HAL_DMA_Abort+0x250>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d101      	bne.n	8009d2a <HAL_DMA_Abort+0xda>
 8009d26:	2301      	movs	r3, #1
 8009d28:	e000      	b.n	8009d2c <HAL_DMA_Abort+0xdc>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d013      	beq.n	8009d58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f022 021e 	bic.w	r2, r2, #30
 8009d3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	695a      	ldr	r2, [r3, #20]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	e00a      	b.n	8009d6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f022 020e 	bic.w	r2, r2, #14
 8009d66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a3c      	ldr	r2, [pc, #240]	; (8009e64 <HAL_DMA_Abort+0x214>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d072      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a3a      	ldr	r2, [pc, #232]	; (8009e68 <HAL_DMA_Abort+0x218>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d06d      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a39      	ldr	r2, [pc, #228]	; (8009e6c <HAL_DMA_Abort+0x21c>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d068      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a37      	ldr	r2, [pc, #220]	; (8009e70 <HAL_DMA_Abort+0x220>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d063      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a36      	ldr	r2, [pc, #216]	; (8009e74 <HAL_DMA_Abort+0x224>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d05e      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a34      	ldr	r2, [pc, #208]	; (8009e78 <HAL_DMA_Abort+0x228>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d059      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a33      	ldr	r2, [pc, #204]	; (8009e7c <HAL_DMA_Abort+0x22c>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d054      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a31      	ldr	r2, [pc, #196]	; (8009e80 <HAL_DMA_Abort+0x230>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d04f      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a30      	ldr	r2, [pc, #192]	; (8009e84 <HAL_DMA_Abort+0x234>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d04a      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a2e      	ldr	r2, [pc, #184]	; (8009e88 <HAL_DMA_Abort+0x238>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d045      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a2d      	ldr	r2, [pc, #180]	; (8009e8c <HAL_DMA_Abort+0x23c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d040      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a2b      	ldr	r2, [pc, #172]	; (8009e90 <HAL_DMA_Abort+0x240>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d03b      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a2a      	ldr	r2, [pc, #168]	; (8009e94 <HAL_DMA_Abort+0x244>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d036      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a28      	ldr	r2, [pc, #160]	; (8009e98 <HAL_DMA_Abort+0x248>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d031      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a27      	ldr	r2, [pc, #156]	; (8009e9c <HAL_DMA_Abort+0x24c>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d02c      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a25      	ldr	r2, [pc, #148]	; (8009ea0 <HAL_DMA_Abort+0x250>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d027      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a24      	ldr	r2, [pc, #144]	; (8009ea4 <HAL_DMA_Abort+0x254>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d022      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a22      	ldr	r2, [pc, #136]	; (8009ea8 <HAL_DMA_Abort+0x258>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d01d      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a21      	ldr	r2, [pc, #132]	; (8009eac <HAL_DMA_Abort+0x25c>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d018      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a1f      	ldr	r2, [pc, #124]	; (8009eb0 <HAL_DMA_Abort+0x260>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d013      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a1e      	ldr	r2, [pc, #120]	; (8009eb4 <HAL_DMA_Abort+0x264>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d00e      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a1c      	ldr	r2, [pc, #112]	; (8009eb8 <HAL_DMA_Abort+0x268>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d009      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a1b      	ldr	r2, [pc, #108]	; (8009ebc <HAL_DMA_Abort+0x26c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d004      	beq.n	8009e5e <HAL_DMA_Abort+0x20e>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a19      	ldr	r2, [pc, #100]	; (8009ec0 <HAL_DMA_Abort+0x270>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d132      	bne.n	8009ec4 <HAL_DMA_Abort+0x274>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e031      	b.n	8009ec6 <HAL_DMA_Abort+0x276>
 8009e62:	bf00      	nop
 8009e64:	40020010 	.word	0x40020010
 8009e68:	40020028 	.word	0x40020028
 8009e6c:	40020040 	.word	0x40020040
 8009e70:	40020058 	.word	0x40020058
 8009e74:	40020070 	.word	0x40020070
 8009e78:	40020088 	.word	0x40020088
 8009e7c:	400200a0 	.word	0x400200a0
 8009e80:	400200b8 	.word	0x400200b8
 8009e84:	40020410 	.word	0x40020410
 8009e88:	40020428 	.word	0x40020428
 8009e8c:	40020440 	.word	0x40020440
 8009e90:	40020458 	.word	0x40020458
 8009e94:	40020470 	.word	0x40020470
 8009e98:	40020488 	.word	0x40020488
 8009e9c:	400204a0 	.word	0x400204a0
 8009ea0:	400204b8 	.word	0x400204b8
 8009ea4:	58025408 	.word	0x58025408
 8009ea8:	5802541c 	.word	0x5802541c
 8009eac:	58025430 	.word	0x58025430
 8009eb0:	58025444 	.word	0x58025444
 8009eb4:	58025458 	.word	0x58025458
 8009eb8:	5802546c 	.word	0x5802546c
 8009ebc:	58025480 	.word	0x58025480
 8009ec0:	58025494 	.word	0x58025494
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d007      	beq.n	8009eda <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a6d      	ldr	r2, [pc, #436]	; (800a094 <HAL_DMA_Abort+0x444>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d04a      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a6b      	ldr	r2, [pc, #428]	; (800a098 <HAL_DMA_Abort+0x448>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d045      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a6a      	ldr	r2, [pc, #424]	; (800a09c <HAL_DMA_Abort+0x44c>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d040      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a68      	ldr	r2, [pc, #416]	; (800a0a0 <HAL_DMA_Abort+0x450>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d03b      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a67      	ldr	r2, [pc, #412]	; (800a0a4 <HAL_DMA_Abort+0x454>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d036      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a65      	ldr	r2, [pc, #404]	; (800a0a8 <HAL_DMA_Abort+0x458>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d031      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a64      	ldr	r2, [pc, #400]	; (800a0ac <HAL_DMA_Abort+0x45c>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d02c      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a62      	ldr	r2, [pc, #392]	; (800a0b0 <HAL_DMA_Abort+0x460>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d027      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a61      	ldr	r2, [pc, #388]	; (800a0b4 <HAL_DMA_Abort+0x464>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d022      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a5f      	ldr	r2, [pc, #380]	; (800a0b8 <HAL_DMA_Abort+0x468>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d01d      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a5e      	ldr	r2, [pc, #376]	; (800a0bc <HAL_DMA_Abort+0x46c>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d018      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a5c      	ldr	r2, [pc, #368]	; (800a0c0 <HAL_DMA_Abort+0x470>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d013      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a5b      	ldr	r2, [pc, #364]	; (800a0c4 <HAL_DMA_Abort+0x474>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d00e      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a59      	ldr	r2, [pc, #356]	; (800a0c8 <HAL_DMA_Abort+0x478>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d009      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a58      	ldr	r2, [pc, #352]	; (800a0cc <HAL_DMA_Abort+0x47c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d004      	beq.n	8009f7a <HAL_DMA_Abort+0x32a>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a56      	ldr	r2, [pc, #344]	; (800a0d0 <HAL_DMA_Abort+0x480>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d108      	bne.n	8009f8c <HAL_DMA_Abort+0x33c>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0201 	bic.w	r2, r2, #1
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	e007      	b.n	8009f9c <HAL_DMA_Abort+0x34c>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f022 0201 	bic.w	r2, r2, #1
 8009f9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009f9c:	e013      	b.n	8009fc6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f9e:	f7fd f9c5 	bl	800732c <HAL_GetTick>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	2b05      	cmp	r3, #5
 8009faa:	d90c      	bls.n	8009fc6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2220      	movs	r2, #32
 8009fb0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2203      	movs	r2, #3
 8009fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e12d      	b.n	800a222 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1e5      	bne.n	8009f9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a2f      	ldr	r2, [pc, #188]	; (800a094 <HAL_DMA_Abort+0x444>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d04a      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a2d      	ldr	r2, [pc, #180]	; (800a098 <HAL_DMA_Abort+0x448>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d045      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a2c      	ldr	r2, [pc, #176]	; (800a09c <HAL_DMA_Abort+0x44c>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d040      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a2a      	ldr	r2, [pc, #168]	; (800a0a0 <HAL_DMA_Abort+0x450>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d03b      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a29      	ldr	r2, [pc, #164]	; (800a0a4 <HAL_DMA_Abort+0x454>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d036      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a27      	ldr	r2, [pc, #156]	; (800a0a8 <HAL_DMA_Abort+0x458>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d031      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a26      	ldr	r2, [pc, #152]	; (800a0ac <HAL_DMA_Abort+0x45c>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d02c      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a24      	ldr	r2, [pc, #144]	; (800a0b0 <HAL_DMA_Abort+0x460>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d027      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a23      	ldr	r2, [pc, #140]	; (800a0b4 <HAL_DMA_Abort+0x464>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d022      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a21      	ldr	r2, [pc, #132]	; (800a0b8 <HAL_DMA_Abort+0x468>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d01d      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a20      	ldr	r2, [pc, #128]	; (800a0bc <HAL_DMA_Abort+0x46c>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d018      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1e      	ldr	r2, [pc, #120]	; (800a0c0 <HAL_DMA_Abort+0x470>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d013      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a1d      	ldr	r2, [pc, #116]	; (800a0c4 <HAL_DMA_Abort+0x474>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d00e      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a1b      	ldr	r2, [pc, #108]	; (800a0c8 <HAL_DMA_Abort+0x478>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d009      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a1a      	ldr	r2, [pc, #104]	; (800a0cc <HAL_DMA_Abort+0x47c>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d004      	beq.n	800a072 <HAL_DMA_Abort+0x422>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a18      	ldr	r2, [pc, #96]	; (800a0d0 <HAL_DMA_Abort+0x480>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d101      	bne.n	800a076 <HAL_DMA_Abort+0x426>
 800a072:	2301      	movs	r3, #1
 800a074:	e000      	b.n	800a078 <HAL_DMA_Abort+0x428>
 800a076:	2300      	movs	r3, #0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d02b      	beq.n	800a0d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a080:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a086:	f003 031f 	and.w	r3, r3, #31
 800a08a:	223f      	movs	r2, #63	; 0x3f
 800a08c:	409a      	lsls	r2, r3
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	609a      	str	r2, [r3, #8]
 800a092:	e02a      	b.n	800a0ea <HAL_DMA_Abort+0x49a>
 800a094:	40020010 	.word	0x40020010
 800a098:	40020028 	.word	0x40020028
 800a09c:	40020040 	.word	0x40020040
 800a0a0:	40020058 	.word	0x40020058
 800a0a4:	40020070 	.word	0x40020070
 800a0a8:	40020088 	.word	0x40020088
 800a0ac:	400200a0 	.word	0x400200a0
 800a0b0:	400200b8 	.word	0x400200b8
 800a0b4:	40020410 	.word	0x40020410
 800a0b8:	40020428 	.word	0x40020428
 800a0bc:	40020440 	.word	0x40020440
 800a0c0:	40020458 	.word	0x40020458
 800a0c4:	40020470 	.word	0x40020470
 800a0c8:	40020488 	.word	0x40020488
 800a0cc:	400204a0 	.word	0x400204a0
 800a0d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0de:	f003 031f 	and.w	r3, r3, #31
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	409a      	lsls	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a4f      	ldr	r2, [pc, #316]	; (800a22c <HAL_DMA_Abort+0x5dc>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d072      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a4d      	ldr	r2, [pc, #308]	; (800a230 <HAL_DMA_Abort+0x5e0>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d06d      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a4c      	ldr	r2, [pc, #304]	; (800a234 <HAL_DMA_Abort+0x5e4>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d068      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a4a      	ldr	r2, [pc, #296]	; (800a238 <HAL_DMA_Abort+0x5e8>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d063      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a49      	ldr	r2, [pc, #292]	; (800a23c <HAL_DMA_Abort+0x5ec>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d05e      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a47      	ldr	r2, [pc, #284]	; (800a240 <HAL_DMA_Abort+0x5f0>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d059      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a46      	ldr	r2, [pc, #280]	; (800a244 <HAL_DMA_Abort+0x5f4>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d054      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a44      	ldr	r2, [pc, #272]	; (800a248 <HAL_DMA_Abort+0x5f8>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d04f      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a43      	ldr	r2, [pc, #268]	; (800a24c <HAL_DMA_Abort+0x5fc>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d04a      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a41      	ldr	r2, [pc, #260]	; (800a250 <HAL_DMA_Abort+0x600>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d045      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a40      	ldr	r2, [pc, #256]	; (800a254 <HAL_DMA_Abort+0x604>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d040      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a3e      	ldr	r2, [pc, #248]	; (800a258 <HAL_DMA_Abort+0x608>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d03b      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a3d      	ldr	r2, [pc, #244]	; (800a25c <HAL_DMA_Abort+0x60c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d036      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a3b      	ldr	r2, [pc, #236]	; (800a260 <HAL_DMA_Abort+0x610>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d031      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a3a      	ldr	r2, [pc, #232]	; (800a264 <HAL_DMA_Abort+0x614>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d02c      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a38      	ldr	r2, [pc, #224]	; (800a268 <HAL_DMA_Abort+0x618>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d027      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a37      	ldr	r2, [pc, #220]	; (800a26c <HAL_DMA_Abort+0x61c>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d022      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a35      	ldr	r2, [pc, #212]	; (800a270 <HAL_DMA_Abort+0x620>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d01d      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a34      	ldr	r2, [pc, #208]	; (800a274 <HAL_DMA_Abort+0x624>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d018      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a32      	ldr	r2, [pc, #200]	; (800a278 <HAL_DMA_Abort+0x628>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d013      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a31      	ldr	r2, [pc, #196]	; (800a27c <HAL_DMA_Abort+0x62c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d00e      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a2f      	ldr	r2, [pc, #188]	; (800a280 <HAL_DMA_Abort+0x630>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d009      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a2e      	ldr	r2, [pc, #184]	; (800a284 <HAL_DMA_Abort+0x634>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d004      	beq.n	800a1da <HAL_DMA_Abort+0x58a>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a2c      	ldr	r2, [pc, #176]	; (800a288 <HAL_DMA_Abort+0x638>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d101      	bne.n	800a1de <HAL_DMA_Abort+0x58e>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e000      	b.n	800a1e0 <HAL_DMA_Abort+0x590>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d015      	beq.n	800a210 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a1ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00c      	beq.n	800a210 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a204:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a20e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	40020010 	.word	0x40020010
 800a230:	40020028 	.word	0x40020028
 800a234:	40020040 	.word	0x40020040
 800a238:	40020058 	.word	0x40020058
 800a23c:	40020070 	.word	0x40020070
 800a240:	40020088 	.word	0x40020088
 800a244:	400200a0 	.word	0x400200a0
 800a248:	400200b8 	.word	0x400200b8
 800a24c:	40020410 	.word	0x40020410
 800a250:	40020428 	.word	0x40020428
 800a254:	40020440 	.word	0x40020440
 800a258:	40020458 	.word	0x40020458
 800a25c:	40020470 	.word	0x40020470
 800a260:	40020488 	.word	0x40020488
 800a264:	400204a0 	.word	0x400204a0
 800a268:	400204b8 	.word	0x400204b8
 800a26c:	58025408 	.word	0x58025408
 800a270:	5802541c 	.word	0x5802541c
 800a274:	58025430 	.word	0x58025430
 800a278:	58025444 	.word	0x58025444
 800a27c:	58025458 	.word	0x58025458
 800a280:	5802546c 	.word	0x5802546c
 800a284:	58025480 	.word	0x58025480
 800a288:	58025494 	.word	0x58025494

0800a28c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e237      	b.n	800a70e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d004      	beq.n	800a2b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2280      	movs	r2, #128	; 0x80
 800a2ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e22c      	b.n	800a70e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a5c      	ldr	r2, [pc, #368]	; (800a42c <HAL_DMA_Abort_IT+0x1a0>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d04a      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a5b      	ldr	r2, [pc, #364]	; (800a430 <HAL_DMA_Abort_IT+0x1a4>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d045      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a59      	ldr	r2, [pc, #356]	; (800a434 <HAL_DMA_Abort_IT+0x1a8>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d040      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a58      	ldr	r2, [pc, #352]	; (800a438 <HAL_DMA_Abort_IT+0x1ac>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d03b      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a56      	ldr	r2, [pc, #344]	; (800a43c <HAL_DMA_Abort_IT+0x1b0>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d036      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a55      	ldr	r2, [pc, #340]	; (800a440 <HAL_DMA_Abort_IT+0x1b4>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d031      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a53      	ldr	r2, [pc, #332]	; (800a444 <HAL_DMA_Abort_IT+0x1b8>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d02c      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a52      	ldr	r2, [pc, #328]	; (800a448 <HAL_DMA_Abort_IT+0x1bc>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d027      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a50      	ldr	r2, [pc, #320]	; (800a44c <HAL_DMA_Abort_IT+0x1c0>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d022      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a4f      	ldr	r2, [pc, #316]	; (800a450 <HAL_DMA_Abort_IT+0x1c4>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d01d      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a4d      	ldr	r2, [pc, #308]	; (800a454 <HAL_DMA_Abort_IT+0x1c8>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d018      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a4c      	ldr	r2, [pc, #304]	; (800a458 <HAL_DMA_Abort_IT+0x1cc>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d013      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a4a      	ldr	r2, [pc, #296]	; (800a45c <HAL_DMA_Abort_IT+0x1d0>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d00e      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a49      	ldr	r2, [pc, #292]	; (800a460 <HAL_DMA_Abort_IT+0x1d4>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d009      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a47      	ldr	r2, [pc, #284]	; (800a464 <HAL_DMA_Abort_IT+0x1d8>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d004      	beq.n	800a354 <HAL_DMA_Abort_IT+0xc8>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a46      	ldr	r2, [pc, #280]	; (800a468 <HAL_DMA_Abort_IT+0x1dc>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d101      	bne.n	800a358 <HAL_DMA_Abort_IT+0xcc>
 800a354:	2301      	movs	r3, #1
 800a356:	e000      	b.n	800a35a <HAL_DMA_Abort_IT+0xce>
 800a358:	2300      	movs	r3, #0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 8086 	beq.w	800a46c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2204      	movs	r2, #4
 800a364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a2f      	ldr	r2, [pc, #188]	; (800a42c <HAL_DMA_Abort_IT+0x1a0>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d04a      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a2e      	ldr	r2, [pc, #184]	; (800a430 <HAL_DMA_Abort_IT+0x1a4>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d045      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a2c      	ldr	r2, [pc, #176]	; (800a434 <HAL_DMA_Abort_IT+0x1a8>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d040      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a2b      	ldr	r2, [pc, #172]	; (800a438 <HAL_DMA_Abort_IT+0x1ac>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d03b      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a29      	ldr	r2, [pc, #164]	; (800a43c <HAL_DMA_Abort_IT+0x1b0>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d036      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a28      	ldr	r2, [pc, #160]	; (800a440 <HAL_DMA_Abort_IT+0x1b4>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d031      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a26      	ldr	r2, [pc, #152]	; (800a444 <HAL_DMA_Abort_IT+0x1b8>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d02c      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a25      	ldr	r2, [pc, #148]	; (800a448 <HAL_DMA_Abort_IT+0x1bc>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d027      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a23      	ldr	r2, [pc, #140]	; (800a44c <HAL_DMA_Abort_IT+0x1c0>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d022      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a22      	ldr	r2, [pc, #136]	; (800a450 <HAL_DMA_Abort_IT+0x1c4>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d01d      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a20      	ldr	r2, [pc, #128]	; (800a454 <HAL_DMA_Abort_IT+0x1c8>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d018      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a1f      	ldr	r2, [pc, #124]	; (800a458 <HAL_DMA_Abort_IT+0x1cc>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d013      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a1d      	ldr	r2, [pc, #116]	; (800a45c <HAL_DMA_Abort_IT+0x1d0>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d00e      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a1c      	ldr	r2, [pc, #112]	; (800a460 <HAL_DMA_Abort_IT+0x1d4>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d009      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a1a      	ldr	r2, [pc, #104]	; (800a464 <HAL_DMA_Abort_IT+0x1d8>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d004      	beq.n	800a408 <HAL_DMA_Abort_IT+0x17c>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a19      	ldr	r2, [pc, #100]	; (800a468 <HAL_DMA_Abort_IT+0x1dc>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d108      	bne.n	800a41a <HAL_DMA_Abort_IT+0x18e>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f022 0201 	bic.w	r2, r2, #1
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	e178      	b.n	800a70c <HAL_DMA_Abort_IT+0x480>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f022 0201 	bic.w	r2, r2, #1
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	e16f      	b.n	800a70c <HAL_DMA_Abort_IT+0x480>
 800a42c:	40020010 	.word	0x40020010
 800a430:	40020028 	.word	0x40020028
 800a434:	40020040 	.word	0x40020040
 800a438:	40020058 	.word	0x40020058
 800a43c:	40020070 	.word	0x40020070
 800a440:	40020088 	.word	0x40020088
 800a444:	400200a0 	.word	0x400200a0
 800a448:	400200b8 	.word	0x400200b8
 800a44c:	40020410 	.word	0x40020410
 800a450:	40020428 	.word	0x40020428
 800a454:	40020440 	.word	0x40020440
 800a458:	40020458 	.word	0x40020458
 800a45c:	40020470 	.word	0x40020470
 800a460:	40020488 	.word	0x40020488
 800a464:	400204a0 	.word	0x400204a0
 800a468:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f022 020e 	bic.w	r2, r2, #14
 800a47a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a6c      	ldr	r2, [pc, #432]	; (800a634 <HAL_DMA_Abort_IT+0x3a8>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d04a      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a6b      	ldr	r2, [pc, #428]	; (800a638 <HAL_DMA_Abort_IT+0x3ac>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d045      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a69      	ldr	r2, [pc, #420]	; (800a63c <HAL_DMA_Abort_IT+0x3b0>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d040      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a68      	ldr	r2, [pc, #416]	; (800a640 <HAL_DMA_Abort_IT+0x3b4>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d03b      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a66      	ldr	r2, [pc, #408]	; (800a644 <HAL_DMA_Abort_IT+0x3b8>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d036      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a65      	ldr	r2, [pc, #404]	; (800a648 <HAL_DMA_Abort_IT+0x3bc>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d031      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a63      	ldr	r2, [pc, #396]	; (800a64c <HAL_DMA_Abort_IT+0x3c0>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d02c      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a62      	ldr	r2, [pc, #392]	; (800a650 <HAL_DMA_Abort_IT+0x3c4>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d027      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a60      	ldr	r2, [pc, #384]	; (800a654 <HAL_DMA_Abort_IT+0x3c8>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d022      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a5f      	ldr	r2, [pc, #380]	; (800a658 <HAL_DMA_Abort_IT+0x3cc>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d01d      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a5d      	ldr	r2, [pc, #372]	; (800a65c <HAL_DMA_Abort_IT+0x3d0>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d018      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a5c      	ldr	r2, [pc, #368]	; (800a660 <HAL_DMA_Abort_IT+0x3d4>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d013      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a5a      	ldr	r2, [pc, #360]	; (800a664 <HAL_DMA_Abort_IT+0x3d8>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d00e      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a59      	ldr	r2, [pc, #356]	; (800a668 <HAL_DMA_Abort_IT+0x3dc>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d009      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a57      	ldr	r2, [pc, #348]	; (800a66c <HAL_DMA_Abort_IT+0x3e0>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d004      	beq.n	800a51c <HAL_DMA_Abort_IT+0x290>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a56      	ldr	r2, [pc, #344]	; (800a670 <HAL_DMA_Abort_IT+0x3e4>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d108      	bne.n	800a52e <HAL_DMA_Abort_IT+0x2a2>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f022 0201 	bic.w	r2, r2, #1
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	e007      	b.n	800a53e <HAL_DMA_Abort_IT+0x2b2>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f022 0201 	bic.w	r2, r2, #1
 800a53c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a3c      	ldr	r2, [pc, #240]	; (800a634 <HAL_DMA_Abort_IT+0x3a8>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d072      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a3a      	ldr	r2, [pc, #232]	; (800a638 <HAL_DMA_Abort_IT+0x3ac>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d06d      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a39      	ldr	r2, [pc, #228]	; (800a63c <HAL_DMA_Abort_IT+0x3b0>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d068      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a37      	ldr	r2, [pc, #220]	; (800a640 <HAL_DMA_Abort_IT+0x3b4>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d063      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a36      	ldr	r2, [pc, #216]	; (800a644 <HAL_DMA_Abort_IT+0x3b8>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d05e      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a34      	ldr	r2, [pc, #208]	; (800a648 <HAL_DMA_Abort_IT+0x3bc>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d059      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a33      	ldr	r2, [pc, #204]	; (800a64c <HAL_DMA_Abort_IT+0x3c0>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d054      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a31      	ldr	r2, [pc, #196]	; (800a650 <HAL_DMA_Abort_IT+0x3c4>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d04f      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a30      	ldr	r2, [pc, #192]	; (800a654 <HAL_DMA_Abort_IT+0x3c8>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d04a      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a2e      	ldr	r2, [pc, #184]	; (800a658 <HAL_DMA_Abort_IT+0x3cc>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d045      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a2d      	ldr	r2, [pc, #180]	; (800a65c <HAL_DMA_Abort_IT+0x3d0>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d040      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a2b      	ldr	r2, [pc, #172]	; (800a660 <HAL_DMA_Abort_IT+0x3d4>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d03b      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a2a      	ldr	r2, [pc, #168]	; (800a664 <HAL_DMA_Abort_IT+0x3d8>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d036      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a28      	ldr	r2, [pc, #160]	; (800a668 <HAL_DMA_Abort_IT+0x3dc>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d031      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a27      	ldr	r2, [pc, #156]	; (800a66c <HAL_DMA_Abort_IT+0x3e0>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d02c      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a25      	ldr	r2, [pc, #148]	; (800a670 <HAL_DMA_Abort_IT+0x3e4>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d027      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a24      	ldr	r2, [pc, #144]	; (800a674 <HAL_DMA_Abort_IT+0x3e8>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d022      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a22      	ldr	r2, [pc, #136]	; (800a678 <HAL_DMA_Abort_IT+0x3ec>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d01d      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a21      	ldr	r2, [pc, #132]	; (800a67c <HAL_DMA_Abort_IT+0x3f0>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d018      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a1f      	ldr	r2, [pc, #124]	; (800a680 <HAL_DMA_Abort_IT+0x3f4>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d013      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a1e      	ldr	r2, [pc, #120]	; (800a684 <HAL_DMA_Abort_IT+0x3f8>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d00e      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a1c      	ldr	r2, [pc, #112]	; (800a688 <HAL_DMA_Abort_IT+0x3fc>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d009      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a1b      	ldr	r2, [pc, #108]	; (800a68c <HAL_DMA_Abort_IT+0x400>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d004      	beq.n	800a62e <HAL_DMA_Abort_IT+0x3a2>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a19      	ldr	r2, [pc, #100]	; (800a690 <HAL_DMA_Abort_IT+0x404>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d132      	bne.n	800a694 <HAL_DMA_Abort_IT+0x408>
 800a62e:	2301      	movs	r3, #1
 800a630:	e031      	b.n	800a696 <HAL_DMA_Abort_IT+0x40a>
 800a632:	bf00      	nop
 800a634:	40020010 	.word	0x40020010
 800a638:	40020028 	.word	0x40020028
 800a63c:	40020040 	.word	0x40020040
 800a640:	40020058 	.word	0x40020058
 800a644:	40020070 	.word	0x40020070
 800a648:	40020088 	.word	0x40020088
 800a64c:	400200a0 	.word	0x400200a0
 800a650:	400200b8 	.word	0x400200b8
 800a654:	40020410 	.word	0x40020410
 800a658:	40020428 	.word	0x40020428
 800a65c:	40020440 	.word	0x40020440
 800a660:	40020458 	.word	0x40020458
 800a664:	40020470 	.word	0x40020470
 800a668:	40020488 	.word	0x40020488
 800a66c:	400204a0 	.word	0x400204a0
 800a670:	400204b8 	.word	0x400204b8
 800a674:	58025408 	.word	0x58025408
 800a678:	5802541c 	.word	0x5802541c
 800a67c:	58025430 	.word	0x58025430
 800a680:	58025444 	.word	0x58025444
 800a684:	58025458 	.word	0x58025458
 800a688:	5802546c 	.word	0x5802546c
 800a68c:	58025480 	.word	0x58025480
 800a690:	58025494 	.word	0x58025494
 800a694:	2300      	movs	r3, #0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d028      	beq.n	800a6ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6b4:	f003 031f 	and.w	r3, r3, #31
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	409a      	lsls	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a6c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00c      	beq.n	800a6ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a6ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a700:	2b00      	cmp	r3, #0
 800a702:	d003      	beq.n	800a70c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop

0800a718 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08a      	sub	sp, #40	; 0x28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a720:	2300      	movs	r3, #0
 800a722:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a724:	4b67      	ldr	r3, [pc, #412]	; (800a8c4 <HAL_DMA_IRQHandler+0x1ac>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a67      	ldr	r2, [pc, #412]	; (800a8c8 <HAL_DMA_IRQHandler+0x1b0>)
 800a72a:	fba2 2303 	umull	r2, r3, r2, r3
 800a72e:	0a9b      	lsrs	r3, r3, #10
 800a730:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a736:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a73c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a73e:	6a3b      	ldr	r3, [r7, #32]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a5f      	ldr	r2, [pc, #380]	; (800a8cc <HAL_DMA_IRQHandler+0x1b4>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d04a      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a5d      	ldr	r2, [pc, #372]	; (800a8d0 <HAL_DMA_IRQHandler+0x1b8>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d045      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a5c      	ldr	r2, [pc, #368]	; (800a8d4 <HAL_DMA_IRQHandler+0x1bc>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d040      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a5a      	ldr	r2, [pc, #360]	; (800a8d8 <HAL_DMA_IRQHandler+0x1c0>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d03b      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a59      	ldr	r2, [pc, #356]	; (800a8dc <HAL_DMA_IRQHandler+0x1c4>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d036      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a57      	ldr	r2, [pc, #348]	; (800a8e0 <HAL_DMA_IRQHandler+0x1c8>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d031      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a56      	ldr	r2, [pc, #344]	; (800a8e4 <HAL_DMA_IRQHandler+0x1cc>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d02c      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a54      	ldr	r2, [pc, #336]	; (800a8e8 <HAL_DMA_IRQHandler+0x1d0>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d027      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a53      	ldr	r2, [pc, #332]	; (800a8ec <HAL_DMA_IRQHandler+0x1d4>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d022      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a51      	ldr	r2, [pc, #324]	; (800a8f0 <HAL_DMA_IRQHandler+0x1d8>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d01d      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a50      	ldr	r2, [pc, #320]	; (800a8f4 <HAL_DMA_IRQHandler+0x1dc>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d018      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a4e      	ldr	r2, [pc, #312]	; (800a8f8 <HAL_DMA_IRQHandler+0x1e0>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d013      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a4d      	ldr	r2, [pc, #308]	; (800a8fc <HAL_DMA_IRQHandler+0x1e4>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d00e      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a4b      	ldr	r2, [pc, #300]	; (800a900 <HAL_DMA_IRQHandler+0x1e8>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d009      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a4a      	ldr	r2, [pc, #296]	; (800a904 <HAL_DMA_IRQHandler+0x1ec>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d004      	beq.n	800a7ea <HAL_DMA_IRQHandler+0xd2>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a48      	ldr	r2, [pc, #288]	; (800a908 <HAL_DMA_IRQHandler+0x1f0>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d101      	bne.n	800a7ee <HAL_DMA_IRQHandler+0xd6>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e000      	b.n	800a7f0 <HAL_DMA_IRQHandler+0xd8>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 842b 	beq.w	800b04c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7fa:	f003 031f 	and.w	r3, r3, #31
 800a7fe:	2208      	movs	r2, #8
 800a800:	409a      	lsls	r2, r3
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	4013      	ands	r3, r2
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 80a2 	beq.w	800a950 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a2e      	ldr	r2, [pc, #184]	; (800a8cc <HAL_DMA_IRQHandler+0x1b4>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d04a      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a2d      	ldr	r2, [pc, #180]	; (800a8d0 <HAL_DMA_IRQHandler+0x1b8>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d045      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a2b      	ldr	r2, [pc, #172]	; (800a8d4 <HAL_DMA_IRQHandler+0x1bc>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d040      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a2a      	ldr	r2, [pc, #168]	; (800a8d8 <HAL_DMA_IRQHandler+0x1c0>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d03b      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a28      	ldr	r2, [pc, #160]	; (800a8dc <HAL_DMA_IRQHandler+0x1c4>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d036      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a27      	ldr	r2, [pc, #156]	; (800a8e0 <HAL_DMA_IRQHandler+0x1c8>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d031      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a25      	ldr	r2, [pc, #148]	; (800a8e4 <HAL_DMA_IRQHandler+0x1cc>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d02c      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a24      	ldr	r2, [pc, #144]	; (800a8e8 <HAL_DMA_IRQHandler+0x1d0>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d027      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a22      	ldr	r2, [pc, #136]	; (800a8ec <HAL_DMA_IRQHandler+0x1d4>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d022      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a21      	ldr	r2, [pc, #132]	; (800a8f0 <HAL_DMA_IRQHandler+0x1d8>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d01d      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a1f      	ldr	r2, [pc, #124]	; (800a8f4 <HAL_DMA_IRQHandler+0x1dc>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d018      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a1e      	ldr	r2, [pc, #120]	; (800a8f8 <HAL_DMA_IRQHandler+0x1e0>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d013      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a1c      	ldr	r2, [pc, #112]	; (800a8fc <HAL_DMA_IRQHandler+0x1e4>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d00e      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a1b      	ldr	r2, [pc, #108]	; (800a900 <HAL_DMA_IRQHandler+0x1e8>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d009      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a19      	ldr	r2, [pc, #100]	; (800a904 <HAL_DMA_IRQHandler+0x1ec>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d004      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x194>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a18      	ldr	r2, [pc, #96]	; (800a908 <HAL_DMA_IRQHandler+0x1f0>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d12f      	bne.n	800a90c <HAL_DMA_IRQHandler+0x1f4>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0304 	and.w	r3, r3, #4
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	bf14      	ite	ne
 800a8ba:	2301      	movne	r3, #1
 800a8bc:	2300      	moveq	r3, #0
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	e02e      	b.n	800a920 <HAL_DMA_IRQHandler+0x208>
 800a8c2:	bf00      	nop
 800a8c4:	24000070 	.word	0x24000070
 800a8c8:	1b4e81b5 	.word	0x1b4e81b5
 800a8cc:	40020010 	.word	0x40020010
 800a8d0:	40020028 	.word	0x40020028
 800a8d4:	40020040 	.word	0x40020040
 800a8d8:	40020058 	.word	0x40020058
 800a8dc:	40020070 	.word	0x40020070
 800a8e0:	40020088 	.word	0x40020088
 800a8e4:	400200a0 	.word	0x400200a0
 800a8e8:	400200b8 	.word	0x400200b8
 800a8ec:	40020410 	.word	0x40020410
 800a8f0:	40020428 	.word	0x40020428
 800a8f4:	40020440 	.word	0x40020440
 800a8f8:	40020458 	.word	0x40020458
 800a8fc:	40020470 	.word	0x40020470
 800a900:	40020488 	.word	0x40020488
 800a904:	400204a0 	.word	0x400204a0
 800a908:	400204b8 	.word	0x400204b8
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0308 	and.w	r3, r3, #8
 800a916:	2b00      	cmp	r3, #0
 800a918:	bf14      	ite	ne
 800a91a:	2301      	movne	r3, #1
 800a91c:	2300      	moveq	r3, #0
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b00      	cmp	r3, #0
 800a922:	d015      	beq.n	800a950 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f022 0204 	bic.w	r2, r2, #4
 800a932:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a938:	f003 031f 	and.w	r3, r3, #31
 800a93c:	2208      	movs	r2, #8
 800a93e:	409a      	lsls	r2, r3
 800a940:	6a3b      	ldr	r3, [r7, #32]
 800a942:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a948:	f043 0201 	orr.w	r2, r3, #1
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a954:	f003 031f 	and.w	r3, r3, #31
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	fa22 f303 	lsr.w	r3, r2, r3
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b00      	cmp	r3, #0
 800a964:	d06e      	beq.n	800aa44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a69      	ldr	r2, [pc, #420]	; (800ab10 <HAL_DMA_IRQHandler+0x3f8>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d04a      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a67      	ldr	r2, [pc, #412]	; (800ab14 <HAL_DMA_IRQHandler+0x3fc>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d045      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a66      	ldr	r2, [pc, #408]	; (800ab18 <HAL_DMA_IRQHandler+0x400>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d040      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a64      	ldr	r2, [pc, #400]	; (800ab1c <HAL_DMA_IRQHandler+0x404>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d03b      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a63      	ldr	r2, [pc, #396]	; (800ab20 <HAL_DMA_IRQHandler+0x408>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d036      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a61      	ldr	r2, [pc, #388]	; (800ab24 <HAL_DMA_IRQHandler+0x40c>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d031      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a60      	ldr	r2, [pc, #384]	; (800ab28 <HAL_DMA_IRQHandler+0x410>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d02c      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a5e      	ldr	r2, [pc, #376]	; (800ab2c <HAL_DMA_IRQHandler+0x414>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d027      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a5d      	ldr	r2, [pc, #372]	; (800ab30 <HAL_DMA_IRQHandler+0x418>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d022      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a5b      	ldr	r2, [pc, #364]	; (800ab34 <HAL_DMA_IRQHandler+0x41c>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d01d      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a5a      	ldr	r2, [pc, #360]	; (800ab38 <HAL_DMA_IRQHandler+0x420>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d018      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a58      	ldr	r2, [pc, #352]	; (800ab3c <HAL_DMA_IRQHandler+0x424>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d013      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a57      	ldr	r2, [pc, #348]	; (800ab40 <HAL_DMA_IRQHandler+0x428>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d00e      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a55      	ldr	r2, [pc, #340]	; (800ab44 <HAL_DMA_IRQHandler+0x42c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d009      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a54      	ldr	r2, [pc, #336]	; (800ab48 <HAL_DMA_IRQHandler+0x430>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d004      	beq.n	800aa06 <HAL_DMA_IRQHandler+0x2ee>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a52      	ldr	r2, [pc, #328]	; (800ab4c <HAL_DMA_IRQHandler+0x434>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d10a      	bne.n	800aa1c <HAL_DMA_IRQHandler+0x304>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	695b      	ldr	r3, [r3, #20]
 800aa0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	bf14      	ite	ne
 800aa14:	2301      	movne	r3, #1
 800aa16:	2300      	moveq	r3, #0
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	e003      	b.n	800aa24 <HAL_DMA_IRQHandler+0x30c>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2300      	movs	r3, #0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00d      	beq.n	800aa44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa2c:	f003 031f 	and.w	r3, r3, #31
 800aa30:	2201      	movs	r2, #1
 800aa32:	409a      	lsls	r2, r3
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa3c:	f043 0202 	orr.w	r2, r3, #2
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa48:	f003 031f 	and.w	r3, r3, #31
 800aa4c:	2204      	movs	r2, #4
 800aa4e:	409a      	lsls	r2, r3
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	4013      	ands	r3, r2
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 808f 	beq.w	800ab78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a2c      	ldr	r2, [pc, #176]	; (800ab10 <HAL_DMA_IRQHandler+0x3f8>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d04a      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a2a      	ldr	r2, [pc, #168]	; (800ab14 <HAL_DMA_IRQHandler+0x3fc>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d045      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a29      	ldr	r2, [pc, #164]	; (800ab18 <HAL_DMA_IRQHandler+0x400>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d040      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a27      	ldr	r2, [pc, #156]	; (800ab1c <HAL_DMA_IRQHandler+0x404>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d03b      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a26      	ldr	r2, [pc, #152]	; (800ab20 <HAL_DMA_IRQHandler+0x408>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d036      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a24      	ldr	r2, [pc, #144]	; (800ab24 <HAL_DMA_IRQHandler+0x40c>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d031      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a23      	ldr	r2, [pc, #140]	; (800ab28 <HAL_DMA_IRQHandler+0x410>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d02c      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a21      	ldr	r2, [pc, #132]	; (800ab2c <HAL_DMA_IRQHandler+0x414>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d027      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a20      	ldr	r2, [pc, #128]	; (800ab30 <HAL_DMA_IRQHandler+0x418>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d022      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a1e      	ldr	r2, [pc, #120]	; (800ab34 <HAL_DMA_IRQHandler+0x41c>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d01d      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a1d      	ldr	r2, [pc, #116]	; (800ab38 <HAL_DMA_IRQHandler+0x420>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d018      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a1b      	ldr	r2, [pc, #108]	; (800ab3c <HAL_DMA_IRQHandler+0x424>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d013      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a1a      	ldr	r2, [pc, #104]	; (800ab40 <HAL_DMA_IRQHandler+0x428>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d00e      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a18      	ldr	r2, [pc, #96]	; (800ab44 <HAL_DMA_IRQHandler+0x42c>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d009      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a17      	ldr	r2, [pc, #92]	; (800ab48 <HAL_DMA_IRQHandler+0x430>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d004      	beq.n	800aafa <HAL_DMA_IRQHandler+0x3e2>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a15      	ldr	r2, [pc, #84]	; (800ab4c <HAL_DMA_IRQHandler+0x434>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d12a      	bne.n	800ab50 <HAL_DMA_IRQHandler+0x438>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0302 	and.w	r3, r3, #2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bf14      	ite	ne
 800ab08:	2301      	movne	r3, #1
 800ab0a:	2300      	moveq	r3, #0
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	e023      	b.n	800ab58 <HAL_DMA_IRQHandler+0x440>
 800ab10:	40020010 	.word	0x40020010
 800ab14:	40020028 	.word	0x40020028
 800ab18:	40020040 	.word	0x40020040
 800ab1c:	40020058 	.word	0x40020058
 800ab20:	40020070 	.word	0x40020070
 800ab24:	40020088 	.word	0x40020088
 800ab28:	400200a0 	.word	0x400200a0
 800ab2c:	400200b8 	.word	0x400200b8
 800ab30:	40020410 	.word	0x40020410
 800ab34:	40020428 	.word	0x40020428
 800ab38:	40020440 	.word	0x40020440
 800ab3c:	40020458 	.word	0x40020458
 800ab40:	40020470 	.word	0x40020470
 800ab44:	40020488 	.word	0x40020488
 800ab48:	400204a0 	.word	0x400204a0
 800ab4c:	400204b8 	.word	0x400204b8
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2300      	movs	r3, #0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00d      	beq.n	800ab78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab60:	f003 031f 	and.w	r3, r3, #31
 800ab64:	2204      	movs	r2, #4
 800ab66:	409a      	lsls	r2, r3
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab70:	f043 0204 	orr.w	r2, r3, #4
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab7c:	f003 031f 	and.w	r3, r3, #31
 800ab80:	2210      	movs	r2, #16
 800ab82:	409a      	lsls	r2, r3
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	4013      	ands	r3, r2
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 80a6 	beq.w	800acda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a85      	ldr	r2, [pc, #532]	; (800ada8 <HAL_DMA_IRQHandler+0x690>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d04a      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a83      	ldr	r2, [pc, #524]	; (800adac <HAL_DMA_IRQHandler+0x694>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d045      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a82      	ldr	r2, [pc, #520]	; (800adb0 <HAL_DMA_IRQHandler+0x698>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d040      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a80      	ldr	r2, [pc, #512]	; (800adb4 <HAL_DMA_IRQHandler+0x69c>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d03b      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a7f      	ldr	r2, [pc, #508]	; (800adb8 <HAL_DMA_IRQHandler+0x6a0>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d036      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a7d      	ldr	r2, [pc, #500]	; (800adbc <HAL_DMA_IRQHandler+0x6a4>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d031      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a7c      	ldr	r2, [pc, #496]	; (800adc0 <HAL_DMA_IRQHandler+0x6a8>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d02c      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a7a      	ldr	r2, [pc, #488]	; (800adc4 <HAL_DMA_IRQHandler+0x6ac>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d027      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a79      	ldr	r2, [pc, #484]	; (800adc8 <HAL_DMA_IRQHandler+0x6b0>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d022      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a77      	ldr	r2, [pc, #476]	; (800adcc <HAL_DMA_IRQHandler+0x6b4>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d01d      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a76      	ldr	r2, [pc, #472]	; (800add0 <HAL_DMA_IRQHandler+0x6b8>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d018      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a74      	ldr	r2, [pc, #464]	; (800add4 <HAL_DMA_IRQHandler+0x6bc>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d013      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a73      	ldr	r2, [pc, #460]	; (800add8 <HAL_DMA_IRQHandler+0x6c0>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d00e      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a71      	ldr	r2, [pc, #452]	; (800addc <HAL_DMA_IRQHandler+0x6c4>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d009      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a70      	ldr	r2, [pc, #448]	; (800ade0 <HAL_DMA_IRQHandler+0x6c8>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d004      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x516>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a6e      	ldr	r2, [pc, #440]	; (800ade4 <HAL_DMA_IRQHandler+0x6cc>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d10a      	bne.n	800ac44 <HAL_DMA_IRQHandler+0x52c>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0308 	and.w	r3, r3, #8
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	bf14      	ite	ne
 800ac3c:	2301      	movne	r3, #1
 800ac3e:	2300      	moveq	r3, #0
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	e009      	b.n	800ac58 <HAL_DMA_IRQHandler+0x540>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0304 	and.w	r3, r3, #4
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	bf14      	ite	ne
 800ac52:	2301      	movne	r3, #1
 800ac54:	2300      	moveq	r3, #0
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d03e      	beq.n	800acda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac60:	f003 031f 	and.w	r3, r3, #31
 800ac64:	2210      	movs	r2, #16
 800ac66:	409a      	lsls	r2, r3
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d018      	beq.n	800acac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d108      	bne.n	800ac9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d024      	beq.n	800acda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	4798      	blx	r3
 800ac98:	e01f      	b.n	800acda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d01b      	beq.n	800acda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	4798      	blx	r3
 800acaa:	e016      	b.n	800acda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d107      	bne.n	800acca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f022 0208 	bic.w	r2, r2, #8
 800acc8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acde:	f003 031f 	and.w	r3, r3, #31
 800ace2:	2220      	movs	r2, #32
 800ace4:	409a      	lsls	r2, r3
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	4013      	ands	r3, r2
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 8110 	beq.w	800af10 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a2c      	ldr	r2, [pc, #176]	; (800ada8 <HAL_DMA_IRQHandler+0x690>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d04a      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a2b      	ldr	r2, [pc, #172]	; (800adac <HAL_DMA_IRQHandler+0x694>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d045      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a29      	ldr	r2, [pc, #164]	; (800adb0 <HAL_DMA_IRQHandler+0x698>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d040      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a28      	ldr	r2, [pc, #160]	; (800adb4 <HAL_DMA_IRQHandler+0x69c>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d03b      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a26      	ldr	r2, [pc, #152]	; (800adb8 <HAL_DMA_IRQHandler+0x6a0>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d036      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a25      	ldr	r2, [pc, #148]	; (800adbc <HAL_DMA_IRQHandler+0x6a4>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d031      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a23      	ldr	r2, [pc, #140]	; (800adc0 <HAL_DMA_IRQHandler+0x6a8>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d02c      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a22      	ldr	r2, [pc, #136]	; (800adc4 <HAL_DMA_IRQHandler+0x6ac>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d027      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a20      	ldr	r2, [pc, #128]	; (800adc8 <HAL_DMA_IRQHandler+0x6b0>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d022      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a1f      	ldr	r2, [pc, #124]	; (800adcc <HAL_DMA_IRQHandler+0x6b4>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d01d      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a1d      	ldr	r2, [pc, #116]	; (800add0 <HAL_DMA_IRQHandler+0x6b8>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d018      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a1c      	ldr	r2, [pc, #112]	; (800add4 <HAL_DMA_IRQHandler+0x6bc>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d013      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a1a      	ldr	r2, [pc, #104]	; (800add8 <HAL_DMA_IRQHandler+0x6c0>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d00e      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a19      	ldr	r2, [pc, #100]	; (800addc <HAL_DMA_IRQHandler+0x6c4>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d009      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a17      	ldr	r2, [pc, #92]	; (800ade0 <HAL_DMA_IRQHandler+0x6c8>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d004      	beq.n	800ad90 <HAL_DMA_IRQHandler+0x678>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a16      	ldr	r2, [pc, #88]	; (800ade4 <HAL_DMA_IRQHandler+0x6cc>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d12b      	bne.n	800ade8 <HAL_DMA_IRQHandler+0x6d0>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0310 	and.w	r3, r3, #16
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bf14      	ite	ne
 800ad9e:	2301      	movne	r3, #1
 800ada0:	2300      	moveq	r3, #0
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	e02a      	b.n	800adfc <HAL_DMA_IRQHandler+0x6e4>
 800ada6:	bf00      	nop
 800ada8:	40020010 	.word	0x40020010
 800adac:	40020028 	.word	0x40020028
 800adb0:	40020040 	.word	0x40020040
 800adb4:	40020058 	.word	0x40020058
 800adb8:	40020070 	.word	0x40020070
 800adbc:	40020088 	.word	0x40020088
 800adc0:	400200a0 	.word	0x400200a0
 800adc4:	400200b8 	.word	0x400200b8
 800adc8:	40020410 	.word	0x40020410
 800adcc:	40020428 	.word	0x40020428
 800add0:	40020440 	.word	0x40020440
 800add4:	40020458 	.word	0x40020458
 800add8:	40020470 	.word	0x40020470
 800addc:	40020488 	.word	0x40020488
 800ade0:	400204a0 	.word	0x400204a0
 800ade4:	400204b8 	.word	0x400204b8
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 0302 	and.w	r3, r3, #2
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	bf14      	ite	ne
 800adf6:	2301      	movne	r3, #1
 800adf8:	2300      	moveq	r3, #0
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 8087 	beq.w	800af10 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae06:	f003 031f 	and.w	r3, r3, #31
 800ae0a:	2220      	movs	r2, #32
 800ae0c:	409a      	lsls	r2, r3
 800ae0e:	6a3b      	ldr	r3, [r7, #32]
 800ae10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2b04      	cmp	r3, #4
 800ae1c:	d139      	bne.n	800ae92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f022 0216 	bic.w	r2, r2, #22
 800ae2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	695a      	ldr	r2, [r3, #20]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d103      	bne.n	800ae4e <HAL_DMA_IRQHandler+0x736>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d007      	beq.n	800ae5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f022 0208 	bic.w	r2, r2, #8
 800ae5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae62:	f003 031f 	and.w	r3, r3, #31
 800ae66:	223f      	movs	r2, #63	; 0x3f
 800ae68:	409a      	lsls	r2, r3
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 834a 	beq.w	800b51c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	4798      	blx	r3
          }
          return;
 800ae90:	e344      	b.n	800b51c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d018      	beq.n	800aed2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d108      	bne.n	800aec0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d02c      	beq.n	800af10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	4798      	blx	r3
 800aebe:	e027      	b.n	800af10 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d023      	beq.n	800af10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	4798      	blx	r3
 800aed0:	e01e      	b.n	800af10 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10f      	bne.n	800af00 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f022 0210 	bic.w	r2, r2, #16
 800aeee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af04:	2b00      	cmp	r3, #0
 800af06:	d003      	beq.n	800af10 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 8306 	beq.w	800b526 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 8088 	beq.w	800b038 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2204      	movs	r2, #4
 800af2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a7a      	ldr	r2, [pc, #488]	; (800b120 <HAL_DMA_IRQHandler+0xa08>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d04a      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a79      	ldr	r2, [pc, #484]	; (800b124 <HAL_DMA_IRQHandler+0xa0c>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d045      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a77      	ldr	r2, [pc, #476]	; (800b128 <HAL_DMA_IRQHandler+0xa10>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d040      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a76      	ldr	r2, [pc, #472]	; (800b12c <HAL_DMA_IRQHandler+0xa14>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d03b      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a74      	ldr	r2, [pc, #464]	; (800b130 <HAL_DMA_IRQHandler+0xa18>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d036      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a73      	ldr	r2, [pc, #460]	; (800b134 <HAL_DMA_IRQHandler+0xa1c>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d031      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a71      	ldr	r2, [pc, #452]	; (800b138 <HAL_DMA_IRQHandler+0xa20>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d02c      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a70      	ldr	r2, [pc, #448]	; (800b13c <HAL_DMA_IRQHandler+0xa24>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d027      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a6e      	ldr	r2, [pc, #440]	; (800b140 <HAL_DMA_IRQHandler+0xa28>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d022      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a6d      	ldr	r2, [pc, #436]	; (800b144 <HAL_DMA_IRQHandler+0xa2c>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d01d      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a6b      	ldr	r2, [pc, #428]	; (800b148 <HAL_DMA_IRQHandler+0xa30>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d018      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a6a      	ldr	r2, [pc, #424]	; (800b14c <HAL_DMA_IRQHandler+0xa34>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d013      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a68      	ldr	r2, [pc, #416]	; (800b150 <HAL_DMA_IRQHandler+0xa38>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d00e      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a67      	ldr	r2, [pc, #412]	; (800b154 <HAL_DMA_IRQHandler+0xa3c>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d009      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a65      	ldr	r2, [pc, #404]	; (800b158 <HAL_DMA_IRQHandler+0xa40>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d004      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x8b8>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a64      	ldr	r2, [pc, #400]	; (800b15c <HAL_DMA_IRQHandler+0xa44>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d108      	bne.n	800afe2 <HAL_DMA_IRQHandler+0x8ca>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f022 0201 	bic.w	r2, r2, #1
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	e007      	b.n	800aff2 <HAL_DMA_IRQHandler+0x8da>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f022 0201 	bic.w	r2, r2, #1
 800aff0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3301      	adds	r3, #1
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800affa:	429a      	cmp	r2, r3
 800affc:	d307      	bcc.n	800b00e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1f2      	bne.n	800aff2 <HAL_DMA_IRQHandler+0x8da>
 800b00c:	e000      	b.n	800b010 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b00e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d004      	beq.n	800b028 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2203      	movs	r2, #3
 800b022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b026:	e003      	b.n	800b030 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f000 8272 	beq.w	800b526 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	4798      	blx	r3
 800b04a:	e26c      	b.n	800b526 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a43      	ldr	r2, [pc, #268]	; (800b160 <HAL_DMA_IRQHandler+0xa48>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d022      	beq.n	800b09c <HAL_DMA_IRQHandler+0x984>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a42      	ldr	r2, [pc, #264]	; (800b164 <HAL_DMA_IRQHandler+0xa4c>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d01d      	beq.n	800b09c <HAL_DMA_IRQHandler+0x984>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a40      	ldr	r2, [pc, #256]	; (800b168 <HAL_DMA_IRQHandler+0xa50>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d018      	beq.n	800b09c <HAL_DMA_IRQHandler+0x984>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a3f      	ldr	r2, [pc, #252]	; (800b16c <HAL_DMA_IRQHandler+0xa54>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d013      	beq.n	800b09c <HAL_DMA_IRQHandler+0x984>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a3d      	ldr	r2, [pc, #244]	; (800b170 <HAL_DMA_IRQHandler+0xa58>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d00e      	beq.n	800b09c <HAL_DMA_IRQHandler+0x984>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a3c      	ldr	r2, [pc, #240]	; (800b174 <HAL_DMA_IRQHandler+0xa5c>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d009      	beq.n	800b09c <HAL_DMA_IRQHandler+0x984>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a3a      	ldr	r2, [pc, #232]	; (800b178 <HAL_DMA_IRQHandler+0xa60>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d004      	beq.n	800b09c <HAL_DMA_IRQHandler+0x984>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a39      	ldr	r2, [pc, #228]	; (800b17c <HAL_DMA_IRQHandler+0xa64>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d101      	bne.n	800b0a0 <HAL_DMA_IRQHandler+0x988>
 800b09c:	2301      	movs	r3, #1
 800b09e:	e000      	b.n	800b0a2 <HAL_DMA_IRQHandler+0x98a>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 823f 	beq.w	800b526 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0b4:	f003 031f 	and.w	r3, r3, #31
 800b0b8:	2204      	movs	r2, #4
 800b0ba:	409a      	lsls	r2, r3
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	4013      	ands	r3, r2
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 80cd 	beq.w	800b260 <HAL_DMA_IRQHandler+0xb48>
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 80c7 	beq.w	800b260 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0d6:	f003 031f 	and.w	r3, r3, #31
 800b0da:	2204      	movs	r2, #4
 800b0dc:	409a      	lsls	r2, r3
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d049      	beq.n	800b180 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d109      	bne.n	800b10a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f000 8210 	beq.w	800b520 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b108:	e20a      	b.n	800b520 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 8206 	beq.w	800b520 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b11c:	e200      	b.n	800b520 <HAL_DMA_IRQHandler+0xe08>
 800b11e:	bf00      	nop
 800b120:	40020010 	.word	0x40020010
 800b124:	40020028 	.word	0x40020028
 800b128:	40020040 	.word	0x40020040
 800b12c:	40020058 	.word	0x40020058
 800b130:	40020070 	.word	0x40020070
 800b134:	40020088 	.word	0x40020088
 800b138:	400200a0 	.word	0x400200a0
 800b13c:	400200b8 	.word	0x400200b8
 800b140:	40020410 	.word	0x40020410
 800b144:	40020428 	.word	0x40020428
 800b148:	40020440 	.word	0x40020440
 800b14c:	40020458 	.word	0x40020458
 800b150:	40020470 	.word	0x40020470
 800b154:	40020488 	.word	0x40020488
 800b158:	400204a0 	.word	0x400204a0
 800b15c:	400204b8 	.word	0x400204b8
 800b160:	58025408 	.word	0x58025408
 800b164:	5802541c 	.word	0x5802541c
 800b168:	58025430 	.word	0x58025430
 800b16c:	58025444 	.word	0x58025444
 800b170:	58025458 	.word	0x58025458
 800b174:	5802546c 	.word	0x5802546c
 800b178:	58025480 	.word	0x58025480
 800b17c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	f003 0320 	and.w	r3, r3, #32
 800b186:	2b00      	cmp	r3, #0
 800b188:	d160      	bne.n	800b24c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a7f      	ldr	r2, [pc, #508]	; (800b38c <HAL_DMA_IRQHandler+0xc74>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d04a      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a7d      	ldr	r2, [pc, #500]	; (800b390 <HAL_DMA_IRQHandler+0xc78>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d045      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a7c      	ldr	r2, [pc, #496]	; (800b394 <HAL_DMA_IRQHandler+0xc7c>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d040      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a7a      	ldr	r2, [pc, #488]	; (800b398 <HAL_DMA_IRQHandler+0xc80>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d03b      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a79      	ldr	r2, [pc, #484]	; (800b39c <HAL_DMA_IRQHandler+0xc84>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d036      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a77      	ldr	r2, [pc, #476]	; (800b3a0 <HAL_DMA_IRQHandler+0xc88>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d031      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a76      	ldr	r2, [pc, #472]	; (800b3a4 <HAL_DMA_IRQHandler+0xc8c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d02c      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a74      	ldr	r2, [pc, #464]	; (800b3a8 <HAL_DMA_IRQHandler+0xc90>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d027      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a73      	ldr	r2, [pc, #460]	; (800b3ac <HAL_DMA_IRQHandler+0xc94>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d022      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a71      	ldr	r2, [pc, #452]	; (800b3b0 <HAL_DMA_IRQHandler+0xc98>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d01d      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a70      	ldr	r2, [pc, #448]	; (800b3b4 <HAL_DMA_IRQHandler+0xc9c>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d018      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a6e      	ldr	r2, [pc, #440]	; (800b3b8 <HAL_DMA_IRQHandler+0xca0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d013      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a6d      	ldr	r2, [pc, #436]	; (800b3bc <HAL_DMA_IRQHandler+0xca4>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d00e      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a6b      	ldr	r2, [pc, #428]	; (800b3c0 <HAL_DMA_IRQHandler+0xca8>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d009      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a6a      	ldr	r2, [pc, #424]	; (800b3c4 <HAL_DMA_IRQHandler+0xcac>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d004      	beq.n	800b22a <HAL_DMA_IRQHandler+0xb12>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a68      	ldr	r2, [pc, #416]	; (800b3c8 <HAL_DMA_IRQHandler+0xcb0>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d108      	bne.n	800b23c <HAL_DMA_IRQHandler+0xb24>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 0208 	bic.w	r2, r2, #8
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	e007      	b.n	800b24c <HAL_DMA_IRQHandler+0xb34>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f022 0204 	bic.w	r2, r2, #4
 800b24a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 8165 	beq.w	800b520 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b25e:	e15f      	b.n	800b520 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b264:	f003 031f 	and.w	r3, r3, #31
 800b268:	2202      	movs	r2, #2
 800b26a:	409a      	lsls	r2, r3
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	4013      	ands	r3, r2
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 80c5 	beq.w	800b400 <HAL_DMA_IRQHandler+0xce8>
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	f003 0302 	and.w	r3, r3, #2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 80bf 	beq.w	800b400 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b286:	f003 031f 	and.w	r3, r3, #31
 800b28a:	2202      	movs	r2, #2
 800b28c:	409a      	lsls	r2, r3
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d018      	beq.n	800b2ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d109      	bne.n	800b2ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 813a 	beq.w	800b524 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2b8:	e134      	b.n	800b524 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f000 8130 	beq.w	800b524 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2cc:	e12a      	b.n	800b524 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	f003 0320 	and.w	r3, r3, #32
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f040 8089 	bne.w	800b3ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a2b      	ldr	r2, [pc, #172]	; (800b38c <HAL_DMA_IRQHandler+0xc74>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d04a      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a29      	ldr	r2, [pc, #164]	; (800b390 <HAL_DMA_IRQHandler+0xc78>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d045      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a28      	ldr	r2, [pc, #160]	; (800b394 <HAL_DMA_IRQHandler+0xc7c>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d040      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a26      	ldr	r2, [pc, #152]	; (800b398 <HAL_DMA_IRQHandler+0xc80>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d03b      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a25      	ldr	r2, [pc, #148]	; (800b39c <HAL_DMA_IRQHandler+0xc84>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d036      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a23      	ldr	r2, [pc, #140]	; (800b3a0 <HAL_DMA_IRQHandler+0xc88>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d031      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a22      	ldr	r2, [pc, #136]	; (800b3a4 <HAL_DMA_IRQHandler+0xc8c>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d02c      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a20      	ldr	r2, [pc, #128]	; (800b3a8 <HAL_DMA_IRQHandler+0xc90>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d027      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a1f      	ldr	r2, [pc, #124]	; (800b3ac <HAL_DMA_IRQHandler+0xc94>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d022      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a1d      	ldr	r2, [pc, #116]	; (800b3b0 <HAL_DMA_IRQHandler+0xc98>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d01d      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a1c      	ldr	r2, [pc, #112]	; (800b3b4 <HAL_DMA_IRQHandler+0xc9c>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d018      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a1a      	ldr	r2, [pc, #104]	; (800b3b8 <HAL_DMA_IRQHandler+0xca0>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d013      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a19      	ldr	r2, [pc, #100]	; (800b3bc <HAL_DMA_IRQHandler+0xca4>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d00e      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a17      	ldr	r2, [pc, #92]	; (800b3c0 <HAL_DMA_IRQHandler+0xca8>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d009      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a16      	ldr	r2, [pc, #88]	; (800b3c4 <HAL_DMA_IRQHandler+0xcac>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d004      	beq.n	800b37a <HAL_DMA_IRQHandler+0xc62>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a14      	ldr	r2, [pc, #80]	; (800b3c8 <HAL_DMA_IRQHandler+0xcb0>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d128      	bne.n	800b3cc <HAL_DMA_IRQHandler+0xcb4>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f022 0214 	bic.w	r2, r2, #20
 800b388:	601a      	str	r2, [r3, #0]
 800b38a:	e027      	b.n	800b3dc <HAL_DMA_IRQHandler+0xcc4>
 800b38c:	40020010 	.word	0x40020010
 800b390:	40020028 	.word	0x40020028
 800b394:	40020040 	.word	0x40020040
 800b398:	40020058 	.word	0x40020058
 800b39c:	40020070 	.word	0x40020070
 800b3a0:	40020088 	.word	0x40020088
 800b3a4:	400200a0 	.word	0x400200a0
 800b3a8:	400200b8 	.word	0x400200b8
 800b3ac:	40020410 	.word	0x40020410
 800b3b0:	40020428 	.word	0x40020428
 800b3b4:	40020440 	.word	0x40020440
 800b3b8:	40020458 	.word	0x40020458
 800b3bc:	40020470 	.word	0x40020470
 800b3c0:	40020488 	.word	0x40020488
 800b3c4:	400204a0 	.word	0x400204a0
 800b3c8:	400204b8 	.word	0x400204b8
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f022 020a 	bic.w	r2, r2, #10
 800b3da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 8097 	beq.w	800b524 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b3fe:	e091      	b.n	800b524 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b404:	f003 031f 	and.w	r3, r3, #31
 800b408:	2208      	movs	r2, #8
 800b40a:	409a      	lsls	r2, r3
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	4013      	ands	r3, r2
 800b410:	2b00      	cmp	r3, #0
 800b412:	f000 8088 	beq.w	800b526 <HAL_DMA_IRQHandler+0xe0e>
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	f003 0308 	and.w	r3, r3, #8
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 8082 	beq.w	800b526 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a41      	ldr	r2, [pc, #260]	; (800b52c <HAL_DMA_IRQHandler+0xe14>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d04a      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a3f      	ldr	r2, [pc, #252]	; (800b530 <HAL_DMA_IRQHandler+0xe18>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d045      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a3e      	ldr	r2, [pc, #248]	; (800b534 <HAL_DMA_IRQHandler+0xe1c>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d040      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a3c      	ldr	r2, [pc, #240]	; (800b538 <HAL_DMA_IRQHandler+0xe20>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d03b      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a3b      	ldr	r2, [pc, #236]	; (800b53c <HAL_DMA_IRQHandler+0xe24>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d036      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a39      	ldr	r2, [pc, #228]	; (800b540 <HAL_DMA_IRQHandler+0xe28>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d031      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a38      	ldr	r2, [pc, #224]	; (800b544 <HAL_DMA_IRQHandler+0xe2c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d02c      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a36      	ldr	r2, [pc, #216]	; (800b548 <HAL_DMA_IRQHandler+0xe30>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d027      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a35      	ldr	r2, [pc, #212]	; (800b54c <HAL_DMA_IRQHandler+0xe34>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d022      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a33      	ldr	r2, [pc, #204]	; (800b550 <HAL_DMA_IRQHandler+0xe38>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d01d      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a32      	ldr	r2, [pc, #200]	; (800b554 <HAL_DMA_IRQHandler+0xe3c>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d018      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a30      	ldr	r2, [pc, #192]	; (800b558 <HAL_DMA_IRQHandler+0xe40>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d013      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a2f      	ldr	r2, [pc, #188]	; (800b55c <HAL_DMA_IRQHandler+0xe44>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d00e      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a2d      	ldr	r2, [pc, #180]	; (800b560 <HAL_DMA_IRQHandler+0xe48>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d009      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a2c      	ldr	r2, [pc, #176]	; (800b564 <HAL_DMA_IRQHandler+0xe4c>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d004      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0xdaa>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a2a      	ldr	r2, [pc, #168]	; (800b568 <HAL_DMA_IRQHandler+0xe50>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d108      	bne.n	800b4d4 <HAL_DMA_IRQHandler+0xdbc>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f022 021c 	bic.w	r2, r2, #28
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	e007      	b.n	800b4e4 <HAL_DMA_IRQHandler+0xdcc>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f022 020e 	bic.w	r2, r2, #14
 800b4e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4e8:	f003 031f 	and.w	r3, r3, #31
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	409a      	lsls	r2, r3
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d009      	beq.n	800b526 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	4798      	blx	r3
 800b51a:	e004      	b.n	800b526 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b51c:	bf00      	nop
 800b51e:	e002      	b.n	800b526 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b520:	bf00      	nop
 800b522:	e000      	b.n	800b526 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b524:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b526:	3728      	adds	r7, #40	; 0x28
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	40020010 	.word	0x40020010
 800b530:	40020028 	.word	0x40020028
 800b534:	40020040 	.word	0x40020040
 800b538:	40020058 	.word	0x40020058
 800b53c:	40020070 	.word	0x40020070
 800b540:	40020088 	.word	0x40020088
 800b544:	400200a0 	.word	0x400200a0
 800b548:	400200b8 	.word	0x400200b8
 800b54c:	40020410 	.word	0x40020410
 800b550:	40020428 	.word	0x40020428
 800b554:	40020440 	.word	0x40020440
 800b558:	40020458 	.word	0x40020458
 800b55c:	40020470 	.word	0x40020470
 800b560:	40020488 	.word	0x40020488
 800b564:	400204a0 	.word	0x400204a0
 800b568:	400204b8 	.word	0x400204b8

0800b56c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
 800b578:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b57e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b584:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a7f      	ldr	r2, [pc, #508]	; (800b788 <DMA_SetConfig+0x21c>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d072      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a7d      	ldr	r2, [pc, #500]	; (800b78c <DMA_SetConfig+0x220>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d06d      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a7c      	ldr	r2, [pc, #496]	; (800b790 <DMA_SetConfig+0x224>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d068      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a7a      	ldr	r2, [pc, #488]	; (800b794 <DMA_SetConfig+0x228>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d063      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a79      	ldr	r2, [pc, #484]	; (800b798 <DMA_SetConfig+0x22c>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d05e      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a77      	ldr	r2, [pc, #476]	; (800b79c <DMA_SetConfig+0x230>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d059      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a76      	ldr	r2, [pc, #472]	; (800b7a0 <DMA_SetConfig+0x234>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d054      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a74      	ldr	r2, [pc, #464]	; (800b7a4 <DMA_SetConfig+0x238>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d04f      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a73      	ldr	r2, [pc, #460]	; (800b7a8 <DMA_SetConfig+0x23c>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d04a      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a71      	ldr	r2, [pc, #452]	; (800b7ac <DMA_SetConfig+0x240>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d045      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a70      	ldr	r2, [pc, #448]	; (800b7b0 <DMA_SetConfig+0x244>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d040      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a6e      	ldr	r2, [pc, #440]	; (800b7b4 <DMA_SetConfig+0x248>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d03b      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a6d      	ldr	r2, [pc, #436]	; (800b7b8 <DMA_SetConfig+0x24c>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d036      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a6b      	ldr	r2, [pc, #428]	; (800b7bc <DMA_SetConfig+0x250>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d031      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a6a      	ldr	r2, [pc, #424]	; (800b7c0 <DMA_SetConfig+0x254>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d02c      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a68      	ldr	r2, [pc, #416]	; (800b7c4 <DMA_SetConfig+0x258>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d027      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a67      	ldr	r2, [pc, #412]	; (800b7c8 <DMA_SetConfig+0x25c>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d022      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a65      	ldr	r2, [pc, #404]	; (800b7cc <DMA_SetConfig+0x260>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d01d      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a64      	ldr	r2, [pc, #400]	; (800b7d0 <DMA_SetConfig+0x264>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d018      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a62      	ldr	r2, [pc, #392]	; (800b7d4 <DMA_SetConfig+0x268>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d013      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a61      	ldr	r2, [pc, #388]	; (800b7d8 <DMA_SetConfig+0x26c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d00e      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a5f      	ldr	r2, [pc, #380]	; (800b7dc <DMA_SetConfig+0x270>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d009      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a5e      	ldr	r2, [pc, #376]	; (800b7e0 <DMA_SetConfig+0x274>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d004      	beq.n	800b676 <DMA_SetConfig+0x10a>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a5c      	ldr	r2, [pc, #368]	; (800b7e4 <DMA_SetConfig+0x278>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d101      	bne.n	800b67a <DMA_SetConfig+0x10e>
 800b676:	2301      	movs	r3, #1
 800b678:	e000      	b.n	800b67c <DMA_SetConfig+0x110>
 800b67a:	2300      	movs	r3, #0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00d      	beq.n	800b69c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b688:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d004      	beq.n	800b69c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b69a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a39      	ldr	r2, [pc, #228]	; (800b788 <DMA_SetConfig+0x21c>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d04a      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a38      	ldr	r2, [pc, #224]	; (800b78c <DMA_SetConfig+0x220>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d045      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a36      	ldr	r2, [pc, #216]	; (800b790 <DMA_SetConfig+0x224>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d040      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a35      	ldr	r2, [pc, #212]	; (800b794 <DMA_SetConfig+0x228>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d03b      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a33      	ldr	r2, [pc, #204]	; (800b798 <DMA_SetConfig+0x22c>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d036      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a32      	ldr	r2, [pc, #200]	; (800b79c <DMA_SetConfig+0x230>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d031      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a30      	ldr	r2, [pc, #192]	; (800b7a0 <DMA_SetConfig+0x234>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d02c      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a2f      	ldr	r2, [pc, #188]	; (800b7a4 <DMA_SetConfig+0x238>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d027      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a2d      	ldr	r2, [pc, #180]	; (800b7a8 <DMA_SetConfig+0x23c>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d022      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a2c      	ldr	r2, [pc, #176]	; (800b7ac <DMA_SetConfig+0x240>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d01d      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a2a      	ldr	r2, [pc, #168]	; (800b7b0 <DMA_SetConfig+0x244>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d018      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a29      	ldr	r2, [pc, #164]	; (800b7b4 <DMA_SetConfig+0x248>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d013      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a27      	ldr	r2, [pc, #156]	; (800b7b8 <DMA_SetConfig+0x24c>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d00e      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a26      	ldr	r2, [pc, #152]	; (800b7bc <DMA_SetConfig+0x250>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d009      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a24      	ldr	r2, [pc, #144]	; (800b7c0 <DMA_SetConfig+0x254>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d004      	beq.n	800b73c <DMA_SetConfig+0x1d0>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a23      	ldr	r2, [pc, #140]	; (800b7c4 <DMA_SetConfig+0x258>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d101      	bne.n	800b740 <DMA_SetConfig+0x1d4>
 800b73c:	2301      	movs	r3, #1
 800b73e:	e000      	b.n	800b742 <DMA_SetConfig+0x1d6>
 800b740:	2300      	movs	r3, #0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d059      	beq.n	800b7fa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b74a:	f003 031f 	and.w	r3, r3, #31
 800b74e:	223f      	movs	r2, #63	; 0x3f
 800b750:	409a      	lsls	r2, r3
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b764:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	2b40      	cmp	r3, #64	; 0x40
 800b774:	d138      	bne.n	800b7e8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	68ba      	ldr	r2, [r7, #8]
 800b784:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b786:	e086      	b.n	800b896 <DMA_SetConfig+0x32a>
 800b788:	40020010 	.word	0x40020010
 800b78c:	40020028 	.word	0x40020028
 800b790:	40020040 	.word	0x40020040
 800b794:	40020058 	.word	0x40020058
 800b798:	40020070 	.word	0x40020070
 800b79c:	40020088 	.word	0x40020088
 800b7a0:	400200a0 	.word	0x400200a0
 800b7a4:	400200b8 	.word	0x400200b8
 800b7a8:	40020410 	.word	0x40020410
 800b7ac:	40020428 	.word	0x40020428
 800b7b0:	40020440 	.word	0x40020440
 800b7b4:	40020458 	.word	0x40020458
 800b7b8:	40020470 	.word	0x40020470
 800b7bc:	40020488 	.word	0x40020488
 800b7c0:	400204a0 	.word	0x400204a0
 800b7c4:	400204b8 	.word	0x400204b8
 800b7c8:	58025408 	.word	0x58025408
 800b7cc:	5802541c 	.word	0x5802541c
 800b7d0:	58025430 	.word	0x58025430
 800b7d4:	58025444 	.word	0x58025444
 800b7d8:	58025458 	.word	0x58025458
 800b7dc:	5802546c 	.word	0x5802546c
 800b7e0:	58025480 	.word	0x58025480
 800b7e4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	60da      	str	r2, [r3, #12]
}
 800b7f8:	e04d      	b.n	800b896 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a29      	ldr	r2, [pc, #164]	; (800b8a4 <DMA_SetConfig+0x338>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d022      	beq.n	800b84a <DMA_SetConfig+0x2de>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a27      	ldr	r2, [pc, #156]	; (800b8a8 <DMA_SetConfig+0x33c>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d01d      	beq.n	800b84a <DMA_SetConfig+0x2de>
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a26      	ldr	r2, [pc, #152]	; (800b8ac <DMA_SetConfig+0x340>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d018      	beq.n	800b84a <DMA_SetConfig+0x2de>
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a24      	ldr	r2, [pc, #144]	; (800b8b0 <DMA_SetConfig+0x344>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d013      	beq.n	800b84a <DMA_SetConfig+0x2de>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a23      	ldr	r2, [pc, #140]	; (800b8b4 <DMA_SetConfig+0x348>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d00e      	beq.n	800b84a <DMA_SetConfig+0x2de>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a21      	ldr	r2, [pc, #132]	; (800b8b8 <DMA_SetConfig+0x34c>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d009      	beq.n	800b84a <DMA_SetConfig+0x2de>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a20      	ldr	r2, [pc, #128]	; (800b8bc <DMA_SetConfig+0x350>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d004      	beq.n	800b84a <DMA_SetConfig+0x2de>
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a1e      	ldr	r2, [pc, #120]	; (800b8c0 <DMA_SetConfig+0x354>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d101      	bne.n	800b84e <DMA_SetConfig+0x2e2>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e000      	b.n	800b850 <DMA_SetConfig+0x2e4>
 800b84e:	2300      	movs	r3, #0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d020      	beq.n	800b896 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b858:	f003 031f 	and.w	r3, r3, #31
 800b85c:	2201      	movs	r2, #1
 800b85e:	409a      	lsls	r2, r3
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	683a      	ldr	r2, [r7, #0]
 800b86a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	2b40      	cmp	r3, #64	; 0x40
 800b872:	d108      	bne.n	800b886 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	60da      	str	r2, [r3, #12]
}
 800b884:	e007      	b.n	800b896 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	60da      	str	r2, [r3, #12]
}
 800b896:	bf00      	nop
 800b898:	371c      	adds	r7, #28
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	58025408 	.word	0x58025408
 800b8a8:	5802541c 	.word	0x5802541c
 800b8ac:	58025430 	.word	0x58025430
 800b8b0:	58025444 	.word	0x58025444
 800b8b4:	58025458 	.word	0x58025458
 800b8b8:	5802546c 	.word	0x5802546c
 800b8bc:	58025480 	.word	0x58025480
 800b8c0:	58025494 	.word	0x58025494

0800b8c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a42      	ldr	r2, [pc, #264]	; (800b9dc <DMA_CalcBaseAndBitshift+0x118>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d04a      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a41      	ldr	r2, [pc, #260]	; (800b9e0 <DMA_CalcBaseAndBitshift+0x11c>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d045      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a3f      	ldr	r2, [pc, #252]	; (800b9e4 <DMA_CalcBaseAndBitshift+0x120>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d040      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a3e      	ldr	r2, [pc, #248]	; (800b9e8 <DMA_CalcBaseAndBitshift+0x124>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d03b      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a3c      	ldr	r2, [pc, #240]	; (800b9ec <DMA_CalcBaseAndBitshift+0x128>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d036      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a3b      	ldr	r2, [pc, #236]	; (800b9f0 <DMA_CalcBaseAndBitshift+0x12c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d031      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a39      	ldr	r2, [pc, #228]	; (800b9f4 <DMA_CalcBaseAndBitshift+0x130>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d02c      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a38      	ldr	r2, [pc, #224]	; (800b9f8 <DMA_CalcBaseAndBitshift+0x134>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d027      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a36      	ldr	r2, [pc, #216]	; (800b9fc <DMA_CalcBaseAndBitshift+0x138>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d022      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a35      	ldr	r2, [pc, #212]	; (800ba00 <DMA_CalcBaseAndBitshift+0x13c>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d01d      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a33      	ldr	r2, [pc, #204]	; (800ba04 <DMA_CalcBaseAndBitshift+0x140>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d018      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a32      	ldr	r2, [pc, #200]	; (800ba08 <DMA_CalcBaseAndBitshift+0x144>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d013      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a30      	ldr	r2, [pc, #192]	; (800ba0c <DMA_CalcBaseAndBitshift+0x148>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d00e      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a2f      	ldr	r2, [pc, #188]	; (800ba10 <DMA_CalcBaseAndBitshift+0x14c>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d009      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a2d      	ldr	r2, [pc, #180]	; (800ba14 <DMA_CalcBaseAndBitshift+0x150>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d004      	beq.n	800b96c <DMA_CalcBaseAndBitshift+0xa8>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a2c      	ldr	r2, [pc, #176]	; (800ba18 <DMA_CalcBaseAndBitshift+0x154>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d101      	bne.n	800b970 <DMA_CalcBaseAndBitshift+0xac>
 800b96c:	2301      	movs	r3, #1
 800b96e:	e000      	b.n	800b972 <DMA_CalcBaseAndBitshift+0xae>
 800b970:	2300      	movs	r3, #0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d024      	beq.n	800b9c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	3b10      	subs	r3, #16
 800b97e:	4a27      	ldr	r2, [pc, #156]	; (800ba1c <DMA_CalcBaseAndBitshift+0x158>)
 800b980:	fba2 2303 	umull	r2, r3, r2, r3
 800b984:	091b      	lsrs	r3, r3, #4
 800b986:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f003 0307 	and.w	r3, r3, #7
 800b98e:	4a24      	ldr	r2, [pc, #144]	; (800ba20 <DMA_CalcBaseAndBitshift+0x15c>)
 800b990:	5cd3      	ldrb	r3, [r2, r3]
 800b992:	461a      	mov	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d908      	bls.n	800b9b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	4b1f      	ldr	r3, [pc, #124]	; (800ba24 <DMA_CalcBaseAndBitshift+0x160>)
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	1d1a      	adds	r2, r3, #4
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	659a      	str	r2, [r3, #88]	; 0x58
 800b9ae:	e00d      	b.n	800b9cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	4b1b      	ldr	r3, [pc, #108]	; (800ba24 <DMA_CalcBaseAndBitshift+0x160>)
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	6593      	str	r3, [r2, #88]	; 0x58
 800b9be:	e005      	b.n	800b9cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	40020010 	.word	0x40020010
 800b9e0:	40020028 	.word	0x40020028
 800b9e4:	40020040 	.word	0x40020040
 800b9e8:	40020058 	.word	0x40020058
 800b9ec:	40020070 	.word	0x40020070
 800b9f0:	40020088 	.word	0x40020088
 800b9f4:	400200a0 	.word	0x400200a0
 800b9f8:	400200b8 	.word	0x400200b8
 800b9fc:	40020410 	.word	0x40020410
 800ba00:	40020428 	.word	0x40020428
 800ba04:	40020440 	.word	0x40020440
 800ba08:	40020458 	.word	0x40020458
 800ba0c:	40020470 	.word	0x40020470
 800ba10:	40020488 	.word	0x40020488
 800ba14:	400204a0 	.word	0x400204a0
 800ba18:	400204b8 	.word	0x400204b8
 800ba1c:	aaaaaaab 	.word	0xaaaaaaab
 800ba20:	08017678 	.word	0x08017678
 800ba24:	fffffc00 	.word	0xfffffc00

0800ba28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d120      	bne.n	800ba7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	d858      	bhi.n	800baf6 <DMA_CheckFifoParam+0xce>
 800ba44:	a201      	add	r2, pc, #4	; (adr r2, 800ba4c <DMA_CheckFifoParam+0x24>)
 800ba46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4a:	bf00      	nop
 800ba4c:	0800ba5d 	.word	0x0800ba5d
 800ba50:	0800ba6f 	.word	0x0800ba6f
 800ba54:	0800ba5d 	.word	0x0800ba5d
 800ba58:	0800baf7 	.word	0x0800baf7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d048      	beq.n	800bafa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba6c:	e045      	b.n	800bafa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ba76:	d142      	bne.n	800bafe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba7c:	e03f      	b.n	800bafe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba86:	d123      	bne.n	800bad0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	d838      	bhi.n	800bb02 <DMA_CheckFifoParam+0xda>
 800ba90:	a201      	add	r2, pc, #4	; (adr r2, 800ba98 <DMA_CheckFifoParam+0x70>)
 800ba92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba96:	bf00      	nop
 800ba98:	0800baa9 	.word	0x0800baa9
 800ba9c:	0800baaf 	.word	0x0800baaf
 800baa0:	0800baa9 	.word	0x0800baa9
 800baa4:	0800bac1 	.word	0x0800bac1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	73fb      	strb	r3, [r7, #15]
        break;
 800baac:	e030      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d025      	beq.n	800bb06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800babe:	e022      	b.n	800bb06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bac8:	d11f      	bne.n	800bb0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bace:	e01c      	b.n	800bb0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad4:	2b02      	cmp	r3, #2
 800bad6:	d902      	bls.n	800bade <DMA_CheckFifoParam+0xb6>
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d003      	beq.n	800bae4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800badc:	e018      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	73fb      	strb	r3, [r7, #15]
        break;
 800bae2:	e015      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00e      	beq.n	800bb0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	73fb      	strb	r3, [r7, #15]
    break;
 800baf4:	e00b      	b.n	800bb0e <DMA_CheckFifoParam+0xe6>
        break;
 800baf6:	bf00      	nop
 800baf8:	e00a      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
        break;
 800bafa:	bf00      	nop
 800bafc:	e008      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
        break;
 800bafe:	bf00      	nop
 800bb00:	e006      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
        break;
 800bb02:	bf00      	nop
 800bb04:	e004      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
        break;
 800bb06:	bf00      	nop
 800bb08:	e002      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
        break;
 800bb0a:	bf00      	nop
 800bb0c:	e000      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
    break;
 800bb0e:	bf00      	nop
    }
  }

  return status;
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop

0800bb20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a38      	ldr	r2, [pc, #224]	; (800bc14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d022      	beq.n	800bb7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a36      	ldr	r2, [pc, #216]	; (800bc18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d01d      	beq.n	800bb7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a35      	ldr	r2, [pc, #212]	; (800bc1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d018      	beq.n	800bb7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a33      	ldr	r2, [pc, #204]	; (800bc20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d013      	beq.n	800bb7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a32      	ldr	r2, [pc, #200]	; (800bc24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d00e      	beq.n	800bb7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a30      	ldr	r2, [pc, #192]	; (800bc28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d009      	beq.n	800bb7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a2f      	ldr	r2, [pc, #188]	; (800bc2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d004      	beq.n	800bb7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a2d      	ldr	r2, [pc, #180]	; (800bc30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d101      	bne.n	800bb82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e000      	b.n	800bb84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800bb82:	2300      	movs	r3, #0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d01a      	beq.n	800bbbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	3b08      	subs	r3, #8
 800bb90:	4a28      	ldr	r2, [pc, #160]	; (800bc34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	091b      	lsrs	r3, r3, #4
 800bb98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	4b26      	ldr	r3, [pc, #152]	; (800bc38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800bb9e:	4413      	add	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	461a      	mov	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	4a24      	ldr	r2, [pc, #144]	; (800bc3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800bbac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f003 031f 	and.w	r3, r3, #31
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	409a      	lsls	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800bbbc:	e024      	b.n	800bc08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	3b10      	subs	r3, #16
 800bbc6:	4a1e      	ldr	r2, [pc, #120]	; (800bc40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800bbc8:	fba2 2303 	umull	r2, r3, r2, r3
 800bbcc:	091b      	lsrs	r3, r3, #4
 800bbce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	4a1c      	ldr	r2, [pc, #112]	; (800bc44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d806      	bhi.n	800bbe6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	4a1b      	ldr	r2, [pc, #108]	; (800bc48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d902      	bls.n	800bbe6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	3308      	adds	r3, #8
 800bbe4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	4b18      	ldr	r3, [pc, #96]	; (800bc4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	461a      	mov	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a16      	ldr	r2, [pc, #88]	; (800bc50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800bbf8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f003 031f 	and.w	r3, r3, #31
 800bc00:	2201      	movs	r2, #1
 800bc02:	409a      	lsls	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bc08:	bf00      	nop
 800bc0a:	3714      	adds	r7, #20
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr
 800bc14:	58025408 	.word	0x58025408
 800bc18:	5802541c 	.word	0x5802541c
 800bc1c:	58025430 	.word	0x58025430
 800bc20:	58025444 	.word	0x58025444
 800bc24:	58025458 	.word	0x58025458
 800bc28:	5802546c 	.word	0x5802546c
 800bc2c:	58025480 	.word	0x58025480
 800bc30:	58025494 	.word	0x58025494
 800bc34:	cccccccd 	.word	0xcccccccd
 800bc38:	16009600 	.word	0x16009600
 800bc3c:	58025880 	.word	0x58025880
 800bc40:	aaaaaaab 	.word	0xaaaaaaab
 800bc44:	400204b8 	.word	0x400204b8
 800bc48:	4002040f 	.word	0x4002040f
 800bc4c:	10008200 	.word	0x10008200
 800bc50:	40020880 	.word	0x40020880

0800bc54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d04a      	beq.n	800bd00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2b08      	cmp	r3, #8
 800bc6e:	d847      	bhi.n	800bd00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a25      	ldr	r2, [pc, #148]	; (800bd0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d022      	beq.n	800bcc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a24      	ldr	r2, [pc, #144]	; (800bd10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d01d      	beq.n	800bcc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a22      	ldr	r2, [pc, #136]	; (800bd14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d018      	beq.n	800bcc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a21      	ldr	r2, [pc, #132]	; (800bd18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d013      	beq.n	800bcc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a1f      	ldr	r2, [pc, #124]	; (800bd1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d00e      	beq.n	800bcc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a1e      	ldr	r2, [pc, #120]	; (800bd20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d009      	beq.n	800bcc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a1c      	ldr	r2, [pc, #112]	; (800bd24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d004      	beq.n	800bcc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a1b      	ldr	r2, [pc, #108]	; (800bd28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d101      	bne.n	800bcc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e000      	b.n	800bcc6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00a      	beq.n	800bce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	4b17      	ldr	r3, [pc, #92]	; (800bd2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800bcce:	4413      	add	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a15      	ldr	r2, [pc, #84]	; (800bd30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800bcdc:	671a      	str	r2, [r3, #112]	; 0x70
 800bcde:	e009      	b.n	800bcf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	4b14      	ldr	r3, [pc, #80]	; (800bd34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800bce4:	4413      	add	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	461a      	mov	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a11      	ldr	r2, [pc, #68]	; (800bd38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800bcf2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	409a      	lsls	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800bd00:	bf00      	nop
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr
 800bd0c:	58025408 	.word	0x58025408
 800bd10:	5802541c 	.word	0x5802541c
 800bd14:	58025430 	.word	0x58025430
 800bd18:	58025444 	.word	0x58025444
 800bd1c:	58025458 	.word	0x58025458
 800bd20:	5802546c 	.word	0x5802546c
 800bd24:	58025480 	.word	0x58025480
 800bd28:	58025494 	.word	0x58025494
 800bd2c:	1600963f 	.word	0x1600963f
 800bd30:	58025940 	.word	0x58025940
 800bd34:	1000823f 	.word	0x1000823f
 800bd38:	40020940 	.word	0x40020940

0800bd3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b089      	sub	sp, #36	; 0x24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bd46:	2300      	movs	r3, #0
 800bd48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800bd4a:	4b89      	ldr	r3, [pc, #548]	; (800bf70 <HAL_GPIO_Init+0x234>)
 800bd4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bd4e:	e194      	b.n	800c07a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	2101      	movs	r1, #1
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	fa01 f303 	lsl.w	r3, r1, r3
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f000 8186 	beq.w	800c074 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	f003 0303 	and.w	r3, r3, #3
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d005      	beq.n	800bd80 <HAL_GPIO_Init+0x44>
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	f003 0303 	and.w	r3, r3, #3
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d130      	bne.n	800bde2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	2203      	movs	r2, #3
 800bd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd90:	43db      	mvns	r3, r3
 800bd92:	69ba      	ldr	r2, [r7, #24]
 800bd94:	4013      	ands	r3, r2
 800bd96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	68da      	ldr	r2, [r3, #12]
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	005b      	lsls	r3, r3, #1
 800bda0:	fa02 f303 	lsl.w	r3, r2, r3
 800bda4:	69ba      	ldr	r2, [r7, #24]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	69ba      	ldr	r2, [r7, #24]
 800bdae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	fa02 f303 	lsl.w	r3, r2, r3
 800bdbe:	43db      	mvns	r3, r3
 800bdc0:	69ba      	ldr	r2, [r7, #24]
 800bdc2:	4013      	ands	r3, r2
 800bdc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	091b      	lsrs	r3, r3, #4
 800bdcc:	f003 0201 	and.w	r2, r3, #1
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd6:	69ba      	ldr	r2, [r7, #24]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	69ba      	ldr	r2, [r7, #24]
 800bde0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	f003 0303 	and.w	r3, r3, #3
 800bdea:	2b03      	cmp	r3, #3
 800bdec:	d017      	beq.n	800be1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	005b      	lsls	r3, r3, #1
 800bdf8:	2203      	movs	r2, #3
 800bdfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfe:	43db      	mvns	r3, r3
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	4013      	ands	r3, r2
 800be04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	689a      	ldr	r2, [r3, #8]
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	fa02 f303 	lsl.w	r3, r2, r3
 800be12:	69ba      	ldr	r2, [r7, #24]
 800be14:	4313      	orrs	r3, r2
 800be16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	69ba      	ldr	r2, [r7, #24]
 800be1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f003 0303 	and.w	r3, r3, #3
 800be26:	2b02      	cmp	r3, #2
 800be28:	d123      	bne.n	800be72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	08da      	lsrs	r2, r3, #3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	3208      	adds	r2, #8
 800be32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	f003 0307 	and.w	r3, r3, #7
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	220f      	movs	r2, #15
 800be42:	fa02 f303 	lsl.w	r3, r2, r3
 800be46:	43db      	mvns	r3, r3
 800be48:	69ba      	ldr	r2, [r7, #24]
 800be4a:	4013      	ands	r3, r2
 800be4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	691a      	ldr	r2, [r3, #16]
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	f003 0307 	and.w	r3, r3, #7
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	fa02 f303 	lsl.w	r3, r2, r3
 800be5e:	69ba      	ldr	r2, [r7, #24]
 800be60:	4313      	orrs	r3, r2
 800be62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	08da      	lsrs	r2, r3, #3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3208      	adds	r2, #8
 800be6c:	69b9      	ldr	r1, [r7, #24]
 800be6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	005b      	lsls	r3, r3, #1
 800be7c:	2203      	movs	r2, #3
 800be7e:	fa02 f303 	lsl.w	r3, r2, r3
 800be82:	43db      	mvns	r3, r3
 800be84:	69ba      	ldr	r2, [r7, #24]
 800be86:	4013      	ands	r3, r2
 800be88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	f003 0203 	and.w	r2, r3, #3
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	fa02 f303 	lsl.w	r3, r2, r3
 800be9a:	69ba      	ldr	r2, [r7, #24]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	69ba      	ldr	r2, [r7, #24]
 800bea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f000 80e0 	beq.w	800c074 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800beb4:	4b2f      	ldr	r3, [pc, #188]	; (800bf74 <HAL_GPIO_Init+0x238>)
 800beb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800beba:	4a2e      	ldr	r2, [pc, #184]	; (800bf74 <HAL_GPIO_Init+0x238>)
 800bebc:	f043 0302 	orr.w	r3, r3, #2
 800bec0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800bec4:	4b2b      	ldr	r3, [pc, #172]	; (800bf74 <HAL_GPIO_Init+0x238>)
 800bec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800beca:	f003 0302 	and.w	r3, r3, #2
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bed2:	4a29      	ldr	r2, [pc, #164]	; (800bf78 <HAL_GPIO_Init+0x23c>)
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	089b      	lsrs	r3, r3, #2
 800bed8:	3302      	adds	r3, #2
 800beda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	f003 0303 	and.w	r3, r3, #3
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	220f      	movs	r2, #15
 800beea:	fa02 f303 	lsl.w	r3, r2, r3
 800beee:	43db      	mvns	r3, r3
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	4013      	ands	r3, r2
 800bef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a20      	ldr	r2, [pc, #128]	; (800bf7c <HAL_GPIO_Init+0x240>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d052      	beq.n	800bfa4 <HAL_GPIO_Init+0x268>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a1f      	ldr	r2, [pc, #124]	; (800bf80 <HAL_GPIO_Init+0x244>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d031      	beq.n	800bf6a <HAL_GPIO_Init+0x22e>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4a1e      	ldr	r2, [pc, #120]	; (800bf84 <HAL_GPIO_Init+0x248>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d02b      	beq.n	800bf66 <HAL_GPIO_Init+0x22a>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4a1d      	ldr	r2, [pc, #116]	; (800bf88 <HAL_GPIO_Init+0x24c>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d025      	beq.n	800bf62 <HAL_GPIO_Init+0x226>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4a1c      	ldr	r2, [pc, #112]	; (800bf8c <HAL_GPIO_Init+0x250>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d01f      	beq.n	800bf5e <HAL_GPIO_Init+0x222>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a1b      	ldr	r2, [pc, #108]	; (800bf90 <HAL_GPIO_Init+0x254>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d019      	beq.n	800bf5a <HAL_GPIO_Init+0x21e>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a1a      	ldr	r2, [pc, #104]	; (800bf94 <HAL_GPIO_Init+0x258>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d013      	beq.n	800bf56 <HAL_GPIO_Init+0x21a>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a19      	ldr	r2, [pc, #100]	; (800bf98 <HAL_GPIO_Init+0x25c>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d00d      	beq.n	800bf52 <HAL_GPIO_Init+0x216>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a18      	ldr	r2, [pc, #96]	; (800bf9c <HAL_GPIO_Init+0x260>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d007      	beq.n	800bf4e <HAL_GPIO_Init+0x212>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a17      	ldr	r2, [pc, #92]	; (800bfa0 <HAL_GPIO_Init+0x264>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d101      	bne.n	800bf4a <HAL_GPIO_Init+0x20e>
 800bf46:	2309      	movs	r3, #9
 800bf48:	e02d      	b.n	800bfa6 <HAL_GPIO_Init+0x26a>
 800bf4a:	230a      	movs	r3, #10
 800bf4c:	e02b      	b.n	800bfa6 <HAL_GPIO_Init+0x26a>
 800bf4e:	2308      	movs	r3, #8
 800bf50:	e029      	b.n	800bfa6 <HAL_GPIO_Init+0x26a>
 800bf52:	2307      	movs	r3, #7
 800bf54:	e027      	b.n	800bfa6 <HAL_GPIO_Init+0x26a>
 800bf56:	2306      	movs	r3, #6
 800bf58:	e025      	b.n	800bfa6 <HAL_GPIO_Init+0x26a>
 800bf5a:	2305      	movs	r3, #5
 800bf5c:	e023      	b.n	800bfa6 <HAL_GPIO_Init+0x26a>
 800bf5e:	2304      	movs	r3, #4
 800bf60:	e021      	b.n	800bfa6 <HAL_GPIO_Init+0x26a>
 800bf62:	2303      	movs	r3, #3
 800bf64:	e01f      	b.n	800bfa6 <HAL_GPIO_Init+0x26a>
 800bf66:	2302      	movs	r3, #2
 800bf68:	e01d      	b.n	800bfa6 <HAL_GPIO_Init+0x26a>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e01b      	b.n	800bfa6 <HAL_GPIO_Init+0x26a>
 800bf6e:	bf00      	nop
 800bf70:	58000080 	.word	0x58000080
 800bf74:	58024400 	.word	0x58024400
 800bf78:	58000400 	.word	0x58000400
 800bf7c:	58020000 	.word	0x58020000
 800bf80:	58020400 	.word	0x58020400
 800bf84:	58020800 	.word	0x58020800
 800bf88:	58020c00 	.word	0x58020c00
 800bf8c:	58021000 	.word	0x58021000
 800bf90:	58021400 	.word	0x58021400
 800bf94:	58021800 	.word	0x58021800
 800bf98:	58021c00 	.word	0x58021c00
 800bf9c:	58022000 	.word	0x58022000
 800bfa0:	58022400 	.word	0x58022400
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	69fa      	ldr	r2, [r7, #28]
 800bfa8:	f002 0203 	and.w	r2, r2, #3
 800bfac:	0092      	lsls	r2, r2, #2
 800bfae:	4093      	lsls	r3, r2
 800bfb0:	69ba      	ldr	r2, [r7, #24]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bfb6:	4938      	ldr	r1, [pc, #224]	; (800c098 <HAL_GPIO_Init+0x35c>)
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	089b      	lsrs	r3, r3, #2
 800bfbc:	3302      	adds	r3, #2
 800bfbe:	69ba      	ldr	r2, [r7, #24]
 800bfc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bfc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	43db      	mvns	r3, r3
 800bfd0:	69ba      	ldr	r2, [r7, #24]
 800bfd2:	4013      	ands	r3, r2
 800bfd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d003      	beq.n	800bfea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800bfe2:	69ba      	ldr	r2, [r7, #24]
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800bfea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	43db      	mvns	r3, r3
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	4013      	ands	r3, r2
 800c002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d003      	beq.n	800c018 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c010:	69ba      	ldr	r2, [r7, #24]
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	4313      	orrs	r3, r2
 800c016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	43db      	mvns	r3, r3
 800c02a:	69ba      	ldr	r2, [r7, #24]
 800c02c:	4013      	ands	r3, r2
 800c02e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d003      	beq.n	800c044 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c03c:	69ba      	ldr	r2, [r7, #24]
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	4313      	orrs	r3, r2
 800c042:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	69ba      	ldr	r2, [r7, #24]
 800c048:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	43db      	mvns	r3, r3
 800c054:	69ba      	ldr	r2, [r7, #24]
 800c056:	4013      	ands	r3, r2
 800c058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c066:	69ba      	ldr	r2, [r7, #24]
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	4313      	orrs	r3, r2
 800c06c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	69ba      	ldr	r2, [r7, #24]
 800c072:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	3301      	adds	r3, #1
 800c078:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	fa22 f303 	lsr.w	r3, r2, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	f47f ae63 	bne.w	800bd50 <HAL_GPIO_Init+0x14>
  }
}
 800c08a:	bf00      	nop
 800c08c:	bf00      	nop
 800c08e:	3724      	adds	r7, #36	; 0x24
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr
 800c098:	58000400 	.word	0x58000400

0800c09c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	691a      	ldr	r2, [r3, #16]
 800c0ac:	887b      	ldrh	r3, [r7, #2]
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	73fb      	strb	r3, [r7, #15]
 800c0b8:	e001      	b.n	800c0be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3714      	adds	r7, #20
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	807b      	strh	r3, [r7, #2]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c0dc:	787b      	ldrb	r3, [r7, #1]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d003      	beq.n	800c0ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c0e2:	887a      	ldrh	r2, [r7, #2]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800c0e8:	e003      	b.n	800c0f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c0ea:	887b      	ldrh	r3, [r7, #2]
 800c0ec:	041a      	lsls	r2, r3, #16
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	619a      	str	r2, [r3, #24]
}
 800c0f2:	bf00      	nop
 800c0f4:	370c      	adds	r7, #12
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr

0800c0fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c0fe:	b480      	push	{r7}
 800c100:	b085      	sub	sp, #20
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
 800c106:	460b      	mov	r3, r1
 800c108:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c110:	887a      	ldrh	r2, [r7, #2]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	4013      	ands	r3, r2
 800c116:	041a      	lsls	r2, r3, #16
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	43d9      	mvns	r1, r3
 800c11c:	887b      	ldrh	r3, [r7, #2]
 800c11e:	400b      	ands	r3, r1
 800c120:	431a      	orrs	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	619a      	str	r2, [r3, #24]
}
 800c126:	bf00      	nop
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b082      	sub	sp, #8
 800c136:	af00      	add	r7, sp, #0
 800c138:	4603      	mov	r3, r0
 800c13a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800c13c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c140:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c144:	88fb      	ldrh	r3, [r7, #6]
 800c146:	4013      	ands	r3, r2
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d008      	beq.n	800c15e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c14c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c150:	88fb      	ldrh	r3, [r7, #6]
 800c152:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c156:	88fb      	ldrh	r3, [r7, #6]
 800c158:	4618      	mov	r0, r3
 800c15a:	f7f8 fc27 	bl	80049ac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800c15e:	bf00      	nop
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b084      	sub	sp, #16
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e041      	b.n	800c1fc <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800c180:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f245 5255 	movw	r2, #21845	; 0x5555
 800c18a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	6852      	ldr	r2, [r2, #4]
 800c194:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	6892      	ldr	r2, [r2, #8]
 800c19e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c1a0:	f7fb f8c4 	bl	800732c <HAL_GetTick>
 800c1a4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c1a6:	e00f      	b.n	800c1c8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c1a8:	f7fb f8c0 	bl	800732c <HAL_GetTick>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	2b31      	cmp	r3, #49	; 0x31
 800c1b4:	d908      	bls.n	800c1c8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	f003 0307 	and.w	r3, r3, #7
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d001      	beq.n	800c1c8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e019      	b.n	800c1fc <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	f003 0307 	and.w	r3, r3, #7
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d1e8      	bne.n	800c1a8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	691a      	ldr	r2, [r3, #16]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d005      	beq.n	800c1f0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	68d2      	ldr	r2, [r2, #12]
 800c1ec:	611a      	str	r2, [r3, #16]
 800c1ee:	e004      	b.n	800c1fa <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c1f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c214:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c22c:	4b19      	ldr	r3, [pc, #100]	; (800c294 <HAL_PWREx_ConfigSupply+0x70>)
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	f003 0304 	and.w	r3, r3, #4
 800c234:	2b04      	cmp	r3, #4
 800c236:	d00a      	beq.n	800c24e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c238:	4b16      	ldr	r3, [pc, #88]	; (800c294 <HAL_PWREx_ConfigSupply+0x70>)
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	f003 0307 	and.w	r3, r3, #7
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	429a      	cmp	r2, r3
 800c244:	d001      	beq.n	800c24a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	e01f      	b.n	800c28a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	e01d      	b.n	800c28a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c24e:	4b11      	ldr	r3, [pc, #68]	; (800c294 <HAL_PWREx_ConfigSupply+0x70>)
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	f023 0207 	bic.w	r2, r3, #7
 800c256:	490f      	ldr	r1, [pc, #60]	; (800c294 <HAL_PWREx_ConfigSupply+0x70>)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c25e:	f7fb f865 	bl	800732c <HAL_GetTick>
 800c262:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c264:	e009      	b.n	800c27a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c266:	f7fb f861 	bl	800732c <HAL_GetTick>
 800c26a:	4602      	mov	r2, r0
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c274:	d901      	bls.n	800c27a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e007      	b.n	800c28a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c27a:	4b06      	ldr	r3, [pc, #24]	; (800c294 <HAL_PWREx_ConfigSupply+0x70>)
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c286:	d1ee      	bne.n	800c266 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	58024800 	.word	0x58024800

0800c298 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af02      	add	r7, sp, #8
 800c29e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c2a0:	f7fb f844 	bl	800732c <HAL_GetTick>
 800c2a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d101      	bne.n	800c2b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e05f      	b.n	800c370 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d107      	bne.n	800c2cc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f7fa fb07 	bl	80068d0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c2c2:	f241 3188 	movw	r1, #5000	; 0x1388
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fa5e 	bl	800c788 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	021a      	lsls	r2, r3, #8
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	430a      	orrs	r2, r1
 800c2e4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	2120      	movs	r1, #32
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fa56 	bl	800c7a4 <QSPI_WaitFlagStateUntilTimeout>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c2fc:	7afb      	ldrb	r3, [r7, #11]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d135      	bne.n	800c36e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <HAL_QSPI_Init+0xe0>)
 800c30a:	4013      	ands	r3, r2
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	6852      	ldr	r2, [r2, #4]
 800c310:	0611      	lsls	r1, r2, #24
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	68d2      	ldr	r2, [r2, #12]
 800c316:	4311      	orrs	r1, r2
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	69d2      	ldr	r2, [r2, #28]
 800c31c:	4311      	orrs	r1, r2
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	6a12      	ldr	r2, [r2, #32]
 800c322:	4311      	orrs	r1, r2
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	6812      	ldr	r2, [r2, #0]
 800c328:	430b      	orrs	r3, r1
 800c32a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	685a      	ldr	r2, [r3, #4]
 800c332:	4b12      	ldr	r3, [pc, #72]	; (800c37c <HAL_QSPI_Init+0xe4>)
 800c334:	4013      	ands	r3, r2
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	6912      	ldr	r2, [r2, #16]
 800c33a:	0411      	lsls	r1, r2, #16
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	6952      	ldr	r2, [r2, #20]
 800c340:	4311      	orrs	r1, r2
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	6992      	ldr	r2, [r2, #24]
 800c346:	4311      	orrs	r1, r2
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	6812      	ldr	r2, [r2, #0]
 800c34c:	430b      	orrs	r3, r1
 800c34e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f042 0201 	orr.w	r2, r2, #1
 800c35e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800c36e:	7afb      	ldrb	r3, [r7, #11]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	00ffff2f 	.word	0x00ffff2f
 800c37c:	ffe0f8fe 	.word	0xffe0f8fe

0800c380 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af02      	add	r7, sp, #8
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c38c:	f7fa ffce 	bl	800732c <HAL_GetTick>
 800c390:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d101      	bne.n	800c3a2 <HAL_QSPI_Command+0x22>
 800c39e:	2302      	movs	r3, #2
 800c3a0:	e048      	b.n	800c434 <HAL_QSPI_Command+0xb4>
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d137      	bne.n	800c426 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2202      	movs	r2, #2
 800c3c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	2120      	movs	r1, #32
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 f9e8 	bl	800c7a4 <QSPI_WaitFlagStateUntilTimeout>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c3d8:	7dfb      	ldrb	r3, [r7, #23]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d125      	bne.n	800c42a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c3de:	2200      	movs	r2, #0
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f000 fa15 	bl	800c812 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d115      	bne.n	800c41c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	2102      	movs	r1, #2
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f000 f9d2 	bl	800c7a4 <QSPI_WaitFlagStateUntilTimeout>
 800c400:	4603      	mov	r3, r0
 800c402:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800c404:	7dfb      	ldrb	r3, [r7, #23]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10f      	bne.n	800c42a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2202      	movs	r2, #2
 800c410:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c41a:	e006      	b.n	800c42a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2201      	movs	r2, #1
 800c420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c424:	e001      	b.n	800c42a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c426:	2302      	movs	r3, #2
 800c428:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c432:	7dfb      	ldrb	r3, [r7, #23]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b08a      	sub	sp, #40	; 0x28
 800c440:	af02      	add	r7, sp, #8
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c448:	2300      	movs	r3, #0
 800c44a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c44c:	f7fa ff6e 	bl	800732c <HAL_GetTick>
 800c450:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3320      	adds	r3, #32
 800c458:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c460:	b2db      	uxtb	r3, r3
 800c462:	2b01      	cmp	r3, #1
 800c464:	d101      	bne.n	800c46a <HAL_QSPI_Transmit+0x2e>
 800c466:	2302      	movs	r3, #2
 800c468:	e076      	b.n	800c558 <HAL_QSPI_Transmit+0x11c>
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2201      	movs	r2, #1
 800c46e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d165      	bne.n	800c54a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2200      	movs	r2, #0
 800c482:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d056      	beq.n	800c538 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2212      	movs	r2, #18
 800c48e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	1c5a      	adds	r2, r3, #1
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	1c5a      	adds	r2, r3, #1
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	695a      	ldr	r2, [r3, #20]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c4be:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c4c0:	e01b      	b.n	800c4fa <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	2104      	movs	r1, #4
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 f969 	bl	800c7a4 <QSPI_WaitFlagStateUntilTimeout>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c4d6:	7ffb      	ldrb	r3, [r7, #31]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d113      	bne.n	800c504 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e0:	781a      	ldrb	r2, [r3, #0]
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ea:	1c5a      	adds	r2, r3, #1
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	1e5a      	subs	r2, r3, #1
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1df      	bne.n	800c4c2 <HAL_QSPI_Transmit+0x86>
 800c502:	e000      	b.n	800c506 <HAL_QSPI_Transmit+0xca>
          break;
 800c504:	bf00      	nop
      }

      if (status == HAL_OK)
 800c506:	7ffb      	ldrb	r3, [r7, #31]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d110      	bne.n	800c52e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	2201      	movs	r2, #1
 800c514:	2102      	movs	r1, #2
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f000 f944 	bl	800c7a4 <QSPI_WaitFlagStateUntilTimeout>
 800c51c:	4603      	mov	r3, r0
 800c51e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c520:	7ffb      	ldrb	r3, [r7, #31]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d103      	bne.n	800c52e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2202      	movs	r2, #2
 800c52c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2201      	movs	r2, #1
 800c532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c536:	e00a      	b.n	800c54e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c53c:	f043 0208 	orr.w	r2, r3, #8
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	77fb      	strb	r3, [r7, #31]
 800c548:	e001      	b.n	800c54e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c54a:	2302      	movs	r3, #2
 800c54c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2200      	movs	r2, #0
 800c552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c556:	7ffb      	ldrb	r3, [r7, #31]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3720      	adds	r7, #32
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b08a      	sub	sp, #40	; 0x28
 800c564:	af02      	add	r7, sp, #8
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c56c:	2300      	movs	r3, #0
 800c56e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c570:	f7fa fedc 	bl	800732c <HAL_GetTick>
 800c574:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	699b      	ldr	r3, [r3, #24]
 800c57c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	3320      	adds	r3, #32
 800c584:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d101      	bne.n	800c596 <HAL_QSPI_Receive+0x36>
 800c592:	2302      	movs	r3, #2
 800c594:	e07d      	b.n	800c692 <HAL_QSPI_Receive+0x132>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d16c      	bne.n	800c684 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d05d      	beq.n	800c672 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2222      	movs	r2, #34	; 0x22
 800c5ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	1c5a      	adds	r2, r3, #1
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	691b      	ldr	r3, [r3, #16]
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	68ba      	ldr	r2, [r7, #8]
 800c5da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c5ee:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c5f8:	e01c      	b.n	800c634 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	2201      	movs	r2, #1
 800c602:	2106      	movs	r1, #6
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f000 f8cd 	bl	800c7a4 <QSPI_WaitFlagStateUntilTimeout>
 800c60a:	4603      	mov	r3, r0
 800c60c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c60e:	7ffb      	ldrb	r3, [r7, #31]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d114      	bne.n	800c63e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	7812      	ldrb	r2, [r2, #0]
 800c61c:	b2d2      	uxtb	r2, r2
 800c61e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c624:	1c5a      	adds	r2, r3, #1
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c62e:	1e5a      	subs	r2, r3, #1
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1de      	bne.n	800c5fa <HAL_QSPI_Receive+0x9a>
 800c63c:	e000      	b.n	800c640 <HAL_QSPI_Receive+0xe0>
          break;
 800c63e:	bf00      	nop
      }

      if (status == HAL_OK)
 800c640:	7ffb      	ldrb	r3, [r7, #31]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d110      	bne.n	800c668 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	9300      	str	r3, [sp, #0]
 800c64a:	69bb      	ldr	r3, [r7, #24]
 800c64c:	2201      	movs	r2, #1
 800c64e:	2102      	movs	r1, #2
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f000 f8a7 	bl	800c7a4 <QSPI_WaitFlagStateUntilTimeout>
 800c656:	4603      	mov	r3, r0
 800c658:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c65a:	7ffb      	ldrb	r3, [r7, #31]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d103      	bne.n	800c668 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2202      	movs	r2, #2
 800c666:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c670:	e00a      	b.n	800c688 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c676:	f043 0208 	orr.w	r2, r3, #8
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	77fb      	strb	r3, [r7, #31]
 800c682:	e001      	b.n	800c688 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c684:	2302      	movs	r3, #2
 800c686:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c690:	7ffb      	ldrb	r3, [r7, #31]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3720      	adds	r7, #32
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b088      	sub	sp, #32
 800c69e:	af02      	add	r7, sp, #8
 800c6a0:	60f8      	str	r0, [r7, #12]
 800c6a2:	60b9      	str	r1, [r7, #8]
 800c6a4:	607a      	str	r2, [r7, #4]
 800c6a6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c6a8:	f7fa fe40 	bl	800732c <HAL_GetTick>
 800c6ac:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d101      	bne.n	800c6be <HAL_QSPI_AutoPolling+0x24>
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	e060      	b.n	800c780 <HAL_QSPI_AutoPolling+0xe6>
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d14f      	bne.n	800c772 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2242      	movs	r2, #66	; 0x42
 800c6dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2120      	movs	r1, #32
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f000 f85a 	bl	800c7a4 <QSPI_WaitFlagStateUntilTimeout>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c6f4:	7dfb      	ldrb	r3, [r7, #23]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d13d      	bne.n	800c776 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	6812      	ldr	r2, [r2, #0]
 800c702:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	6852      	ldr	r2, [r2, #4]
 800c70c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	6892      	ldr	r2, [r2, #8]
 800c716:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	431a      	orrs	r2, r3
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c730:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68da      	ldr	r2, [r3, #12]
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c73a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c73e:	68b9      	ldr	r1, [r7, #8]
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f000 f866 	bl	800c812 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	2201      	movs	r2, #1
 800c74e:	2108      	movs	r1, #8
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f000 f827 	bl	800c7a4 <QSPI_WaitFlagStateUntilTimeout>
 800c756:	4603      	mov	r3, r0
 800c758:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10a      	bne.n	800c776 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2208      	movs	r2, #8
 800c766:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c770:	e001      	b.n	800c776 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c772:	2302      	movs	r3, #2
 800c774:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2200      	movs	r2, #0
 800c77a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3718      	adds	r7, #24
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	60b9      	str	r1, [r7, #8]
 800c7ae:	603b      	str	r3, [r7, #0]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c7b4:	e01a      	b.n	800c7ec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7bc:	d016      	beq.n	800c7ec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7be:	f7fa fdb5 	bl	800732c <HAL_GetTick>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	69ba      	ldr	r2, [r7, #24]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d302      	bcc.n	800c7d4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10b      	bne.n	800c7ec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2204      	movs	r2, #4
 800c7d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7e0:	f043 0201 	orr.w	r2, r3, #1
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e00e      	b.n	800c80a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	689a      	ldr	r2, [r3, #8]
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	bf14      	ite	ne
 800c7fa:	2301      	movne	r3, #1
 800c7fc:	2300      	moveq	r3, #0
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	461a      	mov	r2, r3
 800c802:	79fb      	ldrb	r3, [r7, #7]
 800c804:	429a      	cmp	r2, r3
 800c806:	d1d6      	bne.n	800c7b6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c808:	2300      	movs	r3, #0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}

0800c812 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c812:	b480      	push	{r7}
 800c814:	b085      	sub	sp, #20
 800c816:	af00      	add	r7, sp, #0
 800c818:	60f8      	str	r0, [r7, #12]
 800c81a:	60b9      	str	r1, [r7, #8]
 800c81c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c822:	2b00      	cmp	r3, #0
 800c824:	d009      	beq.n	800c83a <QSPI_Config+0x28>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c82c:	d005      	beq.n	800c83a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	3a01      	subs	r2, #1
 800c838:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f000 80b9 	beq.w	800c9b6 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	6a1b      	ldr	r3, [r3, #32]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d05f      	beq.n	800c90c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68ba      	ldr	r2, [r7, #8]
 800c852:	6892      	ldr	r2, [r2, #8]
 800c854:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	69db      	ldr	r3, [r3, #28]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d031      	beq.n	800c8c2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c866:	431a      	orrs	r2, r3
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c86c:	431a      	orrs	r2, r3
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c872:	431a      	orrs	r2, r3
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	049b      	lsls	r3, r3, #18
 800c87a:	431a      	orrs	r2, r3
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	431a      	orrs	r2, r3
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	431a      	orrs	r2, r3
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	431a      	orrs	r2, r3
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	69db      	ldr	r3, [r3, #28]
 800c892:	431a      	orrs	r2, r3
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	431a      	orrs	r2, r3
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	ea42 0103 	orr.w	r1, r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	430a      	orrs	r2, r1
 800c8aa:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c8b2:	f000 812e 	beq.w	800cb12 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	6852      	ldr	r2, [r2, #4]
 800c8be:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800c8c0:	e127      	b.n	800cb12 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8d0:	431a      	orrs	r2, r3
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d6:	431a      	orrs	r2, r3
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	695b      	ldr	r3, [r3, #20]
 800c8dc:	049b      	lsls	r3, r3, #18
 800c8de:	431a      	orrs	r2, r3
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	431a      	orrs	r2, r3
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	6a1b      	ldr	r3, [r3, #32]
 800c8ea:	431a      	orrs	r2, r3
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	69db      	ldr	r3, [r3, #28]
 800c8f0:	431a      	orrs	r2, r3
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	699b      	ldr	r3, [r3, #24]
 800c8f6:	431a      	orrs	r2, r3
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	ea42 0103 	orr.w	r1, r2, r3
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	430a      	orrs	r2, r1
 800c908:	615a      	str	r2, [r3, #20]
}
 800c90a:	e102      	b.n	800cb12 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	69db      	ldr	r3, [r3, #28]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d02e      	beq.n	800c972 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91c:	431a      	orrs	r2, r3
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c922:	431a      	orrs	r2, r3
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c928:	431a      	orrs	r2, r3
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	049b      	lsls	r3, r3, #18
 800c930:	431a      	orrs	r2, r3
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	431a      	orrs	r2, r3
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	431a      	orrs	r2, r3
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	431a      	orrs	r2, r3
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	699b      	ldr	r3, [r3, #24]
 800c948:	431a      	orrs	r2, r3
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	ea42 0103 	orr.w	r1, r2, r3
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	430a      	orrs	r2, r1
 800c95a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c962:	f000 80d6 	beq.w	800cb12 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	6852      	ldr	r2, [r2, #4]
 800c96e:	619a      	str	r2, [r3, #24]
}
 800c970:	e0cf      	b.n	800cb12 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97a:	431a      	orrs	r2, r3
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c980:	431a      	orrs	r2, r3
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c986:	431a      	orrs	r2, r3
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	695b      	ldr	r3, [r3, #20]
 800c98c:	049b      	lsls	r3, r3, #18
 800c98e:	431a      	orrs	r2, r3
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	6a1b      	ldr	r3, [r3, #32]
 800c994:	431a      	orrs	r2, r3
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	69db      	ldr	r3, [r3, #28]
 800c99a:	431a      	orrs	r2, r3
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	431a      	orrs	r2, r3
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	ea42 0103 	orr.w	r1, r2, r3
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	430a      	orrs	r2, r1
 800c9b2:	615a      	str	r2, [r3, #20]
}
 800c9b4:	e0ad      	b.n	800cb12 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d058      	beq.n	800ca70 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	6892      	ldr	r2, [r2, #8]
 800c9c6:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	69db      	ldr	r3, [r3, #28]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d02d      	beq.n	800ca2c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d8:	431a      	orrs	r2, r3
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9de:	431a      	orrs	r2, r3
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e4:	431a      	orrs	r2, r3
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	049b      	lsls	r3, r3, #18
 800c9ec:	431a      	orrs	r2, r3
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	431a      	orrs	r2, r3
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	6a1b      	ldr	r3, [r3, #32]
 800c9f8:	431a      	orrs	r2, r3
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	431a      	orrs	r2, r3
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	431a      	orrs	r2, r3
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	699b      	ldr	r3, [r3, #24]
 800ca0a:	ea42 0103 	orr.w	r1, r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	430a      	orrs	r2, r1
 800ca16:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ca1e:	d078      	beq.n	800cb12 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	6852      	ldr	r2, [r2, #4]
 800ca28:	619a      	str	r2, [r3, #24]
}
 800ca2a:	e072      	b.n	800cb12 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca34:	431a      	orrs	r2, r3
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca40:	431a      	orrs	r2, r3
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	695b      	ldr	r3, [r3, #20]
 800ca46:	049b      	lsls	r3, r3, #18
 800ca48:	431a      	orrs	r2, r3
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	431a      	orrs	r2, r3
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	431a      	orrs	r2, r3
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	69db      	ldr	r3, [r3, #28]
 800ca5a:	431a      	orrs	r2, r3
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	699b      	ldr	r3, [r3, #24]
 800ca60:	ea42 0103 	orr.w	r1, r2, r3
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	430a      	orrs	r2, r1
 800ca6c:	615a      	str	r2, [r3, #20]
}
 800ca6e:	e050      	b.n	800cb12 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	69db      	ldr	r3, [r3, #28]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d02a      	beq.n	800cace <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca80:	431a      	orrs	r2, r3
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca86:	431a      	orrs	r2, r3
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca8c:	431a      	orrs	r2, r3
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	695b      	ldr	r3, [r3, #20]
 800ca92:	049b      	lsls	r3, r3, #18
 800ca94:	431a      	orrs	r2, r3
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	431a      	orrs	r2, r3
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	431a      	orrs	r2, r3
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	69db      	ldr	r3, [r3, #28]
 800caa6:	431a      	orrs	r2, r3
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	ea42 0103 	orr.w	r1, r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	430a      	orrs	r2, r1
 800cab8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cac0:	d027      	beq.n	800cb12 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	6852      	ldr	r2, [r2, #4]
 800caca:	619a      	str	r2, [r3, #24]
}
 800cacc:	e021      	b.n	800cb12 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d01d      	beq.n	800cb12 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cade:	431a      	orrs	r2, r3
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cae4:	431a      	orrs	r2, r3
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caea:	431a      	orrs	r2, r3
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	049b      	lsls	r3, r3, #18
 800caf2:	431a      	orrs	r2, r3
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	6a1b      	ldr	r3, [r3, #32]
 800caf8:	431a      	orrs	r2, r3
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	431a      	orrs	r2, r3
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	ea42 0103 	orr.w	r1, r2, r3
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	430a      	orrs	r2, r1
 800cb10:	615a      	str	r2, [r3, #20]
}
 800cb12:	bf00      	nop
 800cb14:	3714      	adds	r7, #20
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
	...

0800cb20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b08c      	sub	sp, #48	; 0x30
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d102      	bne.n	800cb34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	f000 bc48 	b.w	800d3c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 8088 	beq.w	800cc52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb42:	4b99      	ldr	r3, [pc, #612]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cb4c:	4b96      	ldr	r3, [pc, #600]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cb4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb54:	2b10      	cmp	r3, #16
 800cb56:	d007      	beq.n	800cb68 <HAL_RCC_OscConfig+0x48>
 800cb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5a:	2b18      	cmp	r3, #24
 800cb5c:	d111      	bne.n	800cb82 <HAL_RCC_OscConfig+0x62>
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	f003 0303 	and.w	r3, r3, #3
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d10c      	bne.n	800cb82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb68:	4b8f      	ldr	r3, [pc, #572]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d06d      	beq.n	800cc50 <HAL_RCC_OscConfig+0x130>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d169      	bne.n	800cc50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	f000 bc21 	b.w	800d3c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb8a:	d106      	bne.n	800cb9a <HAL_RCC_OscConfig+0x7a>
 800cb8c:	4b86      	ldr	r3, [pc, #536]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a85      	ldr	r2, [pc, #532]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cb92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb96:	6013      	str	r3, [r2, #0]
 800cb98:	e02e      	b.n	800cbf8 <HAL_RCC_OscConfig+0xd8>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10c      	bne.n	800cbbc <HAL_RCC_OscConfig+0x9c>
 800cba2:	4b81      	ldr	r3, [pc, #516]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a80      	ldr	r2, [pc, #512]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	4b7e      	ldr	r3, [pc, #504]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a7d      	ldr	r2, [pc, #500]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cbb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cbb8:	6013      	str	r3, [r2, #0]
 800cbba:	e01d      	b.n	800cbf8 <HAL_RCC_OscConfig+0xd8>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbc4:	d10c      	bne.n	800cbe0 <HAL_RCC_OscConfig+0xc0>
 800cbc6:	4b78      	ldr	r3, [pc, #480]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a77      	ldr	r2, [pc, #476]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cbcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cbd0:	6013      	str	r3, [r2, #0]
 800cbd2:	4b75      	ldr	r3, [pc, #468]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a74      	ldr	r2, [pc, #464]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cbd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbdc:	6013      	str	r3, [r2, #0]
 800cbde:	e00b      	b.n	800cbf8 <HAL_RCC_OscConfig+0xd8>
 800cbe0:	4b71      	ldr	r3, [pc, #452]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a70      	ldr	r2, [pc, #448]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cbe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbea:	6013      	str	r3, [r2, #0]
 800cbec:	4b6e      	ldr	r3, [pc, #440]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a6d      	ldr	r2, [pc, #436]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cbf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cbf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d013      	beq.n	800cc28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc00:	f7fa fb94 	bl	800732c <HAL_GetTick>
 800cc04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cc06:	e008      	b.n	800cc1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc08:	f7fa fb90 	bl	800732c <HAL_GetTick>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	2b64      	cmp	r3, #100	; 0x64
 800cc14:	d901      	bls.n	800cc1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cc16:	2303      	movs	r3, #3
 800cc18:	e3d4      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cc1a:	4b63      	ldr	r3, [pc, #396]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d0f0      	beq.n	800cc08 <HAL_RCC_OscConfig+0xe8>
 800cc26:	e014      	b.n	800cc52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc28:	f7fa fb80 	bl	800732c <HAL_GetTick>
 800cc2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cc2e:	e008      	b.n	800cc42 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc30:	f7fa fb7c 	bl	800732c <HAL_GetTick>
 800cc34:	4602      	mov	r2, r0
 800cc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	2b64      	cmp	r3, #100	; 0x64
 800cc3c:	d901      	bls.n	800cc42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	e3c0      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cc42:	4b59      	ldr	r3, [pc, #356]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1f0      	bne.n	800cc30 <HAL_RCC_OscConfig+0x110>
 800cc4e:	e000      	b.n	800cc52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 0302 	and.w	r3, r3, #2
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 80ca 	beq.w	800cdf4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc60:	4b51      	ldr	r3, [pc, #324]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cc62:	691b      	ldr	r3, [r3, #16]
 800cc64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cc6a:	4b4f      	ldr	r3, [pc, #316]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cc70:	6a3b      	ldr	r3, [r7, #32]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d007      	beq.n	800cc86 <HAL_RCC_OscConfig+0x166>
 800cc76:	6a3b      	ldr	r3, [r7, #32]
 800cc78:	2b18      	cmp	r3, #24
 800cc7a:	d156      	bne.n	800cd2a <HAL_RCC_OscConfig+0x20a>
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	f003 0303 	and.w	r3, r3, #3
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d151      	bne.n	800cd2a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cc86:	4b48      	ldr	r3, [pc, #288]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f003 0304 	and.w	r3, r3, #4
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d005      	beq.n	800cc9e <HAL_RCC_OscConfig+0x17e>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e392      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cc9e:	4b42      	ldr	r3, [pc, #264]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f023 0219 	bic.w	r2, r3, #25
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	493f      	ldr	r1, [pc, #252]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800ccac:	4313      	orrs	r3, r2
 800ccae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccb0:	f7fa fb3c 	bl	800732c <HAL_GetTick>
 800ccb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ccb6:	e008      	b.n	800ccca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ccb8:	f7fa fb38 	bl	800732c <HAL_GetTick>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d901      	bls.n	800ccca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ccc6:	2303      	movs	r3, #3
 800ccc8:	e37c      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ccca:	4b37      	ldr	r3, [pc, #220]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f003 0304 	and.w	r3, r3, #4
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d0f0      	beq.n	800ccb8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccd6:	f7fa fb59 	bl	800738c <HAL_GetREVID>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	f241 0203 	movw	r2, #4099	; 0x1003
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d817      	bhi.n	800cd14 <HAL_RCC_OscConfig+0x1f4>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	2b40      	cmp	r3, #64	; 0x40
 800ccea:	d108      	bne.n	800ccfe <HAL_RCC_OscConfig+0x1de>
 800ccec:	4b2e      	ldr	r3, [pc, #184]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ccf4:	4a2c      	ldr	r2, [pc, #176]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800ccf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ccfa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ccfc:	e07a      	b.n	800cdf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccfe:	4b2a      	ldr	r3, [pc, #168]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	031b      	lsls	r3, r3, #12
 800cd0c:	4926      	ldr	r1, [pc, #152]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd12:	e06f      	b.n	800cdf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd14:	4b24      	ldr	r3, [pc, #144]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	691b      	ldr	r3, [r3, #16]
 800cd20:	061b      	lsls	r3, r3, #24
 800cd22:	4921      	ldr	r1, [pc, #132]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cd24:	4313      	orrs	r3, r2
 800cd26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd28:	e064      	b.n	800cdf4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d047      	beq.n	800cdc2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cd32:	4b1d      	ldr	r3, [pc, #116]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f023 0219 	bic.w	r2, r3, #25
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	491a      	ldr	r1, [pc, #104]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cd40:	4313      	orrs	r3, r2
 800cd42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd44:	f7fa faf2 	bl	800732c <HAL_GetTick>
 800cd48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd4a:	e008      	b.n	800cd5e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd4c:	f7fa faee 	bl	800732c <HAL_GetTick>
 800cd50:	4602      	mov	r2, r0
 800cd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d901      	bls.n	800cd5e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e332      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd5e:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f003 0304 	and.w	r3, r3, #4
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0f0      	beq.n	800cd4c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd6a:	f7fa fb0f 	bl	800738c <HAL_GetREVID>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	f241 0203 	movw	r2, #4099	; 0x1003
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d819      	bhi.n	800cdac <HAL_RCC_OscConfig+0x28c>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	691b      	ldr	r3, [r3, #16]
 800cd7c:	2b40      	cmp	r3, #64	; 0x40
 800cd7e:	d108      	bne.n	800cd92 <HAL_RCC_OscConfig+0x272>
 800cd80:	4b09      	ldr	r3, [pc, #36]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800cd88:	4a07      	ldr	r2, [pc, #28]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cd8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd8e:	6053      	str	r3, [r2, #4]
 800cd90:	e030      	b.n	800cdf4 <HAL_RCC_OscConfig+0x2d4>
 800cd92:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	691b      	ldr	r3, [r3, #16]
 800cd9e:	031b      	lsls	r3, r3, #12
 800cda0:	4901      	ldr	r1, [pc, #4]	; (800cda8 <HAL_RCC_OscConfig+0x288>)
 800cda2:	4313      	orrs	r3, r2
 800cda4:	604b      	str	r3, [r1, #4]
 800cda6:	e025      	b.n	800cdf4 <HAL_RCC_OscConfig+0x2d4>
 800cda8:	58024400 	.word	0x58024400
 800cdac:	4b9a      	ldr	r3, [pc, #616]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	061b      	lsls	r3, r3, #24
 800cdba:	4997      	ldr	r1, [pc, #604]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	604b      	str	r3, [r1, #4]
 800cdc0:	e018      	b.n	800cdf4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cdc2:	4b95      	ldr	r3, [pc, #596]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a94      	ldr	r2, [pc, #592]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cdc8:	f023 0301 	bic.w	r3, r3, #1
 800cdcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdce:	f7fa faad 	bl	800732c <HAL_GetTick>
 800cdd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cdd4:	e008      	b.n	800cde8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cdd6:	f7fa faa9 	bl	800732c <HAL_GetTick>
 800cdda:	4602      	mov	r2, r0
 800cddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdde:	1ad3      	subs	r3, r2, r3
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d901      	bls.n	800cde8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800cde4:	2303      	movs	r3, #3
 800cde6:	e2ed      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cde8:	4b8b      	ldr	r3, [pc, #556]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 0304 	and.w	r3, r3, #4
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1f0      	bne.n	800cdd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f003 0310 	and.w	r3, r3, #16
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f000 80a9 	beq.w	800cf54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce02:	4b85      	ldr	r3, [pc, #532]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ce0c:	4b82      	ldr	r3, [pc, #520]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800ce0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce10:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	2b08      	cmp	r3, #8
 800ce16:	d007      	beq.n	800ce28 <HAL_RCC_OscConfig+0x308>
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	2b18      	cmp	r3, #24
 800ce1c:	d13a      	bne.n	800ce94 <HAL_RCC_OscConfig+0x374>
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f003 0303 	and.w	r3, r3, #3
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d135      	bne.n	800ce94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ce28:	4b7b      	ldr	r3, [pc, #492]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d005      	beq.n	800ce40 <HAL_RCC_OscConfig+0x320>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	69db      	ldr	r3, [r3, #28]
 800ce38:	2b80      	cmp	r3, #128	; 0x80
 800ce3a:	d001      	beq.n	800ce40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e2c1      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ce40:	f7fa faa4 	bl	800738c <HAL_GetREVID>
 800ce44:	4603      	mov	r3, r0
 800ce46:	f241 0203 	movw	r2, #4099	; 0x1003
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d817      	bhi.n	800ce7e <HAL_RCC_OscConfig+0x35e>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a1b      	ldr	r3, [r3, #32]
 800ce52:	2b20      	cmp	r3, #32
 800ce54:	d108      	bne.n	800ce68 <HAL_RCC_OscConfig+0x348>
 800ce56:	4b70      	ldr	r3, [pc, #448]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ce5e:	4a6e      	ldr	r2, [pc, #440]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800ce60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce64:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ce66:	e075      	b.n	800cf54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ce68:	4b6b      	ldr	r3, [pc, #428]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a1b      	ldr	r3, [r3, #32]
 800ce74:	069b      	lsls	r3, r3, #26
 800ce76:	4968      	ldr	r1, [pc, #416]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ce7c:	e06a      	b.n	800cf54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ce7e:	4b66      	ldr	r3, [pc, #408]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a1b      	ldr	r3, [r3, #32]
 800ce8a:	061b      	lsls	r3, r3, #24
 800ce8c:	4962      	ldr	r1, [pc, #392]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ce92:	e05f      	b.n	800cf54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	69db      	ldr	r3, [r3, #28]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d042      	beq.n	800cf22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ce9c:	4b5e      	ldr	r3, [pc, #376]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a5d      	ldr	r2, [pc, #372]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cea8:	f7fa fa40 	bl	800732c <HAL_GetTick>
 800ceac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ceae:	e008      	b.n	800cec2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ceb0:	f7fa fa3c 	bl	800732c <HAL_GetTick>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d901      	bls.n	800cec2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800cebe:	2303      	movs	r3, #3
 800cec0:	e280      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cec2:	4b55      	ldr	r3, [pc, #340]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d0f0      	beq.n	800ceb0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cece:	f7fa fa5d 	bl	800738c <HAL_GetREVID>
 800ced2:	4603      	mov	r3, r0
 800ced4:	f241 0203 	movw	r2, #4099	; 0x1003
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d817      	bhi.n	800cf0c <HAL_RCC_OscConfig+0x3ec>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6a1b      	ldr	r3, [r3, #32]
 800cee0:	2b20      	cmp	r3, #32
 800cee2:	d108      	bne.n	800cef6 <HAL_RCC_OscConfig+0x3d6>
 800cee4:	4b4c      	ldr	r3, [pc, #304]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ceec:	4a4a      	ldr	r2, [pc, #296]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800ceee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cef2:	6053      	str	r3, [r2, #4]
 800cef4:	e02e      	b.n	800cf54 <HAL_RCC_OscConfig+0x434>
 800cef6:	4b48      	ldr	r3, [pc, #288]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6a1b      	ldr	r3, [r3, #32]
 800cf02:	069b      	lsls	r3, r3, #26
 800cf04:	4944      	ldr	r1, [pc, #272]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cf06:	4313      	orrs	r3, r2
 800cf08:	604b      	str	r3, [r1, #4]
 800cf0a:	e023      	b.n	800cf54 <HAL_RCC_OscConfig+0x434>
 800cf0c:	4b42      	ldr	r3, [pc, #264]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6a1b      	ldr	r3, [r3, #32]
 800cf18:	061b      	lsls	r3, r3, #24
 800cf1a:	493f      	ldr	r1, [pc, #252]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	60cb      	str	r3, [r1, #12]
 800cf20:	e018      	b.n	800cf54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cf22:	4b3d      	ldr	r3, [pc, #244]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4a3c      	ldr	r2, [pc, #240]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cf28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf2e:	f7fa f9fd 	bl	800732c <HAL_GetTick>
 800cf32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cf34:	e008      	b.n	800cf48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cf36:	f7fa f9f9 	bl	800732c <HAL_GetTick>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d901      	bls.n	800cf48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cf44:	2303      	movs	r3, #3
 800cf46:	e23d      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cf48:	4b33      	ldr	r3, [pc, #204]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d1f0      	bne.n	800cf36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f003 0308 	and.w	r3, r3, #8
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d036      	beq.n	800cfce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	695b      	ldr	r3, [r3, #20]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d019      	beq.n	800cf9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cf68:	4b2b      	ldr	r3, [pc, #172]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cf6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf6c:	4a2a      	ldr	r2, [pc, #168]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cf6e:	f043 0301 	orr.w	r3, r3, #1
 800cf72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf74:	f7fa f9da 	bl	800732c <HAL_GetTick>
 800cf78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cf7a:	e008      	b.n	800cf8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cf7c:	f7fa f9d6 	bl	800732c <HAL_GetTick>
 800cf80:	4602      	mov	r2, r0
 800cf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	2b02      	cmp	r3, #2
 800cf88:	d901      	bls.n	800cf8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800cf8a:	2303      	movs	r3, #3
 800cf8c:	e21a      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cf8e:	4b22      	ldr	r3, [pc, #136]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cf90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf92:	f003 0302 	and.w	r3, r3, #2
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d0f0      	beq.n	800cf7c <HAL_RCC_OscConfig+0x45c>
 800cf9a:	e018      	b.n	800cfce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cf9c:	4b1e      	ldr	r3, [pc, #120]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cf9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfa0:	4a1d      	ldr	r2, [pc, #116]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cfa2:	f023 0301 	bic.w	r3, r3, #1
 800cfa6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfa8:	f7fa f9c0 	bl	800732c <HAL_GetTick>
 800cfac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cfae:	e008      	b.n	800cfc2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfb0:	f7fa f9bc 	bl	800732c <HAL_GetTick>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb8:	1ad3      	subs	r3, r2, r3
 800cfba:	2b02      	cmp	r3, #2
 800cfbc:	d901      	bls.n	800cfc2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	e200      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cfc2:	4b15      	ldr	r3, [pc, #84]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cfc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfc6:	f003 0302 	and.w	r3, r3, #2
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d1f0      	bne.n	800cfb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 0320 	and.w	r3, r3, #32
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d039      	beq.n	800d04e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	699b      	ldr	r3, [r3, #24]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d01c      	beq.n	800d01c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cfe2:	4b0d      	ldr	r3, [pc, #52]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a0c      	ldr	r2, [pc, #48]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800cfe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cfec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cfee:	f7fa f99d 	bl	800732c <HAL_GetTick>
 800cff2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cff4:	e008      	b.n	800d008 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cff6:	f7fa f999 	bl	800732c <HAL_GetTick>
 800cffa:	4602      	mov	r2, r0
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	2b02      	cmp	r3, #2
 800d002:	d901      	bls.n	800d008 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d004:	2303      	movs	r3, #3
 800d006:	e1dd      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d008:	4b03      	ldr	r3, [pc, #12]	; (800d018 <HAL_RCC_OscConfig+0x4f8>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d0f0      	beq.n	800cff6 <HAL_RCC_OscConfig+0x4d6>
 800d014:	e01b      	b.n	800d04e <HAL_RCC_OscConfig+0x52e>
 800d016:	bf00      	nop
 800d018:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d01c:	4b9b      	ldr	r3, [pc, #620]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a9a      	ldr	r2, [pc, #616]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d026:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d028:	f7fa f980 	bl	800732c <HAL_GetTick>
 800d02c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d02e:	e008      	b.n	800d042 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d030:	f7fa f97c 	bl	800732c <HAL_GetTick>
 800d034:	4602      	mov	r2, r0
 800d036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	2b02      	cmp	r3, #2
 800d03c:	d901      	bls.n	800d042 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d03e:	2303      	movs	r3, #3
 800d040:	e1c0      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d042:	4b92      	ldr	r3, [pc, #584]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d1f0      	bne.n	800d030 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f003 0304 	and.w	r3, r3, #4
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 8081 	beq.w	800d15e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d05c:	4b8c      	ldr	r3, [pc, #560]	; (800d290 <HAL_RCC_OscConfig+0x770>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a8b      	ldr	r2, [pc, #556]	; (800d290 <HAL_RCC_OscConfig+0x770>)
 800d062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d066:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d068:	f7fa f960 	bl	800732c <HAL_GetTick>
 800d06c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d06e:	e008      	b.n	800d082 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d070:	f7fa f95c 	bl	800732c <HAL_GetTick>
 800d074:	4602      	mov	r2, r0
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	2b64      	cmp	r3, #100	; 0x64
 800d07c:	d901      	bls.n	800d082 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d07e:	2303      	movs	r3, #3
 800d080:	e1a0      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d082:	4b83      	ldr	r3, [pc, #524]	; (800d290 <HAL_RCC_OscConfig+0x770>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d0f0      	beq.n	800d070 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	2b01      	cmp	r3, #1
 800d094:	d106      	bne.n	800d0a4 <HAL_RCC_OscConfig+0x584>
 800d096:	4b7d      	ldr	r3, [pc, #500]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d09a:	4a7c      	ldr	r2, [pc, #496]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d09c:	f043 0301 	orr.w	r3, r3, #1
 800d0a0:	6713      	str	r3, [r2, #112]	; 0x70
 800d0a2:	e02d      	b.n	800d100 <HAL_RCC_OscConfig+0x5e0>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d10c      	bne.n	800d0c6 <HAL_RCC_OscConfig+0x5a6>
 800d0ac:	4b77      	ldr	r3, [pc, #476]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0b0:	4a76      	ldr	r2, [pc, #472]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0b2:	f023 0301 	bic.w	r3, r3, #1
 800d0b6:	6713      	str	r3, [r2, #112]	; 0x70
 800d0b8:	4b74      	ldr	r3, [pc, #464]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0bc:	4a73      	ldr	r2, [pc, #460]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0be:	f023 0304 	bic.w	r3, r3, #4
 800d0c2:	6713      	str	r3, [r2, #112]	; 0x70
 800d0c4:	e01c      	b.n	800d100 <HAL_RCC_OscConfig+0x5e0>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	2b05      	cmp	r3, #5
 800d0cc:	d10c      	bne.n	800d0e8 <HAL_RCC_OscConfig+0x5c8>
 800d0ce:	4b6f      	ldr	r3, [pc, #444]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0d2:	4a6e      	ldr	r2, [pc, #440]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0d4:	f043 0304 	orr.w	r3, r3, #4
 800d0d8:	6713      	str	r3, [r2, #112]	; 0x70
 800d0da:	4b6c      	ldr	r3, [pc, #432]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0de:	4a6b      	ldr	r2, [pc, #428]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0e0:	f043 0301 	orr.w	r3, r3, #1
 800d0e4:	6713      	str	r3, [r2, #112]	; 0x70
 800d0e6:	e00b      	b.n	800d100 <HAL_RCC_OscConfig+0x5e0>
 800d0e8:	4b68      	ldr	r3, [pc, #416]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ec:	4a67      	ldr	r2, [pc, #412]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0ee:	f023 0301 	bic.w	r3, r3, #1
 800d0f2:	6713      	str	r3, [r2, #112]	; 0x70
 800d0f4:	4b65      	ldr	r3, [pc, #404]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0f8:	4a64      	ldr	r2, [pc, #400]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d0fa:	f023 0304 	bic.w	r3, r3, #4
 800d0fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d015      	beq.n	800d134 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d108:	f7fa f910 	bl	800732c <HAL_GetTick>
 800d10c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d10e:	e00a      	b.n	800d126 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d110:	f7fa f90c 	bl	800732c <HAL_GetTick>
 800d114:	4602      	mov	r2, r0
 800d116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d118:	1ad3      	subs	r3, r2, r3
 800d11a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d11e:	4293      	cmp	r3, r2
 800d120:	d901      	bls.n	800d126 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d122:	2303      	movs	r3, #3
 800d124:	e14e      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d126:	4b59      	ldr	r3, [pc, #356]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d12a:	f003 0302 	and.w	r3, r3, #2
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d0ee      	beq.n	800d110 <HAL_RCC_OscConfig+0x5f0>
 800d132:	e014      	b.n	800d15e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d134:	f7fa f8fa 	bl	800732c <HAL_GetTick>
 800d138:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d13a:	e00a      	b.n	800d152 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d13c:	f7fa f8f6 	bl	800732c <HAL_GetTick>
 800d140:	4602      	mov	r2, r0
 800d142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d144:	1ad3      	subs	r3, r2, r3
 800d146:	f241 3288 	movw	r2, #5000	; 0x1388
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d901      	bls.n	800d152 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d14e:	2303      	movs	r3, #3
 800d150:	e138      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d152:	4b4e      	ldr	r3, [pc, #312]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d156:	f003 0302 	and.w	r3, r3, #2
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d1ee      	bne.n	800d13c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d162:	2b00      	cmp	r3, #0
 800d164:	f000 812d 	beq.w	800d3c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d168:	4b48      	ldr	r3, [pc, #288]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d16a:	691b      	ldr	r3, [r3, #16]
 800d16c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d170:	2b18      	cmp	r3, #24
 800d172:	f000 80bd 	beq.w	800d2f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	f040 809e 	bne.w	800d2bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d180:	4b42      	ldr	r3, [pc, #264]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a41      	ldr	r2, [pc, #260]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d18a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d18c:	f7fa f8ce 	bl	800732c <HAL_GetTick>
 800d190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d192:	e008      	b.n	800d1a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d194:	f7fa f8ca 	bl	800732c <HAL_GetTick>
 800d198:	4602      	mov	r2, r0
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d901      	bls.n	800d1a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	e10e      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d1a6:	4b39      	ldr	r3, [pc, #228]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1f0      	bne.n	800d194 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d1b2:	4b36      	ldr	r3, [pc, #216]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d1b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d1b6:	4b37      	ldr	r3, [pc, #220]	; (800d294 <HAL_RCC_OscConfig+0x774>)
 800d1b8:	4013      	ands	r3, r2
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d1c2:	0112      	lsls	r2, r2, #4
 800d1c4:	430a      	orrs	r2, r1
 800d1c6:	4931      	ldr	r1, [pc, #196]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	628b      	str	r3, [r1, #40]	; 0x28
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	025b      	lsls	r3, r3, #9
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	431a      	orrs	r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	041b      	lsls	r3, r3, #16
 800d1ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d1ee:	431a      	orrs	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	061b      	lsls	r3, r3, #24
 800d1f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1fc:	4923      	ldr	r1, [pc, #140]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d1fe:	4313      	orrs	r3, r2
 800d200:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d202:	4b22      	ldr	r3, [pc, #136]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d206:	4a21      	ldr	r2, [pc, #132]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d208:	f023 0301 	bic.w	r3, r3, #1
 800d20c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d20e:	4b1f      	ldr	r3, [pc, #124]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d212:	4b21      	ldr	r3, [pc, #132]	; (800d298 <HAL_RCC_OscConfig+0x778>)
 800d214:	4013      	ands	r3, r2
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d21a:	00d2      	lsls	r2, r2, #3
 800d21c:	491b      	ldr	r1, [pc, #108]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d21e:	4313      	orrs	r3, r2
 800d220:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d222:	4b1a      	ldr	r3, [pc, #104]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d226:	f023 020c 	bic.w	r2, r3, #12
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d22e:	4917      	ldr	r1, [pc, #92]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d230:	4313      	orrs	r3, r2
 800d232:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d234:	4b15      	ldr	r3, [pc, #84]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d238:	f023 0202 	bic.w	r2, r3, #2
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d240:	4912      	ldr	r1, [pc, #72]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d242:	4313      	orrs	r3, r2
 800d244:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d246:	4b11      	ldr	r3, [pc, #68]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24a:	4a10      	ldr	r2, [pc, #64]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d24c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d250:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d252:	4b0e      	ldr	r3, [pc, #56]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d256:	4a0d      	ldr	r2, [pc, #52]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d25c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d25e:	4b0b      	ldr	r3, [pc, #44]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d262:	4a0a      	ldr	r2, [pc, #40]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d26a:	4b08      	ldr	r3, [pc, #32]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26e:	4a07      	ldr	r2, [pc, #28]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d270:	f043 0301 	orr.w	r3, r3, #1
 800d274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d276:	4b05      	ldr	r3, [pc, #20]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a04      	ldr	r2, [pc, #16]	; (800d28c <HAL_RCC_OscConfig+0x76c>)
 800d27c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d282:	f7fa f853 	bl	800732c <HAL_GetTick>
 800d286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d288:	e011      	b.n	800d2ae <HAL_RCC_OscConfig+0x78e>
 800d28a:	bf00      	nop
 800d28c:	58024400 	.word	0x58024400
 800d290:	58024800 	.word	0x58024800
 800d294:	fffffc0c 	.word	0xfffffc0c
 800d298:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d29c:	f7fa f846 	bl	800732c <HAL_GetTick>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d901      	bls.n	800d2ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d2aa:	2303      	movs	r3, #3
 800d2ac:	e08a      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2ae:	4b47      	ldr	r3, [pc, #284]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d0f0      	beq.n	800d29c <HAL_RCC_OscConfig+0x77c>
 800d2ba:	e082      	b.n	800d3c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d2bc:	4b43      	ldr	r3, [pc, #268]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a42      	ldr	r2, [pc, #264]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d2c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d2c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2c8:	f7fa f830 	bl	800732c <HAL_GetTick>
 800d2cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d2ce:	e008      	b.n	800d2e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2d0:	f7fa f82c 	bl	800732c <HAL_GetTick>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d8:	1ad3      	subs	r3, r2, r3
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d901      	bls.n	800d2e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d2de:	2303      	movs	r3, #3
 800d2e0:	e070      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d2e2:	4b3a      	ldr	r3, [pc, #232]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1f0      	bne.n	800d2d0 <HAL_RCC_OscConfig+0x7b0>
 800d2ee:	e068      	b.n	800d3c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d2f0:	4b36      	ldr	r3, [pc, #216]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d2f6:	4b35      	ldr	r3, [pc, #212]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d300:	2b01      	cmp	r3, #1
 800d302:	d031      	beq.n	800d368 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	f003 0203 	and.w	r2, r3, #3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d30e:	429a      	cmp	r2, r3
 800d310:	d12a      	bne.n	800d368 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	091b      	lsrs	r3, r3, #4
 800d316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d31e:	429a      	cmp	r2, r3
 800d320:	d122      	bne.n	800d368 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d32c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d32e:	429a      	cmp	r2, r3
 800d330:	d11a      	bne.n	800d368 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	0a5b      	lsrs	r3, r3, #9
 800d336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d33e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d340:	429a      	cmp	r2, r3
 800d342:	d111      	bne.n	800d368 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	0c1b      	lsrs	r3, r3, #16
 800d348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d350:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d352:	429a      	cmp	r2, r3
 800d354:	d108      	bne.n	800d368 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	0e1b      	lsrs	r3, r3, #24
 800d35a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d362:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d364:	429a      	cmp	r2, r3
 800d366:	d001      	beq.n	800d36c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d368:	2301      	movs	r3, #1
 800d36a:	e02b      	b.n	800d3c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d36c:	4b17      	ldr	r3, [pc, #92]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d370:	08db      	lsrs	r3, r3, #3
 800d372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d376:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d01f      	beq.n	800d3c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d382:	4b12      	ldr	r3, [pc, #72]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d386:	4a11      	ldr	r2, [pc, #68]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d388:	f023 0301 	bic.w	r3, r3, #1
 800d38c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d38e:	f7f9 ffcd 	bl	800732c <HAL_GetTick>
 800d392:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d394:	bf00      	nop
 800d396:	f7f9 ffc9 	bl	800732c <HAL_GetTick>
 800d39a:	4602      	mov	r2, r0
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d0f9      	beq.n	800d396 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d3a2:	4b0a      	ldr	r3, [pc, #40]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d3a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3a6:	4b0a      	ldr	r3, [pc, #40]	; (800d3d0 <HAL_RCC_OscConfig+0x8b0>)
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d3ae:	00d2      	lsls	r2, r2, #3
 800d3b0:	4906      	ldr	r1, [pc, #24]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d3b6:	4b05      	ldr	r3, [pc, #20]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ba:	4a04      	ldr	r2, [pc, #16]	; (800d3cc <HAL_RCC_OscConfig+0x8ac>)
 800d3bc:	f043 0301 	orr.w	r3, r3, #1
 800d3c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3730      	adds	r7, #48	; 0x30
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	58024400 	.word	0x58024400
 800d3d0:	ffff0007 	.word	0xffff0007

0800d3d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d101      	bne.n	800d3e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e19c      	b.n	800d722 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d3e8:	4b8a      	ldr	r3, [pc, #552]	; (800d614 <HAL_RCC_ClockConfig+0x240>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f003 030f 	and.w	r3, r3, #15
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d910      	bls.n	800d418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d3f6:	4b87      	ldr	r3, [pc, #540]	; (800d614 <HAL_RCC_ClockConfig+0x240>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f023 020f 	bic.w	r2, r3, #15
 800d3fe:	4985      	ldr	r1, [pc, #532]	; (800d614 <HAL_RCC_ClockConfig+0x240>)
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	4313      	orrs	r3, r2
 800d404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d406:	4b83      	ldr	r3, [pc, #524]	; (800d614 <HAL_RCC_ClockConfig+0x240>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f003 030f 	and.w	r3, r3, #15
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	429a      	cmp	r2, r3
 800d412:	d001      	beq.n	800d418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	e184      	b.n	800d722 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 0304 	and.w	r3, r3, #4
 800d420:	2b00      	cmp	r3, #0
 800d422:	d010      	beq.n	800d446 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	691a      	ldr	r2, [r3, #16]
 800d428:	4b7b      	ldr	r3, [pc, #492]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d42a:	699b      	ldr	r3, [r3, #24]
 800d42c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d430:	429a      	cmp	r2, r3
 800d432:	d908      	bls.n	800d446 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d434:	4b78      	ldr	r3, [pc, #480]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d436:	699b      	ldr	r3, [r3, #24]
 800d438:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	4975      	ldr	r1, [pc, #468]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d442:	4313      	orrs	r3, r2
 800d444:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f003 0308 	and.w	r3, r3, #8
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d010      	beq.n	800d474 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	695a      	ldr	r2, [r3, #20]
 800d456:	4b70      	ldr	r3, [pc, #448]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d458:	69db      	ldr	r3, [r3, #28]
 800d45a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d45e:	429a      	cmp	r2, r3
 800d460:	d908      	bls.n	800d474 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d462:	4b6d      	ldr	r3, [pc, #436]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d464:	69db      	ldr	r3, [r3, #28]
 800d466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	695b      	ldr	r3, [r3, #20]
 800d46e:	496a      	ldr	r1, [pc, #424]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d470:	4313      	orrs	r3, r2
 800d472:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f003 0310 	and.w	r3, r3, #16
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d010      	beq.n	800d4a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	699a      	ldr	r2, [r3, #24]
 800d484:	4b64      	ldr	r3, [pc, #400]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d486:	69db      	ldr	r3, [r3, #28]
 800d488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d908      	bls.n	800d4a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d490:	4b61      	ldr	r3, [pc, #388]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d492:	69db      	ldr	r3, [r3, #28]
 800d494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	699b      	ldr	r3, [r3, #24]
 800d49c:	495e      	ldr	r1, [pc, #376]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f003 0320 	and.w	r3, r3, #32
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d010      	beq.n	800d4d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	69da      	ldr	r2, [r3, #28]
 800d4b2:	4b59      	ldr	r3, [pc, #356]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d4b4:	6a1b      	ldr	r3, [r3, #32]
 800d4b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d908      	bls.n	800d4d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d4be:	4b56      	ldr	r3, [pc, #344]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d4c0:	6a1b      	ldr	r3, [r3, #32]
 800d4c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	69db      	ldr	r3, [r3, #28]
 800d4ca:	4953      	ldr	r1, [pc, #332]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f003 0302 	and.w	r3, r3, #2
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d010      	beq.n	800d4fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	68da      	ldr	r2, [r3, #12]
 800d4e0:	4b4d      	ldr	r3, [pc, #308]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d4e2:	699b      	ldr	r3, [r3, #24]
 800d4e4:	f003 030f 	and.w	r3, r3, #15
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d908      	bls.n	800d4fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d4ec:	4b4a      	ldr	r3, [pc, #296]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d4ee:	699b      	ldr	r3, [r3, #24]
 800d4f0:	f023 020f 	bic.w	r2, r3, #15
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	4947      	ldr	r1, [pc, #284]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f003 0301 	and.w	r3, r3, #1
 800d506:	2b00      	cmp	r3, #0
 800d508:	d055      	beq.n	800d5b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d50a:	4b43      	ldr	r3, [pc, #268]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d50c:	699b      	ldr	r3, [r3, #24]
 800d50e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	4940      	ldr	r1, [pc, #256]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d518:	4313      	orrs	r3, r2
 800d51a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	2b02      	cmp	r3, #2
 800d522:	d107      	bne.n	800d534 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d524:	4b3c      	ldr	r3, [pc, #240]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d121      	bne.n	800d574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	e0f6      	b.n	800d722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	2b03      	cmp	r3, #3
 800d53a:	d107      	bne.n	800d54c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d53c:	4b36      	ldr	r3, [pc, #216]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d115      	bne.n	800d574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	e0ea      	b.n	800d722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d107      	bne.n	800d564 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d554:	4b30      	ldr	r3, [pc, #192]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d109      	bne.n	800d574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d560:	2301      	movs	r3, #1
 800d562:	e0de      	b.n	800d722 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d564:	4b2c      	ldr	r3, [pc, #176]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f003 0304 	and.w	r3, r3, #4
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d101      	bne.n	800d574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	e0d6      	b.n	800d722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d574:	4b28      	ldr	r3, [pc, #160]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	f023 0207 	bic.w	r2, r3, #7
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	4925      	ldr	r1, [pc, #148]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d582:	4313      	orrs	r3, r2
 800d584:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d586:	f7f9 fed1 	bl	800732c <HAL_GetTick>
 800d58a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d58c:	e00a      	b.n	800d5a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d58e:	f7f9 fecd 	bl	800732c <HAL_GetTick>
 800d592:	4602      	mov	r2, r0
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	1ad3      	subs	r3, r2, r3
 800d598:	f241 3288 	movw	r2, #5000	; 0x1388
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d901      	bls.n	800d5a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d5a0:	2303      	movs	r3, #3
 800d5a2:	e0be      	b.n	800d722 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5a4:	4b1c      	ldr	r3, [pc, #112]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d1eb      	bne.n	800d58e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f003 0302 	and.w	r3, r3, #2
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d010      	beq.n	800d5e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	68da      	ldr	r2, [r3, #12]
 800d5c6:	4b14      	ldr	r3, [pc, #80]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d5c8:	699b      	ldr	r3, [r3, #24]
 800d5ca:	f003 030f 	and.w	r3, r3, #15
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d208      	bcs.n	800d5e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d5d2:	4b11      	ldr	r3, [pc, #68]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d5d4:	699b      	ldr	r3, [r3, #24]
 800d5d6:	f023 020f 	bic.w	r2, r3, #15
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	490e      	ldr	r1, [pc, #56]	; (800d618 <HAL_RCC_ClockConfig+0x244>)
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d5e4:	4b0b      	ldr	r3, [pc, #44]	; (800d614 <HAL_RCC_ClockConfig+0x240>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f003 030f 	and.w	r3, r3, #15
 800d5ec:	683a      	ldr	r2, [r7, #0]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d214      	bcs.n	800d61c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5f2:	4b08      	ldr	r3, [pc, #32]	; (800d614 <HAL_RCC_ClockConfig+0x240>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f023 020f 	bic.w	r2, r3, #15
 800d5fa:	4906      	ldr	r1, [pc, #24]	; (800d614 <HAL_RCC_ClockConfig+0x240>)
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d602:	4b04      	ldr	r3, [pc, #16]	; (800d614 <HAL_RCC_ClockConfig+0x240>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 030f 	and.w	r3, r3, #15
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d005      	beq.n	800d61c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e086      	b.n	800d722 <HAL_RCC_ClockConfig+0x34e>
 800d614:	52002000 	.word	0x52002000
 800d618:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f003 0304 	and.w	r3, r3, #4
 800d624:	2b00      	cmp	r3, #0
 800d626:	d010      	beq.n	800d64a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	691a      	ldr	r2, [r3, #16]
 800d62c:	4b3f      	ldr	r3, [pc, #252]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d62e:	699b      	ldr	r3, [r3, #24]
 800d630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d634:	429a      	cmp	r2, r3
 800d636:	d208      	bcs.n	800d64a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d638:	4b3c      	ldr	r3, [pc, #240]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d63a:	699b      	ldr	r3, [r3, #24]
 800d63c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	691b      	ldr	r3, [r3, #16]
 800d644:	4939      	ldr	r1, [pc, #228]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d646:	4313      	orrs	r3, r2
 800d648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f003 0308 	and.w	r3, r3, #8
 800d652:	2b00      	cmp	r3, #0
 800d654:	d010      	beq.n	800d678 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	695a      	ldr	r2, [r3, #20]
 800d65a:	4b34      	ldr	r3, [pc, #208]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d65c:	69db      	ldr	r3, [r3, #28]
 800d65e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d662:	429a      	cmp	r2, r3
 800d664:	d208      	bcs.n	800d678 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d666:	4b31      	ldr	r3, [pc, #196]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d668:	69db      	ldr	r3, [r3, #28]
 800d66a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	695b      	ldr	r3, [r3, #20]
 800d672:	492e      	ldr	r1, [pc, #184]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d674:	4313      	orrs	r3, r2
 800d676:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f003 0310 	and.w	r3, r3, #16
 800d680:	2b00      	cmp	r3, #0
 800d682:	d010      	beq.n	800d6a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	699a      	ldr	r2, [r3, #24]
 800d688:	4b28      	ldr	r3, [pc, #160]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d68a:	69db      	ldr	r3, [r3, #28]
 800d68c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d690:	429a      	cmp	r2, r3
 800d692:	d208      	bcs.n	800d6a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d694:	4b25      	ldr	r3, [pc, #148]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d696:	69db      	ldr	r3, [r3, #28]
 800d698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	4922      	ldr	r1, [pc, #136]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f003 0320 	and.w	r3, r3, #32
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d010      	beq.n	800d6d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	69da      	ldr	r2, [r3, #28]
 800d6b6:	4b1d      	ldr	r3, [pc, #116]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d6b8:	6a1b      	ldr	r3, [r3, #32]
 800d6ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d208      	bcs.n	800d6d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d6c2:	4b1a      	ldr	r3, [pc, #104]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d6c4:	6a1b      	ldr	r3, [r3, #32]
 800d6c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	69db      	ldr	r3, [r3, #28]
 800d6ce:	4917      	ldr	r1, [pc, #92]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d6d4:	f000 f834 	bl	800d740 <HAL_RCC_GetSysClockFreq>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	4b14      	ldr	r3, [pc, #80]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d6dc:	699b      	ldr	r3, [r3, #24]
 800d6de:	0a1b      	lsrs	r3, r3, #8
 800d6e0:	f003 030f 	and.w	r3, r3, #15
 800d6e4:	4912      	ldr	r1, [pc, #72]	; (800d730 <HAL_RCC_ClockConfig+0x35c>)
 800d6e6:	5ccb      	ldrb	r3, [r1, r3]
 800d6e8:	f003 031f 	and.w	r3, r3, #31
 800d6ec:	fa22 f303 	lsr.w	r3, r2, r3
 800d6f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d6f2:	4b0e      	ldr	r3, [pc, #56]	; (800d72c <HAL_RCC_ClockConfig+0x358>)
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	f003 030f 	and.w	r3, r3, #15
 800d6fa:	4a0d      	ldr	r2, [pc, #52]	; (800d730 <HAL_RCC_ClockConfig+0x35c>)
 800d6fc:	5cd3      	ldrb	r3, [r2, r3]
 800d6fe:	f003 031f 	and.w	r3, r3, #31
 800d702:	693a      	ldr	r2, [r7, #16]
 800d704:	fa22 f303 	lsr.w	r3, r2, r3
 800d708:	4a0a      	ldr	r2, [pc, #40]	; (800d734 <HAL_RCC_ClockConfig+0x360>)
 800d70a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d70c:	4a0a      	ldr	r2, [pc, #40]	; (800d738 <HAL_RCC_ClockConfig+0x364>)
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d712:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <HAL_RCC_ClockConfig+0x368>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4618      	mov	r0, r3
 800d718:	f7f9 fdbe 	bl	8007298 <HAL_InitTick>
 800d71c:	4603      	mov	r3, r0
 800d71e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d720:	7bfb      	ldrb	r3, [r7, #15]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3718      	adds	r7, #24
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	58024400 	.word	0x58024400
 800d730:	08017668 	.word	0x08017668
 800d734:	24000074 	.word	0x24000074
 800d738:	24000070 	.word	0x24000070
 800d73c:	24000078 	.word	0x24000078

0800d740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d740:	b480      	push	{r7}
 800d742:	b089      	sub	sp, #36	; 0x24
 800d744:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d746:	4bb3      	ldr	r3, [pc, #716]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d748:	691b      	ldr	r3, [r3, #16]
 800d74a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d74e:	2b18      	cmp	r3, #24
 800d750:	f200 8155 	bhi.w	800d9fe <HAL_RCC_GetSysClockFreq+0x2be>
 800d754:	a201      	add	r2, pc, #4	; (adr r2, 800d75c <HAL_RCC_GetSysClockFreq+0x1c>)
 800d756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75a:	bf00      	nop
 800d75c:	0800d7c1 	.word	0x0800d7c1
 800d760:	0800d9ff 	.word	0x0800d9ff
 800d764:	0800d9ff 	.word	0x0800d9ff
 800d768:	0800d9ff 	.word	0x0800d9ff
 800d76c:	0800d9ff 	.word	0x0800d9ff
 800d770:	0800d9ff 	.word	0x0800d9ff
 800d774:	0800d9ff 	.word	0x0800d9ff
 800d778:	0800d9ff 	.word	0x0800d9ff
 800d77c:	0800d7e7 	.word	0x0800d7e7
 800d780:	0800d9ff 	.word	0x0800d9ff
 800d784:	0800d9ff 	.word	0x0800d9ff
 800d788:	0800d9ff 	.word	0x0800d9ff
 800d78c:	0800d9ff 	.word	0x0800d9ff
 800d790:	0800d9ff 	.word	0x0800d9ff
 800d794:	0800d9ff 	.word	0x0800d9ff
 800d798:	0800d9ff 	.word	0x0800d9ff
 800d79c:	0800d7ed 	.word	0x0800d7ed
 800d7a0:	0800d9ff 	.word	0x0800d9ff
 800d7a4:	0800d9ff 	.word	0x0800d9ff
 800d7a8:	0800d9ff 	.word	0x0800d9ff
 800d7ac:	0800d9ff 	.word	0x0800d9ff
 800d7b0:	0800d9ff 	.word	0x0800d9ff
 800d7b4:	0800d9ff 	.word	0x0800d9ff
 800d7b8:	0800d9ff 	.word	0x0800d9ff
 800d7bc:	0800d7f3 	.word	0x0800d7f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7c0:	4b94      	ldr	r3, [pc, #592]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f003 0320 	and.w	r3, r3, #32
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d009      	beq.n	800d7e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7cc:	4b91      	ldr	r3, [pc, #580]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	08db      	lsrs	r3, r3, #3
 800d7d2:	f003 0303 	and.w	r3, r3, #3
 800d7d6:	4a90      	ldr	r2, [pc, #576]	; (800da18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d7d8:	fa22 f303 	lsr.w	r3, r2, r3
 800d7dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d7de:	e111      	b.n	800da04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d7e0:	4b8d      	ldr	r3, [pc, #564]	; (800da18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d7e2:	61bb      	str	r3, [r7, #24]
      break;
 800d7e4:	e10e      	b.n	800da04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d7e6:	4b8d      	ldr	r3, [pc, #564]	; (800da1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d7e8:	61bb      	str	r3, [r7, #24]
      break;
 800d7ea:	e10b      	b.n	800da04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d7ec:	4b8c      	ldr	r3, [pc, #560]	; (800da20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d7ee:	61bb      	str	r3, [r7, #24]
      break;
 800d7f0:	e108      	b.n	800da04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d7f2:	4b88      	ldr	r3, [pc, #544]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f6:	f003 0303 	and.w	r3, r3, #3
 800d7fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d7fc:	4b85      	ldr	r3, [pc, #532]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d800:	091b      	lsrs	r3, r3, #4
 800d802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d806:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d808:	4b82      	ldr	r3, [pc, #520]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	f003 0301 	and.w	r3, r3, #1
 800d810:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d812:	4b80      	ldr	r3, [pc, #512]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d816:	08db      	lsrs	r3, r3, #3
 800d818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	fb02 f303 	mul.w	r3, r2, r3
 800d822:	ee07 3a90 	vmov	s15, r3
 800d826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d82a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	2b00      	cmp	r3, #0
 800d832:	f000 80e1 	beq.w	800d9f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	2b02      	cmp	r3, #2
 800d83a:	f000 8083 	beq.w	800d944 <HAL_RCC_GetSysClockFreq+0x204>
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	2b02      	cmp	r3, #2
 800d842:	f200 80a1 	bhi.w	800d988 <HAL_RCC_GetSysClockFreq+0x248>
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d003      	beq.n	800d854 <HAL_RCC_GetSysClockFreq+0x114>
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d056      	beq.n	800d900 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d852:	e099      	b.n	800d988 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d854:	4b6f      	ldr	r3, [pc, #444]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f003 0320 	and.w	r3, r3, #32
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d02d      	beq.n	800d8bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d860:	4b6c      	ldr	r3, [pc, #432]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	08db      	lsrs	r3, r3, #3
 800d866:	f003 0303 	and.w	r3, r3, #3
 800d86a:	4a6b      	ldr	r2, [pc, #428]	; (800da18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d86c:	fa22 f303 	lsr.w	r3, r2, r3
 800d870:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	ee07 3a90 	vmov	s15, r3
 800d878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	ee07 3a90 	vmov	s15, r3
 800d882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d88a:	4b62      	ldr	r3, [pc, #392]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d892:	ee07 3a90 	vmov	s15, r3
 800d896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d89a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d89e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800da24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d8a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d8ba:	e087      	b.n	800d9cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	ee07 3a90 	vmov	s15, r3
 800d8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800da28 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d8ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8ce:	4b51      	ldr	r3, [pc, #324]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8d6:	ee07 3a90 	vmov	s15, r3
 800d8da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8de:	ed97 6a02 	vldr	s12, [r7, #8]
 800d8e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800da24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d8e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d8fe:	e065      	b.n	800d9cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	ee07 3a90 	vmov	s15, r3
 800d906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d90a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800da2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800d90e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d912:	4b40      	ldr	r3, [pc, #256]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d91a:	ee07 3a90 	vmov	s15, r3
 800d91e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d922:	ed97 6a02 	vldr	s12, [r7, #8]
 800d926:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800da24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d92a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d93a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d93e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d942:	e043      	b.n	800d9cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	ee07 3a90 	vmov	s15, r3
 800d94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d94e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800da30 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d956:	4b2f      	ldr	r3, [pc, #188]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d95e:	ee07 3a90 	vmov	s15, r3
 800d962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d966:	ed97 6a02 	vldr	s12, [r7, #8]
 800d96a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800da24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d96e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d986:	e021      	b.n	800d9cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	ee07 3a90 	vmov	s15, r3
 800d98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d992:	eddf 6a26 	vldr	s13, [pc, #152]	; 800da2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800d996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d99a:	4b1e      	ldr	r3, [pc, #120]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9a2:	ee07 3a90 	vmov	s15, r3
 800d9a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800da24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d9b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d9ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d9cc:	4b11      	ldr	r3, [pc, #68]	; (800da14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d0:	0a5b      	lsrs	r3, r3, #9
 800d9d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	ee07 3a90 	vmov	s15, r3
 800d9e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d9e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9f0:	ee17 3a90 	vmov	r3, s15
 800d9f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d9f6:	e005      	b.n	800da04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	61bb      	str	r3, [r7, #24]
      break;
 800d9fc:	e002      	b.n	800da04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d9fe:	4b07      	ldr	r3, [pc, #28]	; (800da1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800da00:	61bb      	str	r3, [r7, #24]
      break;
 800da02:	bf00      	nop
  }

  return sysclockfreq;
 800da04:	69bb      	ldr	r3, [r7, #24]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3724      	adds	r7, #36	; 0x24
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	58024400 	.word	0x58024400
 800da18:	03d09000 	.word	0x03d09000
 800da1c:	003d0900 	.word	0x003d0900
 800da20:	017d7840 	.word	0x017d7840
 800da24:	46000000 	.word	0x46000000
 800da28:	4c742400 	.word	0x4c742400
 800da2c:	4a742400 	.word	0x4a742400
 800da30:	4bbebc20 	.word	0x4bbebc20

0800da34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800da3a:	f7ff fe81 	bl	800d740 <HAL_RCC_GetSysClockFreq>
 800da3e:	4602      	mov	r2, r0
 800da40:	4b10      	ldr	r3, [pc, #64]	; (800da84 <HAL_RCC_GetHCLKFreq+0x50>)
 800da42:	699b      	ldr	r3, [r3, #24]
 800da44:	0a1b      	lsrs	r3, r3, #8
 800da46:	f003 030f 	and.w	r3, r3, #15
 800da4a:	490f      	ldr	r1, [pc, #60]	; (800da88 <HAL_RCC_GetHCLKFreq+0x54>)
 800da4c:	5ccb      	ldrb	r3, [r1, r3]
 800da4e:	f003 031f 	and.w	r3, r3, #31
 800da52:	fa22 f303 	lsr.w	r3, r2, r3
 800da56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da58:	4b0a      	ldr	r3, [pc, #40]	; (800da84 <HAL_RCC_GetHCLKFreq+0x50>)
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	f003 030f 	and.w	r3, r3, #15
 800da60:	4a09      	ldr	r2, [pc, #36]	; (800da88 <HAL_RCC_GetHCLKFreq+0x54>)
 800da62:	5cd3      	ldrb	r3, [r2, r3]
 800da64:	f003 031f 	and.w	r3, r3, #31
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	fa22 f303 	lsr.w	r3, r2, r3
 800da6e:	4a07      	ldr	r2, [pc, #28]	; (800da8c <HAL_RCC_GetHCLKFreq+0x58>)
 800da70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800da72:	4a07      	ldr	r2, [pc, #28]	; (800da90 <HAL_RCC_GetHCLKFreq+0x5c>)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800da78:	4b04      	ldr	r3, [pc, #16]	; (800da8c <HAL_RCC_GetHCLKFreq+0x58>)
 800da7a:	681b      	ldr	r3, [r3, #0]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3708      	adds	r7, #8
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	58024400 	.word	0x58024400
 800da88:	08017668 	.word	0x08017668
 800da8c:	24000074 	.word	0x24000074
 800da90:	24000070 	.word	0x24000070

0800da94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800da98:	f7ff ffcc 	bl	800da34 <HAL_RCC_GetHCLKFreq>
 800da9c:	4602      	mov	r2, r0
 800da9e:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800daa0:	69db      	ldr	r3, [r3, #28]
 800daa2:	091b      	lsrs	r3, r3, #4
 800daa4:	f003 0307 	and.w	r3, r3, #7
 800daa8:	4904      	ldr	r1, [pc, #16]	; (800dabc <HAL_RCC_GetPCLK1Freq+0x28>)
 800daaa:	5ccb      	ldrb	r3, [r1, r3]
 800daac:	f003 031f 	and.w	r3, r3, #31
 800dab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	58024400 	.word	0x58024400
 800dabc:	08017668 	.word	0x08017668

0800dac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800dac4:	f7ff ffb6 	bl	800da34 <HAL_RCC_GetHCLKFreq>
 800dac8:	4602      	mov	r2, r0
 800daca:	4b06      	ldr	r3, [pc, #24]	; (800dae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dacc:	69db      	ldr	r3, [r3, #28]
 800dace:	0a1b      	lsrs	r3, r3, #8
 800dad0:	f003 0307 	and.w	r3, r3, #7
 800dad4:	4904      	ldr	r1, [pc, #16]	; (800dae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dad6:	5ccb      	ldrb	r3, [r1, r3]
 800dad8:	f003 031f 	and.w	r3, r3, #31
 800dadc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	58024400 	.word	0x58024400
 800dae8:	08017668 	.word	0x08017668

0800daec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800daec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800daf0:	b0ca      	sub	sp, #296	; 0x128
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800daf8:	2300      	movs	r3, #0
 800dafa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dafe:	2300      	movs	r3, #0
 800db00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800db04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800db10:	2500      	movs	r5, #0
 800db12:	ea54 0305 	orrs.w	r3, r4, r5
 800db16:	d049      	beq.n	800dbac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800db18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db22:	d02f      	beq.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800db24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db28:	d828      	bhi.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800db2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db2e:	d01a      	beq.n	800db66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800db30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db34:	d822      	bhi.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800db36:	2b00      	cmp	r3, #0
 800db38:	d003      	beq.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800db3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db3e:	d007      	beq.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800db40:	e01c      	b.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db42:	4bb8      	ldr	r3, [pc, #736]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db46:	4ab7      	ldr	r2, [pc, #732]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800db4e:	e01a      	b.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800db50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db54:	3308      	adds	r3, #8
 800db56:	2102      	movs	r1, #2
 800db58:	4618      	mov	r0, r3
 800db5a:	f002 fb61 	bl	8010220 <RCCEx_PLL2_Config>
 800db5e:	4603      	mov	r3, r0
 800db60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800db64:	e00f      	b.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800db66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db6a:	3328      	adds	r3, #40	; 0x28
 800db6c:	2102      	movs	r1, #2
 800db6e:	4618      	mov	r0, r3
 800db70:	f002 fc08 	bl	8010384 <RCCEx_PLL3_Config>
 800db74:	4603      	mov	r3, r0
 800db76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800db7a:	e004      	b.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db7c:	2301      	movs	r3, #1
 800db7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800db82:	e000      	b.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800db84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10a      	bne.n	800dba4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800db8e:	4ba5      	ldr	r3, [pc, #660]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800db96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db9c:	4aa1      	ldr	r2, [pc, #644]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db9e:	430b      	orrs	r3, r1
 800dba0:	6513      	str	r3, [r2, #80]	; 0x50
 800dba2:	e003      	b.n	800dbac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dba8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800dbb8:	f04f 0900 	mov.w	r9, #0
 800dbbc:	ea58 0309 	orrs.w	r3, r8, r9
 800dbc0:	d047      	beq.n	800dc52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800dbc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbc8:	2b04      	cmp	r3, #4
 800dbca:	d82a      	bhi.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800dbcc:	a201      	add	r2, pc, #4	; (adr r2, 800dbd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800dbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd2:	bf00      	nop
 800dbd4:	0800dbe9 	.word	0x0800dbe9
 800dbd8:	0800dbf7 	.word	0x0800dbf7
 800dbdc:	0800dc0d 	.word	0x0800dc0d
 800dbe0:	0800dc2b 	.word	0x0800dc2b
 800dbe4:	0800dc2b 	.word	0x0800dc2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbe8:	4b8e      	ldr	r3, [pc, #568]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbec:	4a8d      	ldr	r2, [pc, #564]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dbf4:	e01a      	b.n	800dc2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dbf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbfa:	3308      	adds	r3, #8
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f002 fb0e 	bl	8010220 <RCCEx_PLL2_Config>
 800dc04:	4603      	mov	r3, r0
 800dc06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc0a:	e00f      	b.n	800dc2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dc0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc10:	3328      	adds	r3, #40	; 0x28
 800dc12:	2100      	movs	r1, #0
 800dc14:	4618      	mov	r0, r3
 800dc16:	f002 fbb5 	bl	8010384 <RCCEx_PLL3_Config>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc20:	e004      	b.n	800dc2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dc28:	e000      	b.n	800dc2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800dc2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10a      	bne.n	800dc4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dc34:	4b7b      	ldr	r3, [pc, #492]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc38:	f023 0107 	bic.w	r1, r3, #7
 800dc3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc42:	4a78      	ldr	r2, [pc, #480]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc44:	430b      	orrs	r3, r1
 800dc46:	6513      	str	r3, [r2, #80]	; 0x50
 800dc48:	e003      	b.n	800dc52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800dc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800dc5e:	f04f 0b00 	mov.w	fp, #0
 800dc62:	ea5a 030b 	orrs.w	r3, sl, fp
 800dc66:	d04c      	beq.n	800dd02 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800dc68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc72:	d030      	beq.n	800dcd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800dc74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc78:	d829      	bhi.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dc7a:	2bc0      	cmp	r3, #192	; 0xc0
 800dc7c:	d02d      	beq.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800dc7e:	2bc0      	cmp	r3, #192	; 0xc0
 800dc80:	d825      	bhi.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dc82:	2b80      	cmp	r3, #128	; 0x80
 800dc84:	d018      	beq.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800dc86:	2b80      	cmp	r3, #128	; 0x80
 800dc88:	d821      	bhi.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d002      	beq.n	800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800dc8e:	2b40      	cmp	r3, #64	; 0x40
 800dc90:	d007      	beq.n	800dca2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800dc92:	e01c      	b.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc94:	4b63      	ldr	r3, [pc, #396]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc98:	4a62      	ldr	r2, [pc, #392]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dca0:	e01c      	b.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dca6:	3308      	adds	r3, #8
 800dca8:	2100      	movs	r1, #0
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f002 fab8 	bl	8010220 <RCCEx_PLL2_Config>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dcb6:	e011      	b.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dcb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcbc:	3328      	adds	r3, #40	; 0x28
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f002 fb5f 	bl	8010384 <RCCEx_PLL3_Config>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dccc:	e006      	b.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dcd4:	e002      	b.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dcd6:	bf00      	nop
 800dcd8:	e000      	b.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dcda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10a      	bne.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800dce4:	4b4f      	ldr	r3, [pc, #316]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dce8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800dcec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcf2:	4a4c      	ldr	r2, [pc, #304]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dcf4:	430b      	orrs	r3, r1
 800dcf6:	6513      	str	r3, [r2, #80]	; 0x50
 800dcf8:	e003      	b.n	800dd02 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800dd02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800dd0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800dd12:	2300      	movs	r3, #0
 800dd14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800dd18:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	d053      	beq.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800dd22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dd2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dd2e:	d035      	beq.n	800dd9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800dd30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dd34:	d82e      	bhi.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dd3a:	d031      	beq.n	800dda0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800dd3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dd40:	d828      	bhi.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd46:	d01a      	beq.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800dd48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd4c:	d822      	bhi.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d003      	beq.n	800dd5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800dd52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd56:	d007      	beq.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800dd58:	e01c      	b.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd5a:	4b32      	ldr	r3, [pc, #200]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5e:	4a31      	ldr	r2, [pc, #196]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dd66:	e01c      	b.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd6c:	3308      	adds	r3, #8
 800dd6e:	2100      	movs	r1, #0
 800dd70:	4618      	mov	r0, r3
 800dd72:	f002 fa55 	bl	8010220 <RCCEx_PLL2_Config>
 800dd76:	4603      	mov	r3, r0
 800dd78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dd7c:	e011      	b.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd82:	3328      	adds	r3, #40	; 0x28
 800dd84:	2100      	movs	r1, #0
 800dd86:	4618      	mov	r0, r3
 800dd88:	f002 fafc 	bl	8010384 <RCCEx_PLL3_Config>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dd92:	e006      	b.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dd94:	2301      	movs	r3, #1
 800dd96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dd9a:	e002      	b.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800dd9c:	bf00      	nop
 800dd9e:	e000      	b.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800dda0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dda2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d10b      	bne.n	800ddc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ddaa:	4b1e      	ldr	r3, [pc, #120]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ddac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ddb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ddba:	4a1a      	ldr	r2, [pc, #104]	; (800de24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ddbc:	430b      	orrs	r3, r1
 800ddbe:	6593      	str	r3, [r2, #88]	; 0x58
 800ddc0:	e003      	b.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ddc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ddca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ddd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ddda:	2300      	movs	r3, #0
 800dddc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800dde0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800dde4:	460b      	mov	r3, r1
 800dde6:	4313      	orrs	r3, r2
 800dde8:	d056      	beq.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ddea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ddf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ddf6:	d038      	beq.n	800de6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ddf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ddfc:	d831      	bhi.n	800de62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ddfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de02:	d034      	beq.n	800de6e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800de04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de08:	d82b      	bhi.n	800de62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de0e:	d01d      	beq.n	800de4c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800de10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de14:	d825      	bhi.n	800de62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de16:	2b00      	cmp	r3, #0
 800de18:	d006      	beq.n	800de28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800de1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de1e:	d00a      	beq.n	800de36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800de20:	e01f      	b.n	800de62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de22:	bf00      	nop
 800de24:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de28:	4ba2      	ldr	r3, [pc, #648]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2c:	4aa1      	ldr	r2, [pc, #644]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800de34:	e01c      	b.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de3a:	3308      	adds	r3, #8
 800de3c:	2100      	movs	r1, #0
 800de3e:	4618      	mov	r0, r3
 800de40:	f002 f9ee 	bl	8010220 <RCCEx_PLL2_Config>
 800de44:	4603      	mov	r3, r0
 800de46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800de4a:	e011      	b.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800de4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de50:	3328      	adds	r3, #40	; 0x28
 800de52:	2100      	movs	r1, #0
 800de54:	4618      	mov	r0, r3
 800de56:	f002 fa95 	bl	8010384 <RCCEx_PLL3_Config>
 800de5a:	4603      	mov	r3, r0
 800de5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800de60:	e006      	b.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800de62:	2301      	movs	r3, #1
 800de64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800de68:	e002      	b.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800de6a:	bf00      	nop
 800de6c:	e000      	b.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800de6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de74:	2b00      	cmp	r3, #0
 800de76:	d10b      	bne.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800de78:	4b8e      	ldr	r3, [pc, #568]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de7c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800de80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800de88:	4a8a      	ldr	r2, [pc, #552]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de8a:	430b      	orrs	r3, r1
 800de8c:	6593      	str	r3, [r2, #88]	; 0x58
 800de8e:	e003      	b.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800de98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800dea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dea8:	2300      	movs	r3, #0
 800deaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800deae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800deb2:	460b      	mov	r3, r1
 800deb4:	4313      	orrs	r3, r2
 800deb6:	d03a      	beq.n	800df2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800deb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800debc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800debe:	2b30      	cmp	r3, #48	; 0x30
 800dec0:	d01f      	beq.n	800df02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800dec2:	2b30      	cmp	r3, #48	; 0x30
 800dec4:	d819      	bhi.n	800defa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dec6:	2b20      	cmp	r3, #32
 800dec8:	d00c      	beq.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800deca:	2b20      	cmp	r3, #32
 800decc:	d815      	bhi.n	800defa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d019      	beq.n	800df06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ded2:	2b10      	cmp	r3, #16
 800ded4:	d111      	bne.n	800defa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ded6:	4b77      	ldr	r3, [pc, #476]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ded8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deda:	4a76      	ldr	r2, [pc, #472]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dedc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dee0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dee2:	e011      	b.n	800df08 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dee8:	3308      	adds	r3, #8
 800deea:	2102      	movs	r1, #2
 800deec:	4618      	mov	r0, r3
 800deee:	f002 f997 	bl	8010220 <RCCEx_PLL2_Config>
 800def2:	4603      	mov	r3, r0
 800def4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800def8:	e006      	b.n	800df08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800defa:	2301      	movs	r3, #1
 800defc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800df00:	e002      	b.n	800df08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800df02:	bf00      	nop
 800df04:	e000      	b.n	800df08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800df06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10a      	bne.n	800df26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800df10:	4b68      	ldr	r3, [pc, #416]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df14:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800df18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df1e:	4a65      	ldr	r2, [pc, #404]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df20:	430b      	orrs	r3, r1
 800df22:	64d3      	str	r3, [r2, #76]	; 0x4c
 800df24:	e003      	b.n	800df2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800df2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800df3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800df3e:	2300      	movs	r3, #0
 800df40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800df44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800df48:	460b      	mov	r3, r1
 800df4a:	4313      	orrs	r3, r2
 800df4c:	d051      	beq.n	800dff2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800df4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df58:	d035      	beq.n	800dfc6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800df5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df5e:	d82e      	bhi.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800df60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df64:	d031      	beq.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800df66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df6a:	d828      	bhi.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800df6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df70:	d01a      	beq.n	800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800df72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df76:	d822      	bhi.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d003      	beq.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800df7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df80:	d007      	beq.n	800df92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800df82:	e01c      	b.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df84:	4b4b      	ldr	r3, [pc, #300]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df88:	4a4a      	ldr	r2, [pc, #296]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800df90:	e01c      	b.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800df92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df96:	3308      	adds	r3, #8
 800df98:	2100      	movs	r1, #0
 800df9a:	4618      	mov	r0, r3
 800df9c:	f002 f940 	bl	8010220 <RCCEx_PLL2_Config>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dfa6:	e011      	b.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dfa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfac:	3328      	adds	r3, #40	; 0x28
 800dfae:	2100      	movs	r1, #0
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f002 f9e7 	bl	8010384 <RCCEx_PLL3_Config>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dfbc:	e006      	b.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dfc4:	e002      	b.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dfc6:	bf00      	nop
 800dfc8:	e000      	b.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dfca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dfcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10a      	bne.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dfd4:	4b37      	ldr	r3, [pc, #220]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dfd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfd8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800dfdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfe2:	4a34      	ldr	r2, [pc, #208]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dfe4:	430b      	orrs	r3, r1
 800dfe6:	6513      	str	r3, [r2, #80]	; 0x50
 800dfe8:	e003      	b.n	800dff2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800dffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e002:	2300      	movs	r3, #0
 800e004:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e008:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800e00c:	460b      	mov	r3, r1
 800e00e:	4313      	orrs	r3, r2
 800e010:	d056      	beq.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e01c:	d033      	beq.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e01e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e022:	d82c      	bhi.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e024:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e028:	d02f      	beq.n	800e08a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e02a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e02e:	d826      	bhi.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e030:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e034:	d02b      	beq.n	800e08e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e036:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e03a:	d820      	bhi.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e03c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e040:	d012      	beq.n	800e068 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e042:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e046:	d81a      	bhi.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d022      	beq.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e04c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e050:	d115      	bne.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e056:	3308      	adds	r3, #8
 800e058:	2101      	movs	r1, #1
 800e05a:	4618      	mov	r0, r3
 800e05c:	f002 f8e0 	bl	8010220 <RCCEx_PLL2_Config>
 800e060:	4603      	mov	r3, r0
 800e062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e066:	e015      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e06c:	3328      	adds	r3, #40	; 0x28
 800e06e:	2101      	movs	r1, #1
 800e070:	4618      	mov	r0, r3
 800e072:	f002 f987 	bl	8010384 <RCCEx_PLL3_Config>
 800e076:	4603      	mov	r3, r0
 800e078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e07c:	e00a      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e084:	e006      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e086:	bf00      	nop
 800e088:	e004      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e08a:	bf00      	nop
 800e08c:	e002      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e08e:	bf00      	nop
 800e090:	e000      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e092:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e094:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10d      	bne.n	800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e09c:	4b05      	ldr	r3, [pc, #20]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0a0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0aa:	4a02      	ldr	r2, [pc, #8]	; (800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e0ac:	430b      	orrs	r3, r1
 800e0ae:	6513      	str	r3, [r2, #80]	; 0x50
 800e0b0:	e006      	b.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e0b2:	bf00      	nop
 800e0b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e0bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800e0cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e0d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800e0da:	460b      	mov	r3, r1
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	d055      	beq.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e0e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e0ec:	d033      	beq.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e0ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e0f2:	d82c      	bhi.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e0f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0f8:	d02f      	beq.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0fe:	d826      	bhi.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e100:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e104:	d02b      	beq.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e106:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e10a:	d820      	bhi.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e10c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e110:	d012      	beq.n	800e138 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e116:	d81a      	bhi.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d022      	beq.n	800e162 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e11c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e120:	d115      	bne.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e126:	3308      	adds	r3, #8
 800e128:	2101      	movs	r1, #1
 800e12a:	4618      	mov	r0, r3
 800e12c:	f002 f878 	bl	8010220 <RCCEx_PLL2_Config>
 800e130:	4603      	mov	r3, r0
 800e132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e136:	e015      	b.n	800e164 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e13c:	3328      	adds	r3, #40	; 0x28
 800e13e:	2101      	movs	r1, #1
 800e140:	4618      	mov	r0, r3
 800e142:	f002 f91f 	bl	8010384 <RCCEx_PLL3_Config>
 800e146:	4603      	mov	r3, r0
 800e148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e14c:	e00a      	b.n	800e164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e14e:	2301      	movs	r3, #1
 800e150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e154:	e006      	b.n	800e164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e156:	bf00      	nop
 800e158:	e004      	b.n	800e164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e15a:	bf00      	nop
 800e15c:	e002      	b.n	800e164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e15e:	bf00      	nop
 800e160:	e000      	b.n	800e164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e162:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10b      	bne.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e16c:	4ba3      	ldr	r3, [pc, #652]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e16e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e170:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e178:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e17c:	4a9f      	ldr	r2, [pc, #636]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e17e:	430b      	orrs	r3, r1
 800e180:	6593      	str	r3, [r2, #88]	; 0x58
 800e182:	e003      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e188:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800e198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e19c:	2300      	movs	r3, #0
 800e19e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e1a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	d037      	beq.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1b6:	d00e      	beq.n	800e1d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e1b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1bc:	d816      	bhi.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d018      	beq.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e1c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1c6:	d111      	bne.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1c8:	4b8c      	ldr	r3, [pc, #560]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1cc:	4a8b      	ldr	r2, [pc, #556]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e1d4:	e00f      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1da:	3308      	adds	r3, #8
 800e1dc:	2101      	movs	r1, #1
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f002 f81e 	bl	8010220 <RCCEx_PLL2_Config>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e1ea:	e004      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e1f2:	e000      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10a      	bne.n	800e214 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e1fe:	4b7f      	ldr	r3, [pc, #508]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e202:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e20c:	4a7b      	ldr	r2, [pc, #492]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e20e:	430b      	orrs	r3, r1
 800e210:	6513      	str	r3, [r2, #80]	; 0x50
 800e212:	e003      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e218:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e22c:	2300      	movs	r3, #0
 800e22e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e232:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800e236:	460b      	mov	r3, r1
 800e238:	4313      	orrs	r3, r2
 800e23a:	d039      	beq.n	800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e242:	2b03      	cmp	r3, #3
 800e244:	d81c      	bhi.n	800e280 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e246:	a201      	add	r2, pc, #4	; (adr r2, 800e24c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24c:	0800e289 	.word	0x0800e289
 800e250:	0800e25d 	.word	0x0800e25d
 800e254:	0800e26b 	.word	0x0800e26b
 800e258:	0800e289 	.word	0x0800e289
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e25c:	4b67      	ldr	r3, [pc, #412]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e260:	4a66      	ldr	r2, [pc, #408]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e268:	e00f      	b.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e26e:	3308      	adds	r3, #8
 800e270:	2102      	movs	r1, #2
 800e272:	4618      	mov	r0, r3
 800e274:	f001 ffd4 	bl	8010220 <RCCEx_PLL2_Config>
 800e278:	4603      	mov	r3, r0
 800e27a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e27e:	e004      	b.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e280:	2301      	movs	r3, #1
 800e282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e286:	e000      	b.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e28a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10a      	bne.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e292:	4b5a      	ldr	r3, [pc, #360]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e296:	f023 0103 	bic.w	r1, r3, #3
 800e29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e29e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2a0:	4a56      	ldr	r2, [pc, #344]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2a2:	430b      	orrs	r3, r1
 800e2a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e2a6:	e003      	b.n	800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800e2bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e2c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	f000 809f 	beq.w	800e410 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e2d2:	4b4b      	ldr	r3, [pc, #300]	; (800e400 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a4a      	ldr	r2, [pc, #296]	; (800e400 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e2d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e2de:	f7f9 f825 	bl	800732c <HAL_GetTick>
 800e2e2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e2e6:	e00b      	b.n	800e300 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e2e8:	f7f9 f820 	bl	800732c <HAL_GetTick>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e2f2:	1ad3      	subs	r3, r2, r3
 800e2f4:	2b64      	cmp	r3, #100	; 0x64
 800e2f6:	d903      	bls.n	800e300 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e2f8:	2303      	movs	r3, #3
 800e2fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e2fe:	e005      	b.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e300:	4b3f      	ldr	r3, [pc, #252]	; (800e400 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d0ed      	beq.n	800e2e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e30c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e310:	2b00      	cmp	r3, #0
 800e312:	d179      	bne.n	800e408 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e314:	4b39      	ldr	r3, [pc, #228]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e316:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e31c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e320:	4053      	eors	r3, r2
 800e322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e326:	2b00      	cmp	r3, #0
 800e328:	d015      	beq.n	800e356 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e32a:	4b34      	ldr	r3, [pc, #208]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e32e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e332:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e336:	4b31      	ldr	r3, [pc, #196]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e33a:	4a30      	ldr	r2, [pc, #192]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e33c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e340:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e342:	4b2e      	ldr	r3, [pc, #184]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e346:	4a2d      	ldr	r2, [pc, #180]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e34c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e34e:	4a2b      	ldr	r2, [pc, #172]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e350:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e354:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e35a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e362:	d118      	bne.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e364:	f7f8 ffe2 	bl	800732c <HAL_GetTick>
 800e368:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e36c:	e00d      	b.n	800e38a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e36e:	f7f8 ffdd 	bl	800732c <HAL_GetTick>
 800e372:	4602      	mov	r2, r0
 800e374:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e378:	1ad2      	subs	r2, r2, r3
 800e37a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e37e:	429a      	cmp	r2, r3
 800e380:	d903      	bls.n	800e38a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e382:	2303      	movs	r3, #3
 800e384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800e388:	e005      	b.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e38a:	4b1c      	ldr	r3, [pc, #112]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e38e:	f003 0302 	and.w	r3, r3, #2
 800e392:	2b00      	cmp	r3, #0
 800e394:	d0eb      	beq.n	800e36e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d129      	bne.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e3a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3ae:	d10e      	bne.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e3b0:	4b12      	ldr	r3, [pc, #72]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800e3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e3c0:	091a      	lsrs	r2, r3, #4
 800e3c2:	4b10      	ldr	r3, [pc, #64]	; (800e404 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e3c4:	4013      	ands	r3, r2
 800e3c6:	4a0d      	ldr	r2, [pc, #52]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3c8:	430b      	orrs	r3, r1
 800e3ca:	6113      	str	r3, [r2, #16]
 800e3cc:	e005      	b.n	800e3da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e3ce:	4b0b      	ldr	r3, [pc, #44]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3d0:	691b      	ldr	r3, [r3, #16]
 800e3d2:	4a0a      	ldr	r2, [pc, #40]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e3d8:	6113      	str	r3, [r2, #16]
 800e3da:	4b08      	ldr	r3, [pc, #32]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e3e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e3ea:	4a04      	ldr	r2, [pc, #16]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3ec:	430b      	orrs	r3, r1
 800e3ee:	6713      	str	r3, [r2, #112]	; 0x70
 800e3f0:	e00e      	b.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e3f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e3f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800e3fa:	e009      	b.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e3fc:	58024400 	.word	0x58024400
 800e400:	58024800 	.word	0x58024800
 800e404:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e40c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e418:	f002 0301 	and.w	r3, r2, #1
 800e41c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e420:	2300      	movs	r3, #0
 800e422:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e426:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e42a:	460b      	mov	r3, r1
 800e42c:	4313      	orrs	r3, r2
 800e42e:	f000 8089 	beq.w	800e544 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e438:	2b28      	cmp	r3, #40	; 0x28
 800e43a:	d86b      	bhi.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e43c:	a201      	add	r2, pc, #4	; (adr r2, 800e444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e442:	bf00      	nop
 800e444:	0800e51d 	.word	0x0800e51d
 800e448:	0800e515 	.word	0x0800e515
 800e44c:	0800e515 	.word	0x0800e515
 800e450:	0800e515 	.word	0x0800e515
 800e454:	0800e515 	.word	0x0800e515
 800e458:	0800e515 	.word	0x0800e515
 800e45c:	0800e515 	.word	0x0800e515
 800e460:	0800e515 	.word	0x0800e515
 800e464:	0800e4e9 	.word	0x0800e4e9
 800e468:	0800e515 	.word	0x0800e515
 800e46c:	0800e515 	.word	0x0800e515
 800e470:	0800e515 	.word	0x0800e515
 800e474:	0800e515 	.word	0x0800e515
 800e478:	0800e515 	.word	0x0800e515
 800e47c:	0800e515 	.word	0x0800e515
 800e480:	0800e515 	.word	0x0800e515
 800e484:	0800e4ff 	.word	0x0800e4ff
 800e488:	0800e515 	.word	0x0800e515
 800e48c:	0800e515 	.word	0x0800e515
 800e490:	0800e515 	.word	0x0800e515
 800e494:	0800e515 	.word	0x0800e515
 800e498:	0800e515 	.word	0x0800e515
 800e49c:	0800e515 	.word	0x0800e515
 800e4a0:	0800e515 	.word	0x0800e515
 800e4a4:	0800e51d 	.word	0x0800e51d
 800e4a8:	0800e515 	.word	0x0800e515
 800e4ac:	0800e515 	.word	0x0800e515
 800e4b0:	0800e515 	.word	0x0800e515
 800e4b4:	0800e515 	.word	0x0800e515
 800e4b8:	0800e515 	.word	0x0800e515
 800e4bc:	0800e515 	.word	0x0800e515
 800e4c0:	0800e515 	.word	0x0800e515
 800e4c4:	0800e51d 	.word	0x0800e51d
 800e4c8:	0800e515 	.word	0x0800e515
 800e4cc:	0800e515 	.word	0x0800e515
 800e4d0:	0800e515 	.word	0x0800e515
 800e4d4:	0800e515 	.word	0x0800e515
 800e4d8:	0800e515 	.word	0x0800e515
 800e4dc:	0800e515 	.word	0x0800e515
 800e4e0:	0800e515 	.word	0x0800e515
 800e4e4:	0800e51d 	.word	0x0800e51d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4ec:	3308      	adds	r3, #8
 800e4ee:	2101      	movs	r1, #1
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f001 fe95 	bl	8010220 <RCCEx_PLL2_Config>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e4fc:	e00f      	b.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e502:	3328      	adds	r3, #40	; 0x28
 800e504:	2101      	movs	r1, #1
 800e506:	4618      	mov	r0, r3
 800e508:	f001 ff3c 	bl	8010384 <RCCEx_PLL3_Config>
 800e50c:	4603      	mov	r3, r0
 800e50e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e512:	e004      	b.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e514:	2301      	movs	r3, #1
 800e516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e51a:	e000      	b.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e51c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e51e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10a      	bne.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e526:	4bbf      	ldr	r3, [pc, #764]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e52a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800e52e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e534:	4abb      	ldr	r2, [pc, #748]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e536:	430b      	orrs	r3, r1
 800e538:	6553      	str	r3, [r2, #84]	; 0x54
 800e53a:	e003      	b.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e53c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e540:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	f002 0302 	and.w	r3, r2, #2
 800e550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e554:	2300      	movs	r3, #0
 800e556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e55a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e55e:	460b      	mov	r3, r1
 800e560:	4313      	orrs	r3, r2
 800e562:	d041      	beq.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e56a:	2b05      	cmp	r3, #5
 800e56c:	d824      	bhi.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e56e:	a201      	add	r2, pc, #4	; (adr r2, 800e574 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e574:	0800e5c1 	.word	0x0800e5c1
 800e578:	0800e58d 	.word	0x0800e58d
 800e57c:	0800e5a3 	.word	0x0800e5a3
 800e580:	0800e5c1 	.word	0x0800e5c1
 800e584:	0800e5c1 	.word	0x0800e5c1
 800e588:	0800e5c1 	.word	0x0800e5c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e590:	3308      	adds	r3, #8
 800e592:	2101      	movs	r1, #1
 800e594:	4618      	mov	r0, r3
 800e596:	f001 fe43 	bl	8010220 <RCCEx_PLL2_Config>
 800e59a:	4603      	mov	r3, r0
 800e59c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e5a0:	e00f      	b.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5a6:	3328      	adds	r3, #40	; 0x28
 800e5a8:	2101      	movs	r1, #1
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f001 feea 	bl	8010384 <RCCEx_PLL3_Config>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e5b6:	e004      	b.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e5be:	e000      	b.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e5c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d10a      	bne.n	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e5ca:	4b96      	ldr	r3, [pc, #600]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e5cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5ce:	f023 0107 	bic.w	r1, r3, #7
 800e5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5d8:	4a92      	ldr	r2, [pc, #584]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e5da:	430b      	orrs	r3, r1
 800e5dc:	6553      	str	r3, [r2, #84]	; 0x54
 800e5de:	e003      	b.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e5e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f0:	f002 0304 	and.w	r3, r2, #4
 800e5f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e5fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e602:	460b      	mov	r3, r1
 800e604:	4313      	orrs	r3, r2
 800e606:	d044      	beq.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e60c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e610:	2b05      	cmp	r3, #5
 800e612:	d825      	bhi.n	800e660 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e614:	a201      	add	r2, pc, #4	; (adr r2, 800e61c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61a:	bf00      	nop
 800e61c:	0800e669 	.word	0x0800e669
 800e620:	0800e635 	.word	0x0800e635
 800e624:	0800e64b 	.word	0x0800e64b
 800e628:	0800e669 	.word	0x0800e669
 800e62c:	0800e669 	.word	0x0800e669
 800e630:	0800e669 	.word	0x0800e669
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e638:	3308      	adds	r3, #8
 800e63a:	2101      	movs	r1, #1
 800e63c:	4618      	mov	r0, r3
 800e63e:	f001 fdef 	bl	8010220 <RCCEx_PLL2_Config>
 800e642:	4603      	mov	r3, r0
 800e644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e648:	e00f      	b.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e64e:	3328      	adds	r3, #40	; 0x28
 800e650:	2101      	movs	r1, #1
 800e652:	4618      	mov	r0, r3
 800e654:	f001 fe96 	bl	8010384 <RCCEx_PLL3_Config>
 800e658:	4603      	mov	r3, r0
 800e65a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e65e:	e004      	b.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e666:	e000      	b.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e66a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d10b      	bne.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e672:	4b6c      	ldr	r3, [pc, #432]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e676:	f023 0107 	bic.w	r1, r3, #7
 800e67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e67e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e682:	4a68      	ldr	r2, [pc, #416]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e684:	430b      	orrs	r3, r1
 800e686:	6593      	str	r3, [r2, #88]	; 0x58
 800e688:	e003      	b.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e68a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e68e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69a:	f002 0320 	and.w	r3, r2, #32
 800e69e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e6a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	d055      	beq.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e6be:	d033      	beq.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e6c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e6c4:	d82c      	bhi.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6ca:	d02f      	beq.n	800e72c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e6cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6d0:	d826      	bhi.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e6d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e6d6:	d02b      	beq.n	800e730 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e6d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e6dc:	d820      	bhi.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e6de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6e2:	d012      	beq.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e6e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6e8:	d81a      	bhi.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d022      	beq.n	800e734 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e6ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e6f2:	d115      	bne.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6f8:	3308      	adds	r3, #8
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f001 fd8f 	bl	8010220 <RCCEx_PLL2_Config>
 800e702:	4603      	mov	r3, r0
 800e704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e708:	e015      	b.n	800e736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e70e:	3328      	adds	r3, #40	; 0x28
 800e710:	2102      	movs	r1, #2
 800e712:	4618      	mov	r0, r3
 800e714:	f001 fe36 	bl	8010384 <RCCEx_PLL3_Config>
 800e718:	4603      	mov	r3, r0
 800e71a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e71e:	e00a      	b.n	800e736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e720:	2301      	movs	r3, #1
 800e722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e726:	e006      	b.n	800e736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e728:	bf00      	nop
 800e72a:	e004      	b.n	800e736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e72c:	bf00      	nop
 800e72e:	e002      	b.n	800e736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e730:	bf00      	nop
 800e732:	e000      	b.n	800e736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e734:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d10b      	bne.n	800e756 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e73e:	4b39      	ldr	r3, [pc, #228]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e742:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e74a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e74e:	4a35      	ldr	r2, [pc, #212]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e750:	430b      	orrs	r3, r1
 800e752:	6553      	str	r3, [r2, #84]	; 0x54
 800e754:	e003      	b.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e75a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e766:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e76a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e76e:	2300      	movs	r3, #0
 800e770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e774:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e778:	460b      	mov	r3, r1
 800e77a:	4313      	orrs	r3, r2
 800e77c:	d058      	beq.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e786:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e78a:	d033      	beq.n	800e7f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e78c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e790:	d82c      	bhi.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e796:	d02f      	beq.n	800e7f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e79c:	d826      	bhi.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e79e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e7a2:	d02b      	beq.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e7a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e7a8:	d820      	bhi.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7ae:	d012      	beq.n	800e7d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e7b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7b4:	d81a      	bhi.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d022      	beq.n	800e800 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e7ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7be:	d115      	bne.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7c4:	3308      	adds	r3, #8
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f001 fd29 	bl	8010220 <RCCEx_PLL2_Config>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e7d4:	e015      	b.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7da:	3328      	adds	r3, #40	; 0x28
 800e7dc:	2102      	movs	r1, #2
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f001 fdd0 	bl	8010384 <RCCEx_PLL3_Config>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e7ea:	e00a      	b.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e7f2:	e006      	b.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e7f4:	bf00      	nop
 800e7f6:	e004      	b.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e7f8:	bf00      	nop
 800e7fa:	e002      	b.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e7fc:	bf00      	nop
 800e7fe:	e000      	b.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e800:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e806:	2b00      	cmp	r3, #0
 800e808:	d10e      	bne.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e80a:	4b06      	ldr	r3, [pc, #24]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e80e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800e812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e816:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e81a:	4a02      	ldr	r2, [pc, #8]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e81c:	430b      	orrs	r3, r1
 800e81e:	6593      	str	r3, [r2, #88]	; 0x58
 800e820:	e006      	b.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e822:	bf00      	nop
 800e824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e82c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e83c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e840:	2300      	movs	r3, #0
 800e842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e846:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e84a:	460b      	mov	r3, r1
 800e84c:	4313      	orrs	r3, r2
 800e84e:	d055      	beq.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e854:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e858:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e85c:	d033      	beq.n	800e8c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e85e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e862:	d82c      	bhi.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e868:	d02f      	beq.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e86a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e86e:	d826      	bhi.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e870:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e874:	d02b      	beq.n	800e8ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e876:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e87a:	d820      	bhi.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e87c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e880:	d012      	beq.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e886:	d81a      	bhi.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d022      	beq.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e88c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e890:	d115      	bne.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e896:	3308      	adds	r3, #8
 800e898:	2100      	movs	r1, #0
 800e89a:	4618      	mov	r0, r3
 800e89c:	f001 fcc0 	bl	8010220 <RCCEx_PLL2_Config>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e8a6:	e015      	b.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e8a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8ac:	3328      	adds	r3, #40	; 0x28
 800e8ae:	2102      	movs	r1, #2
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f001 fd67 	bl	8010384 <RCCEx_PLL3_Config>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e8bc:	e00a      	b.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e8c4:	e006      	b.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8c6:	bf00      	nop
 800e8c8:	e004      	b.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8ca:	bf00      	nop
 800e8cc:	e002      	b.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8ce:	bf00      	nop
 800e8d0:	e000      	b.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d10b      	bne.n	800e8f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e8dc:	4ba1      	ldr	r3, [pc, #644]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800e8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e8ec:	4a9d      	ldr	r2, [pc, #628]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8ee:	430b      	orrs	r3, r1
 800e8f0:	6593      	str	r3, [r2, #88]	; 0x58
 800e8f2:	e003      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e8f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e8fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e904:	f002 0308 	and.w	r3, r2, #8
 800e908:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e90c:	2300      	movs	r3, #0
 800e90e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e912:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e916:	460b      	mov	r3, r1
 800e918:	4313      	orrs	r3, r2
 800e91a:	d01e      	beq.n	800e95a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e928:	d10c      	bne.n	800e944 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e92e:	3328      	adds	r3, #40	; 0x28
 800e930:	2102      	movs	r1, #2
 800e932:	4618      	mov	r0, r3
 800e934:	f001 fd26 	bl	8010384 <RCCEx_PLL3_Config>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d002      	beq.n	800e944 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e93e:	2301      	movs	r3, #1
 800e940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e944:	4b87      	ldr	r3, [pc, #540]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e948:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e954:	4a83      	ldr	r2, [pc, #524]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e956:	430b      	orrs	r3, r1
 800e958:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e962:	f002 0310 	and.w	r3, r2, #16
 800e966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e96a:	2300      	movs	r3, #0
 800e96c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e970:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800e974:	460b      	mov	r3, r1
 800e976:	4313      	orrs	r3, r2
 800e978:	d01e      	beq.n	800e9b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e97e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e986:	d10c      	bne.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e98c:	3328      	adds	r3, #40	; 0x28
 800e98e:	2102      	movs	r1, #2
 800e990:	4618      	mov	r0, r3
 800e992:	f001 fcf7 	bl	8010384 <RCCEx_PLL3_Config>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d002      	beq.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e9a2:	4b70      	ldr	r3, [pc, #448]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e9b2:	4a6c      	ldr	r2, [pc, #432]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9b4:	430b      	orrs	r3, r1
 800e9b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800e9c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e9ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	d03e      	beq.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e9e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e9e4:	d022      	beq.n	800ea2c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e9e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e9ea:	d81b      	bhi.n	800ea24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d003      	beq.n	800e9f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e9f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9f4:	d00b      	beq.n	800ea0e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e9f6:	e015      	b.n	800ea24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9fc:	3308      	adds	r3, #8
 800e9fe:	2100      	movs	r1, #0
 800ea00:	4618      	mov	r0, r3
 800ea02:	f001 fc0d 	bl	8010220 <RCCEx_PLL2_Config>
 800ea06:	4603      	mov	r3, r0
 800ea08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea0c:	e00f      	b.n	800ea2e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea12:	3328      	adds	r3, #40	; 0x28
 800ea14:	2102      	movs	r1, #2
 800ea16:	4618      	mov	r0, r3
 800ea18:	f001 fcb4 	bl	8010384 <RCCEx_PLL3_Config>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea22:	e004      	b.n	800ea2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea24:	2301      	movs	r3, #1
 800ea26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ea2a:	e000      	b.n	800ea2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ea2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d10b      	bne.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ea36:	4b4b      	ldr	r3, [pc, #300]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ea3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ea46:	4a47      	ldr	r2, [pc, #284]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea48:	430b      	orrs	r3, r1
 800ea4a:	6593      	str	r3, [r2, #88]	; 0x58
 800ea4c:	e003      	b.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ea56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ea62:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea64:	2300      	movs	r3, #0
 800ea66:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ea68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	d03b      	beq.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ea72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ea7e:	d01f      	beq.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ea80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ea84:	d818      	bhi.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ea86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea8a:	d003      	beq.n	800ea94 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ea8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ea90:	d007      	beq.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ea92:	e011      	b.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea94:	4b33      	ldr	r3, [pc, #204]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea98:	4a32      	ldr	r2, [pc, #200]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ea9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800eaa0:	e00f      	b.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eaa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaa6:	3328      	adds	r3, #40	; 0x28
 800eaa8:	2101      	movs	r1, #1
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f001 fc6a 	bl	8010384 <RCCEx_PLL3_Config>
 800eab0:	4603      	mov	r3, r0
 800eab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800eab6:	e004      	b.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eab8:	2301      	movs	r3, #1
 800eaba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eabe:	e000      	b.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800eac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d10b      	bne.n	800eae2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800eaca:	4b26      	ldr	r3, [pc, #152]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eace:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ead2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ead6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eada:	4a22      	ldr	r2, [pc, #136]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eadc:	430b      	orrs	r3, r1
 800eade:	6553      	str	r3, [r2, #84]	; 0x54
 800eae0:	e003      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800eaea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800eaf6:	673b      	str	r3, [r7, #112]	; 0x70
 800eaf8:	2300      	movs	r3, #0
 800eafa:	677b      	str	r3, [r7, #116]	; 0x74
 800eafc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800eb00:	460b      	mov	r3, r1
 800eb02:	4313      	orrs	r3, r2
 800eb04:	d034      	beq.n	800eb70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800eb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d003      	beq.n	800eb18 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800eb10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb14:	d007      	beq.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800eb16:	e011      	b.n	800eb3c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb18:	4b12      	ldr	r3, [pc, #72]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb1c:	4a11      	ldr	r2, [pc, #68]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eb24:	e00e      	b.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb2a:	3308      	adds	r3, #8
 800eb2c:	2102      	movs	r1, #2
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f001 fb76 	bl	8010220 <RCCEx_PLL2_Config>
 800eb34:	4603      	mov	r3, r0
 800eb36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eb3a:	e003      	b.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10d      	bne.n	800eb68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800eb4c:	4b05      	ldr	r3, [pc, #20]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb5a:	4a02      	ldr	r2, [pc, #8]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb5c:	430b      	orrs	r3, r1
 800eb5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800eb60:	e006      	b.n	800eb70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800eb62:	bf00      	nop
 800eb64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800eb70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800eb7c:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb7e:	2300      	movs	r3, #0
 800eb80:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eb82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800eb86:	460b      	mov	r3, r1
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	d00c      	beq.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800eb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb90:	3328      	adds	r3, #40	; 0x28
 800eb92:	2102      	movs	r1, #2
 800eb94:	4618      	mov	r0, r3
 800eb96:	f001 fbf5 	bl	8010384 <RCCEx_PLL3_Config>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d002      	beq.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800eba0:	2301      	movs	r3, #1
 800eba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800eba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ebb2:	663b      	str	r3, [r7, #96]	; 0x60
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	667b      	str	r3, [r7, #100]	; 0x64
 800ebb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	d038      	beq.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ebc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ebce:	d018      	beq.n	800ec02 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ebd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ebd4:	d811      	bhi.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ebd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebda:	d014      	beq.n	800ec06 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ebdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebe0:	d80b      	bhi.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d011      	beq.n	800ec0a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ebe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebea:	d106      	bne.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebec:	4bc3      	ldr	r3, [pc, #780]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ebee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf0:	4ac2      	ldr	r2, [pc, #776]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ebf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ebf8:	e008      	b.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec00:	e004      	b.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec02:	bf00      	nop
 800ec04:	e002      	b.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec06:	bf00      	nop
 800ec08:	e000      	b.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d10b      	bne.n	800ec2c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ec14:	4bb9      	ldr	r3, [pc, #740]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec18:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ec1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec24:	4ab5      	ldr	r2, [pc, #724]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec26:	430b      	orrs	r3, r1
 800ec28:	6553      	str	r3, [r2, #84]	; 0x54
 800ec2a:	e003      	b.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ec34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ec40:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec42:	2300      	movs	r3, #0
 800ec44:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	d009      	beq.n	800ec64 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ec50:	4baa      	ldr	r3, [pc, #680]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ec58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec5e:	4aa7      	ldr	r2, [pc, #668]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec60:	430b      	orrs	r3, r1
 800ec62:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ec64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ec70:	653b      	str	r3, [r7, #80]	; 0x50
 800ec72:	2300      	movs	r3, #0
 800ec74:	657b      	str	r3, [r7, #84]	; 0x54
 800ec76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ec7a:	460b      	mov	r3, r1
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	d00a      	beq.n	800ec96 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ec80:	4b9e      	ldr	r3, [pc, #632]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec82:	691b      	ldr	r3, [r3, #16]
 800ec84:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ec88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ec90:	4a9a      	ldr	r2, [pc, #616]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec92:	430b      	orrs	r3, r1
 800ec94:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ec96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800eca2:	64bb      	str	r3, [r7, #72]	; 0x48
 800eca4:	2300      	movs	r3, #0
 800eca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eca8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ecac:	460b      	mov	r3, r1
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	d009      	beq.n	800ecc6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ecb2:	4b92      	ldr	r3, [pc, #584]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecb6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ecba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecc0:	4a8e      	ldr	r2, [pc, #568]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecc2:	430b      	orrs	r3, r1
 800ecc4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ecc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ecd2:	643b      	str	r3, [r7, #64]	; 0x40
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	647b      	str	r3, [r7, #68]	; 0x44
 800ecd8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ecdc:	460b      	mov	r3, r1
 800ecde:	4313      	orrs	r3, r2
 800ece0:	d00e      	beq.n	800ed00 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ece2:	4b86      	ldr	r3, [pc, #536]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ece4:	691b      	ldr	r3, [r3, #16]
 800ece6:	4a85      	ldr	r2, [pc, #532]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ece8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ecec:	6113      	str	r3, [r2, #16]
 800ecee:	4b83      	ldr	r3, [pc, #524]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecf0:	6919      	ldr	r1, [r3, #16]
 800ecf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecf6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ecfa:	4a80      	ldr	r2, [pc, #512]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecfc:	430b      	orrs	r3, r1
 800ecfe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ed00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed08:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ed0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed0e:	2300      	movs	r3, #0
 800ed10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ed16:	460b      	mov	r3, r1
 800ed18:	4313      	orrs	r3, r2
 800ed1a:	d009      	beq.n	800ed30 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ed1c:	4b77      	ldr	r3, [pc, #476]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed20:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ed24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed2a:	4a74      	ldr	r2, [pc, #464]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed2c:	430b      	orrs	r3, r1
 800ed2e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ed30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed38:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ed3c:	633b      	str	r3, [r7, #48]	; 0x30
 800ed3e:	2300      	movs	r3, #0
 800ed40:	637b      	str	r3, [r7, #52]	; 0x34
 800ed42:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ed46:	460b      	mov	r3, r1
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	d00a      	beq.n	800ed62 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ed4c:	4b6b      	ldr	r3, [pc, #428]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed50:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ed54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed5c:	4a67      	ldr	r2, [pc, #412]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed5e:	430b      	orrs	r3, r1
 800ed60:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ed62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	62b9      	str	r1, [r7, #40]	; 0x28
 800ed6e:	f003 0301 	and.w	r3, r3, #1
 800ed72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed74:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ed78:	460b      	mov	r3, r1
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	d011      	beq.n	800eda2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed82:	3308      	adds	r3, #8
 800ed84:	2100      	movs	r1, #0
 800ed86:	4618      	mov	r0, r3
 800ed88:	f001 fa4a 	bl	8010220 <RCCEx_PLL2_Config>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ed92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d003      	beq.n	800eda2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800eda2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edaa:	2100      	movs	r1, #0
 800edac:	6239      	str	r1, [r7, #32]
 800edae:	f003 0302 	and.w	r3, r3, #2
 800edb2:	627b      	str	r3, [r7, #36]	; 0x24
 800edb4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800edb8:	460b      	mov	r3, r1
 800edba:	4313      	orrs	r3, r2
 800edbc:	d011      	beq.n	800ede2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800edbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edc2:	3308      	adds	r3, #8
 800edc4:	2101      	movs	r1, #1
 800edc6:	4618      	mov	r0, r3
 800edc8:	f001 fa2a 	bl	8010220 <RCCEx_PLL2_Config>
 800edcc:	4603      	mov	r3, r0
 800edce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800edd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d003      	beq.n	800ede2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ede2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ede6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edea:	2100      	movs	r1, #0
 800edec:	61b9      	str	r1, [r7, #24]
 800edee:	f003 0304 	and.w	r3, r3, #4
 800edf2:	61fb      	str	r3, [r7, #28]
 800edf4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800edf8:	460b      	mov	r3, r1
 800edfa:	4313      	orrs	r3, r2
 800edfc:	d011      	beq.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800edfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee02:	3308      	adds	r3, #8
 800ee04:	2102      	movs	r1, #2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f001 fa0a 	bl	8010220 <RCCEx_PLL2_Config>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ee12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d003      	beq.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ee22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2a:	2100      	movs	r1, #0
 800ee2c:	6139      	str	r1, [r7, #16]
 800ee2e:	f003 0308 	and.w	r3, r3, #8
 800ee32:	617b      	str	r3, [r7, #20]
 800ee34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ee38:	460b      	mov	r3, r1
 800ee3a:	4313      	orrs	r3, r2
 800ee3c:	d011      	beq.n	800ee62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee42:	3328      	adds	r3, #40	; 0x28
 800ee44:	2100      	movs	r1, #0
 800ee46:	4618      	mov	r0, r3
 800ee48:	f001 fa9c 	bl	8010384 <RCCEx_PLL3_Config>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ee52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d003      	beq.n	800ee62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ee62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	f003 0310 	and.w	r3, r3, #16
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ee78:	460b      	mov	r3, r1
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	d011      	beq.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee82:	3328      	adds	r3, #40	; 0x28
 800ee84:	2101      	movs	r1, #1
 800ee86:	4618      	mov	r0, r3
 800ee88:	f001 fa7c 	bl	8010384 <RCCEx_PLL3_Config>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ee92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d003      	beq.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800eea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeaa:	2100      	movs	r1, #0
 800eeac:	6039      	str	r1, [r7, #0]
 800eeae:	f003 0320 	and.w	r3, r3, #32
 800eeb2:	607b      	str	r3, [r7, #4]
 800eeb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800eeb8:	460b      	mov	r3, r1
 800eeba:	4313      	orrs	r3, r2
 800eebc:	d011      	beq.n	800eee2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eec2:	3328      	adds	r3, #40	; 0x28
 800eec4:	2102      	movs	r1, #2
 800eec6:	4618      	mov	r0, r3
 800eec8:	f001 fa5c 	bl	8010384 <RCCEx_PLL3_Config>
 800eecc:	4603      	mov	r3, r0
 800eece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800eed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d003      	beq.n	800eee2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eeda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eede:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800eee2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d101      	bne.n	800eeee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800eeea:	2300      	movs	r3, #0
 800eeec:	e000      	b.n	800eef0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800eeee:	2301      	movs	r3, #1
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800eef6:	46bd      	mov	sp, r7
 800eef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eefc:	58024400 	.word	0x58024400

0800ef00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b090      	sub	sp, #64	; 0x40
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ef0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef0e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ef12:	430b      	orrs	r3, r1
 800ef14:	f040 8094 	bne.w	800f040 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ef18:	4b9e      	ldr	r3, [pc, #632]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef1c:	f003 0307 	and.w	r3, r3, #7
 800ef20:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ef22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef24:	2b04      	cmp	r3, #4
 800ef26:	f200 8087 	bhi.w	800f038 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ef2a:	a201      	add	r2, pc, #4	; (adr r2, 800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ef2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef30:	0800ef45 	.word	0x0800ef45
 800ef34:	0800ef6d 	.word	0x0800ef6d
 800ef38:	0800ef95 	.word	0x0800ef95
 800ef3c:	0800f031 	.word	0x0800f031
 800ef40:	0800efbd 	.word	0x0800efbd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef44:	4b93      	ldr	r3, [pc, #588]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef50:	d108      	bne.n	800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef56:	4618      	mov	r0, r3
 800ef58:	f001 f810 	bl	800ff7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ef5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef60:	f000 bd45 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef64:	2300      	movs	r3, #0
 800ef66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef68:	f000 bd41 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ef6c:	4b89      	ldr	r3, [pc, #548]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef78:	d108      	bne.n	800ef8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef7a:	f107 0318 	add.w	r3, r7, #24
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f000 fd54 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef88:	f000 bd31 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef90:	f000 bd2d 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ef94:	4b7f      	ldr	r3, [pc, #508]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ef9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800efa0:	d108      	bne.n	800efb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efa2:	f107 030c 	add.w	r3, r7, #12
 800efa6:	4618      	mov	r0, r3
 800efa8:	f000 fe94 	bl	800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efb0:	f000 bd1d 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efb4:	2300      	movs	r3, #0
 800efb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efb8:	f000 bd19 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800efbc:	4b75      	ldr	r3, [pc, #468]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800efc4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800efc6:	4b73      	ldr	r3, [pc, #460]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f003 0304 	and.w	r3, r3, #4
 800efce:	2b04      	cmp	r3, #4
 800efd0:	d10c      	bne.n	800efec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800efd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d109      	bne.n	800efec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800efd8:	4b6e      	ldr	r3, [pc, #440]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	08db      	lsrs	r3, r3, #3
 800efde:	f003 0303 	and.w	r3, r3, #3
 800efe2:	4a6d      	ldr	r2, [pc, #436]	; (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800efe4:	fa22 f303 	lsr.w	r3, r2, r3
 800efe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efea:	e01f      	b.n	800f02c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800efec:	4b69      	ldr	r3, [pc, #420]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eff8:	d106      	bne.n	800f008 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800effa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800effc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f000:	d102      	bne.n	800f008 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f002:	4b66      	ldr	r3, [pc, #408]	; (800f19c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f004:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f006:	e011      	b.n	800f02c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f008:	4b62      	ldr	r3, [pc, #392]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f014:	d106      	bne.n	800f024 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f01c:	d102      	bne.n	800f024 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f01e:	4b60      	ldr	r3, [pc, #384]	; (800f1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f020:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f022:	e003      	b.n	800f02c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f028:	f000 bce1 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f02c:	f000 bcdf 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f030:	4b5c      	ldr	r3, [pc, #368]	; (800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f034:	f000 bcdb 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f038:	2300      	movs	r3, #0
 800f03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f03c:	f000 bcd7 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f044:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f048:	430b      	orrs	r3, r1
 800f04a:	f040 80ad 	bne.w	800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f04e:	4b51      	ldr	r3, [pc, #324]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f052:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800f056:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f05e:	d056      	beq.n	800f10e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800f060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f066:	f200 8090 	bhi.w	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	2bc0      	cmp	r3, #192	; 0xc0
 800f06e:	f000 8088 	beq.w	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800f072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f074:	2bc0      	cmp	r3, #192	; 0xc0
 800f076:	f200 8088 	bhi.w	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07c:	2b80      	cmp	r3, #128	; 0x80
 800f07e:	d032      	beq.n	800f0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f082:	2b80      	cmp	r3, #128	; 0x80
 800f084:	f200 8081 	bhi.w	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d003      	beq.n	800f096 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f090:	2b40      	cmp	r3, #64	; 0x40
 800f092:	d014      	beq.n	800f0be <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f094:	e079      	b.n	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f096:	4b3f      	ldr	r3, [pc, #252]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f09e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0a2:	d108      	bne.n	800f0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f000 ff67 	bl	800ff7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0b2:	f000 bc9c 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0ba:	f000 bc98 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0be:	4b35      	ldr	r3, [pc, #212]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f0ca:	d108      	bne.n	800f0de <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0cc:	f107 0318 	add.w	r3, r7, #24
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f000 fcab 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f0d6:	69bb      	ldr	r3, [r7, #24]
 800f0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0da:	f000 bc88 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0e2:	f000 bc84 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f0e6:	4b2b      	ldr	r3, [pc, #172]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f0ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0f2:	d108      	bne.n	800f106 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0f4:	f107 030c 	add.w	r3, r7, #12
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f000 fdeb 	bl	800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f102:	f000 bc74 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f10a:	f000 bc70 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f10e:	4b21      	ldr	r3, [pc, #132]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f112:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f116:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f118:	4b1e      	ldr	r3, [pc, #120]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f003 0304 	and.w	r3, r3, #4
 800f120:	2b04      	cmp	r3, #4
 800f122:	d10c      	bne.n	800f13e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800f124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f126:	2b00      	cmp	r3, #0
 800f128:	d109      	bne.n	800f13e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f12a:	4b1a      	ldr	r3, [pc, #104]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	08db      	lsrs	r3, r3, #3
 800f130:	f003 0303 	and.w	r3, r3, #3
 800f134:	4a18      	ldr	r2, [pc, #96]	; (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f136:	fa22 f303 	lsr.w	r3, r2, r3
 800f13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f13c:	e01f      	b.n	800f17e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f13e:	4b15      	ldr	r3, [pc, #84]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f14a:	d106      	bne.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f14e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f152:	d102      	bne.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f154:	4b11      	ldr	r3, [pc, #68]	; (800f19c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f156:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f158:	e011      	b.n	800f17e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f15a:	4b0e      	ldr	r3, [pc, #56]	; (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f166:	d106      	bne.n	800f176 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800f168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f16a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f16e:	d102      	bne.n	800f176 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f170:	4b0b      	ldr	r3, [pc, #44]	; (800f1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f172:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f174:	e003      	b.n	800f17e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f176:	2300      	movs	r3, #0
 800f178:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f17a:	f000 bc38 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f17e:	f000 bc36 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f182:	4b08      	ldr	r3, [pc, #32]	; (800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f186:	f000 bc32 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f18a:	2300      	movs	r3, #0
 800f18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f18e:	f000 bc2e 	b.w	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f192:	bf00      	nop
 800f194:	58024400 	.word	0x58024400
 800f198:	03d09000 	.word	0x03d09000
 800f19c:	003d0900 	.word	0x003d0900
 800f1a0:	017d7840 	.word	0x017d7840
 800f1a4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f1a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1ac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800f1b0:	430b      	orrs	r3, r1
 800f1b2:	f040 809c 	bne.w	800f2ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f1b6:	4b9e      	ldr	r3, [pc, #632]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1ba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800f1be:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f1c6:	d054      	beq.n	800f272 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f1ce:	f200 808b 	bhi.w	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f1d8:	f000 8083 	beq.w	800f2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800f1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f1e2:	f200 8081 	bhi.w	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f1ec:	d02f      	beq.n	800f24e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f1f4:	d878      	bhi.n	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d004      	beq.n	800f206 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f202:	d012      	beq.n	800f22a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f204:	e070      	b.n	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f206:	4b8a      	ldr	r3, [pc, #552]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f20e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f212:	d107      	bne.n	800f224 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f218:	4618      	mov	r0, r3
 800f21a:	f000 feaf 	bl	800ff7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f220:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f222:	e3e4      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f224:	2300      	movs	r3, #0
 800f226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f228:	e3e1      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f22a:	4b81      	ldr	r3, [pc, #516]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f236:	d107      	bne.n	800f248 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f238:	f107 0318 	add.w	r3, r7, #24
 800f23c:	4618      	mov	r0, r3
 800f23e:	f000 fbf5 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f246:	e3d2      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f248:	2300      	movs	r3, #0
 800f24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f24c:	e3cf      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f24e:	4b78      	ldr	r3, [pc, #480]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f25a:	d107      	bne.n	800f26c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f25c:	f107 030c 	add.w	r3, r7, #12
 800f260:	4618      	mov	r0, r3
 800f262:	f000 fd37 	bl	800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f26a:	e3c0      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f26c:	2300      	movs	r3, #0
 800f26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f270:	e3bd      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f272:	4b6f      	ldr	r3, [pc, #444]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f276:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f27a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f27c:	4b6c      	ldr	r3, [pc, #432]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f003 0304 	and.w	r3, r3, #4
 800f284:	2b04      	cmp	r3, #4
 800f286:	d10c      	bne.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800f288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d109      	bne.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f28e:	4b68      	ldr	r3, [pc, #416]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	08db      	lsrs	r3, r3, #3
 800f294:	f003 0303 	and.w	r3, r3, #3
 800f298:	4a66      	ldr	r2, [pc, #408]	; (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f29a:	fa22 f303 	lsr.w	r3, r2, r3
 800f29e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2a0:	e01e      	b.n	800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f2a2:	4b63      	ldr	r3, [pc, #396]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2ae:	d106      	bne.n	800f2be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f2b6:	d102      	bne.n	800f2be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f2b8:	4b5f      	ldr	r3, [pc, #380]	; (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2bc:	e010      	b.n	800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f2be:	4b5c      	ldr	r3, [pc, #368]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2ca:	d106      	bne.n	800f2da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2d2:	d102      	bne.n	800f2da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f2d4:	4b59      	ldr	r3, [pc, #356]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2d8:	e002      	b.n	800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f2de:	e386      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f2e0:	e385      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f2e2:	4b57      	ldr	r3, [pc, #348]	; (800f440 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2e6:	e382      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2ec:	e37f      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f2ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2f2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f2f6:	430b      	orrs	r3, r1
 800f2f8:	f040 80a7 	bne.w	800f44a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f2fc:	4b4c      	ldr	r3, [pc, #304]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f300:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f304:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f30c:	d055      	beq.n	800f3ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f314:	f200 8096 	bhi.w	800f444 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f31e:	f000 8084 	beq.w	800f42a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f324:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f328:	f200 808c 	bhi.w	800f444 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f332:	d030      	beq.n	800f396 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f33a:	f200 8083 	bhi.w	800f444 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f340:	2b00      	cmp	r3, #0
 800f342:	d004      	beq.n	800f34e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f346:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f34a:	d012      	beq.n	800f372 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f34c:	e07a      	b.n	800f444 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f34e:	4b38      	ldr	r3, [pc, #224]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f35a:	d107      	bne.n	800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f35c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f360:	4618      	mov	r0, r3
 800f362:	f000 fe0b 	bl	800ff7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f36a:	e340      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f36c:	2300      	movs	r3, #0
 800f36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f370:	e33d      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f372:	4b2f      	ldr	r3, [pc, #188]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f37a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f37e:	d107      	bne.n	800f390 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f380:	f107 0318 	add.w	r3, r7, #24
 800f384:	4618      	mov	r0, r3
 800f386:	f000 fb51 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f38e:	e32e      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f390:	2300      	movs	r3, #0
 800f392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f394:	e32b      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f396:	4b26      	ldr	r3, [pc, #152]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f39e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f3a2:	d107      	bne.n	800f3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3a4:	f107 030c 	add.w	r3, r7, #12
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f000 fc93 	bl	800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3b2:	e31c      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3b8:	e319      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f3ba:	4b1d      	ldr	r3, [pc, #116]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f3c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f3c4:	4b1a      	ldr	r3, [pc, #104]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f003 0304 	and.w	r3, r3, #4
 800f3cc:	2b04      	cmp	r3, #4
 800f3ce:	d10c      	bne.n	800f3ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d109      	bne.n	800f3ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f3d6:	4b16      	ldr	r3, [pc, #88]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	08db      	lsrs	r3, r3, #3
 800f3dc:	f003 0303 	and.w	r3, r3, #3
 800f3e0:	4a14      	ldr	r2, [pc, #80]	; (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800f3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3e8:	e01e      	b.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f3ea:	4b11      	ldr	r3, [pc, #68]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3f6:	d106      	bne.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3fe:	d102      	bne.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f400:	4b0d      	ldr	r3, [pc, #52]	; (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f402:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f404:	e010      	b.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f406:	4b0a      	ldr	r3, [pc, #40]	; (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f40e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f412:	d106      	bne.n	800f422 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f41a:	d102      	bne.n	800f422 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f41c:	4b07      	ldr	r3, [pc, #28]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f41e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f420:	e002      	b.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f426:	e2e2      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f428:	e2e1      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f42a:	4b05      	ldr	r3, [pc, #20]	; (800f440 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f42e:	e2de      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f430:	58024400 	.word	0x58024400
 800f434:	03d09000 	.word	0x03d09000
 800f438:	003d0900 	.word	0x003d0900
 800f43c:	017d7840 	.word	0x017d7840
 800f440:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f444:	2300      	movs	r3, #0
 800f446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f448:	e2d1      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f44a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f44e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f452:	430b      	orrs	r3, r1
 800f454:	f040 809c 	bne.w	800f590 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f458:	4b93      	ldr	r3, [pc, #588]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f45c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f460:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f468:	d054      	beq.n	800f514 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f470:	f200 808b 	bhi.w	800f58a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f476:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f47a:	f000 8083 	beq.w	800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f480:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f484:	f200 8081 	bhi.w	800f58a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f48e:	d02f      	beq.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f496:	d878      	bhi.n	800f58a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d004      	beq.n	800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4a4:	d012      	beq.n	800f4cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f4a6:	e070      	b.n	800f58a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f4a8:	4b7f      	ldr	r3, [pc, #508]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f4b4:	d107      	bne.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f4b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f000 fd5e 	bl	800ff7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4c4:	e293      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4ca:	e290      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f4cc:	4b76      	ldr	r3, [pc, #472]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f4d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f4d8:	d107      	bne.n	800f4ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4da:	f107 0318 	add.w	r3, r7, #24
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f000 faa4 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f4e4:	69bb      	ldr	r3, [r7, #24]
 800f4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4e8:	e281      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4ee:	e27e      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f4f0:	4b6d      	ldr	r3, [pc, #436]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f4f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4fc:	d107      	bne.n	800f50e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4fe:	f107 030c 	add.w	r3, r7, #12
 800f502:	4618      	mov	r0, r3
 800f504:	f000 fbe6 	bl	800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f50c:	e26f      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f50e:	2300      	movs	r3, #0
 800f510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f512:	e26c      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f514:	4b64      	ldr	r3, [pc, #400]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f51c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f51e:	4b62      	ldr	r3, [pc, #392]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f003 0304 	and.w	r3, r3, #4
 800f526:	2b04      	cmp	r3, #4
 800f528:	d10c      	bne.n	800f544 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d109      	bne.n	800f544 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f530:	4b5d      	ldr	r3, [pc, #372]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	08db      	lsrs	r3, r3, #3
 800f536:	f003 0303 	and.w	r3, r3, #3
 800f53a:	4a5c      	ldr	r2, [pc, #368]	; (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f53c:	fa22 f303 	lsr.w	r3, r2, r3
 800f540:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f542:	e01e      	b.n	800f582 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f544:	4b58      	ldr	r3, [pc, #352]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f54c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f550:	d106      	bne.n	800f560 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f558:	d102      	bne.n	800f560 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f55a:	4b55      	ldr	r3, [pc, #340]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f55c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f55e:	e010      	b.n	800f582 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f560:	4b51      	ldr	r3, [pc, #324]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f56c:	d106      	bne.n	800f57c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f574:	d102      	bne.n	800f57c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f576:	4b4f      	ldr	r3, [pc, #316]	; (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f57a:	e002      	b.n	800f582 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f57c:	2300      	movs	r3, #0
 800f57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f580:	e235      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f582:	e234      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f584:	4b4c      	ldr	r3, [pc, #304]	; (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f588:	e231      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f58a:	2300      	movs	r3, #0
 800f58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f58e:	e22e      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f590:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f594:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f598:	430b      	orrs	r3, r1
 800f59a:	f040 808f 	bne.w	800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f59e:	4b42      	ldr	r3, [pc, #264]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5a2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f5a6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800f5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f5ae:	d06b      	beq.n	800f688 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f5b6:	d874      	bhi.n	800f6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f5be:	d056      	beq.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f5c6:	d86c      	bhi.n	800f6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f5ce:	d03b      	beq.n	800f648 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f5d6:	d864      	bhi.n	800f6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f5de:	d021      	beq.n	800f624 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f5e6:	d85c      	bhi.n	800f6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d004      	beq.n	800f5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5f4:	d004      	beq.n	800f600 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f5f6:	e054      	b.n	800f6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f5f8:	f7fe fa4c 	bl	800da94 <HAL_RCC_GetPCLK1Freq>
 800f5fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5fe:	e1f6      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f600:	4b29      	ldr	r3, [pc, #164]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f60c:	d107      	bne.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f60e:	f107 0318 	add.w	r3, r7, #24
 800f612:	4618      	mov	r0, r3
 800f614:	f000 fa0a 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f61c:	e1e7      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f61e:	2300      	movs	r3, #0
 800f620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f622:	e1e4      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f624:	4b20      	ldr	r3, [pc, #128]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f62c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f630:	d107      	bne.n	800f642 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f632:	f107 030c 	add.w	r3, r7, #12
 800f636:	4618      	mov	r0, r3
 800f638:	f000 fb4c 	bl	800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f640:	e1d5      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f642:	2300      	movs	r3, #0
 800f644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f646:	e1d2      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f648:	4b17      	ldr	r3, [pc, #92]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f003 0304 	and.w	r3, r3, #4
 800f650:	2b04      	cmp	r3, #4
 800f652:	d109      	bne.n	800f668 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f654:	4b14      	ldr	r3, [pc, #80]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	08db      	lsrs	r3, r3, #3
 800f65a:	f003 0303 	and.w	r3, r3, #3
 800f65e:	4a13      	ldr	r2, [pc, #76]	; (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f660:	fa22 f303 	lsr.w	r3, r2, r3
 800f664:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f666:	e1c2      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f668:	2300      	movs	r3, #0
 800f66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f66c:	e1bf      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f66e:	4b0e      	ldr	r3, [pc, #56]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f67a:	d102      	bne.n	800f682 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f67c:	4b0c      	ldr	r3, [pc, #48]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f680:	e1b5      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f682:	2300      	movs	r3, #0
 800f684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f686:	e1b2      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f688:	4b07      	ldr	r3, [pc, #28]	; (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f694:	d102      	bne.n	800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f696:	4b07      	ldr	r3, [pc, #28]	; (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f69a:	e1a8      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f69c:	2300      	movs	r3, #0
 800f69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6a0:	e1a5      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6a6:	e1a2      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f6a8:	58024400 	.word	0x58024400
 800f6ac:	03d09000 	.word	0x03d09000
 800f6b0:	003d0900 	.word	0x003d0900
 800f6b4:	017d7840 	.word	0x017d7840
 800f6b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f6bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6c0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800f6c4:	430b      	orrs	r3, r1
 800f6c6:	d173      	bne.n	800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f6c8:	4b9c      	ldr	r3, [pc, #624]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f6d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f6d8:	d02f      	beq.n	800f73a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f6e0:	d863      	bhi.n	800f7aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d004      	beq.n	800f6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6ee:	d012      	beq.n	800f716 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f6f0:	e05b      	b.n	800f7aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f6f2:	4b92      	ldr	r3, [pc, #584]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f6fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f6fe:	d107      	bne.n	800f710 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f700:	f107 0318 	add.w	r3, r7, #24
 800f704:	4618      	mov	r0, r3
 800f706:	f000 f991 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f70e:	e16e      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f710:	2300      	movs	r3, #0
 800f712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f714:	e16b      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f716:	4b89      	ldr	r3, [pc, #548]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f71e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f722:	d107      	bne.n	800f734 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f724:	f107 030c 	add.w	r3, r7, #12
 800f728:	4618      	mov	r0, r3
 800f72a:	f000 fad3 	bl	800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f732:	e15c      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f734:	2300      	movs	r3, #0
 800f736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f738:	e159      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f73a:	4b80      	ldr	r3, [pc, #512]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f73e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f742:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f744:	4b7d      	ldr	r3, [pc, #500]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f003 0304 	and.w	r3, r3, #4
 800f74c:	2b04      	cmp	r3, #4
 800f74e:	d10c      	bne.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f752:	2b00      	cmp	r3, #0
 800f754:	d109      	bne.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f756:	4b79      	ldr	r3, [pc, #484]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	08db      	lsrs	r3, r3, #3
 800f75c:	f003 0303 	and.w	r3, r3, #3
 800f760:	4a77      	ldr	r2, [pc, #476]	; (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f762:	fa22 f303 	lsr.w	r3, r2, r3
 800f766:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f768:	e01e      	b.n	800f7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f76a:	4b74      	ldr	r3, [pc, #464]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f776:	d106      	bne.n	800f786 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f77a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f77e:	d102      	bne.n	800f786 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f780:	4b70      	ldr	r3, [pc, #448]	; (800f944 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f782:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f784:	e010      	b.n	800f7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f786:	4b6d      	ldr	r3, [pc, #436]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f78e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f792:	d106      	bne.n	800f7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f79a:	d102      	bne.n	800f7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f79c:	4b6a      	ldr	r3, [pc, #424]	; (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f79e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7a0:	e002      	b.n	800f7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f7a6:	e122      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f7a8:	e121      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7ae:	e11e      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f7b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7b4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f7b8:	430b      	orrs	r3, r1
 800f7ba:	d133      	bne.n	800f824 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f7bc:	4b5f      	ldr	r3, [pc, #380]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f7c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d004      	beq.n	800f7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7d2:	d012      	beq.n	800f7fa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f7d4:	e023      	b.n	800f81e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f7d6:	4b59      	ldr	r3, [pc, #356]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f7e2:	d107      	bne.n	800f7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f7e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f000 fbc7 	bl	800ff7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7f2:	e0fc      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7f8:	e0f9      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f7fa:	4b50      	ldr	r3, [pc, #320]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f806:	d107      	bne.n	800f818 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f808:	f107 0318 	add.w	r3, r7, #24
 800f80c:	4618      	mov	r0, r3
 800f80e:	f000 f90d 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f812:	6a3b      	ldr	r3, [r7, #32]
 800f814:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f816:	e0ea      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f818:	2300      	movs	r3, #0
 800f81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f81c:	e0e7      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f81e:	2300      	movs	r3, #0
 800f820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f822:	e0e4      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f824:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f828:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f82c:	430b      	orrs	r3, r1
 800f82e:	f040 808d 	bne.w	800f94c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f832:	4b42      	ldr	r3, [pc, #264]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f836:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f83a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f842:	d06b      	beq.n	800f91c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f84a:	d874      	bhi.n	800f936 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f852:	d056      	beq.n	800f902 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f85a:	d86c      	bhi.n	800f936 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f862:	d03b      	beq.n	800f8dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f866:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f86a:	d864      	bhi.n	800f936 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f872:	d021      	beq.n	800f8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f87a:	d85c      	bhi.n	800f936 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d004      	beq.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f888:	d004      	beq.n	800f894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f88a:	e054      	b.n	800f936 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f88c:	f000 f8b8 	bl	800fa00 <HAL_RCCEx_GetD3PCLK1Freq>
 800f890:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f892:	e0ac      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f894:	4b29      	ldr	r3, [pc, #164]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f89c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f8a0:	d107      	bne.n	800f8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8a2:	f107 0318 	add.w	r3, r7, #24
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f000 f8c0 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8b0:	e09d      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8b6:	e09a      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f8b8:	4b20      	ldr	r3, [pc, #128]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f8c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8c4:	d107      	bne.n	800f8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8c6:	f107 030c 	add.w	r3, r7, #12
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f000 fa02 	bl	800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8d4:	e08b      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8da:	e088      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f8dc:	4b17      	ldr	r3, [pc, #92]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f003 0304 	and.w	r3, r3, #4
 800f8e4:	2b04      	cmp	r3, #4
 800f8e6:	d109      	bne.n	800f8fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f8e8:	4b14      	ldr	r3, [pc, #80]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	08db      	lsrs	r3, r3, #3
 800f8ee:	f003 0303 	and.w	r3, r3, #3
 800f8f2:	4a13      	ldr	r2, [pc, #76]	; (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f8f4:	fa22 f303 	lsr.w	r3, r2, r3
 800f8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8fa:	e078      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f900:	e075      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f902:	4b0e      	ldr	r3, [pc, #56]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f90a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f90e:	d102      	bne.n	800f916 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f910:	4b0c      	ldr	r3, [pc, #48]	; (800f944 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f914:	e06b      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f916:	2300      	movs	r3, #0
 800f918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f91a:	e068      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f91c:	4b07      	ldr	r3, [pc, #28]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f928:	d102      	bne.n	800f930 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f92a:	4b07      	ldr	r3, [pc, #28]	; (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f92c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f92e:	e05e      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f930:	2300      	movs	r3, #0
 800f932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f934:	e05b      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f936:	2300      	movs	r3, #0
 800f938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f93a:	e058      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f93c:	58024400 	.word	0x58024400
 800f940:	03d09000 	.word	0x03d09000
 800f944:	003d0900 	.word	0x003d0900
 800f948:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f94c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f950:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f954:	430b      	orrs	r3, r1
 800f956:	d148      	bne.n	800f9ea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f958:	4b27      	ldr	r3, [pc, #156]	; (800f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f95a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f95c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f960:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f968:	d02a      	beq.n	800f9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f970:	d838      	bhi.n	800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f974:	2b00      	cmp	r3, #0
 800f976:	d004      	beq.n	800f982 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f97e:	d00d      	beq.n	800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f980:	e030      	b.n	800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f982:	4b1d      	ldr	r3, [pc, #116]	; (800f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f98a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f98e:	d102      	bne.n	800f996 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f990:	4b1a      	ldr	r3, [pc, #104]	; (800f9fc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f994:	e02b      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f996:	2300      	movs	r3, #0
 800f998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f99a:	e028      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f99c:	4b16      	ldr	r3, [pc, #88]	; (800f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f9a8:	d107      	bne.n	800f9ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f9aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f000 fae4 	bl	800ff7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9b8:	e019      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9be:	e016      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f9c0:	4b0d      	ldr	r3, [pc, #52]	; (800f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f9c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f9cc:	d107      	bne.n	800f9de <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9ce:	f107 0318 	add.w	r3, r7, #24
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f000 f82a 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9dc:	e007      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9e2:	e004      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9e8:	e001      	b.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800f9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3740      	adds	r7, #64	; 0x40
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}
 800f9f8:	58024400 	.word	0x58024400
 800f9fc:	017d7840 	.word	0x017d7840

0800fa00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fa04:	f7fe f816 	bl	800da34 <HAL_RCC_GetHCLKFreq>
 800fa08:	4602      	mov	r2, r0
 800fa0a:	4b06      	ldr	r3, [pc, #24]	; (800fa24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fa0c:	6a1b      	ldr	r3, [r3, #32]
 800fa0e:	091b      	lsrs	r3, r3, #4
 800fa10:	f003 0307 	and.w	r3, r3, #7
 800fa14:	4904      	ldr	r1, [pc, #16]	; (800fa28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fa16:	5ccb      	ldrb	r3, [r1, r3]
 800fa18:	f003 031f 	and.w	r3, r3, #31
 800fa1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	58024400 	.word	0x58024400
 800fa28:	08017668 	.word	0x08017668

0800fa2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b089      	sub	sp, #36	; 0x24
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fa34:	4ba1      	ldr	r3, [pc, #644]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa38:	f003 0303 	and.w	r3, r3, #3
 800fa3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fa3e:	4b9f      	ldr	r3, [pc, #636]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa42:	0b1b      	lsrs	r3, r3, #12
 800fa44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fa4a:	4b9c      	ldr	r3, [pc, #624]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa4e:	091b      	lsrs	r3, r3, #4
 800fa50:	f003 0301 	and.w	r3, r3, #1
 800fa54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fa56:	4b99      	ldr	r3, [pc, #612]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa5a:	08db      	lsrs	r3, r3, #3
 800fa5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa60:	693a      	ldr	r2, [r7, #16]
 800fa62:	fb02 f303 	mul.w	r3, r2, r3
 800fa66:	ee07 3a90 	vmov	s15, r3
 800fa6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	f000 8111 	beq.w	800fc9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fa7a:	69bb      	ldr	r3, [r7, #24]
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	f000 8083 	beq.w	800fb88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fa82:	69bb      	ldr	r3, [r7, #24]
 800fa84:	2b02      	cmp	r3, #2
 800fa86:	f200 80a1 	bhi.w	800fbcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d003      	beq.n	800fa98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fa90:	69bb      	ldr	r3, [r7, #24]
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d056      	beq.n	800fb44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fa96:	e099      	b.n	800fbcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa98:	4b88      	ldr	r3, [pc, #544]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f003 0320 	and.w	r3, r3, #32
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d02d      	beq.n	800fb00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800faa4:	4b85      	ldr	r3, [pc, #532]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	08db      	lsrs	r3, r3, #3
 800faaa:	f003 0303 	and.w	r3, r3, #3
 800faae:	4a84      	ldr	r2, [pc, #528]	; (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fab0:	fa22 f303 	lsr.w	r3, r2, r3
 800fab4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	ee07 3a90 	vmov	s15, r3
 800fabc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	ee07 3a90 	vmov	s15, r3
 800fac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800face:	4b7b      	ldr	r3, [pc, #492]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fad6:	ee07 3a90 	vmov	s15, r3
 800fada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fade:	ed97 6a03 	vldr	s12, [r7, #12]
 800fae2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800faea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800faee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800faf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fafa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fafe:	e087      	b.n	800fc10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	ee07 3a90 	vmov	s15, r3
 800fb06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fcc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fb0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb12:	4b6a      	ldr	r3, [pc, #424]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb1a:	ee07 3a90 	vmov	s15, r3
 800fb1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb22:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb26:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb42:	e065      	b.n	800fc10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	ee07 3a90 	vmov	s15, r3
 800fb4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fb52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb56:	4b59      	ldr	r3, [pc, #356]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb5e:	ee07 3a90 	vmov	s15, r3
 800fb62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb66:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb86:	e043      	b.n	800fc10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	ee07 3a90 	vmov	s15, r3
 800fb8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800fb96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb9a:	4b48      	ldr	r3, [pc, #288]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fba2:	ee07 3a90 	vmov	s15, r3
 800fba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fbb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fbca:	e021      	b.n	800fc10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	ee07 3a90 	vmov	s15, r3
 800fbd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fbda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbde:	4b37      	ldr	r3, [pc, #220]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbe6:	ee07 3a90 	vmov	s15, r3
 800fbea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbee:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fbf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800fc10:	4b2a      	ldr	r3, [pc, #168]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc14:	0a5b      	lsrs	r3, r3, #9
 800fc16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc1a:	ee07 3a90 	vmov	s15, r3
 800fc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc36:	ee17 2a90 	vmov	r2, s15
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800fc3e:	4b1f      	ldr	r3, [pc, #124]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc42:	0c1b      	lsrs	r3, r3, #16
 800fc44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc48:	ee07 3a90 	vmov	s15, r3
 800fc4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc58:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc64:	ee17 2a90 	vmov	r2, s15
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800fc6c:	4b13      	ldr	r3, [pc, #76]	; (800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc70:	0e1b      	lsrs	r3, r3, #24
 800fc72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc76:	ee07 3a90 	vmov	s15, r3
 800fc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc86:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc92:	ee17 2a90 	vmov	r2, s15
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800fc9a:	e008      	b.n	800fcae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2200      	movs	r2, #0
 800fca6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	609a      	str	r2, [r3, #8]
}
 800fcae:	bf00      	nop
 800fcb0:	3724      	adds	r7, #36	; 0x24
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb8:	4770      	bx	lr
 800fcba:	bf00      	nop
 800fcbc:	58024400 	.word	0x58024400
 800fcc0:	03d09000 	.word	0x03d09000
 800fcc4:	46000000 	.word	0x46000000
 800fcc8:	4c742400 	.word	0x4c742400
 800fccc:	4a742400 	.word	0x4a742400
 800fcd0:	4bbebc20 	.word	0x4bbebc20

0800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b089      	sub	sp, #36	; 0x24
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fcdc:	4ba1      	ldr	r3, [pc, #644]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fce0:	f003 0303 	and.w	r3, r3, #3
 800fce4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800fce6:	4b9f      	ldr	r3, [pc, #636]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcea:	0d1b      	lsrs	r3, r3, #20
 800fcec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fcf2:	4b9c      	ldr	r3, [pc, #624]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcf6:	0a1b      	lsrs	r3, r3, #8
 800fcf8:	f003 0301 	and.w	r3, r3, #1
 800fcfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800fcfe:	4b99      	ldr	r3, [pc, #612]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd02:	08db      	lsrs	r3, r3, #3
 800fd04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd08:	693a      	ldr	r2, [r7, #16]
 800fd0a:	fb02 f303 	mul.w	r3, r2, r3
 800fd0e:	ee07 3a90 	vmov	s15, r3
 800fd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	f000 8111 	beq.w	800ff44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800fd22:	69bb      	ldr	r3, [r7, #24]
 800fd24:	2b02      	cmp	r3, #2
 800fd26:	f000 8083 	beq.w	800fe30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800fd2a:	69bb      	ldr	r3, [r7, #24]
 800fd2c:	2b02      	cmp	r3, #2
 800fd2e:	f200 80a1 	bhi.w	800fe74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fd32:	69bb      	ldr	r3, [r7, #24]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d003      	beq.n	800fd40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fd38:	69bb      	ldr	r3, [r7, #24]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d056      	beq.n	800fdec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800fd3e:	e099      	b.n	800fe74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd40:	4b88      	ldr	r3, [pc, #544]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f003 0320 	and.w	r3, r3, #32
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d02d      	beq.n	800fda8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd4c:	4b85      	ldr	r3, [pc, #532]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	08db      	lsrs	r3, r3, #3
 800fd52:	f003 0303 	and.w	r3, r3, #3
 800fd56:	4a84      	ldr	r2, [pc, #528]	; (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800fd58:	fa22 f303 	lsr.w	r3, r2, r3
 800fd5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	ee07 3a90 	vmov	s15, r3
 800fd64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	ee07 3a90 	vmov	s15, r3
 800fd6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd76:	4b7b      	ldr	r3, [pc, #492]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd7e:	ee07 3a90 	vmov	s15, r3
 800fd82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd86:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ff6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fd8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fd9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fda2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fda6:	e087      	b.n	800feb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	ee07 3a90 	vmov	s15, r3
 800fdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ff70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fdb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdba:	4b6a      	ldr	r3, [pc, #424]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdc2:	ee07 3a90 	vmov	s15, r3
 800fdc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdca:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ff6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fdd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fdde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fde6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fdea:	e065      	b.n	800feb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	ee07 3a90 	vmov	s15, r3
 800fdf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ff74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fdfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdfe:	4b59      	ldr	r3, [pc, #356]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe06:	ee07 3a90 	vmov	s15, r3
 800fe0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ff6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe2e:	e043      	b.n	800feb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	ee07 3a90 	vmov	s15, r3
 800fe36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ff78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fe3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe42:	4b48      	ldr	r3, [pc, #288]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe4a:	ee07 3a90 	vmov	s15, r3
 800fe4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe52:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ff6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe72:	e021      	b.n	800feb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	ee07 3a90 	vmov	s15, r3
 800fe7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ff74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fe82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe86:	4b37      	ldr	r3, [pc, #220]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe8e:	ee07 3a90 	vmov	s15, r3
 800fe92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe96:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ff6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800feb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800feb8:	4b2a      	ldr	r3, [pc, #168]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800feba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800febc:	0a5b      	lsrs	r3, r3, #9
 800febe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fec2:	ee07 3a90 	vmov	s15, r3
 800fec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fece:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fed2:	edd7 6a07 	vldr	s13, [r7, #28]
 800fed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800feda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fede:	ee17 2a90 	vmov	r2, s15
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fee6:	4b1f      	ldr	r3, [pc, #124]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feea:	0c1b      	lsrs	r3, r3, #16
 800feec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fef0:	ee07 3a90 	vmov	s15, r3
 800fef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fefc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff00:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff0c:	ee17 2a90 	vmov	r2, s15
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ff14:	4b13      	ldr	r3, [pc, #76]	; (800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff18:	0e1b      	lsrs	r3, r3, #24
 800ff1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff1e:	ee07 3a90 	vmov	s15, r3
 800ff22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff3a:	ee17 2a90 	vmov	r2, s15
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ff42:	e008      	b.n	800ff56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2200      	movs	r2, #0
 800ff48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	609a      	str	r2, [r3, #8]
}
 800ff56:	bf00      	nop
 800ff58:	3724      	adds	r7, #36	; 0x24
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr
 800ff62:	bf00      	nop
 800ff64:	58024400 	.word	0x58024400
 800ff68:	03d09000 	.word	0x03d09000
 800ff6c:	46000000 	.word	0x46000000
 800ff70:	4c742400 	.word	0x4c742400
 800ff74:	4a742400 	.word	0x4a742400
 800ff78:	4bbebc20 	.word	0x4bbebc20

0800ff7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b089      	sub	sp, #36	; 0x24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ff84:	4ba0      	ldr	r3, [pc, #640]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff88:	f003 0303 	and.w	r3, r3, #3
 800ff8c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ff8e:	4b9e      	ldr	r3, [pc, #632]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff92:	091b      	lsrs	r3, r3, #4
 800ff94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff98:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ff9a:	4b9b      	ldr	r3, [pc, #620]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff9e:	f003 0301 	and.w	r3, r3, #1
 800ffa2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ffa4:	4b98      	ldr	r3, [pc, #608]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffa8:	08db      	lsrs	r3, r3, #3
 800ffaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ffae:	693a      	ldr	r2, [r7, #16]
 800ffb0:	fb02 f303 	mul.w	r3, r2, r3
 800ffb4:	ee07 3a90 	vmov	s15, r3
 800ffb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffbc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f000 8111 	beq.w	80101ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ffc8:	69bb      	ldr	r3, [r7, #24]
 800ffca:	2b02      	cmp	r3, #2
 800ffcc:	f000 8083 	beq.w	80100d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ffd0:	69bb      	ldr	r3, [r7, #24]
 800ffd2:	2b02      	cmp	r3, #2
 800ffd4:	f200 80a1 	bhi.w	801011a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d003      	beq.n	800ffe6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d056      	beq.n	8010092 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ffe4:	e099      	b.n	801011a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ffe6:	4b88      	ldr	r3, [pc, #544]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f003 0320 	and.w	r3, r3, #32
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d02d      	beq.n	801004e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fff2:	4b85      	ldr	r3, [pc, #532]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	08db      	lsrs	r3, r3, #3
 800fff8:	f003 0303 	and.w	r3, r3, #3
 800fffc:	4a83      	ldr	r2, [pc, #524]	; (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fffe:	fa22 f303 	lsr.w	r3, r2, r3
 8010002:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	ee07 3a90 	vmov	s15, r3
 801000a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	ee07 3a90 	vmov	s15, r3
 8010014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801001c:	4b7a      	ldr	r3, [pc, #488]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801001e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010024:	ee07 3a90 	vmov	s15, r3
 8010028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801002c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010030:	eddf 5a77 	vldr	s11, [pc, #476]	; 8010210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801003c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010048:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801004c:	e087      	b.n	801015e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	ee07 3a90 	vmov	s15, r3
 8010054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010058:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8010214 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801005c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010060:	4b69      	ldr	r3, [pc, #420]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010068:	ee07 3a90 	vmov	s15, r3
 801006c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010070:	ed97 6a03 	vldr	s12, [r7, #12]
 8010074:	eddf 5a66 	vldr	s11, [pc, #408]	; 8010210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801007c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010088:	ee67 7a27 	vmul.f32	s15, s14, s15
 801008c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010090:	e065      	b.n	801015e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	ee07 3a90 	vmov	s15, r3
 8010098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801009c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010218 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80100a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100a4:	4b58      	ldr	r3, [pc, #352]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100ac:	ee07 3a90 	vmov	s15, r3
 80100b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80100b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8010210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80100bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80100d4:	e043      	b.n	801015e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	ee07 3a90 	vmov	s15, r3
 80100dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801021c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80100e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100e8:	4b47      	ldr	r3, [pc, #284]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100f0:	ee07 3a90 	vmov	s15, r3
 80100f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80100fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801010c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010114:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010118:	e021      	b.n	801015e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	ee07 3a90 	vmov	s15, r3
 8010120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010124:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010214 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801012c:	4b36      	ldr	r3, [pc, #216]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801012e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010134:	ee07 3a90 	vmov	s15, r3
 8010138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801013c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010140:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801014c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010158:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801015c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801015e:	4b2a      	ldr	r3, [pc, #168]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010162:	0a5b      	lsrs	r3, r3, #9
 8010164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010168:	ee07 3a90 	vmov	s15, r3
 801016c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010174:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010178:	edd7 6a07 	vldr	s13, [r7, #28]
 801017c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010184:	ee17 2a90 	vmov	r2, s15
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801018c:	4b1e      	ldr	r3, [pc, #120]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801018e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010190:	0c1b      	lsrs	r3, r3, #16
 8010192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010196:	ee07 3a90 	vmov	s15, r3
 801019a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801019e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80101a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80101aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101b2:	ee17 2a90 	vmov	r2, s15
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80101ba:	4b13      	ldr	r3, [pc, #76]	; (8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101be:	0e1b      	lsrs	r3, r3, #24
 80101c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101c4:	ee07 3a90 	vmov	s15, r3
 80101c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80101d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80101d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101e0:	ee17 2a90 	vmov	r2, s15
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80101e8:	e008      	b.n	80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2200      	movs	r2, #0
 80101ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2200      	movs	r2, #0
 80101f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2200      	movs	r2, #0
 80101fa:	609a      	str	r2, [r3, #8]
}
 80101fc:	bf00      	nop
 80101fe:	3724      	adds	r7, #36	; 0x24
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr
 8010208:	58024400 	.word	0x58024400
 801020c:	03d09000 	.word	0x03d09000
 8010210:	46000000 	.word	0x46000000
 8010214:	4c742400 	.word	0x4c742400
 8010218:	4a742400 	.word	0x4a742400
 801021c:	4bbebc20 	.word	0x4bbebc20

08010220 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b084      	sub	sp, #16
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801022a:	2300      	movs	r3, #0
 801022c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801022e:	4b53      	ldr	r3, [pc, #332]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010232:	f003 0303 	and.w	r3, r3, #3
 8010236:	2b03      	cmp	r3, #3
 8010238:	d101      	bne.n	801023e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801023a:	2301      	movs	r3, #1
 801023c:	e099      	b.n	8010372 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801023e:	4b4f      	ldr	r3, [pc, #316]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	4a4e      	ldr	r2, [pc, #312]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010244:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801024a:	f7f7 f86f 	bl	800732c <HAL_GetTick>
 801024e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010250:	e008      	b.n	8010264 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010252:	f7f7 f86b 	bl	800732c <HAL_GetTick>
 8010256:	4602      	mov	r2, r0
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	2b02      	cmp	r3, #2
 801025e:	d901      	bls.n	8010264 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010260:	2303      	movs	r3, #3
 8010262:	e086      	b.n	8010372 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010264:	4b45      	ldr	r3, [pc, #276]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801026c:	2b00      	cmp	r3, #0
 801026e:	d1f0      	bne.n	8010252 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010270:	4b42      	ldr	r3, [pc, #264]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010274:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	031b      	lsls	r3, r3, #12
 801027e:	493f      	ldr	r1, [pc, #252]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010280:	4313      	orrs	r3, r2
 8010282:	628b      	str	r3, [r1, #40]	; 0x28
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	3b01      	subs	r3, #1
 801028a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	689b      	ldr	r3, [r3, #8]
 8010292:	3b01      	subs	r3, #1
 8010294:	025b      	lsls	r3, r3, #9
 8010296:	b29b      	uxth	r3, r3
 8010298:	431a      	orrs	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	3b01      	subs	r3, #1
 80102a0:	041b      	lsls	r3, r3, #16
 80102a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80102a6:	431a      	orrs	r2, r3
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	3b01      	subs	r3, #1
 80102ae:	061b      	lsls	r3, r3, #24
 80102b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80102b4:	4931      	ldr	r1, [pc, #196]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 80102b6:	4313      	orrs	r3, r2
 80102b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80102ba:	4b30      	ldr	r3, [pc, #192]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 80102bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	695b      	ldr	r3, [r3, #20]
 80102c6:	492d      	ldr	r1, [pc, #180]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 80102c8:	4313      	orrs	r3, r2
 80102ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80102cc:	4b2b      	ldr	r3, [pc, #172]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 80102ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d0:	f023 0220 	bic.w	r2, r3, #32
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	699b      	ldr	r3, [r3, #24]
 80102d8:	4928      	ldr	r1, [pc, #160]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 80102da:	4313      	orrs	r3, r2
 80102dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80102de:	4b27      	ldr	r3, [pc, #156]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 80102e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102e2:	4a26      	ldr	r2, [pc, #152]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 80102e4:	f023 0310 	bic.w	r3, r3, #16
 80102e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80102ea:	4b24      	ldr	r3, [pc, #144]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 80102ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80102ee:	4b24      	ldr	r3, [pc, #144]	; (8010380 <RCCEx_PLL2_Config+0x160>)
 80102f0:	4013      	ands	r3, r2
 80102f2:	687a      	ldr	r2, [r7, #4]
 80102f4:	69d2      	ldr	r2, [r2, #28]
 80102f6:	00d2      	lsls	r2, r2, #3
 80102f8:	4920      	ldr	r1, [pc, #128]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 80102fa:	4313      	orrs	r3, r2
 80102fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80102fe:	4b1f      	ldr	r3, [pc, #124]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010302:	4a1e      	ldr	r2, [pc, #120]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010304:	f043 0310 	orr.w	r3, r3, #16
 8010308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d106      	bne.n	801031e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010310:	4b1a      	ldr	r3, [pc, #104]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010314:	4a19      	ldr	r2, [pc, #100]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801031a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801031c:	e00f      	b.n	801033e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	2b01      	cmp	r3, #1
 8010322:	d106      	bne.n	8010332 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010324:	4b15      	ldr	r3, [pc, #84]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010328:	4a14      	ldr	r2, [pc, #80]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 801032a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801032e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010330:	e005      	b.n	801033e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010332:	4b12      	ldr	r3, [pc, #72]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010336:	4a11      	ldr	r2, [pc, #68]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801033c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801033e:	4b0f      	ldr	r3, [pc, #60]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	4a0e      	ldr	r2, [pc, #56]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010344:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801034a:	f7f6 ffef 	bl	800732c <HAL_GetTick>
 801034e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010350:	e008      	b.n	8010364 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010352:	f7f6 ffeb 	bl	800732c <HAL_GetTick>
 8010356:	4602      	mov	r2, r0
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	2b02      	cmp	r3, #2
 801035e:	d901      	bls.n	8010364 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010360:	2303      	movs	r3, #3
 8010362:	e006      	b.n	8010372 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010364:	4b05      	ldr	r3, [pc, #20]	; (801037c <RCCEx_PLL2_Config+0x15c>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801036c:	2b00      	cmp	r3, #0
 801036e:	d0f0      	beq.n	8010352 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010370:	7bfb      	ldrb	r3, [r7, #15]
}
 8010372:	4618      	mov	r0, r3
 8010374:	3710      	adds	r7, #16
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	58024400 	.word	0x58024400
 8010380:	ffff0007 	.word	0xffff0007

08010384 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801038e:	2300      	movs	r3, #0
 8010390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010392:	4b53      	ldr	r3, [pc, #332]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 8010394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010396:	f003 0303 	and.w	r3, r3, #3
 801039a:	2b03      	cmp	r3, #3
 801039c:	d101      	bne.n	80103a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801039e:	2301      	movs	r3, #1
 80103a0:	e099      	b.n	80104d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80103a2:	4b4f      	ldr	r3, [pc, #316]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	4a4e      	ldr	r2, [pc, #312]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 80103a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80103ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80103ae:	f7f6 ffbd 	bl	800732c <HAL_GetTick>
 80103b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80103b4:	e008      	b.n	80103c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80103b6:	f7f6 ffb9 	bl	800732c <HAL_GetTick>
 80103ba:	4602      	mov	r2, r0
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	1ad3      	subs	r3, r2, r3
 80103c0:	2b02      	cmp	r3, #2
 80103c2:	d901      	bls.n	80103c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80103c4:	2303      	movs	r3, #3
 80103c6:	e086      	b.n	80104d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80103c8:	4b45      	ldr	r3, [pc, #276]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1f0      	bne.n	80103b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80103d4:	4b42      	ldr	r3, [pc, #264]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 80103d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	051b      	lsls	r3, r3, #20
 80103e2:	493f      	ldr	r1, [pc, #252]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 80103e4:	4313      	orrs	r3, r2
 80103e6:	628b      	str	r3, [r1, #40]	; 0x28
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	685b      	ldr	r3, [r3, #4]
 80103ec:	3b01      	subs	r3, #1
 80103ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	689b      	ldr	r3, [r3, #8]
 80103f6:	3b01      	subs	r3, #1
 80103f8:	025b      	lsls	r3, r3, #9
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	431a      	orrs	r2, r3
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	3b01      	subs	r3, #1
 8010404:	041b      	lsls	r3, r3, #16
 8010406:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801040a:	431a      	orrs	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	691b      	ldr	r3, [r3, #16]
 8010410:	3b01      	subs	r3, #1
 8010412:	061b      	lsls	r3, r3, #24
 8010414:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010418:	4931      	ldr	r1, [pc, #196]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 801041a:	4313      	orrs	r3, r2
 801041c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801041e:	4b30      	ldr	r3, [pc, #192]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 8010420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010422:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	695b      	ldr	r3, [r3, #20]
 801042a:	492d      	ldr	r1, [pc, #180]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 801042c:	4313      	orrs	r3, r2
 801042e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010430:	4b2b      	ldr	r3, [pc, #172]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 8010432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010434:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	699b      	ldr	r3, [r3, #24]
 801043c:	4928      	ldr	r1, [pc, #160]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 801043e:	4313      	orrs	r3, r2
 8010440:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010442:	4b27      	ldr	r3, [pc, #156]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 8010444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010446:	4a26      	ldr	r2, [pc, #152]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 8010448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801044c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801044e:	4b24      	ldr	r3, [pc, #144]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 8010450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010452:	4b24      	ldr	r3, [pc, #144]	; (80104e4 <RCCEx_PLL3_Config+0x160>)
 8010454:	4013      	ands	r3, r2
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	69d2      	ldr	r2, [r2, #28]
 801045a:	00d2      	lsls	r2, r2, #3
 801045c:	4920      	ldr	r1, [pc, #128]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 801045e:	4313      	orrs	r3, r2
 8010460:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010462:	4b1f      	ldr	r3, [pc, #124]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 8010464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010466:	4a1e      	ldr	r2, [pc, #120]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 8010468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801046c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d106      	bne.n	8010482 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010474:	4b1a      	ldr	r3, [pc, #104]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 8010476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010478:	4a19      	ldr	r2, [pc, #100]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 801047a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801047e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010480:	e00f      	b.n	80104a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	2b01      	cmp	r3, #1
 8010486:	d106      	bne.n	8010496 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010488:	4b15      	ldr	r3, [pc, #84]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 801048a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801048c:	4a14      	ldr	r2, [pc, #80]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 801048e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010492:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010494:	e005      	b.n	80104a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010496:	4b12      	ldr	r3, [pc, #72]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 8010498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801049a:	4a11      	ldr	r2, [pc, #68]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 801049c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80104a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80104a2:	4b0f      	ldr	r3, [pc, #60]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4a0e      	ldr	r2, [pc, #56]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 80104a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80104ae:	f7f6 ff3d 	bl	800732c <HAL_GetTick>
 80104b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80104b4:	e008      	b.n	80104c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80104b6:	f7f6 ff39 	bl	800732c <HAL_GetTick>
 80104ba:	4602      	mov	r2, r0
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	1ad3      	subs	r3, r2, r3
 80104c0:	2b02      	cmp	r3, #2
 80104c2:	d901      	bls.n	80104c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80104c4:	2303      	movs	r3, #3
 80104c6:	e006      	b.n	80104d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80104c8:	4b05      	ldr	r3, [pc, #20]	; (80104e0 <RCCEx_PLL3_Config+0x15c>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d0f0      	beq.n	80104b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80104d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3710      	adds	r7, #16
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	58024400 	.word	0x58024400
 80104e4:	ffff0007 	.word	0xffff0007

080104e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d101      	bne.n	80104fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80104f6:	2301      	movs	r3, #1
 80104f8:	e049      	b.n	801058e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010500:	b2db      	uxtb	r3, r3
 8010502:	2b00      	cmp	r3, #0
 8010504:	d106      	bne.n	8010514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f7f6 faa8 	bl	8006a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2202      	movs	r2, #2
 8010518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	3304      	adds	r3, #4
 8010524:	4619      	mov	r1, r3
 8010526:	4610      	mov	r0, r2
 8010528:	f001 f940 	bl	80117ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2201      	movs	r2, #1
 8010530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2201      	movs	r2, #1
 8010538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2201      	movs	r2, #1
 8010540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2201      	movs	r2, #1
 8010548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2201      	movs	r2, #1
 8010550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2201      	movs	r2, #1
 8010558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2201      	movs	r2, #1
 8010560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2201      	movs	r2, #1
 8010568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2201      	movs	r2, #1
 8010570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2201      	movs	r2, #1
 8010578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2201      	movs	r2, #1
 8010580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2201      	movs	r2, #1
 8010588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801058c:	2300      	movs	r3, #0
}
 801058e:	4618      	mov	r0, r3
 8010590:	3708      	adds	r7, #8
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
	...

08010598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010598:	b480      	push	{r7}
 801059a:	b085      	sub	sp, #20
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	d001      	beq.n	80105b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80105ac:	2301      	movs	r3, #1
 80105ae:	e054      	b.n	801065a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2202      	movs	r2, #2
 80105b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	68da      	ldr	r2, [r3, #12]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f042 0201 	orr.w	r2, r2, #1
 80105c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4a26      	ldr	r2, [pc, #152]	; (8010668 <HAL_TIM_Base_Start_IT+0xd0>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d022      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x80>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105da:	d01d      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x80>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a22      	ldr	r2, [pc, #136]	; (801066c <HAL_TIM_Base_Start_IT+0xd4>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d018      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x80>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4a21      	ldr	r2, [pc, #132]	; (8010670 <HAL_TIM_Base_Start_IT+0xd8>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d013      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x80>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4a1f      	ldr	r2, [pc, #124]	; (8010674 <HAL_TIM_Base_Start_IT+0xdc>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d00e      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x80>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4a1e      	ldr	r2, [pc, #120]	; (8010678 <HAL_TIM_Base_Start_IT+0xe0>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d009      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x80>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4a1c      	ldr	r2, [pc, #112]	; (801067c <HAL_TIM_Base_Start_IT+0xe4>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d004      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x80>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	4a1b      	ldr	r2, [pc, #108]	; (8010680 <HAL_TIM_Base_Start_IT+0xe8>)
 8010614:	4293      	cmp	r3, r2
 8010616:	d115      	bne.n	8010644 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	689a      	ldr	r2, [r3, #8]
 801061e:	4b19      	ldr	r3, [pc, #100]	; (8010684 <HAL_TIM_Base_Start_IT+0xec>)
 8010620:	4013      	ands	r3, r2
 8010622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2b06      	cmp	r3, #6
 8010628:	d015      	beq.n	8010656 <HAL_TIM_Base_Start_IT+0xbe>
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010630:	d011      	beq.n	8010656 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f042 0201 	orr.w	r2, r2, #1
 8010640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010642:	e008      	b.n	8010656 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f042 0201 	orr.w	r2, r2, #1
 8010652:	601a      	str	r2, [r3, #0]
 8010654:	e000      	b.n	8010658 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010656:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010658:	2300      	movs	r3, #0
}
 801065a:	4618      	mov	r0, r3
 801065c:	3714      	adds	r7, #20
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr
 8010666:	bf00      	nop
 8010668:	40010000 	.word	0x40010000
 801066c:	40000400 	.word	0x40000400
 8010670:	40000800 	.word	0x40000800
 8010674:	40000c00 	.word	0x40000c00
 8010678:	40010400 	.word	0x40010400
 801067c:	40001800 	.word	0x40001800
 8010680:	40014000 	.word	0x40014000
 8010684:	00010007 	.word	0x00010007

08010688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d101      	bne.n	801069a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010696:	2301      	movs	r3, #1
 8010698:	e049      	b.n	801072e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80106a0:	b2db      	uxtb	r3, r3
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d106      	bne.n	80106b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 f841 	bl	8010736 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2202      	movs	r2, #2
 80106b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681a      	ldr	r2, [r3, #0]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	3304      	adds	r3, #4
 80106c4:	4619      	mov	r1, r3
 80106c6:	4610      	mov	r0, r2
 80106c8:	f001 f870 	bl	80117ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2201      	movs	r2, #1
 80106d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2201      	movs	r2, #1
 80106d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2201      	movs	r2, #1
 80106e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2201      	movs	r2, #1
 80106e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2201      	movs	r2, #1
 80106f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2201      	movs	r2, #1
 80106f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2201      	movs	r2, #1
 8010700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2201      	movs	r2, #1
 8010708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2201      	movs	r2, #1
 8010710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2201      	movs	r2, #1
 8010718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2201      	movs	r2, #1
 8010720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2201      	movs	r2, #1
 8010728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801072c:	2300      	movs	r3, #0
}
 801072e:	4618      	mov	r0, r3
 8010730:	3708      	adds	r7, #8
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}

08010736 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010736:	b480      	push	{r7}
 8010738:	b083      	sub	sp, #12
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801073e:	bf00      	nop
 8010740:	370c      	adds	r7, #12
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr
	...

0801074c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d109      	bne.n	8010770 <HAL_TIM_PWM_Start+0x24>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010762:	b2db      	uxtb	r3, r3
 8010764:	2b01      	cmp	r3, #1
 8010766:	bf14      	ite	ne
 8010768:	2301      	movne	r3, #1
 801076a:	2300      	moveq	r3, #0
 801076c:	b2db      	uxtb	r3, r3
 801076e:	e03c      	b.n	80107ea <HAL_TIM_PWM_Start+0x9e>
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	2b04      	cmp	r3, #4
 8010774:	d109      	bne.n	801078a <HAL_TIM_PWM_Start+0x3e>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801077c:	b2db      	uxtb	r3, r3
 801077e:	2b01      	cmp	r3, #1
 8010780:	bf14      	ite	ne
 8010782:	2301      	movne	r3, #1
 8010784:	2300      	moveq	r3, #0
 8010786:	b2db      	uxtb	r3, r3
 8010788:	e02f      	b.n	80107ea <HAL_TIM_PWM_Start+0x9e>
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	2b08      	cmp	r3, #8
 801078e:	d109      	bne.n	80107a4 <HAL_TIM_PWM_Start+0x58>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010796:	b2db      	uxtb	r3, r3
 8010798:	2b01      	cmp	r3, #1
 801079a:	bf14      	ite	ne
 801079c:	2301      	movne	r3, #1
 801079e:	2300      	moveq	r3, #0
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	e022      	b.n	80107ea <HAL_TIM_PWM_Start+0x9e>
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	2b0c      	cmp	r3, #12
 80107a8:	d109      	bne.n	80107be <HAL_TIM_PWM_Start+0x72>
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	bf14      	ite	ne
 80107b6:	2301      	movne	r3, #1
 80107b8:	2300      	moveq	r3, #0
 80107ba:	b2db      	uxtb	r3, r3
 80107bc:	e015      	b.n	80107ea <HAL_TIM_PWM_Start+0x9e>
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	2b10      	cmp	r3, #16
 80107c2:	d109      	bne.n	80107d8 <HAL_TIM_PWM_Start+0x8c>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	bf14      	ite	ne
 80107d0:	2301      	movne	r3, #1
 80107d2:	2300      	moveq	r3, #0
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	e008      	b.n	80107ea <HAL_TIM_PWM_Start+0x9e>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80107de:	b2db      	uxtb	r3, r3
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	bf14      	ite	ne
 80107e4:	2301      	movne	r3, #1
 80107e6:	2300      	moveq	r3, #0
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d001      	beq.n	80107f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80107ee:	2301      	movs	r3, #1
 80107f0:	e0a1      	b.n	8010936 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d104      	bne.n	8010802 <HAL_TIM_PWM_Start+0xb6>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2202      	movs	r2, #2
 80107fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010800:	e023      	b.n	801084a <HAL_TIM_PWM_Start+0xfe>
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	2b04      	cmp	r3, #4
 8010806:	d104      	bne.n	8010812 <HAL_TIM_PWM_Start+0xc6>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2202      	movs	r2, #2
 801080c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010810:	e01b      	b.n	801084a <HAL_TIM_PWM_Start+0xfe>
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	2b08      	cmp	r3, #8
 8010816:	d104      	bne.n	8010822 <HAL_TIM_PWM_Start+0xd6>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2202      	movs	r2, #2
 801081c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010820:	e013      	b.n	801084a <HAL_TIM_PWM_Start+0xfe>
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	2b0c      	cmp	r3, #12
 8010826:	d104      	bne.n	8010832 <HAL_TIM_PWM_Start+0xe6>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2202      	movs	r2, #2
 801082c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010830:	e00b      	b.n	801084a <HAL_TIM_PWM_Start+0xfe>
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	2b10      	cmp	r3, #16
 8010836:	d104      	bne.n	8010842 <HAL_TIM_PWM_Start+0xf6>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2202      	movs	r2, #2
 801083c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010840:	e003      	b.n	801084a <HAL_TIM_PWM_Start+0xfe>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2202      	movs	r2, #2
 8010846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2201      	movs	r2, #1
 8010850:	6839      	ldr	r1, [r7, #0]
 8010852:	4618      	mov	r0, r3
 8010854:	f001 fdcc 	bl	80123f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a38      	ldr	r2, [pc, #224]	; (8010940 <HAL_TIM_PWM_Start+0x1f4>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d013      	beq.n	801088a <HAL_TIM_PWM_Start+0x13e>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4a37      	ldr	r2, [pc, #220]	; (8010944 <HAL_TIM_PWM_Start+0x1f8>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d00e      	beq.n	801088a <HAL_TIM_PWM_Start+0x13e>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4a35      	ldr	r2, [pc, #212]	; (8010948 <HAL_TIM_PWM_Start+0x1fc>)
 8010872:	4293      	cmp	r3, r2
 8010874:	d009      	beq.n	801088a <HAL_TIM_PWM_Start+0x13e>
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4a34      	ldr	r2, [pc, #208]	; (801094c <HAL_TIM_PWM_Start+0x200>)
 801087c:	4293      	cmp	r3, r2
 801087e:	d004      	beq.n	801088a <HAL_TIM_PWM_Start+0x13e>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	4a32      	ldr	r2, [pc, #200]	; (8010950 <HAL_TIM_PWM_Start+0x204>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d101      	bne.n	801088e <HAL_TIM_PWM_Start+0x142>
 801088a:	2301      	movs	r3, #1
 801088c:	e000      	b.n	8010890 <HAL_TIM_PWM_Start+0x144>
 801088e:	2300      	movs	r3, #0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d007      	beq.n	80108a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80108a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	4a25      	ldr	r2, [pc, #148]	; (8010940 <HAL_TIM_PWM_Start+0x1f4>)
 80108aa:	4293      	cmp	r3, r2
 80108ac:	d022      	beq.n	80108f4 <HAL_TIM_PWM_Start+0x1a8>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108b6:	d01d      	beq.n	80108f4 <HAL_TIM_PWM_Start+0x1a8>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4a25      	ldr	r2, [pc, #148]	; (8010954 <HAL_TIM_PWM_Start+0x208>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d018      	beq.n	80108f4 <HAL_TIM_PWM_Start+0x1a8>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4a24      	ldr	r2, [pc, #144]	; (8010958 <HAL_TIM_PWM_Start+0x20c>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d013      	beq.n	80108f4 <HAL_TIM_PWM_Start+0x1a8>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4a22      	ldr	r2, [pc, #136]	; (801095c <HAL_TIM_PWM_Start+0x210>)
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d00e      	beq.n	80108f4 <HAL_TIM_PWM_Start+0x1a8>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4a1a      	ldr	r2, [pc, #104]	; (8010944 <HAL_TIM_PWM_Start+0x1f8>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	d009      	beq.n	80108f4 <HAL_TIM_PWM_Start+0x1a8>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	4a1e      	ldr	r2, [pc, #120]	; (8010960 <HAL_TIM_PWM_Start+0x214>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d004      	beq.n	80108f4 <HAL_TIM_PWM_Start+0x1a8>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4a16      	ldr	r2, [pc, #88]	; (8010948 <HAL_TIM_PWM_Start+0x1fc>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d115      	bne.n	8010920 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	689a      	ldr	r2, [r3, #8]
 80108fa:	4b1a      	ldr	r3, [pc, #104]	; (8010964 <HAL_TIM_PWM_Start+0x218>)
 80108fc:	4013      	ands	r3, r2
 80108fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2b06      	cmp	r3, #6
 8010904:	d015      	beq.n	8010932 <HAL_TIM_PWM_Start+0x1e6>
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801090c:	d011      	beq.n	8010932 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f042 0201 	orr.w	r2, r2, #1
 801091c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801091e:	e008      	b.n	8010932 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f042 0201 	orr.w	r2, r2, #1
 801092e:	601a      	str	r2, [r3, #0]
 8010930:	e000      	b.n	8010934 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010932:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010934:	2300      	movs	r3, #0
}
 8010936:	4618      	mov	r0, r3
 8010938:	3710      	adds	r7, #16
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	40010000 	.word	0x40010000
 8010944:	40010400 	.word	0x40010400
 8010948:	40014000 	.word	0x40014000
 801094c:	40014400 	.word	0x40014400
 8010950:	40014800 	.word	0x40014800
 8010954:	40000400 	.word	0x40000400
 8010958:	40000800 	.word	0x40000800
 801095c:	40000c00 	.word	0x40000c00
 8010960:	40001800 	.word	0x40001800
 8010964:	00010007 	.word	0x00010007

08010968 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d101      	bne.n	801097a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8010976:	2301      	movs	r3, #1
 8010978:	e049      	b.n	8010a0e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	d106      	bne.n	8010994 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	2200      	movs	r2, #0
 801098a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 f841 	bl	8010a16 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2202      	movs	r2, #2
 8010998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	3304      	adds	r3, #4
 80109a4:	4619      	mov	r1, r3
 80109a6:	4610      	mov	r0, r2
 80109a8:	f000 ff00 	bl	80117ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2201      	movs	r2, #1
 80109b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2201      	movs	r2, #1
 80109b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2201      	movs	r2, #1
 80109c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2201      	movs	r2, #1
 80109c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2201      	movs	r2, #1
 80109d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2201      	movs	r2, #1
 80109d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2201      	movs	r2, #1
 80109e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2201      	movs	r2, #1
 80109e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2201      	movs	r2, #1
 80109f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2201      	movs	r2, #1
 80109f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2201      	movs	r2, #1
 8010a00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2201      	movs	r2, #1
 8010a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010a0c:	2300      	movs	r3, #0
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3708      	adds	r7, #8
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}

08010a16 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8010a16:	b480      	push	{r7}
 8010a18:	b083      	sub	sp, #12
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8010a1e:	bf00      	nop
 8010a20:	370c      	adds	r7, #12
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
	...

08010a2c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d104      	bne.n	8010a46 <HAL_TIM_IC_Start+0x1a>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	e023      	b.n	8010a8e <HAL_TIM_IC_Start+0x62>
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	2b04      	cmp	r3, #4
 8010a4a:	d104      	bne.n	8010a56 <HAL_TIM_IC_Start+0x2a>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010a52:	b2db      	uxtb	r3, r3
 8010a54:	e01b      	b.n	8010a8e <HAL_TIM_IC_Start+0x62>
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	2b08      	cmp	r3, #8
 8010a5a:	d104      	bne.n	8010a66 <HAL_TIM_IC_Start+0x3a>
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	e013      	b.n	8010a8e <HAL_TIM_IC_Start+0x62>
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	2b0c      	cmp	r3, #12
 8010a6a:	d104      	bne.n	8010a76 <HAL_TIM_IC_Start+0x4a>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	e00b      	b.n	8010a8e <HAL_TIM_IC_Start+0x62>
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	2b10      	cmp	r3, #16
 8010a7a:	d104      	bne.n	8010a86 <HAL_TIM_IC_Start+0x5a>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a82:	b2db      	uxtb	r3, r3
 8010a84:	e003      	b.n	8010a8e <HAL_TIM_IC_Start+0x62>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a8c:	b2db      	uxtb	r3, r3
 8010a8e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d104      	bne.n	8010aa0 <HAL_TIM_IC_Start+0x74>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a9c:	b2db      	uxtb	r3, r3
 8010a9e:	e013      	b.n	8010ac8 <HAL_TIM_IC_Start+0x9c>
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	2b04      	cmp	r3, #4
 8010aa4:	d104      	bne.n	8010ab0 <HAL_TIM_IC_Start+0x84>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	e00b      	b.n	8010ac8 <HAL_TIM_IC_Start+0x9c>
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	2b08      	cmp	r3, #8
 8010ab4:	d104      	bne.n	8010ac0 <HAL_TIM_IC_Start+0x94>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010abc:	b2db      	uxtb	r3, r3
 8010abe:	e003      	b.n	8010ac8 <HAL_TIM_IC_Start+0x9c>
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010aca:	7bfb      	ldrb	r3, [r7, #15]
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d102      	bne.n	8010ad6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010ad0:	7bbb      	ldrb	r3, [r7, #14]
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d001      	beq.n	8010ada <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	e097      	b.n	8010c0a <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d104      	bne.n	8010aea <HAL_TIM_IC_Start+0xbe>
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2202      	movs	r2, #2
 8010ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010ae8:	e023      	b.n	8010b32 <HAL_TIM_IC_Start+0x106>
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	2b04      	cmp	r3, #4
 8010aee:	d104      	bne.n	8010afa <HAL_TIM_IC_Start+0xce>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2202      	movs	r2, #2
 8010af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010af8:	e01b      	b.n	8010b32 <HAL_TIM_IC_Start+0x106>
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	2b08      	cmp	r3, #8
 8010afe:	d104      	bne.n	8010b0a <HAL_TIM_IC_Start+0xde>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2202      	movs	r2, #2
 8010b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010b08:	e013      	b.n	8010b32 <HAL_TIM_IC_Start+0x106>
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	2b0c      	cmp	r3, #12
 8010b0e:	d104      	bne.n	8010b1a <HAL_TIM_IC_Start+0xee>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2202      	movs	r2, #2
 8010b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010b18:	e00b      	b.n	8010b32 <HAL_TIM_IC_Start+0x106>
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	2b10      	cmp	r3, #16
 8010b1e:	d104      	bne.n	8010b2a <HAL_TIM_IC_Start+0xfe>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2202      	movs	r2, #2
 8010b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010b28:	e003      	b.n	8010b32 <HAL_TIM_IC_Start+0x106>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2202      	movs	r2, #2
 8010b2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d104      	bne.n	8010b42 <HAL_TIM_IC_Start+0x116>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2202      	movs	r2, #2
 8010b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b40:	e013      	b.n	8010b6a <HAL_TIM_IC_Start+0x13e>
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	2b04      	cmp	r3, #4
 8010b46:	d104      	bne.n	8010b52 <HAL_TIM_IC_Start+0x126>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2202      	movs	r2, #2
 8010b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b50:	e00b      	b.n	8010b6a <HAL_TIM_IC_Start+0x13e>
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	2b08      	cmp	r3, #8
 8010b56:	d104      	bne.n	8010b62 <HAL_TIM_IC_Start+0x136>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2202      	movs	r2, #2
 8010b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010b60:	e003      	b.n	8010b6a <HAL_TIM_IC_Start+0x13e>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2202      	movs	r2, #2
 8010b66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	6839      	ldr	r1, [r7, #0]
 8010b72:	4618      	mov	r0, r3
 8010b74:	f001 fc3c 	bl	80123f0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4a25      	ldr	r2, [pc, #148]	; (8010c14 <HAL_TIM_IC_Start+0x1e8>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d022      	beq.n	8010bc8 <HAL_TIM_IC_Start+0x19c>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b8a:	d01d      	beq.n	8010bc8 <HAL_TIM_IC_Start+0x19c>
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4a21      	ldr	r2, [pc, #132]	; (8010c18 <HAL_TIM_IC_Start+0x1ec>)
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d018      	beq.n	8010bc8 <HAL_TIM_IC_Start+0x19c>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a20      	ldr	r2, [pc, #128]	; (8010c1c <HAL_TIM_IC_Start+0x1f0>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d013      	beq.n	8010bc8 <HAL_TIM_IC_Start+0x19c>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4a1e      	ldr	r2, [pc, #120]	; (8010c20 <HAL_TIM_IC_Start+0x1f4>)
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	d00e      	beq.n	8010bc8 <HAL_TIM_IC_Start+0x19c>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	4a1d      	ldr	r2, [pc, #116]	; (8010c24 <HAL_TIM_IC_Start+0x1f8>)
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d009      	beq.n	8010bc8 <HAL_TIM_IC_Start+0x19c>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	4a1b      	ldr	r2, [pc, #108]	; (8010c28 <HAL_TIM_IC_Start+0x1fc>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d004      	beq.n	8010bc8 <HAL_TIM_IC_Start+0x19c>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4a1a      	ldr	r2, [pc, #104]	; (8010c2c <HAL_TIM_IC_Start+0x200>)
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d115      	bne.n	8010bf4 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	689a      	ldr	r2, [r3, #8]
 8010bce:	4b18      	ldr	r3, [pc, #96]	; (8010c30 <HAL_TIM_IC_Start+0x204>)
 8010bd0:	4013      	ands	r3, r2
 8010bd2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	2b06      	cmp	r3, #6
 8010bd8:	d015      	beq.n	8010c06 <HAL_TIM_IC_Start+0x1da>
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010be0:	d011      	beq.n	8010c06 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	681a      	ldr	r2, [r3, #0]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f042 0201 	orr.w	r2, r2, #1
 8010bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bf2:	e008      	b.n	8010c06 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f042 0201 	orr.w	r2, r2, #1
 8010c02:	601a      	str	r2, [r3, #0]
 8010c04:	e000      	b.n	8010c08 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010c08:	2300      	movs	r3, #0
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3710      	adds	r7, #16
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	bf00      	nop
 8010c14:	40010000 	.word	0x40010000
 8010c18:	40000400 	.word	0x40000400
 8010c1c:	40000800 	.word	0x40000800
 8010c20:	40000c00 	.word	0x40000c00
 8010c24:	40010400 	.word	0x40010400
 8010c28:	40001800 	.word	0x40001800
 8010c2c:	40014000 	.word	0x40014000
 8010c30:	00010007 	.word	0x00010007

08010c34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d104      	bne.n	8010c52 <HAL_TIM_IC_Start_IT+0x1e>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	e023      	b.n	8010c9a <HAL_TIM_IC_Start_IT+0x66>
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	2b04      	cmp	r3, #4
 8010c56:	d104      	bne.n	8010c62 <HAL_TIM_IC_Start_IT+0x2e>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010c5e:	b2db      	uxtb	r3, r3
 8010c60:	e01b      	b.n	8010c9a <HAL_TIM_IC_Start_IT+0x66>
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	2b08      	cmp	r3, #8
 8010c66:	d104      	bne.n	8010c72 <HAL_TIM_IC_Start_IT+0x3e>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	e013      	b.n	8010c9a <HAL_TIM_IC_Start_IT+0x66>
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	2b0c      	cmp	r3, #12
 8010c76:	d104      	bne.n	8010c82 <HAL_TIM_IC_Start_IT+0x4e>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010c7e:	b2db      	uxtb	r3, r3
 8010c80:	e00b      	b.n	8010c9a <HAL_TIM_IC_Start_IT+0x66>
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	2b10      	cmp	r3, #16
 8010c86:	d104      	bne.n	8010c92 <HAL_TIM_IC_Start_IT+0x5e>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	e003      	b.n	8010c9a <HAL_TIM_IC_Start_IT+0x66>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d104      	bne.n	8010cac <HAL_TIM_IC_Start_IT+0x78>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	e013      	b.n	8010cd4 <HAL_TIM_IC_Start_IT+0xa0>
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	2b04      	cmp	r3, #4
 8010cb0:	d104      	bne.n	8010cbc <HAL_TIM_IC_Start_IT+0x88>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	e00b      	b.n	8010cd4 <HAL_TIM_IC_Start_IT+0xa0>
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	2b08      	cmp	r3, #8
 8010cc0:	d104      	bne.n	8010ccc <HAL_TIM_IC_Start_IT+0x98>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	e003      	b.n	8010cd4 <HAL_TIM_IC_Start_IT+0xa0>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010cd6:	7bbb      	ldrb	r3, [r7, #14]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d102      	bne.n	8010ce2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010cdc:	7b7b      	ldrb	r3, [r7, #13]
 8010cde:	2b01      	cmp	r3, #1
 8010ce0:	d001      	beq.n	8010ce6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	e0e2      	b.n	8010eac <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d104      	bne.n	8010cf6 <HAL_TIM_IC_Start_IT+0xc2>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2202      	movs	r2, #2
 8010cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010cf4:	e023      	b.n	8010d3e <HAL_TIM_IC_Start_IT+0x10a>
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	2b04      	cmp	r3, #4
 8010cfa:	d104      	bne.n	8010d06 <HAL_TIM_IC_Start_IT+0xd2>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2202      	movs	r2, #2
 8010d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d04:	e01b      	b.n	8010d3e <HAL_TIM_IC_Start_IT+0x10a>
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	2b08      	cmp	r3, #8
 8010d0a:	d104      	bne.n	8010d16 <HAL_TIM_IC_Start_IT+0xe2>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2202      	movs	r2, #2
 8010d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d14:	e013      	b.n	8010d3e <HAL_TIM_IC_Start_IT+0x10a>
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	2b0c      	cmp	r3, #12
 8010d1a:	d104      	bne.n	8010d26 <HAL_TIM_IC_Start_IT+0xf2>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2202      	movs	r2, #2
 8010d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010d24:	e00b      	b.n	8010d3e <HAL_TIM_IC_Start_IT+0x10a>
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	2b10      	cmp	r3, #16
 8010d2a:	d104      	bne.n	8010d36 <HAL_TIM_IC_Start_IT+0x102>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2202      	movs	r2, #2
 8010d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010d34:	e003      	b.n	8010d3e <HAL_TIM_IC_Start_IT+0x10a>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2202      	movs	r2, #2
 8010d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d104      	bne.n	8010d4e <HAL_TIM_IC_Start_IT+0x11a>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2202      	movs	r2, #2
 8010d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d4c:	e013      	b.n	8010d76 <HAL_TIM_IC_Start_IT+0x142>
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	2b04      	cmp	r3, #4
 8010d52:	d104      	bne.n	8010d5e <HAL_TIM_IC_Start_IT+0x12a>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2202      	movs	r2, #2
 8010d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d5c:	e00b      	b.n	8010d76 <HAL_TIM_IC_Start_IT+0x142>
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	2b08      	cmp	r3, #8
 8010d62:	d104      	bne.n	8010d6e <HAL_TIM_IC_Start_IT+0x13a>
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2202      	movs	r2, #2
 8010d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010d6c:	e003      	b.n	8010d76 <HAL_TIM_IC_Start_IT+0x142>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2202      	movs	r2, #2
 8010d72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	2b0c      	cmp	r3, #12
 8010d7a:	d841      	bhi.n	8010e00 <HAL_TIM_IC_Start_IT+0x1cc>
 8010d7c:	a201      	add	r2, pc, #4	; (adr r2, 8010d84 <HAL_TIM_IC_Start_IT+0x150>)
 8010d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d82:	bf00      	nop
 8010d84:	08010db9 	.word	0x08010db9
 8010d88:	08010e01 	.word	0x08010e01
 8010d8c:	08010e01 	.word	0x08010e01
 8010d90:	08010e01 	.word	0x08010e01
 8010d94:	08010dcb 	.word	0x08010dcb
 8010d98:	08010e01 	.word	0x08010e01
 8010d9c:	08010e01 	.word	0x08010e01
 8010da0:	08010e01 	.word	0x08010e01
 8010da4:	08010ddd 	.word	0x08010ddd
 8010da8:	08010e01 	.word	0x08010e01
 8010dac:	08010e01 	.word	0x08010e01
 8010db0:	08010e01 	.word	0x08010e01
 8010db4:	08010def 	.word	0x08010def
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	68da      	ldr	r2, [r3, #12]
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f042 0202 	orr.w	r2, r2, #2
 8010dc6:	60da      	str	r2, [r3, #12]
      break;
 8010dc8:	e01d      	b.n	8010e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	68da      	ldr	r2, [r3, #12]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f042 0204 	orr.w	r2, r2, #4
 8010dd8:	60da      	str	r2, [r3, #12]
      break;
 8010dda:	e014      	b.n	8010e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	68da      	ldr	r2, [r3, #12]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	f042 0208 	orr.w	r2, r2, #8
 8010dea:	60da      	str	r2, [r3, #12]
      break;
 8010dec:	e00b      	b.n	8010e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	68da      	ldr	r2, [r3, #12]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f042 0210 	orr.w	r2, r2, #16
 8010dfc:	60da      	str	r2, [r3, #12]
      break;
 8010dfe:	e002      	b.n	8010e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8010e00:	2301      	movs	r3, #1
 8010e02:	73fb      	strb	r3, [r7, #15]
      break;
 8010e04:	bf00      	nop
  }

  if (status == HAL_OK)
 8010e06:	7bfb      	ldrb	r3, [r7, #15]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d14e      	bne.n	8010eaa <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	2201      	movs	r2, #1
 8010e12:	6839      	ldr	r1, [r7, #0]
 8010e14:	4618      	mov	r0, r3
 8010e16:	f001 faeb 	bl	80123f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	4a25      	ldr	r2, [pc, #148]	; (8010eb4 <HAL_TIM_IC_Start_IT+0x280>)
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d022      	beq.n	8010e6a <HAL_TIM_IC_Start_IT+0x236>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e2c:	d01d      	beq.n	8010e6a <HAL_TIM_IC_Start_IT+0x236>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	4a21      	ldr	r2, [pc, #132]	; (8010eb8 <HAL_TIM_IC_Start_IT+0x284>)
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d018      	beq.n	8010e6a <HAL_TIM_IC_Start_IT+0x236>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	4a1f      	ldr	r2, [pc, #124]	; (8010ebc <HAL_TIM_IC_Start_IT+0x288>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d013      	beq.n	8010e6a <HAL_TIM_IC_Start_IT+0x236>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4a1e      	ldr	r2, [pc, #120]	; (8010ec0 <HAL_TIM_IC_Start_IT+0x28c>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d00e      	beq.n	8010e6a <HAL_TIM_IC_Start_IT+0x236>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	4a1c      	ldr	r2, [pc, #112]	; (8010ec4 <HAL_TIM_IC_Start_IT+0x290>)
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d009      	beq.n	8010e6a <HAL_TIM_IC_Start_IT+0x236>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4a1b      	ldr	r2, [pc, #108]	; (8010ec8 <HAL_TIM_IC_Start_IT+0x294>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d004      	beq.n	8010e6a <HAL_TIM_IC_Start_IT+0x236>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	4a19      	ldr	r2, [pc, #100]	; (8010ecc <HAL_TIM_IC_Start_IT+0x298>)
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d115      	bne.n	8010e96 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	689a      	ldr	r2, [r3, #8]
 8010e70:	4b17      	ldr	r3, [pc, #92]	; (8010ed0 <HAL_TIM_IC_Start_IT+0x29c>)
 8010e72:	4013      	ands	r3, r2
 8010e74:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	2b06      	cmp	r3, #6
 8010e7a:	d015      	beq.n	8010ea8 <HAL_TIM_IC_Start_IT+0x274>
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e82:	d011      	beq.n	8010ea8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	f042 0201 	orr.w	r2, r2, #1
 8010e92:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e94:	e008      	b.n	8010ea8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f042 0201 	orr.w	r2, r2, #1
 8010ea4:	601a      	str	r2, [r3, #0]
 8010ea6:	e000      	b.n	8010eaa <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ea8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3710      	adds	r7, #16
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	40010000 	.word	0x40010000
 8010eb8:	40000400 	.word	0x40000400
 8010ebc:	40000800 	.word	0x40000800
 8010ec0:	40000c00 	.word	0x40000c00
 8010ec4:	40010400 	.word	0x40010400
 8010ec8:	40001800 	.word	0x40001800
 8010ecc:	40014000 	.word	0x40014000
 8010ed0:	00010007 	.word	0x00010007

08010ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	691b      	ldr	r3, [r3, #16]
 8010ee2:	f003 0302 	and.w	r3, r3, #2
 8010ee6:	2b02      	cmp	r3, #2
 8010ee8:	d122      	bne.n	8010f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	f003 0302 	and.w	r3, r3, #2
 8010ef4:	2b02      	cmp	r3, #2
 8010ef6:	d11b      	bne.n	8010f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f06f 0202 	mvn.w	r2, #2
 8010f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2201      	movs	r2, #1
 8010f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	699b      	ldr	r3, [r3, #24]
 8010f0e:	f003 0303 	and.w	r3, r3, #3
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d003      	beq.n	8010f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f7f3 fa92 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 8010f1c:	e005      	b.n	8010f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f000 fc26 	bl	8011770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f000 fc2d 	bl	8011784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	691b      	ldr	r3, [r3, #16]
 8010f36:	f003 0304 	and.w	r3, r3, #4
 8010f3a:	2b04      	cmp	r3, #4
 8010f3c:	d122      	bne.n	8010f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	68db      	ldr	r3, [r3, #12]
 8010f44:	f003 0304 	and.w	r3, r3, #4
 8010f48:	2b04      	cmp	r3, #4
 8010f4a:	d11b      	bne.n	8010f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	f06f 0204 	mvn.w	r2, #4
 8010f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2202      	movs	r2, #2
 8010f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	699b      	ldr	r3, [r3, #24]
 8010f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d003      	beq.n	8010f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f7f3 fa68 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 8010f70:	e005      	b.n	8010f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f000 fbfc 	bl	8011770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 fc03 	bl	8011784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2200      	movs	r2, #0
 8010f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	691b      	ldr	r3, [r3, #16]
 8010f8a:	f003 0308 	and.w	r3, r3, #8
 8010f8e:	2b08      	cmp	r3, #8
 8010f90:	d122      	bne.n	8010fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	f003 0308 	and.w	r3, r3, #8
 8010f9c:	2b08      	cmp	r3, #8
 8010f9e:	d11b      	bne.n	8010fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	f06f 0208 	mvn.w	r2, #8
 8010fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2204      	movs	r2, #4
 8010fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	69db      	ldr	r3, [r3, #28]
 8010fb6:	f003 0303 	and.w	r3, r3, #3
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d003      	beq.n	8010fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f7f3 fa3e 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 8010fc4:	e005      	b.n	8010fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fbd2 	bl	8011770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f000 fbd9 	bl	8011784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	691b      	ldr	r3, [r3, #16]
 8010fde:	f003 0310 	and.w	r3, r3, #16
 8010fe2:	2b10      	cmp	r3, #16
 8010fe4:	d122      	bne.n	801102c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	f003 0310 	and.w	r3, r3, #16
 8010ff0:	2b10      	cmp	r3, #16
 8010ff2:	d11b      	bne.n	801102c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f06f 0210 	mvn.w	r2, #16
 8010ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2208      	movs	r2, #8
 8011002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	69db      	ldr	r3, [r3, #28]
 801100a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801100e:	2b00      	cmp	r3, #0
 8011010:	d003      	beq.n	801101a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7f3 fa14 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 8011018:	e005      	b.n	8011026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 fba8 	bl	8011770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f000 fbaf 	bl	8011784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2200      	movs	r2, #0
 801102a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	691b      	ldr	r3, [r3, #16]
 8011032:	f003 0301 	and.w	r3, r3, #1
 8011036:	2b01      	cmp	r3, #1
 8011038:	d10e      	bne.n	8011058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	68db      	ldr	r3, [r3, #12]
 8011040:	f003 0301 	and.w	r3, r3, #1
 8011044:	2b01      	cmp	r3, #1
 8011046:	d107      	bne.n	8011058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f06f 0201 	mvn.w	r2, #1
 8011050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7f3 faac 	bl	80045b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	691b      	ldr	r3, [r3, #16]
 801105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011062:	2b80      	cmp	r3, #128	; 0x80
 8011064:	d10e      	bne.n	8011084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011070:	2b80      	cmp	r3, #128	; 0x80
 8011072:	d107      	bne.n	8011084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801107c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f001 fa74 	bl	801256c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	691b      	ldr	r3, [r3, #16]
 801108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801108e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011092:	d10e      	bne.n	80110b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	68db      	ldr	r3, [r3, #12]
 801109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801109e:	2b80      	cmp	r3, #128	; 0x80
 80110a0:	d107      	bne.n	80110b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80110aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f001 fa67 	bl	8012580 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	691b      	ldr	r3, [r3, #16]
 80110b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110bc:	2b40      	cmp	r3, #64	; 0x40
 80110be:	d10e      	bne.n	80110de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	68db      	ldr	r3, [r3, #12]
 80110c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110ca:	2b40      	cmp	r3, #64	; 0x40
 80110cc:	d107      	bne.n	80110de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80110d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 fb5d 	bl	8011798 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	691b      	ldr	r3, [r3, #16]
 80110e4:	f003 0320 	and.w	r3, r3, #32
 80110e8:	2b20      	cmp	r3, #32
 80110ea:	d10e      	bne.n	801110a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	f003 0320 	and.w	r3, r3, #32
 80110f6:	2b20      	cmp	r3, #32
 80110f8:	d107      	bne.n	801110a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	f06f 0220 	mvn.w	r2, #32
 8011102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f001 fa27 	bl	8012558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801110a:	bf00      	nop
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}

08011112 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8011112:	b580      	push	{r7, lr}
 8011114:	b086      	sub	sp, #24
 8011116:	af00      	add	r7, sp, #0
 8011118:	60f8      	str	r0, [r7, #12]
 801111a:	60b9      	str	r1, [r7, #8]
 801111c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801111e:	2300      	movs	r3, #0
 8011120:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011128:	2b01      	cmp	r3, #1
 801112a:	d101      	bne.n	8011130 <HAL_TIM_IC_ConfigChannel+0x1e>
 801112c:	2302      	movs	r3, #2
 801112e:	e088      	b.n	8011242 <HAL_TIM_IC_ConfigChannel+0x130>
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2201      	movs	r2, #1
 8011134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d11b      	bne.n	8011176 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 801114e:	f000 ff87 	bl	8012060 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	699a      	ldr	r2, [r3, #24]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f022 020c 	bic.w	r2, r2, #12
 8011160:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	6999      	ldr	r1, [r3, #24]
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	689a      	ldr	r2, [r3, #8]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	430a      	orrs	r2, r1
 8011172:	619a      	str	r2, [r3, #24]
 8011174:	e060      	b.n	8011238 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2b04      	cmp	r3, #4
 801117a:	d11c      	bne.n	80111b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801118c:	f001 f80b 	bl	80121a6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	699a      	ldr	r2, [r3, #24]
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801119e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	6999      	ldr	r1, [r3, #24]
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	689b      	ldr	r3, [r3, #8]
 80111aa:	021a      	lsls	r2, r3, #8
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	430a      	orrs	r2, r1
 80111b2:	619a      	str	r2, [r3, #24]
 80111b4:	e040      	b.n	8011238 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2b08      	cmp	r3, #8
 80111ba:	d11b      	bne.n	80111f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80111cc:	f001 f858 	bl	8012280 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	69da      	ldr	r2, [r3, #28]
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	f022 020c 	bic.w	r2, r2, #12
 80111de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	69d9      	ldr	r1, [r3, #28]
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	689a      	ldr	r2, [r3, #8]
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	430a      	orrs	r2, r1
 80111f0:	61da      	str	r2, [r3, #28]
 80111f2:	e021      	b.n	8011238 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2b0c      	cmp	r3, #12
 80111f8:	d11c      	bne.n	8011234 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801120a:	f001 f875 	bl	80122f8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	69da      	ldr	r2, [r3, #28]
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801121c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	69d9      	ldr	r1, [r3, #28]
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	021a      	lsls	r2, r3, #8
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	430a      	orrs	r2, r1
 8011230:	61da      	str	r2, [r3, #28]
 8011232:	e001      	b.n	8011238 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8011234:	2301      	movs	r3, #1
 8011236:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2200      	movs	r2, #0
 801123c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011240:	7dfb      	ldrb	r3, [r7, #23]
}
 8011242:	4618      	mov	r0, r3
 8011244:	3718      	adds	r7, #24
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
	...

0801124c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b086      	sub	sp, #24
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011258:	2300      	movs	r3, #0
 801125a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011262:	2b01      	cmp	r3, #1
 8011264:	d101      	bne.n	801126a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011266:	2302      	movs	r3, #2
 8011268:	e0ff      	b.n	801146a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	2201      	movs	r2, #1
 801126e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2b14      	cmp	r3, #20
 8011276:	f200 80f0 	bhi.w	801145a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801127a:	a201      	add	r2, pc, #4	; (adr r2, 8011280 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011280:	080112d5 	.word	0x080112d5
 8011284:	0801145b 	.word	0x0801145b
 8011288:	0801145b 	.word	0x0801145b
 801128c:	0801145b 	.word	0x0801145b
 8011290:	08011315 	.word	0x08011315
 8011294:	0801145b 	.word	0x0801145b
 8011298:	0801145b 	.word	0x0801145b
 801129c:	0801145b 	.word	0x0801145b
 80112a0:	08011357 	.word	0x08011357
 80112a4:	0801145b 	.word	0x0801145b
 80112a8:	0801145b 	.word	0x0801145b
 80112ac:	0801145b 	.word	0x0801145b
 80112b0:	08011397 	.word	0x08011397
 80112b4:	0801145b 	.word	0x0801145b
 80112b8:	0801145b 	.word	0x0801145b
 80112bc:	0801145b 	.word	0x0801145b
 80112c0:	080113d9 	.word	0x080113d9
 80112c4:	0801145b 	.word	0x0801145b
 80112c8:	0801145b 	.word	0x0801145b
 80112cc:	0801145b 	.word	0x0801145b
 80112d0:	08011419 	.word	0x08011419
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	68b9      	ldr	r1, [r7, #8]
 80112da:	4618      	mov	r0, r3
 80112dc:	f000 fb00 	bl	80118e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	699a      	ldr	r2, [r3, #24]
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f042 0208 	orr.w	r2, r2, #8
 80112ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	699a      	ldr	r2, [r3, #24]
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f022 0204 	bic.w	r2, r2, #4
 80112fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	6999      	ldr	r1, [r3, #24]
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	691a      	ldr	r2, [r3, #16]
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	430a      	orrs	r2, r1
 8011310:	619a      	str	r2, [r3, #24]
      break;
 8011312:	e0a5      	b.n	8011460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	68b9      	ldr	r1, [r7, #8]
 801131a:	4618      	mov	r0, r3
 801131c:	f000 fb70 	bl	8011a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	699a      	ldr	r2, [r3, #24]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801132e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	699a      	ldr	r2, [r3, #24]
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801133e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	6999      	ldr	r1, [r3, #24]
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	691b      	ldr	r3, [r3, #16]
 801134a:	021a      	lsls	r2, r3, #8
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	430a      	orrs	r2, r1
 8011352:	619a      	str	r2, [r3, #24]
      break;
 8011354:	e084      	b.n	8011460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	68b9      	ldr	r1, [r7, #8]
 801135c:	4618      	mov	r0, r3
 801135e:	f000 fbd9 	bl	8011b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	69da      	ldr	r2, [r3, #28]
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	f042 0208 	orr.w	r2, r2, #8
 8011370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	69da      	ldr	r2, [r3, #28]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f022 0204 	bic.w	r2, r2, #4
 8011380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	69d9      	ldr	r1, [r3, #28]
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	691a      	ldr	r2, [r3, #16]
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	430a      	orrs	r2, r1
 8011392:	61da      	str	r2, [r3, #28]
      break;
 8011394:	e064      	b.n	8011460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	68b9      	ldr	r1, [r7, #8]
 801139c:	4618      	mov	r0, r3
 801139e:	f000 fc41 	bl	8011c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	69da      	ldr	r2, [r3, #28]
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80113b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	69da      	ldr	r2, [r3, #28]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80113c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	69d9      	ldr	r1, [r3, #28]
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	691b      	ldr	r3, [r3, #16]
 80113cc:	021a      	lsls	r2, r3, #8
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	430a      	orrs	r2, r1
 80113d4:	61da      	str	r2, [r3, #28]
      break;
 80113d6:	e043      	b.n	8011460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	68b9      	ldr	r1, [r7, #8]
 80113de:	4618      	mov	r0, r3
 80113e0:	f000 fc8a 	bl	8011cf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	f042 0208 	orr.w	r2, r2, #8
 80113f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f022 0204 	bic.w	r2, r2, #4
 8011402:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	691a      	ldr	r2, [r3, #16]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	430a      	orrs	r2, r1
 8011414:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011416:	e023      	b.n	8011460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	68b9      	ldr	r1, [r7, #8]
 801141e:	4618      	mov	r0, r3
 8011420:	f000 fcce 	bl	8011dc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011432:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011442:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	691b      	ldr	r3, [r3, #16]
 801144e:	021a      	lsls	r2, r3, #8
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	430a      	orrs	r2, r1
 8011456:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011458:	e002      	b.n	8011460 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801145a:	2301      	movs	r3, #1
 801145c:	75fb      	strb	r3, [r7, #23]
      break;
 801145e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2200      	movs	r2, #0
 8011464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011468:	7dfb      	ldrb	r3, [r7, #23]
}
 801146a:	4618      	mov	r0, r3
 801146c:	3718      	adds	r7, #24
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}
 8011472:	bf00      	nop

08011474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b084      	sub	sp, #16
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801147e:	2300      	movs	r3, #0
 8011480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011488:	2b01      	cmp	r3, #1
 801148a:	d101      	bne.n	8011490 <HAL_TIM_ConfigClockSource+0x1c>
 801148c:	2302      	movs	r3, #2
 801148e:	e0dc      	b.n	801164a <HAL_TIM_ConfigClockSource+0x1d6>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2201      	movs	r2, #1
 8011494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2202      	movs	r2, #2
 801149c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	689b      	ldr	r3, [r3, #8]
 80114a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80114a8:	68ba      	ldr	r2, [r7, #8]
 80114aa:	4b6a      	ldr	r3, [pc, #424]	; (8011654 <HAL_TIM_ConfigClockSource+0x1e0>)
 80114ac:	4013      	ands	r3, r2
 80114ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80114b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a64      	ldr	r2, [pc, #400]	; (8011658 <HAL_TIM_ConfigClockSource+0x1e4>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	f000 80a9 	beq.w	801161e <HAL_TIM_ConfigClockSource+0x1aa>
 80114cc:	4a62      	ldr	r2, [pc, #392]	; (8011658 <HAL_TIM_ConfigClockSource+0x1e4>)
 80114ce:	4293      	cmp	r3, r2
 80114d0:	f200 80ae 	bhi.w	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 80114d4:	4a61      	ldr	r2, [pc, #388]	; (801165c <HAL_TIM_ConfigClockSource+0x1e8>)
 80114d6:	4293      	cmp	r3, r2
 80114d8:	f000 80a1 	beq.w	801161e <HAL_TIM_ConfigClockSource+0x1aa>
 80114dc:	4a5f      	ldr	r2, [pc, #380]	; (801165c <HAL_TIM_ConfigClockSource+0x1e8>)
 80114de:	4293      	cmp	r3, r2
 80114e0:	f200 80a6 	bhi.w	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 80114e4:	4a5e      	ldr	r2, [pc, #376]	; (8011660 <HAL_TIM_ConfigClockSource+0x1ec>)
 80114e6:	4293      	cmp	r3, r2
 80114e8:	f000 8099 	beq.w	801161e <HAL_TIM_ConfigClockSource+0x1aa>
 80114ec:	4a5c      	ldr	r2, [pc, #368]	; (8011660 <HAL_TIM_ConfigClockSource+0x1ec>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	f200 809e 	bhi.w	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 80114f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80114f8:	f000 8091 	beq.w	801161e <HAL_TIM_ConfigClockSource+0x1aa>
 80114fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011500:	f200 8096 	bhi.w	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 8011504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011508:	f000 8089 	beq.w	801161e <HAL_TIM_ConfigClockSource+0x1aa>
 801150c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011510:	f200 808e 	bhi.w	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 8011514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011518:	d03e      	beq.n	8011598 <HAL_TIM_ConfigClockSource+0x124>
 801151a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801151e:	f200 8087 	bhi.w	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 8011522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011526:	f000 8086 	beq.w	8011636 <HAL_TIM_ConfigClockSource+0x1c2>
 801152a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801152e:	d87f      	bhi.n	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 8011530:	2b70      	cmp	r3, #112	; 0x70
 8011532:	d01a      	beq.n	801156a <HAL_TIM_ConfigClockSource+0xf6>
 8011534:	2b70      	cmp	r3, #112	; 0x70
 8011536:	d87b      	bhi.n	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 8011538:	2b60      	cmp	r3, #96	; 0x60
 801153a:	d050      	beq.n	80115de <HAL_TIM_ConfigClockSource+0x16a>
 801153c:	2b60      	cmp	r3, #96	; 0x60
 801153e:	d877      	bhi.n	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 8011540:	2b50      	cmp	r3, #80	; 0x50
 8011542:	d03c      	beq.n	80115be <HAL_TIM_ConfigClockSource+0x14a>
 8011544:	2b50      	cmp	r3, #80	; 0x50
 8011546:	d873      	bhi.n	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 8011548:	2b40      	cmp	r3, #64	; 0x40
 801154a:	d058      	beq.n	80115fe <HAL_TIM_ConfigClockSource+0x18a>
 801154c:	2b40      	cmp	r3, #64	; 0x40
 801154e:	d86f      	bhi.n	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 8011550:	2b30      	cmp	r3, #48	; 0x30
 8011552:	d064      	beq.n	801161e <HAL_TIM_ConfigClockSource+0x1aa>
 8011554:	2b30      	cmp	r3, #48	; 0x30
 8011556:	d86b      	bhi.n	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 8011558:	2b20      	cmp	r3, #32
 801155a:	d060      	beq.n	801161e <HAL_TIM_ConfigClockSource+0x1aa>
 801155c:	2b20      	cmp	r3, #32
 801155e:	d867      	bhi.n	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
 8011560:	2b00      	cmp	r3, #0
 8011562:	d05c      	beq.n	801161e <HAL_TIM_ConfigClockSource+0x1aa>
 8011564:	2b10      	cmp	r3, #16
 8011566:	d05a      	beq.n	801161e <HAL_TIM_ConfigClockSource+0x1aa>
 8011568:	e062      	b.n	8011630 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801157a:	f000 ff19 	bl	80123b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	689b      	ldr	r3, [r3, #8]
 8011584:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801158c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	68ba      	ldr	r2, [r7, #8]
 8011594:	609a      	str	r2, [r3, #8]
      break;
 8011596:	e04f      	b.n	8011638 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80115a8:	f000 ff02 	bl	80123b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	689a      	ldr	r2, [r3, #8]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80115ba:	609a      	str	r2, [r3, #8]
      break;
 80115bc:	e03c      	b.n	8011638 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80115ca:	461a      	mov	r2, r3
 80115cc:	f000 fdbc 	bl	8012148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	2150      	movs	r1, #80	; 0x50
 80115d6:	4618      	mov	r0, r3
 80115d8:	f000 fecc 	bl	8012374 <TIM_ITRx_SetConfig>
      break;
 80115dc:	e02c      	b.n	8011638 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80115ea:	461a      	mov	r2, r3
 80115ec:	f000 fe18 	bl	8012220 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2160      	movs	r1, #96	; 0x60
 80115f6:	4618      	mov	r0, r3
 80115f8:	f000 febc 	bl	8012374 <TIM_ITRx_SetConfig>
      break;
 80115fc:	e01c      	b.n	8011638 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801160a:	461a      	mov	r2, r3
 801160c:	f000 fd9c 	bl	8012148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	2140      	movs	r1, #64	; 0x40
 8011616:	4618      	mov	r0, r3
 8011618:	f000 feac 	bl	8012374 <TIM_ITRx_SetConfig>
      break;
 801161c:	e00c      	b.n	8011638 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	4619      	mov	r1, r3
 8011628:	4610      	mov	r0, r2
 801162a:	f000 fea3 	bl	8012374 <TIM_ITRx_SetConfig>
      break;
 801162e:	e003      	b.n	8011638 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011630:	2301      	movs	r3, #1
 8011632:	73fb      	strb	r3, [r7, #15]
      break;
 8011634:	e000      	b.n	8011638 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2201      	movs	r2, #1
 801163c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2200      	movs	r2, #0
 8011644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011648:	7bfb      	ldrb	r3, [r7, #15]
}
 801164a:	4618      	mov	r0, r3
 801164c:	3710      	adds	r7, #16
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	ffceff88 	.word	0xffceff88
 8011658:	00100040 	.word	0x00100040
 801165c:	00100030 	.word	0x00100030
 8011660:	00100020 	.word	0x00100020

08011664 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011674:	2b01      	cmp	r3, #1
 8011676:	d101      	bne.n	801167c <HAL_TIM_SlaveConfigSynchro+0x18>
 8011678:	2302      	movs	r3, #2
 801167a:	e031      	b.n	80116e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2201      	movs	r2, #1
 8011680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2202      	movs	r2, #2
 8011688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801168c:	6839      	ldr	r1, [r7, #0]
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f000 fbfc 	bl	8011e8c <TIM_SlaveTimer_SetConfig>
 8011694:	4603      	mov	r3, r0
 8011696:	2b00      	cmp	r3, #0
 8011698:	d009      	beq.n	80116ae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2201      	movs	r2, #1
 801169e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2200      	movs	r2, #0
 80116a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80116aa:	2301      	movs	r3, #1
 80116ac:	e018      	b.n	80116e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	68da      	ldr	r2, [r3, #12]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80116bc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	68da      	ldr	r2, [r3, #12]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80116cc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2201      	movs	r2, #1
 80116d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2200      	movs	r2, #0
 80116da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80116de:	2300      	movs	r3, #0
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3708      	adds	r7, #8
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}

080116e8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80116e8:	b480      	push	{r7}
 80116ea:	b085      	sub	sp, #20
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80116f2:	2300      	movs	r3, #0
 80116f4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	2b0c      	cmp	r3, #12
 80116fa:	d831      	bhi.n	8011760 <HAL_TIM_ReadCapturedValue+0x78>
 80116fc:	a201      	add	r2, pc, #4	; (adr r2, 8011704 <HAL_TIM_ReadCapturedValue+0x1c>)
 80116fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011702:	bf00      	nop
 8011704:	08011739 	.word	0x08011739
 8011708:	08011761 	.word	0x08011761
 801170c:	08011761 	.word	0x08011761
 8011710:	08011761 	.word	0x08011761
 8011714:	08011743 	.word	0x08011743
 8011718:	08011761 	.word	0x08011761
 801171c:	08011761 	.word	0x08011761
 8011720:	08011761 	.word	0x08011761
 8011724:	0801174d 	.word	0x0801174d
 8011728:	08011761 	.word	0x08011761
 801172c:	08011761 	.word	0x08011761
 8011730:	08011761 	.word	0x08011761
 8011734:	08011757 	.word	0x08011757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801173e:	60fb      	str	r3, [r7, #12]

      break;
 8011740:	e00f      	b.n	8011762 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011748:	60fb      	str	r3, [r7, #12]

      break;
 801174a:	e00a      	b.n	8011762 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011752:	60fb      	str	r3, [r7, #12]

      break;
 8011754:	e005      	b.n	8011762 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801175c:	60fb      	str	r3, [r7, #12]

      break;
 801175e:	e000      	b.n	8011762 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8011760:	bf00      	nop
  }

  return tmpreg;
 8011762:	68fb      	ldr	r3, [r7, #12]
}
 8011764:	4618      	mov	r0, r3
 8011766:	3714      	adds	r7, #20
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr

08011770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011778:	bf00      	nop
 801177a:	370c      	adds	r7, #12
 801177c:	46bd      	mov	sp, r7
 801177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011782:	4770      	bx	lr

08011784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011784:	b480      	push	{r7}
 8011786:	b083      	sub	sp, #12
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801178c:	bf00      	nop
 801178e:	370c      	adds	r7, #12
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr

08011798 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80117a0:	bf00      	nop
 80117a2:	370c      	adds	r7, #12
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b085      	sub	sp, #20
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	4a40      	ldr	r2, [pc, #256]	; (80118c0 <TIM_Base_SetConfig+0x114>)
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d013      	beq.n	80117ec <TIM_Base_SetConfig+0x40>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117ca:	d00f      	beq.n	80117ec <TIM_Base_SetConfig+0x40>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	4a3d      	ldr	r2, [pc, #244]	; (80118c4 <TIM_Base_SetConfig+0x118>)
 80117d0:	4293      	cmp	r3, r2
 80117d2:	d00b      	beq.n	80117ec <TIM_Base_SetConfig+0x40>
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	4a3c      	ldr	r2, [pc, #240]	; (80118c8 <TIM_Base_SetConfig+0x11c>)
 80117d8:	4293      	cmp	r3, r2
 80117da:	d007      	beq.n	80117ec <TIM_Base_SetConfig+0x40>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	4a3b      	ldr	r2, [pc, #236]	; (80118cc <TIM_Base_SetConfig+0x120>)
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d003      	beq.n	80117ec <TIM_Base_SetConfig+0x40>
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	4a3a      	ldr	r2, [pc, #232]	; (80118d0 <TIM_Base_SetConfig+0x124>)
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d108      	bne.n	80117fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	68fa      	ldr	r2, [r7, #12]
 80117fa:	4313      	orrs	r3, r2
 80117fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	4a2f      	ldr	r2, [pc, #188]	; (80118c0 <TIM_Base_SetConfig+0x114>)
 8011802:	4293      	cmp	r3, r2
 8011804:	d01f      	beq.n	8011846 <TIM_Base_SetConfig+0x9a>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801180c:	d01b      	beq.n	8011846 <TIM_Base_SetConfig+0x9a>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	4a2c      	ldr	r2, [pc, #176]	; (80118c4 <TIM_Base_SetConfig+0x118>)
 8011812:	4293      	cmp	r3, r2
 8011814:	d017      	beq.n	8011846 <TIM_Base_SetConfig+0x9a>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	4a2b      	ldr	r2, [pc, #172]	; (80118c8 <TIM_Base_SetConfig+0x11c>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d013      	beq.n	8011846 <TIM_Base_SetConfig+0x9a>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	4a2a      	ldr	r2, [pc, #168]	; (80118cc <TIM_Base_SetConfig+0x120>)
 8011822:	4293      	cmp	r3, r2
 8011824:	d00f      	beq.n	8011846 <TIM_Base_SetConfig+0x9a>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4a29      	ldr	r2, [pc, #164]	; (80118d0 <TIM_Base_SetConfig+0x124>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d00b      	beq.n	8011846 <TIM_Base_SetConfig+0x9a>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	4a28      	ldr	r2, [pc, #160]	; (80118d4 <TIM_Base_SetConfig+0x128>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d007      	beq.n	8011846 <TIM_Base_SetConfig+0x9a>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4a27      	ldr	r2, [pc, #156]	; (80118d8 <TIM_Base_SetConfig+0x12c>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d003      	beq.n	8011846 <TIM_Base_SetConfig+0x9a>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4a26      	ldr	r2, [pc, #152]	; (80118dc <TIM_Base_SetConfig+0x130>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d108      	bne.n	8011858 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801184c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	4313      	orrs	r3, r2
 8011856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	695b      	ldr	r3, [r3, #20]
 8011862:	4313      	orrs	r3, r2
 8011864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	68fa      	ldr	r2, [r7, #12]
 801186a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	689a      	ldr	r2, [r3, #8]
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	681a      	ldr	r2, [r3, #0]
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	4a10      	ldr	r2, [pc, #64]	; (80118c0 <TIM_Base_SetConfig+0x114>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d00f      	beq.n	80118a4 <TIM_Base_SetConfig+0xf8>
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	4a12      	ldr	r2, [pc, #72]	; (80118d0 <TIM_Base_SetConfig+0x124>)
 8011888:	4293      	cmp	r3, r2
 801188a:	d00b      	beq.n	80118a4 <TIM_Base_SetConfig+0xf8>
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	4a11      	ldr	r2, [pc, #68]	; (80118d4 <TIM_Base_SetConfig+0x128>)
 8011890:	4293      	cmp	r3, r2
 8011892:	d007      	beq.n	80118a4 <TIM_Base_SetConfig+0xf8>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	4a10      	ldr	r2, [pc, #64]	; (80118d8 <TIM_Base_SetConfig+0x12c>)
 8011898:	4293      	cmp	r3, r2
 801189a:	d003      	beq.n	80118a4 <TIM_Base_SetConfig+0xf8>
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	4a0f      	ldr	r2, [pc, #60]	; (80118dc <TIM_Base_SetConfig+0x130>)
 80118a0:	4293      	cmp	r3, r2
 80118a2:	d103      	bne.n	80118ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	691a      	ldr	r2, [r3, #16]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2201      	movs	r2, #1
 80118b0:	615a      	str	r2, [r3, #20]
}
 80118b2:	bf00      	nop
 80118b4:	3714      	adds	r7, #20
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop
 80118c0:	40010000 	.word	0x40010000
 80118c4:	40000400 	.word	0x40000400
 80118c8:	40000800 	.word	0x40000800
 80118cc:	40000c00 	.word	0x40000c00
 80118d0:	40010400 	.word	0x40010400
 80118d4:	40014000 	.word	0x40014000
 80118d8:	40014400 	.word	0x40014400
 80118dc:	40014800 	.word	0x40014800

080118e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80118e0:	b480      	push	{r7}
 80118e2:	b087      	sub	sp, #28
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6a1b      	ldr	r3, [r3, #32]
 80118ee:	f023 0201 	bic.w	r2, r3, #1
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6a1b      	ldr	r3, [r3, #32]
 80118fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	699b      	ldr	r3, [r3, #24]
 8011906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011908:	68fa      	ldr	r2, [r7, #12]
 801190a:	4b37      	ldr	r3, [pc, #220]	; (80119e8 <TIM_OC1_SetConfig+0x108>)
 801190c:	4013      	ands	r3, r2
 801190e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f023 0303 	bic.w	r3, r3, #3
 8011916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	68fa      	ldr	r2, [r7, #12]
 801191e:	4313      	orrs	r3, r2
 8011920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	f023 0302 	bic.w	r3, r3, #2
 8011928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	689b      	ldr	r3, [r3, #8]
 801192e:	697a      	ldr	r2, [r7, #20]
 8011930:	4313      	orrs	r3, r2
 8011932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	4a2d      	ldr	r2, [pc, #180]	; (80119ec <TIM_OC1_SetConfig+0x10c>)
 8011938:	4293      	cmp	r3, r2
 801193a:	d00f      	beq.n	801195c <TIM_OC1_SetConfig+0x7c>
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	4a2c      	ldr	r2, [pc, #176]	; (80119f0 <TIM_OC1_SetConfig+0x110>)
 8011940:	4293      	cmp	r3, r2
 8011942:	d00b      	beq.n	801195c <TIM_OC1_SetConfig+0x7c>
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	4a2b      	ldr	r2, [pc, #172]	; (80119f4 <TIM_OC1_SetConfig+0x114>)
 8011948:	4293      	cmp	r3, r2
 801194a:	d007      	beq.n	801195c <TIM_OC1_SetConfig+0x7c>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	4a2a      	ldr	r2, [pc, #168]	; (80119f8 <TIM_OC1_SetConfig+0x118>)
 8011950:	4293      	cmp	r3, r2
 8011952:	d003      	beq.n	801195c <TIM_OC1_SetConfig+0x7c>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	4a29      	ldr	r2, [pc, #164]	; (80119fc <TIM_OC1_SetConfig+0x11c>)
 8011958:	4293      	cmp	r3, r2
 801195a:	d10c      	bne.n	8011976 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	f023 0308 	bic.w	r3, r3, #8
 8011962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	697a      	ldr	r2, [r7, #20]
 801196a:	4313      	orrs	r3, r2
 801196c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	f023 0304 	bic.w	r3, r3, #4
 8011974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	4a1c      	ldr	r2, [pc, #112]	; (80119ec <TIM_OC1_SetConfig+0x10c>)
 801197a:	4293      	cmp	r3, r2
 801197c:	d00f      	beq.n	801199e <TIM_OC1_SetConfig+0xbe>
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	4a1b      	ldr	r2, [pc, #108]	; (80119f0 <TIM_OC1_SetConfig+0x110>)
 8011982:	4293      	cmp	r3, r2
 8011984:	d00b      	beq.n	801199e <TIM_OC1_SetConfig+0xbe>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	4a1a      	ldr	r2, [pc, #104]	; (80119f4 <TIM_OC1_SetConfig+0x114>)
 801198a:	4293      	cmp	r3, r2
 801198c:	d007      	beq.n	801199e <TIM_OC1_SetConfig+0xbe>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	4a19      	ldr	r2, [pc, #100]	; (80119f8 <TIM_OC1_SetConfig+0x118>)
 8011992:	4293      	cmp	r3, r2
 8011994:	d003      	beq.n	801199e <TIM_OC1_SetConfig+0xbe>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	4a18      	ldr	r2, [pc, #96]	; (80119fc <TIM_OC1_SetConfig+0x11c>)
 801199a:	4293      	cmp	r3, r2
 801199c:	d111      	bne.n	80119c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80119a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80119ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	695b      	ldr	r3, [r3, #20]
 80119b2:	693a      	ldr	r2, [r7, #16]
 80119b4:	4313      	orrs	r3, r2
 80119b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	699b      	ldr	r3, [r3, #24]
 80119bc:	693a      	ldr	r2, [r7, #16]
 80119be:	4313      	orrs	r3, r2
 80119c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	693a      	ldr	r2, [r7, #16]
 80119c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	68fa      	ldr	r2, [r7, #12]
 80119cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	685a      	ldr	r2, [r3, #4]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	697a      	ldr	r2, [r7, #20]
 80119da:	621a      	str	r2, [r3, #32]
}
 80119dc:	bf00      	nop
 80119de:	371c      	adds	r7, #28
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr
 80119e8:	fffeff8f 	.word	0xfffeff8f
 80119ec:	40010000 	.word	0x40010000
 80119f0:	40010400 	.word	0x40010400
 80119f4:	40014000 	.word	0x40014000
 80119f8:	40014400 	.word	0x40014400
 80119fc:	40014800 	.word	0x40014800

08011a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011a00:	b480      	push	{r7}
 8011a02:	b087      	sub	sp, #28
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6a1b      	ldr	r3, [r3, #32]
 8011a0e:	f023 0210 	bic.w	r2, r3, #16
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6a1b      	ldr	r3, [r3, #32]
 8011a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	699b      	ldr	r3, [r3, #24]
 8011a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011a28:	68fa      	ldr	r2, [r7, #12]
 8011a2a:	4b34      	ldr	r3, [pc, #208]	; (8011afc <TIM_OC2_SetConfig+0xfc>)
 8011a2c:	4013      	ands	r3, r2
 8011a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	021b      	lsls	r3, r3, #8
 8011a3e:	68fa      	ldr	r2, [r7, #12]
 8011a40:	4313      	orrs	r3, r2
 8011a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	f023 0320 	bic.w	r3, r3, #32
 8011a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	689b      	ldr	r3, [r3, #8]
 8011a50:	011b      	lsls	r3, r3, #4
 8011a52:	697a      	ldr	r2, [r7, #20]
 8011a54:	4313      	orrs	r3, r2
 8011a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	4a29      	ldr	r2, [pc, #164]	; (8011b00 <TIM_OC2_SetConfig+0x100>)
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	d003      	beq.n	8011a68 <TIM_OC2_SetConfig+0x68>
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	4a28      	ldr	r2, [pc, #160]	; (8011b04 <TIM_OC2_SetConfig+0x104>)
 8011a64:	4293      	cmp	r3, r2
 8011a66:	d10d      	bne.n	8011a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	011b      	lsls	r3, r3, #4
 8011a76:	697a      	ldr	r2, [r7, #20]
 8011a78:	4313      	orrs	r3, r2
 8011a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	4a1e      	ldr	r2, [pc, #120]	; (8011b00 <TIM_OC2_SetConfig+0x100>)
 8011a88:	4293      	cmp	r3, r2
 8011a8a:	d00f      	beq.n	8011aac <TIM_OC2_SetConfig+0xac>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	4a1d      	ldr	r2, [pc, #116]	; (8011b04 <TIM_OC2_SetConfig+0x104>)
 8011a90:	4293      	cmp	r3, r2
 8011a92:	d00b      	beq.n	8011aac <TIM_OC2_SetConfig+0xac>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	4a1c      	ldr	r2, [pc, #112]	; (8011b08 <TIM_OC2_SetConfig+0x108>)
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	d007      	beq.n	8011aac <TIM_OC2_SetConfig+0xac>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	4a1b      	ldr	r2, [pc, #108]	; (8011b0c <TIM_OC2_SetConfig+0x10c>)
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	d003      	beq.n	8011aac <TIM_OC2_SetConfig+0xac>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	4a1a      	ldr	r2, [pc, #104]	; (8011b10 <TIM_OC2_SetConfig+0x110>)
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	d113      	bne.n	8011ad4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	695b      	ldr	r3, [r3, #20]
 8011ac0:	009b      	lsls	r3, r3, #2
 8011ac2:	693a      	ldr	r2, [r7, #16]
 8011ac4:	4313      	orrs	r3, r2
 8011ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	699b      	ldr	r3, [r3, #24]
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	693a      	ldr	r2, [r7, #16]
 8011ad0:	4313      	orrs	r3, r2
 8011ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	693a      	ldr	r2, [r7, #16]
 8011ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	68fa      	ldr	r2, [r7, #12]
 8011ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	685a      	ldr	r2, [r3, #4]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	697a      	ldr	r2, [r7, #20]
 8011aec:	621a      	str	r2, [r3, #32]
}
 8011aee:	bf00      	nop
 8011af0:	371c      	adds	r7, #28
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	feff8fff 	.word	0xfeff8fff
 8011b00:	40010000 	.word	0x40010000
 8011b04:	40010400 	.word	0x40010400
 8011b08:	40014000 	.word	0x40014000
 8011b0c:	40014400 	.word	0x40014400
 8011b10:	40014800 	.word	0x40014800

08011b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b087      	sub	sp, #28
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6a1b      	ldr	r3, [r3, #32]
 8011b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6a1b      	ldr	r3, [r3, #32]
 8011b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	69db      	ldr	r3, [r3, #28]
 8011b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011b3c:	68fa      	ldr	r2, [r7, #12]
 8011b3e:	4b33      	ldr	r3, [pc, #204]	; (8011c0c <TIM_OC3_SetConfig+0xf8>)
 8011b40:	4013      	ands	r3, r2
 8011b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	f023 0303 	bic.w	r3, r3, #3
 8011b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	68fa      	ldr	r2, [r7, #12]
 8011b52:	4313      	orrs	r3, r2
 8011b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	689b      	ldr	r3, [r3, #8]
 8011b62:	021b      	lsls	r3, r3, #8
 8011b64:	697a      	ldr	r2, [r7, #20]
 8011b66:	4313      	orrs	r3, r2
 8011b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	4a28      	ldr	r2, [pc, #160]	; (8011c10 <TIM_OC3_SetConfig+0xfc>)
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	d003      	beq.n	8011b7a <TIM_OC3_SetConfig+0x66>
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	4a27      	ldr	r2, [pc, #156]	; (8011c14 <TIM_OC3_SetConfig+0x100>)
 8011b76:	4293      	cmp	r3, r2
 8011b78:	d10d      	bne.n	8011b96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	68db      	ldr	r3, [r3, #12]
 8011b86:	021b      	lsls	r3, r3, #8
 8011b88:	697a      	ldr	r2, [r7, #20]
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	4a1d      	ldr	r2, [pc, #116]	; (8011c10 <TIM_OC3_SetConfig+0xfc>)
 8011b9a:	4293      	cmp	r3, r2
 8011b9c:	d00f      	beq.n	8011bbe <TIM_OC3_SetConfig+0xaa>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	4a1c      	ldr	r2, [pc, #112]	; (8011c14 <TIM_OC3_SetConfig+0x100>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d00b      	beq.n	8011bbe <TIM_OC3_SetConfig+0xaa>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	4a1b      	ldr	r2, [pc, #108]	; (8011c18 <TIM_OC3_SetConfig+0x104>)
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d007      	beq.n	8011bbe <TIM_OC3_SetConfig+0xaa>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	4a1a      	ldr	r2, [pc, #104]	; (8011c1c <TIM_OC3_SetConfig+0x108>)
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	d003      	beq.n	8011bbe <TIM_OC3_SetConfig+0xaa>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	4a19      	ldr	r2, [pc, #100]	; (8011c20 <TIM_OC3_SetConfig+0x10c>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d113      	bne.n	8011be6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	695b      	ldr	r3, [r3, #20]
 8011bd2:	011b      	lsls	r3, r3, #4
 8011bd4:	693a      	ldr	r2, [r7, #16]
 8011bd6:	4313      	orrs	r3, r2
 8011bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	699b      	ldr	r3, [r3, #24]
 8011bde:	011b      	lsls	r3, r3, #4
 8011be0:	693a      	ldr	r2, [r7, #16]
 8011be2:	4313      	orrs	r3, r2
 8011be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	693a      	ldr	r2, [r7, #16]
 8011bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	68fa      	ldr	r2, [r7, #12]
 8011bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	685a      	ldr	r2, [r3, #4]
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	697a      	ldr	r2, [r7, #20]
 8011bfe:	621a      	str	r2, [r3, #32]
}
 8011c00:	bf00      	nop
 8011c02:	371c      	adds	r7, #28
 8011c04:	46bd      	mov	sp, r7
 8011c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0a:	4770      	bx	lr
 8011c0c:	fffeff8f 	.word	0xfffeff8f
 8011c10:	40010000 	.word	0x40010000
 8011c14:	40010400 	.word	0x40010400
 8011c18:	40014000 	.word	0x40014000
 8011c1c:	40014400 	.word	0x40014400
 8011c20:	40014800 	.word	0x40014800

08011c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b087      	sub	sp, #28
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6a1b      	ldr	r3, [r3, #32]
 8011c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6a1b      	ldr	r3, [r3, #32]
 8011c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	685b      	ldr	r3, [r3, #4]
 8011c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	69db      	ldr	r3, [r3, #28]
 8011c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	4b24      	ldr	r3, [pc, #144]	; (8011ce0 <TIM_OC4_SetConfig+0xbc>)
 8011c50:	4013      	ands	r3, r2
 8011c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	021b      	lsls	r3, r3, #8
 8011c62:	68fa      	ldr	r2, [r7, #12]
 8011c64:	4313      	orrs	r3, r2
 8011c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	689b      	ldr	r3, [r3, #8]
 8011c74:	031b      	lsls	r3, r3, #12
 8011c76:	693a      	ldr	r2, [r7, #16]
 8011c78:	4313      	orrs	r3, r2
 8011c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	4a19      	ldr	r2, [pc, #100]	; (8011ce4 <TIM_OC4_SetConfig+0xc0>)
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d00f      	beq.n	8011ca4 <TIM_OC4_SetConfig+0x80>
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	4a18      	ldr	r2, [pc, #96]	; (8011ce8 <TIM_OC4_SetConfig+0xc4>)
 8011c88:	4293      	cmp	r3, r2
 8011c8a:	d00b      	beq.n	8011ca4 <TIM_OC4_SetConfig+0x80>
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	4a17      	ldr	r2, [pc, #92]	; (8011cec <TIM_OC4_SetConfig+0xc8>)
 8011c90:	4293      	cmp	r3, r2
 8011c92:	d007      	beq.n	8011ca4 <TIM_OC4_SetConfig+0x80>
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	4a16      	ldr	r2, [pc, #88]	; (8011cf0 <TIM_OC4_SetConfig+0xcc>)
 8011c98:	4293      	cmp	r3, r2
 8011c9a:	d003      	beq.n	8011ca4 <TIM_OC4_SetConfig+0x80>
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	4a15      	ldr	r2, [pc, #84]	; (8011cf4 <TIM_OC4_SetConfig+0xd0>)
 8011ca0:	4293      	cmp	r3, r2
 8011ca2:	d109      	bne.n	8011cb8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	695b      	ldr	r3, [r3, #20]
 8011cb0:	019b      	lsls	r3, r3, #6
 8011cb2:	697a      	ldr	r2, [r7, #20]
 8011cb4:	4313      	orrs	r3, r2
 8011cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	697a      	ldr	r2, [r7, #20]
 8011cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	68fa      	ldr	r2, [r7, #12]
 8011cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	685a      	ldr	r2, [r3, #4]
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	693a      	ldr	r2, [r7, #16]
 8011cd0:	621a      	str	r2, [r3, #32]
}
 8011cd2:	bf00      	nop
 8011cd4:	371c      	adds	r7, #28
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr
 8011cde:	bf00      	nop
 8011ce0:	feff8fff 	.word	0xfeff8fff
 8011ce4:	40010000 	.word	0x40010000
 8011ce8:	40010400 	.word	0x40010400
 8011cec:	40014000 	.word	0x40014000
 8011cf0:	40014400 	.word	0x40014400
 8011cf4:	40014800 	.word	0x40014800

08011cf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b087      	sub	sp, #28
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6a1b      	ldr	r3, [r3, #32]
 8011d06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6a1b      	ldr	r3, [r3, #32]
 8011d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011d20:	68fa      	ldr	r2, [r7, #12]
 8011d22:	4b21      	ldr	r3, [pc, #132]	; (8011da8 <TIM_OC5_SetConfig+0xb0>)
 8011d24:	4013      	ands	r3, r2
 8011d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	68fa      	ldr	r2, [r7, #12]
 8011d2e:	4313      	orrs	r3, r2
 8011d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011d38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	689b      	ldr	r3, [r3, #8]
 8011d3e:	041b      	lsls	r3, r3, #16
 8011d40:	693a      	ldr	r2, [r7, #16]
 8011d42:	4313      	orrs	r3, r2
 8011d44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	4a18      	ldr	r2, [pc, #96]	; (8011dac <TIM_OC5_SetConfig+0xb4>)
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	d00f      	beq.n	8011d6e <TIM_OC5_SetConfig+0x76>
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	4a17      	ldr	r2, [pc, #92]	; (8011db0 <TIM_OC5_SetConfig+0xb8>)
 8011d52:	4293      	cmp	r3, r2
 8011d54:	d00b      	beq.n	8011d6e <TIM_OC5_SetConfig+0x76>
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	4a16      	ldr	r2, [pc, #88]	; (8011db4 <TIM_OC5_SetConfig+0xbc>)
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	d007      	beq.n	8011d6e <TIM_OC5_SetConfig+0x76>
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	4a15      	ldr	r2, [pc, #84]	; (8011db8 <TIM_OC5_SetConfig+0xc0>)
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d003      	beq.n	8011d6e <TIM_OC5_SetConfig+0x76>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	4a14      	ldr	r2, [pc, #80]	; (8011dbc <TIM_OC5_SetConfig+0xc4>)
 8011d6a:	4293      	cmp	r3, r2
 8011d6c:	d109      	bne.n	8011d82 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011d74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	695b      	ldr	r3, [r3, #20]
 8011d7a:	021b      	lsls	r3, r3, #8
 8011d7c:	697a      	ldr	r2, [r7, #20]
 8011d7e:	4313      	orrs	r3, r2
 8011d80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	697a      	ldr	r2, [r7, #20]
 8011d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	68fa      	ldr	r2, [r7, #12]
 8011d8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	685a      	ldr	r2, [r3, #4]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	693a      	ldr	r2, [r7, #16]
 8011d9a:	621a      	str	r2, [r3, #32]
}
 8011d9c:	bf00      	nop
 8011d9e:	371c      	adds	r7, #28
 8011da0:	46bd      	mov	sp, r7
 8011da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da6:	4770      	bx	lr
 8011da8:	fffeff8f 	.word	0xfffeff8f
 8011dac:	40010000 	.word	0x40010000
 8011db0:	40010400 	.word	0x40010400
 8011db4:	40014000 	.word	0x40014000
 8011db8:	40014400 	.word	0x40014400
 8011dbc:	40014800 	.word	0x40014800

08011dc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b087      	sub	sp, #28
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6a1b      	ldr	r3, [r3, #32]
 8011dce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6a1b      	ldr	r3, [r3, #32]
 8011dda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011de8:	68fa      	ldr	r2, [r7, #12]
 8011dea:	4b22      	ldr	r3, [pc, #136]	; (8011e74 <TIM_OC6_SetConfig+0xb4>)
 8011dec:	4013      	ands	r3, r2
 8011dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	021b      	lsls	r3, r3, #8
 8011df6:	68fa      	ldr	r2, [r7, #12]
 8011df8:	4313      	orrs	r3, r2
 8011dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	689b      	ldr	r3, [r3, #8]
 8011e08:	051b      	lsls	r3, r3, #20
 8011e0a:	693a      	ldr	r2, [r7, #16]
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	4a19      	ldr	r2, [pc, #100]	; (8011e78 <TIM_OC6_SetConfig+0xb8>)
 8011e14:	4293      	cmp	r3, r2
 8011e16:	d00f      	beq.n	8011e38 <TIM_OC6_SetConfig+0x78>
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	4a18      	ldr	r2, [pc, #96]	; (8011e7c <TIM_OC6_SetConfig+0xbc>)
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d00b      	beq.n	8011e38 <TIM_OC6_SetConfig+0x78>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	4a17      	ldr	r2, [pc, #92]	; (8011e80 <TIM_OC6_SetConfig+0xc0>)
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d007      	beq.n	8011e38 <TIM_OC6_SetConfig+0x78>
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	4a16      	ldr	r2, [pc, #88]	; (8011e84 <TIM_OC6_SetConfig+0xc4>)
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d003      	beq.n	8011e38 <TIM_OC6_SetConfig+0x78>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	4a15      	ldr	r2, [pc, #84]	; (8011e88 <TIM_OC6_SetConfig+0xc8>)
 8011e34:	4293      	cmp	r3, r2
 8011e36:	d109      	bne.n	8011e4c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	695b      	ldr	r3, [r3, #20]
 8011e44:	029b      	lsls	r3, r3, #10
 8011e46:	697a      	ldr	r2, [r7, #20]
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	697a      	ldr	r2, [r7, #20]
 8011e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	68fa      	ldr	r2, [r7, #12]
 8011e56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	685a      	ldr	r2, [r3, #4]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	693a      	ldr	r2, [r7, #16]
 8011e64:	621a      	str	r2, [r3, #32]
}
 8011e66:	bf00      	nop
 8011e68:	371c      	adds	r7, #28
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr
 8011e72:	bf00      	nop
 8011e74:	feff8fff 	.word	0xfeff8fff
 8011e78:	40010000 	.word	0x40010000
 8011e7c:	40010400 	.word	0x40010400
 8011e80:	40014000 	.word	0x40014000
 8011e84:	40014400 	.word	0x40014400
 8011e88:	40014800 	.word	0x40014800

08011e8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b086      	sub	sp, #24
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011e96:	2300      	movs	r3, #0
 8011e98:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	689b      	ldr	r3, [r3, #8]
 8011ea0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011ea2:	693a      	ldr	r2, [r7, #16]
 8011ea4:	4b65      	ldr	r3, [pc, #404]	; (801203c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8011ea6:	4013      	ands	r3, r2
 8011ea8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	693a      	ldr	r2, [r7, #16]
 8011eb0:	4313      	orrs	r3, r2
 8011eb2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8011eb4:	693a      	ldr	r2, [r7, #16]
 8011eb6:	4b62      	ldr	r3, [pc, #392]	; (8012040 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8011eb8:	4013      	ands	r3, r2
 8011eba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	693a      	ldr	r2, [r7, #16]
 8011ec2:	4313      	orrs	r3, r2
 8011ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	693a      	ldr	r2, [r7, #16]
 8011ecc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	685b      	ldr	r3, [r3, #4]
 8011ed2:	4a5c      	ldr	r2, [pc, #368]	; (8012044 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	f000 80ab 	beq.w	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011eda:	4a5a      	ldr	r2, [pc, #360]	; (8012044 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8011edc:	4293      	cmp	r3, r2
 8011ede:	f200 80a4 	bhi.w	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011ee6:	f000 80a3 	beq.w	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011eee:	f200 809c 	bhi.w	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011ef2:	4a55      	ldr	r2, [pc, #340]	; (8012048 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	f000 809b 	beq.w	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011efa:	4a53      	ldr	r2, [pc, #332]	; (8012048 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011efc:	4293      	cmp	r3, r2
 8011efe:	f200 8094 	bhi.w	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f02:	4a52      	ldr	r2, [pc, #328]	; (801204c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011f04:	4293      	cmp	r3, r2
 8011f06:	f000 8093 	beq.w	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f0a:	4a50      	ldr	r2, [pc, #320]	; (801204c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011f0c:	4293      	cmp	r3, r2
 8011f0e:	f200 808c 	bhi.w	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f12:	4a4f      	ldr	r2, [pc, #316]	; (8012050 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011f14:	4293      	cmp	r3, r2
 8011f16:	f000 808b 	beq.w	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f1a:	4a4d      	ldr	r2, [pc, #308]	; (8012050 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011f1c:	4293      	cmp	r3, r2
 8011f1e:	f200 8084 	bhi.w	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f22:	4a4c      	ldr	r2, [pc, #304]	; (8012054 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011f24:	4293      	cmp	r3, r2
 8011f26:	f000 8083 	beq.w	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f2a:	4a4a      	ldr	r2, [pc, #296]	; (8012054 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	d87c      	bhi.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f30:	4a49      	ldr	r2, [pc, #292]	; (8012058 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d07c      	beq.n	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f36:	4a48      	ldr	r2, [pc, #288]	; (8012058 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011f38:	4293      	cmp	r3, r2
 8011f3a:	d876      	bhi.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f3c:	4a47      	ldr	r2, [pc, #284]	; (801205c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	d076      	beq.n	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f42:	4a46      	ldr	r2, [pc, #280]	; (801205c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011f44:	4293      	cmp	r3, r2
 8011f46:	d870      	bhi.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011f4c:	d070      	beq.n	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f4e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011f52:	d86a      	bhi.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f58:	d06a      	beq.n	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f5e:	d864      	bhi.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f60:	2b70      	cmp	r3, #112	; 0x70
 8011f62:	d01a      	beq.n	8011f9a <TIM_SlaveTimer_SetConfig+0x10e>
 8011f64:	2b70      	cmp	r3, #112	; 0x70
 8011f66:	d860      	bhi.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f68:	2b60      	cmp	r3, #96	; 0x60
 8011f6a:	d054      	beq.n	8012016 <TIM_SlaveTimer_SetConfig+0x18a>
 8011f6c:	2b60      	cmp	r3, #96	; 0x60
 8011f6e:	d85c      	bhi.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f70:	2b50      	cmp	r3, #80	; 0x50
 8011f72:	d046      	beq.n	8012002 <TIM_SlaveTimer_SetConfig+0x176>
 8011f74:	2b50      	cmp	r3, #80	; 0x50
 8011f76:	d858      	bhi.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f78:	2b40      	cmp	r3, #64	; 0x40
 8011f7a:	d019      	beq.n	8011fb0 <TIM_SlaveTimer_SetConfig+0x124>
 8011f7c:	2b40      	cmp	r3, #64	; 0x40
 8011f7e:	d854      	bhi.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f80:	2b30      	cmp	r3, #48	; 0x30
 8011f82:	d055      	beq.n	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f84:	2b30      	cmp	r3, #48	; 0x30
 8011f86:	d850      	bhi.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f88:	2b20      	cmp	r3, #32
 8011f8a:	d051      	beq.n	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f8c:	2b20      	cmp	r3, #32
 8011f8e:	d84c      	bhi.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d04d      	beq.n	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f94:	2b10      	cmp	r3, #16
 8011f96:	d04b      	beq.n	8012030 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f98:	e047      	b.n	801202a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8011faa:	f000 fa01 	bl	80123b0 <TIM_ETR_SetConfig>
      break;
 8011fae:	e040      	b.n	8012032 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	2b05      	cmp	r3, #5
 8011fb6:	d101      	bne.n	8011fbc <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	e03b      	b.n	8012034 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	6a1b      	ldr	r3, [r3, #32]
 8011fc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	6a1a      	ldr	r2, [r3, #32]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f022 0201 	bic.w	r2, r2, #1
 8011fd2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	699b      	ldr	r3, [r3, #24]
 8011fda:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011fe2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	691b      	ldr	r3, [r3, #16]
 8011fe8:	011b      	lsls	r3, r3, #4
 8011fea:	68ba      	ldr	r2, [r7, #8]
 8011fec:	4313      	orrs	r3, r2
 8011fee:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	68ba      	ldr	r2, [r7, #8]
 8011ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	68fa      	ldr	r2, [r7, #12]
 8011ffe:	621a      	str	r2, [r3, #32]
      break;
 8012000:	e017      	b.n	8012032 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801200e:	461a      	mov	r2, r3
 8012010:	f000 f89a 	bl	8012148 <TIM_TI1_ConfigInputStage>
      break;
 8012014:	e00d      	b.n	8012032 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012022:	461a      	mov	r2, r3
 8012024:	f000 f8fc 	bl	8012220 <TIM_TI2_ConfigInputStage>
      break;
 8012028:	e003      	b.n	8012032 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 801202a:	2301      	movs	r3, #1
 801202c:	75fb      	strb	r3, [r7, #23]
      break;
 801202e:	e000      	b.n	8012032 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8012030:	bf00      	nop
  }

  return status;
 8012032:	7dfb      	ldrb	r3, [r7, #23]
}
 8012034:	4618      	mov	r0, r3
 8012036:	3718      	adds	r7, #24
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}
 801203c:	ffcfff8f 	.word	0xffcfff8f
 8012040:	fffefff8 	.word	0xfffefff8
 8012044:	00200010 	.word	0x00200010
 8012048:	00100070 	.word	0x00100070
 801204c:	00100060 	.word	0x00100060
 8012050:	00100050 	.word	0x00100050
 8012054:	00100040 	.word	0x00100040
 8012058:	00100030 	.word	0x00100030
 801205c:	00100020 	.word	0x00100020

08012060 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8012060:	b480      	push	{r7}
 8012062:	b087      	sub	sp, #28
 8012064:	af00      	add	r7, sp, #0
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	60b9      	str	r1, [r7, #8]
 801206a:	607a      	str	r2, [r7, #4]
 801206c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	6a1b      	ldr	r3, [r3, #32]
 8012072:	f023 0201 	bic.w	r2, r3, #1
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	699b      	ldr	r3, [r3, #24]
 801207e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	6a1b      	ldr	r3, [r3, #32]
 8012084:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	4a28      	ldr	r2, [pc, #160]	; (801212c <TIM_TI1_SetConfig+0xcc>)
 801208a:	4293      	cmp	r3, r2
 801208c:	d01b      	beq.n	80120c6 <TIM_TI1_SetConfig+0x66>
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012094:	d017      	beq.n	80120c6 <TIM_TI1_SetConfig+0x66>
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	4a25      	ldr	r2, [pc, #148]	; (8012130 <TIM_TI1_SetConfig+0xd0>)
 801209a:	4293      	cmp	r3, r2
 801209c:	d013      	beq.n	80120c6 <TIM_TI1_SetConfig+0x66>
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	4a24      	ldr	r2, [pc, #144]	; (8012134 <TIM_TI1_SetConfig+0xd4>)
 80120a2:	4293      	cmp	r3, r2
 80120a4:	d00f      	beq.n	80120c6 <TIM_TI1_SetConfig+0x66>
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	4a23      	ldr	r2, [pc, #140]	; (8012138 <TIM_TI1_SetConfig+0xd8>)
 80120aa:	4293      	cmp	r3, r2
 80120ac:	d00b      	beq.n	80120c6 <TIM_TI1_SetConfig+0x66>
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	4a22      	ldr	r2, [pc, #136]	; (801213c <TIM_TI1_SetConfig+0xdc>)
 80120b2:	4293      	cmp	r3, r2
 80120b4:	d007      	beq.n	80120c6 <TIM_TI1_SetConfig+0x66>
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	4a21      	ldr	r2, [pc, #132]	; (8012140 <TIM_TI1_SetConfig+0xe0>)
 80120ba:	4293      	cmp	r3, r2
 80120bc:	d003      	beq.n	80120c6 <TIM_TI1_SetConfig+0x66>
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	4a20      	ldr	r2, [pc, #128]	; (8012144 <TIM_TI1_SetConfig+0xe4>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d101      	bne.n	80120ca <TIM_TI1_SetConfig+0x6a>
 80120c6:	2301      	movs	r3, #1
 80120c8:	e000      	b.n	80120cc <TIM_TI1_SetConfig+0x6c>
 80120ca:	2300      	movs	r3, #0
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d008      	beq.n	80120e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	f023 0303 	bic.w	r3, r3, #3
 80120d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80120d8:	697a      	ldr	r2, [r7, #20]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	4313      	orrs	r3, r2
 80120de:	617b      	str	r3, [r7, #20]
 80120e0:	e003      	b.n	80120ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	f043 0301 	orr.w	r3, r3, #1
 80120e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80120f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	011b      	lsls	r3, r3, #4
 80120f6:	b2db      	uxtb	r3, r3
 80120f8:	697a      	ldr	r2, [r7, #20]
 80120fa:	4313      	orrs	r3, r2
 80120fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	f023 030a 	bic.w	r3, r3, #10
 8012104:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	f003 030a 	and.w	r3, r3, #10
 801210c:	693a      	ldr	r2, [r7, #16]
 801210e:	4313      	orrs	r3, r2
 8012110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	697a      	ldr	r2, [r7, #20]
 8012116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	693a      	ldr	r2, [r7, #16]
 801211c:	621a      	str	r2, [r3, #32]
}
 801211e:	bf00      	nop
 8012120:	371c      	adds	r7, #28
 8012122:	46bd      	mov	sp, r7
 8012124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012128:	4770      	bx	lr
 801212a:	bf00      	nop
 801212c:	40010000 	.word	0x40010000
 8012130:	40000400 	.word	0x40000400
 8012134:	40000800 	.word	0x40000800
 8012138:	40000c00 	.word	0x40000c00
 801213c:	40010400 	.word	0x40010400
 8012140:	40001800 	.word	0x40001800
 8012144:	40014000 	.word	0x40014000

08012148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012148:	b480      	push	{r7}
 801214a:	b087      	sub	sp, #28
 801214c:	af00      	add	r7, sp, #0
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	6a1b      	ldr	r3, [r3, #32]
 8012158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	6a1b      	ldr	r3, [r3, #32]
 801215e:	f023 0201 	bic.w	r2, r3, #1
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	699b      	ldr	r3, [r3, #24]
 801216a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	011b      	lsls	r3, r3, #4
 8012178:	693a      	ldr	r2, [r7, #16]
 801217a:	4313      	orrs	r3, r2
 801217c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	f023 030a 	bic.w	r3, r3, #10
 8012184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012186:	697a      	ldr	r2, [r7, #20]
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	4313      	orrs	r3, r2
 801218c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	693a      	ldr	r2, [r7, #16]
 8012192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	697a      	ldr	r2, [r7, #20]
 8012198:	621a      	str	r2, [r3, #32]
}
 801219a:	bf00      	nop
 801219c:	371c      	adds	r7, #28
 801219e:	46bd      	mov	sp, r7
 80121a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a4:	4770      	bx	lr

080121a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80121a6:	b480      	push	{r7}
 80121a8:	b087      	sub	sp, #28
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	60f8      	str	r0, [r7, #12]
 80121ae:	60b9      	str	r1, [r7, #8]
 80121b0:	607a      	str	r2, [r7, #4]
 80121b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	6a1b      	ldr	r3, [r3, #32]
 80121b8:	f023 0210 	bic.w	r2, r3, #16
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	699b      	ldr	r3, [r3, #24]
 80121c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	6a1b      	ldr	r3, [r3, #32]
 80121ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80121d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	021b      	lsls	r3, r3, #8
 80121d8:	697a      	ldr	r2, [r7, #20]
 80121da:	4313      	orrs	r3, r2
 80121dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80121de:	697b      	ldr	r3, [r7, #20]
 80121e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80121e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	031b      	lsls	r3, r3, #12
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	697a      	ldr	r2, [r7, #20]
 80121ee:	4313      	orrs	r3, r2
 80121f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80121f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	011b      	lsls	r3, r3, #4
 80121fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012202:	693a      	ldr	r2, [r7, #16]
 8012204:	4313      	orrs	r3, r2
 8012206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	697a      	ldr	r2, [r7, #20]
 801220c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	693a      	ldr	r2, [r7, #16]
 8012212:	621a      	str	r2, [r3, #32]
}
 8012214:	bf00      	nop
 8012216:	371c      	adds	r7, #28
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012220:	b480      	push	{r7}
 8012222:	b087      	sub	sp, #28
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	6a1b      	ldr	r3, [r3, #32]
 8012230:	f023 0210 	bic.w	r2, r3, #16
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	699b      	ldr	r3, [r3, #24]
 801223c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	6a1b      	ldr	r3, [r3, #32]
 8012242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801224a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	031b      	lsls	r3, r3, #12
 8012250:	697a      	ldr	r2, [r7, #20]
 8012252:	4313      	orrs	r3, r2
 8012254:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801225c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	011b      	lsls	r3, r3, #4
 8012262:	693a      	ldr	r2, [r7, #16]
 8012264:	4313      	orrs	r3, r2
 8012266:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	697a      	ldr	r2, [r7, #20]
 801226c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	693a      	ldr	r2, [r7, #16]
 8012272:	621a      	str	r2, [r3, #32]
}
 8012274:	bf00      	nop
 8012276:	371c      	adds	r7, #28
 8012278:	46bd      	mov	sp, r7
 801227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227e:	4770      	bx	lr

08012280 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012280:	b480      	push	{r7}
 8012282:	b087      	sub	sp, #28
 8012284:	af00      	add	r7, sp, #0
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	607a      	str	r2, [r7, #4]
 801228c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	6a1b      	ldr	r3, [r3, #32]
 8012292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	69db      	ldr	r3, [r3, #28]
 801229e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	6a1b      	ldr	r3, [r3, #32]
 80122a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	f023 0303 	bic.w	r3, r3, #3
 80122ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80122ae:	697a      	ldr	r2, [r7, #20]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	4313      	orrs	r3, r2
 80122b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80122bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	011b      	lsls	r3, r3, #4
 80122c2:	b2db      	uxtb	r3, r3
 80122c4:	697a      	ldr	r2, [r7, #20]
 80122c6:	4313      	orrs	r3, r2
 80122c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80122d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	021b      	lsls	r3, r3, #8
 80122d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80122da:	693a      	ldr	r2, [r7, #16]
 80122dc:	4313      	orrs	r3, r2
 80122de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	697a      	ldr	r2, [r7, #20]
 80122e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	693a      	ldr	r2, [r7, #16]
 80122ea:	621a      	str	r2, [r3, #32]
}
 80122ec:	bf00      	nop
 80122ee:	371c      	adds	r7, #28
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr

080122f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b087      	sub	sp, #28
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	607a      	str	r2, [r7, #4]
 8012304:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	6a1b      	ldr	r3, [r3, #32]
 801230a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	69db      	ldr	r3, [r3, #28]
 8012316:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	6a1b      	ldr	r3, [r3, #32]
 801231c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012324:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	021b      	lsls	r3, r3, #8
 801232a:	697a      	ldr	r2, [r7, #20]
 801232c:	4313      	orrs	r3, r2
 801232e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012336:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	031b      	lsls	r3, r3, #12
 801233c:	b29b      	uxth	r3, r3
 801233e:	697a      	ldr	r2, [r7, #20]
 8012340:	4313      	orrs	r3, r2
 8012342:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801234a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	031b      	lsls	r3, r3, #12
 8012350:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8012354:	693a      	ldr	r2, [r7, #16]
 8012356:	4313      	orrs	r3, r2
 8012358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	697a      	ldr	r2, [r7, #20]
 801235e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	693a      	ldr	r2, [r7, #16]
 8012364:	621a      	str	r2, [r3, #32]
}
 8012366:	bf00      	nop
 8012368:	371c      	adds	r7, #28
 801236a:	46bd      	mov	sp, r7
 801236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012370:	4770      	bx	lr
	...

08012374 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012374:	b480      	push	{r7}
 8012376:	b085      	sub	sp, #20
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	689b      	ldr	r3, [r3, #8]
 8012382:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012384:	68fa      	ldr	r2, [r7, #12]
 8012386:	4b09      	ldr	r3, [pc, #36]	; (80123ac <TIM_ITRx_SetConfig+0x38>)
 8012388:	4013      	ands	r3, r2
 801238a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801238c:	683a      	ldr	r2, [r7, #0]
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	4313      	orrs	r3, r2
 8012392:	f043 0307 	orr.w	r3, r3, #7
 8012396:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	68fa      	ldr	r2, [r7, #12]
 801239c:	609a      	str	r2, [r3, #8]
}
 801239e:	bf00      	nop
 80123a0:	3714      	adds	r7, #20
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop
 80123ac:	ffcfff8f 	.word	0xffcfff8f

080123b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80123b0:	b480      	push	{r7}
 80123b2:	b087      	sub	sp, #28
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	607a      	str	r2, [r7, #4]
 80123bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	689b      	ldr	r3, [r3, #8]
 80123c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80123ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	021a      	lsls	r2, r3, #8
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	431a      	orrs	r2, r3
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	4313      	orrs	r3, r2
 80123d8:	697a      	ldr	r2, [r7, #20]
 80123da:	4313      	orrs	r3, r2
 80123dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	697a      	ldr	r2, [r7, #20]
 80123e2:	609a      	str	r2, [r3, #8]
}
 80123e4:	bf00      	nop
 80123e6:	371c      	adds	r7, #28
 80123e8:	46bd      	mov	sp, r7
 80123ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ee:	4770      	bx	lr

080123f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80123f0:	b480      	push	{r7}
 80123f2:	b087      	sub	sp, #28
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	60f8      	str	r0, [r7, #12]
 80123f8:	60b9      	str	r1, [r7, #8]
 80123fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	f003 031f 	and.w	r3, r3, #31
 8012402:	2201      	movs	r2, #1
 8012404:	fa02 f303 	lsl.w	r3, r2, r3
 8012408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	6a1a      	ldr	r2, [r3, #32]
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	43db      	mvns	r3, r3
 8012412:	401a      	ands	r2, r3
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6a1a      	ldr	r2, [r3, #32]
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	f003 031f 	and.w	r3, r3, #31
 8012422:	6879      	ldr	r1, [r7, #4]
 8012424:	fa01 f303 	lsl.w	r3, r1, r3
 8012428:	431a      	orrs	r2, r3
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	621a      	str	r2, [r3, #32]
}
 801242e:	bf00      	nop
 8012430:	371c      	adds	r7, #28
 8012432:	46bd      	mov	sp, r7
 8012434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012438:	4770      	bx	lr
	...

0801243c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801243c:	b480      	push	{r7}
 801243e:	b085      	sub	sp, #20
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801244c:	2b01      	cmp	r3, #1
 801244e:	d101      	bne.n	8012454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012450:	2302      	movs	r3, #2
 8012452:	e06d      	b.n	8012530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2201      	movs	r2, #1
 8012458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2202      	movs	r2, #2
 8012460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	685b      	ldr	r3, [r3, #4]
 801246a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	689b      	ldr	r3, [r3, #8]
 8012472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	4a30      	ldr	r2, [pc, #192]	; (801253c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801247a:	4293      	cmp	r3, r2
 801247c:	d004      	beq.n	8012488 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	4a2f      	ldr	r2, [pc, #188]	; (8012540 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012484:	4293      	cmp	r3, r2
 8012486:	d108      	bne.n	801249a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801248e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	68fa      	ldr	r2, [r7, #12]
 8012496:	4313      	orrs	r3, r2
 8012498:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80124a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	68fa      	ldr	r2, [r7, #12]
 80124a8:	4313      	orrs	r3, r2
 80124aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	68fa      	ldr	r2, [r7, #12]
 80124b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	4a20      	ldr	r2, [pc, #128]	; (801253c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80124ba:	4293      	cmp	r3, r2
 80124bc:	d022      	beq.n	8012504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124c6:	d01d      	beq.n	8012504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	4a1d      	ldr	r2, [pc, #116]	; (8012544 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d018      	beq.n	8012504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4a1c      	ldr	r2, [pc, #112]	; (8012548 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80124d8:	4293      	cmp	r3, r2
 80124da:	d013      	beq.n	8012504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	4a1a      	ldr	r2, [pc, #104]	; (801254c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80124e2:	4293      	cmp	r3, r2
 80124e4:	d00e      	beq.n	8012504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	4a15      	ldr	r2, [pc, #84]	; (8012540 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d009      	beq.n	8012504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	4a16      	ldr	r2, [pc, #88]	; (8012550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80124f6:	4293      	cmp	r3, r2
 80124f8:	d004      	beq.n	8012504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	4a15      	ldr	r2, [pc, #84]	; (8012554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012500:	4293      	cmp	r3, r2
 8012502:	d10c      	bne.n	801251e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801250a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	689b      	ldr	r3, [r3, #8]
 8012510:	68ba      	ldr	r2, [r7, #8]
 8012512:	4313      	orrs	r3, r2
 8012514:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	68ba      	ldr	r2, [r7, #8]
 801251c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2201      	movs	r2, #1
 8012522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2200      	movs	r2, #0
 801252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801252e:	2300      	movs	r3, #0
}
 8012530:	4618      	mov	r0, r3
 8012532:	3714      	adds	r7, #20
 8012534:	46bd      	mov	sp, r7
 8012536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253a:	4770      	bx	lr
 801253c:	40010000 	.word	0x40010000
 8012540:	40010400 	.word	0x40010400
 8012544:	40000400 	.word	0x40000400
 8012548:	40000800 	.word	0x40000800
 801254c:	40000c00 	.word	0x40000c00
 8012550:	40001800 	.word	0x40001800
 8012554:	40014000 	.word	0x40014000

08012558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012558:	b480      	push	{r7}
 801255a:	b083      	sub	sp, #12
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012560:	bf00      	nop
 8012562:	370c      	adds	r7, #12
 8012564:	46bd      	mov	sp, r7
 8012566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256a:	4770      	bx	lr

0801256c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801256c:	b480      	push	{r7}
 801256e:	b083      	sub	sp, #12
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012574:	bf00      	nop
 8012576:	370c      	adds	r7, #12
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr

08012580 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012588:	bf00      	nop
 801258a:	370c      	adds	r7, #12
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr

08012594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d101      	bne.n	80125a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80125a2:	2301      	movs	r3, #1
 80125a4:	e042      	b.n	801262c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d106      	bne.n	80125be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2200      	movs	r2, #0
 80125b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f7f3 fdff 	bl	80061bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2224      	movs	r2, #36	; 0x24
 80125c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	681a      	ldr	r2, [r3, #0]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f022 0201 	bic.w	r2, r2, #1
 80125d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 fd54 	bl	8013084 <UART_SetConfig>
 80125dc:	4603      	mov	r3, r0
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d101      	bne.n	80125e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80125e2:	2301      	movs	r3, #1
 80125e4:	e022      	b.n	801262c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d002      	beq.n	80125f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f001 fab0 	bl	8013b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	685a      	ldr	r2, [r3, #4]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	689a      	ldr	r2, [r3, #8]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	681a      	ldr	r2, [r3, #0]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	f042 0201 	orr.w	r2, r2, #1
 8012622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f001 fb37 	bl	8013c98 <UART_CheckIdleState>
 801262a:	4603      	mov	r3, r0
}
 801262c:	4618      	mov	r0, r3
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b08a      	sub	sp, #40	; 0x28
 8012638:	af02      	add	r7, sp, #8
 801263a:	60f8      	str	r0, [r7, #12]
 801263c:	60b9      	str	r1, [r7, #8]
 801263e:	603b      	str	r3, [r7, #0]
 8012640:	4613      	mov	r3, r2
 8012642:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801264a:	2b20      	cmp	r3, #32
 801264c:	d17b      	bne.n	8012746 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d002      	beq.n	801265a <HAL_UART_Transmit+0x26>
 8012654:	88fb      	ldrh	r3, [r7, #6]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d101      	bne.n	801265e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801265a:	2301      	movs	r3, #1
 801265c:	e074      	b.n	8012748 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	2200      	movs	r2, #0
 8012662:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	2221      	movs	r2, #33	; 0x21
 801266a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801266e:	f7f4 fe5d 	bl	800732c <HAL_GetTick>
 8012672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	88fa      	ldrh	r2, [r7, #6]
 8012678:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	88fa      	ldrh	r2, [r7, #6]
 8012680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	689b      	ldr	r3, [r3, #8]
 8012688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801268c:	d108      	bne.n	80126a0 <HAL_UART_Transmit+0x6c>
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	691b      	ldr	r3, [r3, #16]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d104      	bne.n	80126a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012696:	2300      	movs	r3, #0
 8012698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	61bb      	str	r3, [r7, #24]
 801269e:	e003      	b.n	80126a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80126a4:	2300      	movs	r3, #0
 80126a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80126a8:	e030      	b.n	801270c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	9300      	str	r3, [sp, #0]
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	2200      	movs	r2, #0
 80126b2:	2180      	movs	r1, #128	; 0x80
 80126b4:	68f8      	ldr	r0, [r7, #12]
 80126b6:	f001 fb99 	bl	8013dec <UART_WaitOnFlagUntilTimeout>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d005      	beq.n	80126cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2220      	movs	r2, #32
 80126c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80126c8:	2303      	movs	r3, #3
 80126ca:	e03d      	b.n	8012748 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d10b      	bne.n	80126ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80126d2:	69bb      	ldr	r3, [r7, #24]
 80126d4:	881b      	ldrh	r3, [r3, #0]
 80126d6:	461a      	mov	r2, r3
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80126e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80126e2:	69bb      	ldr	r3, [r7, #24]
 80126e4:	3302      	adds	r3, #2
 80126e6:	61bb      	str	r3, [r7, #24]
 80126e8:	e007      	b.n	80126fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	781a      	ldrb	r2, [r3, #0]
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	3301      	adds	r3, #1
 80126f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012700:	b29b      	uxth	r3, r3
 8012702:	3b01      	subs	r3, #1
 8012704:	b29a      	uxth	r2, r3
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012712:	b29b      	uxth	r3, r3
 8012714:	2b00      	cmp	r3, #0
 8012716:	d1c8      	bne.n	80126aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	9300      	str	r3, [sp, #0]
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	2200      	movs	r2, #0
 8012720:	2140      	movs	r1, #64	; 0x40
 8012722:	68f8      	ldr	r0, [r7, #12]
 8012724:	f001 fb62 	bl	8013dec <UART_WaitOnFlagUntilTimeout>
 8012728:	4603      	mov	r3, r0
 801272a:	2b00      	cmp	r3, #0
 801272c:	d005      	beq.n	801273a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2220      	movs	r2, #32
 8012732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8012736:	2303      	movs	r3, #3
 8012738:	e006      	b.n	8012748 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	2220      	movs	r2, #32
 801273e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8012742:	2300      	movs	r3, #0
 8012744:	e000      	b.n	8012748 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8012746:	2302      	movs	r3, #2
  }
}
 8012748:	4618      	mov	r0, r3
 801274a:	3720      	adds	r7, #32
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b08a      	sub	sp, #40	; 0x28
 8012754:	af00      	add	r7, sp, #0
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	4613      	mov	r3, r2
 801275c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012764:	2b20      	cmp	r3, #32
 8012766:	d167      	bne.n	8012838 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d002      	beq.n	8012774 <HAL_UART_Transmit_DMA+0x24>
 801276e:	88fb      	ldrh	r3, [r7, #6]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d101      	bne.n	8012778 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8012774:	2301      	movs	r3, #1
 8012776:	e060      	b.n	801283a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	68ba      	ldr	r2, [r7, #8]
 801277c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	88fa      	ldrh	r2, [r7, #6]
 8012782:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	88fa      	ldrh	r2, [r7, #6]
 801278a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2200      	movs	r2, #0
 8012792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	2221      	movs	r2, #33	; 0x21
 801279a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d028      	beq.n	80127f8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127aa:	4a26      	ldr	r2, [pc, #152]	; (8012844 <HAL_UART_Transmit_DMA+0xf4>)
 80127ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127b2:	4a25      	ldr	r2, [pc, #148]	; (8012848 <HAL_UART_Transmit_DMA+0xf8>)
 80127b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127ba:	4a24      	ldr	r2, [pc, #144]	; (801284c <HAL_UART_Transmit_DMA+0xfc>)
 80127bc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127c2:	2200      	movs	r2, #0
 80127c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127ce:	4619      	mov	r1, r3
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	3328      	adds	r3, #40	; 0x28
 80127d6:	461a      	mov	r2, r3
 80127d8:	88fb      	ldrh	r3, [r7, #6]
 80127da:	f7f6 ffcf 	bl	800977c <HAL_DMA_Start_IT>
 80127de:	4603      	mov	r3, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d009      	beq.n	80127f8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2210      	movs	r2, #16
 80127e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	2220      	movs	r2, #32
 80127f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80127f4:	2301      	movs	r3, #1
 80127f6:	e020      	b.n	801283a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	2240      	movs	r2, #64	; 0x40
 80127fe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	3308      	adds	r3, #8
 8012806:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	e853 3f00 	ldrex	r3, [r3]
 801280e:	613b      	str	r3, [r7, #16]
   return(result);
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012816:	627b      	str	r3, [r7, #36]	; 0x24
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	3308      	adds	r3, #8
 801281e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012820:	623a      	str	r2, [r7, #32]
 8012822:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012824:	69f9      	ldr	r1, [r7, #28]
 8012826:	6a3a      	ldr	r2, [r7, #32]
 8012828:	e841 2300 	strex	r3, r2, [r1]
 801282c:	61bb      	str	r3, [r7, #24]
   return(result);
 801282e:	69bb      	ldr	r3, [r7, #24]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d1e5      	bne.n	8012800 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8012834:	2300      	movs	r3, #0
 8012836:	e000      	b.n	801283a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8012838:	2302      	movs	r3, #2
  }
}
 801283a:	4618      	mov	r0, r3
 801283c:	3728      	adds	r7, #40	; 0x28
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	08014159 	.word	0x08014159
 8012848:	080141ef 	.word	0x080141ef
 801284c:	08014371 	.word	0x08014371

08012850 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b08a      	sub	sp, #40	; 0x28
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	60b9      	str	r1, [r7, #8]
 801285a:	4613      	mov	r3, r2
 801285c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012864:	2b20      	cmp	r3, #32
 8012866:	d137      	bne.n	80128d8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d002      	beq.n	8012874 <HAL_UART_Receive_DMA+0x24>
 801286e:	88fb      	ldrh	r3, [r7, #6]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d101      	bne.n	8012878 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8012874:	2301      	movs	r3, #1
 8012876:	e030      	b.n	80128da <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	2200      	movs	r2, #0
 801287c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	4a18      	ldr	r2, [pc, #96]	; (80128e4 <HAL_UART_Receive_DMA+0x94>)
 8012884:	4293      	cmp	r3, r2
 8012886:	d01f      	beq.n	80128c8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012892:	2b00      	cmp	r3, #0
 8012894:	d018      	beq.n	80128c8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	e853 3f00 	ldrex	r3, [r3]
 80128a2:	613b      	str	r3, [r7, #16]
   return(result);
 80128a4:	693b      	ldr	r3, [r7, #16]
 80128a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80128aa:	627b      	str	r3, [r7, #36]	; 0x24
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	461a      	mov	r2, r3
 80128b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b4:	623b      	str	r3, [r7, #32]
 80128b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128b8:	69f9      	ldr	r1, [r7, #28]
 80128ba:	6a3a      	ldr	r2, [r7, #32]
 80128bc:	e841 2300 	strex	r3, r2, [r1]
 80128c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d1e6      	bne.n	8012896 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80128c8:	88fb      	ldrh	r3, [r7, #6]
 80128ca:	461a      	mov	r2, r3
 80128cc:	68b9      	ldr	r1, [r7, #8]
 80128ce:	68f8      	ldr	r0, [r7, #12]
 80128d0:	f001 faf4 	bl	8013ebc <UART_Start_Receive_DMA>
 80128d4:	4603      	mov	r3, r0
 80128d6:	e000      	b.n	80128da <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80128d8:	2302      	movs	r3, #2
  }
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3728      	adds	r7, #40	; 0x28
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}
 80128e2:	bf00      	nop
 80128e4:	58000c00 	.word	0x58000c00

080128e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b0ba      	sub	sp, #232	; 0xe8
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	69db      	ldr	r3, [r3, #28]
 80128f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	689b      	ldr	r3, [r3, #8]
 801290a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801290e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8012912:	f640 030f 	movw	r3, #2063	; 0x80f
 8012916:	4013      	ands	r3, r2
 8012918:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801291c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012920:	2b00      	cmp	r3, #0
 8012922:	d11b      	bne.n	801295c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012928:	f003 0320 	and.w	r3, r3, #32
 801292c:	2b00      	cmp	r3, #0
 801292e:	d015      	beq.n	801295c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012934:	f003 0320 	and.w	r3, r3, #32
 8012938:	2b00      	cmp	r3, #0
 801293a:	d105      	bne.n	8012948 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801293c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012944:	2b00      	cmp	r3, #0
 8012946:	d009      	beq.n	801295c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801294c:	2b00      	cmp	r3, #0
 801294e:	f000 8377 	beq.w	8013040 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	4798      	blx	r3
      }
      return;
 801295a:	e371      	b.n	8013040 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801295c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012960:	2b00      	cmp	r3, #0
 8012962:	f000 8123 	beq.w	8012bac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012966:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801296a:	4b8d      	ldr	r3, [pc, #564]	; (8012ba0 <HAL_UART_IRQHandler+0x2b8>)
 801296c:	4013      	ands	r3, r2
 801296e:	2b00      	cmp	r3, #0
 8012970:	d106      	bne.n	8012980 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012972:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012976:	4b8b      	ldr	r3, [pc, #556]	; (8012ba4 <HAL_UART_IRQHandler+0x2bc>)
 8012978:	4013      	ands	r3, r2
 801297a:	2b00      	cmp	r3, #0
 801297c:	f000 8116 	beq.w	8012bac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012984:	f003 0301 	and.w	r3, r3, #1
 8012988:	2b00      	cmp	r3, #0
 801298a:	d011      	beq.n	80129b0 <HAL_UART_IRQHandler+0xc8>
 801298c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012994:	2b00      	cmp	r3, #0
 8012996:	d00b      	beq.n	80129b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2201      	movs	r2, #1
 801299e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129a6:	f043 0201 	orr.w	r2, r3, #1
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80129b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80129b4:	f003 0302 	and.w	r3, r3, #2
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d011      	beq.n	80129e0 <HAL_UART_IRQHandler+0xf8>
 80129bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80129c0:	f003 0301 	and.w	r3, r3, #1
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d00b      	beq.n	80129e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	2202      	movs	r2, #2
 80129ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129d6:	f043 0204 	orr.w	r2, r3, #4
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80129e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80129e4:	f003 0304 	and.w	r3, r3, #4
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d011      	beq.n	8012a10 <HAL_UART_IRQHandler+0x128>
 80129ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80129f0:	f003 0301 	and.w	r3, r3, #1
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d00b      	beq.n	8012a10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	2204      	movs	r2, #4
 80129fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a06:	f043 0202 	orr.w	r2, r3, #2
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a14:	f003 0308 	and.w	r3, r3, #8
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d017      	beq.n	8012a4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a20:	f003 0320 	and.w	r3, r3, #32
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d105      	bne.n	8012a34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012a28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012a2c:	4b5c      	ldr	r3, [pc, #368]	; (8012ba0 <HAL_UART_IRQHandler+0x2b8>)
 8012a2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d00b      	beq.n	8012a4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2208      	movs	r2, #8
 8012a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a42:	f043 0208 	orr.w	r2, r3, #8
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d012      	beq.n	8012a7e <HAL_UART_IRQHandler+0x196>
 8012a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d00c      	beq.n	8012a7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a74:	f043 0220 	orr.w	r2, r3, #32
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	f000 82dd 	beq.w	8013044 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a8e:	f003 0320 	and.w	r3, r3, #32
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d013      	beq.n	8012abe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a9a:	f003 0320 	and.w	r3, r3, #32
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d105      	bne.n	8012aae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d007      	beq.n	8012abe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d003      	beq.n	8012abe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ac4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	689b      	ldr	r3, [r3, #8]
 8012ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ad2:	2b40      	cmp	r3, #64	; 0x40
 8012ad4:	d005      	beq.n	8012ae2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012ada:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d054      	beq.n	8012b8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f001 fad2 	bl	801408c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	689b      	ldr	r3, [r3, #8]
 8012aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012af2:	2b40      	cmp	r3, #64	; 0x40
 8012af4:	d146      	bne.n	8012b84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	3308      	adds	r3, #8
 8012afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012b04:	e853 3f00 	ldrex	r3, [r3]
 8012b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	3308      	adds	r3, #8
 8012b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012b22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012b32:	e841 2300 	strex	r3, r2, [r1]
 8012b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d1d9      	bne.n	8012af6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d017      	beq.n	8012b7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b52:	4a15      	ldr	r2, [pc, #84]	; (8012ba8 <HAL_UART_IRQHandler+0x2c0>)
 8012b54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7f7 fb95 	bl	800a28c <HAL_DMA_Abort_IT>
 8012b62:	4603      	mov	r3, r0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d019      	beq.n	8012b9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b70:	687a      	ldr	r2, [r7, #4]
 8012b72:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012b76:	4610      	mov	r0, r2
 8012b78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b7a:	e00f      	b.n	8012b9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7f1 fb93 	bl	80042a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b82:	e00b      	b.n	8012b9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7f1 fb8f 	bl	80042a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b8a:	e007      	b.n	8012b9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7f1 fb8b 	bl	80042a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2200      	movs	r2, #0
 8012b96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8012b9a:	e253      	b.n	8013044 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b9c:	bf00      	nop
    return;
 8012b9e:	e251      	b.n	8013044 <HAL_UART_IRQHandler+0x75c>
 8012ba0:	10000001 	.word	0x10000001
 8012ba4:	04000120 	.word	0x04000120
 8012ba8:	080143f1 	.word	0x080143f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bb0:	2b01      	cmp	r3, #1
 8012bb2:	f040 81e7 	bne.w	8012f84 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012bba:	f003 0310 	and.w	r3, r3, #16
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	f000 81e0 	beq.w	8012f84 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012bc8:	f003 0310 	and.w	r3, r3, #16
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	f000 81d9 	beq.w	8012f84 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	2210      	movs	r2, #16
 8012bd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	689b      	ldr	r3, [r3, #8]
 8012be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012be4:	2b40      	cmp	r3, #64	; 0x40
 8012be6:	f040 8151 	bne.w	8012e8c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4a96      	ldr	r2, [pc, #600]	; (8012e4c <HAL_UART_IRQHandler+0x564>)
 8012bf4:	4293      	cmp	r3, r2
 8012bf6:	d068      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4a93      	ldr	r2, [pc, #588]	; (8012e50 <HAL_UART_IRQHandler+0x568>)
 8012c02:	4293      	cmp	r3, r2
 8012c04:	d061      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	4a91      	ldr	r2, [pc, #580]	; (8012e54 <HAL_UART_IRQHandler+0x56c>)
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d05a      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	4a8e      	ldr	r2, [pc, #568]	; (8012e58 <HAL_UART_IRQHandler+0x570>)
 8012c1e:	4293      	cmp	r3, r2
 8012c20:	d053      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	4a8c      	ldr	r2, [pc, #560]	; (8012e5c <HAL_UART_IRQHandler+0x574>)
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d04c      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a89      	ldr	r2, [pc, #548]	; (8012e60 <HAL_UART_IRQHandler+0x578>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d045      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	4a87      	ldr	r2, [pc, #540]	; (8012e64 <HAL_UART_IRQHandler+0x57c>)
 8012c48:	4293      	cmp	r3, r2
 8012c4a:	d03e      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	4a84      	ldr	r2, [pc, #528]	; (8012e68 <HAL_UART_IRQHandler+0x580>)
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d037      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	4a82      	ldr	r2, [pc, #520]	; (8012e6c <HAL_UART_IRQHandler+0x584>)
 8012c64:	4293      	cmp	r3, r2
 8012c66:	d030      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	4a7f      	ldr	r2, [pc, #508]	; (8012e70 <HAL_UART_IRQHandler+0x588>)
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d029      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4a7d      	ldr	r2, [pc, #500]	; (8012e74 <HAL_UART_IRQHandler+0x58c>)
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d022      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	4a7a      	ldr	r2, [pc, #488]	; (8012e78 <HAL_UART_IRQHandler+0x590>)
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	d01b      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	4a78      	ldr	r2, [pc, #480]	; (8012e7c <HAL_UART_IRQHandler+0x594>)
 8012c9c:	4293      	cmp	r3, r2
 8012c9e:	d014      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	4a75      	ldr	r2, [pc, #468]	; (8012e80 <HAL_UART_IRQHandler+0x598>)
 8012caa:	4293      	cmp	r3, r2
 8012cac:	d00d      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	4a73      	ldr	r2, [pc, #460]	; (8012e84 <HAL_UART_IRQHandler+0x59c>)
 8012cb8:	4293      	cmp	r3, r2
 8012cba:	d006      	beq.n	8012cca <HAL_UART_IRQHandler+0x3e2>
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	4a70      	ldr	r2, [pc, #448]	; (8012e88 <HAL_UART_IRQHandler+0x5a0>)
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	d106      	bne.n	8012cd8 <HAL_UART_IRQHandler+0x3f0>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	b29b      	uxth	r3, r3
 8012cd6:	e005      	b.n	8012ce4 <HAL_UART_IRQHandler+0x3fc>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	b29b      	uxth	r3, r3
 8012ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	f000 81ab 	beq.w	8013048 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012cf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	f080 81a3 	bcs.w	8013048 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012d08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d12:	69db      	ldr	r3, [r3, #28]
 8012d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d18:	f000 8087 	beq.w	8012e2a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012d28:	e853 3f00 	ldrex	r3, [r3]
 8012d2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	461a      	mov	r2, r3
 8012d42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012d46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012d4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012d52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012d56:	e841 2300 	strex	r3, r2, [r1]
 8012d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d1da      	bne.n	8012d1c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	3308      	adds	r3, #8
 8012d6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d70:	e853 3f00 	ldrex	r3, [r3]
 8012d74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d78:	f023 0301 	bic.w	r3, r3, #1
 8012d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	3308      	adds	r3, #8
 8012d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012d8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012d8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012d92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d96:	e841 2300 	strex	r3, r2, [r1]
 8012d9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d1e1      	bne.n	8012d66 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	3308      	adds	r3, #8
 8012da8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012dac:	e853 3f00 	ldrex	r3, [r3]
 8012db0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	3308      	adds	r3, #8
 8012dc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012dc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012dc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012dcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012dce:	e841 2300 	strex	r3, r2, [r1]
 8012dd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d1e3      	bne.n	8012da2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2220      	movs	r2, #32
 8012dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2200      	movs	r2, #0
 8012de6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012df0:	e853 3f00 	ldrex	r3, [r3]
 8012df4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012df8:	f023 0310 	bic.w	r3, r3, #16
 8012dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	461a      	mov	r2, r3
 8012e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012e0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8012e0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012e12:	e841 2300 	strex	r3, r2, [r1]
 8012e16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d1e4      	bne.n	8012de8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7f6 ff13 	bl	8009c50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2202      	movs	r2, #2
 8012e2e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012e3c:	b29b      	uxth	r3, r3
 8012e3e:	1ad3      	subs	r3, r2, r3
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	4619      	mov	r1, r3
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f7f1 f931 	bl	80040ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012e4a:	e0fd      	b.n	8013048 <HAL_UART_IRQHandler+0x760>
 8012e4c:	40020010 	.word	0x40020010
 8012e50:	40020028 	.word	0x40020028
 8012e54:	40020040 	.word	0x40020040
 8012e58:	40020058 	.word	0x40020058
 8012e5c:	40020070 	.word	0x40020070
 8012e60:	40020088 	.word	0x40020088
 8012e64:	400200a0 	.word	0x400200a0
 8012e68:	400200b8 	.word	0x400200b8
 8012e6c:	40020410 	.word	0x40020410
 8012e70:	40020428 	.word	0x40020428
 8012e74:	40020440 	.word	0x40020440
 8012e78:	40020458 	.word	0x40020458
 8012e7c:	40020470 	.word	0x40020470
 8012e80:	40020488 	.word	0x40020488
 8012e84:	400204a0 	.word	0x400204a0
 8012e88:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	1ad3      	subs	r3, r2, r3
 8012e9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	f000 80cf 	beq.w	801304c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8012eae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	f000 80ca 	beq.w	801304c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec0:	e853 3f00 	ldrex	r3, [r3]
 8012ec4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ec8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	461a      	mov	r2, r3
 8012ed6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012eda:	647b      	str	r3, [r7, #68]	; 0x44
 8012edc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ede:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012ee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ee2:	e841 2300 	strex	r3, r2, [r1]
 8012ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d1e4      	bne.n	8012eb8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	3308      	adds	r3, #8
 8012ef4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef8:	e853 3f00 	ldrex	r3, [r3]
 8012efc:	623b      	str	r3, [r7, #32]
   return(result);
 8012efe:	6a3a      	ldr	r2, [r7, #32]
 8012f00:	4b55      	ldr	r3, [pc, #340]	; (8013058 <HAL_UART_IRQHandler+0x770>)
 8012f02:	4013      	ands	r3, r2
 8012f04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	3308      	adds	r3, #8
 8012f0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012f12:	633a      	str	r2, [r7, #48]	; 0x30
 8012f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f1a:	e841 2300 	strex	r3, r2, [r1]
 8012f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d1e3      	bne.n	8012eee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2220      	movs	r2, #32
 8012f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2200      	movs	r2, #0
 8012f32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2200      	movs	r2, #0
 8012f38:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	e853 3f00 	ldrex	r3, [r3]
 8012f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	f023 0310 	bic.w	r3, r3, #16
 8012f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	461a      	mov	r2, r3
 8012f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012f5c:	61fb      	str	r3, [r7, #28]
 8012f5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f60:	69b9      	ldr	r1, [r7, #24]
 8012f62:	69fa      	ldr	r2, [r7, #28]
 8012f64:	e841 2300 	strex	r3, r2, [r1]
 8012f68:	617b      	str	r3, [r7, #20]
   return(result);
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d1e4      	bne.n	8012f3a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2202      	movs	r2, #2
 8012f74:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012f7a:	4619      	mov	r1, r3
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f7f1 f895 	bl	80040ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012f82:	e063      	b.n	801304c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d00e      	beq.n	8012fae <HAL_UART_IRQHandler+0x6c6>
 8012f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d008      	beq.n	8012fae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f001 fa63 	bl	8014472 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012fac:	e051      	b.n	8013052 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d014      	beq.n	8012fe4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d105      	bne.n	8012fd2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d008      	beq.n	8012fe4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d03a      	beq.n	8013050 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	4798      	blx	r3
    }
    return;
 8012fe2:	e035      	b.n	8013050 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d009      	beq.n	8013004 <HAL_UART_IRQHandler+0x71c>
 8012ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d003      	beq.n	8013004 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f001 fa0d 	bl	801441c <UART_EndTransmit_IT>
    return;
 8013002:	e026      	b.n	8013052 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801300c:	2b00      	cmp	r3, #0
 801300e:	d009      	beq.n	8013024 <HAL_UART_IRQHandler+0x73c>
 8013010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013014:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013018:	2b00      	cmp	r3, #0
 801301a:	d003      	beq.n	8013024 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f001 fa3c 	bl	801449a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013022:	e016      	b.n	8013052 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801302c:	2b00      	cmp	r3, #0
 801302e:	d010      	beq.n	8013052 <HAL_UART_IRQHandler+0x76a>
 8013030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013034:	2b00      	cmp	r3, #0
 8013036:	da0c      	bge.n	8013052 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013038:	6878      	ldr	r0, [r7, #4]
 801303a:	f001 fa24 	bl	8014486 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801303e:	e008      	b.n	8013052 <HAL_UART_IRQHandler+0x76a>
      return;
 8013040:	bf00      	nop
 8013042:	e006      	b.n	8013052 <HAL_UART_IRQHandler+0x76a>
    return;
 8013044:	bf00      	nop
 8013046:	e004      	b.n	8013052 <HAL_UART_IRQHandler+0x76a>
      return;
 8013048:	bf00      	nop
 801304a:	e002      	b.n	8013052 <HAL_UART_IRQHandler+0x76a>
      return;
 801304c:	bf00      	nop
 801304e:	e000      	b.n	8013052 <HAL_UART_IRQHandler+0x76a>
    return;
 8013050:	bf00      	nop
  }
}
 8013052:	37e8      	adds	r7, #232	; 0xe8
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	effffffe 	.word	0xeffffffe

0801305c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8013064:	bf00      	nop
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr

08013070 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013070:	b480      	push	{r7}
 8013072:	b083      	sub	sp, #12
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8013078:	bf00      	nop
 801307a:	370c      	adds	r7, #12
 801307c:	46bd      	mov	sp, r7
 801307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013082:	4770      	bx	lr

08013084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013088:	b092      	sub	sp, #72	; 0x48
 801308a:	af00      	add	r7, sp, #0
 801308c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801308e:	2300      	movs	r3, #0
 8013090:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	689a      	ldr	r2, [r3, #8]
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	691b      	ldr	r3, [r3, #16]
 801309c:	431a      	orrs	r2, r3
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	695b      	ldr	r3, [r3, #20]
 80130a2:	431a      	orrs	r2, r3
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	69db      	ldr	r3, [r3, #28]
 80130a8:	4313      	orrs	r3, r2
 80130aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	681a      	ldr	r2, [r3, #0]
 80130b2:	4bbe      	ldr	r3, [pc, #760]	; (80133ac <UART_SetConfig+0x328>)
 80130b4:	4013      	ands	r3, r2
 80130b6:	697a      	ldr	r2, [r7, #20]
 80130b8:	6812      	ldr	r2, [r2, #0]
 80130ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80130bc:	430b      	orrs	r3, r1
 80130be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	68da      	ldr	r2, [r3, #12]
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	430a      	orrs	r2, r1
 80130d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	699b      	ldr	r3, [r3, #24]
 80130da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	4ab3      	ldr	r2, [pc, #716]	; (80133b0 <UART_SetConfig+0x32c>)
 80130e2:	4293      	cmp	r3, r2
 80130e4:	d004      	beq.n	80130f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	6a1b      	ldr	r3, [r3, #32]
 80130ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80130ec:	4313      	orrs	r3, r2
 80130ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	689a      	ldr	r2, [r3, #8]
 80130f6:	4baf      	ldr	r3, [pc, #700]	; (80133b4 <UART_SetConfig+0x330>)
 80130f8:	4013      	ands	r3, r2
 80130fa:	697a      	ldr	r2, [r7, #20]
 80130fc:	6812      	ldr	r2, [r2, #0]
 80130fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013100:	430b      	orrs	r3, r1
 8013102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801310a:	f023 010f 	bic.w	r1, r3, #15
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	430a      	orrs	r2, r1
 8013118:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	4aa6      	ldr	r2, [pc, #664]	; (80133b8 <UART_SetConfig+0x334>)
 8013120:	4293      	cmp	r3, r2
 8013122:	d177      	bne.n	8013214 <UART_SetConfig+0x190>
 8013124:	4ba5      	ldr	r3, [pc, #660]	; (80133bc <UART_SetConfig+0x338>)
 8013126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013128:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801312c:	2b28      	cmp	r3, #40	; 0x28
 801312e:	d86d      	bhi.n	801320c <UART_SetConfig+0x188>
 8013130:	a201      	add	r2, pc, #4	; (adr r2, 8013138 <UART_SetConfig+0xb4>)
 8013132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013136:	bf00      	nop
 8013138:	080131dd 	.word	0x080131dd
 801313c:	0801320d 	.word	0x0801320d
 8013140:	0801320d 	.word	0x0801320d
 8013144:	0801320d 	.word	0x0801320d
 8013148:	0801320d 	.word	0x0801320d
 801314c:	0801320d 	.word	0x0801320d
 8013150:	0801320d 	.word	0x0801320d
 8013154:	0801320d 	.word	0x0801320d
 8013158:	080131e5 	.word	0x080131e5
 801315c:	0801320d 	.word	0x0801320d
 8013160:	0801320d 	.word	0x0801320d
 8013164:	0801320d 	.word	0x0801320d
 8013168:	0801320d 	.word	0x0801320d
 801316c:	0801320d 	.word	0x0801320d
 8013170:	0801320d 	.word	0x0801320d
 8013174:	0801320d 	.word	0x0801320d
 8013178:	080131ed 	.word	0x080131ed
 801317c:	0801320d 	.word	0x0801320d
 8013180:	0801320d 	.word	0x0801320d
 8013184:	0801320d 	.word	0x0801320d
 8013188:	0801320d 	.word	0x0801320d
 801318c:	0801320d 	.word	0x0801320d
 8013190:	0801320d 	.word	0x0801320d
 8013194:	0801320d 	.word	0x0801320d
 8013198:	080131f5 	.word	0x080131f5
 801319c:	0801320d 	.word	0x0801320d
 80131a0:	0801320d 	.word	0x0801320d
 80131a4:	0801320d 	.word	0x0801320d
 80131a8:	0801320d 	.word	0x0801320d
 80131ac:	0801320d 	.word	0x0801320d
 80131b0:	0801320d 	.word	0x0801320d
 80131b4:	0801320d 	.word	0x0801320d
 80131b8:	080131fd 	.word	0x080131fd
 80131bc:	0801320d 	.word	0x0801320d
 80131c0:	0801320d 	.word	0x0801320d
 80131c4:	0801320d 	.word	0x0801320d
 80131c8:	0801320d 	.word	0x0801320d
 80131cc:	0801320d 	.word	0x0801320d
 80131d0:	0801320d 	.word	0x0801320d
 80131d4:	0801320d 	.word	0x0801320d
 80131d8:	08013205 	.word	0x08013205
 80131dc:	2301      	movs	r3, #1
 80131de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131e2:	e222      	b.n	801362a <UART_SetConfig+0x5a6>
 80131e4:	2304      	movs	r3, #4
 80131e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ea:	e21e      	b.n	801362a <UART_SetConfig+0x5a6>
 80131ec:	2308      	movs	r3, #8
 80131ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131f2:	e21a      	b.n	801362a <UART_SetConfig+0x5a6>
 80131f4:	2310      	movs	r3, #16
 80131f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131fa:	e216      	b.n	801362a <UART_SetConfig+0x5a6>
 80131fc:	2320      	movs	r3, #32
 80131fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013202:	e212      	b.n	801362a <UART_SetConfig+0x5a6>
 8013204:	2340      	movs	r3, #64	; 0x40
 8013206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801320a:	e20e      	b.n	801362a <UART_SetConfig+0x5a6>
 801320c:	2380      	movs	r3, #128	; 0x80
 801320e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013212:	e20a      	b.n	801362a <UART_SetConfig+0x5a6>
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	4a69      	ldr	r2, [pc, #420]	; (80133c0 <UART_SetConfig+0x33c>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d130      	bne.n	8013280 <UART_SetConfig+0x1fc>
 801321e:	4b67      	ldr	r3, [pc, #412]	; (80133bc <UART_SetConfig+0x338>)
 8013220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013222:	f003 0307 	and.w	r3, r3, #7
 8013226:	2b05      	cmp	r3, #5
 8013228:	d826      	bhi.n	8013278 <UART_SetConfig+0x1f4>
 801322a:	a201      	add	r2, pc, #4	; (adr r2, 8013230 <UART_SetConfig+0x1ac>)
 801322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013230:	08013249 	.word	0x08013249
 8013234:	08013251 	.word	0x08013251
 8013238:	08013259 	.word	0x08013259
 801323c:	08013261 	.word	0x08013261
 8013240:	08013269 	.word	0x08013269
 8013244:	08013271 	.word	0x08013271
 8013248:	2300      	movs	r3, #0
 801324a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801324e:	e1ec      	b.n	801362a <UART_SetConfig+0x5a6>
 8013250:	2304      	movs	r3, #4
 8013252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013256:	e1e8      	b.n	801362a <UART_SetConfig+0x5a6>
 8013258:	2308      	movs	r3, #8
 801325a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801325e:	e1e4      	b.n	801362a <UART_SetConfig+0x5a6>
 8013260:	2310      	movs	r3, #16
 8013262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013266:	e1e0      	b.n	801362a <UART_SetConfig+0x5a6>
 8013268:	2320      	movs	r3, #32
 801326a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801326e:	e1dc      	b.n	801362a <UART_SetConfig+0x5a6>
 8013270:	2340      	movs	r3, #64	; 0x40
 8013272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013276:	e1d8      	b.n	801362a <UART_SetConfig+0x5a6>
 8013278:	2380      	movs	r3, #128	; 0x80
 801327a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801327e:	e1d4      	b.n	801362a <UART_SetConfig+0x5a6>
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	4a4f      	ldr	r2, [pc, #316]	; (80133c4 <UART_SetConfig+0x340>)
 8013286:	4293      	cmp	r3, r2
 8013288:	d130      	bne.n	80132ec <UART_SetConfig+0x268>
 801328a:	4b4c      	ldr	r3, [pc, #304]	; (80133bc <UART_SetConfig+0x338>)
 801328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801328e:	f003 0307 	and.w	r3, r3, #7
 8013292:	2b05      	cmp	r3, #5
 8013294:	d826      	bhi.n	80132e4 <UART_SetConfig+0x260>
 8013296:	a201      	add	r2, pc, #4	; (adr r2, 801329c <UART_SetConfig+0x218>)
 8013298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801329c:	080132b5 	.word	0x080132b5
 80132a0:	080132bd 	.word	0x080132bd
 80132a4:	080132c5 	.word	0x080132c5
 80132a8:	080132cd 	.word	0x080132cd
 80132ac:	080132d5 	.word	0x080132d5
 80132b0:	080132dd 	.word	0x080132dd
 80132b4:	2300      	movs	r3, #0
 80132b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ba:	e1b6      	b.n	801362a <UART_SetConfig+0x5a6>
 80132bc:	2304      	movs	r3, #4
 80132be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132c2:	e1b2      	b.n	801362a <UART_SetConfig+0x5a6>
 80132c4:	2308      	movs	r3, #8
 80132c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ca:	e1ae      	b.n	801362a <UART_SetConfig+0x5a6>
 80132cc:	2310      	movs	r3, #16
 80132ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132d2:	e1aa      	b.n	801362a <UART_SetConfig+0x5a6>
 80132d4:	2320      	movs	r3, #32
 80132d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132da:	e1a6      	b.n	801362a <UART_SetConfig+0x5a6>
 80132dc:	2340      	movs	r3, #64	; 0x40
 80132de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132e2:	e1a2      	b.n	801362a <UART_SetConfig+0x5a6>
 80132e4:	2380      	movs	r3, #128	; 0x80
 80132e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ea:	e19e      	b.n	801362a <UART_SetConfig+0x5a6>
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	4a35      	ldr	r2, [pc, #212]	; (80133c8 <UART_SetConfig+0x344>)
 80132f2:	4293      	cmp	r3, r2
 80132f4:	d130      	bne.n	8013358 <UART_SetConfig+0x2d4>
 80132f6:	4b31      	ldr	r3, [pc, #196]	; (80133bc <UART_SetConfig+0x338>)
 80132f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132fa:	f003 0307 	and.w	r3, r3, #7
 80132fe:	2b05      	cmp	r3, #5
 8013300:	d826      	bhi.n	8013350 <UART_SetConfig+0x2cc>
 8013302:	a201      	add	r2, pc, #4	; (adr r2, 8013308 <UART_SetConfig+0x284>)
 8013304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013308:	08013321 	.word	0x08013321
 801330c:	08013329 	.word	0x08013329
 8013310:	08013331 	.word	0x08013331
 8013314:	08013339 	.word	0x08013339
 8013318:	08013341 	.word	0x08013341
 801331c:	08013349 	.word	0x08013349
 8013320:	2300      	movs	r3, #0
 8013322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013326:	e180      	b.n	801362a <UART_SetConfig+0x5a6>
 8013328:	2304      	movs	r3, #4
 801332a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801332e:	e17c      	b.n	801362a <UART_SetConfig+0x5a6>
 8013330:	2308      	movs	r3, #8
 8013332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013336:	e178      	b.n	801362a <UART_SetConfig+0x5a6>
 8013338:	2310      	movs	r3, #16
 801333a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801333e:	e174      	b.n	801362a <UART_SetConfig+0x5a6>
 8013340:	2320      	movs	r3, #32
 8013342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013346:	e170      	b.n	801362a <UART_SetConfig+0x5a6>
 8013348:	2340      	movs	r3, #64	; 0x40
 801334a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801334e:	e16c      	b.n	801362a <UART_SetConfig+0x5a6>
 8013350:	2380      	movs	r3, #128	; 0x80
 8013352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013356:	e168      	b.n	801362a <UART_SetConfig+0x5a6>
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	4a1b      	ldr	r2, [pc, #108]	; (80133cc <UART_SetConfig+0x348>)
 801335e:	4293      	cmp	r3, r2
 8013360:	d142      	bne.n	80133e8 <UART_SetConfig+0x364>
 8013362:	4b16      	ldr	r3, [pc, #88]	; (80133bc <UART_SetConfig+0x338>)
 8013364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013366:	f003 0307 	and.w	r3, r3, #7
 801336a:	2b05      	cmp	r3, #5
 801336c:	d838      	bhi.n	80133e0 <UART_SetConfig+0x35c>
 801336e:	a201      	add	r2, pc, #4	; (adr r2, 8013374 <UART_SetConfig+0x2f0>)
 8013370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013374:	0801338d 	.word	0x0801338d
 8013378:	08013395 	.word	0x08013395
 801337c:	0801339d 	.word	0x0801339d
 8013380:	080133a5 	.word	0x080133a5
 8013384:	080133d1 	.word	0x080133d1
 8013388:	080133d9 	.word	0x080133d9
 801338c:	2300      	movs	r3, #0
 801338e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013392:	e14a      	b.n	801362a <UART_SetConfig+0x5a6>
 8013394:	2304      	movs	r3, #4
 8013396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801339a:	e146      	b.n	801362a <UART_SetConfig+0x5a6>
 801339c:	2308      	movs	r3, #8
 801339e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133a2:	e142      	b.n	801362a <UART_SetConfig+0x5a6>
 80133a4:	2310      	movs	r3, #16
 80133a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133aa:	e13e      	b.n	801362a <UART_SetConfig+0x5a6>
 80133ac:	cfff69f3 	.word	0xcfff69f3
 80133b0:	58000c00 	.word	0x58000c00
 80133b4:	11fff4ff 	.word	0x11fff4ff
 80133b8:	40011000 	.word	0x40011000
 80133bc:	58024400 	.word	0x58024400
 80133c0:	40004400 	.word	0x40004400
 80133c4:	40004800 	.word	0x40004800
 80133c8:	40004c00 	.word	0x40004c00
 80133cc:	40005000 	.word	0x40005000
 80133d0:	2320      	movs	r3, #32
 80133d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133d6:	e128      	b.n	801362a <UART_SetConfig+0x5a6>
 80133d8:	2340      	movs	r3, #64	; 0x40
 80133da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133de:	e124      	b.n	801362a <UART_SetConfig+0x5a6>
 80133e0:	2380      	movs	r3, #128	; 0x80
 80133e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133e6:	e120      	b.n	801362a <UART_SetConfig+0x5a6>
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	4acb      	ldr	r2, [pc, #812]	; (801371c <UART_SetConfig+0x698>)
 80133ee:	4293      	cmp	r3, r2
 80133f0:	d176      	bne.n	80134e0 <UART_SetConfig+0x45c>
 80133f2:	4bcb      	ldr	r3, [pc, #812]	; (8013720 <UART_SetConfig+0x69c>)
 80133f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80133fa:	2b28      	cmp	r3, #40	; 0x28
 80133fc:	d86c      	bhi.n	80134d8 <UART_SetConfig+0x454>
 80133fe:	a201      	add	r2, pc, #4	; (adr r2, 8013404 <UART_SetConfig+0x380>)
 8013400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013404:	080134a9 	.word	0x080134a9
 8013408:	080134d9 	.word	0x080134d9
 801340c:	080134d9 	.word	0x080134d9
 8013410:	080134d9 	.word	0x080134d9
 8013414:	080134d9 	.word	0x080134d9
 8013418:	080134d9 	.word	0x080134d9
 801341c:	080134d9 	.word	0x080134d9
 8013420:	080134d9 	.word	0x080134d9
 8013424:	080134b1 	.word	0x080134b1
 8013428:	080134d9 	.word	0x080134d9
 801342c:	080134d9 	.word	0x080134d9
 8013430:	080134d9 	.word	0x080134d9
 8013434:	080134d9 	.word	0x080134d9
 8013438:	080134d9 	.word	0x080134d9
 801343c:	080134d9 	.word	0x080134d9
 8013440:	080134d9 	.word	0x080134d9
 8013444:	080134b9 	.word	0x080134b9
 8013448:	080134d9 	.word	0x080134d9
 801344c:	080134d9 	.word	0x080134d9
 8013450:	080134d9 	.word	0x080134d9
 8013454:	080134d9 	.word	0x080134d9
 8013458:	080134d9 	.word	0x080134d9
 801345c:	080134d9 	.word	0x080134d9
 8013460:	080134d9 	.word	0x080134d9
 8013464:	080134c1 	.word	0x080134c1
 8013468:	080134d9 	.word	0x080134d9
 801346c:	080134d9 	.word	0x080134d9
 8013470:	080134d9 	.word	0x080134d9
 8013474:	080134d9 	.word	0x080134d9
 8013478:	080134d9 	.word	0x080134d9
 801347c:	080134d9 	.word	0x080134d9
 8013480:	080134d9 	.word	0x080134d9
 8013484:	080134c9 	.word	0x080134c9
 8013488:	080134d9 	.word	0x080134d9
 801348c:	080134d9 	.word	0x080134d9
 8013490:	080134d9 	.word	0x080134d9
 8013494:	080134d9 	.word	0x080134d9
 8013498:	080134d9 	.word	0x080134d9
 801349c:	080134d9 	.word	0x080134d9
 80134a0:	080134d9 	.word	0x080134d9
 80134a4:	080134d1 	.word	0x080134d1
 80134a8:	2301      	movs	r3, #1
 80134aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134ae:	e0bc      	b.n	801362a <UART_SetConfig+0x5a6>
 80134b0:	2304      	movs	r3, #4
 80134b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134b6:	e0b8      	b.n	801362a <UART_SetConfig+0x5a6>
 80134b8:	2308      	movs	r3, #8
 80134ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134be:	e0b4      	b.n	801362a <UART_SetConfig+0x5a6>
 80134c0:	2310      	movs	r3, #16
 80134c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134c6:	e0b0      	b.n	801362a <UART_SetConfig+0x5a6>
 80134c8:	2320      	movs	r3, #32
 80134ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134ce:	e0ac      	b.n	801362a <UART_SetConfig+0x5a6>
 80134d0:	2340      	movs	r3, #64	; 0x40
 80134d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134d6:	e0a8      	b.n	801362a <UART_SetConfig+0x5a6>
 80134d8:	2380      	movs	r3, #128	; 0x80
 80134da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134de:	e0a4      	b.n	801362a <UART_SetConfig+0x5a6>
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	4a8f      	ldr	r2, [pc, #572]	; (8013724 <UART_SetConfig+0x6a0>)
 80134e6:	4293      	cmp	r3, r2
 80134e8:	d130      	bne.n	801354c <UART_SetConfig+0x4c8>
 80134ea:	4b8d      	ldr	r3, [pc, #564]	; (8013720 <UART_SetConfig+0x69c>)
 80134ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134ee:	f003 0307 	and.w	r3, r3, #7
 80134f2:	2b05      	cmp	r3, #5
 80134f4:	d826      	bhi.n	8013544 <UART_SetConfig+0x4c0>
 80134f6:	a201      	add	r2, pc, #4	; (adr r2, 80134fc <UART_SetConfig+0x478>)
 80134f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134fc:	08013515 	.word	0x08013515
 8013500:	0801351d 	.word	0x0801351d
 8013504:	08013525 	.word	0x08013525
 8013508:	0801352d 	.word	0x0801352d
 801350c:	08013535 	.word	0x08013535
 8013510:	0801353d 	.word	0x0801353d
 8013514:	2300      	movs	r3, #0
 8013516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801351a:	e086      	b.n	801362a <UART_SetConfig+0x5a6>
 801351c:	2304      	movs	r3, #4
 801351e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013522:	e082      	b.n	801362a <UART_SetConfig+0x5a6>
 8013524:	2308      	movs	r3, #8
 8013526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801352a:	e07e      	b.n	801362a <UART_SetConfig+0x5a6>
 801352c:	2310      	movs	r3, #16
 801352e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013532:	e07a      	b.n	801362a <UART_SetConfig+0x5a6>
 8013534:	2320      	movs	r3, #32
 8013536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801353a:	e076      	b.n	801362a <UART_SetConfig+0x5a6>
 801353c:	2340      	movs	r3, #64	; 0x40
 801353e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013542:	e072      	b.n	801362a <UART_SetConfig+0x5a6>
 8013544:	2380      	movs	r3, #128	; 0x80
 8013546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801354a:	e06e      	b.n	801362a <UART_SetConfig+0x5a6>
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	4a75      	ldr	r2, [pc, #468]	; (8013728 <UART_SetConfig+0x6a4>)
 8013552:	4293      	cmp	r3, r2
 8013554:	d130      	bne.n	80135b8 <UART_SetConfig+0x534>
 8013556:	4b72      	ldr	r3, [pc, #456]	; (8013720 <UART_SetConfig+0x69c>)
 8013558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801355a:	f003 0307 	and.w	r3, r3, #7
 801355e:	2b05      	cmp	r3, #5
 8013560:	d826      	bhi.n	80135b0 <UART_SetConfig+0x52c>
 8013562:	a201      	add	r2, pc, #4	; (adr r2, 8013568 <UART_SetConfig+0x4e4>)
 8013564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013568:	08013581 	.word	0x08013581
 801356c:	08013589 	.word	0x08013589
 8013570:	08013591 	.word	0x08013591
 8013574:	08013599 	.word	0x08013599
 8013578:	080135a1 	.word	0x080135a1
 801357c:	080135a9 	.word	0x080135a9
 8013580:	2300      	movs	r3, #0
 8013582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013586:	e050      	b.n	801362a <UART_SetConfig+0x5a6>
 8013588:	2304      	movs	r3, #4
 801358a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801358e:	e04c      	b.n	801362a <UART_SetConfig+0x5a6>
 8013590:	2308      	movs	r3, #8
 8013592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013596:	e048      	b.n	801362a <UART_SetConfig+0x5a6>
 8013598:	2310      	movs	r3, #16
 801359a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801359e:	e044      	b.n	801362a <UART_SetConfig+0x5a6>
 80135a0:	2320      	movs	r3, #32
 80135a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135a6:	e040      	b.n	801362a <UART_SetConfig+0x5a6>
 80135a8:	2340      	movs	r3, #64	; 0x40
 80135aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135ae:	e03c      	b.n	801362a <UART_SetConfig+0x5a6>
 80135b0:	2380      	movs	r3, #128	; 0x80
 80135b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135b6:	e038      	b.n	801362a <UART_SetConfig+0x5a6>
 80135b8:	697b      	ldr	r3, [r7, #20]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	4a5b      	ldr	r2, [pc, #364]	; (801372c <UART_SetConfig+0x6a8>)
 80135be:	4293      	cmp	r3, r2
 80135c0:	d130      	bne.n	8013624 <UART_SetConfig+0x5a0>
 80135c2:	4b57      	ldr	r3, [pc, #348]	; (8013720 <UART_SetConfig+0x69c>)
 80135c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135c6:	f003 0307 	and.w	r3, r3, #7
 80135ca:	2b05      	cmp	r3, #5
 80135cc:	d826      	bhi.n	801361c <UART_SetConfig+0x598>
 80135ce:	a201      	add	r2, pc, #4	; (adr r2, 80135d4 <UART_SetConfig+0x550>)
 80135d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135d4:	080135ed 	.word	0x080135ed
 80135d8:	080135f5 	.word	0x080135f5
 80135dc:	080135fd 	.word	0x080135fd
 80135e0:	08013605 	.word	0x08013605
 80135e4:	0801360d 	.word	0x0801360d
 80135e8:	08013615 	.word	0x08013615
 80135ec:	2302      	movs	r3, #2
 80135ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135f2:	e01a      	b.n	801362a <UART_SetConfig+0x5a6>
 80135f4:	2304      	movs	r3, #4
 80135f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135fa:	e016      	b.n	801362a <UART_SetConfig+0x5a6>
 80135fc:	2308      	movs	r3, #8
 80135fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013602:	e012      	b.n	801362a <UART_SetConfig+0x5a6>
 8013604:	2310      	movs	r3, #16
 8013606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801360a:	e00e      	b.n	801362a <UART_SetConfig+0x5a6>
 801360c:	2320      	movs	r3, #32
 801360e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013612:	e00a      	b.n	801362a <UART_SetConfig+0x5a6>
 8013614:	2340      	movs	r3, #64	; 0x40
 8013616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801361a:	e006      	b.n	801362a <UART_SetConfig+0x5a6>
 801361c:	2380      	movs	r3, #128	; 0x80
 801361e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013622:	e002      	b.n	801362a <UART_SetConfig+0x5a6>
 8013624:	2380      	movs	r3, #128	; 0x80
 8013626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	4a3f      	ldr	r2, [pc, #252]	; (801372c <UART_SetConfig+0x6a8>)
 8013630:	4293      	cmp	r3, r2
 8013632:	f040 80f8 	bne.w	8013826 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013636:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801363a:	2b20      	cmp	r3, #32
 801363c:	dc46      	bgt.n	80136cc <UART_SetConfig+0x648>
 801363e:	2b02      	cmp	r3, #2
 8013640:	f2c0 8082 	blt.w	8013748 <UART_SetConfig+0x6c4>
 8013644:	3b02      	subs	r3, #2
 8013646:	2b1e      	cmp	r3, #30
 8013648:	d87e      	bhi.n	8013748 <UART_SetConfig+0x6c4>
 801364a:	a201      	add	r2, pc, #4	; (adr r2, 8013650 <UART_SetConfig+0x5cc>)
 801364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013650:	080136d3 	.word	0x080136d3
 8013654:	08013749 	.word	0x08013749
 8013658:	080136db 	.word	0x080136db
 801365c:	08013749 	.word	0x08013749
 8013660:	08013749 	.word	0x08013749
 8013664:	08013749 	.word	0x08013749
 8013668:	080136eb 	.word	0x080136eb
 801366c:	08013749 	.word	0x08013749
 8013670:	08013749 	.word	0x08013749
 8013674:	08013749 	.word	0x08013749
 8013678:	08013749 	.word	0x08013749
 801367c:	08013749 	.word	0x08013749
 8013680:	08013749 	.word	0x08013749
 8013684:	08013749 	.word	0x08013749
 8013688:	080136fb 	.word	0x080136fb
 801368c:	08013749 	.word	0x08013749
 8013690:	08013749 	.word	0x08013749
 8013694:	08013749 	.word	0x08013749
 8013698:	08013749 	.word	0x08013749
 801369c:	08013749 	.word	0x08013749
 80136a0:	08013749 	.word	0x08013749
 80136a4:	08013749 	.word	0x08013749
 80136a8:	08013749 	.word	0x08013749
 80136ac:	08013749 	.word	0x08013749
 80136b0:	08013749 	.word	0x08013749
 80136b4:	08013749 	.word	0x08013749
 80136b8:	08013749 	.word	0x08013749
 80136bc:	08013749 	.word	0x08013749
 80136c0:	08013749 	.word	0x08013749
 80136c4:	08013749 	.word	0x08013749
 80136c8:	0801373b 	.word	0x0801373b
 80136cc:	2b40      	cmp	r3, #64	; 0x40
 80136ce:	d037      	beq.n	8013740 <UART_SetConfig+0x6bc>
 80136d0:	e03a      	b.n	8013748 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80136d2:	f7fc f995 	bl	800fa00 <HAL_RCCEx_GetD3PCLK1Freq>
 80136d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80136d8:	e03c      	b.n	8013754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80136da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80136de:	4618      	mov	r0, r3
 80136e0:	f7fc f9a4 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80136e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136e8:	e034      	b.n	8013754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80136ea:	f107 0318 	add.w	r3, r7, #24
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7fc faf0 	bl	800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80136f4:	69fb      	ldr	r3, [r7, #28]
 80136f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136f8:	e02c      	b.n	8013754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80136fa:	4b09      	ldr	r3, [pc, #36]	; (8013720 <UART_SetConfig+0x69c>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	f003 0320 	and.w	r3, r3, #32
 8013702:	2b00      	cmp	r3, #0
 8013704:	d016      	beq.n	8013734 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013706:	4b06      	ldr	r3, [pc, #24]	; (8013720 <UART_SetConfig+0x69c>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	08db      	lsrs	r3, r3, #3
 801370c:	f003 0303 	and.w	r3, r3, #3
 8013710:	4a07      	ldr	r2, [pc, #28]	; (8013730 <UART_SetConfig+0x6ac>)
 8013712:	fa22 f303 	lsr.w	r3, r2, r3
 8013716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013718:	e01c      	b.n	8013754 <UART_SetConfig+0x6d0>
 801371a:	bf00      	nop
 801371c:	40011400 	.word	0x40011400
 8013720:	58024400 	.word	0x58024400
 8013724:	40007800 	.word	0x40007800
 8013728:	40007c00 	.word	0x40007c00
 801372c:	58000c00 	.word	0x58000c00
 8013730:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013734:	4b9d      	ldr	r3, [pc, #628]	; (80139ac <UART_SetConfig+0x928>)
 8013736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013738:	e00c      	b.n	8013754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801373a:	4b9d      	ldr	r3, [pc, #628]	; (80139b0 <UART_SetConfig+0x92c>)
 801373c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801373e:	e009      	b.n	8013754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013746:	e005      	b.n	8013754 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013748:	2300      	movs	r3, #0
 801374a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801374c:	2301      	movs	r3, #1
 801374e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013752:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013756:	2b00      	cmp	r3, #0
 8013758:	f000 81de 	beq.w	8013b18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013760:	4a94      	ldr	r2, [pc, #592]	; (80139b4 <UART_SetConfig+0x930>)
 8013762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013766:	461a      	mov	r2, r3
 8013768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801376a:	fbb3 f3f2 	udiv	r3, r3, r2
 801376e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	685a      	ldr	r2, [r3, #4]
 8013774:	4613      	mov	r3, r2
 8013776:	005b      	lsls	r3, r3, #1
 8013778:	4413      	add	r3, r2
 801377a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801377c:	429a      	cmp	r2, r3
 801377e:	d305      	bcc.n	801378c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	685b      	ldr	r3, [r3, #4]
 8013784:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013788:	429a      	cmp	r2, r3
 801378a:	d903      	bls.n	8013794 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801378c:	2301      	movs	r3, #1
 801378e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013792:	e1c1      	b.n	8013b18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013796:	2200      	movs	r2, #0
 8013798:	60bb      	str	r3, [r7, #8]
 801379a:	60fa      	str	r2, [r7, #12]
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137a0:	4a84      	ldr	r2, [pc, #528]	; (80139b4 <UART_SetConfig+0x930>)
 80137a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80137a6:	b29b      	uxth	r3, r3
 80137a8:	2200      	movs	r2, #0
 80137aa:	603b      	str	r3, [r7, #0]
 80137ac:	607a      	str	r2, [r7, #4]
 80137ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80137b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80137b6:	f7ec fdeb 	bl	8000390 <__aeabi_uldivmod>
 80137ba:	4602      	mov	r2, r0
 80137bc:	460b      	mov	r3, r1
 80137be:	4610      	mov	r0, r2
 80137c0:	4619      	mov	r1, r3
 80137c2:	f04f 0200 	mov.w	r2, #0
 80137c6:	f04f 0300 	mov.w	r3, #0
 80137ca:	020b      	lsls	r3, r1, #8
 80137cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80137d0:	0202      	lsls	r2, r0, #8
 80137d2:	6979      	ldr	r1, [r7, #20]
 80137d4:	6849      	ldr	r1, [r1, #4]
 80137d6:	0849      	lsrs	r1, r1, #1
 80137d8:	2000      	movs	r0, #0
 80137da:	460c      	mov	r4, r1
 80137dc:	4605      	mov	r5, r0
 80137de:	eb12 0804 	adds.w	r8, r2, r4
 80137e2:	eb43 0905 	adc.w	r9, r3, r5
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	685b      	ldr	r3, [r3, #4]
 80137ea:	2200      	movs	r2, #0
 80137ec:	469a      	mov	sl, r3
 80137ee:	4693      	mov	fp, r2
 80137f0:	4652      	mov	r2, sl
 80137f2:	465b      	mov	r3, fp
 80137f4:	4640      	mov	r0, r8
 80137f6:	4649      	mov	r1, r9
 80137f8:	f7ec fdca 	bl	8000390 <__aeabi_uldivmod>
 80137fc:	4602      	mov	r2, r0
 80137fe:	460b      	mov	r3, r1
 8013800:	4613      	mov	r3, r2
 8013802:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801380a:	d308      	bcc.n	801381e <UART_SetConfig+0x79a>
 801380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013812:	d204      	bcs.n	801381e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801381a:	60da      	str	r2, [r3, #12]
 801381c:	e17c      	b.n	8013b18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801381e:	2301      	movs	r3, #1
 8013820:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013824:	e178      	b.n	8013b18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	69db      	ldr	r3, [r3, #28]
 801382a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801382e:	f040 80c5 	bne.w	80139bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8013832:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013836:	2b20      	cmp	r3, #32
 8013838:	dc48      	bgt.n	80138cc <UART_SetConfig+0x848>
 801383a:	2b00      	cmp	r3, #0
 801383c:	db7b      	blt.n	8013936 <UART_SetConfig+0x8b2>
 801383e:	2b20      	cmp	r3, #32
 8013840:	d879      	bhi.n	8013936 <UART_SetConfig+0x8b2>
 8013842:	a201      	add	r2, pc, #4	; (adr r2, 8013848 <UART_SetConfig+0x7c4>)
 8013844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013848:	080138d3 	.word	0x080138d3
 801384c:	080138db 	.word	0x080138db
 8013850:	08013937 	.word	0x08013937
 8013854:	08013937 	.word	0x08013937
 8013858:	080138e3 	.word	0x080138e3
 801385c:	08013937 	.word	0x08013937
 8013860:	08013937 	.word	0x08013937
 8013864:	08013937 	.word	0x08013937
 8013868:	080138f3 	.word	0x080138f3
 801386c:	08013937 	.word	0x08013937
 8013870:	08013937 	.word	0x08013937
 8013874:	08013937 	.word	0x08013937
 8013878:	08013937 	.word	0x08013937
 801387c:	08013937 	.word	0x08013937
 8013880:	08013937 	.word	0x08013937
 8013884:	08013937 	.word	0x08013937
 8013888:	08013903 	.word	0x08013903
 801388c:	08013937 	.word	0x08013937
 8013890:	08013937 	.word	0x08013937
 8013894:	08013937 	.word	0x08013937
 8013898:	08013937 	.word	0x08013937
 801389c:	08013937 	.word	0x08013937
 80138a0:	08013937 	.word	0x08013937
 80138a4:	08013937 	.word	0x08013937
 80138a8:	08013937 	.word	0x08013937
 80138ac:	08013937 	.word	0x08013937
 80138b0:	08013937 	.word	0x08013937
 80138b4:	08013937 	.word	0x08013937
 80138b8:	08013937 	.word	0x08013937
 80138bc:	08013937 	.word	0x08013937
 80138c0:	08013937 	.word	0x08013937
 80138c4:	08013937 	.word	0x08013937
 80138c8:	08013929 	.word	0x08013929
 80138cc:	2b40      	cmp	r3, #64	; 0x40
 80138ce:	d02e      	beq.n	801392e <UART_SetConfig+0x8aa>
 80138d0:	e031      	b.n	8013936 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80138d2:	f7fa f8df 	bl	800da94 <HAL_RCC_GetPCLK1Freq>
 80138d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80138d8:	e033      	b.n	8013942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80138da:	f7fa f8f1 	bl	800dac0 <HAL_RCC_GetPCLK2Freq>
 80138de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80138e0:	e02f      	b.n	8013942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80138e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80138e6:	4618      	mov	r0, r3
 80138e8:	f7fc f8a0 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80138ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80138f0:	e027      	b.n	8013942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80138f2:	f107 0318 	add.w	r3, r7, #24
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7fc f9ec 	bl	800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013900:	e01f      	b.n	8013942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013902:	4b2d      	ldr	r3, [pc, #180]	; (80139b8 <UART_SetConfig+0x934>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	f003 0320 	and.w	r3, r3, #32
 801390a:	2b00      	cmp	r3, #0
 801390c:	d009      	beq.n	8013922 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801390e:	4b2a      	ldr	r3, [pc, #168]	; (80139b8 <UART_SetConfig+0x934>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	08db      	lsrs	r3, r3, #3
 8013914:	f003 0303 	and.w	r3, r3, #3
 8013918:	4a24      	ldr	r2, [pc, #144]	; (80139ac <UART_SetConfig+0x928>)
 801391a:	fa22 f303 	lsr.w	r3, r2, r3
 801391e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013920:	e00f      	b.n	8013942 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013922:	4b22      	ldr	r3, [pc, #136]	; (80139ac <UART_SetConfig+0x928>)
 8013924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013926:	e00c      	b.n	8013942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013928:	4b21      	ldr	r3, [pc, #132]	; (80139b0 <UART_SetConfig+0x92c>)
 801392a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801392c:	e009      	b.n	8013942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801392e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013934:	e005      	b.n	8013942 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013936:	2300      	movs	r3, #0
 8013938:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801393a:	2301      	movs	r3, #1
 801393c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013944:	2b00      	cmp	r3, #0
 8013946:	f000 80e7 	beq.w	8013b18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801394e:	4a19      	ldr	r2, [pc, #100]	; (80139b4 <UART_SetConfig+0x930>)
 8013950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013954:	461a      	mov	r2, r3
 8013956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013958:	fbb3 f3f2 	udiv	r3, r3, r2
 801395c:	005a      	lsls	r2, r3, #1
 801395e:	697b      	ldr	r3, [r7, #20]
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	085b      	lsrs	r3, r3, #1
 8013964:	441a      	add	r2, r3
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	fbb2 f3f3 	udiv	r3, r2, r3
 801396e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013972:	2b0f      	cmp	r3, #15
 8013974:	d916      	bls.n	80139a4 <UART_SetConfig+0x920>
 8013976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801397c:	d212      	bcs.n	80139a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013980:	b29b      	uxth	r3, r3
 8013982:	f023 030f 	bic.w	r3, r3, #15
 8013986:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398a:	085b      	lsrs	r3, r3, #1
 801398c:	b29b      	uxth	r3, r3
 801398e:	f003 0307 	and.w	r3, r3, #7
 8013992:	b29a      	uxth	r2, r3
 8013994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013996:	4313      	orrs	r3, r2
 8013998:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80139a0:	60da      	str	r2, [r3, #12]
 80139a2:	e0b9      	b.n	8013b18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80139a4:	2301      	movs	r3, #1
 80139a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80139aa:	e0b5      	b.n	8013b18 <UART_SetConfig+0xa94>
 80139ac:	03d09000 	.word	0x03d09000
 80139b0:	003d0900 	.word	0x003d0900
 80139b4:	08017680 	.word	0x08017680
 80139b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80139bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80139c0:	2b20      	cmp	r3, #32
 80139c2:	dc49      	bgt.n	8013a58 <UART_SetConfig+0x9d4>
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	db7c      	blt.n	8013ac2 <UART_SetConfig+0xa3e>
 80139c8:	2b20      	cmp	r3, #32
 80139ca:	d87a      	bhi.n	8013ac2 <UART_SetConfig+0xa3e>
 80139cc:	a201      	add	r2, pc, #4	; (adr r2, 80139d4 <UART_SetConfig+0x950>)
 80139ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139d2:	bf00      	nop
 80139d4:	08013a5f 	.word	0x08013a5f
 80139d8:	08013a67 	.word	0x08013a67
 80139dc:	08013ac3 	.word	0x08013ac3
 80139e0:	08013ac3 	.word	0x08013ac3
 80139e4:	08013a6f 	.word	0x08013a6f
 80139e8:	08013ac3 	.word	0x08013ac3
 80139ec:	08013ac3 	.word	0x08013ac3
 80139f0:	08013ac3 	.word	0x08013ac3
 80139f4:	08013a7f 	.word	0x08013a7f
 80139f8:	08013ac3 	.word	0x08013ac3
 80139fc:	08013ac3 	.word	0x08013ac3
 8013a00:	08013ac3 	.word	0x08013ac3
 8013a04:	08013ac3 	.word	0x08013ac3
 8013a08:	08013ac3 	.word	0x08013ac3
 8013a0c:	08013ac3 	.word	0x08013ac3
 8013a10:	08013ac3 	.word	0x08013ac3
 8013a14:	08013a8f 	.word	0x08013a8f
 8013a18:	08013ac3 	.word	0x08013ac3
 8013a1c:	08013ac3 	.word	0x08013ac3
 8013a20:	08013ac3 	.word	0x08013ac3
 8013a24:	08013ac3 	.word	0x08013ac3
 8013a28:	08013ac3 	.word	0x08013ac3
 8013a2c:	08013ac3 	.word	0x08013ac3
 8013a30:	08013ac3 	.word	0x08013ac3
 8013a34:	08013ac3 	.word	0x08013ac3
 8013a38:	08013ac3 	.word	0x08013ac3
 8013a3c:	08013ac3 	.word	0x08013ac3
 8013a40:	08013ac3 	.word	0x08013ac3
 8013a44:	08013ac3 	.word	0x08013ac3
 8013a48:	08013ac3 	.word	0x08013ac3
 8013a4c:	08013ac3 	.word	0x08013ac3
 8013a50:	08013ac3 	.word	0x08013ac3
 8013a54:	08013ab5 	.word	0x08013ab5
 8013a58:	2b40      	cmp	r3, #64	; 0x40
 8013a5a:	d02e      	beq.n	8013aba <UART_SetConfig+0xa36>
 8013a5c:	e031      	b.n	8013ac2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013a5e:	f7fa f819 	bl	800da94 <HAL_RCC_GetPCLK1Freq>
 8013a62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013a64:	e033      	b.n	8013ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013a66:	f7fa f82b 	bl	800dac0 <HAL_RCC_GetPCLK2Freq>
 8013a6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013a6c:	e02f      	b.n	8013ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a72:	4618      	mov	r0, r3
 8013a74:	f7fb ffda 	bl	800fa2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013a7c:	e027      	b.n	8013ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013a7e:	f107 0318 	add.w	r3, r7, #24
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7fc f926 	bl	800fcd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013a8c:	e01f      	b.n	8013ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013a8e:	4b2d      	ldr	r3, [pc, #180]	; (8013b44 <UART_SetConfig+0xac0>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f003 0320 	and.w	r3, r3, #32
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d009      	beq.n	8013aae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013a9a:	4b2a      	ldr	r3, [pc, #168]	; (8013b44 <UART_SetConfig+0xac0>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	08db      	lsrs	r3, r3, #3
 8013aa0:	f003 0303 	and.w	r3, r3, #3
 8013aa4:	4a28      	ldr	r2, [pc, #160]	; (8013b48 <UART_SetConfig+0xac4>)
 8013aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8013aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013aac:	e00f      	b.n	8013ace <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8013aae:	4b26      	ldr	r3, [pc, #152]	; (8013b48 <UART_SetConfig+0xac4>)
 8013ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013ab2:	e00c      	b.n	8013ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013ab4:	4b25      	ldr	r3, [pc, #148]	; (8013b4c <UART_SetConfig+0xac8>)
 8013ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013ab8:	e009      	b.n	8013ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013ac0:	e005      	b.n	8013ace <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013acc:	bf00      	nop
    }

    if (pclk != 0U)
 8013ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d021      	beq.n	8013b18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ad8:	4a1d      	ldr	r2, [pc, #116]	; (8013b50 <UART_SetConfig+0xacc>)
 8013ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ade:	461a      	mov	r2, r3
 8013ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	685b      	ldr	r3, [r3, #4]
 8013aea:	085b      	lsrs	r3, r3, #1
 8013aec:	441a      	add	r2, r3
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	685b      	ldr	r3, [r3, #4]
 8013af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8013af6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013afa:	2b0f      	cmp	r3, #15
 8013afc:	d909      	bls.n	8013b12 <UART_SetConfig+0xa8e>
 8013afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b04:	d205      	bcs.n	8013b12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b08:	b29a      	uxth	r2, r3
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	60da      	str	r2, [r3, #12]
 8013b10:	e002      	b.n	8013b18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013b12:	2301      	movs	r3, #1
 8013b14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	2201      	movs	r2, #1
 8013b24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013b28:	697b      	ldr	r3, [r7, #20]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	2200      	movs	r2, #0
 8013b32:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013b34:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	3748      	adds	r7, #72	; 0x48
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013b42:	bf00      	nop
 8013b44:	58024400 	.word	0x58024400
 8013b48:	03d09000 	.word	0x03d09000
 8013b4c:	003d0900 	.word	0x003d0900
 8013b50:	08017680 	.word	0x08017680

08013b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013b54:	b480      	push	{r7}
 8013b56:	b083      	sub	sp, #12
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b60:	f003 0301 	and.w	r3, r3, #1
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d00a      	beq.n	8013b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	430a      	orrs	r2, r1
 8013b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b82:	f003 0302 	and.w	r3, r3, #2
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d00a      	beq.n	8013ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	685b      	ldr	r3, [r3, #4]
 8013b90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	430a      	orrs	r2, r1
 8013b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ba4:	f003 0304 	and.w	r3, r3, #4
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d00a      	beq.n	8013bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	430a      	orrs	r2, r1
 8013bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bc6:	f003 0308 	and.w	r3, r3, #8
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d00a      	beq.n	8013be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	685b      	ldr	r3, [r3, #4]
 8013bd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	430a      	orrs	r2, r1
 8013be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013be8:	f003 0310 	and.w	r3, r3, #16
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d00a      	beq.n	8013c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	689b      	ldr	r3, [r3, #8]
 8013bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	430a      	orrs	r2, r1
 8013c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c0a:	f003 0320 	and.w	r3, r3, #32
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d00a      	beq.n	8013c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	689b      	ldr	r3, [r3, #8]
 8013c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	430a      	orrs	r2, r1
 8013c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d01a      	beq.n	8013c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	685b      	ldr	r3, [r3, #4]
 8013c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	430a      	orrs	r2, r1
 8013c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013c52:	d10a      	bne.n	8013c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	685b      	ldr	r3, [r3, #4]
 8013c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	430a      	orrs	r2, r1
 8013c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d00a      	beq.n	8013c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	685b      	ldr	r3, [r3, #4]
 8013c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	430a      	orrs	r2, r1
 8013c8a:	605a      	str	r2, [r3, #4]
  }
}
 8013c8c:	bf00      	nop
 8013c8e:	370c      	adds	r7, #12
 8013c90:	46bd      	mov	sp, r7
 8013c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c96:	4770      	bx	lr

08013c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b098      	sub	sp, #96	; 0x60
 8013c9c:	af02      	add	r7, sp, #8
 8013c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013ca8:	f7f3 fb40 	bl	800732c <HAL_GetTick>
 8013cac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	f003 0308 	and.w	r3, r3, #8
 8013cb8:	2b08      	cmp	r3, #8
 8013cba:	d12f      	bne.n	8013d1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013cc0:	9300      	str	r3, [sp, #0]
 8013cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f000 f88e 	bl	8013dec <UART_WaitOnFlagUntilTimeout>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d022      	beq.n	8013d1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cde:	e853 3f00 	ldrex	r3, [r3]
 8013ce2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013cea:	653b      	str	r3, [r7, #80]	; 0x50
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	461a      	mov	r2, r3
 8013cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8013cf6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013cfc:	e841 2300 	strex	r3, r2, [r1]
 8013d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d1e6      	bne.n	8013cd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2220      	movs	r2, #32
 8013d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2200      	movs	r2, #0
 8013d14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013d18:	2303      	movs	r3, #3
 8013d1a:	e063      	b.n	8013de4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	f003 0304 	and.w	r3, r3, #4
 8013d26:	2b04      	cmp	r3, #4
 8013d28:	d149      	bne.n	8013dbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013d2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013d2e:	9300      	str	r3, [sp, #0]
 8013d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d32:	2200      	movs	r2, #0
 8013d34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f000 f857 	bl	8013dec <UART_WaitOnFlagUntilTimeout>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d03c      	beq.n	8013dbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d4c:	e853 3f00 	ldrex	r3, [r3]
 8013d50:	623b      	str	r3, [r7, #32]
   return(result);
 8013d52:	6a3b      	ldr	r3, [r7, #32]
 8013d54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	461a      	mov	r2, r3
 8013d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d62:	633b      	str	r3, [r7, #48]	; 0x30
 8013d64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d6a:	e841 2300 	strex	r3, r2, [r1]
 8013d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d1e6      	bne.n	8013d44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	3308      	adds	r3, #8
 8013d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	e853 3f00 	ldrex	r3, [r3]
 8013d84:	60fb      	str	r3, [r7, #12]
   return(result);
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	f023 0301 	bic.w	r3, r3, #1
 8013d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	3308      	adds	r3, #8
 8013d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d96:	61fa      	str	r2, [r7, #28]
 8013d98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d9a:	69b9      	ldr	r1, [r7, #24]
 8013d9c:	69fa      	ldr	r2, [r7, #28]
 8013d9e:	e841 2300 	strex	r3, r2, [r1]
 8013da2:	617b      	str	r3, [r7, #20]
   return(result);
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d1e5      	bne.n	8013d76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2220      	movs	r2, #32
 8013dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2200      	movs	r2, #0
 8013db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013dba:	2303      	movs	r3, #3
 8013dbc:	e012      	b.n	8013de4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	2220      	movs	r2, #32
 8013dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2220      	movs	r2, #32
 8013dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2200      	movs	r2, #0
 8013dde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013de2:	2300      	movs	r3, #0
}
 8013de4:	4618      	mov	r0, r3
 8013de6:	3758      	adds	r7, #88	; 0x58
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}

08013dec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b084      	sub	sp, #16
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	60b9      	str	r1, [r7, #8]
 8013df6:	603b      	str	r3, [r7, #0]
 8013df8:	4613      	mov	r3, r2
 8013dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013dfc:	e049      	b.n	8013e92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e04:	d045      	beq.n	8013e92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013e06:	f7f3 fa91 	bl	800732c <HAL_GetTick>
 8013e0a:	4602      	mov	r2, r0
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	1ad3      	subs	r3, r2, r3
 8013e10:	69ba      	ldr	r2, [r7, #24]
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d302      	bcc.n	8013e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8013e16:	69bb      	ldr	r3, [r7, #24]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d101      	bne.n	8013e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013e1c:	2303      	movs	r3, #3
 8013e1e:	e048      	b.n	8013eb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	f003 0304 	and.w	r3, r3, #4
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d031      	beq.n	8013e92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	69db      	ldr	r3, [r3, #28]
 8013e34:	f003 0308 	and.w	r3, r3, #8
 8013e38:	2b08      	cmp	r3, #8
 8013e3a:	d110      	bne.n	8013e5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	2208      	movs	r2, #8
 8013e42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013e44:	68f8      	ldr	r0, [r7, #12]
 8013e46:	f000 f921 	bl	801408c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	2208      	movs	r2, #8
 8013e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	2200      	movs	r2, #0
 8013e56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	e029      	b.n	8013eb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	69db      	ldr	r3, [r3, #28]
 8013e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013e6c:	d111      	bne.n	8013e92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013e78:	68f8      	ldr	r0, [r7, #12]
 8013e7a:	f000 f907 	bl	801408c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2220      	movs	r2, #32
 8013e82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013e8e:	2303      	movs	r3, #3
 8013e90:	e00f      	b.n	8013eb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	69da      	ldr	r2, [r3, #28]
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	4013      	ands	r3, r2
 8013e9c:	68ba      	ldr	r2, [r7, #8]
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	bf0c      	ite	eq
 8013ea2:	2301      	moveq	r3, #1
 8013ea4:	2300      	movne	r3, #0
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	461a      	mov	r2, r3
 8013eaa:	79fb      	ldrb	r3, [r7, #7]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d0a6      	beq.n	8013dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013eb0:	2300      	movs	r3, #0
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3710      	adds	r7, #16
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}
	...

08013ebc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b096      	sub	sp, #88	; 0x58
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	60f8      	str	r0, [r7, #12]
 8013ec4:	60b9      	str	r1, [r7, #8]
 8013ec6:	4613      	mov	r3, r2
 8013ec8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	68ba      	ldr	r2, [r7, #8]
 8013ece:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	88fa      	ldrh	r2, [r7, #6]
 8013ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	2200      	movs	r2, #0
 8013edc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	2222      	movs	r2, #34	; 0x22
 8013ee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d02d      	beq.n	8013f4e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ef8:	4a40      	ldr	r2, [pc, #256]	; (8013ffc <UART_Start_Receive_DMA+0x140>)
 8013efa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f02:	4a3f      	ldr	r2, [pc, #252]	; (8014000 <UART_Start_Receive_DMA+0x144>)
 8013f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f0c:	4a3d      	ldr	r2, [pc, #244]	; (8014004 <UART_Start_Receive_DMA+0x148>)
 8013f0e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f16:	2200      	movs	r2, #0
 8013f18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	3324      	adds	r3, #36	; 0x24
 8013f26:	4619      	mov	r1, r3
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f2c:	461a      	mov	r2, r3
 8013f2e:	88fb      	ldrh	r3, [r7, #6]
 8013f30:	f7f5 fc24 	bl	800977c <HAL_DMA_Start_IT>
 8013f34:	4603      	mov	r3, r0
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d009      	beq.n	8013f4e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	2210      	movs	r2, #16
 8013f3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2220      	movs	r2, #32
 8013f46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	e051      	b.n	8013ff2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	691b      	ldr	r3, [r3, #16]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d018      	beq.n	8013f88 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f5e:	e853 3f00 	ldrex	r3, [r3]
 8013f62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	461a      	mov	r2, r3
 8013f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f74:	64bb      	str	r3, [r7, #72]	; 0x48
 8013f76:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f7c:	e841 2300 	strex	r3, r2, [r1]
 8013f80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d1e6      	bne.n	8013f56 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	3308      	adds	r3, #8
 8013f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f92:	e853 3f00 	ldrex	r3, [r3]
 8013f96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	f043 0301 	orr.w	r3, r3, #1
 8013f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	3308      	adds	r3, #8
 8013fa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013fa8:	637a      	str	r2, [r7, #52]	; 0x34
 8013faa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fb0:	e841 2300 	strex	r3, r2, [r1]
 8013fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d1e5      	bne.n	8013f88 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	3308      	adds	r3, #8
 8013fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	e853 3f00 	ldrex	r3, [r3]
 8013fca:	613b      	str	r3, [r7, #16]
   return(result);
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	3308      	adds	r3, #8
 8013fda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013fdc:	623a      	str	r2, [r7, #32]
 8013fde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fe0:	69f9      	ldr	r1, [r7, #28]
 8013fe2:	6a3a      	ldr	r2, [r7, #32]
 8013fe4:	e841 2300 	strex	r3, r2, [r1]
 8013fe8:	61bb      	str	r3, [r7, #24]
   return(result);
 8013fea:	69bb      	ldr	r3, [r7, #24]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d1e5      	bne.n	8013fbc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013ff0:	2300      	movs	r3, #0
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3758      	adds	r7, #88	; 0x58
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	0801420b 	.word	0x0801420b
 8014000:	08014333 	.word	0x08014333
 8014004:	08014371 	.word	0x08014371

08014008 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014008:	b480      	push	{r7}
 801400a:	b08f      	sub	sp, #60	; 0x3c
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014016:	6a3b      	ldr	r3, [r7, #32]
 8014018:	e853 3f00 	ldrex	r3, [r3]
 801401c:	61fb      	str	r3, [r7, #28]
   return(result);
 801401e:	69fb      	ldr	r3, [r7, #28]
 8014020:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8014024:	637b      	str	r3, [r7, #52]	; 0x34
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	461a      	mov	r2, r3
 801402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801402e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014030:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014036:	e841 2300 	strex	r3, r2, [r1]
 801403a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801403e:	2b00      	cmp	r3, #0
 8014040:	d1e6      	bne.n	8014010 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	3308      	adds	r3, #8
 8014048:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	e853 3f00 	ldrex	r3, [r3]
 8014050:	60bb      	str	r3, [r7, #8]
   return(result);
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014058:	633b      	str	r3, [r7, #48]	; 0x30
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	3308      	adds	r3, #8
 8014060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014062:	61ba      	str	r2, [r7, #24]
 8014064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014066:	6979      	ldr	r1, [r7, #20]
 8014068:	69ba      	ldr	r2, [r7, #24]
 801406a:	e841 2300 	strex	r3, r2, [r1]
 801406e:	613b      	str	r3, [r7, #16]
   return(result);
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d1e5      	bne.n	8014042 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2220      	movs	r2, #32
 801407a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801407e:	bf00      	nop
 8014080:	373c      	adds	r7, #60	; 0x3c
 8014082:	46bd      	mov	sp, r7
 8014084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014088:	4770      	bx	lr
	...

0801408c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801408c:	b480      	push	{r7}
 801408e:	b095      	sub	sp, #84	; 0x54
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801409a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801409c:	e853 3f00 	ldrex	r3, [r3]
 80140a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80140a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80140a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	461a      	mov	r2, r3
 80140b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140b2:	643b      	str	r3, [r7, #64]	; 0x40
 80140b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80140b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80140ba:	e841 2300 	strex	r3, r2, [r1]
 80140be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80140c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d1e6      	bne.n	8014094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	3308      	adds	r3, #8
 80140cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140ce:	6a3b      	ldr	r3, [r7, #32]
 80140d0:	e853 3f00 	ldrex	r3, [r3]
 80140d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80140d6:	69fa      	ldr	r2, [r7, #28]
 80140d8:	4b1e      	ldr	r3, [pc, #120]	; (8014154 <UART_EndRxTransfer+0xc8>)
 80140da:	4013      	ands	r3, r2
 80140dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	3308      	adds	r3, #8
 80140e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80140e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80140e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80140ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140ee:	e841 2300 	strex	r3, r2, [r1]
 80140f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80140f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d1e5      	bne.n	80140c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140fe:	2b01      	cmp	r3, #1
 8014100:	d118      	bne.n	8014134 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	e853 3f00 	ldrex	r3, [r3]
 801410e:	60bb      	str	r3, [r7, #8]
   return(result);
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	f023 0310 	bic.w	r3, r3, #16
 8014116:	647b      	str	r3, [r7, #68]	; 0x44
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	461a      	mov	r2, r3
 801411e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014120:	61bb      	str	r3, [r7, #24]
 8014122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014124:	6979      	ldr	r1, [r7, #20]
 8014126:	69ba      	ldr	r2, [r7, #24]
 8014128:	e841 2300 	strex	r3, r2, [r1]
 801412c:	613b      	str	r3, [r7, #16]
   return(result);
 801412e:	693b      	ldr	r3, [r7, #16]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d1e6      	bne.n	8014102 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2220      	movs	r2, #32
 8014138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2200      	movs	r2, #0
 8014140:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2200      	movs	r2, #0
 8014146:	675a      	str	r2, [r3, #116]	; 0x74
}
 8014148:	bf00      	nop
 801414a:	3754      	adds	r7, #84	; 0x54
 801414c:	46bd      	mov	sp, r7
 801414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014152:	4770      	bx	lr
 8014154:	effffffe 	.word	0xeffffffe

08014158 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b090      	sub	sp, #64	; 0x40
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014164:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	69db      	ldr	r3, [r3, #28]
 801416a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801416e:	d037      	beq.n	80141e0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8014170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014172:	2200      	movs	r2, #0
 8014174:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	3308      	adds	r3, #8
 801417e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014182:	e853 3f00 	ldrex	r3, [r3]
 8014186:	623b      	str	r3, [r7, #32]
   return(result);
 8014188:	6a3b      	ldr	r3, [r7, #32]
 801418a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801418e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	3308      	adds	r3, #8
 8014196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014198:	633a      	str	r2, [r7, #48]	; 0x30
 801419a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801419c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801419e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141a0:	e841 2300 	strex	r3, r2, [r1]
 80141a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80141a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d1e5      	bne.n	8014178 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80141ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141b2:	693b      	ldr	r3, [r7, #16]
 80141b4:	e853 3f00 	ldrex	r3, [r3]
 80141b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141c0:	637b      	str	r3, [r7, #52]	; 0x34
 80141c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	461a      	mov	r2, r3
 80141c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141ca:	61fb      	str	r3, [r7, #28]
 80141cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141ce:	69b9      	ldr	r1, [r7, #24]
 80141d0:	69fa      	ldr	r2, [r7, #28]
 80141d2:	e841 2300 	strex	r3, r2, [r1]
 80141d6:	617b      	str	r3, [r7, #20]
   return(result);
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d1e6      	bne.n	80141ac <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80141de:	e002      	b.n	80141e6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80141e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80141e2:	f7ef fec7 	bl	8003f74 <HAL_UART_TxCpltCallback>
}
 80141e6:	bf00      	nop
 80141e8:	3740      	adds	r7, #64	; 0x40
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}

080141ee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80141ee:	b580      	push	{r7, lr}
 80141f0:	b084      	sub	sp, #16
 80141f2:	af00      	add	r7, sp, #0
 80141f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80141fc:	68f8      	ldr	r0, [r7, #12]
 80141fe:	f7fe ff2d 	bl	801305c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014202:	bf00      	nop
 8014204:	3710      	adds	r7, #16
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}

0801420a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801420a:	b580      	push	{r7, lr}
 801420c:	b09c      	sub	sp, #112	; 0x70
 801420e:	af00      	add	r7, sp, #0
 8014210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014216:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	69db      	ldr	r3, [r3, #28]
 801421c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014220:	d071      	beq.n	8014306 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8014222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014224:	2200      	movs	r2, #0
 8014226:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801422a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014232:	e853 3f00 	ldrex	r3, [r3]
 8014236:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801423a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801423e:	66bb      	str	r3, [r7, #104]	; 0x68
 8014240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	461a      	mov	r2, r3
 8014246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014248:	65bb      	str	r3, [r7, #88]	; 0x58
 801424a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801424c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801424e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014250:	e841 2300 	strex	r3, r2, [r1]
 8014254:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014258:	2b00      	cmp	r3, #0
 801425a:	d1e6      	bne.n	801422a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801425c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	3308      	adds	r3, #8
 8014262:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014266:	e853 3f00 	ldrex	r3, [r3]
 801426a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801426e:	f023 0301 	bic.w	r3, r3, #1
 8014272:	667b      	str	r3, [r7, #100]	; 0x64
 8014274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	3308      	adds	r3, #8
 801427a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801427c:	647a      	str	r2, [r7, #68]	; 0x44
 801427e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014280:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014284:	e841 2300 	strex	r3, r2, [r1]
 8014288:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801428a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801428c:	2b00      	cmp	r3, #0
 801428e:	d1e5      	bne.n	801425c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	3308      	adds	r3, #8
 8014296:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429a:	e853 3f00 	ldrex	r3, [r3]
 801429e:	623b      	str	r3, [r7, #32]
   return(result);
 80142a0:	6a3b      	ldr	r3, [r7, #32]
 80142a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80142a6:	663b      	str	r3, [r7, #96]	; 0x60
 80142a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	3308      	adds	r3, #8
 80142ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80142b0:	633a      	str	r2, [r7, #48]	; 0x30
 80142b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80142b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142b8:	e841 2300 	strex	r3, r2, [r1]
 80142bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80142be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d1e5      	bne.n	8014290 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80142c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142c6:	2220      	movs	r2, #32
 80142c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80142cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142d0:	2b01      	cmp	r3, #1
 80142d2:	d118      	bne.n	8014306 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80142d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	e853 3f00 	ldrex	r3, [r3]
 80142e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f023 0310 	bic.w	r3, r3, #16
 80142e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80142ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	461a      	mov	r2, r3
 80142f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142f2:	61fb      	str	r3, [r7, #28]
 80142f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142f6:	69b9      	ldr	r1, [r7, #24]
 80142f8:	69fa      	ldr	r2, [r7, #28]
 80142fa:	e841 2300 	strex	r3, r2, [r1]
 80142fe:	617b      	str	r3, [r7, #20]
   return(result);
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d1e6      	bne.n	80142d4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014308:	2200      	movs	r2, #0
 801430a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801430c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801430e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014310:	2b01      	cmp	r3, #1
 8014312:	d107      	bne.n	8014324 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014316:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801431a:	4619      	mov	r1, r3
 801431c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801431e:	f7ef fec5 	bl	80040ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014322:	e002      	b.n	801432a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8014324:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8014326:	f7ef fe3d 	bl	8003fa4 <HAL_UART_RxCpltCallback>
}
 801432a:	bf00      	nop
 801432c:	3770      	adds	r7, #112	; 0x70
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}

08014332 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014332:	b580      	push	{r7, lr}
 8014334:	b084      	sub	sp, #16
 8014336:	af00      	add	r7, sp, #0
 8014338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801433e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	2201      	movs	r2, #1
 8014344:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801434a:	2b01      	cmp	r3, #1
 801434c:	d109      	bne.n	8014362 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014354:	085b      	lsrs	r3, r3, #1
 8014356:	b29b      	uxth	r3, r3
 8014358:	4619      	mov	r1, r3
 801435a:	68f8      	ldr	r0, [r7, #12]
 801435c:	f7ef fea6 	bl	80040ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014360:	e002      	b.n	8014368 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8014362:	68f8      	ldr	r0, [r7, #12]
 8014364:	f7fe fe84 	bl	8013070 <HAL_UART_RxHalfCpltCallback>
}
 8014368:	bf00      	nop
 801436a:	3710      	adds	r7, #16
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b086      	sub	sp, #24
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801437c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014384:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801438c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	689b      	ldr	r3, [r3, #8]
 8014394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014398:	2b80      	cmp	r3, #128	; 0x80
 801439a:	d109      	bne.n	80143b0 <UART_DMAError+0x40>
 801439c:	693b      	ldr	r3, [r7, #16]
 801439e:	2b21      	cmp	r3, #33	; 0x21
 80143a0:	d106      	bne.n	80143b0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	2200      	movs	r2, #0
 80143a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80143aa:	6978      	ldr	r0, [r7, #20]
 80143ac:	f7ff fe2c 	bl	8014008 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80143b0:	697b      	ldr	r3, [r7, #20]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	689b      	ldr	r3, [r3, #8]
 80143b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143ba:	2b40      	cmp	r3, #64	; 0x40
 80143bc:	d109      	bne.n	80143d2 <UART_DMAError+0x62>
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	2b22      	cmp	r3, #34	; 0x22
 80143c2:	d106      	bne.n	80143d2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80143c4:	697b      	ldr	r3, [r7, #20]
 80143c6:	2200      	movs	r2, #0
 80143c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80143cc:	6978      	ldr	r0, [r7, #20]
 80143ce:	f7ff fe5d 	bl	801408c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80143d8:	f043 0210 	orr.w	r2, r3, #16
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80143e2:	6978      	ldr	r0, [r7, #20]
 80143e4:	f7ef ff60 	bl	80042a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80143e8:	bf00      	nop
 80143ea:	3718      	adds	r7, #24
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}

080143f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b084      	sub	sp, #16
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	2200      	movs	r2, #0
 8014402:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	2200      	movs	r2, #0
 801440a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801440e:	68f8      	ldr	r0, [r7, #12]
 8014410:	f7ef ff4a 	bl	80042a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014414:	bf00      	nop
 8014416:	3710      	adds	r7, #16
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b088      	sub	sp, #32
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	e853 3f00 	ldrex	r3, [r3]
 8014430:	60bb      	str	r3, [r7, #8]
   return(result);
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014438:	61fb      	str	r3, [r7, #28]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	461a      	mov	r2, r3
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	61bb      	str	r3, [r7, #24]
 8014444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014446:	6979      	ldr	r1, [r7, #20]
 8014448:	69ba      	ldr	r2, [r7, #24]
 801444a:	e841 2300 	strex	r3, r2, [r1]
 801444e:	613b      	str	r3, [r7, #16]
   return(result);
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d1e6      	bne.n	8014424 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2220      	movs	r2, #32
 801445a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	2200      	movs	r2, #0
 8014462:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	f7ef fd85 	bl	8003f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801446a:	bf00      	nop
 801446c:	3720      	adds	r7, #32
 801446e:	46bd      	mov	sp, r7
 8014470:	bd80      	pop	{r7, pc}

08014472 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014472:	b480      	push	{r7}
 8014474:	b083      	sub	sp, #12
 8014476:	af00      	add	r7, sp, #0
 8014478:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801447a:	bf00      	nop
 801447c:	370c      	adds	r7, #12
 801447e:	46bd      	mov	sp, r7
 8014480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014484:	4770      	bx	lr

08014486 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014486:	b480      	push	{r7}
 8014488:	b083      	sub	sp, #12
 801448a:	af00      	add	r7, sp, #0
 801448c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801448e:	bf00      	nop
 8014490:	370c      	adds	r7, #12
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr

0801449a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801449a:	b480      	push	{r7}
 801449c:	b083      	sub	sp, #12
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80144a2:	bf00      	nop
 80144a4:	370c      	adds	r7, #12
 80144a6:	46bd      	mov	sp, r7
 80144a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ac:	4770      	bx	lr

080144ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80144ae:	b480      	push	{r7}
 80144b0:	b085      	sub	sp, #20
 80144b2:	af00      	add	r7, sp, #0
 80144b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80144bc:	2b01      	cmp	r3, #1
 80144be:	d101      	bne.n	80144c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80144c0:	2302      	movs	r3, #2
 80144c2:	e027      	b.n	8014514 <HAL_UARTEx_DisableFifoMode+0x66>
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2201      	movs	r2, #1
 80144c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2224      	movs	r2, #36	; 0x24
 80144d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	681a      	ldr	r2, [r3, #0]
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	f022 0201 	bic.w	r2, r2, #1
 80144ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80144f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2200      	movs	r2, #0
 80144f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	68fa      	ldr	r2, [r7, #12]
 8014500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	2220      	movs	r2, #32
 8014506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2200      	movs	r2, #0
 801450e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014512:	2300      	movs	r3, #0
}
 8014514:	4618      	mov	r0, r3
 8014516:	3714      	adds	r7, #20
 8014518:	46bd      	mov	sp, r7
 801451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451e:	4770      	bx	lr

08014520 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014530:	2b01      	cmp	r3, #1
 8014532:	d101      	bne.n	8014538 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014534:	2302      	movs	r3, #2
 8014536:	e02d      	b.n	8014594 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2201      	movs	r2, #1
 801453c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2224      	movs	r2, #36	; 0x24
 8014544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	681a      	ldr	r2, [r3, #0]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	f022 0201 	bic.w	r2, r2, #1
 801455e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	689b      	ldr	r3, [r3, #8]
 8014566:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	683a      	ldr	r2, [r7, #0]
 8014570:	430a      	orrs	r2, r1
 8014572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f000 f8a3 	bl	80146c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	68fa      	ldr	r2, [r7, #12]
 8014580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2220      	movs	r2, #32
 8014586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2200      	movs	r2, #0
 801458e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014592:	2300      	movs	r3, #0
}
 8014594:	4618      	mov	r0, r3
 8014596:	3710      	adds	r7, #16
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}

0801459c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b084      	sub	sp, #16
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80145ac:	2b01      	cmp	r3, #1
 80145ae:	d101      	bne.n	80145b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80145b0:	2302      	movs	r3, #2
 80145b2:	e02d      	b.n	8014610 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2201      	movs	r2, #1
 80145b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2224      	movs	r2, #36	; 0x24
 80145c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	681a      	ldr	r2, [r3, #0]
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	f022 0201 	bic.w	r2, r2, #1
 80145da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	689b      	ldr	r3, [r3, #8]
 80145e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	683a      	ldr	r2, [r7, #0]
 80145ec:	430a      	orrs	r2, r1
 80145ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f000 f865 	bl	80146c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	68fa      	ldr	r2, [r7, #12]
 80145fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2220      	movs	r2, #32
 8014602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2200      	movs	r2, #0
 801460a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801460e:	2300      	movs	r3, #0
}
 8014610:	4618      	mov	r0, r3
 8014612:	3710      	adds	r7, #16
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}

08014618 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b08c      	sub	sp, #48	; 0x30
 801461c:	af00      	add	r7, sp, #0
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	60b9      	str	r1, [r7, #8]
 8014622:	4613      	mov	r3, r2
 8014624:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801462c:	2b20      	cmp	r3, #32
 801462e:	d142      	bne.n	80146b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d002      	beq.n	801463c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8014636:	88fb      	ldrh	r3, [r7, #6]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d101      	bne.n	8014640 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 801463c:	2301      	movs	r3, #1
 801463e:	e03b      	b.n	80146b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	2201      	movs	r2, #1
 8014644:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	2200      	movs	r2, #0
 801464a:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801464c:	88fb      	ldrh	r3, [r7, #6]
 801464e:	461a      	mov	r2, r3
 8014650:	68b9      	ldr	r1, [r7, #8]
 8014652:	68f8      	ldr	r0, [r7, #12]
 8014654:	f7ff fc32 	bl	8013ebc <UART_Start_Receive_DMA>
 8014658:	4603      	mov	r3, r0
 801465a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801465e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014662:	2b00      	cmp	r3, #0
 8014664:	d124      	bne.n	80146b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801466a:	2b01      	cmp	r3, #1
 801466c:	d11d      	bne.n	80146aa <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2210      	movs	r2, #16
 8014674:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801467c:	69bb      	ldr	r3, [r7, #24]
 801467e:	e853 3f00 	ldrex	r3, [r3]
 8014682:	617b      	str	r3, [r7, #20]
   return(result);
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	f043 0310 	orr.w	r3, r3, #16
 801468a:	62bb      	str	r3, [r7, #40]	; 0x28
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	461a      	mov	r2, r3
 8014692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014694:	627b      	str	r3, [r7, #36]	; 0x24
 8014696:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014698:	6a39      	ldr	r1, [r7, #32]
 801469a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801469c:	e841 2300 	strex	r3, r2, [r1]
 80146a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d1e6      	bne.n	8014676 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80146a8:	e002      	b.n	80146b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80146aa:	2301      	movs	r3, #1
 80146ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80146b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146b4:	e000      	b.n	80146b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80146b6:	2302      	movs	r3, #2
  }
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3730      	adds	r7, #48	; 0x30
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}

080146c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80146c0:	b480      	push	{r7}
 80146c2:	b085      	sub	sp, #20
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d108      	bne.n	80146e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2201      	movs	r2, #1
 80146d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2201      	movs	r2, #1
 80146dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80146e0:	e031      	b.n	8014746 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80146e2:	2310      	movs	r3, #16
 80146e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80146e6:	2310      	movs	r3, #16
 80146e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	689b      	ldr	r3, [r3, #8]
 80146f0:	0e5b      	lsrs	r3, r3, #25
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	f003 0307 	and.w	r3, r3, #7
 80146f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	689b      	ldr	r3, [r3, #8]
 8014700:	0f5b      	lsrs	r3, r3, #29
 8014702:	b2db      	uxtb	r3, r3
 8014704:	f003 0307 	and.w	r3, r3, #7
 8014708:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801470a:	7bbb      	ldrb	r3, [r7, #14]
 801470c:	7b3a      	ldrb	r2, [r7, #12]
 801470e:	4911      	ldr	r1, [pc, #68]	; (8014754 <UARTEx_SetNbDataToProcess+0x94>)
 8014710:	5c8a      	ldrb	r2, [r1, r2]
 8014712:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014716:	7b3a      	ldrb	r2, [r7, #12]
 8014718:	490f      	ldr	r1, [pc, #60]	; (8014758 <UARTEx_SetNbDataToProcess+0x98>)
 801471a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801471c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014720:	b29a      	uxth	r2, r3
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014728:	7bfb      	ldrb	r3, [r7, #15]
 801472a:	7b7a      	ldrb	r2, [r7, #13]
 801472c:	4909      	ldr	r1, [pc, #36]	; (8014754 <UARTEx_SetNbDataToProcess+0x94>)
 801472e:	5c8a      	ldrb	r2, [r1, r2]
 8014730:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014734:	7b7a      	ldrb	r2, [r7, #13]
 8014736:	4908      	ldr	r1, [pc, #32]	; (8014758 <UARTEx_SetNbDataToProcess+0x98>)
 8014738:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801473a:	fb93 f3f2 	sdiv	r3, r3, r2
 801473e:	b29a      	uxth	r2, r3
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014746:	bf00      	nop
 8014748:	3714      	adds	r7, #20
 801474a:	46bd      	mov	sp, r7
 801474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014750:	4770      	bx	lr
 8014752:	bf00      	nop
 8014754:	08017698 	.word	0x08017698
 8014758:	080176a0 	.word	0x080176a0

0801475c <_ZdlPvj>:
 801475c:	f000 b813 	b.w	8014786 <_ZdlPv>

08014760 <_Znwj>:
 8014760:	2801      	cmp	r0, #1
 8014762:	bf38      	it	cc
 8014764:	2001      	movcc	r0, #1
 8014766:	b510      	push	{r4, lr}
 8014768:	4604      	mov	r4, r0
 801476a:	4620      	mov	r0, r4
 801476c:	f000 f81e 	bl	80147ac <malloc>
 8014770:	b100      	cbz	r0, 8014774 <_Znwj+0x14>
 8014772:	bd10      	pop	{r4, pc}
 8014774:	f000 f80a 	bl	801478c <_ZSt15get_new_handlerv>
 8014778:	b908      	cbnz	r0, 801477e <_Znwj+0x1e>
 801477a:	f000 f80f 	bl	801479c <abort>
 801477e:	4780      	blx	r0
 8014780:	e7f3      	b.n	801476a <_Znwj+0xa>

08014782 <_Znaj>:
 8014782:	f7ff bfed 	b.w	8014760 <_Znwj>

08014786 <_ZdlPv>:
 8014786:	f000 b819 	b.w	80147bc <free>
	...

0801478c <_ZSt15get_new_handlerv>:
 801478c:	4b02      	ldr	r3, [pc, #8]	; (8014798 <_ZSt15get_new_handlerv+0xc>)
 801478e:	6818      	ldr	r0, [r3, #0]
 8014790:	f3bf 8f5b 	dmb	ish
 8014794:	4770      	bx	lr
 8014796:	bf00      	nop
 8014798:	2400461c 	.word	0x2400461c

0801479c <abort>:
 801479c:	b508      	push	{r3, lr}
 801479e:	2006      	movs	r0, #6
 80147a0:	f000 ff6c 	bl	801567c <raise>
 80147a4:	2001      	movs	r0, #1
 80147a6:	f7f2 fbaf 	bl	8006f08 <_exit>
	...

080147ac <malloc>:
 80147ac:	4b02      	ldr	r3, [pc, #8]	; (80147b8 <malloc+0xc>)
 80147ae:	4601      	mov	r1, r0
 80147b0:	6818      	ldr	r0, [r3, #0]
 80147b2:	f000 b82b 	b.w	801480c <_malloc_r>
 80147b6:	bf00      	nop
 80147b8:	240000d8 	.word	0x240000d8

080147bc <free>:
 80147bc:	4b02      	ldr	r3, [pc, #8]	; (80147c8 <free+0xc>)
 80147be:	4601      	mov	r1, r0
 80147c0:	6818      	ldr	r0, [r3, #0]
 80147c2:	f001 be01 	b.w	80163c8 <_free_r>
 80147c6:	bf00      	nop
 80147c8:	240000d8 	.word	0x240000d8

080147cc <sbrk_aligned>:
 80147cc:	b570      	push	{r4, r5, r6, lr}
 80147ce:	4e0e      	ldr	r6, [pc, #56]	; (8014808 <sbrk_aligned+0x3c>)
 80147d0:	460c      	mov	r4, r1
 80147d2:	6831      	ldr	r1, [r6, #0]
 80147d4:	4605      	mov	r5, r0
 80147d6:	b911      	cbnz	r1, 80147de <sbrk_aligned+0x12>
 80147d8:	f000 ffa4 	bl	8015724 <_sbrk_r>
 80147dc:	6030      	str	r0, [r6, #0]
 80147de:	4621      	mov	r1, r4
 80147e0:	4628      	mov	r0, r5
 80147e2:	f000 ff9f 	bl	8015724 <_sbrk_r>
 80147e6:	1c43      	adds	r3, r0, #1
 80147e8:	d00a      	beq.n	8014800 <sbrk_aligned+0x34>
 80147ea:	1cc4      	adds	r4, r0, #3
 80147ec:	f024 0403 	bic.w	r4, r4, #3
 80147f0:	42a0      	cmp	r0, r4
 80147f2:	d007      	beq.n	8014804 <sbrk_aligned+0x38>
 80147f4:	1a21      	subs	r1, r4, r0
 80147f6:	4628      	mov	r0, r5
 80147f8:	f000 ff94 	bl	8015724 <_sbrk_r>
 80147fc:	3001      	adds	r0, #1
 80147fe:	d101      	bne.n	8014804 <sbrk_aligned+0x38>
 8014800:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014804:	4620      	mov	r0, r4
 8014806:	bd70      	pop	{r4, r5, r6, pc}
 8014808:	24004624 	.word	0x24004624

0801480c <_malloc_r>:
 801480c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014810:	1ccd      	adds	r5, r1, #3
 8014812:	f025 0503 	bic.w	r5, r5, #3
 8014816:	3508      	adds	r5, #8
 8014818:	2d0c      	cmp	r5, #12
 801481a:	bf38      	it	cc
 801481c:	250c      	movcc	r5, #12
 801481e:	2d00      	cmp	r5, #0
 8014820:	4607      	mov	r7, r0
 8014822:	db01      	blt.n	8014828 <_malloc_r+0x1c>
 8014824:	42a9      	cmp	r1, r5
 8014826:	d905      	bls.n	8014834 <_malloc_r+0x28>
 8014828:	230c      	movs	r3, #12
 801482a:	603b      	str	r3, [r7, #0]
 801482c:	2600      	movs	r6, #0
 801482e:	4630      	mov	r0, r6
 8014830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014834:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014908 <_malloc_r+0xfc>
 8014838:	f000 f868 	bl	801490c <__malloc_lock>
 801483c:	f8d8 3000 	ldr.w	r3, [r8]
 8014840:	461c      	mov	r4, r3
 8014842:	bb5c      	cbnz	r4, 801489c <_malloc_r+0x90>
 8014844:	4629      	mov	r1, r5
 8014846:	4638      	mov	r0, r7
 8014848:	f7ff ffc0 	bl	80147cc <sbrk_aligned>
 801484c:	1c43      	adds	r3, r0, #1
 801484e:	4604      	mov	r4, r0
 8014850:	d155      	bne.n	80148fe <_malloc_r+0xf2>
 8014852:	f8d8 4000 	ldr.w	r4, [r8]
 8014856:	4626      	mov	r6, r4
 8014858:	2e00      	cmp	r6, #0
 801485a:	d145      	bne.n	80148e8 <_malloc_r+0xdc>
 801485c:	2c00      	cmp	r4, #0
 801485e:	d048      	beq.n	80148f2 <_malloc_r+0xe6>
 8014860:	6823      	ldr	r3, [r4, #0]
 8014862:	4631      	mov	r1, r6
 8014864:	4638      	mov	r0, r7
 8014866:	eb04 0903 	add.w	r9, r4, r3
 801486a:	f000 ff5b 	bl	8015724 <_sbrk_r>
 801486e:	4581      	cmp	r9, r0
 8014870:	d13f      	bne.n	80148f2 <_malloc_r+0xe6>
 8014872:	6821      	ldr	r1, [r4, #0]
 8014874:	1a6d      	subs	r5, r5, r1
 8014876:	4629      	mov	r1, r5
 8014878:	4638      	mov	r0, r7
 801487a:	f7ff ffa7 	bl	80147cc <sbrk_aligned>
 801487e:	3001      	adds	r0, #1
 8014880:	d037      	beq.n	80148f2 <_malloc_r+0xe6>
 8014882:	6823      	ldr	r3, [r4, #0]
 8014884:	442b      	add	r3, r5
 8014886:	6023      	str	r3, [r4, #0]
 8014888:	f8d8 3000 	ldr.w	r3, [r8]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d038      	beq.n	8014902 <_malloc_r+0xf6>
 8014890:	685a      	ldr	r2, [r3, #4]
 8014892:	42a2      	cmp	r2, r4
 8014894:	d12b      	bne.n	80148ee <_malloc_r+0xe2>
 8014896:	2200      	movs	r2, #0
 8014898:	605a      	str	r2, [r3, #4]
 801489a:	e00f      	b.n	80148bc <_malloc_r+0xb0>
 801489c:	6822      	ldr	r2, [r4, #0]
 801489e:	1b52      	subs	r2, r2, r5
 80148a0:	d41f      	bmi.n	80148e2 <_malloc_r+0xd6>
 80148a2:	2a0b      	cmp	r2, #11
 80148a4:	d917      	bls.n	80148d6 <_malloc_r+0xca>
 80148a6:	1961      	adds	r1, r4, r5
 80148a8:	42a3      	cmp	r3, r4
 80148aa:	6025      	str	r5, [r4, #0]
 80148ac:	bf18      	it	ne
 80148ae:	6059      	strne	r1, [r3, #4]
 80148b0:	6863      	ldr	r3, [r4, #4]
 80148b2:	bf08      	it	eq
 80148b4:	f8c8 1000 	streq.w	r1, [r8]
 80148b8:	5162      	str	r2, [r4, r5]
 80148ba:	604b      	str	r3, [r1, #4]
 80148bc:	4638      	mov	r0, r7
 80148be:	f104 060b 	add.w	r6, r4, #11
 80148c2:	f000 f829 	bl	8014918 <__malloc_unlock>
 80148c6:	f026 0607 	bic.w	r6, r6, #7
 80148ca:	1d23      	adds	r3, r4, #4
 80148cc:	1af2      	subs	r2, r6, r3
 80148ce:	d0ae      	beq.n	801482e <_malloc_r+0x22>
 80148d0:	1b9b      	subs	r3, r3, r6
 80148d2:	50a3      	str	r3, [r4, r2]
 80148d4:	e7ab      	b.n	801482e <_malloc_r+0x22>
 80148d6:	42a3      	cmp	r3, r4
 80148d8:	6862      	ldr	r2, [r4, #4]
 80148da:	d1dd      	bne.n	8014898 <_malloc_r+0x8c>
 80148dc:	f8c8 2000 	str.w	r2, [r8]
 80148e0:	e7ec      	b.n	80148bc <_malloc_r+0xb0>
 80148e2:	4623      	mov	r3, r4
 80148e4:	6864      	ldr	r4, [r4, #4]
 80148e6:	e7ac      	b.n	8014842 <_malloc_r+0x36>
 80148e8:	4634      	mov	r4, r6
 80148ea:	6876      	ldr	r6, [r6, #4]
 80148ec:	e7b4      	b.n	8014858 <_malloc_r+0x4c>
 80148ee:	4613      	mov	r3, r2
 80148f0:	e7cc      	b.n	801488c <_malloc_r+0x80>
 80148f2:	230c      	movs	r3, #12
 80148f4:	603b      	str	r3, [r7, #0]
 80148f6:	4638      	mov	r0, r7
 80148f8:	f000 f80e 	bl	8014918 <__malloc_unlock>
 80148fc:	e797      	b.n	801482e <_malloc_r+0x22>
 80148fe:	6025      	str	r5, [r4, #0]
 8014900:	e7dc      	b.n	80148bc <_malloc_r+0xb0>
 8014902:	605b      	str	r3, [r3, #4]
 8014904:	deff      	udf	#255	; 0xff
 8014906:	bf00      	nop
 8014908:	24004620 	.word	0x24004620

0801490c <__malloc_lock>:
 801490c:	4801      	ldr	r0, [pc, #4]	; (8014914 <__malloc_lock+0x8>)
 801490e:	f000 bf56 	b.w	80157be <__retarget_lock_acquire_recursive>
 8014912:	bf00      	nop
 8014914:	24004768 	.word	0x24004768

08014918 <__malloc_unlock>:
 8014918:	4801      	ldr	r0, [pc, #4]	; (8014920 <__malloc_unlock+0x8>)
 801491a:	f000 bf51 	b.w	80157c0 <__retarget_lock_release_recursive>
 801491e:	bf00      	nop
 8014920:	24004768 	.word	0x24004768

08014924 <realloc>:
 8014924:	4b02      	ldr	r3, [pc, #8]	; (8014930 <realloc+0xc>)
 8014926:	460a      	mov	r2, r1
 8014928:	4601      	mov	r1, r0
 801492a:	6818      	ldr	r0, [r3, #0]
 801492c:	f000 b802 	b.w	8014934 <_realloc_r>
 8014930:	240000d8 	.word	0x240000d8

08014934 <_realloc_r>:
 8014934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014938:	4680      	mov	r8, r0
 801493a:	4614      	mov	r4, r2
 801493c:	460e      	mov	r6, r1
 801493e:	b921      	cbnz	r1, 801494a <_realloc_r+0x16>
 8014940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014944:	4611      	mov	r1, r2
 8014946:	f7ff bf61 	b.w	801480c <_malloc_r>
 801494a:	b92a      	cbnz	r2, 8014958 <_realloc_r+0x24>
 801494c:	f001 fd3c 	bl	80163c8 <_free_r>
 8014950:	4625      	mov	r5, r4
 8014952:	4628      	mov	r0, r5
 8014954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014958:	f002 f8fe 	bl	8016b58 <_malloc_usable_size_r>
 801495c:	4284      	cmp	r4, r0
 801495e:	4607      	mov	r7, r0
 8014960:	d802      	bhi.n	8014968 <_realloc_r+0x34>
 8014962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014966:	d812      	bhi.n	801498e <_realloc_r+0x5a>
 8014968:	4621      	mov	r1, r4
 801496a:	4640      	mov	r0, r8
 801496c:	f7ff ff4e 	bl	801480c <_malloc_r>
 8014970:	4605      	mov	r5, r0
 8014972:	2800      	cmp	r0, #0
 8014974:	d0ed      	beq.n	8014952 <_realloc_r+0x1e>
 8014976:	42bc      	cmp	r4, r7
 8014978:	4622      	mov	r2, r4
 801497a:	4631      	mov	r1, r6
 801497c:	bf28      	it	cs
 801497e:	463a      	movcs	r2, r7
 8014980:	f000 ff1f 	bl	80157c2 <memcpy>
 8014984:	4631      	mov	r1, r6
 8014986:	4640      	mov	r0, r8
 8014988:	f001 fd1e 	bl	80163c8 <_free_r>
 801498c:	e7e1      	b.n	8014952 <_realloc_r+0x1e>
 801498e:	4635      	mov	r5, r6
 8014990:	e7df      	b.n	8014952 <_realloc_r+0x1e>

08014992 <__cvt>:
 8014992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014994:	ed2d 8b02 	vpush	{d8}
 8014998:	eeb0 8b40 	vmov.f64	d8, d0
 801499c:	b085      	sub	sp, #20
 801499e:	4617      	mov	r7, r2
 80149a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80149a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80149a4:	ee18 2a90 	vmov	r2, s17
 80149a8:	f025 0520 	bic.w	r5, r5, #32
 80149ac:	2a00      	cmp	r2, #0
 80149ae:	bfb6      	itet	lt
 80149b0:	222d      	movlt	r2, #45	; 0x2d
 80149b2:	2200      	movge	r2, #0
 80149b4:	eeb1 8b40 	vneglt.f64	d8, d0
 80149b8:	2d46      	cmp	r5, #70	; 0x46
 80149ba:	460c      	mov	r4, r1
 80149bc:	701a      	strb	r2, [r3, #0]
 80149be:	d004      	beq.n	80149ca <__cvt+0x38>
 80149c0:	2d45      	cmp	r5, #69	; 0x45
 80149c2:	d100      	bne.n	80149c6 <__cvt+0x34>
 80149c4:	3401      	adds	r4, #1
 80149c6:	2102      	movs	r1, #2
 80149c8:	e000      	b.n	80149cc <__cvt+0x3a>
 80149ca:	2103      	movs	r1, #3
 80149cc:	ab03      	add	r3, sp, #12
 80149ce:	9301      	str	r3, [sp, #4]
 80149d0:	ab02      	add	r3, sp, #8
 80149d2:	9300      	str	r3, [sp, #0]
 80149d4:	4622      	mov	r2, r4
 80149d6:	4633      	mov	r3, r6
 80149d8:	eeb0 0b48 	vmov.f64	d0, d8
 80149dc:	f000 ff88 	bl	80158f0 <_dtoa_r>
 80149e0:	2d47      	cmp	r5, #71	; 0x47
 80149e2:	d101      	bne.n	80149e8 <__cvt+0x56>
 80149e4:	07fb      	lsls	r3, r7, #31
 80149e6:	d51a      	bpl.n	8014a1e <__cvt+0x8c>
 80149e8:	2d46      	cmp	r5, #70	; 0x46
 80149ea:	eb00 0204 	add.w	r2, r0, r4
 80149ee:	d10c      	bne.n	8014a0a <__cvt+0x78>
 80149f0:	7803      	ldrb	r3, [r0, #0]
 80149f2:	2b30      	cmp	r3, #48	; 0x30
 80149f4:	d107      	bne.n	8014a06 <__cvt+0x74>
 80149f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80149fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149fe:	bf1c      	itt	ne
 8014a00:	f1c4 0401 	rsbne	r4, r4, #1
 8014a04:	6034      	strne	r4, [r6, #0]
 8014a06:	6833      	ldr	r3, [r6, #0]
 8014a08:	441a      	add	r2, r3
 8014a0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a12:	bf08      	it	eq
 8014a14:	9203      	streq	r2, [sp, #12]
 8014a16:	2130      	movs	r1, #48	; 0x30
 8014a18:	9b03      	ldr	r3, [sp, #12]
 8014a1a:	4293      	cmp	r3, r2
 8014a1c:	d307      	bcc.n	8014a2e <__cvt+0x9c>
 8014a1e:	9b03      	ldr	r3, [sp, #12]
 8014a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a22:	1a1b      	subs	r3, r3, r0
 8014a24:	6013      	str	r3, [r2, #0]
 8014a26:	b005      	add	sp, #20
 8014a28:	ecbd 8b02 	vpop	{d8}
 8014a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a2e:	1c5c      	adds	r4, r3, #1
 8014a30:	9403      	str	r4, [sp, #12]
 8014a32:	7019      	strb	r1, [r3, #0]
 8014a34:	e7f0      	b.n	8014a18 <__cvt+0x86>

08014a36 <__exponent>:
 8014a36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a38:	4603      	mov	r3, r0
 8014a3a:	2900      	cmp	r1, #0
 8014a3c:	bfb8      	it	lt
 8014a3e:	4249      	neglt	r1, r1
 8014a40:	f803 2b02 	strb.w	r2, [r3], #2
 8014a44:	bfb4      	ite	lt
 8014a46:	222d      	movlt	r2, #45	; 0x2d
 8014a48:	222b      	movge	r2, #43	; 0x2b
 8014a4a:	2909      	cmp	r1, #9
 8014a4c:	7042      	strb	r2, [r0, #1]
 8014a4e:	dd2a      	ble.n	8014aa6 <__exponent+0x70>
 8014a50:	f10d 0207 	add.w	r2, sp, #7
 8014a54:	4617      	mov	r7, r2
 8014a56:	260a      	movs	r6, #10
 8014a58:	4694      	mov	ip, r2
 8014a5a:	fb91 f5f6 	sdiv	r5, r1, r6
 8014a5e:	fb06 1415 	mls	r4, r6, r5, r1
 8014a62:	3430      	adds	r4, #48	; 0x30
 8014a64:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014a68:	460c      	mov	r4, r1
 8014a6a:	2c63      	cmp	r4, #99	; 0x63
 8014a6c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8014a70:	4629      	mov	r1, r5
 8014a72:	dcf1      	bgt.n	8014a58 <__exponent+0x22>
 8014a74:	3130      	adds	r1, #48	; 0x30
 8014a76:	f1ac 0402 	sub.w	r4, ip, #2
 8014a7a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014a7e:	1c41      	adds	r1, r0, #1
 8014a80:	4622      	mov	r2, r4
 8014a82:	42ba      	cmp	r2, r7
 8014a84:	d30a      	bcc.n	8014a9c <__exponent+0x66>
 8014a86:	f10d 0209 	add.w	r2, sp, #9
 8014a8a:	eba2 020c 	sub.w	r2, r2, ip
 8014a8e:	42bc      	cmp	r4, r7
 8014a90:	bf88      	it	hi
 8014a92:	2200      	movhi	r2, #0
 8014a94:	4413      	add	r3, r2
 8014a96:	1a18      	subs	r0, r3, r0
 8014a98:	b003      	add	sp, #12
 8014a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a9c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014aa0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014aa4:	e7ed      	b.n	8014a82 <__exponent+0x4c>
 8014aa6:	2330      	movs	r3, #48	; 0x30
 8014aa8:	3130      	adds	r1, #48	; 0x30
 8014aaa:	7083      	strb	r3, [r0, #2]
 8014aac:	70c1      	strb	r1, [r0, #3]
 8014aae:	1d03      	adds	r3, r0, #4
 8014ab0:	e7f1      	b.n	8014a96 <__exponent+0x60>
 8014ab2:	0000      	movs	r0, r0
 8014ab4:	0000      	movs	r0, r0
	...

08014ab8 <_printf_float>:
 8014ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014abc:	b08b      	sub	sp, #44	; 0x2c
 8014abe:	460c      	mov	r4, r1
 8014ac0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014ac4:	4616      	mov	r6, r2
 8014ac6:	461f      	mov	r7, r3
 8014ac8:	4605      	mov	r5, r0
 8014aca:	f000 fddf 	bl	801568c <_localeconv_r>
 8014ace:	f8d0 b000 	ldr.w	fp, [r0]
 8014ad2:	4658      	mov	r0, fp
 8014ad4:	f7eb fc54 	bl	8000380 <strlen>
 8014ad8:	2300      	movs	r3, #0
 8014ada:	9308      	str	r3, [sp, #32]
 8014adc:	f8d8 3000 	ldr.w	r3, [r8]
 8014ae0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014ae4:	6822      	ldr	r2, [r4, #0]
 8014ae6:	3307      	adds	r3, #7
 8014ae8:	f023 0307 	bic.w	r3, r3, #7
 8014aec:	f103 0108 	add.w	r1, r3, #8
 8014af0:	f8c8 1000 	str.w	r1, [r8]
 8014af4:	ed93 0b00 	vldr	d0, [r3]
 8014af8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8014d58 <_printf_float+0x2a0>
 8014afc:	eeb0 7bc0 	vabs.f64	d7, d0
 8014b00:	eeb4 7b46 	vcmp.f64	d7, d6
 8014b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b08:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8014b0c:	4682      	mov	sl, r0
 8014b0e:	dd24      	ble.n	8014b5a <_printf_float+0xa2>
 8014b10:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b18:	d502      	bpl.n	8014b20 <_printf_float+0x68>
 8014b1a:	232d      	movs	r3, #45	; 0x2d
 8014b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b20:	498f      	ldr	r1, [pc, #572]	; (8014d60 <_printf_float+0x2a8>)
 8014b22:	4b90      	ldr	r3, [pc, #576]	; (8014d64 <_printf_float+0x2ac>)
 8014b24:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8014b28:	bf94      	ite	ls
 8014b2a:	4688      	movls	r8, r1
 8014b2c:	4698      	movhi	r8, r3
 8014b2e:	2303      	movs	r3, #3
 8014b30:	6123      	str	r3, [r4, #16]
 8014b32:	f022 0204 	bic.w	r2, r2, #4
 8014b36:	2300      	movs	r3, #0
 8014b38:	6022      	str	r2, [r4, #0]
 8014b3a:	9304      	str	r3, [sp, #16]
 8014b3c:	9700      	str	r7, [sp, #0]
 8014b3e:	4633      	mov	r3, r6
 8014b40:	aa09      	add	r2, sp, #36	; 0x24
 8014b42:	4621      	mov	r1, r4
 8014b44:	4628      	mov	r0, r5
 8014b46:	f000 f9d1 	bl	8014eec <_printf_common>
 8014b4a:	3001      	adds	r0, #1
 8014b4c:	f040 808a 	bne.w	8014c64 <_printf_float+0x1ac>
 8014b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b54:	b00b      	add	sp, #44	; 0x2c
 8014b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5a:	eeb4 0b40 	vcmp.f64	d0, d0
 8014b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b62:	d709      	bvc.n	8014b78 <_printf_float+0xc0>
 8014b64:	ee10 3a90 	vmov	r3, s1
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	bfbc      	itt	lt
 8014b6c:	232d      	movlt	r3, #45	; 0x2d
 8014b6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014b72:	497d      	ldr	r1, [pc, #500]	; (8014d68 <_printf_float+0x2b0>)
 8014b74:	4b7d      	ldr	r3, [pc, #500]	; (8014d6c <_printf_float+0x2b4>)
 8014b76:	e7d5      	b.n	8014b24 <_printf_float+0x6c>
 8014b78:	6863      	ldr	r3, [r4, #4]
 8014b7a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014b7e:	9104      	str	r1, [sp, #16]
 8014b80:	1c59      	adds	r1, r3, #1
 8014b82:	d13c      	bne.n	8014bfe <_printf_float+0x146>
 8014b84:	2306      	movs	r3, #6
 8014b86:	6063      	str	r3, [r4, #4]
 8014b88:	2300      	movs	r3, #0
 8014b8a:	9303      	str	r3, [sp, #12]
 8014b8c:	ab08      	add	r3, sp, #32
 8014b8e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014b92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014b96:	ab07      	add	r3, sp, #28
 8014b98:	6861      	ldr	r1, [r4, #4]
 8014b9a:	9300      	str	r3, [sp, #0]
 8014b9c:	6022      	str	r2, [r4, #0]
 8014b9e:	f10d 031b 	add.w	r3, sp, #27
 8014ba2:	4628      	mov	r0, r5
 8014ba4:	f7ff fef5 	bl	8014992 <__cvt>
 8014ba8:	9b04      	ldr	r3, [sp, #16]
 8014baa:	9907      	ldr	r1, [sp, #28]
 8014bac:	2b47      	cmp	r3, #71	; 0x47
 8014bae:	4680      	mov	r8, r0
 8014bb0:	d108      	bne.n	8014bc4 <_printf_float+0x10c>
 8014bb2:	1cc8      	adds	r0, r1, #3
 8014bb4:	db02      	blt.n	8014bbc <_printf_float+0x104>
 8014bb6:	6863      	ldr	r3, [r4, #4]
 8014bb8:	4299      	cmp	r1, r3
 8014bba:	dd41      	ble.n	8014c40 <_printf_float+0x188>
 8014bbc:	f1a9 0902 	sub.w	r9, r9, #2
 8014bc0:	fa5f f989 	uxtb.w	r9, r9
 8014bc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014bc8:	d820      	bhi.n	8014c0c <_printf_float+0x154>
 8014bca:	3901      	subs	r1, #1
 8014bcc:	464a      	mov	r2, r9
 8014bce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014bd2:	9107      	str	r1, [sp, #28]
 8014bd4:	f7ff ff2f 	bl	8014a36 <__exponent>
 8014bd8:	9a08      	ldr	r2, [sp, #32]
 8014bda:	9004      	str	r0, [sp, #16]
 8014bdc:	1813      	adds	r3, r2, r0
 8014bde:	2a01      	cmp	r2, #1
 8014be0:	6123      	str	r3, [r4, #16]
 8014be2:	dc02      	bgt.n	8014bea <_printf_float+0x132>
 8014be4:	6822      	ldr	r2, [r4, #0]
 8014be6:	07d2      	lsls	r2, r2, #31
 8014be8:	d501      	bpl.n	8014bee <_printf_float+0x136>
 8014bea:	3301      	adds	r3, #1
 8014bec:	6123      	str	r3, [r4, #16]
 8014bee:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d0a2      	beq.n	8014b3c <_printf_float+0x84>
 8014bf6:	232d      	movs	r3, #45	; 0x2d
 8014bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014bfc:	e79e      	b.n	8014b3c <_printf_float+0x84>
 8014bfe:	9904      	ldr	r1, [sp, #16]
 8014c00:	2947      	cmp	r1, #71	; 0x47
 8014c02:	d1c1      	bne.n	8014b88 <_printf_float+0xd0>
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d1bf      	bne.n	8014b88 <_printf_float+0xd0>
 8014c08:	2301      	movs	r3, #1
 8014c0a:	e7bc      	b.n	8014b86 <_printf_float+0xce>
 8014c0c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014c10:	d118      	bne.n	8014c44 <_printf_float+0x18c>
 8014c12:	2900      	cmp	r1, #0
 8014c14:	6863      	ldr	r3, [r4, #4]
 8014c16:	dd0b      	ble.n	8014c30 <_printf_float+0x178>
 8014c18:	6121      	str	r1, [r4, #16]
 8014c1a:	b913      	cbnz	r3, 8014c22 <_printf_float+0x16a>
 8014c1c:	6822      	ldr	r2, [r4, #0]
 8014c1e:	07d0      	lsls	r0, r2, #31
 8014c20:	d502      	bpl.n	8014c28 <_printf_float+0x170>
 8014c22:	3301      	adds	r3, #1
 8014c24:	440b      	add	r3, r1
 8014c26:	6123      	str	r3, [r4, #16]
 8014c28:	2300      	movs	r3, #0
 8014c2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8014c2c:	9304      	str	r3, [sp, #16]
 8014c2e:	e7de      	b.n	8014bee <_printf_float+0x136>
 8014c30:	b913      	cbnz	r3, 8014c38 <_printf_float+0x180>
 8014c32:	6822      	ldr	r2, [r4, #0]
 8014c34:	07d2      	lsls	r2, r2, #31
 8014c36:	d501      	bpl.n	8014c3c <_printf_float+0x184>
 8014c38:	3302      	adds	r3, #2
 8014c3a:	e7f4      	b.n	8014c26 <_printf_float+0x16e>
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	e7f2      	b.n	8014c26 <_printf_float+0x16e>
 8014c40:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014c44:	9b08      	ldr	r3, [sp, #32]
 8014c46:	4299      	cmp	r1, r3
 8014c48:	db05      	blt.n	8014c56 <_printf_float+0x19e>
 8014c4a:	6823      	ldr	r3, [r4, #0]
 8014c4c:	6121      	str	r1, [r4, #16]
 8014c4e:	07d8      	lsls	r0, r3, #31
 8014c50:	d5ea      	bpl.n	8014c28 <_printf_float+0x170>
 8014c52:	1c4b      	adds	r3, r1, #1
 8014c54:	e7e7      	b.n	8014c26 <_printf_float+0x16e>
 8014c56:	2900      	cmp	r1, #0
 8014c58:	bfd4      	ite	le
 8014c5a:	f1c1 0202 	rsble	r2, r1, #2
 8014c5e:	2201      	movgt	r2, #1
 8014c60:	4413      	add	r3, r2
 8014c62:	e7e0      	b.n	8014c26 <_printf_float+0x16e>
 8014c64:	6823      	ldr	r3, [r4, #0]
 8014c66:	055a      	lsls	r2, r3, #21
 8014c68:	d407      	bmi.n	8014c7a <_printf_float+0x1c2>
 8014c6a:	6923      	ldr	r3, [r4, #16]
 8014c6c:	4642      	mov	r2, r8
 8014c6e:	4631      	mov	r1, r6
 8014c70:	4628      	mov	r0, r5
 8014c72:	47b8      	blx	r7
 8014c74:	3001      	adds	r0, #1
 8014c76:	d12a      	bne.n	8014cce <_printf_float+0x216>
 8014c78:	e76a      	b.n	8014b50 <_printf_float+0x98>
 8014c7a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014c7e:	f240 80e0 	bls.w	8014e42 <_printf_float+0x38a>
 8014c82:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014c86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c8e:	d133      	bne.n	8014cf8 <_printf_float+0x240>
 8014c90:	4a37      	ldr	r2, [pc, #220]	; (8014d70 <_printf_float+0x2b8>)
 8014c92:	2301      	movs	r3, #1
 8014c94:	4631      	mov	r1, r6
 8014c96:	4628      	mov	r0, r5
 8014c98:	47b8      	blx	r7
 8014c9a:	3001      	adds	r0, #1
 8014c9c:	f43f af58 	beq.w	8014b50 <_printf_float+0x98>
 8014ca0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	db02      	blt.n	8014cae <_printf_float+0x1f6>
 8014ca8:	6823      	ldr	r3, [r4, #0]
 8014caa:	07d8      	lsls	r0, r3, #31
 8014cac:	d50f      	bpl.n	8014cce <_printf_float+0x216>
 8014cae:	4653      	mov	r3, sl
 8014cb0:	465a      	mov	r2, fp
 8014cb2:	4631      	mov	r1, r6
 8014cb4:	4628      	mov	r0, r5
 8014cb6:	47b8      	blx	r7
 8014cb8:	3001      	adds	r0, #1
 8014cba:	f43f af49 	beq.w	8014b50 <_printf_float+0x98>
 8014cbe:	f04f 0800 	mov.w	r8, #0
 8014cc2:	f104 091a 	add.w	r9, r4, #26
 8014cc6:	9b08      	ldr	r3, [sp, #32]
 8014cc8:	3b01      	subs	r3, #1
 8014cca:	4543      	cmp	r3, r8
 8014ccc:	dc09      	bgt.n	8014ce2 <_printf_float+0x22a>
 8014cce:	6823      	ldr	r3, [r4, #0]
 8014cd0:	079b      	lsls	r3, r3, #30
 8014cd2:	f100 8106 	bmi.w	8014ee2 <_printf_float+0x42a>
 8014cd6:	68e0      	ldr	r0, [r4, #12]
 8014cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cda:	4298      	cmp	r0, r3
 8014cdc:	bfb8      	it	lt
 8014cde:	4618      	movlt	r0, r3
 8014ce0:	e738      	b.n	8014b54 <_printf_float+0x9c>
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	464a      	mov	r2, r9
 8014ce6:	4631      	mov	r1, r6
 8014ce8:	4628      	mov	r0, r5
 8014cea:	47b8      	blx	r7
 8014cec:	3001      	adds	r0, #1
 8014cee:	f43f af2f 	beq.w	8014b50 <_printf_float+0x98>
 8014cf2:	f108 0801 	add.w	r8, r8, #1
 8014cf6:	e7e6      	b.n	8014cc6 <_printf_float+0x20e>
 8014cf8:	9b07      	ldr	r3, [sp, #28]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	dc3a      	bgt.n	8014d74 <_printf_float+0x2bc>
 8014cfe:	4a1c      	ldr	r2, [pc, #112]	; (8014d70 <_printf_float+0x2b8>)
 8014d00:	2301      	movs	r3, #1
 8014d02:	4631      	mov	r1, r6
 8014d04:	4628      	mov	r0, r5
 8014d06:	47b8      	blx	r7
 8014d08:	3001      	adds	r0, #1
 8014d0a:	f43f af21 	beq.w	8014b50 <_printf_float+0x98>
 8014d0e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014d12:	4313      	orrs	r3, r2
 8014d14:	d102      	bne.n	8014d1c <_printf_float+0x264>
 8014d16:	6823      	ldr	r3, [r4, #0]
 8014d18:	07d9      	lsls	r1, r3, #31
 8014d1a:	d5d8      	bpl.n	8014cce <_printf_float+0x216>
 8014d1c:	4653      	mov	r3, sl
 8014d1e:	465a      	mov	r2, fp
 8014d20:	4631      	mov	r1, r6
 8014d22:	4628      	mov	r0, r5
 8014d24:	47b8      	blx	r7
 8014d26:	3001      	adds	r0, #1
 8014d28:	f43f af12 	beq.w	8014b50 <_printf_float+0x98>
 8014d2c:	f04f 0900 	mov.w	r9, #0
 8014d30:	f104 0a1a 	add.w	sl, r4, #26
 8014d34:	9b07      	ldr	r3, [sp, #28]
 8014d36:	425b      	negs	r3, r3
 8014d38:	454b      	cmp	r3, r9
 8014d3a:	dc01      	bgt.n	8014d40 <_printf_float+0x288>
 8014d3c:	9b08      	ldr	r3, [sp, #32]
 8014d3e:	e795      	b.n	8014c6c <_printf_float+0x1b4>
 8014d40:	2301      	movs	r3, #1
 8014d42:	4652      	mov	r2, sl
 8014d44:	4631      	mov	r1, r6
 8014d46:	4628      	mov	r0, r5
 8014d48:	47b8      	blx	r7
 8014d4a:	3001      	adds	r0, #1
 8014d4c:	f43f af00 	beq.w	8014b50 <_printf_float+0x98>
 8014d50:	f109 0901 	add.w	r9, r9, #1
 8014d54:	e7ee      	b.n	8014d34 <_printf_float+0x27c>
 8014d56:	bf00      	nop
 8014d58:	ffffffff 	.word	0xffffffff
 8014d5c:	7fefffff 	.word	0x7fefffff
 8014d60:	080176a8 	.word	0x080176a8
 8014d64:	080176ac 	.word	0x080176ac
 8014d68:	080176b0 	.word	0x080176b0
 8014d6c:	080176b4 	.word	0x080176b4
 8014d70:	080176b8 	.word	0x080176b8
 8014d74:	9a08      	ldr	r2, [sp, #32]
 8014d76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d78:	429a      	cmp	r2, r3
 8014d7a:	bfa8      	it	ge
 8014d7c:	461a      	movge	r2, r3
 8014d7e:	2a00      	cmp	r2, #0
 8014d80:	4691      	mov	r9, r2
 8014d82:	dc38      	bgt.n	8014df6 <_printf_float+0x33e>
 8014d84:	2300      	movs	r3, #0
 8014d86:	9305      	str	r3, [sp, #20]
 8014d88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d8c:	f104 021a 	add.w	r2, r4, #26
 8014d90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d92:	9905      	ldr	r1, [sp, #20]
 8014d94:	9304      	str	r3, [sp, #16]
 8014d96:	eba3 0309 	sub.w	r3, r3, r9
 8014d9a:	428b      	cmp	r3, r1
 8014d9c:	dc33      	bgt.n	8014e06 <_printf_float+0x34e>
 8014d9e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014da2:	429a      	cmp	r2, r3
 8014da4:	db3c      	blt.n	8014e20 <_printf_float+0x368>
 8014da6:	6823      	ldr	r3, [r4, #0]
 8014da8:	07da      	lsls	r2, r3, #31
 8014daa:	d439      	bmi.n	8014e20 <_printf_float+0x368>
 8014dac:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014db0:	eba2 0903 	sub.w	r9, r2, r3
 8014db4:	9b04      	ldr	r3, [sp, #16]
 8014db6:	1ad2      	subs	r2, r2, r3
 8014db8:	4591      	cmp	r9, r2
 8014dba:	bfa8      	it	ge
 8014dbc:	4691      	movge	r9, r2
 8014dbe:	f1b9 0f00 	cmp.w	r9, #0
 8014dc2:	dc35      	bgt.n	8014e30 <_printf_float+0x378>
 8014dc4:	f04f 0800 	mov.w	r8, #0
 8014dc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014dcc:	f104 0a1a 	add.w	sl, r4, #26
 8014dd0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014dd4:	1a9b      	subs	r3, r3, r2
 8014dd6:	eba3 0309 	sub.w	r3, r3, r9
 8014dda:	4543      	cmp	r3, r8
 8014ddc:	f77f af77 	ble.w	8014cce <_printf_float+0x216>
 8014de0:	2301      	movs	r3, #1
 8014de2:	4652      	mov	r2, sl
 8014de4:	4631      	mov	r1, r6
 8014de6:	4628      	mov	r0, r5
 8014de8:	47b8      	blx	r7
 8014dea:	3001      	adds	r0, #1
 8014dec:	f43f aeb0 	beq.w	8014b50 <_printf_float+0x98>
 8014df0:	f108 0801 	add.w	r8, r8, #1
 8014df4:	e7ec      	b.n	8014dd0 <_printf_float+0x318>
 8014df6:	4613      	mov	r3, r2
 8014df8:	4631      	mov	r1, r6
 8014dfa:	4642      	mov	r2, r8
 8014dfc:	4628      	mov	r0, r5
 8014dfe:	47b8      	blx	r7
 8014e00:	3001      	adds	r0, #1
 8014e02:	d1bf      	bne.n	8014d84 <_printf_float+0x2cc>
 8014e04:	e6a4      	b.n	8014b50 <_printf_float+0x98>
 8014e06:	2301      	movs	r3, #1
 8014e08:	4631      	mov	r1, r6
 8014e0a:	4628      	mov	r0, r5
 8014e0c:	9204      	str	r2, [sp, #16]
 8014e0e:	47b8      	blx	r7
 8014e10:	3001      	adds	r0, #1
 8014e12:	f43f ae9d 	beq.w	8014b50 <_printf_float+0x98>
 8014e16:	9b05      	ldr	r3, [sp, #20]
 8014e18:	9a04      	ldr	r2, [sp, #16]
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	9305      	str	r3, [sp, #20]
 8014e1e:	e7b7      	b.n	8014d90 <_printf_float+0x2d8>
 8014e20:	4653      	mov	r3, sl
 8014e22:	465a      	mov	r2, fp
 8014e24:	4631      	mov	r1, r6
 8014e26:	4628      	mov	r0, r5
 8014e28:	47b8      	blx	r7
 8014e2a:	3001      	adds	r0, #1
 8014e2c:	d1be      	bne.n	8014dac <_printf_float+0x2f4>
 8014e2e:	e68f      	b.n	8014b50 <_printf_float+0x98>
 8014e30:	9a04      	ldr	r2, [sp, #16]
 8014e32:	464b      	mov	r3, r9
 8014e34:	4442      	add	r2, r8
 8014e36:	4631      	mov	r1, r6
 8014e38:	4628      	mov	r0, r5
 8014e3a:	47b8      	blx	r7
 8014e3c:	3001      	adds	r0, #1
 8014e3e:	d1c1      	bne.n	8014dc4 <_printf_float+0x30c>
 8014e40:	e686      	b.n	8014b50 <_printf_float+0x98>
 8014e42:	9a08      	ldr	r2, [sp, #32]
 8014e44:	2a01      	cmp	r2, #1
 8014e46:	dc01      	bgt.n	8014e4c <_printf_float+0x394>
 8014e48:	07db      	lsls	r3, r3, #31
 8014e4a:	d537      	bpl.n	8014ebc <_printf_float+0x404>
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	4642      	mov	r2, r8
 8014e50:	4631      	mov	r1, r6
 8014e52:	4628      	mov	r0, r5
 8014e54:	47b8      	blx	r7
 8014e56:	3001      	adds	r0, #1
 8014e58:	f43f ae7a 	beq.w	8014b50 <_printf_float+0x98>
 8014e5c:	4653      	mov	r3, sl
 8014e5e:	465a      	mov	r2, fp
 8014e60:	4631      	mov	r1, r6
 8014e62:	4628      	mov	r0, r5
 8014e64:	47b8      	blx	r7
 8014e66:	3001      	adds	r0, #1
 8014e68:	f43f ae72 	beq.w	8014b50 <_printf_float+0x98>
 8014e6c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014e70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e78:	9b08      	ldr	r3, [sp, #32]
 8014e7a:	d01a      	beq.n	8014eb2 <_printf_float+0x3fa>
 8014e7c:	3b01      	subs	r3, #1
 8014e7e:	f108 0201 	add.w	r2, r8, #1
 8014e82:	4631      	mov	r1, r6
 8014e84:	4628      	mov	r0, r5
 8014e86:	47b8      	blx	r7
 8014e88:	3001      	adds	r0, #1
 8014e8a:	d10e      	bne.n	8014eaa <_printf_float+0x3f2>
 8014e8c:	e660      	b.n	8014b50 <_printf_float+0x98>
 8014e8e:	2301      	movs	r3, #1
 8014e90:	464a      	mov	r2, r9
 8014e92:	4631      	mov	r1, r6
 8014e94:	4628      	mov	r0, r5
 8014e96:	47b8      	blx	r7
 8014e98:	3001      	adds	r0, #1
 8014e9a:	f43f ae59 	beq.w	8014b50 <_printf_float+0x98>
 8014e9e:	f108 0801 	add.w	r8, r8, #1
 8014ea2:	9b08      	ldr	r3, [sp, #32]
 8014ea4:	3b01      	subs	r3, #1
 8014ea6:	4543      	cmp	r3, r8
 8014ea8:	dcf1      	bgt.n	8014e8e <_printf_float+0x3d6>
 8014eaa:	9b04      	ldr	r3, [sp, #16]
 8014eac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014eb0:	e6dd      	b.n	8014c6e <_printf_float+0x1b6>
 8014eb2:	f04f 0800 	mov.w	r8, #0
 8014eb6:	f104 091a 	add.w	r9, r4, #26
 8014eba:	e7f2      	b.n	8014ea2 <_printf_float+0x3ea>
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	4642      	mov	r2, r8
 8014ec0:	e7df      	b.n	8014e82 <_printf_float+0x3ca>
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	464a      	mov	r2, r9
 8014ec6:	4631      	mov	r1, r6
 8014ec8:	4628      	mov	r0, r5
 8014eca:	47b8      	blx	r7
 8014ecc:	3001      	adds	r0, #1
 8014ece:	f43f ae3f 	beq.w	8014b50 <_printf_float+0x98>
 8014ed2:	f108 0801 	add.w	r8, r8, #1
 8014ed6:	68e3      	ldr	r3, [r4, #12]
 8014ed8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014eda:	1a5b      	subs	r3, r3, r1
 8014edc:	4543      	cmp	r3, r8
 8014ede:	dcf0      	bgt.n	8014ec2 <_printf_float+0x40a>
 8014ee0:	e6f9      	b.n	8014cd6 <_printf_float+0x21e>
 8014ee2:	f04f 0800 	mov.w	r8, #0
 8014ee6:	f104 0919 	add.w	r9, r4, #25
 8014eea:	e7f4      	b.n	8014ed6 <_printf_float+0x41e>

08014eec <_printf_common>:
 8014eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ef0:	4616      	mov	r6, r2
 8014ef2:	4699      	mov	r9, r3
 8014ef4:	688a      	ldr	r2, [r1, #8]
 8014ef6:	690b      	ldr	r3, [r1, #16]
 8014ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014efc:	4293      	cmp	r3, r2
 8014efe:	bfb8      	it	lt
 8014f00:	4613      	movlt	r3, r2
 8014f02:	6033      	str	r3, [r6, #0]
 8014f04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f08:	4607      	mov	r7, r0
 8014f0a:	460c      	mov	r4, r1
 8014f0c:	b10a      	cbz	r2, 8014f12 <_printf_common+0x26>
 8014f0e:	3301      	adds	r3, #1
 8014f10:	6033      	str	r3, [r6, #0]
 8014f12:	6823      	ldr	r3, [r4, #0]
 8014f14:	0699      	lsls	r1, r3, #26
 8014f16:	bf42      	ittt	mi
 8014f18:	6833      	ldrmi	r3, [r6, #0]
 8014f1a:	3302      	addmi	r3, #2
 8014f1c:	6033      	strmi	r3, [r6, #0]
 8014f1e:	6825      	ldr	r5, [r4, #0]
 8014f20:	f015 0506 	ands.w	r5, r5, #6
 8014f24:	d106      	bne.n	8014f34 <_printf_common+0x48>
 8014f26:	f104 0a19 	add.w	sl, r4, #25
 8014f2a:	68e3      	ldr	r3, [r4, #12]
 8014f2c:	6832      	ldr	r2, [r6, #0]
 8014f2e:	1a9b      	subs	r3, r3, r2
 8014f30:	42ab      	cmp	r3, r5
 8014f32:	dc26      	bgt.n	8014f82 <_printf_common+0x96>
 8014f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014f38:	1e13      	subs	r3, r2, #0
 8014f3a:	6822      	ldr	r2, [r4, #0]
 8014f3c:	bf18      	it	ne
 8014f3e:	2301      	movne	r3, #1
 8014f40:	0692      	lsls	r2, r2, #26
 8014f42:	d42b      	bmi.n	8014f9c <_printf_common+0xb0>
 8014f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f48:	4649      	mov	r1, r9
 8014f4a:	4638      	mov	r0, r7
 8014f4c:	47c0      	blx	r8
 8014f4e:	3001      	adds	r0, #1
 8014f50:	d01e      	beq.n	8014f90 <_printf_common+0xa4>
 8014f52:	6823      	ldr	r3, [r4, #0]
 8014f54:	6922      	ldr	r2, [r4, #16]
 8014f56:	f003 0306 	and.w	r3, r3, #6
 8014f5a:	2b04      	cmp	r3, #4
 8014f5c:	bf02      	ittt	eq
 8014f5e:	68e5      	ldreq	r5, [r4, #12]
 8014f60:	6833      	ldreq	r3, [r6, #0]
 8014f62:	1aed      	subeq	r5, r5, r3
 8014f64:	68a3      	ldr	r3, [r4, #8]
 8014f66:	bf0c      	ite	eq
 8014f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f6c:	2500      	movne	r5, #0
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	bfc4      	itt	gt
 8014f72:	1a9b      	subgt	r3, r3, r2
 8014f74:	18ed      	addgt	r5, r5, r3
 8014f76:	2600      	movs	r6, #0
 8014f78:	341a      	adds	r4, #26
 8014f7a:	42b5      	cmp	r5, r6
 8014f7c:	d11a      	bne.n	8014fb4 <_printf_common+0xc8>
 8014f7e:	2000      	movs	r0, #0
 8014f80:	e008      	b.n	8014f94 <_printf_common+0xa8>
 8014f82:	2301      	movs	r3, #1
 8014f84:	4652      	mov	r2, sl
 8014f86:	4649      	mov	r1, r9
 8014f88:	4638      	mov	r0, r7
 8014f8a:	47c0      	blx	r8
 8014f8c:	3001      	adds	r0, #1
 8014f8e:	d103      	bne.n	8014f98 <_printf_common+0xac>
 8014f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f98:	3501      	adds	r5, #1
 8014f9a:	e7c6      	b.n	8014f2a <_printf_common+0x3e>
 8014f9c:	18e1      	adds	r1, r4, r3
 8014f9e:	1c5a      	adds	r2, r3, #1
 8014fa0:	2030      	movs	r0, #48	; 0x30
 8014fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014fa6:	4422      	add	r2, r4
 8014fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014fb0:	3302      	adds	r3, #2
 8014fb2:	e7c7      	b.n	8014f44 <_printf_common+0x58>
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	4622      	mov	r2, r4
 8014fb8:	4649      	mov	r1, r9
 8014fba:	4638      	mov	r0, r7
 8014fbc:	47c0      	blx	r8
 8014fbe:	3001      	adds	r0, #1
 8014fc0:	d0e6      	beq.n	8014f90 <_printf_common+0xa4>
 8014fc2:	3601      	adds	r6, #1
 8014fc4:	e7d9      	b.n	8014f7a <_printf_common+0x8e>
	...

08014fc8 <_printf_i>:
 8014fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014fcc:	7e0f      	ldrb	r7, [r1, #24]
 8014fce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014fd0:	2f78      	cmp	r7, #120	; 0x78
 8014fd2:	4691      	mov	r9, r2
 8014fd4:	4680      	mov	r8, r0
 8014fd6:	460c      	mov	r4, r1
 8014fd8:	469a      	mov	sl, r3
 8014fda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014fde:	d807      	bhi.n	8014ff0 <_printf_i+0x28>
 8014fe0:	2f62      	cmp	r7, #98	; 0x62
 8014fe2:	d80a      	bhi.n	8014ffa <_printf_i+0x32>
 8014fe4:	2f00      	cmp	r7, #0
 8014fe6:	f000 80d4 	beq.w	8015192 <_printf_i+0x1ca>
 8014fea:	2f58      	cmp	r7, #88	; 0x58
 8014fec:	f000 80c0 	beq.w	8015170 <_printf_i+0x1a8>
 8014ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014ff8:	e03a      	b.n	8015070 <_printf_i+0xa8>
 8014ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014ffe:	2b15      	cmp	r3, #21
 8015000:	d8f6      	bhi.n	8014ff0 <_printf_i+0x28>
 8015002:	a101      	add	r1, pc, #4	; (adr r1, 8015008 <_printf_i+0x40>)
 8015004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015008:	08015061 	.word	0x08015061
 801500c:	08015075 	.word	0x08015075
 8015010:	08014ff1 	.word	0x08014ff1
 8015014:	08014ff1 	.word	0x08014ff1
 8015018:	08014ff1 	.word	0x08014ff1
 801501c:	08014ff1 	.word	0x08014ff1
 8015020:	08015075 	.word	0x08015075
 8015024:	08014ff1 	.word	0x08014ff1
 8015028:	08014ff1 	.word	0x08014ff1
 801502c:	08014ff1 	.word	0x08014ff1
 8015030:	08014ff1 	.word	0x08014ff1
 8015034:	08015179 	.word	0x08015179
 8015038:	080150a1 	.word	0x080150a1
 801503c:	08015133 	.word	0x08015133
 8015040:	08014ff1 	.word	0x08014ff1
 8015044:	08014ff1 	.word	0x08014ff1
 8015048:	0801519b 	.word	0x0801519b
 801504c:	08014ff1 	.word	0x08014ff1
 8015050:	080150a1 	.word	0x080150a1
 8015054:	08014ff1 	.word	0x08014ff1
 8015058:	08014ff1 	.word	0x08014ff1
 801505c:	0801513b 	.word	0x0801513b
 8015060:	682b      	ldr	r3, [r5, #0]
 8015062:	1d1a      	adds	r2, r3, #4
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	602a      	str	r2, [r5, #0]
 8015068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801506c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015070:	2301      	movs	r3, #1
 8015072:	e09f      	b.n	80151b4 <_printf_i+0x1ec>
 8015074:	6820      	ldr	r0, [r4, #0]
 8015076:	682b      	ldr	r3, [r5, #0]
 8015078:	0607      	lsls	r7, r0, #24
 801507a:	f103 0104 	add.w	r1, r3, #4
 801507e:	6029      	str	r1, [r5, #0]
 8015080:	d501      	bpl.n	8015086 <_printf_i+0xbe>
 8015082:	681e      	ldr	r6, [r3, #0]
 8015084:	e003      	b.n	801508e <_printf_i+0xc6>
 8015086:	0646      	lsls	r6, r0, #25
 8015088:	d5fb      	bpl.n	8015082 <_printf_i+0xba>
 801508a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801508e:	2e00      	cmp	r6, #0
 8015090:	da03      	bge.n	801509a <_printf_i+0xd2>
 8015092:	232d      	movs	r3, #45	; 0x2d
 8015094:	4276      	negs	r6, r6
 8015096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801509a:	485a      	ldr	r0, [pc, #360]	; (8015204 <_printf_i+0x23c>)
 801509c:	230a      	movs	r3, #10
 801509e:	e012      	b.n	80150c6 <_printf_i+0xfe>
 80150a0:	682b      	ldr	r3, [r5, #0]
 80150a2:	6820      	ldr	r0, [r4, #0]
 80150a4:	1d19      	adds	r1, r3, #4
 80150a6:	6029      	str	r1, [r5, #0]
 80150a8:	0605      	lsls	r5, r0, #24
 80150aa:	d501      	bpl.n	80150b0 <_printf_i+0xe8>
 80150ac:	681e      	ldr	r6, [r3, #0]
 80150ae:	e002      	b.n	80150b6 <_printf_i+0xee>
 80150b0:	0641      	lsls	r1, r0, #25
 80150b2:	d5fb      	bpl.n	80150ac <_printf_i+0xe4>
 80150b4:	881e      	ldrh	r6, [r3, #0]
 80150b6:	4853      	ldr	r0, [pc, #332]	; (8015204 <_printf_i+0x23c>)
 80150b8:	2f6f      	cmp	r7, #111	; 0x6f
 80150ba:	bf0c      	ite	eq
 80150bc:	2308      	moveq	r3, #8
 80150be:	230a      	movne	r3, #10
 80150c0:	2100      	movs	r1, #0
 80150c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80150c6:	6865      	ldr	r5, [r4, #4]
 80150c8:	60a5      	str	r5, [r4, #8]
 80150ca:	2d00      	cmp	r5, #0
 80150cc:	bfa2      	ittt	ge
 80150ce:	6821      	ldrge	r1, [r4, #0]
 80150d0:	f021 0104 	bicge.w	r1, r1, #4
 80150d4:	6021      	strge	r1, [r4, #0]
 80150d6:	b90e      	cbnz	r6, 80150dc <_printf_i+0x114>
 80150d8:	2d00      	cmp	r5, #0
 80150da:	d04b      	beq.n	8015174 <_printf_i+0x1ac>
 80150dc:	4615      	mov	r5, r2
 80150de:	fbb6 f1f3 	udiv	r1, r6, r3
 80150e2:	fb03 6711 	mls	r7, r3, r1, r6
 80150e6:	5dc7      	ldrb	r7, [r0, r7]
 80150e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80150ec:	4637      	mov	r7, r6
 80150ee:	42bb      	cmp	r3, r7
 80150f0:	460e      	mov	r6, r1
 80150f2:	d9f4      	bls.n	80150de <_printf_i+0x116>
 80150f4:	2b08      	cmp	r3, #8
 80150f6:	d10b      	bne.n	8015110 <_printf_i+0x148>
 80150f8:	6823      	ldr	r3, [r4, #0]
 80150fa:	07de      	lsls	r6, r3, #31
 80150fc:	d508      	bpl.n	8015110 <_printf_i+0x148>
 80150fe:	6923      	ldr	r3, [r4, #16]
 8015100:	6861      	ldr	r1, [r4, #4]
 8015102:	4299      	cmp	r1, r3
 8015104:	bfde      	ittt	le
 8015106:	2330      	movle	r3, #48	; 0x30
 8015108:	f805 3c01 	strble.w	r3, [r5, #-1]
 801510c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015110:	1b52      	subs	r2, r2, r5
 8015112:	6122      	str	r2, [r4, #16]
 8015114:	f8cd a000 	str.w	sl, [sp]
 8015118:	464b      	mov	r3, r9
 801511a:	aa03      	add	r2, sp, #12
 801511c:	4621      	mov	r1, r4
 801511e:	4640      	mov	r0, r8
 8015120:	f7ff fee4 	bl	8014eec <_printf_common>
 8015124:	3001      	adds	r0, #1
 8015126:	d14a      	bne.n	80151be <_printf_i+0x1f6>
 8015128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801512c:	b004      	add	sp, #16
 801512e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015132:	6823      	ldr	r3, [r4, #0]
 8015134:	f043 0320 	orr.w	r3, r3, #32
 8015138:	6023      	str	r3, [r4, #0]
 801513a:	4833      	ldr	r0, [pc, #204]	; (8015208 <_printf_i+0x240>)
 801513c:	2778      	movs	r7, #120	; 0x78
 801513e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015142:	6823      	ldr	r3, [r4, #0]
 8015144:	6829      	ldr	r1, [r5, #0]
 8015146:	061f      	lsls	r7, r3, #24
 8015148:	f851 6b04 	ldr.w	r6, [r1], #4
 801514c:	d402      	bmi.n	8015154 <_printf_i+0x18c>
 801514e:	065f      	lsls	r7, r3, #25
 8015150:	bf48      	it	mi
 8015152:	b2b6      	uxthmi	r6, r6
 8015154:	07df      	lsls	r7, r3, #31
 8015156:	bf48      	it	mi
 8015158:	f043 0320 	orrmi.w	r3, r3, #32
 801515c:	6029      	str	r1, [r5, #0]
 801515e:	bf48      	it	mi
 8015160:	6023      	strmi	r3, [r4, #0]
 8015162:	b91e      	cbnz	r6, 801516c <_printf_i+0x1a4>
 8015164:	6823      	ldr	r3, [r4, #0]
 8015166:	f023 0320 	bic.w	r3, r3, #32
 801516a:	6023      	str	r3, [r4, #0]
 801516c:	2310      	movs	r3, #16
 801516e:	e7a7      	b.n	80150c0 <_printf_i+0xf8>
 8015170:	4824      	ldr	r0, [pc, #144]	; (8015204 <_printf_i+0x23c>)
 8015172:	e7e4      	b.n	801513e <_printf_i+0x176>
 8015174:	4615      	mov	r5, r2
 8015176:	e7bd      	b.n	80150f4 <_printf_i+0x12c>
 8015178:	682b      	ldr	r3, [r5, #0]
 801517a:	6826      	ldr	r6, [r4, #0]
 801517c:	6961      	ldr	r1, [r4, #20]
 801517e:	1d18      	adds	r0, r3, #4
 8015180:	6028      	str	r0, [r5, #0]
 8015182:	0635      	lsls	r5, r6, #24
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	d501      	bpl.n	801518c <_printf_i+0x1c4>
 8015188:	6019      	str	r1, [r3, #0]
 801518a:	e002      	b.n	8015192 <_printf_i+0x1ca>
 801518c:	0670      	lsls	r0, r6, #25
 801518e:	d5fb      	bpl.n	8015188 <_printf_i+0x1c0>
 8015190:	8019      	strh	r1, [r3, #0]
 8015192:	2300      	movs	r3, #0
 8015194:	6123      	str	r3, [r4, #16]
 8015196:	4615      	mov	r5, r2
 8015198:	e7bc      	b.n	8015114 <_printf_i+0x14c>
 801519a:	682b      	ldr	r3, [r5, #0]
 801519c:	1d1a      	adds	r2, r3, #4
 801519e:	602a      	str	r2, [r5, #0]
 80151a0:	681d      	ldr	r5, [r3, #0]
 80151a2:	6862      	ldr	r2, [r4, #4]
 80151a4:	2100      	movs	r1, #0
 80151a6:	4628      	mov	r0, r5
 80151a8:	f7eb f89a 	bl	80002e0 <memchr>
 80151ac:	b108      	cbz	r0, 80151b2 <_printf_i+0x1ea>
 80151ae:	1b40      	subs	r0, r0, r5
 80151b0:	6060      	str	r0, [r4, #4]
 80151b2:	6863      	ldr	r3, [r4, #4]
 80151b4:	6123      	str	r3, [r4, #16]
 80151b6:	2300      	movs	r3, #0
 80151b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151bc:	e7aa      	b.n	8015114 <_printf_i+0x14c>
 80151be:	6923      	ldr	r3, [r4, #16]
 80151c0:	462a      	mov	r2, r5
 80151c2:	4649      	mov	r1, r9
 80151c4:	4640      	mov	r0, r8
 80151c6:	47d0      	blx	sl
 80151c8:	3001      	adds	r0, #1
 80151ca:	d0ad      	beq.n	8015128 <_printf_i+0x160>
 80151cc:	6823      	ldr	r3, [r4, #0]
 80151ce:	079b      	lsls	r3, r3, #30
 80151d0:	d413      	bmi.n	80151fa <_printf_i+0x232>
 80151d2:	68e0      	ldr	r0, [r4, #12]
 80151d4:	9b03      	ldr	r3, [sp, #12]
 80151d6:	4298      	cmp	r0, r3
 80151d8:	bfb8      	it	lt
 80151da:	4618      	movlt	r0, r3
 80151dc:	e7a6      	b.n	801512c <_printf_i+0x164>
 80151de:	2301      	movs	r3, #1
 80151e0:	4632      	mov	r2, r6
 80151e2:	4649      	mov	r1, r9
 80151e4:	4640      	mov	r0, r8
 80151e6:	47d0      	blx	sl
 80151e8:	3001      	adds	r0, #1
 80151ea:	d09d      	beq.n	8015128 <_printf_i+0x160>
 80151ec:	3501      	adds	r5, #1
 80151ee:	68e3      	ldr	r3, [r4, #12]
 80151f0:	9903      	ldr	r1, [sp, #12]
 80151f2:	1a5b      	subs	r3, r3, r1
 80151f4:	42ab      	cmp	r3, r5
 80151f6:	dcf2      	bgt.n	80151de <_printf_i+0x216>
 80151f8:	e7eb      	b.n	80151d2 <_printf_i+0x20a>
 80151fa:	2500      	movs	r5, #0
 80151fc:	f104 0619 	add.w	r6, r4, #25
 8015200:	e7f5      	b.n	80151ee <_printf_i+0x226>
 8015202:	bf00      	nop
 8015204:	080176ba 	.word	0x080176ba
 8015208:	080176cb 	.word	0x080176cb

0801520c <std>:
 801520c:	2300      	movs	r3, #0
 801520e:	b510      	push	{r4, lr}
 8015210:	4604      	mov	r4, r0
 8015212:	e9c0 3300 	strd	r3, r3, [r0]
 8015216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801521a:	6083      	str	r3, [r0, #8]
 801521c:	8181      	strh	r1, [r0, #12]
 801521e:	6643      	str	r3, [r0, #100]	; 0x64
 8015220:	81c2      	strh	r2, [r0, #14]
 8015222:	6183      	str	r3, [r0, #24]
 8015224:	4619      	mov	r1, r3
 8015226:	2208      	movs	r2, #8
 8015228:	305c      	adds	r0, #92	; 0x5c
 801522a:	f000 f9f7 	bl	801561c <memset>
 801522e:	4b0d      	ldr	r3, [pc, #52]	; (8015264 <std+0x58>)
 8015230:	6263      	str	r3, [r4, #36]	; 0x24
 8015232:	4b0d      	ldr	r3, [pc, #52]	; (8015268 <std+0x5c>)
 8015234:	62a3      	str	r3, [r4, #40]	; 0x28
 8015236:	4b0d      	ldr	r3, [pc, #52]	; (801526c <std+0x60>)
 8015238:	62e3      	str	r3, [r4, #44]	; 0x2c
 801523a:	4b0d      	ldr	r3, [pc, #52]	; (8015270 <std+0x64>)
 801523c:	6323      	str	r3, [r4, #48]	; 0x30
 801523e:	4b0d      	ldr	r3, [pc, #52]	; (8015274 <std+0x68>)
 8015240:	6224      	str	r4, [r4, #32]
 8015242:	429c      	cmp	r4, r3
 8015244:	d006      	beq.n	8015254 <std+0x48>
 8015246:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801524a:	4294      	cmp	r4, r2
 801524c:	d002      	beq.n	8015254 <std+0x48>
 801524e:	33d0      	adds	r3, #208	; 0xd0
 8015250:	429c      	cmp	r4, r3
 8015252:	d105      	bne.n	8015260 <std+0x54>
 8015254:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801525c:	f000 baae 	b.w	80157bc <__retarget_lock_init_recursive>
 8015260:	bd10      	pop	{r4, pc}
 8015262:	bf00      	nop
 8015264:	0801546d 	.word	0x0801546d
 8015268:	0801548f 	.word	0x0801548f
 801526c:	080154c7 	.word	0x080154c7
 8015270:	080154eb 	.word	0x080154eb
 8015274:	24004628 	.word	0x24004628

08015278 <stdio_exit_handler>:
 8015278:	4a02      	ldr	r2, [pc, #8]	; (8015284 <stdio_exit_handler+0xc>)
 801527a:	4903      	ldr	r1, [pc, #12]	; (8015288 <stdio_exit_handler+0x10>)
 801527c:	4803      	ldr	r0, [pc, #12]	; (801528c <stdio_exit_handler+0x14>)
 801527e:	f000 b869 	b.w	8015354 <_fwalk_sglue>
 8015282:	bf00      	nop
 8015284:	24000080 	.word	0x24000080
 8015288:	08016efd 	.word	0x08016efd
 801528c:	2400008c 	.word	0x2400008c

08015290 <cleanup_stdio>:
 8015290:	6841      	ldr	r1, [r0, #4]
 8015292:	4b0c      	ldr	r3, [pc, #48]	; (80152c4 <cleanup_stdio+0x34>)
 8015294:	4299      	cmp	r1, r3
 8015296:	b510      	push	{r4, lr}
 8015298:	4604      	mov	r4, r0
 801529a:	d001      	beq.n	80152a0 <cleanup_stdio+0x10>
 801529c:	f001 fe2e 	bl	8016efc <_fflush_r>
 80152a0:	68a1      	ldr	r1, [r4, #8]
 80152a2:	4b09      	ldr	r3, [pc, #36]	; (80152c8 <cleanup_stdio+0x38>)
 80152a4:	4299      	cmp	r1, r3
 80152a6:	d002      	beq.n	80152ae <cleanup_stdio+0x1e>
 80152a8:	4620      	mov	r0, r4
 80152aa:	f001 fe27 	bl	8016efc <_fflush_r>
 80152ae:	68e1      	ldr	r1, [r4, #12]
 80152b0:	4b06      	ldr	r3, [pc, #24]	; (80152cc <cleanup_stdio+0x3c>)
 80152b2:	4299      	cmp	r1, r3
 80152b4:	d004      	beq.n	80152c0 <cleanup_stdio+0x30>
 80152b6:	4620      	mov	r0, r4
 80152b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152bc:	f001 be1e 	b.w	8016efc <_fflush_r>
 80152c0:	bd10      	pop	{r4, pc}
 80152c2:	bf00      	nop
 80152c4:	24004628 	.word	0x24004628
 80152c8:	24004690 	.word	0x24004690
 80152cc:	240046f8 	.word	0x240046f8

080152d0 <global_stdio_init.part.0>:
 80152d0:	b510      	push	{r4, lr}
 80152d2:	4b0b      	ldr	r3, [pc, #44]	; (8015300 <global_stdio_init.part.0+0x30>)
 80152d4:	4c0b      	ldr	r4, [pc, #44]	; (8015304 <global_stdio_init.part.0+0x34>)
 80152d6:	4a0c      	ldr	r2, [pc, #48]	; (8015308 <global_stdio_init.part.0+0x38>)
 80152d8:	601a      	str	r2, [r3, #0]
 80152da:	4620      	mov	r0, r4
 80152dc:	2200      	movs	r2, #0
 80152de:	2104      	movs	r1, #4
 80152e0:	f7ff ff94 	bl	801520c <std>
 80152e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80152e8:	2201      	movs	r2, #1
 80152ea:	2109      	movs	r1, #9
 80152ec:	f7ff ff8e 	bl	801520c <std>
 80152f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80152f4:	2202      	movs	r2, #2
 80152f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152fa:	2112      	movs	r1, #18
 80152fc:	f7ff bf86 	b.w	801520c <std>
 8015300:	24004760 	.word	0x24004760
 8015304:	24004628 	.word	0x24004628
 8015308:	08015279 	.word	0x08015279

0801530c <__sfp_lock_acquire>:
 801530c:	4801      	ldr	r0, [pc, #4]	; (8015314 <__sfp_lock_acquire+0x8>)
 801530e:	f000 ba56 	b.w	80157be <__retarget_lock_acquire_recursive>
 8015312:	bf00      	nop
 8015314:	24004769 	.word	0x24004769

08015318 <__sfp_lock_release>:
 8015318:	4801      	ldr	r0, [pc, #4]	; (8015320 <__sfp_lock_release+0x8>)
 801531a:	f000 ba51 	b.w	80157c0 <__retarget_lock_release_recursive>
 801531e:	bf00      	nop
 8015320:	24004769 	.word	0x24004769

08015324 <__sinit>:
 8015324:	b510      	push	{r4, lr}
 8015326:	4604      	mov	r4, r0
 8015328:	f7ff fff0 	bl	801530c <__sfp_lock_acquire>
 801532c:	6a23      	ldr	r3, [r4, #32]
 801532e:	b11b      	cbz	r3, 8015338 <__sinit+0x14>
 8015330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015334:	f7ff bff0 	b.w	8015318 <__sfp_lock_release>
 8015338:	4b04      	ldr	r3, [pc, #16]	; (801534c <__sinit+0x28>)
 801533a:	6223      	str	r3, [r4, #32]
 801533c:	4b04      	ldr	r3, [pc, #16]	; (8015350 <__sinit+0x2c>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d1f5      	bne.n	8015330 <__sinit+0xc>
 8015344:	f7ff ffc4 	bl	80152d0 <global_stdio_init.part.0>
 8015348:	e7f2      	b.n	8015330 <__sinit+0xc>
 801534a:	bf00      	nop
 801534c:	08015291 	.word	0x08015291
 8015350:	24004760 	.word	0x24004760

08015354 <_fwalk_sglue>:
 8015354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015358:	4607      	mov	r7, r0
 801535a:	4688      	mov	r8, r1
 801535c:	4614      	mov	r4, r2
 801535e:	2600      	movs	r6, #0
 8015360:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015364:	f1b9 0901 	subs.w	r9, r9, #1
 8015368:	d505      	bpl.n	8015376 <_fwalk_sglue+0x22>
 801536a:	6824      	ldr	r4, [r4, #0]
 801536c:	2c00      	cmp	r4, #0
 801536e:	d1f7      	bne.n	8015360 <_fwalk_sglue+0xc>
 8015370:	4630      	mov	r0, r6
 8015372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015376:	89ab      	ldrh	r3, [r5, #12]
 8015378:	2b01      	cmp	r3, #1
 801537a:	d907      	bls.n	801538c <_fwalk_sglue+0x38>
 801537c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015380:	3301      	adds	r3, #1
 8015382:	d003      	beq.n	801538c <_fwalk_sglue+0x38>
 8015384:	4629      	mov	r1, r5
 8015386:	4638      	mov	r0, r7
 8015388:	47c0      	blx	r8
 801538a:	4306      	orrs	r6, r0
 801538c:	3568      	adds	r5, #104	; 0x68
 801538e:	e7e9      	b.n	8015364 <_fwalk_sglue+0x10>

08015390 <iprintf>:
 8015390:	b40f      	push	{r0, r1, r2, r3}
 8015392:	b507      	push	{r0, r1, r2, lr}
 8015394:	4906      	ldr	r1, [pc, #24]	; (80153b0 <iprintf+0x20>)
 8015396:	ab04      	add	r3, sp, #16
 8015398:	6808      	ldr	r0, [r1, #0]
 801539a:	f853 2b04 	ldr.w	r2, [r3], #4
 801539e:	6881      	ldr	r1, [r0, #8]
 80153a0:	9301      	str	r3, [sp, #4]
 80153a2:	f001 fc0b 	bl	8016bbc <_vfiprintf_r>
 80153a6:	b003      	add	sp, #12
 80153a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80153ac:	b004      	add	sp, #16
 80153ae:	4770      	bx	lr
 80153b0:	240000d8 	.word	0x240000d8

080153b4 <_puts_r>:
 80153b4:	6a03      	ldr	r3, [r0, #32]
 80153b6:	b570      	push	{r4, r5, r6, lr}
 80153b8:	6884      	ldr	r4, [r0, #8]
 80153ba:	4605      	mov	r5, r0
 80153bc:	460e      	mov	r6, r1
 80153be:	b90b      	cbnz	r3, 80153c4 <_puts_r+0x10>
 80153c0:	f7ff ffb0 	bl	8015324 <__sinit>
 80153c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80153c6:	07db      	lsls	r3, r3, #31
 80153c8:	d405      	bmi.n	80153d6 <_puts_r+0x22>
 80153ca:	89a3      	ldrh	r3, [r4, #12]
 80153cc:	0598      	lsls	r0, r3, #22
 80153ce:	d402      	bmi.n	80153d6 <_puts_r+0x22>
 80153d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153d2:	f000 f9f4 	bl	80157be <__retarget_lock_acquire_recursive>
 80153d6:	89a3      	ldrh	r3, [r4, #12]
 80153d8:	0719      	lsls	r1, r3, #28
 80153da:	d513      	bpl.n	8015404 <_puts_r+0x50>
 80153dc:	6923      	ldr	r3, [r4, #16]
 80153de:	b18b      	cbz	r3, 8015404 <_puts_r+0x50>
 80153e0:	3e01      	subs	r6, #1
 80153e2:	68a3      	ldr	r3, [r4, #8]
 80153e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80153e8:	3b01      	subs	r3, #1
 80153ea:	60a3      	str	r3, [r4, #8]
 80153ec:	b9e9      	cbnz	r1, 801542a <_puts_r+0x76>
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	da2e      	bge.n	8015450 <_puts_r+0x9c>
 80153f2:	4622      	mov	r2, r4
 80153f4:	210a      	movs	r1, #10
 80153f6:	4628      	mov	r0, r5
 80153f8:	f000 f87b 	bl	80154f2 <__swbuf_r>
 80153fc:	3001      	adds	r0, #1
 80153fe:	d007      	beq.n	8015410 <_puts_r+0x5c>
 8015400:	250a      	movs	r5, #10
 8015402:	e007      	b.n	8015414 <_puts_r+0x60>
 8015404:	4621      	mov	r1, r4
 8015406:	4628      	mov	r0, r5
 8015408:	f000 f8b0 	bl	801556c <__swsetup_r>
 801540c:	2800      	cmp	r0, #0
 801540e:	d0e7      	beq.n	80153e0 <_puts_r+0x2c>
 8015410:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015414:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015416:	07da      	lsls	r2, r3, #31
 8015418:	d405      	bmi.n	8015426 <_puts_r+0x72>
 801541a:	89a3      	ldrh	r3, [r4, #12]
 801541c:	059b      	lsls	r3, r3, #22
 801541e:	d402      	bmi.n	8015426 <_puts_r+0x72>
 8015420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015422:	f000 f9cd 	bl	80157c0 <__retarget_lock_release_recursive>
 8015426:	4628      	mov	r0, r5
 8015428:	bd70      	pop	{r4, r5, r6, pc}
 801542a:	2b00      	cmp	r3, #0
 801542c:	da04      	bge.n	8015438 <_puts_r+0x84>
 801542e:	69a2      	ldr	r2, [r4, #24]
 8015430:	429a      	cmp	r2, r3
 8015432:	dc06      	bgt.n	8015442 <_puts_r+0x8e>
 8015434:	290a      	cmp	r1, #10
 8015436:	d004      	beq.n	8015442 <_puts_r+0x8e>
 8015438:	6823      	ldr	r3, [r4, #0]
 801543a:	1c5a      	adds	r2, r3, #1
 801543c:	6022      	str	r2, [r4, #0]
 801543e:	7019      	strb	r1, [r3, #0]
 8015440:	e7cf      	b.n	80153e2 <_puts_r+0x2e>
 8015442:	4622      	mov	r2, r4
 8015444:	4628      	mov	r0, r5
 8015446:	f000 f854 	bl	80154f2 <__swbuf_r>
 801544a:	3001      	adds	r0, #1
 801544c:	d1c9      	bne.n	80153e2 <_puts_r+0x2e>
 801544e:	e7df      	b.n	8015410 <_puts_r+0x5c>
 8015450:	6823      	ldr	r3, [r4, #0]
 8015452:	250a      	movs	r5, #10
 8015454:	1c5a      	adds	r2, r3, #1
 8015456:	6022      	str	r2, [r4, #0]
 8015458:	701d      	strb	r5, [r3, #0]
 801545a:	e7db      	b.n	8015414 <_puts_r+0x60>

0801545c <puts>:
 801545c:	4b02      	ldr	r3, [pc, #8]	; (8015468 <puts+0xc>)
 801545e:	4601      	mov	r1, r0
 8015460:	6818      	ldr	r0, [r3, #0]
 8015462:	f7ff bfa7 	b.w	80153b4 <_puts_r>
 8015466:	bf00      	nop
 8015468:	240000d8 	.word	0x240000d8

0801546c <__sread>:
 801546c:	b510      	push	{r4, lr}
 801546e:	460c      	mov	r4, r1
 8015470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015474:	f000 f930 	bl	80156d8 <_read_r>
 8015478:	2800      	cmp	r0, #0
 801547a:	bfab      	itete	ge
 801547c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801547e:	89a3      	ldrhlt	r3, [r4, #12]
 8015480:	181b      	addge	r3, r3, r0
 8015482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015486:	bfac      	ite	ge
 8015488:	6563      	strge	r3, [r4, #84]	; 0x54
 801548a:	81a3      	strhlt	r3, [r4, #12]
 801548c:	bd10      	pop	{r4, pc}

0801548e <__swrite>:
 801548e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015492:	461f      	mov	r7, r3
 8015494:	898b      	ldrh	r3, [r1, #12]
 8015496:	05db      	lsls	r3, r3, #23
 8015498:	4605      	mov	r5, r0
 801549a:	460c      	mov	r4, r1
 801549c:	4616      	mov	r6, r2
 801549e:	d505      	bpl.n	80154ac <__swrite+0x1e>
 80154a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154a4:	2302      	movs	r3, #2
 80154a6:	2200      	movs	r2, #0
 80154a8:	f000 f904 	bl	80156b4 <_lseek_r>
 80154ac:	89a3      	ldrh	r3, [r4, #12]
 80154ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80154b6:	81a3      	strh	r3, [r4, #12]
 80154b8:	4632      	mov	r2, r6
 80154ba:	463b      	mov	r3, r7
 80154bc:	4628      	mov	r0, r5
 80154be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154c2:	f000 b93f 	b.w	8015744 <_write_r>

080154c6 <__sseek>:
 80154c6:	b510      	push	{r4, lr}
 80154c8:	460c      	mov	r4, r1
 80154ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154ce:	f000 f8f1 	bl	80156b4 <_lseek_r>
 80154d2:	1c43      	adds	r3, r0, #1
 80154d4:	89a3      	ldrh	r3, [r4, #12]
 80154d6:	bf15      	itete	ne
 80154d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80154da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80154de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80154e2:	81a3      	strheq	r3, [r4, #12]
 80154e4:	bf18      	it	ne
 80154e6:	81a3      	strhne	r3, [r4, #12]
 80154e8:	bd10      	pop	{r4, pc}

080154ea <__sclose>:
 80154ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154ee:	f000 b8d1 	b.w	8015694 <_close_r>

080154f2 <__swbuf_r>:
 80154f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154f4:	460e      	mov	r6, r1
 80154f6:	4614      	mov	r4, r2
 80154f8:	4605      	mov	r5, r0
 80154fa:	b118      	cbz	r0, 8015504 <__swbuf_r+0x12>
 80154fc:	6a03      	ldr	r3, [r0, #32]
 80154fe:	b90b      	cbnz	r3, 8015504 <__swbuf_r+0x12>
 8015500:	f7ff ff10 	bl	8015324 <__sinit>
 8015504:	69a3      	ldr	r3, [r4, #24]
 8015506:	60a3      	str	r3, [r4, #8]
 8015508:	89a3      	ldrh	r3, [r4, #12]
 801550a:	071a      	lsls	r2, r3, #28
 801550c:	d525      	bpl.n	801555a <__swbuf_r+0x68>
 801550e:	6923      	ldr	r3, [r4, #16]
 8015510:	b31b      	cbz	r3, 801555a <__swbuf_r+0x68>
 8015512:	6823      	ldr	r3, [r4, #0]
 8015514:	6922      	ldr	r2, [r4, #16]
 8015516:	1a98      	subs	r0, r3, r2
 8015518:	6963      	ldr	r3, [r4, #20]
 801551a:	b2f6      	uxtb	r6, r6
 801551c:	4283      	cmp	r3, r0
 801551e:	4637      	mov	r7, r6
 8015520:	dc04      	bgt.n	801552c <__swbuf_r+0x3a>
 8015522:	4621      	mov	r1, r4
 8015524:	4628      	mov	r0, r5
 8015526:	f001 fce9 	bl	8016efc <_fflush_r>
 801552a:	b9e0      	cbnz	r0, 8015566 <__swbuf_r+0x74>
 801552c:	68a3      	ldr	r3, [r4, #8]
 801552e:	3b01      	subs	r3, #1
 8015530:	60a3      	str	r3, [r4, #8]
 8015532:	6823      	ldr	r3, [r4, #0]
 8015534:	1c5a      	adds	r2, r3, #1
 8015536:	6022      	str	r2, [r4, #0]
 8015538:	701e      	strb	r6, [r3, #0]
 801553a:	6962      	ldr	r2, [r4, #20]
 801553c:	1c43      	adds	r3, r0, #1
 801553e:	429a      	cmp	r2, r3
 8015540:	d004      	beq.n	801554c <__swbuf_r+0x5a>
 8015542:	89a3      	ldrh	r3, [r4, #12]
 8015544:	07db      	lsls	r3, r3, #31
 8015546:	d506      	bpl.n	8015556 <__swbuf_r+0x64>
 8015548:	2e0a      	cmp	r6, #10
 801554a:	d104      	bne.n	8015556 <__swbuf_r+0x64>
 801554c:	4621      	mov	r1, r4
 801554e:	4628      	mov	r0, r5
 8015550:	f001 fcd4 	bl	8016efc <_fflush_r>
 8015554:	b938      	cbnz	r0, 8015566 <__swbuf_r+0x74>
 8015556:	4638      	mov	r0, r7
 8015558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801555a:	4621      	mov	r1, r4
 801555c:	4628      	mov	r0, r5
 801555e:	f000 f805 	bl	801556c <__swsetup_r>
 8015562:	2800      	cmp	r0, #0
 8015564:	d0d5      	beq.n	8015512 <__swbuf_r+0x20>
 8015566:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801556a:	e7f4      	b.n	8015556 <__swbuf_r+0x64>

0801556c <__swsetup_r>:
 801556c:	b538      	push	{r3, r4, r5, lr}
 801556e:	4b2a      	ldr	r3, [pc, #168]	; (8015618 <__swsetup_r+0xac>)
 8015570:	4605      	mov	r5, r0
 8015572:	6818      	ldr	r0, [r3, #0]
 8015574:	460c      	mov	r4, r1
 8015576:	b118      	cbz	r0, 8015580 <__swsetup_r+0x14>
 8015578:	6a03      	ldr	r3, [r0, #32]
 801557a:	b90b      	cbnz	r3, 8015580 <__swsetup_r+0x14>
 801557c:	f7ff fed2 	bl	8015324 <__sinit>
 8015580:	89a3      	ldrh	r3, [r4, #12]
 8015582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015586:	0718      	lsls	r0, r3, #28
 8015588:	d422      	bmi.n	80155d0 <__swsetup_r+0x64>
 801558a:	06d9      	lsls	r1, r3, #27
 801558c:	d407      	bmi.n	801559e <__swsetup_r+0x32>
 801558e:	2309      	movs	r3, #9
 8015590:	602b      	str	r3, [r5, #0]
 8015592:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015596:	81a3      	strh	r3, [r4, #12]
 8015598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801559c:	e034      	b.n	8015608 <__swsetup_r+0x9c>
 801559e:	0758      	lsls	r0, r3, #29
 80155a0:	d512      	bpl.n	80155c8 <__swsetup_r+0x5c>
 80155a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155a4:	b141      	cbz	r1, 80155b8 <__swsetup_r+0x4c>
 80155a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80155aa:	4299      	cmp	r1, r3
 80155ac:	d002      	beq.n	80155b4 <__swsetup_r+0x48>
 80155ae:	4628      	mov	r0, r5
 80155b0:	f000 ff0a 	bl	80163c8 <_free_r>
 80155b4:	2300      	movs	r3, #0
 80155b6:	6363      	str	r3, [r4, #52]	; 0x34
 80155b8:	89a3      	ldrh	r3, [r4, #12]
 80155ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80155be:	81a3      	strh	r3, [r4, #12]
 80155c0:	2300      	movs	r3, #0
 80155c2:	6063      	str	r3, [r4, #4]
 80155c4:	6923      	ldr	r3, [r4, #16]
 80155c6:	6023      	str	r3, [r4, #0]
 80155c8:	89a3      	ldrh	r3, [r4, #12]
 80155ca:	f043 0308 	orr.w	r3, r3, #8
 80155ce:	81a3      	strh	r3, [r4, #12]
 80155d0:	6923      	ldr	r3, [r4, #16]
 80155d2:	b94b      	cbnz	r3, 80155e8 <__swsetup_r+0x7c>
 80155d4:	89a3      	ldrh	r3, [r4, #12]
 80155d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80155da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80155de:	d003      	beq.n	80155e8 <__swsetup_r+0x7c>
 80155e0:	4621      	mov	r1, r4
 80155e2:	4628      	mov	r0, r5
 80155e4:	f001 fcd8 	bl	8016f98 <__smakebuf_r>
 80155e8:	89a0      	ldrh	r0, [r4, #12]
 80155ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80155ee:	f010 0301 	ands.w	r3, r0, #1
 80155f2:	d00a      	beq.n	801560a <__swsetup_r+0x9e>
 80155f4:	2300      	movs	r3, #0
 80155f6:	60a3      	str	r3, [r4, #8]
 80155f8:	6963      	ldr	r3, [r4, #20]
 80155fa:	425b      	negs	r3, r3
 80155fc:	61a3      	str	r3, [r4, #24]
 80155fe:	6923      	ldr	r3, [r4, #16]
 8015600:	b943      	cbnz	r3, 8015614 <__swsetup_r+0xa8>
 8015602:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015606:	d1c4      	bne.n	8015592 <__swsetup_r+0x26>
 8015608:	bd38      	pop	{r3, r4, r5, pc}
 801560a:	0781      	lsls	r1, r0, #30
 801560c:	bf58      	it	pl
 801560e:	6963      	ldrpl	r3, [r4, #20]
 8015610:	60a3      	str	r3, [r4, #8]
 8015612:	e7f4      	b.n	80155fe <__swsetup_r+0x92>
 8015614:	2000      	movs	r0, #0
 8015616:	e7f7      	b.n	8015608 <__swsetup_r+0x9c>
 8015618:	240000d8 	.word	0x240000d8

0801561c <memset>:
 801561c:	4402      	add	r2, r0
 801561e:	4603      	mov	r3, r0
 8015620:	4293      	cmp	r3, r2
 8015622:	d100      	bne.n	8015626 <memset+0xa>
 8015624:	4770      	bx	lr
 8015626:	f803 1b01 	strb.w	r1, [r3], #1
 801562a:	e7f9      	b.n	8015620 <memset+0x4>

0801562c <_raise_r>:
 801562c:	291f      	cmp	r1, #31
 801562e:	b538      	push	{r3, r4, r5, lr}
 8015630:	4604      	mov	r4, r0
 8015632:	460d      	mov	r5, r1
 8015634:	d904      	bls.n	8015640 <_raise_r+0x14>
 8015636:	2316      	movs	r3, #22
 8015638:	6003      	str	r3, [r0, #0]
 801563a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801563e:	bd38      	pop	{r3, r4, r5, pc}
 8015640:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015642:	b112      	cbz	r2, 801564a <_raise_r+0x1e>
 8015644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015648:	b94b      	cbnz	r3, 801565e <_raise_r+0x32>
 801564a:	4620      	mov	r0, r4
 801564c:	f000 f868 	bl	8015720 <_getpid_r>
 8015650:	462a      	mov	r2, r5
 8015652:	4601      	mov	r1, r0
 8015654:	4620      	mov	r0, r4
 8015656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801565a:	f000 b84f 	b.w	80156fc <_kill_r>
 801565e:	2b01      	cmp	r3, #1
 8015660:	d00a      	beq.n	8015678 <_raise_r+0x4c>
 8015662:	1c59      	adds	r1, r3, #1
 8015664:	d103      	bne.n	801566e <_raise_r+0x42>
 8015666:	2316      	movs	r3, #22
 8015668:	6003      	str	r3, [r0, #0]
 801566a:	2001      	movs	r0, #1
 801566c:	e7e7      	b.n	801563e <_raise_r+0x12>
 801566e:	2400      	movs	r4, #0
 8015670:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015674:	4628      	mov	r0, r5
 8015676:	4798      	blx	r3
 8015678:	2000      	movs	r0, #0
 801567a:	e7e0      	b.n	801563e <_raise_r+0x12>

0801567c <raise>:
 801567c:	4b02      	ldr	r3, [pc, #8]	; (8015688 <raise+0xc>)
 801567e:	4601      	mov	r1, r0
 8015680:	6818      	ldr	r0, [r3, #0]
 8015682:	f7ff bfd3 	b.w	801562c <_raise_r>
 8015686:	bf00      	nop
 8015688:	240000d8 	.word	0x240000d8

0801568c <_localeconv_r>:
 801568c:	4800      	ldr	r0, [pc, #0]	; (8015690 <_localeconv_r+0x4>)
 801568e:	4770      	bx	lr
 8015690:	240001cc 	.word	0x240001cc

08015694 <_close_r>:
 8015694:	b538      	push	{r3, r4, r5, lr}
 8015696:	4d06      	ldr	r5, [pc, #24]	; (80156b0 <_close_r+0x1c>)
 8015698:	2300      	movs	r3, #0
 801569a:	4604      	mov	r4, r0
 801569c:	4608      	mov	r0, r1
 801569e:	602b      	str	r3, [r5, #0]
 80156a0:	f7f1 fc75 	bl	8006f8e <_close>
 80156a4:	1c43      	adds	r3, r0, #1
 80156a6:	d102      	bne.n	80156ae <_close_r+0x1a>
 80156a8:	682b      	ldr	r3, [r5, #0]
 80156aa:	b103      	cbz	r3, 80156ae <_close_r+0x1a>
 80156ac:	6023      	str	r3, [r4, #0]
 80156ae:	bd38      	pop	{r3, r4, r5, pc}
 80156b0:	24004764 	.word	0x24004764

080156b4 <_lseek_r>:
 80156b4:	b538      	push	{r3, r4, r5, lr}
 80156b6:	4d07      	ldr	r5, [pc, #28]	; (80156d4 <_lseek_r+0x20>)
 80156b8:	4604      	mov	r4, r0
 80156ba:	4608      	mov	r0, r1
 80156bc:	4611      	mov	r1, r2
 80156be:	2200      	movs	r2, #0
 80156c0:	602a      	str	r2, [r5, #0]
 80156c2:	461a      	mov	r2, r3
 80156c4:	f7f1 fc8a 	bl	8006fdc <_lseek>
 80156c8:	1c43      	adds	r3, r0, #1
 80156ca:	d102      	bne.n	80156d2 <_lseek_r+0x1e>
 80156cc:	682b      	ldr	r3, [r5, #0]
 80156ce:	b103      	cbz	r3, 80156d2 <_lseek_r+0x1e>
 80156d0:	6023      	str	r3, [r4, #0]
 80156d2:	bd38      	pop	{r3, r4, r5, pc}
 80156d4:	24004764 	.word	0x24004764

080156d8 <_read_r>:
 80156d8:	b538      	push	{r3, r4, r5, lr}
 80156da:	4d07      	ldr	r5, [pc, #28]	; (80156f8 <_read_r+0x20>)
 80156dc:	4604      	mov	r4, r0
 80156de:	4608      	mov	r0, r1
 80156e0:	4611      	mov	r1, r2
 80156e2:	2200      	movs	r2, #0
 80156e4:	602a      	str	r2, [r5, #0]
 80156e6:	461a      	mov	r2, r3
 80156e8:	f7f1 fc18 	bl	8006f1c <_read>
 80156ec:	1c43      	adds	r3, r0, #1
 80156ee:	d102      	bne.n	80156f6 <_read_r+0x1e>
 80156f0:	682b      	ldr	r3, [r5, #0]
 80156f2:	b103      	cbz	r3, 80156f6 <_read_r+0x1e>
 80156f4:	6023      	str	r3, [r4, #0]
 80156f6:	bd38      	pop	{r3, r4, r5, pc}
 80156f8:	24004764 	.word	0x24004764

080156fc <_kill_r>:
 80156fc:	b538      	push	{r3, r4, r5, lr}
 80156fe:	4d07      	ldr	r5, [pc, #28]	; (801571c <_kill_r+0x20>)
 8015700:	2300      	movs	r3, #0
 8015702:	4604      	mov	r4, r0
 8015704:	4608      	mov	r0, r1
 8015706:	4611      	mov	r1, r2
 8015708:	602b      	str	r3, [r5, #0]
 801570a:	f7f1 fbed 	bl	8006ee8 <_kill>
 801570e:	1c43      	adds	r3, r0, #1
 8015710:	d102      	bne.n	8015718 <_kill_r+0x1c>
 8015712:	682b      	ldr	r3, [r5, #0]
 8015714:	b103      	cbz	r3, 8015718 <_kill_r+0x1c>
 8015716:	6023      	str	r3, [r4, #0]
 8015718:	bd38      	pop	{r3, r4, r5, pc}
 801571a:	bf00      	nop
 801571c:	24004764 	.word	0x24004764

08015720 <_getpid_r>:
 8015720:	f7f1 bbda 	b.w	8006ed8 <_getpid>

08015724 <_sbrk_r>:
 8015724:	b538      	push	{r3, r4, r5, lr}
 8015726:	4d06      	ldr	r5, [pc, #24]	; (8015740 <_sbrk_r+0x1c>)
 8015728:	2300      	movs	r3, #0
 801572a:	4604      	mov	r4, r0
 801572c:	4608      	mov	r0, r1
 801572e:	602b      	str	r3, [r5, #0]
 8015730:	f7f1 fc62 	bl	8006ff8 <_sbrk>
 8015734:	1c43      	adds	r3, r0, #1
 8015736:	d102      	bne.n	801573e <_sbrk_r+0x1a>
 8015738:	682b      	ldr	r3, [r5, #0]
 801573a:	b103      	cbz	r3, 801573e <_sbrk_r+0x1a>
 801573c:	6023      	str	r3, [r4, #0]
 801573e:	bd38      	pop	{r3, r4, r5, pc}
 8015740:	24004764 	.word	0x24004764

08015744 <_write_r>:
 8015744:	b538      	push	{r3, r4, r5, lr}
 8015746:	4d07      	ldr	r5, [pc, #28]	; (8015764 <_write_r+0x20>)
 8015748:	4604      	mov	r4, r0
 801574a:	4608      	mov	r0, r1
 801574c:	4611      	mov	r1, r2
 801574e:	2200      	movs	r2, #0
 8015750:	602a      	str	r2, [r5, #0]
 8015752:	461a      	mov	r2, r3
 8015754:	f7f1 fbff 	bl	8006f56 <_write>
 8015758:	1c43      	adds	r3, r0, #1
 801575a:	d102      	bne.n	8015762 <_write_r+0x1e>
 801575c:	682b      	ldr	r3, [r5, #0]
 801575e:	b103      	cbz	r3, 8015762 <_write_r+0x1e>
 8015760:	6023      	str	r3, [r4, #0]
 8015762:	bd38      	pop	{r3, r4, r5, pc}
 8015764:	24004764 	.word	0x24004764

08015768 <__errno>:
 8015768:	4b01      	ldr	r3, [pc, #4]	; (8015770 <__errno+0x8>)
 801576a:	6818      	ldr	r0, [r3, #0]
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	240000d8 	.word	0x240000d8

08015774 <__libc_init_array>:
 8015774:	b570      	push	{r4, r5, r6, lr}
 8015776:	4d0d      	ldr	r5, [pc, #52]	; (80157ac <__libc_init_array+0x38>)
 8015778:	4c0d      	ldr	r4, [pc, #52]	; (80157b0 <__libc_init_array+0x3c>)
 801577a:	1b64      	subs	r4, r4, r5
 801577c:	10a4      	asrs	r4, r4, #2
 801577e:	2600      	movs	r6, #0
 8015780:	42a6      	cmp	r6, r4
 8015782:	d109      	bne.n	8015798 <__libc_init_array+0x24>
 8015784:	4d0b      	ldr	r5, [pc, #44]	; (80157b4 <__libc_init_array+0x40>)
 8015786:	4c0c      	ldr	r4, [pc, #48]	; (80157b8 <__libc_init_array+0x44>)
 8015788:	f001 fcca 	bl	8017120 <_init>
 801578c:	1b64      	subs	r4, r4, r5
 801578e:	10a4      	asrs	r4, r4, #2
 8015790:	2600      	movs	r6, #0
 8015792:	42a6      	cmp	r6, r4
 8015794:	d105      	bne.n	80157a2 <__libc_init_array+0x2e>
 8015796:	bd70      	pop	{r4, r5, r6, pc}
 8015798:	f855 3b04 	ldr.w	r3, [r5], #4
 801579c:	4798      	blx	r3
 801579e:	3601      	adds	r6, #1
 80157a0:	e7ee      	b.n	8015780 <__libc_init_array+0xc>
 80157a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80157a6:	4798      	blx	r3
 80157a8:	3601      	adds	r6, #1
 80157aa:	e7f2      	b.n	8015792 <__libc_init_array+0x1e>
 80157ac:	08017a24 	.word	0x08017a24
 80157b0:	08017a24 	.word	0x08017a24
 80157b4:	08017a24 	.word	0x08017a24
 80157b8:	08017a30 	.word	0x08017a30

080157bc <__retarget_lock_init_recursive>:
 80157bc:	4770      	bx	lr

080157be <__retarget_lock_acquire_recursive>:
 80157be:	4770      	bx	lr

080157c0 <__retarget_lock_release_recursive>:
 80157c0:	4770      	bx	lr

080157c2 <memcpy>:
 80157c2:	440a      	add	r2, r1
 80157c4:	4291      	cmp	r1, r2
 80157c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80157ca:	d100      	bne.n	80157ce <memcpy+0xc>
 80157cc:	4770      	bx	lr
 80157ce:	b510      	push	{r4, lr}
 80157d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80157d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80157d8:	4291      	cmp	r1, r2
 80157da:	d1f9      	bne.n	80157d0 <memcpy+0xe>
 80157dc:	bd10      	pop	{r4, pc}

080157de <quorem>:
 80157de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e2:	6903      	ldr	r3, [r0, #16]
 80157e4:	690c      	ldr	r4, [r1, #16]
 80157e6:	42a3      	cmp	r3, r4
 80157e8:	4607      	mov	r7, r0
 80157ea:	db7e      	blt.n	80158ea <quorem+0x10c>
 80157ec:	3c01      	subs	r4, #1
 80157ee:	f101 0814 	add.w	r8, r1, #20
 80157f2:	f100 0514 	add.w	r5, r0, #20
 80157f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80157fa:	9301      	str	r3, [sp, #4]
 80157fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015800:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015804:	3301      	adds	r3, #1
 8015806:	429a      	cmp	r2, r3
 8015808:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801580c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015810:	fbb2 f6f3 	udiv	r6, r2, r3
 8015814:	d331      	bcc.n	801587a <quorem+0x9c>
 8015816:	f04f 0e00 	mov.w	lr, #0
 801581a:	4640      	mov	r0, r8
 801581c:	46ac      	mov	ip, r5
 801581e:	46f2      	mov	sl, lr
 8015820:	f850 2b04 	ldr.w	r2, [r0], #4
 8015824:	b293      	uxth	r3, r2
 8015826:	fb06 e303 	mla	r3, r6, r3, lr
 801582a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801582e:	0c1a      	lsrs	r2, r3, #16
 8015830:	b29b      	uxth	r3, r3
 8015832:	ebaa 0303 	sub.w	r3, sl, r3
 8015836:	f8dc a000 	ldr.w	sl, [ip]
 801583a:	fa13 f38a 	uxtah	r3, r3, sl
 801583e:	fb06 220e 	mla	r2, r6, lr, r2
 8015842:	9300      	str	r3, [sp, #0]
 8015844:	9b00      	ldr	r3, [sp, #0]
 8015846:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801584a:	b292      	uxth	r2, r2
 801584c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015850:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015854:	f8bd 3000 	ldrh.w	r3, [sp]
 8015858:	4581      	cmp	r9, r0
 801585a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801585e:	f84c 3b04 	str.w	r3, [ip], #4
 8015862:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015866:	d2db      	bcs.n	8015820 <quorem+0x42>
 8015868:	f855 300b 	ldr.w	r3, [r5, fp]
 801586c:	b92b      	cbnz	r3, 801587a <quorem+0x9c>
 801586e:	9b01      	ldr	r3, [sp, #4]
 8015870:	3b04      	subs	r3, #4
 8015872:	429d      	cmp	r5, r3
 8015874:	461a      	mov	r2, r3
 8015876:	d32c      	bcc.n	80158d2 <quorem+0xf4>
 8015878:	613c      	str	r4, [r7, #16]
 801587a:	4638      	mov	r0, r7
 801587c:	f001 f86c 	bl	8016958 <__mcmp>
 8015880:	2800      	cmp	r0, #0
 8015882:	db22      	blt.n	80158ca <quorem+0xec>
 8015884:	3601      	adds	r6, #1
 8015886:	4629      	mov	r1, r5
 8015888:	2000      	movs	r0, #0
 801588a:	f858 2b04 	ldr.w	r2, [r8], #4
 801588e:	f8d1 c000 	ldr.w	ip, [r1]
 8015892:	b293      	uxth	r3, r2
 8015894:	1ac3      	subs	r3, r0, r3
 8015896:	0c12      	lsrs	r2, r2, #16
 8015898:	fa13 f38c 	uxtah	r3, r3, ip
 801589c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80158a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80158a4:	b29b      	uxth	r3, r3
 80158a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80158aa:	45c1      	cmp	r9, r8
 80158ac:	f841 3b04 	str.w	r3, [r1], #4
 80158b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80158b4:	d2e9      	bcs.n	801588a <quorem+0xac>
 80158b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80158ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80158be:	b922      	cbnz	r2, 80158ca <quorem+0xec>
 80158c0:	3b04      	subs	r3, #4
 80158c2:	429d      	cmp	r5, r3
 80158c4:	461a      	mov	r2, r3
 80158c6:	d30a      	bcc.n	80158de <quorem+0x100>
 80158c8:	613c      	str	r4, [r7, #16]
 80158ca:	4630      	mov	r0, r6
 80158cc:	b003      	add	sp, #12
 80158ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158d2:	6812      	ldr	r2, [r2, #0]
 80158d4:	3b04      	subs	r3, #4
 80158d6:	2a00      	cmp	r2, #0
 80158d8:	d1ce      	bne.n	8015878 <quorem+0x9a>
 80158da:	3c01      	subs	r4, #1
 80158dc:	e7c9      	b.n	8015872 <quorem+0x94>
 80158de:	6812      	ldr	r2, [r2, #0]
 80158e0:	3b04      	subs	r3, #4
 80158e2:	2a00      	cmp	r2, #0
 80158e4:	d1f0      	bne.n	80158c8 <quorem+0xea>
 80158e6:	3c01      	subs	r4, #1
 80158e8:	e7eb      	b.n	80158c2 <quorem+0xe4>
 80158ea:	2000      	movs	r0, #0
 80158ec:	e7ee      	b.n	80158cc <quorem+0xee>
	...

080158f0 <_dtoa_r>:
 80158f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158f4:	ed2d 8b02 	vpush	{d8}
 80158f8:	69c5      	ldr	r5, [r0, #28]
 80158fa:	b091      	sub	sp, #68	; 0x44
 80158fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015900:	ec59 8b10 	vmov	r8, r9, d0
 8015904:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015906:	9106      	str	r1, [sp, #24]
 8015908:	4606      	mov	r6, r0
 801590a:	9208      	str	r2, [sp, #32]
 801590c:	930c      	str	r3, [sp, #48]	; 0x30
 801590e:	b975      	cbnz	r5, 801592e <_dtoa_r+0x3e>
 8015910:	2010      	movs	r0, #16
 8015912:	f7fe ff4b 	bl	80147ac <malloc>
 8015916:	4602      	mov	r2, r0
 8015918:	61f0      	str	r0, [r6, #28]
 801591a:	b920      	cbnz	r0, 8015926 <_dtoa_r+0x36>
 801591c:	4ba6      	ldr	r3, [pc, #664]	; (8015bb8 <_dtoa_r+0x2c8>)
 801591e:	21ef      	movs	r1, #239	; 0xef
 8015920:	48a6      	ldr	r0, [pc, #664]	; (8015bbc <_dtoa_r+0x2cc>)
 8015922:	f001 fb97 	bl	8017054 <__assert_func>
 8015926:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801592a:	6005      	str	r5, [r0, #0]
 801592c:	60c5      	str	r5, [r0, #12]
 801592e:	69f3      	ldr	r3, [r6, #28]
 8015930:	6819      	ldr	r1, [r3, #0]
 8015932:	b151      	cbz	r1, 801594a <_dtoa_r+0x5a>
 8015934:	685a      	ldr	r2, [r3, #4]
 8015936:	604a      	str	r2, [r1, #4]
 8015938:	2301      	movs	r3, #1
 801593a:	4093      	lsls	r3, r2
 801593c:	608b      	str	r3, [r1, #8]
 801593e:	4630      	mov	r0, r6
 8015940:	f000 fdce 	bl	80164e0 <_Bfree>
 8015944:	69f3      	ldr	r3, [r6, #28]
 8015946:	2200      	movs	r2, #0
 8015948:	601a      	str	r2, [r3, #0]
 801594a:	f1b9 0300 	subs.w	r3, r9, #0
 801594e:	bfbb      	ittet	lt
 8015950:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015954:	9303      	strlt	r3, [sp, #12]
 8015956:	2300      	movge	r3, #0
 8015958:	2201      	movlt	r2, #1
 801595a:	bfac      	ite	ge
 801595c:	6023      	strge	r3, [r4, #0]
 801595e:	6022      	strlt	r2, [r4, #0]
 8015960:	4b97      	ldr	r3, [pc, #604]	; (8015bc0 <_dtoa_r+0x2d0>)
 8015962:	9c03      	ldr	r4, [sp, #12]
 8015964:	43a3      	bics	r3, r4
 8015966:	d11c      	bne.n	80159a2 <_dtoa_r+0xb2>
 8015968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801596a:	f242 730f 	movw	r3, #9999	; 0x270f
 801596e:	6013      	str	r3, [r2, #0]
 8015970:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015974:	ea53 0308 	orrs.w	r3, r3, r8
 8015978:	f000 84fb 	beq.w	8016372 <_dtoa_r+0xa82>
 801597c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801597e:	b963      	cbnz	r3, 801599a <_dtoa_r+0xaa>
 8015980:	4b90      	ldr	r3, [pc, #576]	; (8015bc4 <_dtoa_r+0x2d4>)
 8015982:	e020      	b.n	80159c6 <_dtoa_r+0xd6>
 8015984:	4b90      	ldr	r3, [pc, #576]	; (8015bc8 <_dtoa_r+0x2d8>)
 8015986:	9301      	str	r3, [sp, #4]
 8015988:	3308      	adds	r3, #8
 801598a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801598c:	6013      	str	r3, [r2, #0]
 801598e:	9801      	ldr	r0, [sp, #4]
 8015990:	b011      	add	sp, #68	; 0x44
 8015992:	ecbd 8b02 	vpop	{d8}
 8015996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801599a:	4b8a      	ldr	r3, [pc, #552]	; (8015bc4 <_dtoa_r+0x2d4>)
 801599c:	9301      	str	r3, [sp, #4]
 801599e:	3303      	adds	r3, #3
 80159a0:	e7f3      	b.n	801598a <_dtoa_r+0x9a>
 80159a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80159a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80159aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ae:	d10c      	bne.n	80159ca <_dtoa_r+0xda>
 80159b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159b2:	2301      	movs	r3, #1
 80159b4:	6013      	str	r3, [r2, #0]
 80159b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	f000 84d7 	beq.w	801636c <_dtoa_r+0xa7c>
 80159be:	4b83      	ldr	r3, [pc, #524]	; (8015bcc <_dtoa_r+0x2dc>)
 80159c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80159c2:	6013      	str	r3, [r2, #0]
 80159c4:	3b01      	subs	r3, #1
 80159c6:	9301      	str	r3, [sp, #4]
 80159c8:	e7e1      	b.n	801598e <_dtoa_r+0x9e>
 80159ca:	aa0e      	add	r2, sp, #56	; 0x38
 80159cc:	a90f      	add	r1, sp, #60	; 0x3c
 80159ce:	4630      	mov	r0, r6
 80159d0:	eeb0 0b48 	vmov.f64	d0, d8
 80159d4:	f001 f866 	bl	8016aa4 <__d2b>
 80159d8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80159dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159de:	4605      	mov	r5, r0
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d046      	beq.n	8015a72 <_dtoa_r+0x182>
 80159e4:	eeb0 7b48 	vmov.f64	d7, d8
 80159e8:	ee18 1a90 	vmov	r1, s17
 80159ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80159f0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80159f4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80159f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80159fc:	2000      	movs	r0, #0
 80159fe:	ee07 1a90 	vmov	s15, r1
 8015a02:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8015a06:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8015ba0 <_dtoa_r+0x2b0>
 8015a0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015a0e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8015ba8 <_dtoa_r+0x2b8>
 8015a12:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015a16:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8015bb0 <_dtoa_r+0x2c0>
 8015a1a:	ee07 3a90 	vmov	s15, r3
 8015a1e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8015a22:	eeb0 7b46 	vmov.f64	d7, d6
 8015a26:	eea4 7b05 	vfma.f64	d7, d4, d5
 8015a2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8015a2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a36:	ee16 ba90 	vmov	fp, s13
 8015a3a:	9009      	str	r0, [sp, #36]	; 0x24
 8015a3c:	d508      	bpl.n	8015a50 <_dtoa_r+0x160>
 8015a3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015a42:	eeb4 6b47 	vcmp.f64	d6, d7
 8015a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a4a:	bf18      	it	ne
 8015a4c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8015a50:	f1bb 0f16 	cmp.w	fp, #22
 8015a54:	d82b      	bhi.n	8015aae <_dtoa_r+0x1be>
 8015a56:	495e      	ldr	r1, [pc, #376]	; (8015bd0 <_dtoa_r+0x2e0>)
 8015a58:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8015a5c:	ed91 7b00 	vldr	d7, [r1]
 8015a60:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a68:	d501      	bpl.n	8015a6e <_dtoa_r+0x17e>
 8015a6a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015a6e:	2100      	movs	r1, #0
 8015a70:	e01e      	b.n	8015ab0 <_dtoa_r+0x1c0>
 8015a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a74:	4413      	add	r3, r2
 8015a76:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8015a7a:	2920      	cmp	r1, #32
 8015a7c:	bfc1      	itttt	gt
 8015a7e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8015a82:	408c      	lslgt	r4, r1
 8015a84:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8015a88:	fa28 f101 	lsrgt.w	r1, r8, r1
 8015a8c:	bfd6      	itet	le
 8015a8e:	f1c1 0120 	rsble	r1, r1, #32
 8015a92:	4321      	orrgt	r1, r4
 8015a94:	fa08 f101 	lslle.w	r1, r8, r1
 8015a98:	ee07 1a90 	vmov	s15, r1
 8015a9c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015aa0:	3b01      	subs	r3, #1
 8015aa2:	ee17 1a90 	vmov	r1, s15
 8015aa6:	2001      	movs	r0, #1
 8015aa8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8015aac:	e7a7      	b.n	80159fe <_dtoa_r+0x10e>
 8015aae:	2101      	movs	r1, #1
 8015ab0:	1ad2      	subs	r2, r2, r3
 8015ab2:	1e53      	subs	r3, r2, #1
 8015ab4:	9305      	str	r3, [sp, #20]
 8015ab6:	bf45      	ittet	mi
 8015ab8:	f1c2 0301 	rsbmi	r3, r2, #1
 8015abc:	9304      	strmi	r3, [sp, #16]
 8015abe:	2300      	movpl	r3, #0
 8015ac0:	2300      	movmi	r3, #0
 8015ac2:	bf4c      	ite	mi
 8015ac4:	9305      	strmi	r3, [sp, #20]
 8015ac6:	9304      	strpl	r3, [sp, #16]
 8015ac8:	f1bb 0f00 	cmp.w	fp, #0
 8015acc:	910b      	str	r1, [sp, #44]	; 0x2c
 8015ace:	db18      	blt.n	8015b02 <_dtoa_r+0x212>
 8015ad0:	9b05      	ldr	r3, [sp, #20]
 8015ad2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015ad6:	445b      	add	r3, fp
 8015ad8:	9305      	str	r3, [sp, #20]
 8015ada:	2300      	movs	r3, #0
 8015adc:	9a06      	ldr	r2, [sp, #24]
 8015ade:	2a09      	cmp	r2, #9
 8015ae0:	d848      	bhi.n	8015b74 <_dtoa_r+0x284>
 8015ae2:	2a05      	cmp	r2, #5
 8015ae4:	bfc4      	itt	gt
 8015ae6:	3a04      	subgt	r2, #4
 8015ae8:	9206      	strgt	r2, [sp, #24]
 8015aea:	9a06      	ldr	r2, [sp, #24]
 8015aec:	f1a2 0202 	sub.w	r2, r2, #2
 8015af0:	bfcc      	ite	gt
 8015af2:	2400      	movgt	r4, #0
 8015af4:	2401      	movle	r4, #1
 8015af6:	2a03      	cmp	r2, #3
 8015af8:	d847      	bhi.n	8015b8a <_dtoa_r+0x29a>
 8015afa:	e8df f002 	tbb	[pc, r2]
 8015afe:	2d0b      	.short	0x2d0b
 8015b00:	392b      	.short	0x392b
 8015b02:	9b04      	ldr	r3, [sp, #16]
 8015b04:	2200      	movs	r2, #0
 8015b06:	eba3 030b 	sub.w	r3, r3, fp
 8015b0a:	9304      	str	r3, [sp, #16]
 8015b0c:	920a      	str	r2, [sp, #40]	; 0x28
 8015b0e:	f1cb 0300 	rsb	r3, fp, #0
 8015b12:	e7e3      	b.n	8015adc <_dtoa_r+0x1ec>
 8015b14:	2200      	movs	r2, #0
 8015b16:	9207      	str	r2, [sp, #28]
 8015b18:	9a08      	ldr	r2, [sp, #32]
 8015b1a:	2a00      	cmp	r2, #0
 8015b1c:	dc38      	bgt.n	8015b90 <_dtoa_r+0x2a0>
 8015b1e:	f04f 0a01 	mov.w	sl, #1
 8015b22:	46d1      	mov	r9, sl
 8015b24:	4652      	mov	r2, sl
 8015b26:	f8cd a020 	str.w	sl, [sp, #32]
 8015b2a:	69f7      	ldr	r7, [r6, #28]
 8015b2c:	2100      	movs	r1, #0
 8015b2e:	2004      	movs	r0, #4
 8015b30:	f100 0c14 	add.w	ip, r0, #20
 8015b34:	4594      	cmp	ip, r2
 8015b36:	d930      	bls.n	8015b9a <_dtoa_r+0x2aa>
 8015b38:	6079      	str	r1, [r7, #4]
 8015b3a:	4630      	mov	r0, r6
 8015b3c:	930d      	str	r3, [sp, #52]	; 0x34
 8015b3e:	f000 fc8f 	bl	8016460 <_Balloc>
 8015b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b44:	9001      	str	r0, [sp, #4]
 8015b46:	4602      	mov	r2, r0
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	d145      	bne.n	8015bd8 <_dtoa_r+0x2e8>
 8015b4c:	4b21      	ldr	r3, [pc, #132]	; (8015bd4 <_dtoa_r+0x2e4>)
 8015b4e:	f240 11af 	movw	r1, #431	; 0x1af
 8015b52:	e6e5      	b.n	8015920 <_dtoa_r+0x30>
 8015b54:	2201      	movs	r2, #1
 8015b56:	e7de      	b.n	8015b16 <_dtoa_r+0x226>
 8015b58:	2200      	movs	r2, #0
 8015b5a:	9207      	str	r2, [sp, #28]
 8015b5c:	9a08      	ldr	r2, [sp, #32]
 8015b5e:	eb0b 0a02 	add.w	sl, fp, r2
 8015b62:	f10a 0901 	add.w	r9, sl, #1
 8015b66:	464a      	mov	r2, r9
 8015b68:	2a01      	cmp	r2, #1
 8015b6a:	bfb8      	it	lt
 8015b6c:	2201      	movlt	r2, #1
 8015b6e:	e7dc      	b.n	8015b2a <_dtoa_r+0x23a>
 8015b70:	2201      	movs	r2, #1
 8015b72:	e7f2      	b.n	8015b5a <_dtoa_r+0x26a>
 8015b74:	2401      	movs	r4, #1
 8015b76:	2200      	movs	r2, #0
 8015b78:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8015b7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015b80:	2100      	movs	r1, #0
 8015b82:	46d1      	mov	r9, sl
 8015b84:	2212      	movs	r2, #18
 8015b86:	9108      	str	r1, [sp, #32]
 8015b88:	e7cf      	b.n	8015b2a <_dtoa_r+0x23a>
 8015b8a:	2201      	movs	r2, #1
 8015b8c:	9207      	str	r2, [sp, #28]
 8015b8e:	e7f5      	b.n	8015b7c <_dtoa_r+0x28c>
 8015b90:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015b94:	46d1      	mov	r9, sl
 8015b96:	4652      	mov	r2, sl
 8015b98:	e7c7      	b.n	8015b2a <_dtoa_r+0x23a>
 8015b9a:	3101      	adds	r1, #1
 8015b9c:	0040      	lsls	r0, r0, #1
 8015b9e:	e7c7      	b.n	8015b30 <_dtoa_r+0x240>
 8015ba0:	636f4361 	.word	0x636f4361
 8015ba4:	3fd287a7 	.word	0x3fd287a7
 8015ba8:	8b60c8b3 	.word	0x8b60c8b3
 8015bac:	3fc68a28 	.word	0x3fc68a28
 8015bb0:	509f79fb 	.word	0x509f79fb
 8015bb4:	3fd34413 	.word	0x3fd34413
 8015bb8:	080176e9 	.word	0x080176e9
 8015bbc:	08017700 	.word	0x08017700
 8015bc0:	7ff00000 	.word	0x7ff00000
 8015bc4:	080176e5 	.word	0x080176e5
 8015bc8:	080176dc 	.word	0x080176dc
 8015bcc:	080176b9 	.word	0x080176b9
 8015bd0:	080177f0 	.word	0x080177f0
 8015bd4:	08017758 	.word	0x08017758
 8015bd8:	69f2      	ldr	r2, [r6, #28]
 8015bda:	9901      	ldr	r1, [sp, #4]
 8015bdc:	6011      	str	r1, [r2, #0]
 8015bde:	f1b9 0f0e 	cmp.w	r9, #14
 8015be2:	d86c      	bhi.n	8015cbe <_dtoa_r+0x3ce>
 8015be4:	2c00      	cmp	r4, #0
 8015be6:	d06a      	beq.n	8015cbe <_dtoa_r+0x3ce>
 8015be8:	f1bb 0f00 	cmp.w	fp, #0
 8015bec:	f340 80a0 	ble.w	8015d30 <_dtoa_r+0x440>
 8015bf0:	4ac1      	ldr	r2, [pc, #772]	; (8015ef8 <_dtoa_r+0x608>)
 8015bf2:	f00b 010f 	and.w	r1, fp, #15
 8015bf6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015bfa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015bfe:	ed92 7b00 	vldr	d7, [r2]
 8015c02:	ea4f 122b 	mov.w	r2, fp, asr #4
 8015c06:	f000 8087 	beq.w	8015d18 <_dtoa_r+0x428>
 8015c0a:	49bc      	ldr	r1, [pc, #752]	; (8015efc <_dtoa_r+0x60c>)
 8015c0c:	ed91 6b08 	vldr	d6, [r1, #32]
 8015c10:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015c14:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015c18:	f002 020f 	and.w	r2, r2, #15
 8015c1c:	2103      	movs	r1, #3
 8015c1e:	48b7      	ldr	r0, [pc, #732]	; (8015efc <_dtoa_r+0x60c>)
 8015c20:	2a00      	cmp	r2, #0
 8015c22:	d17b      	bne.n	8015d1c <_dtoa_r+0x42c>
 8015c24:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015c28:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015c2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015c30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015c32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c36:	2a00      	cmp	r2, #0
 8015c38:	f000 80a0 	beq.w	8015d7c <_dtoa_r+0x48c>
 8015c3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015c40:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c48:	f140 8098 	bpl.w	8015d7c <_dtoa_r+0x48c>
 8015c4c:	f1b9 0f00 	cmp.w	r9, #0
 8015c50:	f000 8094 	beq.w	8015d7c <_dtoa_r+0x48c>
 8015c54:	f1ba 0f00 	cmp.w	sl, #0
 8015c58:	dd2f      	ble.n	8015cba <_dtoa_r+0x3ca>
 8015c5a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015c5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015c62:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015c66:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8015c6a:	3101      	adds	r1, #1
 8015c6c:	4654      	mov	r4, sl
 8015c6e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015c72:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015c76:	ee07 1a90 	vmov	s15, r1
 8015c7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015c7e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015c82:	ee15 7a90 	vmov	r7, s11
 8015c86:	ec51 0b15 	vmov	r0, r1, d5
 8015c8a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8015c8e:	2c00      	cmp	r4, #0
 8015c90:	d177      	bne.n	8015d82 <_dtoa_r+0x492>
 8015c92:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015c96:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015c9a:	ec41 0b17 	vmov	d7, r0, r1
 8015c9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ca6:	f300 826a 	bgt.w	801617e <_dtoa_r+0x88e>
 8015caa:	eeb1 7b47 	vneg.f64	d7, d7
 8015cae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb6:	f100 8260 	bmi.w	801617a <_dtoa_r+0x88a>
 8015cba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015cbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015cc0:	2a00      	cmp	r2, #0
 8015cc2:	f2c0 811d 	blt.w	8015f00 <_dtoa_r+0x610>
 8015cc6:	f1bb 0f0e 	cmp.w	fp, #14
 8015cca:	f300 8119 	bgt.w	8015f00 <_dtoa_r+0x610>
 8015cce:	4b8a      	ldr	r3, [pc, #552]	; (8015ef8 <_dtoa_r+0x608>)
 8015cd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015cd4:	ed93 6b00 	vldr	d6, [r3]
 8015cd8:	9b08      	ldr	r3, [sp, #32]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	f280 80b7 	bge.w	8015e4e <_dtoa_r+0x55e>
 8015ce0:	f1b9 0f00 	cmp.w	r9, #0
 8015ce4:	f300 80b3 	bgt.w	8015e4e <_dtoa_r+0x55e>
 8015ce8:	f040 8246 	bne.w	8016178 <_dtoa_r+0x888>
 8015cec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015cf0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015cf4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015cf8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d00:	464c      	mov	r4, r9
 8015d02:	464f      	mov	r7, r9
 8015d04:	f280 821c 	bge.w	8016140 <_dtoa_r+0x850>
 8015d08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015d0c:	2331      	movs	r3, #49	; 0x31
 8015d0e:	f808 3b01 	strb.w	r3, [r8], #1
 8015d12:	f10b 0b01 	add.w	fp, fp, #1
 8015d16:	e218      	b.n	801614a <_dtoa_r+0x85a>
 8015d18:	2102      	movs	r1, #2
 8015d1a:	e780      	b.n	8015c1e <_dtoa_r+0x32e>
 8015d1c:	07d4      	lsls	r4, r2, #31
 8015d1e:	d504      	bpl.n	8015d2a <_dtoa_r+0x43a>
 8015d20:	ed90 6b00 	vldr	d6, [r0]
 8015d24:	3101      	adds	r1, #1
 8015d26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d2a:	1052      	asrs	r2, r2, #1
 8015d2c:	3008      	adds	r0, #8
 8015d2e:	e777      	b.n	8015c20 <_dtoa_r+0x330>
 8015d30:	d022      	beq.n	8015d78 <_dtoa_r+0x488>
 8015d32:	f1cb 0200 	rsb	r2, fp, #0
 8015d36:	4970      	ldr	r1, [pc, #448]	; (8015ef8 <_dtoa_r+0x608>)
 8015d38:	f002 000f 	and.w	r0, r2, #15
 8015d3c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015d40:	ed91 7b00 	vldr	d7, [r1]
 8015d44:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015d48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015d4c:	486b      	ldr	r0, [pc, #428]	; (8015efc <_dtoa_r+0x60c>)
 8015d4e:	1112      	asrs	r2, r2, #4
 8015d50:	2400      	movs	r4, #0
 8015d52:	2102      	movs	r1, #2
 8015d54:	b92a      	cbnz	r2, 8015d62 <_dtoa_r+0x472>
 8015d56:	2c00      	cmp	r4, #0
 8015d58:	f43f af6a 	beq.w	8015c30 <_dtoa_r+0x340>
 8015d5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015d60:	e766      	b.n	8015c30 <_dtoa_r+0x340>
 8015d62:	07d7      	lsls	r7, r2, #31
 8015d64:	d505      	bpl.n	8015d72 <_dtoa_r+0x482>
 8015d66:	ed90 6b00 	vldr	d6, [r0]
 8015d6a:	3101      	adds	r1, #1
 8015d6c:	2401      	movs	r4, #1
 8015d6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d72:	1052      	asrs	r2, r2, #1
 8015d74:	3008      	adds	r0, #8
 8015d76:	e7ed      	b.n	8015d54 <_dtoa_r+0x464>
 8015d78:	2102      	movs	r1, #2
 8015d7a:	e759      	b.n	8015c30 <_dtoa_r+0x340>
 8015d7c:	465a      	mov	r2, fp
 8015d7e:	464c      	mov	r4, r9
 8015d80:	e775      	b.n	8015c6e <_dtoa_r+0x37e>
 8015d82:	ec41 0b17 	vmov	d7, r0, r1
 8015d86:	495c      	ldr	r1, [pc, #368]	; (8015ef8 <_dtoa_r+0x608>)
 8015d88:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8015d8c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8015d90:	9901      	ldr	r1, [sp, #4]
 8015d92:	440c      	add	r4, r1
 8015d94:	9907      	ldr	r1, [sp, #28]
 8015d96:	b351      	cbz	r1, 8015dee <_dtoa_r+0x4fe>
 8015d98:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015d9c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015da0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015da4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015da8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015dac:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015db0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015db4:	ee14 1a90 	vmov	r1, s9
 8015db8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015dbc:	3130      	adds	r1, #48	; 0x30
 8015dbe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015dc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dca:	f808 1b01 	strb.w	r1, [r8], #1
 8015dce:	d439      	bmi.n	8015e44 <_dtoa_r+0x554>
 8015dd0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015dd4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ddc:	d472      	bmi.n	8015ec4 <_dtoa_r+0x5d4>
 8015dde:	45a0      	cmp	r8, r4
 8015de0:	f43f af6b 	beq.w	8015cba <_dtoa_r+0x3ca>
 8015de4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015de8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015dec:	e7e0      	b.n	8015db0 <_dtoa_r+0x4c0>
 8015dee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015df2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015df6:	4620      	mov	r0, r4
 8015df8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015dfc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015e00:	ee14 1a90 	vmov	r1, s9
 8015e04:	3130      	adds	r1, #48	; 0x30
 8015e06:	f808 1b01 	strb.w	r1, [r8], #1
 8015e0a:	45a0      	cmp	r8, r4
 8015e0c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015e10:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015e14:	d118      	bne.n	8015e48 <_dtoa_r+0x558>
 8015e16:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015e1a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015e1e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e26:	dc4d      	bgt.n	8015ec4 <_dtoa_r+0x5d4>
 8015e28:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015e2c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e34:	f57f af41 	bpl.w	8015cba <_dtoa_r+0x3ca>
 8015e38:	4680      	mov	r8, r0
 8015e3a:	3801      	subs	r0, #1
 8015e3c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015e40:	2b30      	cmp	r3, #48	; 0x30
 8015e42:	d0f9      	beq.n	8015e38 <_dtoa_r+0x548>
 8015e44:	4693      	mov	fp, r2
 8015e46:	e02a      	b.n	8015e9e <_dtoa_r+0x5ae>
 8015e48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015e4c:	e7d6      	b.n	8015dfc <_dtoa_r+0x50c>
 8015e4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015e52:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015e56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015e5a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015e5e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015e62:	ee15 3a10 	vmov	r3, s10
 8015e66:	3330      	adds	r3, #48	; 0x30
 8015e68:	f808 3b01 	strb.w	r3, [r8], #1
 8015e6c:	9b01      	ldr	r3, [sp, #4]
 8015e6e:	eba8 0303 	sub.w	r3, r8, r3
 8015e72:	4599      	cmp	r9, r3
 8015e74:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015e78:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015e7c:	d133      	bne.n	8015ee6 <_dtoa_r+0x5f6>
 8015e7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015e82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e8a:	dc1a      	bgt.n	8015ec2 <_dtoa_r+0x5d2>
 8015e8c:	eeb4 7b46 	vcmp.f64	d7, d6
 8015e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e94:	d103      	bne.n	8015e9e <_dtoa_r+0x5ae>
 8015e96:	ee15 3a10 	vmov	r3, s10
 8015e9a:	07d9      	lsls	r1, r3, #31
 8015e9c:	d411      	bmi.n	8015ec2 <_dtoa_r+0x5d2>
 8015e9e:	4629      	mov	r1, r5
 8015ea0:	4630      	mov	r0, r6
 8015ea2:	f000 fb1d 	bl	80164e0 <_Bfree>
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015eaa:	f888 3000 	strb.w	r3, [r8]
 8015eae:	f10b 0301 	add.w	r3, fp, #1
 8015eb2:	6013      	str	r3, [r2, #0]
 8015eb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	f43f ad69 	beq.w	801598e <_dtoa_r+0x9e>
 8015ebc:	f8c3 8000 	str.w	r8, [r3]
 8015ec0:	e565      	b.n	801598e <_dtoa_r+0x9e>
 8015ec2:	465a      	mov	r2, fp
 8015ec4:	4643      	mov	r3, r8
 8015ec6:	4698      	mov	r8, r3
 8015ec8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8015ecc:	2939      	cmp	r1, #57	; 0x39
 8015ece:	d106      	bne.n	8015ede <_dtoa_r+0x5ee>
 8015ed0:	9901      	ldr	r1, [sp, #4]
 8015ed2:	4299      	cmp	r1, r3
 8015ed4:	d1f7      	bne.n	8015ec6 <_dtoa_r+0x5d6>
 8015ed6:	9801      	ldr	r0, [sp, #4]
 8015ed8:	2130      	movs	r1, #48	; 0x30
 8015eda:	3201      	adds	r2, #1
 8015edc:	7001      	strb	r1, [r0, #0]
 8015ede:	7819      	ldrb	r1, [r3, #0]
 8015ee0:	3101      	adds	r1, #1
 8015ee2:	7019      	strb	r1, [r3, #0]
 8015ee4:	e7ae      	b.n	8015e44 <_dtoa_r+0x554>
 8015ee6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015eea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef2:	d1b2      	bne.n	8015e5a <_dtoa_r+0x56a>
 8015ef4:	e7d3      	b.n	8015e9e <_dtoa_r+0x5ae>
 8015ef6:	bf00      	nop
 8015ef8:	080177f0 	.word	0x080177f0
 8015efc:	080177c8 	.word	0x080177c8
 8015f00:	9907      	ldr	r1, [sp, #28]
 8015f02:	2900      	cmp	r1, #0
 8015f04:	f000 80d0 	beq.w	80160a8 <_dtoa_r+0x7b8>
 8015f08:	9906      	ldr	r1, [sp, #24]
 8015f0a:	2901      	cmp	r1, #1
 8015f0c:	f300 80b4 	bgt.w	8016078 <_dtoa_r+0x788>
 8015f10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f12:	2900      	cmp	r1, #0
 8015f14:	f000 80ac 	beq.w	8016070 <_dtoa_r+0x780>
 8015f18:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015f1c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015f20:	461c      	mov	r4, r3
 8015f22:	9309      	str	r3, [sp, #36]	; 0x24
 8015f24:	9b04      	ldr	r3, [sp, #16]
 8015f26:	4413      	add	r3, r2
 8015f28:	9304      	str	r3, [sp, #16]
 8015f2a:	9b05      	ldr	r3, [sp, #20]
 8015f2c:	2101      	movs	r1, #1
 8015f2e:	4413      	add	r3, r2
 8015f30:	4630      	mov	r0, r6
 8015f32:	9305      	str	r3, [sp, #20]
 8015f34:	f000 fb8a 	bl	801664c <__i2b>
 8015f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f3a:	4607      	mov	r7, r0
 8015f3c:	f1b8 0f00 	cmp.w	r8, #0
 8015f40:	d00d      	beq.n	8015f5e <_dtoa_r+0x66e>
 8015f42:	9a05      	ldr	r2, [sp, #20]
 8015f44:	2a00      	cmp	r2, #0
 8015f46:	dd0a      	ble.n	8015f5e <_dtoa_r+0x66e>
 8015f48:	4542      	cmp	r2, r8
 8015f4a:	9904      	ldr	r1, [sp, #16]
 8015f4c:	bfa8      	it	ge
 8015f4e:	4642      	movge	r2, r8
 8015f50:	1a89      	subs	r1, r1, r2
 8015f52:	9104      	str	r1, [sp, #16]
 8015f54:	9905      	ldr	r1, [sp, #20]
 8015f56:	eba8 0802 	sub.w	r8, r8, r2
 8015f5a:	1a8a      	subs	r2, r1, r2
 8015f5c:	9205      	str	r2, [sp, #20]
 8015f5e:	b303      	cbz	r3, 8015fa2 <_dtoa_r+0x6b2>
 8015f60:	9a07      	ldr	r2, [sp, #28]
 8015f62:	2a00      	cmp	r2, #0
 8015f64:	f000 80a5 	beq.w	80160b2 <_dtoa_r+0x7c2>
 8015f68:	2c00      	cmp	r4, #0
 8015f6a:	dd13      	ble.n	8015f94 <_dtoa_r+0x6a4>
 8015f6c:	4639      	mov	r1, r7
 8015f6e:	4622      	mov	r2, r4
 8015f70:	4630      	mov	r0, r6
 8015f72:	930d      	str	r3, [sp, #52]	; 0x34
 8015f74:	f000 fc2a 	bl	80167cc <__pow5mult>
 8015f78:	462a      	mov	r2, r5
 8015f7a:	4601      	mov	r1, r0
 8015f7c:	4607      	mov	r7, r0
 8015f7e:	4630      	mov	r0, r6
 8015f80:	f000 fb7a 	bl	8016678 <__multiply>
 8015f84:	4629      	mov	r1, r5
 8015f86:	9009      	str	r0, [sp, #36]	; 0x24
 8015f88:	4630      	mov	r0, r6
 8015f8a:	f000 faa9 	bl	80164e0 <_Bfree>
 8015f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f92:	4615      	mov	r5, r2
 8015f94:	1b1a      	subs	r2, r3, r4
 8015f96:	d004      	beq.n	8015fa2 <_dtoa_r+0x6b2>
 8015f98:	4629      	mov	r1, r5
 8015f9a:	4630      	mov	r0, r6
 8015f9c:	f000 fc16 	bl	80167cc <__pow5mult>
 8015fa0:	4605      	mov	r5, r0
 8015fa2:	2101      	movs	r1, #1
 8015fa4:	4630      	mov	r0, r6
 8015fa6:	f000 fb51 	bl	801664c <__i2b>
 8015faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	4604      	mov	r4, r0
 8015fb0:	f340 8081 	ble.w	80160b6 <_dtoa_r+0x7c6>
 8015fb4:	461a      	mov	r2, r3
 8015fb6:	4601      	mov	r1, r0
 8015fb8:	4630      	mov	r0, r6
 8015fba:	f000 fc07 	bl	80167cc <__pow5mult>
 8015fbe:	9b06      	ldr	r3, [sp, #24]
 8015fc0:	2b01      	cmp	r3, #1
 8015fc2:	4604      	mov	r4, r0
 8015fc4:	dd7a      	ble.n	80160bc <_dtoa_r+0x7cc>
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8015fca:	6922      	ldr	r2, [r4, #16]
 8015fcc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015fd0:	6910      	ldr	r0, [r2, #16]
 8015fd2:	f000 faed 	bl	80165b0 <__hi0bits>
 8015fd6:	f1c0 0020 	rsb	r0, r0, #32
 8015fda:	9b05      	ldr	r3, [sp, #20]
 8015fdc:	4418      	add	r0, r3
 8015fde:	f010 001f 	ands.w	r0, r0, #31
 8015fe2:	f000 8093 	beq.w	801610c <_dtoa_r+0x81c>
 8015fe6:	f1c0 0220 	rsb	r2, r0, #32
 8015fea:	2a04      	cmp	r2, #4
 8015fec:	f340 8085 	ble.w	80160fa <_dtoa_r+0x80a>
 8015ff0:	9b04      	ldr	r3, [sp, #16]
 8015ff2:	f1c0 001c 	rsb	r0, r0, #28
 8015ff6:	4403      	add	r3, r0
 8015ff8:	9304      	str	r3, [sp, #16]
 8015ffa:	9b05      	ldr	r3, [sp, #20]
 8015ffc:	4480      	add	r8, r0
 8015ffe:	4403      	add	r3, r0
 8016000:	9305      	str	r3, [sp, #20]
 8016002:	9b04      	ldr	r3, [sp, #16]
 8016004:	2b00      	cmp	r3, #0
 8016006:	dd05      	ble.n	8016014 <_dtoa_r+0x724>
 8016008:	4629      	mov	r1, r5
 801600a:	461a      	mov	r2, r3
 801600c:	4630      	mov	r0, r6
 801600e:	f000 fc37 	bl	8016880 <__lshift>
 8016012:	4605      	mov	r5, r0
 8016014:	9b05      	ldr	r3, [sp, #20]
 8016016:	2b00      	cmp	r3, #0
 8016018:	dd05      	ble.n	8016026 <_dtoa_r+0x736>
 801601a:	4621      	mov	r1, r4
 801601c:	461a      	mov	r2, r3
 801601e:	4630      	mov	r0, r6
 8016020:	f000 fc2e 	bl	8016880 <__lshift>
 8016024:	4604      	mov	r4, r0
 8016026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016028:	2b00      	cmp	r3, #0
 801602a:	d071      	beq.n	8016110 <_dtoa_r+0x820>
 801602c:	4621      	mov	r1, r4
 801602e:	4628      	mov	r0, r5
 8016030:	f000 fc92 	bl	8016958 <__mcmp>
 8016034:	2800      	cmp	r0, #0
 8016036:	da6b      	bge.n	8016110 <_dtoa_r+0x820>
 8016038:	2300      	movs	r3, #0
 801603a:	4629      	mov	r1, r5
 801603c:	220a      	movs	r2, #10
 801603e:	4630      	mov	r0, r6
 8016040:	f000 fa70 	bl	8016524 <__multadd>
 8016044:	9b07      	ldr	r3, [sp, #28]
 8016046:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801604a:	4605      	mov	r5, r0
 801604c:	2b00      	cmp	r3, #0
 801604e:	f000 8197 	beq.w	8016380 <_dtoa_r+0xa90>
 8016052:	4639      	mov	r1, r7
 8016054:	2300      	movs	r3, #0
 8016056:	220a      	movs	r2, #10
 8016058:	4630      	mov	r0, r6
 801605a:	f000 fa63 	bl	8016524 <__multadd>
 801605e:	f1ba 0f00 	cmp.w	sl, #0
 8016062:	4607      	mov	r7, r0
 8016064:	f300 8093 	bgt.w	801618e <_dtoa_r+0x89e>
 8016068:	9b06      	ldr	r3, [sp, #24]
 801606a:	2b02      	cmp	r3, #2
 801606c:	dc57      	bgt.n	801611e <_dtoa_r+0x82e>
 801606e:	e08e      	b.n	801618e <_dtoa_r+0x89e>
 8016070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016072:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016076:	e751      	b.n	8015f1c <_dtoa_r+0x62c>
 8016078:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801607c:	42a3      	cmp	r3, r4
 801607e:	bfbf      	itttt	lt
 8016080:	1ae2      	sublt	r2, r4, r3
 8016082:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016084:	189b      	addlt	r3, r3, r2
 8016086:	930a      	strlt	r3, [sp, #40]	; 0x28
 8016088:	bfae      	itee	ge
 801608a:	1b1c      	subge	r4, r3, r4
 801608c:	4623      	movlt	r3, r4
 801608e:	2400      	movlt	r4, #0
 8016090:	f1b9 0f00 	cmp.w	r9, #0
 8016094:	bfb5      	itete	lt
 8016096:	9a04      	ldrlt	r2, [sp, #16]
 8016098:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801609c:	eba2 0809 	sublt.w	r8, r2, r9
 80160a0:	464a      	movge	r2, r9
 80160a2:	bfb8      	it	lt
 80160a4:	2200      	movlt	r2, #0
 80160a6:	e73c      	b.n	8015f22 <_dtoa_r+0x632>
 80160a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80160ac:	9f07      	ldr	r7, [sp, #28]
 80160ae:	461c      	mov	r4, r3
 80160b0:	e744      	b.n	8015f3c <_dtoa_r+0x64c>
 80160b2:	461a      	mov	r2, r3
 80160b4:	e770      	b.n	8015f98 <_dtoa_r+0x6a8>
 80160b6:	9b06      	ldr	r3, [sp, #24]
 80160b8:	2b01      	cmp	r3, #1
 80160ba:	dc18      	bgt.n	80160ee <_dtoa_r+0x7fe>
 80160bc:	9b02      	ldr	r3, [sp, #8]
 80160be:	b9b3      	cbnz	r3, 80160ee <_dtoa_r+0x7fe>
 80160c0:	9b03      	ldr	r3, [sp, #12]
 80160c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80160c6:	b9a2      	cbnz	r2, 80160f2 <_dtoa_r+0x802>
 80160c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80160cc:	0d12      	lsrs	r2, r2, #20
 80160ce:	0512      	lsls	r2, r2, #20
 80160d0:	b18a      	cbz	r2, 80160f6 <_dtoa_r+0x806>
 80160d2:	9b04      	ldr	r3, [sp, #16]
 80160d4:	3301      	adds	r3, #1
 80160d6:	9304      	str	r3, [sp, #16]
 80160d8:	9b05      	ldr	r3, [sp, #20]
 80160da:	3301      	adds	r3, #1
 80160dc:	9305      	str	r3, [sp, #20]
 80160de:	2301      	movs	r3, #1
 80160e0:	9309      	str	r3, [sp, #36]	; 0x24
 80160e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	f47f af70 	bne.w	8015fca <_dtoa_r+0x6da>
 80160ea:	2001      	movs	r0, #1
 80160ec:	e775      	b.n	8015fda <_dtoa_r+0x6ea>
 80160ee:	2300      	movs	r3, #0
 80160f0:	e7f6      	b.n	80160e0 <_dtoa_r+0x7f0>
 80160f2:	9b02      	ldr	r3, [sp, #8]
 80160f4:	e7f4      	b.n	80160e0 <_dtoa_r+0x7f0>
 80160f6:	9209      	str	r2, [sp, #36]	; 0x24
 80160f8:	e7f3      	b.n	80160e2 <_dtoa_r+0x7f2>
 80160fa:	d082      	beq.n	8016002 <_dtoa_r+0x712>
 80160fc:	9b04      	ldr	r3, [sp, #16]
 80160fe:	321c      	adds	r2, #28
 8016100:	4413      	add	r3, r2
 8016102:	9304      	str	r3, [sp, #16]
 8016104:	9b05      	ldr	r3, [sp, #20]
 8016106:	4490      	add	r8, r2
 8016108:	4413      	add	r3, r2
 801610a:	e779      	b.n	8016000 <_dtoa_r+0x710>
 801610c:	4602      	mov	r2, r0
 801610e:	e7f5      	b.n	80160fc <_dtoa_r+0x80c>
 8016110:	f1b9 0f00 	cmp.w	r9, #0
 8016114:	dc36      	bgt.n	8016184 <_dtoa_r+0x894>
 8016116:	9b06      	ldr	r3, [sp, #24]
 8016118:	2b02      	cmp	r3, #2
 801611a:	dd33      	ble.n	8016184 <_dtoa_r+0x894>
 801611c:	46ca      	mov	sl, r9
 801611e:	f1ba 0f00 	cmp.w	sl, #0
 8016122:	d10d      	bne.n	8016140 <_dtoa_r+0x850>
 8016124:	4621      	mov	r1, r4
 8016126:	4653      	mov	r3, sl
 8016128:	2205      	movs	r2, #5
 801612a:	4630      	mov	r0, r6
 801612c:	f000 f9fa 	bl	8016524 <__multadd>
 8016130:	4601      	mov	r1, r0
 8016132:	4604      	mov	r4, r0
 8016134:	4628      	mov	r0, r5
 8016136:	f000 fc0f 	bl	8016958 <__mcmp>
 801613a:	2800      	cmp	r0, #0
 801613c:	f73f ade4 	bgt.w	8015d08 <_dtoa_r+0x418>
 8016140:	9b08      	ldr	r3, [sp, #32]
 8016142:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016146:	ea6f 0b03 	mvn.w	fp, r3
 801614a:	f04f 0900 	mov.w	r9, #0
 801614e:	4621      	mov	r1, r4
 8016150:	4630      	mov	r0, r6
 8016152:	f000 f9c5 	bl	80164e0 <_Bfree>
 8016156:	2f00      	cmp	r7, #0
 8016158:	f43f aea1 	beq.w	8015e9e <_dtoa_r+0x5ae>
 801615c:	f1b9 0f00 	cmp.w	r9, #0
 8016160:	d005      	beq.n	801616e <_dtoa_r+0x87e>
 8016162:	45b9      	cmp	r9, r7
 8016164:	d003      	beq.n	801616e <_dtoa_r+0x87e>
 8016166:	4649      	mov	r1, r9
 8016168:	4630      	mov	r0, r6
 801616a:	f000 f9b9 	bl	80164e0 <_Bfree>
 801616e:	4639      	mov	r1, r7
 8016170:	4630      	mov	r0, r6
 8016172:	f000 f9b5 	bl	80164e0 <_Bfree>
 8016176:	e692      	b.n	8015e9e <_dtoa_r+0x5ae>
 8016178:	2400      	movs	r4, #0
 801617a:	4627      	mov	r7, r4
 801617c:	e7e0      	b.n	8016140 <_dtoa_r+0x850>
 801617e:	4693      	mov	fp, r2
 8016180:	4627      	mov	r7, r4
 8016182:	e5c1      	b.n	8015d08 <_dtoa_r+0x418>
 8016184:	9b07      	ldr	r3, [sp, #28]
 8016186:	46ca      	mov	sl, r9
 8016188:	2b00      	cmp	r3, #0
 801618a:	f000 8100 	beq.w	801638e <_dtoa_r+0xa9e>
 801618e:	f1b8 0f00 	cmp.w	r8, #0
 8016192:	dd05      	ble.n	80161a0 <_dtoa_r+0x8b0>
 8016194:	4639      	mov	r1, r7
 8016196:	4642      	mov	r2, r8
 8016198:	4630      	mov	r0, r6
 801619a:	f000 fb71 	bl	8016880 <__lshift>
 801619e:	4607      	mov	r7, r0
 80161a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d05d      	beq.n	8016262 <_dtoa_r+0x972>
 80161a6:	6879      	ldr	r1, [r7, #4]
 80161a8:	4630      	mov	r0, r6
 80161aa:	f000 f959 	bl	8016460 <_Balloc>
 80161ae:	4680      	mov	r8, r0
 80161b0:	b928      	cbnz	r0, 80161be <_dtoa_r+0x8ce>
 80161b2:	4b82      	ldr	r3, [pc, #520]	; (80163bc <_dtoa_r+0xacc>)
 80161b4:	4602      	mov	r2, r0
 80161b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80161ba:	f7ff bbb1 	b.w	8015920 <_dtoa_r+0x30>
 80161be:	693a      	ldr	r2, [r7, #16]
 80161c0:	3202      	adds	r2, #2
 80161c2:	0092      	lsls	r2, r2, #2
 80161c4:	f107 010c 	add.w	r1, r7, #12
 80161c8:	300c      	adds	r0, #12
 80161ca:	f7ff fafa 	bl	80157c2 <memcpy>
 80161ce:	2201      	movs	r2, #1
 80161d0:	4641      	mov	r1, r8
 80161d2:	4630      	mov	r0, r6
 80161d4:	f000 fb54 	bl	8016880 <__lshift>
 80161d8:	9b01      	ldr	r3, [sp, #4]
 80161da:	3301      	adds	r3, #1
 80161dc:	9304      	str	r3, [sp, #16]
 80161de:	9b01      	ldr	r3, [sp, #4]
 80161e0:	4453      	add	r3, sl
 80161e2:	9308      	str	r3, [sp, #32]
 80161e4:	9b02      	ldr	r3, [sp, #8]
 80161e6:	f003 0301 	and.w	r3, r3, #1
 80161ea:	46b9      	mov	r9, r7
 80161ec:	9307      	str	r3, [sp, #28]
 80161ee:	4607      	mov	r7, r0
 80161f0:	9b04      	ldr	r3, [sp, #16]
 80161f2:	4621      	mov	r1, r4
 80161f4:	3b01      	subs	r3, #1
 80161f6:	4628      	mov	r0, r5
 80161f8:	9302      	str	r3, [sp, #8]
 80161fa:	f7ff faf0 	bl	80157de <quorem>
 80161fe:	4603      	mov	r3, r0
 8016200:	3330      	adds	r3, #48	; 0x30
 8016202:	9005      	str	r0, [sp, #20]
 8016204:	4649      	mov	r1, r9
 8016206:	4628      	mov	r0, r5
 8016208:	9309      	str	r3, [sp, #36]	; 0x24
 801620a:	f000 fba5 	bl	8016958 <__mcmp>
 801620e:	463a      	mov	r2, r7
 8016210:	4682      	mov	sl, r0
 8016212:	4621      	mov	r1, r4
 8016214:	4630      	mov	r0, r6
 8016216:	f000 fbbb 	bl	8016990 <__mdiff>
 801621a:	68c2      	ldr	r2, [r0, #12]
 801621c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801621e:	4680      	mov	r8, r0
 8016220:	bb0a      	cbnz	r2, 8016266 <_dtoa_r+0x976>
 8016222:	4601      	mov	r1, r0
 8016224:	4628      	mov	r0, r5
 8016226:	f000 fb97 	bl	8016958 <__mcmp>
 801622a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801622c:	4602      	mov	r2, r0
 801622e:	4641      	mov	r1, r8
 8016230:	4630      	mov	r0, r6
 8016232:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8016236:	f000 f953 	bl	80164e0 <_Bfree>
 801623a:	9b06      	ldr	r3, [sp, #24]
 801623c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801623e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016242:	ea43 0102 	orr.w	r1, r3, r2
 8016246:	9b07      	ldr	r3, [sp, #28]
 8016248:	4319      	orrs	r1, r3
 801624a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801624c:	d10d      	bne.n	801626a <_dtoa_r+0x97a>
 801624e:	2b39      	cmp	r3, #57	; 0x39
 8016250:	d029      	beq.n	80162a6 <_dtoa_r+0x9b6>
 8016252:	f1ba 0f00 	cmp.w	sl, #0
 8016256:	dd01      	ble.n	801625c <_dtoa_r+0x96c>
 8016258:	9b05      	ldr	r3, [sp, #20]
 801625a:	3331      	adds	r3, #49	; 0x31
 801625c:	9a02      	ldr	r2, [sp, #8]
 801625e:	7013      	strb	r3, [r2, #0]
 8016260:	e775      	b.n	801614e <_dtoa_r+0x85e>
 8016262:	4638      	mov	r0, r7
 8016264:	e7b8      	b.n	80161d8 <_dtoa_r+0x8e8>
 8016266:	2201      	movs	r2, #1
 8016268:	e7e1      	b.n	801622e <_dtoa_r+0x93e>
 801626a:	f1ba 0f00 	cmp.w	sl, #0
 801626e:	db06      	blt.n	801627e <_dtoa_r+0x98e>
 8016270:	9906      	ldr	r1, [sp, #24]
 8016272:	ea41 0a0a 	orr.w	sl, r1, sl
 8016276:	9907      	ldr	r1, [sp, #28]
 8016278:	ea5a 0a01 	orrs.w	sl, sl, r1
 801627c:	d120      	bne.n	80162c0 <_dtoa_r+0x9d0>
 801627e:	2a00      	cmp	r2, #0
 8016280:	ddec      	ble.n	801625c <_dtoa_r+0x96c>
 8016282:	4629      	mov	r1, r5
 8016284:	2201      	movs	r2, #1
 8016286:	4630      	mov	r0, r6
 8016288:	9304      	str	r3, [sp, #16]
 801628a:	f000 faf9 	bl	8016880 <__lshift>
 801628e:	4621      	mov	r1, r4
 8016290:	4605      	mov	r5, r0
 8016292:	f000 fb61 	bl	8016958 <__mcmp>
 8016296:	2800      	cmp	r0, #0
 8016298:	9b04      	ldr	r3, [sp, #16]
 801629a:	dc02      	bgt.n	80162a2 <_dtoa_r+0x9b2>
 801629c:	d1de      	bne.n	801625c <_dtoa_r+0x96c>
 801629e:	07da      	lsls	r2, r3, #31
 80162a0:	d5dc      	bpl.n	801625c <_dtoa_r+0x96c>
 80162a2:	2b39      	cmp	r3, #57	; 0x39
 80162a4:	d1d8      	bne.n	8016258 <_dtoa_r+0x968>
 80162a6:	9a02      	ldr	r2, [sp, #8]
 80162a8:	2339      	movs	r3, #57	; 0x39
 80162aa:	7013      	strb	r3, [r2, #0]
 80162ac:	4643      	mov	r3, r8
 80162ae:	4698      	mov	r8, r3
 80162b0:	3b01      	subs	r3, #1
 80162b2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80162b6:	2a39      	cmp	r2, #57	; 0x39
 80162b8:	d051      	beq.n	801635e <_dtoa_r+0xa6e>
 80162ba:	3201      	adds	r2, #1
 80162bc:	701a      	strb	r2, [r3, #0]
 80162be:	e746      	b.n	801614e <_dtoa_r+0x85e>
 80162c0:	2a00      	cmp	r2, #0
 80162c2:	dd03      	ble.n	80162cc <_dtoa_r+0x9dc>
 80162c4:	2b39      	cmp	r3, #57	; 0x39
 80162c6:	d0ee      	beq.n	80162a6 <_dtoa_r+0x9b6>
 80162c8:	3301      	adds	r3, #1
 80162ca:	e7c7      	b.n	801625c <_dtoa_r+0x96c>
 80162cc:	9a04      	ldr	r2, [sp, #16]
 80162ce:	9908      	ldr	r1, [sp, #32]
 80162d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80162d4:	428a      	cmp	r2, r1
 80162d6:	d02b      	beq.n	8016330 <_dtoa_r+0xa40>
 80162d8:	4629      	mov	r1, r5
 80162da:	2300      	movs	r3, #0
 80162dc:	220a      	movs	r2, #10
 80162de:	4630      	mov	r0, r6
 80162e0:	f000 f920 	bl	8016524 <__multadd>
 80162e4:	45b9      	cmp	r9, r7
 80162e6:	4605      	mov	r5, r0
 80162e8:	f04f 0300 	mov.w	r3, #0
 80162ec:	f04f 020a 	mov.w	r2, #10
 80162f0:	4649      	mov	r1, r9
 80162f2:	4630      	mov	r0, r6
 80162f4:	d107      	bne.n	8016306 <_dtoa_r+0xa16>
 80162f6:	f000 f915 	bl	8016524 <__multadd>
 80162fa:	4681      	mov	r9, r0
 80162fc:	4607      	mov	r7, r0
 80162fe:	9b04      	ldr	r3, [sp, #16]
 8016300:	3301      	adds	r3, #1
 8016302:	9304      	str	r3, [sp, #16]
 8016304:	e774      	b.n	80161f0 <_dtoa_r+0x900>
 8016306:	f000 f90d 	bl	8016524 <__multadd>
 801630a:	4639      	mov	r1, r7
 801630c:	4681      	mov	r9, r0
 801630e:	2300      	movs	r3, #0
 8016310:	220a      	movs	r2, #10
 8016312:	4630      	mov	r0, r6
 8016314:	f000 f906 	bl	8016524 <__multadd>
 8016318:	4607      	mov	r7, r0
 801631a:	e7f0      	b.n	80162fe <_dtoa_r+0xa0e>
 801631c:	f1ba 0f00 	cmp.w	sl, #0
 8016320:	9a01      	ldr	r2, [sp, #4]
 8016322:	bfcc      	ite	gt
 8016324:	46d0      	movgt	r8, sl
 8016326:	f04f 0801 	movle.w	r8, #1
 801632a:	4490      	add	r8, r2
 801632c:	f04f 0900 	mov.w	r9, #0
 8016330:	4629      	mov	r1, r5
 8016332:	2201      	movs	r2, #1
 8016334:	4630      	mov	r0, r6
 8016336:	9302      	str	r3, [sp, #8]
 8016338:	f000 faa2 	bl	8016880 <__lshift>
 801633c:	4621      	mov	r1, r4
 801633e:	4605      	mov	r5, r0
 8016340:	f000 fb0a 	bl	8016958 <__mcmp>
 8016344:	2800      	cmp	r0, #0
 8016346:	dcb1      	bgt.n	80162ac <_dtoa_r+0x9bc>
 8016348:	d102      	bne.n	8016350 <_dtoa_r+0xa60>
 801634a:	9b02      	ldr	r3, [sp, #8]
 801634c:	07db      	lsls	r3, r3, #31
 801634e:	d4ad      	bmi.n	80162ac <_dtoa_r+0x9bc>
 8016350:	4643      	mov	r3, r8
 8016352:	4698      	mov	r8, r3
 8016354:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016358:	2a30      	cmp	r2, #48	; 0x30
 801635a:	d0fa      	beq.n	8016352 <_dtoa_r+0xa62>
 801635c:	e6f7      	b.n	801614e <_dtoa_r+0x85e>
 801635e:	9a01      	ldr	r2, [sp, #4]
 8016360:	429a      	cmp	r2, r3
 8016362:	d1a4      	bne.n	80162ae <_dtoa_r+0x9be>
 8016364:	f10b 0b01 	add.w	fp, fp, #1
 8016368:	2331      	movs	r3, #49	; 0x31
 801636a:	e778      	b.n	801625e <_dtoa_r+0x96e>
 801636c:	4b14      	ldr	r3, [pc, #80]	; (80163c0 <_dtoa_r+0xad0>)
 801636e:	f7ff bb2a 	b.w	80159c6 <_dtoa_r+0xd6>
 8016372:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016374:	2b00      	cmp	r3, #0
 8016376:	f47f ab05 	bne.w	8015984 <_dtoa_r+0x94>
 801637a:	4b12      	ldr	r3, [pc, #72]	; (80163c4 <_dtoa_r+0xad4>)
 801637c:	f7ff bb23 	b.w	80159c6 <_dtoa_r+0xd6>
 8016380:	f1ba 0f00 	cmp.w	sl, #0
 8016384:	dc03      	bgt.n	801638e <_dtoa_r+0xa9e>
 8016386:	9b06      	ldr	r3, [sp, #24]
 8016388:	2b02      	cmp	r3, #2
 801638a:	f73f aec8 	bgt.w	801611e <_dtoa_r+0x82e>
 801638e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016392:	4621      	mov	r1, r4
 8016394:	4628      	mov	r0, r5
 8016396:	f7ff fa22 	bl	80157de <quorem>
 801639a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801639e:	f808 3b01 	strb.w	r3, [r8], #1
 80163a2:	9a01      	ldr	r2, [sp, #4]
 80163a4:	eba8 0202 	sub.w	r2, r8, r2
 80163a8:	4592      	cmp	sl, r2
 80163aa:	ddb7      	ble.n	801631c <_dtoa_r+0xa2c>
 80163ac:	4629      	mov	r1, r5
 80163ae:	2300      	movs	r3, #0
 80163b0:	220a      	movs	r2, #10
 80163b2:	4630      	mov	r0, r6
 80163b4:	f000 f8b6 	bl	8016524 <__multadd>
 80163b8:	4605      	mov	r5, r0
 80163ba:	e7ea      	b.n	8016392 <_dtoa_r+0xaa2>
 80163bc:	08017758 	.word	0x08017758
 80163c0:	080176b8 	.word	0x080176b8
 80163c4:	080176dc 	.word	0x080176dc

080163c8 <_free_r>:
 80163c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163ca:	2900      	cmp	r1, #0
 80163cc:	d044      	beq.n	8016458 <_free_r+0x90>
 80163ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163d2:	9001      	str	r0, [sp, #4]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	f1a1 0404 	sub.w	r4, r1, #4
 80163da:	bfb8      	it	lt
 80163dc:	18e4      	addlt	r4, r4, r3
 80163de:	f7fe fa95 	bl	801490c <__malloc_lock>
 80163e2:	4a1e      	ldr	r2, [pc, #120]	; (801645c <_free_r+0x94>)
 80163e4:	9801      	ldr	r0, [sp, #4]
 80163e6:	6813      	ldr	r3, [r2, #0]
 80163e8:	b933      	cbnz	r3, 80163f8 <_free_r+0x30>
 80163ea:	6063      	str	r3, [r4, #4]
 80163ec:	6014      	str	r4, [r2, #0]
 80163ee:	b003      	add	sp, #12
 80163f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80163f4:	f7fe ba90 	b.w	8014918 <__malloc_unlock>
 80163f8:	42a3      	cmp	r3, r4
 80163fa:	d908      	bls.n	801640e <_free_r+0x46>
 80163fc:	6825      	ldr	r5, [r4, #0]
 80163fe:	1961      	adds	r1, r4, r5
 8016400:	428b      	cmp	r3, r1
 8016402:	bf01      	itttt	eq
 8016404:	6819      	ldreq	r1, [r3, #0]
 8016406:	685b      	ldreq	r3, [r3, #4]
 8016408:	1949      	addeq	r1, r1, r5
 801640a:	6021      	streq	r1, [r4, #0]
 801640c:	e7ed      	b.n	80163ea <_free_r+0x22>
 801640e:	461a      	mov	r2, r3
 8016410:	685b      	ldr	r3, [r3, #4]
 8016412:	b10b      	cbz	r3, 8016418 <_free_r+0x50>
 8016414:	42a3      	cmp	r3, r4
 8016416:	d9fa      	bls.n	801640e <_free_r+0x46>
 8016418:	6811      	ldr	r1, [r2, #0]
 801641a:	1855      	adds	r5, r2, r1
 801641c:	42a5      	cmp	r5, r4
 801641e:	d10b      	bne.n	8016438 <_free_r+0x70>
 8016420:	6824      	ldr	r4, [r4, #0]
 8016422:	4421      	add	r1, r4
 8016424:	1854      	adds	r4, r2, r1
 8016426:	42a3      	cmp	r3, r4
 8016428:	6011      	str	r1, [r2, #0]
 801642a:	d1e0      	bne.n	80163ee <_free_r+0x26>
 801642c:	681c      	ldr	r4, [r3, #0]
 801642e:	685b      	ldr	r3, [r3, #4]
 8016430:	6053      	str	r3, [r2, #4]
 8016432:	440c      	add	r4, r1
 8016434:	6014      	str	r4, [r2, #0]
 8016436:	e7da      	b.n	80163ee <_free_r+0x26>
 8016438:	d902      	bls.n	8016440 <_free_r+0x78>
 801643a:	230c      	movs	r3, #12
 801643c:	6003      	str	r3, [r0, #0]
 801643e:	e7d6      	b.n	80163ee <_free_r+0x26>
 8016440:	6825      	ldr	r5, [r4, #0]
 8016442:	1961      	adds	r1, r4, r5
 8016444:	428b      	cmp	r3, r1
 8016446:	bf04      	itt	eq
 8016448:	6819      	ldreq	r1, [r3, #0]
 801644a:	685b      	ldreq	r3, [r3, #4]
 801644c:	6063      	str	r3, [r4, #4]
 801644e:	bf04      	itt	eq
 8016450:	1949      	addeq	r1, r1, r5
 8016452:	6021      	streq	r1, [r4, #0]
 8016454:	6054      	str	r4, [r2, #4]
 8016456:	e7ca      	b.n	80163ee <_free_r+0x26>
 8016458:	b003      	add	sp, #12
 801645a:	bd30      	pop	{r4, r5, pc}
 801645c:	24004620 	.word	0x24004620

08016460 <_Balloc>:
 8016460:	b570      	push	{r4, r5, r6, lr}
 8016462:	69c6      	ldr	r6, [r0, #28]
 8016464:	4604      	mov	r4, r0
 8016466:	460d      	mov	r5, r1
 8016468:	b976      	cbnz	r6, 8016488 <_Balloc+0x28>
 801646a:	2010      	movs	r0, #16
 801646c:	f7fe f99e 	bl	80147ac <malloc>
 8016470:	4602      	mov	r2, r0
 8016472:	61e0      	str	r0, [r4, #28]
 8016474:	b920      	cbnz	r0, 8016480 <_Balloc+0x20>
 8016476:	4b18      	ldr	r3, [pc, #96]	; (80164d8 <_Balloc+0x78>)
 8016478:	4818      	ldr	r0, [pc, #96]	; (80164dc <_Balloc+0x7c>)
 801647a:	216b      	movs	r1, #107	; 0x6b
 801647c:	f000 fdea 	bl	8017054 <__assert_func>
 8016480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016484:	6006      	str	r6, [r0, #0]
 8016486:	60c6      	str	r6, [r0, #12]
 8016488:	69e6      	ldr	r6, [r4, #28]
 801648a:	68f3      	ldr	r3, [r6, #12]
 801648c:	b183      	cbz	r3, 80164b0 <_Balloc+0x50>
 801648e:	69e3      	ldr	r3, [r4, #28]
 8016490:	68db      	ldr	r3, [r3, #12]
 8016492:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016496:	b9b8      	cbnz	r0, 80164c8 <_Balloc+0x68>
 8016498:	2101      	movs	r1, #1
 801649a:	fa01 f605 	lsl.w	r6, r1, r5
 801649e:	1d72      	adds	r2, r6, #5
 80164a0:	0092      	lsls	r2, r2, #2
 80164a2:	4620      	mov	r0, r4
 80164a4:	f000 fdf4 	bl	8017090 <_calloc_r>
 80164a8:	b160      	cbz	r0, 80164c4 <_Balloc+0x64>
 80164aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80164ae:	e00e      	b.n	80164ce <_Balloc+0x6e>
 80164b0:	2221      	movs	r2, #33	; 0x21
 80164b2:	2104      	movs	r1, #4
 80164b4:	4620      	mov	r0, r4
 80164b6:	f000 fdeb 	bl	8017090 <_calloc_r>
 80164ba:	69e3      	ldr	r3, [r4, #28]
 80164bc:	60f0      	str	r0, [r6, #12]
 80164be:	68db      	ldr	r3, [r3, #12]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d1e4      	bne.n	801648e <_Balloc+0x2e>
 80164c4:	2000      	movs	r0, #0
 80164c6:	bd70      	pop	{r4, r5, r6, pc}
 80164c8:	6802      	ldr	r2, [r0, #0]
 80164ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164ce:	2300      	movs	r3, #0
 80164d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80164d4:	e7f7      	b.n	80164c6 <_Balloc+0x66>
 80164d6:	bf00      	nop
 80164d8:	080176e9 	.word	0x080176e9
 80164dc:	08017769 	.word	0x08017769

080164e0 <_Bfree>:
 80164e0:	b570      	push	{r4, r5, r6, lr}
 80164e2:	69c6      	ldr	r6, [r0, #28]
 80164e4:	4605      	mov	r5, r0
 80164e6:	460c      	mov	r4, r1
 80164e8:	b976      	cbnz	r6, 8016508 <_Bfree+0x28>
 80164ea:	2010      	movs	r0, #16
 80164ec:	f7fe f95e 	bl	80147ac <malloc>
 80164f0:	4602      	mov	r2, r0
 80164f2:	61e8      	str	r0, [r5, #28]
 80164f4:	b920      	cbnz	r0, 8016500 <_Bfree+0x20>
 80164f6:	4b09      	ldr	r3, [pc, #36]	; (801651c <_Bfree+0x3c>)
 80164f8:	4809      	ldr	r0, [pc, #36]	; (8016520 <_Bfree+0x40>)
 80164fa:	218f      	movs	r1, #143	; 0x8f
 80164fc:	f000 fdaa 	bl	8017054 <__assert_func>
 8016500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016504:	6006      	str	r6, [r0, #0]
 8016506:	60c6      	str	r6, [r0, #12]
 8016508:	b13c      	cbz	r4, 801651a <_Bfree+0x3a>
 801650a:	69eb      	ldr	r3, [r5, #28]
 801650c:	6862      	ldr	r2, [r4, #4]
 801650e:	68db      	ldr	r3, [r3, #12]
 8016510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016514:	6021      	str	r1, [r4, #0]
 8016516:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801651a:	bd70      	pop	{r4, r5, r6, pc}
 801651c:	080176e9 	.word	0x080176e9
 8016520:	08017769 	.word	0x08017769

08016524 <__multadd>:
 8016524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016528:	690d      	ldr	r5, [r1, #16]
 801652a:	4607      	mov	r7, r0
 801652c:	460c      	mov	r4, r1
 801652e:	461e      	mov	r6, r3
 8016530:	f101 0c14 	add.w	ip, r1, #20
 8016534:	2000      	movs	r0, #0
 8016536:	f8dc 3000 	ldr.w	r3, [ip]
 801653a:	b299      	uxth	r1, r3
 801653c:	fb02 6101 	mla	r1, r2, r1, r6
 8016540:	0c1e      	lsrs	r6, r3, #16
 8016542:	0c0b      	lsrs	r3, r1, #16
 8016544:	fb02 3306 	mla	r3, r2, r6, r3
 8016548:	b289      	uxth	r1, r1
 801654a:	3001      	adds	r0, #1
 801654c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016550:	4285      	cmp	r5, r0
 8016552:	f84c 1b04 	str.w	r1, [ip], #4
 8016556:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801655a:	dcec      	bgt.n	8016536 <__multadd+0x12>
 801655c:	b30e      	cbz	r6, 80165a2 <__multadd+0x7e>
 801655e:	68a3      	ldr	r3, [r4, #8]
 8016560:	42ab      	cmp	r3, r5
 8016562:	dc19      	bgt.n	8016598 <__multadd+0x74>
 8016564:	6861      	ldr	r1, [r4, #4]
 8016566:	4638      	mov	r0, r7
 8016568:	3101      	adds	r1, #1
 801656a:	f7ff ff79 	bl	8016460 <_Balloc>
 801656e:	4680      	mov	r8, r0
 8016570:	b928      	cbnz	r0, 801657e <__multadd+0x5a>
 8016572:	4602      	mov	r2, r0
 8016574:	4b0c      	ldr	r3, [pc, #48]	; (80165a8 <__multadd+0x84>)
 8016576:	480d      	ldr	r0, [pc, #52]	; (80165ac <__multadd+0x88>)
 8016578:	21ba      	movs	r1, #186	; 0xba
 801657a:	f000 fd6b 	bl	8017054 <__assert_func>
 801657e:	6922      	ldr	r2, [r4, #16]
 8016580:	3202      	adds	r2, #2
 8016582:	f104 010c 	add.w	r1, r4, #12
 8016586:	0092      	lsls	r2, r2, #2
 8016588:	300c      	adds	r0, #12
 801658a:	f7ff f91a 	bl	80157c2 <memcpy>
 801658e:	4621      	mov	r1, r4
 8016590:	4638      	mov	r0, r7
 8016592:	f7ff ffa5 	bl	80164e0 <_Bfree>
 8016596:	4644      	mov	r4, r8
 8016598:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801659c:	3501      	adds	r5, #1
 801659e:	615e      	str	r6, [r3, #20]
 80165a0:	6125      	str	r5, [r4, #16]
 80165a2:	4620      	mov	r0, r4
 80165a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165a8:	08017758 	.word	0x08017758
 80165ac:	08017769 	.word	0x08017769

080165b0 <__hi0bits>:
 80165b0:	0c03      	lsrs	r3, r0, #16
 80165b2:	041b      	lsls	r3, r3, #16
 80165b4:	b9d3      	cbnz	r3, 80165ec <__hi0bits+0x3c>
 80165b6:	0400      	lsls	r0, r0, #16
 80165b8:	2310      	movs	r3, #16
 80165ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80165be:	bf04      	itt	eq
 80165c0:	0200      	lsleq	r0, r0, #8
 80165c2:	3308      	addeq	r3, #8
 80165c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80165c8:	bf04      	itt	eq
 80165ca:	0100      	lsleq	r0, r0, #4
 80165cc:	3304      	addeq	r3, #4
 80165ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80165d2:	bf04      	itt	eq
 80165d4:	0080      	lsleq	r0, r0, #2
 80165d6:	3302      	addeq	r3, #2
 80165d8:	2800      	cmp	r0, #0
 80165da:	db05      	blt.n	80165e8 <__hi0bits+0x38>
 80165dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80165e0:	f103 0301 	add.w	r3, r3, #1
 80165e4:	bf08      	it	eq
 80165e6:	2320      	moveq	r3, #32
 80165e8:	4618      	mov	r0, r3
 80165ea:	4770      	bx	lr
 80165ec:	2300      	movs	r3, #0
 80165ee:	e7e4      	b.n	80165ba <__hi0bits+0xa>

080165f0 <__lo0bits>:
 80165f0:	6803      	ldr	r3, [r0, #0]
 80165f2:	f013 0207 	ands.w	r2, r3, #7
 80165f6:	d00c      	beq.n	8016612 <__lo0bits+0x22>
 80165f8:	07d9      	lsls	r1, r3, #31
 80165fa:	d422      	bmi.n	8016642 <__lo0bits+0x52>
 80165fc:	079a      	lsls	r2, r3, #30
 80165fe:	bf49      	itett	mi
 8016600:	085b      	lsrmi	r3, r3, #1
 8016602:	089b      	lsrpl	r3, r3, #2
 8016604:	6003      	strmi	r3, [r0, #0]
 8016606:	2201      	movmi	r2, #1
 8016608:	bf5c      	itt	pl
 801660a:	6003      	strpl	r3, [r0, #0]
 801660c:	2202      	movpl	r2, #2
 801660e:	4610      	mov	r0, r2
 8016610:	4770      	bx	lr
 8016612:	b299      	uxth	r1, r3
 8016614:	b909      	cbnz	r1, 801661a <__lo0bits+0x2a>
 8016616:	0c1b      	lsrs	r3, r3, #16
 8016618:	2210      	movs	r2, #16
 801661a:	b2d9      	uxtb	r1, r3
 801661c:	b909      	cbnz	r1, 8016622 <__lo0bits+0x32>
 801661e:	3208      	adds	r2, #8
 8016620:	0a1b      	lsrs	r3, r3, #8
 8016622:	0719      	lsls	r1, r3, #28
 8016624:	bf04      	itt	eq
 8016626:	091b      	lsreq	r3, r3, #4
 8016628:	3204      	addeq	r2, #4
 801662a:	0799      	lsls	r1, r3, #30
 801662c:	bf04      	itt	eq
 801662e:	089b      	lsreq	r3, r3, #2
 8016630:	3202      	addeq	r2, #2
 8016632:	07d9      	lsls	r1, r3, #31
 8016634:	d403      	bmi.n	801663e <__lo0bits+0x4e>
 8016636:	085b      	lsrs	r3, r3, #1
 8016638:	f102 0201 	add.w	r2, r2, #1
 801663c:	d003      	beq.n	8016646 <__lo0bits+0x56>
 801663e:	6003      	str	r3, [r0, #0]
 8016640:	e7e5      	b.n	801660e <__lo0bits+0x1e>
 8016642:	2200      	movs	r2, #0
 8016644:	e7e3      	b.n	801660e <__lo0bits+0x1e>
 8016646:	2220      	movs	r2, #32
 8016648:	e7e1      	b.n	801660e <__lo0bits+0x1e>
	...

0801664c <__i2b>:
 801664c:	b510      	push	{r4, lr}
 801664e:	460c      	mov	r4, r1
 8016650:	2101      	movs	r1, #1
 8016652:	f7ff ff05 	bl	8016460 <_Balloc>
 8016656:	4602      	mov	r2, r0
 8016658:	b928      	cbnz	r0, 8016666 <__i2b+0x1a>
 801665a:	4b05      	ldr	r3, [pc, #20]	; (8016670 <__i2b+0x24>)
 801665c:	4805      	ldr	r0, [pc, #20]	; (8016674 <__i2b+0x28>)
 801665e:	f240 1145 	movw	r1, #325	; 0x145
 8016662:	f000 fcf7 	bl	8017054 <__assert_func>
 8016666:	2301      	movs	r3, #1
 8016668:	6144      	str	r4, [r0, #20]
 801666a:	6103      	str	r3, [r0, #16]
 801666c:	bd10      	pop	{r4, pc}
 801666e:	bf00      	nop
 8016670:	08017758 	.word	0x08017758
 8016674:	08017769 	.word	0x08017769

08016678 <__multiply>:
 8016678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801667c:	4691      	mov	r9, r2
 801667e:	690a      	ldr	r2, [r1, #16]
 8016680:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016684:	429a      	cmp	r2, r3
 8016686:	bfb8      	it	lt
 8016688:	460b      	movlt	r3, r1
 801668a:	460c      	mov	r4, r1
 801668c:	bfbc      	itt	lt
 801668e:	464c      	movlt	r4, r9
 8016690:	4699      	movlt	r9, r3
 8016692:	6927      	ldr	r7, [r4, #16]
 8016694:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016698:	68a3      	ldr	r3, [r4, #8]
 801669a:	6861      	ldr	r1, [r4, #4]
 801669c:	eb07 060a 	add.w	r6, r7, sl
 80166a0:	42b3      	cmp	r3, r6
 80166a2:	b085      	sub	sp, #20
 80166a4:	bfb8      	it	lt
 80166a6:	3101      	addlt	r1, #1
 80166a8:	f7ff feda 	bl	8016460 <_Balloc>
 80166ac:	b930      	cbnz	r0, 80166bc <__multiply+0x44>
 80166ae:	4602      	mov	r2, r0
 80166b0:	4b44      	ldr	r3, [pc, #272]	; (80167c4 <__multiply+0x14c>)
 80166b2:	4845      	ldr	r0, [pc, #276]	; (80167c8 <__multiply+0x150>)
 80166b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80166b8:	f000 fccc 	bl	8017054 <__assert_func>
 80166bc:	f100 0514 	add.w	r5, r0, #20
 80166c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80166c4:	462b      	mov	r3, r5
 80166c6:	2200      	movs	r2, #0
 80166c8:	4543      	cmp	r3, r8
 80166ca:	d321      	bcc.n	8016710 <__multiply+0x98>
 80166cc:	f104 0314 	add.w	r3, r4, #20
 80166d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80166d4:	f109 0314 	add.w	r3, r9, #20
 80166d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80166dc:	9202      	str	r2, [sp, #8]
 80166de:	1b3a      	subs	r2, r7, r4
 80166e0:	3a15      	subs	r2, #21
 80166e2:	f022 0203 	bic.w	r2, r2, #3
 80166e6:	3204      	adds	r2, #4
 80166e8:	f104 0115 	add.w	r1, r4, #21
 80166ec:	428f      	cmp	r7, r1
 80166ee:	bf38      	it	cc
 80166f0:	2204      	movcc	r2, #4
 80166f2:	9201      	str	r2, [sp, #4]
 80166f4:	9a02      	ldr	r2, [sp, #8]
 80166f6:	9303      	str	r3, [sp, #12]
 80166f8:	429a      	cmp	r2, r3
 80166fa:	d80c      	bhi.n	8016716 <__multiply+0x9e>
 80166fc:	2e00      	cmp	r6, #0
 80166fe:	dd03      	ble.n	8016708 <__multiply+0x90>
 8016700:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016704:	2b00      	cmp	r3, #0
 8016706:	d05b      	beq.n	80167c0 <__multiply+0x148>
 8016708:	6106      	str	r6, [r0, #16]
 801670a:	b005      	add	sp, #20
 801670c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016710:	f843 2b04 	str.w	r2, [r3], #4
 8016714:	e7d8      	b.n	80166c8 <__multiply+0x50>
 8016716:	f8b3 a000 	ldrh.w	sl, [r3]
 801671a:	f1ba 0f00 	cmp.w	sl, #0
 801671e:	d024      	beq.n	801676a <__multiply+0xf2>
 8016720:	f104 0e14 	add.w	lr, r4, #20
 8016724:	46a9      	mov	r9, r5
 8016726:	f04f 0c00 	mov.w	ip, #0
 801672a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801672e:	f8d9 1000 	ldr.w	r1, [r9]
 8016732:	fa1f fb82 	uxth.w	fp, r2
 8016736:	b289      	uxth	r1, r1
 8016738:	fb0a 110b 	mla	r1, sl, fp, r1
 801673c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016740:	f8d9 2000 	ldr.w	r2, [r9]
 8016744:	4461      	add	r1, ip
 8016746:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801674a:	fb0a c20b 	mla	r2, sl, fp, ip
 801674e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016752:	b289      	uxth	r1, r1
 8016754:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016758:	4577      	cmp	r7, lr
 801675a:	f849 1b04 	str.w	r1, [r9], #4
 801675e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016762:	d8e2      	bhi.n	801672a <__multiply+0xb2>
 8016764:	9a01      	ldr	r2, [sp, #4]
 8016766:	f845 c002 	str.w	ip, [r5, r2]
 801676a:	9a03      	ldr	r2, [sp, #12]
 801676c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016770:	3304      	adds	r3, #4
 8016772:	f1b9 0f00 	cmp.w	r9, #0
 8016776:	d021      	beq.n	80167bc <__multiply+0x144>
 8016778:	6829      	ldr	r1, [r5, #0]
 801677a:	f104 0c14 	add.w	ip, r4, #20
 801677e:	46ae      	mov	lr, r5
 8016780:	f04f 0a00 	mov.w	sl, #0
 8016784:	f8bc b000 	ldrh.w	fp, [ip]
 8016788:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801678c:	fb09 220b 	mla	r2, r9, fp, r2
 8016790:	4452      	add	r2, sl
 8016792:	b289      	uxth	r1, r1
 8016794:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016798:	f84e 1b04 	str.w	r1, [lr], #4
 801679c:	f85c 1b04 	ldr.w	r1, [ip], #4
 80167a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80167a4:	f8be 1000 	ldrh.w	r1, [lr]
 80167a8:	fb09 110a 	mla	r1, r9, sl, r1
 80167ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80167b0:	4567      	cmp	r7, ip
 80167b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80167b6:	d8e5      	bhi.n	8016784 <__multiply+0x10c>
 80167b8:	9a01      	ldr	r2, [sp, #4]
 80167ba:	50a9      	str	r1, [r5, r2]
 80167bc:	3504      	adds	r5, #4
 80167be:	e799      	b.n	80166f4 <__multiply+0x7c>
 80167c0:	3e01      	subs	r6, #1
 80167c2:	e79b      	b.n	80166fc <__multiply+0x84>
 80167c4:	08017758 	.word	0x08017758
 80167c8:	08017769 	.word	0x08017769

080167cc <__pow5mult>:
 80167cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167d0:	4615      	mov	r5, r2
 80167d2:	f012 0203 	ands.w	r2, r2, #3
 80167d6:	4606      	mov	r6, r0
 80167d8:	460f      	mov	r7, r1
 80167da:	d007      	beq.n	80167ec <__pow5mult+0x20>
 80167dc:	4c25      	ldr	r4, [pc, #148]	; (8016874 <__pow5mult+0xa8>)
 80167de:	3a01      	subs	r2, #1
 80167e0:	2300      	movs	r3, #0
 80167e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80167e6:	f7ff fe9d 	bl	8016524 <__multadd>
 80167ea:	4607      	mov	r7, r0
 80167ec:	10ad      	asrs	r5, r5, #2
 80167ee:	d03d      	beq.n	801686c <__pow5mult+0xa0>
 80167f0:	69f4      	ldr	r4, [r6, #28]
 80167f2:	b97c      	cbnz	r4, 8016814 <__pow5mult+0x48>
 80167f4:	2010      	movs	r0, #16
 80167f6:	f7fd ffd9 	bl	80147ac <malloc>
 80167fa:	4602      	mov	r2, r0
 80167fc:	61f0      	str	r0, [r6, #28]
 80167fe:	b928      	cbnz	r0, 801680c <__pow5mult+0x40>
 8016800:	4b1d      	ldr	r3, [pc, #116]	; (8016878 <__pow5mult+0xac>)
 8016802:	481e      	ldr	r0, [pc, #120]	; (801687c <__pow5mult+0xb0>)
 8016804:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016808:	f000 fc24 	bl	8017054 <__assert_func>
 801680c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016810:	6004      	str	r4, [r0, #0]
 8016812:	60c4      	str	r4, [r0, #12]
 8016814:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801681c:	b94c      	cbnz	r4, 8016832 <__pow5mult+0x66>
 801681e:	f240 2171 	movw	r1, #625	; 0x271
 8016822:	4630      	mov	r0, r6
 8016824:	f7ff ff12 	bl	801664c <__i2b>
 8016828:	2300      	movs	r3, #0
 801682a:	f8c8 0008 	str.w	r0, [r8, #8]
 801682e:	4604      	mov	r4, r0
 8016830:	6003      	str	r3, [r0, #0]
 8016832:	f04f 0900 	mov.w	r9, #0
 8016836:	07eb      	lsls	r3, r5, #31
 8016838:	d50a      	bpl.n	8016850 <__pow5mult+0x84>
 801683a:	4639      	mov	r1, r7
 801683c:	4622      	mov	r2, r4
 801683e:	4630      	mov	r0, r6
 8016840:	f7ff ff1a 	bl	8016678 <__multiply>
 8016844:	4639      	mov	r1, r7
 8016846:	4680      	mov	r8, r0
 8016848:	4630      	mov	r0, r6
 801684a:	f7ff fe49 	bl	80164e0 <_Bfree>
 801684e:	4647      	mov	r7, r8
 8016850:	106d      	asrs	r5, r5, #1
 8016852:	d00b      	beq.n	801686c <__pow5mult+0xa0>
 8016854:	6820      	ldr	r0, [r4, #0]
 8016856:	b938      	cbnz	r0, 8016868 <__pow5mult+0x9c>
 8016858:	4622      	mov	r2, r4
 801685a:	4621      	mov	r1, r4
 801685c:	4630      	mov	r0, r6
 801685e:	f7ff ff0b 	bl	8016678 <__multiply>
 8016862:	6020      	str	r0, [r4, #0]
 8016864:	f8c0 9000 	str.w	r9, [r0]
 8016868:	4604      	mov	r4, r0
 801686a:	e7e4      	b.n	8016836 <__pow5mult+0x6a>
 801686c:	4638      	mov	r0, r7
 801686e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016872:	bf00      	nop
 8016874:	080178b8 	.word	0x080178b8
 8016878:	080176e9 	.word	0x080176e9
 801687c:	08017769 	.word	0x08017769

08016880 <__lshift>:
 8016880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016884:	460c      	mov	r4, r1
 8016886:	6849      	ldr	r1, [r1, #4]
 8016888:	6923      	ldr	r3, [r4, #16]
 801688a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801688e:	68a3      	ldr	r3, [r4, #8]
 8016890:	4607      	mov	r7, r0
 8016892:	4691      	mov	r9, r2
 8016894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016898:	f108 0601 	add.w	r6, r8, #1
 801689c:	42b3      	cmp	r3, r6
 801689e:	db0b      	blt.n	80168b8 <__lshift+0x38>
 80168a0:	4638      	mov	r0, r7
 80168a2:	f7ff fddd 	bl	8016460 <_Balloc>
 80168a6:	4605      	mov	r5, r0
 80168a8:	b948      	cbnz	r0, 80168be <__lshift+0x3e>
 80168aa:	4602      	mov	r2, r0
 80168ac:	4b28      	ldr	r3, [pc, #160]	; (8016950 <__lshift+0xd0>)
 80168ae:	4829      	ldr	r0, [pc, #164]	; (8016954 <__lshift+0xd4>)
 80168b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80168b4:	f000 fbce 	bl	8017054 <__assert_func>
 80168b8:	3101      	adds	r1, #1
 80168ba:	005b      	lsls	r3, r3, #1
 80168bc:	e7ee      	b.n	801689c <__lshift+0x1c>
 80168be:	2300      	movs	r3, #0
 80168c0:	f100 0114 	add.w	r1, r0, #20
 80168c4:	f100 0210 	add.w	r2, r0, #16
 80168c8:	4618      	mov	r0, r3
 80168ca:	4553      	cmp	r3, sl
 80168cc:	db33      	blt.n	8016936 <__lshift+0xb6>
 80168ce:	6920      	ldr	r0, [r4, #16]
 80168d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80168d4:	f104 0314 	add.w	r3, r4, #20
 80168d8:	f019 091f 	ands.w	r9, r9, #31
 80168dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80168e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80168e4:	d02b      	beq.n	801693e <__lshift+0xbe>
 80168e6:	f1c9 0e20 	rsb	lr, r9, #32
 80168ea:	468a      	mov	sl, r1
 80168ec:	2200      	movs	r2, #0
 80168ee:	6818      	ldr	r0, [r3, #0]
 80168f0:	fa00 f009 	lsl.w	r0, r0, r9
 80168f4:	4310      	orrs	r0, r2
 80168f6:	f84a 0b04 	str.w	r0, [sl], #4
 80168fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80168fe:	459c      	cmp	ip, r3
 8016900:	fa22 f20e 	lsr.w	r2, r2, lr
 8016904:	d8f3      	bhi.n	80168ee <__lshift+0x6e>
 8016906:	ebac 0304 	sub.w	r3, ip, r4
 801690a:	3b15      	subs	r3, #21
 801690c:	f023 0303 	bic.w	r3, r3, #3
 8016910:	3304      	adds	r3, #4
 8016912:	f104 0015 	add.w	r0, r4, #21
 8016916:	4584      	cmp	ip, r0
 8016918:	bf38      	it	cc
 801691a:	2304      	movcc	r3, #4
 801691c:	50ca      	str	r2, [r1, r3]
 801691e:	b10a      	cbz	r2, 8016924 <__lshift+0xa4>
 8016920:	f108 0602 	add.w	r6, r8, #2
 8016924:	3e01      	subs	r6, #1
 8016926:	4638      	mov	r0, r7
 8016928:	612e      	str	r6, [r5, #16]
 801692a:	4621      	mov	r1, r4
 801692c:	f7ff fdd8 	bl	80164e0 <_Bfree>
 8016930:	4628      	mov	r0, r5
 8016932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016936:	f842 0f04 	str.w	r0, [r2, #4]!
 801693a:	3301      	adds	r3, #1
 801693c:	e7c5      	b.n	80168ca <__lshift+0x4a>
 801693e:	3904      	subs	r1, #4
 8016940:	f853 2b04 	ldr.w	r2, [r3], #4
 8016944:	f841 2f04 	str.w	r2, [r1, #4]!
 8016948:	459c      	cmp	ip, r3
 801694a:	d8f9      	bhi.n	8016940 <__lshift+0xc0>
 801694c:	e7ea      	b.n	8016924 <__lshift+0xa4>
 801694e:	bf00      	nop
 8016950:	08017758 	.word	0x08017758
 8016954:	08017769 	.word	0x08017769

08016958 <__mcmp>:
 8016958:	b530      	push	{r4, r5, lr}
 801695a:	6902      	ldr	r2, [r0, #16]
 801695c:	690c      	ldr	r4, [r1, #16]
 801695e:	1b12      	subs	r2, r2, r4
 8016960:	d10e      	bne.n	8016980 <__mcmp+0x28>
 8016962:	f100 0314 	add.w	r3, r0, #20
 8016966:	3114      	adds	r1, #20
 8016968:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801696c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016970:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016974:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016978:	42a5      	cmp	r5, r4
 801697a:	d003      	beq.n	8016984 <__mcmp+0x2c>
 801697c:	d305      	bcc.n	801698a <__mcmp+0x32>
 801697e:	2201      	movs	r2, #1
 8016980:	4610      	mov	r0, r2
 8016982:	bd30      	pop	{r4, r5, pc}
 8016984:	4283      	cmp	r3, r0
 8016986:	d3f3      	bcc.n	8016970 <__mcmp+0x18>
 8016988:	e7fa      	b.n	8016980 <__mcmp+0x28>
 801698a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801698e:	e7f7      	b.n	8016980 <__mcmp+0x28>

08016990 <__mdiff>:
 8016990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016994:	460c      	mov	r4, r1
 8016996:	4606      	mov	r6, r0
 8016998:	4611      	mov	r1, r2
 801699a:	4620      	mov	r0, r4
 801699c:	4690      	mov	r8, r2
 801699e:	f7ff ffdb 	bl	8016958 <__mcmp>
 80169a2:	1e05      	subs	r5, r0, #0
 80169a4:	d110      	bne.n	80169c8 <__mdiff+0x38>
 80169a6:	4629      	mov	r1, r5
 80169a8:	4630      	mov	r0, r6
 80169aa:	f7ff fd59 	bl	8016460 <_Balloc>
 80169ae:	b930      	cbnz	r0, 80169be <__mdiff+0x2e>
 80169b0:	4b3a      	ldr	r3, [pc, #232]	; (8016a9c <__mdiff+0x10c>)
 80169b2:	4602      	mov	r2, r0
 80169b4:	f240 2137 	movw	r1, #567	; 0x237
 80169b8:	4839      	ldr	r0, [pc, #228]	; (8016aa0 <__mdiff+0x110>)
 80169ba:	f000 fb4b 	bl	8017054 <__assert_func>
 80169be:	2301      	movs	r3, #1
 80169c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80169c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169c8:	bfa4      	itt	ge
 80169ca:	4643      	movge	r3, r8
 80169cc:	46a0      	movge	r8, r4
 80169ce:	4630      	mov	r0, r6
 80169d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80169d4:	bfa6      	itte	ge
 80169d6:	461c      	movge	r4, r3
 80169d8:	2500      	movge	r5, #0
 80169da:	2501      	movlt	r5, #1
 80169dc:	f7ff fd40 	bl	8016460 <_Balloc>
 80169e0:	b920      	cbnz	r0, 80169ec <__mdiff+0x5c>
 80169e2:	4b2e      	ldr	r3, [pc, #184]	; (8016a9c <__mdiff+0x10c>)
 80169e4:	4602      	mov	r2, r0
 80169e6:	f240 2145 	movw	r1, #581	; 0x245
 80169ea:	e7e5      	b.n	80169b8 <__mdiff+0x28>
 80169ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80169f0:	6926      	ldr	r6, [r4, #16]
 80169f2:	60c5      	str	r5, [r0, #12]
 80169f4:	f104 0914 	add.w	r9, r4, #20
 80169f8:	f108 0514 	add.w	r5, r8, #20
 80169fc:	f100 0e14 	add.w	lr, r0, #20
 8016a00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016a04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016a08:	f108 0210 	add.w	r2, r8, #16
 8016a0c:	46f2      	mov	sl, lr
 8016a0e:	2100      	movs	r1, #0
 8016a10:	f859 3b04 	ldr.w	r3, [r9], #4
 8016a14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016a18:	fa11 f88b 	uxtah	r8, r1, fp
 8016a1c:	b299      	uxth	r1, r3
 8016a1e:	0c1b      	lsrs	r3, r3, #16
 8016a20:	eba8 0801 	sub.w	r8, r8, r1
 8016a24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016a28:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016a2c:	fa1f f888 	uxth.w	r8, r8
 8016a30:	1419      	asrs	r1, r3, #16
 8016a32:	454e      	cmp	r6, r9
 8016a34:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016a38:	f84a 3b04 	str.w	r3, [sl], #4
 8016a3c:	d8e8      	bhi.n	8016a10 <__mdiff+0x80>
 8016a3e:	1b33      	subs	r3, r6, r4
 8016a40:	3b15      	subs	r3, #21
 8016a42:	f023 0303 	bic.w	r3, r3, #3
 8016a46:	3304      	adds	r3, #4
 8016a48:	3415      	adds	r4, #21
 8016a4a:	42a6      	cmp	r6, r4
 8016a4c:	bf38      	it	cc
 8016a4e:	2304      	movcc	r3, #4
 8016a50:	441d      	add	r5, r3
 8016a52:	4473      	add	r3, lr
 8016a54:	469e      	mov	lr, r3
 8016a56:	462e      	mov	r6, r5
 8016a58:	4566      	cmp	r6, ip
 8016a5a:	d30e      	bcc.n	8016a7a <__mdiff+0xea>
 8016a5c:	f10c 0203 	add.w	r2, ip, #3
 8016a60:	1b52      	subs	r2, r2, r5
 8016a62:	f022 0203 	bic.w	r2, r2, #3
 8016a66:	3d03      	subs	r5, #3
 8016a68:	45ac      	cmp	ip, r5
 8016a6a:	bf38      	it	cc
 8016a6c:	2200      	movcc	r2, #0
 8016a6e:	4413      	add	r3, r2
 8016a70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016a74:	b17a      	cbz	r2, 8016a96 <__mdiff+0x106>
 8016a76:	6107      	str	r7, [r0, #16]
 8016a78:	e7a4      	b.n	80169c4 <__mdiff+0x34>
 8016a7a:	f856 8b04 	ldr.w	r8, [r6], #4
 8016a7e:	fa11 f288 	uxtah	r2, r1, r8
 8016a82:	1414      	asrs	r4, r2, #16
 8016a84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016a88:	b292      	uxth	r2, r2
 8016a8a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016a8e:	f84e 2b04 	str.w	r2, [lr], #4
 8016a92:	1421      	asrs	r1, r4, #16
 8016a94:	e7e0      	b.n	8016a58 <__mdiff+0xc8>
 8016a96:	3f01      	subs	r7, #1
 8016a98:	e7ea      	b.n	8016a70 <__mdiff+0xe0>
 8016a9a:	bf00      	nop
 8016a9c:	08017758 	.word	0x08017758
 8016aa0:	08017769 	.word	0x08017769

08016aa4 <__d2b>:
 8016aa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016aa8:	460f      	mov	r7, r1
 8016aaa:	2101      	movs	r1, #1
 8016aac:	ec59 8b10 	vmov	r8, r9, d0
 8016ab0:	4616      	mov	r6, r2
 8016ab2:	f7ff fcd5 	bl	8016460 <_Balloc>
 8016ab6:	4604      	mov	r4, r0
 8016ab8:	b930      	cbnz	r0, 8016ac8 <__d2b+0x24>
 8016aba:	4602      	mov	r2, r0
 8016abc:	4b24      	ldr	r3, [pc, #144]	; (8016b50 <__d2b+0xac>)
 8016abe:	4825      	ldr	r0, [pc, #148]	; (8016b54 <__d2b+0xb0>)
 8016ac0:	f240 310f 	movw	r1, #783	; 0x30f
 8016ac4:	f000 fac6 	bl	8017054 <__assert_func>
 8016ac8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016acc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016ad0:	bb2d      	cbnz	r5, 8016b1e <__d2b+0x7a>
 8016ad2:	9301      	str	r3, [sp, #4]
 8016ad4:	f1b8 0300 	subs.w	r3, r8, #0
 8016ad8:	d026      	beq.n	8016b28 <__d2b+0x84>
 8016ada:	4668      	mov	r0, sp
 8016adc:	9300      	str	r3, [sp, #0]
 8016ade:	f7ff fd87 	bl	80165f0 <__lo0bits>
 8016ae2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016ae6:	b1e8      	cbz	r0, 8016b24 <__d2b+0x80>
 8016ae8:	f1c0 0320 	rsb	r3, r0, #32
 8016aec:	fa02 f303 	lsl.w	r3, r2, r3
 8016af0:	430b      	orrs	r3, r1
 8016af2:	40c2      	lsrs	r2, r0
 8016af4:	6163      	str	r3, [r4, #20]
 8016af6:	9201      	str	r2, [sp, #4]
 8016af8:	9b01      	ldr	r3, [sp, #4]
 8016afa:	61a3      	str	r3, [r4, #24]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	bf14      	ite	ne
 8016b00:	2202      	movne	r2, #2
 8016b02:	2201      	moveq	r2, #1
 8016b04:	6122      	str	r2, [r4, #16]
 8016b06:	b1bd      	cbz	r5, 8016b38 <__d2b+0x94>
 8016b08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016b0c:	4405      	add	r5, r0
 8016b0e:	603d      	str	r5, [r7, #0]
 8016b10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016b14:	6030      	str	r0, [r6, #0]
 8016b16:	4620      	mov	r0, r4
 8016b18:	b003      	add	sp, #12
 8016b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016b22:	e7d6      	b.n	8016ad2 <__d2b+0x2e>
 8016b24:	6161      	str	r1, [r4, #20]
 8016b26:	e7e7      	b.n	8016af8 <__d2b+0x54>
 8016b28:	a801      	add	r0, sp, #4
 8016b2a:	f7ff fd61 	bl	80165f0 <__lo0bits>
 8016b2e:	9b01      	ldr	r3, [sp, #4]
 8016b30:	6163      	str	r3, [r4, #20]
 8016b32:	3020      	adds	r0, #32
 8016b34:	2201      	movs	r2, #1
 8016b36:	e7e5      	b.n	8016b04 <__d2b+0x60>
 8016b38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016b3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016b40:	6038      	str	r0, [r7, #0]
 8016b42:	6918      	ldr	r0, [r3, #16]
 8016b44:	f7ff fd34 	bl	80165b0 <__hi0bits>
 8016b48:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016b4c:	e7e2      	b.n	8016b14 <__d2b+0x70>
 8016b4e:	bf00      	nop
 8016b50:	08017758 	.word	0x08017758
 8016b54:	08017769 	.word	0x08017769

08016b58 <_malloc_usable_size_r>:
 8016b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b5c:	1f18      	subs	r0, r3, #4
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	bfbc      	itt	lt
 8016b62:	580b      	ldrlt	r3, [r1, r0]
 8016b64:	18c0      	addlt	r0, r0, r3
 8016b66:	4770      	bx	lr

08016b68 <__sfputc_r>:
 8016b68:	6893      	ldr	r3, [r2, #8]
 8016b6a:	3b01      	subs	r3, #1
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	b410      	push	{r4}
 8016b70:	6093      	str	r3, [r2, #8]
 8016b72:	da08      	bge.n	8016b86 <__sfputc_r+0x1e>
 8016b74:	6994      	ldr	r4, [r2, #24]
 8016b76:	42a3      	cmp	r3, r4
 8016b78:	db01      	blt.n	8016b7e <__sfputc_r+0x16>
 8016b7a:	290a      	cmp	r1, #10
 8016b7c:	d103      	bne.n	8016b86 <__sfputc_r+0x1e>
 8016b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b82:	f7fe bcb6 	b.w	80154f2 <__swbuf_r>
 8016b86:	6813      	ldr	r3, [r2, #0]
 8016b88:	1c58      	adds	r0, r3, #1
 8016b8a:	6010      	str	r0, [r2, #0]
 8016b8c:	7019      	strb	r1, [r3, #0]
 8016b8e:	4608      	mov	r0, r1
 8016b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b94:	4770      	bx	lr

08016b96 <__sfputs_r>:
 8016b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b98:	4606      	mov	r6, r0
 8016b9a:	460f      	mov	r7, r1
 8016b9c:	4614      	mov	r4, r2
 8016b9e:	18d5      	adds	r5, r2, r3
 8016ba0:	42ac      	cmp	r4, r5
 8016ba2:	d101      	bne.n	8016ba8 <__sfputs_r+0x12>
 8016ba4:	2000      	movs	r0, #0
 8016ba6:	e007      	b.n	8016bb8 <__sfputs_r+0x22>
 8016ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bac:	463a      	mov	r2, r7
 8016bae:	4630      	mov	r0, r6
 8016bb0:	f7ff ffda 	bl	8016b68 <__sfputc_r>
 8016bb4:	1c43      	adds	r3, r0, #1
 8016bb6:	d1f3      	bne.n	8016ba0 <__sfputs_r+0xa>
 8016bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016bbc <_vfiprintf_r>:
 8016bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc0:	460d      	mov	r5, r1
 8016bc2:	b09d      	sub	sp, #116	; 0x74
 8016bc4:	4614      	mov	r4, r2
 8016bc6:	4698      	mov	r8, r3
 8016bc8:	4606      	mov	r6, r0
 8016bca:	b118      	cbz	r0, 8016bd4 <_vfiprintf_r+0x18>
 8016bcc:	6a03      	ldr	r3, [r0, #32]
 8016bce:	b90b      	cbnz	r3, 8016bd4 <_vfiprintf_r+0x18>
 8016bd0:	f7fe fba8 	bl	8015324 <__sinit>
 8016bd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016bd6:	07d9      	lsls	r1, r3, #31
 8016bd8:	d405      	bmi.n	8016be6 <_vfiprintf_r+0x2a>
 8016bda:	89ab      	ldrh	r3, [r5, #12]
 8016bdc:	059a      	lsls	r2, r3, #22
 8016bde:	d402      	bmi.n	8016be6 <_vfiprintf_r+0x2a>
 8016be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016be2:	f7fe fdec 	bl	80157be <__retarget_lock_acquire_recursive>
 8016be6:	89ab      	ldrh	r3, [r5, #12]
 8016be8:	071b      	lsls	r3, r3, #28
 8016bea:	d501      	bpl.n	8016bf0 <_vfiprintf_r+0x34>
 8016bec:	692b      	ldr	r3, [r5, #16]
 8016bee:	b99b      	cbnz	r3, 8016c18 <_vfiprintf_r+0x5c>
 8016bf0:	4629      	mov	r1, r5
 8016bf2:	4630      	mov	r0, r6
 8016bf4:	f7fe fcba 	bl	801556c <__swsetup_r>
 8016bf8:	b170      	cbz	r0, 8016c18 <_vfiprintf_r+0x5c>
 8016bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016bfc:	07dc      	lsls	r4, r3, #31
 8016bfe:	d504      	bpl.n	8016c0a <_vfiprintf_r+0x4e>
 8016c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c04:	b01d      	add	sp, #116	; 0x74
 8016c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c0a:	89ab      	ldrh	r3, [r5, #12]
 8016c0c:	0598      	lsls	r0, r3, #22
 8016c0e:	d4f7      	bmi.n	8016c00 <_vfiprintf_r+0x44>
 8016c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c12:	f7fe fdd5 	bl	80157c0 <__retarget_lock_release_recursive>
 8016c16:	e7f3      	b.n	8016c00 <_vfiprintf_r+0x44>
 8016c18:	2300      	movs	r3, #0
 8016c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8016c1c:	2320      	movs	r3, #32
 8016c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c26:	2330      	movs	r3, #48	; 0x30
 8016c28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016ddc <_vfiprintf_r+0x220>
 8016c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c30:	f04f 0901 	mov.w	r9, #1
 8016c34:	4623      	mov	r3, r4
 8016c36:	469a      	mov	sl, r3
 8016c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c3c:	b10a      	cbz	r2, 8016c42 <_vfiprintf_r+0x86>
 8016c3e:	2a25      	cmp	r2, #37	; 0x25
 8016c40:	d1f9      	bne.n	8016c36 <_vfiprintf_r+0x7a>
 8016c42:	ebba 0b04 	subs.w	fp, sl, r4
 8016c46:	d00b      	beq.n	8016c60 <_vfiprintf_r+0xa4>
 8016c48:	465b      	mov	r3, fp
 8016c4a:	4622      	mov	r2, r4
 8016c4c:	4629      	mov	r1, r5
 8016c4e:	4630      	mov	r0, r6
 8016c50:	f7ff ffa1 	bl	8016b96 <__sfputs_r>
 8016c54:	3001      	adds	r0, #1
 8016c56:	f000 80a9 	beq.w	8016dac <_vfiprintf_r+0x1f0>
 8016c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c5c:	445a      	add	r2, fp
 8016c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8016c60:	f89a 3000 	ldrb.w	r3, [sl]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	f000 80a1 	beq.w	8016dac <_vfiprintf_r+0x1f0>
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c74:	f10a 0a01 	add.w	sl, sl, #1
 8016c78:	9304      	str	r3, [sp, #16]
 8016c7a:	9307      	str	r3, [sp, #28]
 8016c7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c80:	931a      	str	r3, [sp, #104]	; 0x68
 8016c82:	4654      	mov	r4, sl
 8016c84:	2205      	movs	r2, #5
 8016c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c8a:	4854      	ldr	r0, [pc, #336]	; (8016ddc <_vfiprintf_r+0x220>)
 8016c8c:	f7e9 fb28 	bl	80002e0 <memchr>
 8016c90:	9a04      	ldr	r2, [sp, #16]
 8016c92:	b9d8      	cbnz	r0, 8016ccc <_vfiprintf_r+0x110>
 8016c94:	06d1      	lsls	r1, r2, #27
 8016c96:	bf44      	itt	mi
 8016c98:	2320      	movmi	r3, #32
 8016c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016c9e:	0713      	lsls	r3, r2, #28
 8016ca0:	bf44      	itt	mi
 8016ca2:	232b      	movmi	r3, #43	; 0x2b
 8016ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8016cac:	2b2a      	cmp	r3, #42	; 0x2a
 8016cae:	d015      	beq.n	8016cdc <_vfiprintf_r+0x120>
 8016cb0:	9a07      	ldr	r2, [sp, #28]
 8016cb2:	4654      	mov	r4, sl
 8016cb4:	2000      	movs	r0, #0
 8016cb6:	f04f 0c0a 	mov.w	ip, #10
 8016cba:	4621      	mov	r1, r4
 8016cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016cc0:	3b30      	subs	r3, #48	; 0x30
 8016cc2:	2b09      	cmp	r3, #9
 8016cc4:	d94d      	bls.n	8016d62 <_vfiprintf_r+0x1a6>
 8016cc6:	b1b0      	cbz	r0, 8016cf6 <_vfiprintf_r+0x13a>
 8016cc8:	9207      	str	r2, [sp, #28]
 8016cca:	e014      	b.n	8016cf6 <_vfiprintf_r+0x13a>
 8016ccc:	eba0 0308 	sub.w	r3, r0, r8
 8016cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8016cd4:	4313      	orrs	r3, r2
 8016cd6:	9304      	str	r3, [sp, #16]
 8016cd8:	46a2      	mov	sl, r4
 8016cda:	e7d2      	b.n	8016c82 <_vfiprintf_r+0xc6>
 8016cdc:	9b03      	ldr	r3, [sp, #12]
 8016cde:	1d19      	adds	r1, r3, #4
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	9103      	str	r1, [sp, #12]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	bfbb      	ittet	lt
 8016ce8:	425b      	neglt	r3, r3
 8016cea:	f042 0202 	orrlt.w	r2, r2, #2
 8016cee:	9307      	strge	r3, [sp, #28]
 8016cf0:	9307      	strlt	r3, [sp, #28]
 8016cf2:	bfb8      	it	lt
 8016cf4:	9204      	strlt	r2, [sp, #16]
 8016cf6:	7823      	ldrb	r3, [r4, #0]
 8016cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8016cfa:	d10c      	bne.n	8016d16 <_vfiprintf_r+0x15a>
 8016cfc:	7863      	ldrb	r3, [r4, #1]
 8016cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8016d00:	d134      	bne.n	8016d6c <_vfiprintf_r+0x1b0>
 8016d02:	9b03      	ldr	r3, [sp, #12]
 8016d04:	1d1a      	adds	r2, r3, #4
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	9203      	str	r2, [sp, #12]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	bfb8      	it	lt
 8016d0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016d12:	3402      	adds	r4, #2
 8016d14:	9305      	str	r3, [sp, #20]
 8016d16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016dec <_vfiprintf_r+0x230>
 8016d1a:	7821      	ldrb	r1, [r4, #0]
 8016d1c:	2203      	movs	r2, #3
 8016d1e:	4650      	mov	r0, sl
 8016d20:	f7e9 fade 	bl	80002e0 <memchr>
 8016d24:	b138      	cbz	r0, 8016d36 <_vfiprintf_r+0x17a>
 8016d26:	9b04      	ldr	r3, [sp, #16]
 8016d28:	eba0 000a 	sub.w	r0, r0, sl
 8016d2c:	2240      	movs	r2, #64	; 0x40
 8016d2e:	4082      	lsls	r2, r0
 8016d30:	4313      	orrs	r3, r2
 8016d32:	3401      	adds	r4, #1
 8016d34:	9304      	str	r3, [sp, #16]
 8016d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d3a:	4829      	ldr	r0, [pc, #164]	; (8016de0 <_vfiprintf_r+0x224>)
 8016d3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016d40:	2206      	movs	r2, #6
 8016d42:	f7e9 facd 	bl	80002e0 <memchr>
 8016d46:	2800      	cmp	r0, #0
 8016d48:	d03f      	beq.n	8016dca <_vfiprintf_r+0x20e>
 8016d4a:	4b26      	ldr	r3, [pc, #152]	; (8016de4 <_vfiprintf_r+0x228>)
 8016d4c:	bb1b      	cbnz	r3, 8016d96 <_vfiprintf_r+0x1da>
 8016d4e:	9b03      	ldr	r3, [sp, #12]
 8016d50:	3307      	adds	r3, #7
 8016d52:	f023 0307 	bic.w	r3, r3, #7
 8016d56:	3308      	adds	r3, #8
 8016d58:	9303      	str	r3, [sp, #12]
 8016d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d5c:	443b      	add	r3, r7
 8016d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8016d60:	e768      	b.n	8016c34 <_vfiprintf_r+0x78>
 8016d62:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d66:	460c      	mov	r4, r1
 8016d68:	2001      	movs	r0, #1
 8016d6a:	e7a6      	b.n	8016cba <_vfiprintf_r+0xfe>
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	3401      	adds	r4, #1
 8016d70:	9305      	str	r3, [sp, #20]
 8016d72:	4619      	mov	r1, r3
 8016d74:	f04f 0c0a 	mov.w	ip, #10
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d7e:	3a30      	subs	r2, #48	; 0x30
 8016d80:	2a09      	cmp	r2, #9
 8016d82:	d903      	bls.n	8016d8c <_vfiprintf_r+0x1d0>
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d0c6      	beq.n	8016d16 <_vfiprintf_r+0x15a>
 8016d88:	9105      	str	r1, [sp, #20]
 8016d8a:	e7c4      	b.n	8016d16 <_vfiprintf_r+0x15a>
 8016d8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d90:	4604      	mov	r4, r0
 8016d92:	2301      	movs	r3, #1
 8016d94:	e7f0      	b.n	8016d78 <_vfiprintf_r+0x1bc>
 8016d96:	ab03      	add	r3, sp, #12
 8016d98:	9300      	str	r3, [sp, #0]
 8016d9a:	462a      	mov	r2, r5
 8016d9c:	4b12      	ldr	r3, [pc, #72]	; (8016de8 <_vfiprintf_r+0x22c>)
 8016d9e:	a904      	add	r1, sp, #16
 8016da0:	4630      	mov	r0, r6
 8016da2:	f7fd fe89 	bl	8014ab8 <_printf_float>
 8016da6:	4607      	mov	r7, r0
 8016da8:	1c78      	adds	r0, r7, #1
 8016daa:	d1d6      	bne.n	8016d5a <_vfiprintf_r+0x19e>
 8016dac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016dae:	07d9      	lsls	r1, r3, #31
 8016db0:	d405      	bmi.n	8016dbe <_vfiprintf_r+0x202>
 8016db2:	89ab      	ldrh	r3, [r5, #12]
 8016db4:	059a      	lsls	r2, r3, #22
 8016db6:	d402      	bmi.n	8016dbe <_vfiprintf_r+0x202>
 8016db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016dba:	f7fe fd01 	bl	80157c0 <__retarget_lock_release_recursive>
 8016dbe:	89ab      	ldrh	r3, [r5, #12]
 8016dc0:	065b      	lsls	r3, r3, #25
 8016dc2:	f53f af1d 	bmi.w	8016c00 <_vfiprintf_r+0x44>
 8016dc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016dc8:	e71c      	b.n	8016c04 <_vfiprintf_r+0x48>
 8016dca:	ab03      	add	r3, sp, #12
 8016dcc:	9300      	str	r3, [sp, #0]
 8016dce:	462a      	mov	r2, r5
 8016dd0:	4b05      	ldr	r3, [pc, #20]	; (8016de8 <_vfiprintf_r+0x22c>)
 8016dd2:	a904      	add	r1, sp, #16
 8016dd4:	4630      	mov	r0, r6
 8016dd6:	f7fe f8f7 	bl	8014fc8 <_printf_i>
 8016dda:	e7e4      	b.n	8016da6 <_vfiprintf_r+0x1ea>
 8016ddc:	080178c4 	.word	0x080178c4
 8016de0:	080178ce 	.word	0x080178ce
 8016de4:	08014ab9 	.word	0x08014ab9
 8016de8:	08016b97 	.word	0x08016b97
 8016dec:	080178ca 	.word	0x080178ca

08016df0 <__sflush_r>:
 8016df0:	898a      	ldrh	r2, [r1, #12]
 8016df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016df6:	4605      	mov	r5, r0
 8016df8:	0710      	lsls	r0, r2, #28
 8016dfa:	460c      	mov	r4, r1
 8016dfc:	d458      	bmi.n	8016eb0 <__sflush_r+0xc0>
 8016dfe:	684b      	ldr	r3, [r1, #4]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	dc05      	bgt.n	8016e10 <__sflush_r+0x20>
 8016e04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	dc02      	bgt.n	8016e10 <__sflush_r+0x20>
 8016e0a:	2000      	movs	r0, #0
 8016e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e12:	2e00      	cmp	r6, #0
 8016e14:	d0f9      	beq.n	8016e0a <__sflush_r+0x1a>
 8016e16:	2300      	movs	r3, #0
 8016e18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e1c:	682f      	ldr	r7, [r5, #0]
 8016e1e:	6a21      	ldr	r1, [r4, #32]
 8016e20:	602b      	str	r3, [r5, #0]
 8016e22:	d032      	beq.n	8016e8a <__sflush_r+0x9a>
 8016e24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e26:	89a3      	ldrh	r3, [r4, #12]
 8016e28:	075a      	lsls	r2, r3, #29
 8016e2a:	d505      	bpl.n	8016e38 <__sflush_r+0x48>
 8016e2c:	6863      	ldr	r3, [r4, #4]
 8016e2e:	1ac0      	subs	r0, r0, r3
 8016e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e32:	b10b      	cbz	r3, 8016e38 <__sflush_r+0x48>
 8016e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e36:	1ac0      	subs	r0, r0, r3
 8016e38:	2300      	movs	r3, #0
 8016e3a:	4602      	mov	r2, r0
 8016e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e3e:	6a21      	ldr	r1, [r4, #32]
 8016e40:	4628      	mov	r0, r5
 8016e42:	47b0      	blx	r6
 8016e44:	1c43      	adds	r3, r0, #1
 8016e46:	89a3      	ldrh	r3, [r4, #12]
 8016e48:	d106      	bne.n	8016e58 <__sflush_r+0x68>
 8016e4a:	6829      	ldr	r1, [r5, #0]
 8016e4c:	291d      	cmp	r1, #29
 8016e4e:	d82b      	bhi.n	8016ea8 <__sflush_r+0xb8>
 8016e50:	4a29      	ldr	r2, [pc, #164]	; (8016ef8 <__sflush_r+0x108>)
 8016e52:	410a      	asrs	r2, r1
 8016e54:	07d6      	lsls	r6, r2, #31
 8016e56:	d427      	bmi.n	8016ea8 <__sflush_r+0xb8>
 8016e58:	2200      	movs	r2, #0
 8016e5a:	6062      	str	r2, [r4, #4]
 8016e5c:	04d9      	lsls	r1, r3, #19
 8016e5e:	6922      	ldr	r2, [r4, #16]
 8016e60:	6022      	str	r2, [r4, #0]
 8016e62:	d504      	bpl.n	8016e6e <__sflush_r+0x7e>
 8016e64:	1c42      	adds	r2, r0, #1
 8016e66:	d101      	bne.n	8016e6c <__sflush_r+0x7c>
 8016e68:	682b      	ldr	r3, [r5, #0]
 8016e6a:	b903      	cbnz	r3, 8016e6e <__sflush_r+0x7e>
 8016e6c:	6560      	str	r0, [r4, #84]	; 0x54
 8016e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e70:	602f      	str	r7, [r5, #0]
 8016e72:	2900      	cmp	r1, #0
 8016e74:	d0c9      	beq.n	8016e0a <__sflush_r+0x1a>
 8016e76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e7a:	4299      	cmp	r1, r3
 8016e7c:	d002      	beq.n	8016e84 <__sflush_r+0x94>
 8016e7e:	4628      	mov	r0, r5
 8016e80:	f7ff faa2 	bl	80163c8 <_free_r>
 8016e84:	2000      	movs	r0, #0
 8016e86:	6360      	str	r0, [r4, #52]	; 0x34
 8016e88:	e7c0      	b.n	8016e0c <__sflush_r+0x1c>
 8016e8a:	2301      	movs	r3, #1
 8016e8c:	4628      	mov	r0, r5
 8016e8e:	47b0      	blx	r6
 8016e90:	1c41      	adds	r1, r0, #1
 8016e92:	d1c8      	bne.n	8016e26 <__sflush_r+0x36>
 8016e94:	682b      	ldr	r3, [r5, #0]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d0c5      	beq.n	8016e26 <__sflush_r+0x36>
 8016e9a:	2b1d      	cmp	r3, #29
 8016e9c:	d001      	beq.n	8016ea2 <__sflush_r+0xb2>
 8016e9e:	2b16      	cmp	r3, #22
 8016ea0:	d101      	bne.n	8016ea6 <__sflush_r+0xb6>
 8016ea2:	602f      	str	r7, [r5, #0]
 8016ea4:	e7b1      	b.n	8016e0a <__sflush_r+0x1a>
 8016ea6:	89a3      	ldrh	r3, [r4, #12]
 8016ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016eac:	81a3      	strh	r3, [r4, #12]
 8016eae:	e7ad      	b.n	8016e0c <__sflush_r+0x1c>
 8016eb0:	690f      	ldr	r7, [r1, #16]
 8016eb2:	2f00      	cmp	r7, #0
 8016eb4:	d0a9      	beq.n	8016e0a <__sflush_r+0x1a>
 8016eb6:	0793      	lsls	r3, r2, #30
 8016eb8:	680e      	ldr	r6, [r1, #0]
 8016eba:	bf08      	it	eq
 8016ebc:	694b      	ldreq	r3, [r1, #20]
 8016ebe:	600f      	str	r7, [r1, #0]
 8016ec0:	bf18      	it	ne
 8016ec2:	2300      	movne	r3, #0
 8016ec4:	eba6 0807 	sub.w	r8, r6, r7
 8016ec8:	608b      	str	r3, [r1, #8]
 8016eca:	f1b8 0f00 	cmp.w	r8, #0
 8016ece:	dd9c      	ble.n	8016e0a <__sflush_r+0x1a>
 8016ed0:	6a21      	ldr	r1, [r4, #32]
 8016ed2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016ed4:	4643      	mov	r3, r8
 8016ed6:	463a      	mov	r2, r7
 8016ed8:	4628      	mov	r0, r5
 8016eda:	47b0      	blx	r6
 8016edc:	2800      	cmp	r0, #0
 8016ede:	dc06      	bgt.n	8016eee <__sflush_r+0xfe>
 8016ee0:	89a3      	ldrh	r3, [r4, #12]
 8016ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ee6:	81a3      	strh	r3, [r4, #12]
 8016ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016eec:	e78e      	b.n	8016e0c <__sflush_r+0x1c>
 8016eee:	4407      	add	r7, r0
 8016ef0:	eba8 0800 	sub.w	r8, r8, r0
 8016ef4:	e7e9      	b.n	8016eca <__sflush_r+0xda>
 8016ef6:	bf00      	nop
 8016ef8:	dfbffffe 	.word	0xdfbffffe

08016efc <_fflush_r>:
 8016efc:	b538      	push	{r3, r4, r5, lr}
 8016efe:	690b      	ldr	r3, [r1, #16]
 8016f00:	4605      	mov	r5, r0
 8016f02:	460c      	mov	r4, r1
 8016f04:	b913      	cbnz	r3, 8016f0c <_fflush_r+0x10>
 8016f06:	2500      	movs	r5, #0
 8016f08:	4628      	mov	r0, r5
 8016f0a:	bd38      	pop	{r3, r4, r5, pc}
 8016f0c:	b118      	cbz	r0, 8016f16 <_fflush_r+0x1a>
 8016f0e:	6a03      	ldr	r3, [r0, #32]
 8016f10:	b90b      	cbnz	r3, 8016f16 <_fflush_r+0x1a>
 8016f12:	f7fe fa07 	bl	8015324 <__sinit>
 8016f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d0f3      	beq.n	8016f06 <_fflush_r+0xa>
 8016f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f20:	07d0      	lsls	r0, r2, #31
 8016f22:	d404      	bmi.n	8016f2e <_fflush_r+0x32>
 8016f24:	0599      	lsls	r1, r3, #22
 8016f26:	d402      	bmi.n	8016f2e <_fflush_r+0x32>
 8016f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f2a:	f7fe fc48 	bl	80157be <__retarget_lock_acquire_recursive>
 8016f2e:	4628      	mov	r0, r5
 8016f30:	4621      	mov	r1, r4
 8016f32:	f7ff ff5d 	bl	8016df0 <__sflush_r>
 8016f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f38:	07da      	lsls	r2, r3, #31
 8016f3a:	4605      	mov	r5, r0
 8016f3c:	d4e4      	bmi.n	8016f08 <_fflush_r+0xc>
 8016f3e:	89a3      	ldrh	r3, [r4, #12]
 8016f40:	059b      	lsls	r3, r3, #22
 8016f42:	d4e1      	bmi.n	8016f08 <_fflush_r+0xc>
 8016f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f46:	f7fe fc3b 	bl	80157c0 <__retarget_lock_release_recursive>
 8016f4a:	e7dd      	b.n	8016f08 <_fflush_r+0xc>

08016f4c <__swhatbuf_r>:
 8016f4c:	b570      	push	{r4, r5, r6, lr}
 8016f4e:	460c      	mov	r4, r1
 8016f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f54:	2900      	cmp	r1, #0
 8016f56:	b096      	sub	sp, #88	; 0x58
 8016f58:	4615      	mov	r5, r2
 8016f5a:	461e      	mov	r6, r3
 8016f5c:	da0d      	bge.n	8016f7a <__swhatbuf_r+0x2e>
 8016f5e:	89a3      	ldrh	r3, [r4, #12]
 8016f60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016f64:	f04f 0100 	mov.w	r1, #0
 8016f68:	bf0c      	ite	eq
 8016f6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016f6e:	2340      	movne	r3, #64	; 0x40
 8016f70:	2000      	movs	r0, #0
 8016f72:	6031      	str	r1, [r6, #0]
 8016f74:	602b      	str	r3, [r5, #0]
 8016f76:	b016      	add	sp, #88	; 0x58
 8016f78:	bd70      	pop	{r4, r5, r6, pc}
 8016f7a:	466a      	mov	r2, sp
 8016f7c:	f000 f848 	bl	8017010 <_fstat_r>
 8016f80:	2800      	cmp	r0, #0
 8016f82:	dbec      	blt.n	8016f5e <__swhatbuf_r+0x12>
 8016f84:	9901      	ldr	r1, [sp, #4]
 8016f86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016f8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016f8e:	4259      	negs	r1, r3
 8016f90:	4159      	adcs	r1, r3
 8016f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f96:	e7eb      	b.n	8016f70 <__swhatbuf_r+0x24>

08016f98 <__smakebuf_r>:
 8016f98:	898b      	ldrh	r3, [r1, #12]
 8016f9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016f9c:	079d      	lsls	r5, r3, #30
 8016f9e:	4606      	mov	r6, r0
 8016fa0:	460c      	mov	r4, r1
 8016fa2:	d507      	bpl.n	8016fb4 <__smakebuf_r+0x1c>
 8016fa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016fa8:	6023      	str	r3, [r4, #0]
 8016faa:	6123      	str	r3, [r4, #16]
 8016fac:	2301      	movs	r3, #1
 8016fae:	6163      	str	r3, [r4, #20]
 8016fb0:	b002      	add	sp, #8
 8016fb2:	bd70      	pop	{r4, r5, r6, pc}
 8016fb4:	ab01      	add	r3, sp, #4
 8016fb6:	466a      	mov	r2, sp
 8016fb8:	f7ff ffc8 	bl	8016f4c <__swhatbuf_r>
 8016fbc:	9900      	ldr	r1, [sp, #0]
 8016fbe:	4605      	mov	r5, r0
 8016fc0:	4630      	mov	r0, r6
 8016fc2:	f7fd fc23 	bl	801480c <_malloc_r>
 8016fc6:	b948      	cbnz	r0, 8016fdc <__smakebuf_r+0x44>
 8016fc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fcc:	059a      	lsls	r2, r3, #22
 8016fce:	d4ef      	bmi.n	8016fb0 <__smakebuf_r+0x18>
 8016fd0:	f023 0303 	bic.w	r3, r3, #3
 8016fd4:	f043 0302 	orr.w	r3, r3, #2
 8016fd8:	81a3      	strh	r3, [r4, #12]
 8016fda:	e7e3      	b.n	8016fa4 <__smakebuf_r+0xc>
 8016fdc:	89a3      	ldrh	r3, [r4, #12]
 8016fde:	6020      	str	r0, [r4, #0]
 8016fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016fe4:	81a3      	strh	r3, [r4, #12]
 8016fe6:	9b00      	ldr	r3, [sp, #0]
 8016fe8:	6163      	str	r3, [r4, #20]
 8016fea:	9b01      	ldr	r3, [sp, #4]
 8016fec:	6120      	str	r0, [r4, #16]
 8016fee:	b15b      	cbz	r3, 8017008 <__smakebuf_r+0x70>
 8016ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ff4:	4630      	mov	r0, r6
 8016ff6:	f000 f81d 	bl	8017034 <_isatty_r>
 8016ffa:	b128      	cbz	r0, 8017008 <__smakebuf_r+0x70>
 8016ffc:	89a3      	ldrh	r3, [r4, #12]
 8016ffe:	f023 0303 	bic.w	r3, r3, #3
 8017002:	f043 0301 	orr.w	r3, r3, #1
 8017006:	81a3      	strh	r3, [r4, #12]
 8017008:	89a3      	ldrh	r3, [r4, #12]
 801700a:	431d      	orrs	r5, r3
 801700c:	81a5      	strh	r5, [r4, #12]
 801700e:	e7cf      	b.n	8016fb0 <__smakebuf_r+0x18>

08017010 <_fstat_r>:
 8017010:	b538      	push	{r3, r4, r5, lr}
 8017012:	4d07      	ldr	r5, [pc, #28]	; (8017030 <_fstat_r+0x20>)
 8017014:	2300      	movs	r3, #0
 8017016:	4604      	mov	r4, r0
 8017018:	4608      	mov	r0, r1
 801701a:	4611      	mov	r1, r2
 801701c:	602b      	str	r3, [r5, #0]
 801701e:	f7ef ffc2 	bl	8006fa6 <_fstat>
 8017022:	1c43      	adds	r3, r0, #1
 8017024:	d102      	bne.n	801702c <_fstat_r+0x1c>
 8017026:	682b      	ldr	r3, [r5, #0]
 8017028:	b103      	cbz	r3, 801702c <_fstat_r+0x1c>
 801702a:	6023      	str	r3, [r4, #0]
 801702c:	bd38      	pop	{r3, r4, r5, pc}
 801702e:	bf00      	nop
 8017030:	24004764 	.word	0x24004764

08017034 <_isatty_r>:
 8017034:	b538      	push	{r3, r4, r5, lr}
 8017036:	4d06      	ldr	r5, [pc, #24]	; (8017050 <_isatty_r+0x1c>)
 8017038:	2300      	movs	r3, #0
 801703a:	4604      	mov	r4, r0
 801703c:	4608      	mov	r0, r1
 801703e:	602b      	str	r3, [r5, #0]
 8017040:	f7ef ffc1 	bl	8006fc6 <_isatty>
 8017044:	1c43      	adds	r3, r0, #1
 8017046:	d102      	bne.n	801704e <_isatty_r+0x1a>
 8017048:	682b      	ldr	r3, [r5, #0]
 801704a:	b103      	cbz	r3, 801704e <_isatty_r+0x1a>
 801704c:	6023      	str	r3, [r4, #0]
 801704e:	bd38      	pop	{r3, r4, r5, pc}
 8017050:	24004764 	.word	0x24004764

08017054 <__assert_func>:
 8017054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017056:	4614      	mov	r4, r2
 8017058:	461a      	mov	r2, r3
 801705a:	4b09      	ldr	r3, [pc, #36]	; (8017080 <__assert_func+0x2c>)
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	4605      	mov	r5, r0
 8017060:	68d8      	ldr	r0, [r3, #12]
 8017062:	b14c      	cbz	r4, 8017078 <__assert_func+0x24>
 8017064:	4b07      	ldr	r3, [pc, #28]	; (8017084 <__assert_func+0x30>)
 8017066:	9100      	str	r1, [sp, #0]
 8017068:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801706c:	4906      	ldr	r1, [pc, #24]	; (8017088 <__assert_func+0x34>)
 801706e:	462b      	mov	r3, r5
 8017070:	f000 f844 	bl	80170fc <fiprintf>
 8017074:	f7fd fb92 	bl	801479c <abort>
 8017078:	4b04      	ldr	r3, [pc, #16]	; (801708c <__assert_func+0x38>)
 801707a:	461c      	mov	r4, r3
 801707c:	e7f3      	b.n	8017066 <__assert_func+0x12>
 801707e:	bf00      	nop
 8017080:	240000d8 	.word	0x240000d8
 8017084:	080178df 	.word	0x080178df
 8017088:	080178ec 	.word	0x080178ec
 801708c:	0801791a 	.word	0x0801791a

08017090 <_calloc_r>:
 8017090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017092:	fba1 2402 	umull	r2, r4, r1, r2
 8017096:	b94c      	cbnz	r4, 80170ac <_calloc_r+0x1c>
 8017098:	4611      	mov	r1, r2
 801709a:	9201      	str	r2, [sp, #4]
 801709c:	f7fd fbb6 	bl	801480c <_malloc_r>
 80170a0:	9a01      	ldr	r2, [sp, #4]
 80170a2:	4605      	mov	r5, r0
 80170a4:	b930      	cbnz	r0, 80170b4 <_calloc_r+0x24>
 80170a6:	4628      	mov	r0, r5
 80170a8:	b003      	add	sp, #12
 80170aa:	bd30      	pop	{r4, r5, pc}
 80170ac:	220c      	movs	r2, #12
 80170ae:	6002      	str	r2, [r0, #0]
 80170b0:	2500      	movs	r5, #0
 80170b2:	e7f8      	b.n	80170a6 <_calloc_r+0x16>
 80170b4:	4621      	mov	r1, r4
 80170b6:	f7fe fab1 	bl	801561c <memset>
 80170ba:	e7f4      	b.n	80170a6 <_calloc_r+0x16>

080170bc <__ascii_mbtowc>:
 80170bc:	b082      	sub	sp, #8
 80170be:	b901      	cbnz	r1, 80170c2 <__ascii_mbtowc+0x6>
 80170c0:	a901      	add	r1, sp, #4
 80170c2:	b142      	cbz	r2, 80170d6 <__ascii_mbtowc+0x1a>
 80170c4:	b14b      	cbz	r3, 80170da <__ascii_mbtowc+0x1e>
 80170c6:	7813      	ldrb	r3, [r2, #0]
 80170c8:	600b      	str	r3, [r1, #0]
 80170ca:	7812      	ldrb	r2, [r2, #0]
 80170cc:	1e10      	subs	r0, r2, #0
 80170ce:	bf18      	it	ne
 80170d0:	2001      	movne	r0, #1
 80170d2:	b002      	add	sp, #8
 80170d4:	4770      	bx	lr
 80170d6:	4610      	mov	r0, r2
 80170d8:	e7fb      	b.n	80170d2 <__ascii_mbtowc+0x16>
 80170da:	f06f 0001 	mvn.w	r0, #1
 80170de:	e7f8      	b.n	80170d2 <__ascii_mbtowc+0x16>

080170e0 <__ascii_wctomb>:
 80170e0:	b149      	cbz	r1, 80170f6 <__ascii_wctomb+0x16>
 80170e2:	2aff      	cmp	r2, #255	; 0xff
 80170e4:	bf85      	ittet	hi
 80170e6:	238a      	movhi	r3, #138	; 0x8a
 80170e8:	6003      	strhi	r3, [r0, #0]
 80170ea:	700a      	strbls	r2, [r1, #0]
 80170ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80170f0:	bf98      	it	ls
 80170f2:	2001      	movls	r0, #1
 80170f4:	4770      	bx	lr
 80170f6:	4608      	mov	r0, r1
 80170f8:	4770      	bx	lr
	...

080170fc <fiprintf>:
 80170fc:	b40e      	push	{r1, r2, r3}
 80170fe:	b503      	push	{r0, r1, lr}
 8017100:	4601      	mov	r1, r0
 8017102:	ab03      	add	r3, sp, #12
 8017104:	4805      	ldr	r0, [pc, #20]	; (801711c <fiprintf+0x20>)
 8017106:	f853 2b04 	ldr.w	r2, [r3], #4
 801710a:	6800      	ldr	r0, [r0, #0]
 801710c:	9301      	str	r3, [sp, #4]
 801710e:	f7ff fd55 	bl	8016bbc <_vfiprintf_r>
 8017112:	b002      	add	sp, #8
 8017114:	f85d eb04 	ldr.w	lr, [sp], #4
 8017118:	b003      	add	sp, #12
 801711a:	4770      	bx	lr
 801711c:	240000d8 	.word	0x240000d8

08017120 <_init>:
 8017120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017122:	bf00      	nop
 8017124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017126:	bc08      	pop	{r3}
 8017128:	469e      	mov	lr, r3
 801712a:	4770      	bx	lr

0801712c <_fini>:
 801712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801712e:	bf00      	nop
 8017130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017132:	bc08      	pop	{r3}
 8017134:	469e      	mov	lr, r3
 8017136:	4770      	bx	lr
