
racecar_pcb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d408  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800d6a8  0800d6a8  0001d6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d888  0800d888  0001d888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d890  0800d890  0001d890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d894  0800d894  0001d894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800d898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006d4  24000064  0800d8fc  00020064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000738  0800d8fc  00020738  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c778  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002e89  00000000  00000000  0003c84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001438  00000000  00000000  0003f6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000ffa  00000000  00000000  00040b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b086  00000000  00000000  00041b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001bd68  00000000  00000000  0007cb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00168a09  00000000  00000000  000988f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005b90  00000000  00000000  00201304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  00206e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d690 	.word	0x0800d690

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800d690 	.word	0x0800d690

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f001 ff16 	bl	80024b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f81e 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 fca2 	bl	8000fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 800068c:	f000 fc78 	bl	8000f80 <MX_DMA_Init>
  MX_UART5_Init();
 8000690:	f000 f95e 	bl	8000950 <MX_UART5_Init>
  MX_LPUART1_UART_Init();
 8000694:	f000 f910 	bl	80008b8 <MX_LPUART1_UART_Init>
  MX_UART7_Init();
 8000698:	f000 f9a6 	bl	80009e8 <MX_UART7_Init>
  MX_I2C1_Init();
 800069c:	f000 f88c 	bl	80007b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006a0:	f000 f8ca 	bl	8000838 <MX_I2C2_Init>
  MX_TIM2_Init();
 80006a4:	f000 f9ec 	bl	8000a80 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006a8:	f000 fa82 	bl	8000bb0 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006ac:	f000 fb02 	bl	8000cb4 <MX_TIM5_Init>
  MX_TIM15_Init();
 80006b0:	f000 fb9e 	bl	8000df0 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006b4:	f000 fc3e 	bl	8000f34 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  setup();
 80006b8:	f001 f862 	bl	8001780 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80006bc:	f001 f9fe 	bl	8001abc <loop>
  {
 80006c0:	e7fc      	b.n	80006bc <main+0x40>
	...

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09c      	sub	sp, #112	; 0x70
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	224c      	movs	r2, #76	; 0x4c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00c fb58 	bl	800cd88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f00c fb52 	bl	800cd88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f005 fb6b 	bl	8005dc0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <SystemClock_Config+0xec>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <SystemClock_Config+0xec>)
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <SystemClock_Config+0xec>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <SystemClock_Config+0xf0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a2a      	ldr	r2, [pc, #168]	; (80007b4 <SystemClock_Config+0xf0>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <SystemClock_Config+0xf0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800071c:	bf00      	nop
 800071e:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xf0>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800072a:	d1f8      	bne.n	800071e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	2302      	movs	r3, #2
 800073c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800073e:	2305      	movs	r3, #5
 8000740:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000742:	23a0      	movs	r3, #160	; 0xa0
 8000744:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 800074e:	2308      	movs	r3, #8
 8000750:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000752:	2308      	movs	r3, #8
 8000754:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000756:	2300      	movs	r3, #0
 8000758:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000762:	4618      	mov	r0, r3
 8000764:	f005 fb66 	bl	8005e34 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800076e:	f000 fce7 	bl	8001140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	233f      	movs	r3, #63	; 0x3f
 8000774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2303      	movs	r3, #3
 8000778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800077e:	2309      	movs	r3, #9
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2101      	movs	r1, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f005 ffa6 	bl	80066e8 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80007a2:	f000 fccd 	bl	8001140 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3770      	adds	r7, #112	; 0x70
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	58000400 	.word	0x58000400
 80007b4:	58024800 	.word	0x58024800

080007b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_I2C1_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_I2C1_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_I2C1_Init+0x74>)
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <MX_I2C1_Init+0x7c>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_I2C1_Init+0x74>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <MX_I2C1_Init+0x74>)
 80007f4:	f005 f866 	bl	80058c4 <HAL_I2C_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007fe:	f000 fc9f 	bl	8001140 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <MX_I2C1_Init+0x74>)
 8000806:	f005 fa44 	bl	8005c92 <HAL_I2CEx_ConfigAnalogFilter>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 fc96 	bl	8001140 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_I2C1_Init+0x74>)
 8000818:	f005 fa86 	bl	8005d28 <HAL_I2CEx_ConfigDigitalFilter>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000822:	f000 fc8d 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	24000080 	.word	0x24000080
 8000830:	40005400 	.word	0x40005400
 8000834:	10c0ecff 	.word	0x10c0ecff

08000838 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_I2C2_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <MX_I2C2_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_I2C2_Init+0x74>)
 8000844:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <MX_I2C2_Init+0x7c>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_I2C2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_I2C2_Init+0x74>)
 8000850:	2201      	movs	r2, #1
 8000852:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_I2C2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_I2C2_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_I2C2_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <MX_I2C2_Init+0x74>)
 8000874:	f005 f826 	bl	80058c4 <HAL_I2C_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800087e:	f000 fc5f 	bl	8001140 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_I2C2_Init+0x74>)
 8000886:	f005 fa04 	bl	8005c92 <HAL_I2CEx_ConfigAnalogFilter>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000890:	f000 fc56 	bl	8001140 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000894:	2100      	movs	r1, #0
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_I2C2_Init+0x74>)
 8000898:	f005 fa46 	bl	8005d28 <HAL_I2CEx_ConfigDigitalFilter>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 fc4d 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	240000d4 	.word	0x240000d4
 80008b0:	40005800 	.word	0x40005800
 80008b4:	10c0ecff 	.word	0x10c0ecff

080008b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_LPUART1_UART_Init+0x94>)
 80008c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000900:	4811      	ldr	r0, [pc, #68]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 8000902:	f00a fa5d 	bl	800adc0 <HAL_UART_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 fc18 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 8000914:	f00c f94d 	bl	800cbb2 <HAL_UARTEx_SetTxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800091e:	f000 fc0f 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 8000926:	f00c f982 	bl	800cc2e <HAL_UARTEx_SetRxFifoThreshold>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 fc06 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_LPUART1_UART_Init+0x90>)
 8000936:	f00c f903 	bl	800cb40 <HAL_UARTEx_DisableFifoMode>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 fbfe 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	24000128 	.word	0x24000128
 800094c:	58000c00 	.word	0x58000c00

08000950 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_UART5_Init+0x90>)
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <MX_UART5_Init+0x94>)
 8000958:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_UART5_Init+0x90>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_UART5_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_UART5_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_UART5_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_UART5_Init+0x90>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_UART5_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_UART5_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_UART5_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_UART5_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_UART5_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_UART5_Init+0x90>)
 800099a:	f00a fa11 	bl	800adc0 <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 fbcc 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_UART5_Init+0x90>)
 80009ac:	f00c f901 	bl	800cbb2 <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 fbc3 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_UART5_Init+0x90>)
 80009be:	f00c f936 	bl	800cc2e <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 fbba 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_UART5_Init+0x90>)
 80009ce:	f00c f8b7 	bl	800cb40 <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 fbb2 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	240001bc 	.word	0x240001bc
 80009e4:	40005000 	.word	0x40005000

080009e8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_UART7_Init+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_UART7_Init+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_UART7_Init+0x90>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_UART7_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a32:	f00a f9c5 	bl	800adc0 <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 fb80 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a44:	f00c f8b5 	bl	800cbb2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 fb77 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a56:	f00c f8ea 	bl	800cc2e <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 fb6e 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_UART7_Init+0x90>)
 8000a66:	f00c f86b 	bl	800cb40 <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000a70:	f000 fb66 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	24000250 	.word	0x24000250
 8000a7c:	40007800 	.word	0x40007800

08000a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab2:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000ab4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000aba:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000abc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ac0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000aca:	2263      	movs	r2, #99	; 0x63
 8000acc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	4b37      	ldr	r3, [pc, #220]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ad4:	4b35      	ldr	r3, [pc, #212]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ada:	4834      	ldr	r0, [pc, #208]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000adc:	f007 ffbc 	bl	8008a58 <HAL_TIM_Base_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 fb2b 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af4:	4619      	mov	r1, r3
 8000af6:	482d      	ldr	r0, [pc, #180]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000af8:	f009 f8d2 	bl	8009ca0 <HAL_TIM_ConfigClockSource>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b02:	f000 fb1d 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b06:	4829      	ldr	r0, [pc, #164]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b08:	f008 f8a5 	bl	8008c56 <HAL_TIM_PWM_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b12:	f000 fb15 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4821      	ldr	r0, [pc, #132]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b26:	f00a f89f 	bl	800ac68 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b30:	f000 fb06 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b34:	2360      	movs	r3, #96	; 0x60
 8000b36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b4c:	f008 ff94 	bl	8009a78 <HAL_TIM_PWM_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b56:	f000 faf3 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4812      	ldr	r0, [pc, #72]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b62:	f008 ff89 	bl	8009a78 <HAL_TIM_PWM_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b6c:	f000 fae8 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	2208      	movs	r2, #8
 8000b74:	4619      	mov	r1, r3
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b78:	f008 ff7e 	bl	8009a78 <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000b82:	f000 fadd 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	220c      	movs	r2, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b8e:	f008 ff73 	bl	8009a78 <HAL_TIM_PWM_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000b98:	f000 fad2 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b9e:	f001 facd 	bl	800213c <HAL_TIM_MspPostInit>

}
 8000ba2:	bf00      	nop
 8000ba4:	3738      	adds	r7, #56	; 0x38
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240003d4 	.word	0x240003d4

08000bb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000be2:	4b32      	ldr	r3, [pc, #200]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000be4:	4a32      	ldr	r2, [pc, #200]	; (8000cb0 <MX_TIM3_Init+0x100>)
 8000be6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000bea:	2263      	movs	r2, #99	; 0x63
 8000bec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000bf6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000bfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c08:	4828      	ldr	r0, [pc, #160]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000c0a:	f007 ff25 	bl	8008a58 <HAL_TIM_Base_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c14:	f000 fa94 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4821      	ldr	r0, [pc, #132]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000c26:	f009 f83b 	bl	8009ca0 <HAL_TIM_ConfigClockSource>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c30:	f000 fa86 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c34:	481d      	ldr	r0, [pc, #116]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000c36:	f008 f80e 	bl	8008c56 <HAL_TIM_PWM_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c40:	f000 fa7e 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4816      	ldr	r0, [pc, #88]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000c54:	f00a f808 	bl	800ac68 <HAL_TIMEx_MasterConfigSynchronization>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c5e:	f000 fa6f 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c62:	2360      	movs	r3, #96	; 0x60
 8000c64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000c7a:	f008 fefd 	bl	8009a78 <HAL_TIM_PWM_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c84:	f000 fa5c 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4807      	ldr	r0, [pc, #28]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000c90:	f008 fef2 	bl	8009a78 <HAL_TIM_PWM_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c9a:	f000 fa51 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c9e:	4803      	ldr	r0, [pc, #12]	; (8000cac <MX_TIM3_Init+0xfc>)
 8000ca0:	f001 fa4c 	bl	800213c <HAL_TIM_MspPostInit>

}
 8000ca4:	bf00      	nop
 8000ca6:	3738      	adds	r7, #56	; 0x38
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	24000420 	.word	0x24000420
 8000cb0:	40000400 	.word	0x40000400

08000cb4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b090      	sub	sp, #64	; 0x40
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000cf0:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000cf2:	4a3e      	ldr	r2, [pc, #248]	; (8000dec <MX_TIM5_Init+0x138>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000cf6:	4b3c      	ldr	r3, [pc, #240]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000cf8:	2263      	movs	r2, #99	; 0x63
 8000cfa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b3a      	ldr	r3, [pc, #232]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d02:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d08:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d16:	4834      	ldr	r0, [pc, #208]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000d18:	f007 fe9e 	bl	8008a58 <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000d22:	f000 fa0d 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d30:	4619      	mov	r1, r3
 8000d32:	482d      	ldr	r0, [pc, #180]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000d34:	f008 ffb4 	bl	8009ca0 <HAL_TIM_ConfigClockSource>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000d3e:	f000 f9ff 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000d42:	4829      	ldr	r0, [pc, #164]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000d44:	f008 f8f6 	bl	8008f34 <HAL_TIM_IC_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000d4e:	f000 f9f7 	bl	8001140 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d52:	2304      	movs	r3, #4
 8000d54:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d56:	2350      	movs	r3, #80	; 0x50
 8000d58:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481e      	ldr	r0, [pc, #120]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000d6e:	f009 f88f 	bl	8009e90 <HAL_TIM_SlaveConfigSynchro>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000d78:	f000 f9e2 	bl	8001140 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d80:	2301      	movs	r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2200      	movs	r2, #0
 8000d92:	4619      	mov	r1, r3
 8000d94:	4814      	ldr	r0, [pc, #80]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000d96:	f008 fdd2 	bl	800993e <HAL_TIM_IC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8000da0:	f000 f9ce 	bl	8001140 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000da4:	2302      	movs	r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000da8:	2302      	movs	r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2204      	movs	r2, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000db6:	f008 fdc2 	bl	800993e <HAL_TIM_IC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8000dc0:	f000 f9be 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_TIM5_Init+0x134>)
 8000dd2:	f009 ff49 	bl	800ac68 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8000ddc:	f000 f9b0 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3740      	adds	r7, #64	; 0x40
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2400046c 	.word	0x2400046c
 8000dec:	40000c00 	.word	0x40000c00

08000df0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b090      	sub	sp, #64	; 0x40
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e22:	463b      	mov	r3, r7
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e2c:	4b3f      	ldr	r3, [pc, #252]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000e2e:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <MX_TIM15_Init+0x140>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 8000e32:	4b3e      	ldr	r3, [pc, #248]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000e34:	2263      	movs	r2, #99	; 0x63
 8000e36:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b3c      	ldr	r3, [pc, #240]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e3e:	4b3b      	ldr	r3, [pc, #236]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e44:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b39      	ldr	r3, [pc, #228]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e4c:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e52:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000e58:	4834      	ldr	r0, [pc, #208]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000e5a:	f007 fdfd 	bl	8008a58 <HAL_TIM_Base_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000e64:	f000 f96c 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000e6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e72:	4619      	mov	r1, r3
 8000e74:	482d      	ldr	r0, [pc, #180]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000e76:	f008 ff13 	bl	8009ca0 <HAL_TIM_ConfigClockSource>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000e80:	f000 f95e 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000e84:	4829      	ldr	r0, [pc, #164]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000e86:	f008 f855 	bl	8008f34 <HAL_TIM_IC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8000e90:	f000 f956 	bl	8001140 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e94:	2304      	movs	r3, #4
 8000e96:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000e98:	2350      	movs	r3, #80	; 0x50
 8000e9a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	481f      	ldr	r0, [pc, #124]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000eb0:	f008 ffee 	bl	8009e90 <HAL_TIM_SlaveConfigSynchro>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000eba:	f000 f941 	bl	8001140 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4815      	ldr	r0, [pc, #84]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000ed8:	f008 fd31 	bl	800993e <HAL_TIM_IC_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000ee2:	f000 f92d 	bl	8001140 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000eea:	2302      	movs	r3, #2
 8000eec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000ef8:	f008 fd21 	bl	800993e <HAL_TIM_IC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8000f02:	f000 f91d 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4619      	mov	r1, r3
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <MX_TIM15_Init+0x13c>)
 8000f14:	f009 fea8 	bl	800ac68 <HAL_TIMEx_MasterConfigSynchronization>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8000f1e:	f000 f90f 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	3740      	adds	r7, #64	; 0x40
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	240004b8 	.word	0x240004b8
 8000f30:	40014000 	.word	0x40014000

08000f34 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_TIM16_Init+0x44>)
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <MX_TIM16_Init+0x48>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 99;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_TIM16_Init+0x44>)
 8000f40:	2263      	movs	r2, #99	; 0x63
 8000f42:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_TIM16_Init+0x44>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_TIM16_Init+0x44>)
 8000f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f50:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_TIM16_Init+0x44>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <MX_TIM16_Init+0x44>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_TIM16_Init+0x44>)
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_TIM16_Init+0x44>)
 8000f66:	f007 fd77 	bl	8008a58 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000f70:	f000 f8e6 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	24000504 	.word	0x24000504
 8000f7c:	40014400 	.word	0x40014400

08000f80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_DMA_Init+0x4c>)
 8000f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <MX_DMA_Init+0x4c>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <MX_DMA_Init+0x4c>)
 8000f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	200b      	movs	r0, #11
 8000faa:	f001 fc1e 	bl	80027ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fae:	200b      	movs	r0, #11
 8000fb0:	f001 fc35 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f001 fc16 	bl	80027ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fbe:	200c      	movs	r0, #12
 8000fc0:	f001 fc2d 	bl	800281e <HAL_NVIC_EnableIRQ>

}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	58024400 	.word	0x58024400

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe6:	4b52      	ldr	r3, [pc, #328]	; (8001130 <MX_GPIO_Init+0x160>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	4a50      	ldr	r2, [pc, #320]	; (8001130 <MX_GPIO_Init+0x160>)
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <MX_GPIO_Init+0x160>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001004:	4b4a      	ldr	r3, [pc, #296]	; (8001130 <MX_GPIO_Init+0x160>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	4a49      	ldr	r2, [pc, #292]	; (8001130 <MX_GPIO_Init+0x160>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001014:	4b46      	ldr	r3, [pc, #280]	; (8001130 <MX_GPIO_Init+0x160>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	4b43      	ldr	r3, [pc, #268]	; (8001130 <MX_GPIO_Init+0x160>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001028:	4a41      	ldr	r2, [pc, #260]	; (8001130 <MX_GPIO_Init+0x160>)
 800102a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <MX_GPIO_Init+0x160>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <MX_GPIO_Init+0x160>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	4a3a      	ldr	r2, [pc, #232]	; (8001130 <MX_GPIO_Init+0x160>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001050:	4b37      	ldr	r3, [pc, #220]	; (8001130 <MX_GPIO_Init+0x160>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b34      	ldr	r3, [pc, #208]	; (8001130 <MX_GPIO_Init+0x160>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001064:	4a32      	ldr	r2, [pc, #200]	; (8001130 <MX_GPIO_Init+0x160>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <MX_GPIO_Init+0x160>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_GPIO_Init+0x160>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001082:	4a2b      	ldr	r2, [pc, #172]	; (8001130 <MX_GPIO_Init+0x160>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_GPIO_Init+0x160>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a0:	4824      	ldr	r0, [pc, #144]	; (8001134 <MX_GPIO_Init+0x164>)
 80010a2:	f004 fbdb 	bl	800585c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2128      	movs	r1, #40	; 0x28
 80010aa:	4823      	ldr	r0, [pc, #140]	; (8001138 <MX_GPIO_Init+0x168>)
 80010ac:	f004 fbd6 	bl	800585c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2120      	movs	r1, #32
 80010b4:	4821      	ldr	r0, [pc, #132]	; (800113c <MX_GPIO_Init+0x16c>)
 80010b6:	f004 fbd1 	bl	800585c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80010ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <MX_GPIO_Init+0x164>)
 80010d4:	f004 f9fa 	bl	80054cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_YELLOW_Pin;
 80010d8:	2328      	movs	r3, #40	; 0x28
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4812      	ldr	r0, [pc, #72]	; (8001138 <MX_GPIO_Init+0x168>)
 80010f0:	f004 f9ec 	bl	80054cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Output_Pin */
  GPIO_InitStruct.Pin = Manual_Output_Pin;
 80010f4:	2320      	movs	r3, #32
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Manual_Output_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	480c      	ldr	r0, [pc, #48]	; (800113c <MX_GPIO_Init+0x16c>)
 800110c:	f004 f9de 	bl	80054cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_GPIO_Init+0x16c>)
 8001124:	f004 f9d2 	bl	80054cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	; 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	58024400 	.word	0x58024400
 8001134:	58021000 	.word	0x58021000
 8001138:	58020c00 	.word	0x58020c00
 800113c:	58020400 	.word	0x58020400

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	e7fe      	b.n	8001148 <Error_Handler+0x8>
	...

0800114c <_ZL8DWT_Initv>:
#define INC_UTILITY_H_

#include "main.h"

static inline void DWT_Init(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_ZL8DWT_Initv+0x28>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <_ZL8DWT_Initv+0x28>)
 8001156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800115a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <_ZL8DWT_Initv+0x2c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_ZL8DWT_Initv+0x2c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000edf0 	.word	0xe000edf0
 8001178:	e0001000 	.word	0xe0001000

0800117c <_Z15read_speed_datav>:

uint8_t ch3_cnt=0,ch4_cnt=99;

uint32_t servo_duty,esc_duty,freq;

HAL_StatusTypeDef read_speed_data(){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	e009      	b.n	800119c <_Z15read_speed_datav+0x20>
		if(received_speed[i]==acsr)break;
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	4a1a      	ldr	r2, [pc, #104]	; (80011f4 <_Z15read_speed_datav+0x78>)
 800118c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <_Z15read_speed_datav+0x7c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d006      	beq.n	80011a4 <_Z15read_speed_datav+0x28>
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	3301      	adds	r3, #1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d9f2      	bls.n	8001188 <_Z15read_speed_datav+0xc>
 80011a2:	e000      	b.n	80011a6 <_Z15read_speed_datav+0x2a>
		if(received_speed[i]==acsr)break;
 80011a4:	bf00      	nop
	}
	if(i==SPEED_PIN_COUNT+1)return HAL_ERROR;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b11      	cmp	r3, #17
 80011aa:	d101      	bne.n	80011b0 <_Z15read_speed_datav+0x34>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e01c      	b.n	80011ea <_Z15read_speed_datav+0x6e>

	memcpy(speed,&received_speed[i+1],(SPEED_PIN_COUNT-i)*sizeof(uint32_t));
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	3301      	adds	r3, #1
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <_Z15read_speed_datav+0x78>)
 80011b8:	1899      	adds	r1, r3, r2
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f1c3 0310 	rsb	r3, r3, #16
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	461a      	mov	r2, r3
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <_Z15read_speed_datav+0x80>)
 80011c6:	f00b fe13 	bl	800cdf0 <memcpy>
	if(i){
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00b      	beq.n	80011e8 <_Z15read_speed_datav+0x6c>
		memcpy(&speed[SPEED_PIN_COUNT-i],received_speed,i*sizeof(uint32_t));
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f1c3 0310 	rsb	r3, r3, #16
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4a08      	ldr	r2, [pc, #32]	; (80011fc <_Z15read_speed_datav+0x80>)
 80011da:	1898      	adds	r0, r3, r2
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	461a      	mov	r2, r3
 80011e2:	4904      	ldr	r1, [pc, #16]	; (80011f4 <_Z15read_speed_datav+0x78>)
 80011e4:	f00b fe04 	bl	800cdf0 <memcpy>
	}
	return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	24000554 	.word	0x24000554
 80011f8:	41435352 	.word	0x41435352
 80011fc:	24000598 	.word	0x24000598

08001200 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5){
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a46      	ldr	r2, [pc, #280]	; (8001328 <HAL_UART_RxCpltCallback+0x128>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10f      	bne.n	8001232 <HAL_UART_RxCpltCallback+0x32>
		if(read_speed_data()==HAL_ERROR){
 8001212:	f7ff ffb3 	bl	800117c <_Z15read_speed_datav>
 8001216:	4603      	mov	r3, r0
 8001218:	2b01      	cmp	r3, #1
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d07b      	beq.n	800131e <HAL_UART_RxCpltCallback+0x11e>
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8001226:	2244      	movs	r2, #68	; 0x44
 8001228:	4940      	ldr	r1, [pc, #256]	; (800132c <HAL_UART_RxCpltCallback+0x12c>)
 800122a:	4841      	ldr	r0, [pc, #260]	; (8001330 <HAL_UART_RxCpltCallback+0x130>)
 800122c:	f009 fea6 	bl	800af7c <HAL_UART_Receive_DMA>
			break;
		default:
			break;
		}
	}
}
 8001230:	e075      	b.n	800131e <HAL_UART_RxCpltCallback+0x11e>
	}else if(huart->Instance==UART7){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a3f      	ldr	r2, [pc, #252]	; (8001334 <HAL_UART_RxCpltCallback+0x134>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d170      	bne.n	800131e <HAL_UART_RxCpltCallback+0x11e>
		switch(led_state){
 800123c:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <HAL_UART_RxCpltCallback+0x138>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b42      	cmp	r3, #66	; 0x42
 8001242:	d061      	beq.n	8001308 <HAL_UART_RxCpltCallback+0x108>
 8001244:	2b42      	cmp	r3, #66	; 0x42
 8001246:	db69      	blt.n	800131c <HAL_UART_RxCpltCallback+0x11c>
 8001248:	2b79      	cmp	r3, #121	; 0x79
 800124a:	dc67      	bgt.n	800131c <HAL_UART_RxCpltCallback+0x11c>
 800124c:	2b52      	cmp	r3, #82	; 0x52
 800124e:	db65      	blt.n	800131c <HAL_UART_RxCpltCallback+0x11c>
 8001250:	3b52      	subs	r3, #82	; 0x52
 8001252:	2b27      	cmp	r3, #39	; 0x27
 8001254:	d862      	bhi.n	800131c <HAL_UART_RxCpltCallback+0x11c>
 8001256:	a201      	add	r2, pc, #4	; (adr r2, 800125c <HAL_UART_RxCpltCallback+0x5c>)
 8001258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125c:	080012fd 	.word	0x080012fd
 8001260:	0800131d 	.word	0x0800131d
 8001264:	0800131d 	.word	0x0800131d
 8001268:	0800131d 	.word	0x0800131d
 800126c:	0800131d 	.word	0x0800131d
 8001270:	0800131d 	.word	0x0800131d
 8001274:	0800131d 	.word	0x0800131d
 8001278:	08001313 	.word	0x08001313
 800127c:	0800131d 	.word	0x0800131d
 8001280:	0800131d 	.word	0x0800131d
 8001284:	0800131d 	.word	0x0800131d
 8001288:	0800131d 	.word	0x0800131d
 800128c:	0800131d 	.word	0x0800131d
 8001290:	0800131d 	.word	0x0800131d
 8001294:	0800131d 	.word	0x0800131d
 8001298:	0800131d 	.word	0x0800131d
 800129c:	08001309 	.word	0x08001309
 80012a0:	0800131d 	.word	0x0800131d
 80012a4:	0800131d 	.word	0x0800131d
 80012a8:	0800131d 	.word	0x0800131d
 80012ac:	0800131d 	.word	0x0800131d
 80012b0:	0800131d 	.word	0x0800131d
 80012b4:	0800131d 	.word	0x0800131d
 80012b8:	0800131d 	.word	0x0800131d
 80012bc:	0800131d 	.word	0x0800131d
 80012c0:	0800131d 	.word	0x0800131d
 80012c4:	0800131d 	.word	0x0800131d
 80012c8:	0800131d 	.word	0x0800131d
 80012cc:	0800131d 	.word	0x0800131d
 80012d0:	0800131d 	.word	0x0800131d
 80012d4:	0800131d 	.word	0x0800131d
 80012d8:	0800131d 	.word	0x0800131d
 80012dc:	080012fd 	.word	0x080012fd
 80012e0:	0800131d 	.word	0x0800131d
 80012e4:	0800131d 	.word	0x0800131d
 80012e8:	0800131d 	.word	0x0800131d
 80012ec:	0800131d 	.word	0x0800131d
 80012f0:	0800131d 	.word	0x0800131d
 80012f4:	0800131d 	.word	0x0800131d
 80012f8:	08001313 	.word	0x08001313
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80012fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001300:	480e      	ldr	r0, [pc, #56]	; (800133c <HAL_UART_RxCpltCallback+0x13c>)
 8001302:	f004 fac4 	bl	800588e <HAL_GPIO_TogglePin>
			break;
 8001306:	e00a      	b.n	800131e <HAL_UART_RxCpltCallback+0x11e>
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001308:	2108      	movs	r1, #8
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <HAL_UART_RxCpltCallback+0x140>)
 800130c:	f004 fabf 	bl	800588e <HAL_GPIO_TogglePin>
			break;
 8001310:	e005      	b.n	800131e <HAL_UART_RxCpltCallback+0x11e>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001312:	2120      	movs	r1, #32
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <HAL_UART_RxCpltCallback+0x140>)
 8001316:	f004 faba 	bl	800588e <HAL_GPIO_TogglePin>
			break;
 800131a:	e000      	b.n	800131e <HAL_UART_RxCpltCallback+0x11e>
			break;
 800131c:	bf00      	nop
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40005000 	.word	0x40005000
 800132c:	24000554 	.word	0x24000554
 8001330:	240001bc 	.word	0x240001bc
 8001334:	40007800 	.word	0x40007800
 8001338:	240005d8 	.word	0x240005d8
 800133c:	58021000 	.word	0x58021000
 8001340:	58020c00 	.word	0x58020c00

08001344 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==UART5) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_UART_ErrorCallback+0x24>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d104      	bne.n	8001360 <HAL_UART_ErrorCallback+0x1c>
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8001356:	2244      	movs	r2, #68	; 0x44
 8001358:	4904      	ldr	r1, [pc, #16]	; (800136c <HAL_UART_ErrorCallback+0x28>)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <HAL_UART_ErrorCallback+0x2c>)
 800135c:	f009 fe0e 	bl	800af7c <HAL_UART_Receive_DMA>
    }
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40005000 	.word	0x40005000
 800136c:	24000554 	.word	0x24000554
 8001370:	240001bc 	.word	0x240001bc

08001374 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM16){
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d113      	bne.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x3a>
		if(input_mode==Manual){
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d10f      	bne.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x3a>
			esc_duty=0;
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
			servo_duty=0;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,esc_duty);
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x58>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,servo_duty);
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40014400 	.word	0x40014400
 80013c0:	24000550 	.word	0x24000550
 80013c4:	240005e0 	.word	0x240005e0
 80013c8:	240005dc 	.word	0x240005dc
 80013cc:	24000420 	.word	0x24000420

080013d0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

//	if(input_mode==Auto)return;

	uint32_t temp_freq;
	if(htim->Instance==TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a35      	ldr	r2, [pc, #212]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d121      	bne.n	8001426 <HAL_TIM_IC_CaptureCallback+0x56>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7f1b      	ldrb	r3, [r3, #28]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d11d      	bne.n	8001426 <HAL_TIM_IC_CaptureCallback+0x56>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80013ea:	2100      	movs	r1, #0
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f008 fd91 	bl	8009f14 <HAL_TIM_ReadCapturedValue>
 80013f2:	60f8      	str	r0, [r7, #12]
		servo_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80013f4:	2104      	movs	r1, #4
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f008 fd8c 	bl	8009f14 <HAL_TIM_ReadCapturedValue>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a2e      	ldr	r2, [pc, #184]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001400:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_duty);
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xec>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCounter(htim,0);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001414:	2100      	movs	r1, #0
 8001416:	482a      	ldr	r0, [pc, #168]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001418:	f007 ff64 	bl	80092e4 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 800141c:	2104      	movs	r1, #4
 800141e:	4828      	ldr	r0, [pc, #160]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001420:	f007 fdea 	bl	8008ff8 <HAL_TIM_IC_Start>
 8001424:	e025      	b.n	8001472 <HAL_TIM_IC_CaptureCallback+0xa2>

	}else if(htim->Instance==TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d120      	bne.n	8001472 <HAL_TIM_IC_CaptureCallback+0xa2>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7f1b      	ldrb	r3, [r3, #28]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d11c      	bne.n	8001472 <HAL_TIM_IC_CaptureCallback+0xa2>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001438:	2100      	movs	r1, #0
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f008 fd6a 	bl	8009f14 <HAL_TIM_ReadCapturedValue>
 8001440:	60f8      	str	r0, [r7, #12]
		esc_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001442:	2104      	movs	r1, #4
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f008 fd65 	bl	8009f14 <HAL_TIM_ReadCapturedValue>
 800144a:	4603      	mov	r3, r0
 800144c:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800144e:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_duty);
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xec>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCounter(htim,0);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001462:	2100      	movs	r1, #0
 8001464:	4819      	ldr	r0, [pc, #100]	; (80014cc <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001466:	f007 ff3d 	bl	80092e4 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 800146a:	2104      	movs	r1, #4
 800146c:	4817      	ldr	r0, [pc, #92]	; (80014cc <HAL_TIM_IC_CaptureCallback+0xfc>)
 800146e:	f007 fdc3 	bl	8008ff8 <HAL_TIM_IC_Start>

	}
	if(freq<1000 || abs((int)temp_freq-(int)freq)>50){
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800147a:	d308      	bcc.n	800148e <HAL_TIM_IC_CaptureCallback+0xbe>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	1a9b      	subs	r3, r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	bfb8      	it	lt
 8001488:	425b      	neglt	r3, r3
 800148a:	2b32      	cmp	r3, #50	; 0x32
 800148c:	dd09      	ble.n	80014a2 <HAL_TIM_IC_CaptureCallback+0xd2>
		freq=temp_freq;
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xec>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xec>)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	60d3      	str	r3, [r2, #12]
	}
	__HAL_TIM_SetCounter(&htim16,0);
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40000c00 	.word	0x40000c00
 80014b8:	240005dc 	.word	0x240005dc
 80014bc:	24000420 	.word	0x24000420
 80014c0:	2400046c 	.word	0x2400046c
 80014c4:	40014000 	.word	0x40014000
 80014c8:	240005e0 	.word	0x240005e0
 80014cc:	240004b8 	.word	0x240004b8
 80014d0:	240005e4 	.word	0x240005e4
 80014d4:	24000504 	.word	0x24000504

080014d8 <_Z8test_i2cv>:

void test_cp2101(){

}

void test_i2c(){
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b091      	sub	sp, #68	; 0x44
 80014dc:	af00      	add	r7, sp, #0

    uint8_t i;
    HAL_StatusTypeDef ret;
    uint8_t address[10];
    uint8_t length=0;
 80014de:	2300      	movs	r3, #0
 80014e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 80014e4:	2301      	movs	r3, #1
 80014e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80014ea:	e020      	b.n	800152e <_Z8test_i2cv+0x56>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80014ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	b299      	uxth	r1, r3
 80014f6:	2305      	movs	r3, #5
 80014f8:	2203      	movs	r2, #3
 80014fa:	4865      	ldr	r0, [pc, #404]	; (8001690 <_Z8test_i2cv+0x1b8>)
 80014fc:	f004 fa72 	bl	80059e4 <HAL_I2C_IsDeviceReady>
 8001500:	4603      	mov	r3, r0
 8001502:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        if(ret == HAL_OK)
 8001506:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10a      	bne.n	8001524 <_Z8test_i2cv+0x4c>
        {
            address[length++]=i;
 800150e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001518:	3340      	adds	r3, #64	; 0x40
 800151a:	443b      	add	r3, r7
 800151c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001520:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 8001524:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001528:	3301      	adds	r3, #1
 800152a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800152e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001532:	2b00      	cmp	r3, #0
 8001534:	dada      	bge.n	80014ec <_Z8test_i2cv+0x14>
        }
    }
    uint8_t i2c_start_msg1[] = "I2C Scanning:\n";
 8001536:	4b57      	ldr	r3, [pc, #348]	; (8001694 <_Z8test_i2cv+0x1bc>)
 8001538:	f107 0420 	add.w	r4, r7, #32
 800153c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800153e:	c407      	stmia	r4!, {r0, r1, r2}
 8001540:	8023      	strh	r3, [r4, #0]
 8001542:	3402      	adds	r4, #2
 8001544:	0c1b      	lsrs	r3, r3, #16
 8001546:	7023      	strb	r3, [r4, #0]

	char buffer[25] = {0};
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	751a      	strb	r2, [r3, #20]
	HAL_UART_Transmit(&huart7, i2c_start_msg1, sizeof(i2c_start_msg1)-1, 10);
 800155e:	f107 0120 	add.w	r1, r7, #32
 8001562:	230a      	movs	r3, #10
 8001564:	220e      	movs	r2, #14
 8001566:	484c      	ldr	r0, [pc, #304]	; (8001698 <_Z8test_i2cv+0x1c0>)
 8001568:	f009 fc7a 	bl	800ae60 <HAL_UART_Transmit>

	if(length==2){
 800156c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001570:	2b02      	cmp	r3, #2
 8001572:	d10f      	bne.n	8001594 <_Z8test_i2cv+0xbc>
		sprintf(buffer, "\tI2C1 Address:0x%02X,0x%02X\n", address[0],address[1]);
 8001574:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001578:	461a      	mov	r2, r3
 800157a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800157e:	1d38      	adds	r0, r7, #4
 8001580:	4946      	ldr	r1, [pc, #280]	; (800169c <_Z8test_i2cv+0x1c4>)
 8001582:	f00b fbe1 	bl	800cd48 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 8001586:	1d39      	adds	r1, r7, #4
 8001588:	230a      	movs	r3, #10
 800158a:	2218      	movs	r2, #24
 800158c:	4842      	ldr	r0, [pc, #264]	; (8001698 <_Z8test_i2cv+0x1c0>)
 800158e:	f009 fc67 	bl	800ae60 <HAL_UART_Transmit>
 8001592:	e01c      	b.n	80015ce <_Z8test_i2cv+0xf6>
	}else if(length==1){
 8001594:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001598:	2b01      	cmp	r3, #1
 800159a:	d10e      	bne.n	80015ba <_Z8test_i2cv+0xe2>
		sprintf(buffer, "\tI2C1 Address:0x%02X\n", address[0]);
 800159c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80015a0:	461a      	mov	r2, r3
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	493e      	ldr	r1, [pc, #248]	; (80016a0 <_Z8test_i2cv+0x1c8>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f00b fbce 	bl	800cd48 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 80015ac:	1d39      	adds	r1, r7, #4
 80015ae:	230a      	movs	r3, #10
 80015b0:	2213      	movs	r2, #19
 80015b2:	4839      	ldr	r0, [pc, #228]	; (8001698 <_Z8test_i2cv+0x1c0>)
 80015b4:	f009 fc54 	bl	800ae60 <HAL_UART_Transmit>
 80015b8:	e009      	b.n	80015ce <_Z8test_i2cv+0xf6>
	}else if(length==0){
 80015ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d105      	bne.n	80015ce <_Z8test_i2cv+0xf6>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C1\n", 25, 10);
 80015c2:	230a      	movs	r3, #10
 80015c4:	2219      	movs	r2, #25
 80015c6:	4937      	ldr	r1, [pc, #220]	; (80016a4 <_Z8test_i2cv+0x1cc>)
 80015c8:	4833      	ldr	r0, [pc, #204]	; (8001698 <_Z8test_i2cv+0x1c0>)
 80015ca:	f009 fc49 	bl	800ae60 <HAL_UART_Transmit>
	}

    length=0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 80015d4:	2301      	movs	r3, #1
 80015d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80015da:	e020      	b.n	800161e <_Z8test_i2cv+0x146>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 80015dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	b299      	uxth	r1, r3
 80015e6:	2305      	movs	r3, #5
 80015e8:	2203      	movs	r2, #3
 80015ea:	482f      	ldr	r0, [pc, #188]	; (80016a8 <_Z8test_i2cv+0x1d0>)
 80015ec:	f004 f9fa 	bl	80059e4 <HAL_I2C_IsDeviceReady>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if(ret == HAL_OK)
 80015f6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10a      	bne.n	8001614 <_Z8test_i2cv+0x13c>
		{
			address[length++]=i;
 80015fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001608:	3340      	adds	r3, #64	; 0x40
 800160a:	443b      	add	r3, r7
 800160c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001610:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 8001614:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001618:	3301      	adds	r3, #1
 800161a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800161e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001622:	2b00      	cmp	r3, #0
 8001624:	dada      	bge.n	80015dc <_Z8test_i2cv+0x104>
		}
	}
    if(length==2){
 8001626:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800162a:	2b02      	cmp	r3, #2
 800162c:	d10f      	bne.n	800164e <_Z8test_i2cv+0x176>
		sprintf(buffer, "\tI2C2 Address:0x%02X,0x%02X\n", address[0],address[1]);
 800162e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001632:	461a      	mov	r2, r3
 8001634:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001638:	1d38      	adds	r0, r7, #4
 800163a:	491c      	ldr	r1, [pc, #112]	; (80016ac <_Z8test_i2cv+0x1d4>)
 800163c:	f00b fb84 	bl	800cd48 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 8001640:	1d39      	adds	r1, r7, #4
 8001642:	230a      	movs	r3, #10
 8001644:	2218      	movs	r2, #24
 8001646:	4814      	ldr	r0, [pc, #80]	; (8001698 <_Z8test_i2cv+0x1c0>)
 8001648:	f009 fc0a 	bl	800ae60 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
	}else if(length==0){
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
	}

}
 800164c:	e01c      	b.n	8001688 <_Z8test_i2cv+0x1b0>
	}else if(length==1){
 800164e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001652:	2b01      	cmp	r3, #1
 8001654:	d10e      	bne.n	8001674 <_Z8test_i2cv+0x19c>
		sprintf(buffer, "\tI2C2 Address:0x%02X\n", address[0]);
 8001656:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800165a:	461a      	mov	r2, r3
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4914      	ldr	r1, [pc, #80]	; (80016b0 <_Z8test_i2cv+0x1d8>)
 8001660:	4618      	mov	r0, r3
 8001662:	f00b fb71 	bl	800cd48 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 8001666:	1d39      	adds	r1, r7, #4
 8001668:	230a      	movs	r3, #10
 800166a:	2213      	movs	r2, #19
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <_Z8test_i2cv+0x1c0>)
 800166e:	f009 fbf7 	bl	800ae60 <HAL_UART_Transmit>
}
 8001672:	e009      	b.n	8001688 <_Z8test_i2cv+0x1b0>
	}else if(length==0){
 8001674:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001678:	2b00      	cmp	r3, #0
 800167a:	d105      	bne.n	8001688 <_Z8test_i2cv+0x1b0>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
 800167c:	230a      	movs	r3, #10
 800167e:	2219      	movs	r2, #25
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <_Z8test_i2cv+0x1dc>)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <_Z8test_i2cv+0x1c0>)
 8001684:	f009 fbec 	bl	800ae60 <HAL_UART_Transmit>
}
 8001688:	bf00      	nop
 800168a:	3744      	adds	r7, #68	; 0x44
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	24000080 	.word	0x24000080
 8001694:	0800d750 	.word	0x0800d750
 8001698:	24000250 	.word	0x24000250
 800169c:	0800d6a8 	.word	0x0800d6a8
 80016a0:	0800d6c8 	.word	0x0800d6c8
 80016a4:	0800d6e0 	.word	0x0800d6e0
 80016a8:	240000d4 	.word	0x240000d4
 80016ac:	0800d6fc 	.word	0x0800d6fc
 80016b0:	0800d71c 	.word	0x0800d71c
 80016b4:	0800d734 	.word	0x0800d734

080016b8 <_Z10test_speedv>:

void test_speed(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
	char send_data[7];
	HAL_UART_Transmit(&huart7, (uint8_t*)"Speed: ", 7, 10);
 80016be:	230a      	movs	r3, #10
 80016c0:	2207      	movs	r2, #7
 80016c2:	4914      	ldr	r1, [pc, #80]	; (8001714 <_Z10test_speedv+0x5c>)
 80016c4:	4814      	ldr	r0, [pc, #80]	; (8001718 <_Z10test_speedv+0x60>)
 80016c6:	f009 fbcb 	bl	800ae60 <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e011      	b.n	80016f4 <_Z10test_speedv+0x3c>
		sprintf(send_data,"%04lu ",speed[i]);
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <_Z10test_speedv+0x64>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4911      	ldr	r1, [pc, #68]	; (8001720 <_Z10test_speedv+0x68>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f00b fb33 	bl	800cd48 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)send_data, 5, 10);
 80016e2:	1d39      	adds	r1, r7, #4
 80016e4:	230a      	movs	r3, #10
 80016e6:	2205      	movs	r2, #5
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <_Z10test_speedv+0x60>)
 80016ea:	f009 fbb9 	bl	800ae60 <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	ddea      	ble.n	80016d0 <_Z10test_speedv+0x18>
	}
	uint8_t lf[]={10};
 80016fa:	230a      	movs	r3, #10
 80016fc:	703b      	strb	r3, [r7, #0]
	HAL_UART_Transmit(&huart7, lf, 1, 10);
 80016fe:	4639      	mov	r1, r7
 8001700:	230a      	movs	r3, #10
 8001702:	2201      	movs	r2, #1
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <_Z10test_speedv+0x60>)
 8001706:	f009 fbab 	bl	800ae60 <HAL_UART_Transmit>

}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	0800d760 	.word	0x0800d760
 8001718:	24000250 	.word	0x24000250
 800171c:	24000598 	.word	0x24000598
 8001720:	0800d768 	.word	0x0800d768

08001724 <_Z10test_brakev>:

void test_brake(){
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,ch3_cnt++);
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <_Z10test_brakev+0x50>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	b2d1      	uxtb	r1, r2
 8001730:	4a10      	ldr	r2, [pc, #64]	; (8001774 <_Z10test_brakev+0x50>)
 8001732:	7011      	strb	r1, [r2, #0]
 8001734:	4a10      	ldr	r2, [pc, #64]	; (8001778 <_Z10test_brakev+0x54>)
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,ch4_cnt--);
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_Z10test_brakev+0x58>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	1e5a      	subs	r2, r3, #1
 8001740:	b2d1      	uxtb	r1, r2
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <_Z10test_brakev+0x58>)
 8001744:	7011      	strb	r1, [r2, #0]
 8001746:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <_Z10test_brakev+0x54>)
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	6413      	str	r3, [r2, #64]	; 0x40
	if(ch3_cnt==99)ch3_cnt=0;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <_Z10test_brakev+0x50>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b63      	cmp	r3, #99	; 0x63
 8001752:	d102      	bne.n	800175a <_Z10test_brakev+0x36>
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <_Z10test_brakev+0x50>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
	if(ch4_cnt==0)ch4_cnt=99;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <_Z10test_brakev+0x58>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <_Z10test_brakev+0x44>
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <_Z10test_brakev+0x58>)
 8001764:	2263      	movs	r2, #99	; 0x63
 8001766:	701a      	strb	r2, [r3, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	240005d9 	.word	0x240005d9
 8001778:	240003d4 	.word	0x240003d4
 800177c:	24000000 	.word	0x24000000

08001780 <setup>:

void setup(){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	DWT_Init();
 8001784:	f7ff fce2 	bl	800114c <_ZL8DWT_Initv>
	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8001788:	2244      	movs	r2, #68	; 0x44
 800178a:	4947      	ldr	r1, [pc, #284]	; (80018a8 <setup+0x128>)
 800178c:	4847      	ldr	r0, [pc, #284]	; (80018ac <setup+0x12c>)
 800178e:	f009 fbf5 	bl	800af7c <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart7, (uint8_t*)&led_state, 1);
 8001792:	2201      	movs	r2, #1
 8001794:	4946      	ldr	r1, [pc, #280]	; (80018b0 <setup+0x130>)
 8001796:	4847      	ldr	r0, [pc, #284]	; (80018b4 <setup+0x134>)
 8001798:	f009 fbf0 	bl	800af7c <HAL_UART_Receive_DMA>

	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	2108      	movs	r1, #8
 80017a0:	4845      	ldr	r0, [pc, #276]	; (80018b8 <setup+0x138>)
 80017a2:	f004 f85b 	bl	800585c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2120      	movs	r1, #32
 80017aa:	4843      	ldr	r0, [pc, #268]	; (80018b8 <setup+0x138>)
 80017ac:	f004 f856 	bl	800585c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b6:	4841      	ldr	r0, [pc, #260]	; (80018bc <setup+0x13c>)
 80017b8:	f004 f850 	bl	800585c <HAL_GPIO_WritePin>

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,33);
 80017bc:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <setup+0x140>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2221      	movs	r2, #33	; 0x21
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2,67);
 80017c4:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <setup+0x140>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2243      	movs	r2, #67	; 0x43
 80017ca:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,ch3_cnt++);
 80017cc:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <setup+0x144>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	b2d1      	uxtb	r1, r2
 80017d4:	4a3b      	ldr	r2, [pc, #236]	; (80018c4 <setup+0x144>)
 80017d6:	7011      	strb	r1, [r2, #0]
 80017d8:	4a39      	ldr	r2, [pc, #228]	; (80018c0 <setup+0x140>)
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,ch4_cnt--);
 80017de:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <setup+0x148>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	b2d1      	uxtb	r1, r2
 80017e6:	4a38      	ldr	r2, [pc, #224]	; (80018c8 <setup+0x148>)
 80017e8:	7011      	strb	r1, [r2, #0]
 80017ea:	4a35      	ldr	r2, [pc, #212]	; (80018c0 <setup+0x140>)
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	6413      	str	r3, [r2, #64]	; 0x40

	HAL_TIM_Base_Start_IT(&htim2);
 80017f0:	4833      	ldr	r0, [pc, #204]	; (80018c0 <setup+0x140>)
 80017f2:	f007 f989 	bl	8008b08 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017f6:	2100      	movs	r1, #0
 80017f8:	4831      	ldr	r0, [pc, #196]	; (80018c0 <setup+0x140>)
 80017fa:	f007 fa8d 	bl	8008d18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017fe:	2104      	movs	r1, #4
 8001800:	482f      	ldr	r0, [pc, #188]	; (80018c0 <setup+0x140>)
 8001802:	f007 fa89 	bl	8008d18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001806:	2108      	movs	r1, #8
 8001808:	482d      	ldr	r0, [pc, #180]	; (80018c0 <setup+0x140>)
 800180a:	f007 fa85 	bl	8008d18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800180e:	210c      	movs	r1, #12
 8001810:	482b      	ldr	r0, [pc, #172]	; (80018c0 <setup+0x140>)
 8001812:	f007 fa81 	bl	8008d18 <HAL_TIM_PWM_Start>


	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2120      	movs	r1, #32
 800181a:	482c      	ldr	r0, [pc, #176]	; (80018cc <setup+0x14c>)
 800181c:	f004 f81e 	bl	800585c <HAL_GPIO_WritePin>
	freq = 0;
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <setup+0x150>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
	input_mode = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin)==GPIO_PIN_RESET?Auto:Manual;
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	4828      	ldr	r0, [pc, #160]	; (80018cc <setup+0x14c>)
 800182a:	f003 ffff 	bl	800582c <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <setup+0x154>)
 800183e:	701a      	strb	r2, [r3, #0]
	if(input_mode==Manual){
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <setup+0x154>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d112      	bne.n	800186e <setup+0xee>
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001848:	2100      	movs	r1, #0
 800184a:	4823      	ldr	r0, [pc, #140]	; (80018d8 <setup+0x158>)
 800184c:	f007 fd4a 	bl	80092e4 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001850:	2104      	movs	r1, #4
 8001852:	4821      	ldr	r0, [pc, #132]	; (80018d8 <setup+0x158>)
 8001854:	f007 fbd0 	bl	8008ff8 <HAL_TIM_IC_Start>
		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001858:	2100      	movs	r1, #0
 800185a:	4820      	ldr	r0, [pc, #128]	; (80018dc <setup+0x15c>)
 800185c:	f007 fd42 	bl	80092e4 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8001860:	2104      	movs	r1, #4
 8001862:	481e      	ldr	r0, [pc, #120]	; (80018dc <setup+0x15c>)
 8001864:	f007 fbc8 	bl	8008ff8 <HAL_TIM_IC_Start>

		HAL_TIM_Base_Start_IT(&htim16);
 8001868:	481d      	ldr	r0, [pc, #116]	; (80018e0 <setup+0x160>)
 800186a:	f007 f94d 	bl	8008b08 <HAL_TIM_Base_Start_IT>
	}

	__HAL_TIM_SET_AUTORELOAD(&htim3,20000-1);
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <setup+0x164>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <setup+0x164>)
 800187a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800187e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,5000-1);
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <setup+0x164>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f241 3287 	movw	r2, #4999	; 0x1387
 8001888:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,10000-1);
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <setup+0x164>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001892:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001894:	2100      	movs	r1, #0
 8001896:	4813      	ldr	r0, [pc, #76]	; (80018e4 <setup+0x164>)
 8001898:	f007 fa3e 	bl	8008d18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800189c:	2104      	movs	r1, #4
 800189e:	4811      	ldr	r0, [pc, #68]	; (80018e4 <setup+0x164>)
 80018a0:	f007 fa3a 	bl	8008d18 <HAL_TIM_PWM_Start>

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	24000554 	.word	0x24000554
 80018ac:	240001bc 	.word	0x240001bc
 80018b0:	240005d8 	.word	0x240005d8
 80018b4:	24000250 	.word	0x24000250
 80018b8:	58020c00 	.word	0x58020c00
 80018bc:	58021000 	.word	0x58021000
 80018c0:	240003d4 	.word	0x240003d4
 80018c4:	240005d9 	.word	0x240005d9
 80018c8:	24000000 	.word	0x24000000
 80018cc:	58020400 	.word	0x58020400
 80018d0:	240005e4 	.word	0x240005e4
 80018d4:	24000550 	.word	0x24000550
 80018d8:	2400046c 	.word	0x2400046c
 80018dc:	240004b8 	.word	0x240004b8
 80018e0:	24000504 	.word	0x24000504
 80018e4:	24000420 	.word	0x24000420

080018e8 <_Z10input_testv>:

void input_test(){
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b0b9      	sub	sp, #228	; 0xe4
 80018ec:	af02      	add	r7, sp, #8
	InputMode mode = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin)==GPIO_PIN_RESET?Auto:Manual;
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	4867      	ldr	r0, [pc, #412]	; (8001a90 <_Z10input_testv+0x1a8>)
 80018f2:	f003 ff9b 	bl	800582c <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	if(input_mode!=mode){
 8001906:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <_Z10input_testv+0x1ac>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	f897 20d6 	ldrb.w	r2, [r7, #214]	; 0xd6
 800190e:	429a      	cmp	r2, r3
 8001910:	d044      	beq.n	800199c <_Z10input_testv+0xb4>
		input_mode=mode;
 8001912:	4a60      	ldr	r2, [pc, #384]	; (8001a94 <_Z10input_testv+0x1ac>)
 8001914:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001918:	7013      	strb	r3, [r2, #0]
		if(input_mode==Manual){
 800191a:	4b5e      	ldr	r3, [pc, #376]	; (8001a94 <_Z10input_testv+0x1ac>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d113      	bne.n	800194a <_Z10input_testv+0x62>
			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001922:	2100      	movs	r1, #0
 8001924:	485c      	ldr	r0, [pc, #368]	; (8001a98 <_Z10input_testv+0x1b0>)
 8001926:	f007 fcdd 	bl	80092e4 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 800192a:	2104      	movs	r1, #4
 800192c:	485a      	ldr	r0, [pc, #360]	; (8001a98 <_Z10input_testv+0x1b0>)
 800192e:	f007 fb63 	bl	8008ff8 <HAL_TIM_IC_Start>
			HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001932:	2100      	movs	r1, #0
 8001934:	4859      	ldr	r0, [pc, #356]	; (8001a9c <_Z10input_testv+0x1b4>)
 8001936:	f007 fcd5 	bl	80092e4 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 800193a:	2104      	movs	r1, #4
 800193c:	4857      	ldr	r0, [pc, #348]	; (8001a9c <_Z10input_testv+0x1b4>)
 800193e:	f007 fb5b 	bl	8008ff8 <HAL_TIM_IC_Start>

			HAL_TIM_Base_Start_IT(&htim16);
 8001942:	4857      	ldr	r0, [pc, #348]	; (8001aa0 <_Z10input_testv+0x1b8>)
 8001944:	f007 f8e0 	bl	8008b08 <HAL_TIM_Base_Start_IT>
 8001948:	e028      	b.n	800199c <_Z10input_testv+0xb4>
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
		}else{
			freq=0;
 800194a:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <_Z10input_testv+0x1bc>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8001950:	2100      	movs	r1, #0
 8001952:	4851      	ldr	r0, [pc, #324]	; (8001a98 <_Z10input_testv+0x1b0>)
 8001954:	f007 fe16 	bl	8009584 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_2);
 8001958:	2104      	movs	r1, #4
 800195a:	484f      	ldr	r0, [pc, #316]	; (8001a98 <_Z10input_testv+0x1b0>)
 800195c:	f007 fc50 	bl	8009200 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop_IT(&htim15, TIM_CHANNEL_1);
 8001960:	2100      	movs	r1, #0
 8001962:	484e      	ldr	r0, [pc, #312]	; (8001a9c <_Z10input_testv+0x1b4>)
 8001964:	f007 fe0e 	bl	8009584 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop(&htim15, TIM_CHANNEL_2);
 8001968:	2104      	movs	r1, #4
 800196a:	484c      	ldr	r0, [pc, #304]	; (8001a9c <_Z10input_testv+0x1b4>)
 800196c:	f007 fc48 	bl	8009200 <HAL_TIM_IC_Stop>

			HAL_TIM_Base_Stop_IT(&htim16);
 8001970:	484b      	ldr	r0, [pc, #300]	; (8001aa0 <_Z10input_testv+0x1b8>)
 8001972:	f007 f941 	bl	8008bf8 <HAL_TIM_Base_Stop_IT>

			__HAL_TIM_SET_AUTORELOAD(&htim3,20000-1);
 8001976:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <_Z10input_testv+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001980:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <_Z10input_testv+0x1c0>)
 8001982:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001986:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,5000-1);
 8001988:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <_Z10input_testv+0x1c0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001990:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,10000-1);
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <_Z10input_testv+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f242 720f 	movw	r2, #9999	; 0x270f
 800199a:	639a      	str	r2, [r3, #56]	; 0x38
//			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
		}
	}
	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 800199c:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <_Z10input_testv+0x1c0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	uint32_t esc_cnt = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 80019a6:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <_Z10input_testv+0x1c0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	uint32_t servo_cnt = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2);
 80019b0:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <_Z10input_testv+0x1c0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	char str[200]={0};
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	22c4      	movs	r2, #196	; 0xc4
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00b f9df 	bl	800cd88 <memset>
	if(mode==Auto){
 80019ca:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d11e      	bne.n	8001a10 <_Z10input_testv+0x128>
		sprintf(str,"Input Mode: Auto, Frequency: %u Hz, ESC DutyCycle: %u%%, SERVO DutyCycle: %u%%\n",1000000/arr,esc_cnt*100/arr,servo_cnt*100/arr);
 80019d2:	4a36      	ldr	r2, [pc, #216]	; (8001aac <_Z10input_testv+0x1c4>)
 80019d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80019dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019e0:	2264      	movs	r2, #100	; 0x64
 80019e2:	fb03 f202 	mul.w	r2, r3, r2
 80019e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019ea:	fbb2 f4f3 	udiv	r4, r2, r3
 80019ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019f2:	2264      	movs	r2, #100	; 0x64
 80019f4:	fb03 f202 	mul.w	r2, r3, r2
 80019f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	4638      	mov	r0, r7
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4623      	mov	r3, r4
 8001a06:	460a      	mov	r2, r1
 8001a08:	4929      	ldr	r1, [pc, #164]	; (8001ab0 <_Z10input_testv+0x1c8>)
 8001a0a:	f00b f99d 	bl	800cd48 <siprintf>
 8001a0e:	e01d      	b.n	8001a4c <_Z10input_testv+0x164>
	}else{
		sprintf(str,"Input Mode: Manual, Frequency: %u Hz, ESC DutyCycle: %u%%, SERVO DutyCycle: %u%%\n",1000000/arr,esc_cnt*100/arr,servo_cnt*100/arr);
 8001a10:	4a26      	ldr	r2, [pc, #152]	; (8001aac <_Z10input_testv+0x1c4>)
 8001a12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a16:	fbb2 f1f3 	udiv	r1, r2, r3
 8001a1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a1e:	2264      	movs	r2, #100	; 0x64
 8001a20:	fb03 f202 	mul.w	r2, r3, r2
 8001a24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a28:	fbb2 f4f3 	udiv	r4, r2, r3
 8001a2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a30:	2264      	movs	r2, #100	; 0x64
 8001a32:	fb03 f202 	mul.w	r2, r3, r2
 8001a36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	4638      	mov	r0, r7
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	4623      	mov	r3, r4
 8001a44:	460a      	mov	r2, r1
 8001a46:	491b      	ldr	r1, [pc, #108]	; (8001ab4 <_Z10input_testv+0x1cc>)
 8001a48:	f00b f97e 	bl	800cd48 <siprintf>
	}
	uint8_t i=0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	while(str[i]!=0 && i<200){
 8001a52:	e00c      	b.n	8001a6e <_Z10input_testv+0x186>
		HAL_UART_Transmit(&huart7, (uint8_t*)(&str[i++]), 1, 1);
 8001a54:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	f887 20d7 	strb.w	r2, [r7, #215]	; 0xd7
 8001a5e:	461a      	mov	r2, r3
 8001a60:	463b      	mov	r3, r7
 8001a62:	1899      	adds	r1, r3, r2
 8001a64:	2301      	movs	r3, #1
 8001a66:	2201      	movs	r2, #1
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <_Z10input_testv+0x1d0>)
 8001a6a:	f009 f9f9 	bl	800ae60 <HAL_UART_Transmit>
	while(str[i]!=0 && i<200){
 8001a6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001a72:	33d8      	adds	r3, #216	; 0xd8
 8001a74:	443b      	add	r3, r7
 8001a76:	f813 3cd8 	ldrb.w	r3, [r3, #-216]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <_Z10input_testv+0x19e>
 8001a7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001a82:	2bc7      	cmp	r3, #199	; 0xc7
 8001a84:	d9e6      	bls.n	8001a54 <_Z10input_testv+0x16c>
	}




}
 8001a86:	bf00      	nop
 8001a88:	37dc      	adds	r7, #220	; 0xdc
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd90      	pop	{r4, r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	58020400 	.word	0x58020400
 8001a94:	24000550 	.word	0x24000550
 8001a98:	2400046c 	.word	0x2400046c
 8001a9c:	240004b8 	.word	0x240004b8
 8001aa0:	24000504 	.word	0x24000504
 8001aa4:	240005e4 	.word	0x240005e4
 8001aa8:	24000420 	.word	0x24000420
 8001aac:	000f4240 	.word	0x000f4240
 8001ab0:	0800d770 	.word	0x0800d770
 8001ab4:	0800d7c0 	.word	0x0800d7c0
 8001ab8:	24000250 	.word	0x24000250

08001abc <loop>:


void loop(){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0

	input_test();
 8001ac0:	f7ff ff12 	bl	80018e8 <_Z10input_testv>
	test_speed();
 8001ac4:	f7ff fdf8 	bl	80016b8 <_Z10test_speedv>
	test_i2c();
 8001ac8:	f7ff fd06 	bl	80014d8 <_Z8test_i2cv>
	test_brake();
 8001acc:	f7ff fe2a 	bl	8001724 <_Z10test_brakev>
	HAL_Delay(500);
 8001ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad4:	f000 fd7e 	bl	80025d4 <HAL_Delay>


}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_MspInit+0x30>)
 8001ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ae8:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <HAL_MspInit+0x30>)
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_MspInit+0x30>)
 8001af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	58024400 	.word	0x58024400

08001b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b0bc      	sub	sp, #240	; 0xf0
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	22c0      	movs	r2, #192	; 0xc0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f00b f929 	bl	800cd88 <memset>
  if(hi2c->Instance==I2C1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a4d      	ldr	r2, [pc, #308]	; (8001c70 <HAL_I2C_MspInit+0x160>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d147      	bne.n	8001bd0 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b40:	f04f 0208 	mov.w	r2, #8
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b52:	f107 0318 	add.w	r3, r7, #24
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 f952 	bl	8006e00 <HAL_RCCEx_PeriphCLKConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001b62:	f7ff faed 	bl	8001140 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	4a41      	ldr	r2, [pc, #260]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b76:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8c:	2312      	movs	r3, #18
 8001b8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4833      	ldr	r0, [pc, #204]	; (8001c78 <HAL_I2C_MspInit+0x168>)
 8001bac:	f003 fc8e 	bl	80054cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb0:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb6:	4a2f      	ldr	r2, [pc, #188]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bce:	e04b      	b.n	8001c68 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <HAL_I2C_MspInit+0x16c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d146      	bne.n	8001c68 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bda:	f04f 0208 	mov.w	r2, #8
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bec:	f107 0318 	add.w	r3, r7, #24
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f005 f905 	bl	8006e00 <HAL_RCCEx_PeriphCLKConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001bfc:	f7ff faa0 	bl	8001140 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c26:	2312      	movs	r3, #18
 8001c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <HAL_I2C_MspInit+0x168>)
 8001c46:	f003 fc41 	bl	80054cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c50:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001c52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_I2C_MspInit+0x164>)
 8001c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
}
 8001c68:	bf00      	nop
 8001c6a:	37f0      	adds	r7, #240	; 0xf0
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40005400 	.word	0x40005400
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58020400 	.word	0x58020400
 8001c7c:	40005800 	.word	0x40005800

08001c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0be      	sub	sp, #248	; 0xf8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c98:	f107 0320 	add.w	r3, r7, #32
 8001c9c:	22c0      	movs	r2, #192	; 0xc0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f00b f871 	bl	800cd88 <memset>
  if(huart->Instance==LPUART1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4aab      	ldr	r2, [pc, #684]	; (8001f58 <HAL_UART_MspInit+0x2d8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d147      	bne.n	8001d40 <HAL_UART_MspInit+0xc0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001cb0:	f04f 0204 	mov.w	r2, #4
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f005 f89a 	bl	8006e00 <HAL_RCCEx_PeriphCLKConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001cd2:	f7ff fa35 	bl	8001140 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cd6:	4ba1      	ldr	r3, [pc, #644]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cdc:	4a9f      	ldr	r2, [pc, #636]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ce6:	4b9d      	ldr	r3, [pc, #628]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b99      	ldr	r3, [pc, #612]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfa:	4a98      	ldr	r2, [pc, #608]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d04:	4b95      	ldr	r3, [pc, #596]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4889      	ldr	r0, [pc, #548]	; (8001f60 <HAL_UART_MspInit+0x2e0>)
 8001d3a:	f003 fbc7 	bl	80054cc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001d3e:	e106      	b.n	8001f4e <HAL_UART_MspInit+0x2ce>
  else if(huart->Instance==UART5)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a87      	ldr	r2, [pc, #540]	; (8001f64 <HAL_UART_MspInit+0x2e4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d17e      	bne.n	8001e48 <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001d4a:	f04f 0202 	mov.w	r2, #2
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d5c:	f107 0320 	add.w	r3, r7, #32
 8001d60:	4618      	mov	r0, r3
 8001d62:	f005 f84d 	bl	8006e00 <HAL_RCCEx_PeriphCLKConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001d6c:	f7ff f9e8 	bl	8001140 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d70:	4b7a      	ldr	r3, [pc, #488]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d76:	4a79      	ldr	r2, [pc, #484]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d80:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d94:	4a71      	ldr	r2, [pc, #452]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9e:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001dac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001db0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001dc6:	230e      	movs	r3, #14
 8001dc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4865      	ldr	r0, [pc, #404]	; (8001f68 <HAL_UART_MspInit+0x2e8>)
 8001dd4:	f003 fb7a 	bl	80054cc <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001dd8:	4b64      	ldr	r3, [pc, #400]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001dda:	4a65      	ldr	r2, [pc, #404]	; (8001f70 <HAL_UART_MspInit+0x2f0>)
 8001ddc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001dde:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001de0:	2241      	movs	r2, #65	; 0x41
 8001de2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de4:	4b61      	ldr	r3, [pc, #388]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dea:	4b60      	ldr	r3, [pc, #384]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001df0:	4b5e      	ldr	r3, [pc, #376]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df8:	4b5c      	ldr	r3, [pc, #368]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dfe:	4b5b      	ldr	r3, [pc, #364]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001e04:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e0c:	4b57      	ldr	r3, [pc, #348]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e12:	4b56      	ldr	r3, [pc, #344]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001e18:	4854      	ldr	r0, [pc, #336]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001e1a:	f000 fd1b 	bl	8002854 <HAL_DMA_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001e24:	f7ff f98c 	bl	8001140 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a50      	ldr	r2, [pc, #320]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001e30:	4a4e      	ldr	r2, [pc, #312]	; (8001f6c <HAL_UART_MspInit+0x2ec>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2035      	movs	r0, #53	; 0x35
 8001e3c:	f000 fcd5 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e40:	2035      	movs	r0, #53	; 0x35
 8001e42:	f000 fcec 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 8001e46:	e082      	b.n	8001f4e <HAL_UART_MspInit+0x2ce>
  else if(huart->Instance==UART7)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a49      	ldr	r2, [pc, #292]	; (8001f74 <HAL_UART_MspInit+0x2f4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d17d      	bne.n	8001f4e <HAL_UART_MspInit+0x2ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001e52:	f04f 0202 	mov.w	r2, #2
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e64:	f107 0320 	add.w	r3, r7, #32
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 ffc9 	bl	8006e00 <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8001e74:	f7ff f964 	bl	8001140 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001e78:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e7e:	4a37      	ldr	r2, [pc, #220]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001e80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e88:	4b34      	ldr	r3, [pc, #208]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9c:	4a2f      	ldr	r2, [pc, #188]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001e9e:	f043 0310 	orr.w	r3, r3, #16
 8001ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <HAL_UART_MspInit+0x2dc>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001eb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001ece:	2307      	movs	r3, #7
 8001ed0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4827      	ldr	r0, [pc, #156]	; (8001f78 <HAL_UART_MspInit+0x2f8>)
 8001edc:	f003 faf6 	bl	80054cc <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream1;
 8001ee0:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001ee2:	4a27      	ldr	r2, [pc, #156]	; (8001f80 <HAL_UART_MspInit+0x300>)
 8001ee4:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001ee6:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001ee8:	224f      	movs	r2, #79	; 0x4f
 8001eea:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eec:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef2:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef8:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efe:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f12:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001f20:	4816      	ldr	r0, [pc, #88]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001f22:	f000 fc97 	bl	8002854 <HAL_DMA_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 8001f2c:	f7ff f908 	bl	8001140 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001f38:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_UART_MspInit+0x2fc>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2052      	movs	r0, #82	; 0x52
 8001f44:	f000 fc51 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001f48:	2052      	movs	r0, #82	; 0x52
 8001f4a:	f000 fc68 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	37f8      	adds	r7, #248	; 0xf8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	58000c00 	.word	0x58000c00
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	58020000 	.word	0x58020000
 8001f64:	40005000 	.word	0x40005000
 8001f68:	58020400 	.word	0x58020400
 8001f6c:	240002e4 	.word	0x240002e4
 8001f70:	40020010 	.word	0x40020010
 8001f74:	40007800 	.word	0x40007800
 8001f78:	58021000 	.word	0x58021000
 8001f7c:	2400035c 	.word	0x2400035c
 8001f80:	40020028 	.word	0x40020028

08001f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08e      	sub	sp, #56	; 0x38
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fa6:	4b5e      	ldr	r3, [pc, #376]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8001fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fac:	4a5c      	ldr	r2, [pc, #368]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8001fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	623b      	str	r3, [r7, #32]
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001fc4:	e0a8      	b.n	8002118 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM3)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a56      	ldr	r2, [pc, #344]	; (8002124 <HAL_TIM_Base_MspInit+0x1a0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d10f      	bne.n	8001ff0 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8001fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd6:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fe0:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8001fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
}
 8001fee:	e093      	b.n	8002118 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM5)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a4c      	ldr	r2, [pc, #304]	; (8002128 <HAL_TIM_Base_MspInit+0x1a4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d136      	bne.n	8002068 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ffa:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8001ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002000:	4a47      	ldr	r2, [pc, #284]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800200a:	4b45      	ldr	r3, [pc, #276]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 800200c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b41      	ldr	r3, [pc, #260]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201e:	4a40      	ldr	r2, [pc, #256]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002028:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002036:	2301      	movs	r3, #1
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002046:	2302      	movs	r3, #2
 8002048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204e:	4619      	mov	r1, r3
 8002050:	4836      	ldr	r0, [pc, #216]	; (800212c <HAL_TIM_Base_MspInit+0x1a8>)
 8002052:	f003 fa3b 	bl	80054cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2032      	movs	r0, #50	; 0x32
 800205c:	f000 fbc5 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002060:	2032      	movs	r0, #50	; 0x32
 8002062:	f000 fbdc 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 8002066:	e057      	b.n	8002118 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM15)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a30      	ldr	r2, [pc, #192]	; (8002130 <HAL_TIM_Base_MspInit+0x1ac>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d136      	bne.n	80020e0 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8002074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002078:	4a29      	ldr	r2, [pc, #164]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 800207a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002082:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8002084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002096:	4a22      	ldr	r2, [pc, #136]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 8002098:	f043 0310 	orr.w	r3, r3, #16
 800209c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 80020a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020ae:	2320      	movs	r3, #32
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80020be:	2304      	movs	r3, #4
 80020c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c6:	4619      	mov	r1, r3
 80020c8:	481a      	ldr	r0, [pc, #104]	; (8002134 <HAL_TIM_Base_MspInit+0x1b0>)
 80020ca:	f003 f9ff 	bl	80054cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2074      	movs	r0, #116	; 0x74
 80020d4:	f000 fb89 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80020d8:	2074      	movs	r0, #116	; 0x74
 80020da:	f000 fba0 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 80020de:	e01b      	b.n	8002118 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM16)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a14      	ldr	r2, [pc, #80]	; (8002138 <HAL_TIM_Base_MspInit+0x1b4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d116      	bne.n	8002118 <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 80020ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020f0:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 80020f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_TIM_Base_MspInit+0x19c>)
 80020fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	2075      	movs	r0, #117	; 0x75
 800210e:	f000 fb6c 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002112:	2075      	movs	r0, #117	; 0x75
 8002114:	f000 fb83 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 8002118:	bf00      	nop
 800211a:	3738      	adds	r7, #56	; 0x38
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	58024400 	.word	0x58024400
 8002124:	40000400 	.word	0x40000400
 8002128:	40000c00 	.word	0x40000c00
 800212c:	58020000 	.word	0x58020000
 8002130:	40014000 	.word	0x40014000
 8002134:	58021000 	.word	0x58021000
 8002138:	40014400 	.word	0x40014400

0800213c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215c:	d120      	bne.n	80021a0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_TIM_MspPostInit+0xb4>)
 8002160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002164:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <HAL_TIM_MspPostInit+0xb4>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_TIM_MspPostInit+0xb4>)
 8002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800217c:	f248 030e 	movw	r3, #32782	; 0x800e
 8002180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800218e:	2301      	movs	r3, #1
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	4816      	ldr	r0, [pc, #88]	; (80021f4 <HAL_TIM_MspPostInit+0xb8>)
 800219a:	f003 f997 	bl	80054cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800219e:	e023      	b.n	80021e8 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_TIM_MspPostInit+0xbc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d11e      	bne.n	80021e8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_TIM_MspPostInit+0xb4>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_TIM_MspPostInit+0xb4>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_TIM_MspPostInit+0xb4>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021c8:	23c0      	movs	r3, #192	; 0xc0
 80021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021d8:	2302      	movs	r3, #2
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <HAL_TIM_MspPostInit+0xc0>)
 80021e4:	f003 f972 	bl	80054cc <HAL_GPIO_Init>
}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	58024400 	.word	0x58024400
 80021f4:	58020000 	.word	0x58020000
 80021f8:	40000400 	.word	0x40000400
 80021fc:	58020800 	.word	0x58020800

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <NMI_Handler+0x4>

08002206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler+0x4>

08002212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <BusFault_Handler+0x4>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <UsageFault_Handler+0x4>

0800221e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224c:	f000 f9a2 	bl	8002594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <DMA1_Stream0_IRQHandler+0x10>)
 800225a:	f001 fe25 	bl	8003ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	240002e4 	.word	0x240002e4

08002268 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <DMA1_Stream1_IRQHandler+0x10>)
 800226e:	f001 fe1b 	bl	8003ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2400035c 	.word	0x2400035c

0800227c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <TIM5_IRQHandler+0x10>)
 8002282:	f007 fa3d 	bl	8009700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2400046c 	.word	0x2400046c

08002290 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <UART5_IRQHandler+0x10>)
 8002296:	f008 febd 	bl	800b014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	240001bc 	.word	0x240001bc

080022a4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <UART7_IRQHandler+0x10>)
 80022aa:	f008 feb3 	bl	800b014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	24000250 	.word	0x24000250

080022b8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <TIM15_IRQHandler+0x10>)
 80022be:	f007 fa1f 	bl	8009700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	240004b8 	.word	0x240004b8

080022cc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <TIM16_IRQHandler+0x10>)
 80022d2:	f007 fa15 	bl	8009700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	24000504 	.word	0x24000504

080022e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e8:	4a14      	ldr	r2, [pc, #80]	; (800233c <_sbrk+0x5c>)
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <_sbrk+0x60>)
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <_sbrk+0x64>)
 80022fe:	4a12      	ldr	r2, [pc, #72]	; (8002348 <_sbrk+0x68>)
 8002300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	429a      	cmp	r2, r3
 800230e:	d207      	bcs.n	8002320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002310:	f00a fd42 	bl	800cd98 <__errno>
 8002314:	4603      	mov	r3, r0
 8002316:	220c      	movs	r2, #12
 8002318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800231e:	e009      	b.n	8002334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <_sbrk+0x64>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <_sbrk+0x64>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <_sbrk+0x64>)
 8002330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002332:	68fb      	ldr	r3, [r7, #12]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	24080000 	.word	0x24080000
 8002340:	00000400 	.word	0x00000400
 8002344:	240005e8 	.word	0x240005e8
 8002348:	24000738 	.word	0x24000738

0800234c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002350:	4b37      	ldr	r3, [pc, #220]	; (8002430 <SystemInit+0xe4>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	4a36      	ldr	r2, [pc, #216]	; (8002430 <SystemInit+0xe4>)
 8002358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800235c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002360:	4b34      	ldr	r3, [pc, #208]	; (8002434 <SystemInit+0xe8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	2b06      	cmp	r3, #6
 800236a:	d807      	bhi.n	800237c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800236c:	4b31      	ldr	r3, [pc, #196]	; (8002434 <SystemInit+0xe8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 030f 	bic.w	r3, r3, #15
 8002374:	4a2f      	ldr	r2, [pc, #188]	; (8002434 <SystemInit+0xe8>)
 8002376:	f043 0307 	orr.w	r3, r3, #7
 800237a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800237c:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <SystemInit+0xec>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2d      	ldr	r2, [pc, #180]	; (8002438 <SystemInit+0xec>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002388:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <SystemInit+0xec>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800238e:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <SystemInit+0xec>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4929      	ldr	r1, [pc, #164]	; (8002438 <SystemInit+0xec>)
 8002394:	4b29      	ldr	r3, [pc, #164]	; (800243c <SystemInit+0xf0>)
 8002396:	4013      	ands	r3, r2
 8002398:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <SystemInit+0xe8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023a6:	4b23      	ldr	r3, [pc, #140]	; (8002434 <SystemInit+0xe8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 030f 	bic.w	r3, r3, #15
 80023ae:	4a21      	ldr	r2, [pc, #132]	; (8002434 <SystemInit+0xe8>)
 80023b0:	f043 0307 	orr.w	r3, r3, #7
 80023b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <SystemInit+0xec>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <SystemInit+0xec>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <SystemInit+0xec>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <SystemInit+0xec>)
 80023ca:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <SystemInit+0xf4>)
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <SystemInit+0xec>)
 80023d0:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <SystemInit+0xf8>)
 80023d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <SystemInit+0xec>)
 80023d6:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <SystemInit+0xfc>)
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <SystemInit+0xec>)
 80023dc:	2200      	movs	r2, #0
 80023de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <SystemInit+0xec>)
 80023e2:	4a19      	ldr	r2, [pc, #100]	; (8002448 <SystemInit+0xfc>)
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <SystemInit+0xec>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <SystemInit+0xec>)
 80023ee:	4a16      	ldr	r2, [pc, #88]	; (8002448 <SystemInit+0xfc>)
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <SystemInit+0xec>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <SystemInit+0xec>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <SystemInit+0xec>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002402:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <SystemInit+0xec>)
 8002406:	2200      	movs	r2, #0
 8002408:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <SystemInit+0x100>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <SystemInit+0x104>)
 8002410:	4013      	ands	r3, r2
 8002412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002416:	d202      	bcs.n	800241e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <SystemInit+0x108>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <SystemInit+0x10c>)
 8002420:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002424:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00
 8002434:	52002000 	.word	0x52002000
 8002438:	58024400 	.word	0x58024400
 800243c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002440:	02020200 	.word	0x02020200
 8002444:	01ff0000 	.word	0x01ff0000
 8002448:	01010280 	.word	0x01010280
 800244c:	5c001000 	.word	0x5c001000
 8002450:	ffff0000 	.word	0xffff0000
 8002454:	51008108 	.word	0x51008108
 8002458:	52004000 	.word	0x52004000

0800245c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800245c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002494 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002460:	f7ff ff74 	bl	800234c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002464:	480c      	ldr	r0, [pc, #48]	; (8002498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002466:	490d      	ldr	r1, [pc, #52]	; (800249c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002468:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800246c:	e002      	b.n	8002474 <LoopCopyDataInit>

0800246e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002472:	3304      	adds	r3, #4

08002474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002478:	d3f9      	bcc.n	800246e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800247c:	4c0a      	ldr	r4, [pc, #40]	; (80024a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002480:	e001      	b.n	8002486 <LoopFillZerobss>

08002482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002484:	3204      	adds	r2, #4

08002486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002488:	d3fb      	bcc.n	8002482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800248a:	f00a fc8b 	bl	800cda4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248e:	f7fe f8f5 	bl	800067c <main>
  bx  lr
 8002492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002494:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002498:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800249c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80024a0:	0800d898 	.word	0x0800d898
  ldr r2, =_sbss
 80024a4:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80024a8:	24000738 	.word	0x24000738

080024ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024ac:	e7fe      	b.n	80024ac <ADC3_IRQHandler>
	...

080024b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b6:	2003      	movs	r0, #3
 80024b8:	f000 f98c 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024bc:	f004 faca 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_Init+0x68>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	4913      	ldr	r1, [pc, #76]	; (800251c <HAL_Init+0x6c>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
 80024d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <HAL_Init+0x68>)
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	4a0e      	ldr	r2, [pc, #56]	; (800251c <HAL_Init+0x6c>)
 80024e4:	5cd3      	ldrb	r3, [r2, r3]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
 80024f0:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <HAL_Init+0x70>)
 80024f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024f4:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <HAL_Init+0x74>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024fa:	200f      	movs	r0, #15
 80024fc:	f000 f814 	bl	8002528 <HAL_InitTick>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e002      	b.n	8002510 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800250a:	f7ff fae7 	bl	8001adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	58024400 	.word	0x58024400
 800251c:	0800d814 	.word	0x0800d814
 8002520:	24000008 	.word	0x24000008
 8002524:	24000004 	.word	0x24000004

08002528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_InitTick+0x60>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e021      	b.n	8002580 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_InitTick+0x64>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_InitTick+0x60>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254a:	fbb3 f3f1 	udiv	r3, r3, r1
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f971 	bl	800283a <HAL_SYSTICK_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e00e      	b.n	8002580 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b0f      	cmp	r3, #15
 8002566:	d80a      	bhi.n	800257e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002568:	2200      	movs	r2, #0
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002570:	f000 f93b 	bl	80027ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002574:	4a06      	ldr	r2, [pc, #24]	; (8002590 <HAL_InitTick+0x68>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	24000010 	.word	0x24000010
 800258c:	24000004 	.word	0x24000004
 8002590:	2400000c 	.word	0x2400000c

08002594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x20>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_IncTick+0x24>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_IncTick+0x24>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	24000010 	.word	0x24000010
 80025b8:	240005ec 	.word	0x240005ec

080025bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return uwTick;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_GetTick+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	240005ec 	.word	0x240005ec

080025d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff ffee 	bl	80025bc <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ec:	d005      	beq.n	80025fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_Delay+0x44>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4413      	add	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025fa:	bf00      	nop
 80025fc:	f7ff ffde 	bl	80025bc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d8f7      	bhi.n	80025fc <HAL_Delay+0x28>
  {
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	24000010 	.word	0x24000010

0800261c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <HAL_GetREVID+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0c1b      	lsrs	r3, r3, #16
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	5c001000 	.word	0x5c001000

08002634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <__NVIC_SetPriorityGrouping+0x40>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	4313      	orrs	r3, r2
 8002660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <__NVIC_SetPriorityGrouping+0x40>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60d3      	str	r3, [r2, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00
 8002678:	05fa0000 	.word	0x05fa0000

0800267c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <__NVIC_GetPriorityGrouping+0x18>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f003 0307 	and.w	r3, r3, #7
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	db0b      	blt.n	80026c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	4907      	ldr	r1, [pc, #28]	; (80026d0 <__NVIC_EnableIRQ+0x38>)
 80026b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2001      	movs	r0, #1
 80026ba:	fa00 f202 	lsl.w	r2, r0, r2
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000e100 	.word	0xe000e100

080026d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	db0a      	blt.n	80026fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	490c      	ldr	r1, [pc, #48]	; (8002720 <__NVIC_SetPriority+0x4c>)
 80026ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f2:	0112      	lsls	r2, r2, #4
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	440b      	add	r3, r1
 80026f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026fc:	e00a      	b.n	8002714 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4908      	ldr	r1, [pc, #32]	; (8002724 <__NVIC_SetPriority+0x50>)
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	3b04      	subs	r3, #4
 800270c:	0112      	lsls	r2, r2, #4
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	440b      	add	r3, r1
 8002712:	761a      	strb	r2, [r3, #24]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000e100 	.word	0xe000e100
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f1c3 0307 	rsb	r3, r3, #7
 8002742:	2b04      	cmp	r3, #4
 8002744:	bf28      	it	cs
 8002746:	2304      	movcs	r3, #4
 8002748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3304      	adds	r3, #4
 800274e:	2b06      	cmp	r3, #6
 8002750:	d902      	bls.n	8002758 <NVIC_EncodePriority+0x30>
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3b03      	subs	r3, #3
 8002756:	e000      	b.n	800275a <NVIC_EncodePriority+0x32>
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43da      	mvns	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	401a      	ands	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	43d9      	mvns	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002780:	4313      	orrs	r3, r2
         );
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	; 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a0:	d301      	bcc.n	80027a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00f      	b.n	80027c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <SysTick_Config+0x40>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ae:	210f      	movs	r1, #15
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027b4:	f7ff ff8e 	bl	80026d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <SysTick_Config+0x40>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <SysTick_Config+0x40>)
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	e000e010 	.word	0xe000e010

080027d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff29 	bl	8002634 <__NVIC_SetPriorityGrouping>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027f8:	f7ff ff40 	bl	800267c <__NVIC_GetPriorityGrouping>
 80027fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7ff ff90 	bl	8002728 <NVIC_EncodePriority>
 8002808:	4602      	mov	r2, r0
 800280a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff5f 	bl	80026d4 <__NVIC_SetPriority>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff33 	bl	8002698 <__NVIC_EnableIRQ>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ffa4 	bl	8002790 <SysTick_Config>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff feae 	bl	80025bc <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e316      	b.n	8002e9a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a66      	ldr	r2, [pc, #408]	; (8002a0c <HAL_DMA_Init+0x1b8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d04a      	beq.n	800290c <HAL_DMA_Init+0xb8>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a65      	ldr	r2, [pc, #404]	; (8002a10 <HAL_DMA_Init+0x1bc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d045      	beq.n	800290c <HAL_DMA_Init+0xb8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a63      	ldr	r2, [pc, #396]	; (8002a14 <HAL_DMA_Init+0x1c0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d040      	beq.n	800290c <HAL_DMA_Init+0xb8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a62      	ldr	r2, [pc, #392]	; (8002a18 <HAL_DMA_Init+0x1c4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d03b      	beq.n	800290c <HAL_DMA_Init+0xb8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a60      	ldr	r2, [pc, #384]	; (8002a1c <HAL_DMA_Init+0x1c8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d036      	beq.n	800290c <HAL_DMA_Init+0xb8>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a5f      	ldr	r2, [pc, #380]	; (8002a20 <HAL_DMA_Init+0x1cc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d031      	beq.n	800290c <HAL_DMA_Init+0xb8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a5d      	ldr	r2, [pc, #372]	; (8002a24 <HAL_DMA_Init+0x1d0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02c      	beq.n	800290c <HAL_DMA_Init+0xb8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a5c      	ldr	r2, [pc, #368]	; (8002a28 <HAL_DMA_Init+0x1d4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d027      	beq.n	800290c <HAL_DMA_Init+0xb8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a5a      	ldr	r2, [pc, #360]	; (8002a2c <HAL_DMA_Init+0x1d8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d022      	beq.n	800290c <HAL_DMA_Init+0xb8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a59      	ldr	r2, [pc, #356]	; (8002a30 <HAL_DMA_Init+0x1dc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d01d      	beq.n	800290c <HAL_DMA_Init+0xb8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <HAL_DMA_Init+0x1e0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d018      	beq.n	800290c <HAL_DMA_Init+0xb8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a56      	ldr	r2, [pc, #344]	; (8002a38 <HAL_DMA_Init+0x1e4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <HAL_DMA_Init+0xb8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a54      	ldr	r2, [pc, #336]	; (8002a3c <HAL_DMA_Init+0x1e8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00e      	beq.n	800290c <HAL_DMA_Init+0xb8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a53      	ldr	r2, [pc, #332]	; (8002a40 <HAL_DMA_Init+0x1ec>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_DMA_Init+0xb8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a51      	ldr	r2, [pc, #324]	; (8002a44 <HAL_DMA_Init+0x1f0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_DMA_Init+0xb8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a50      	ldr	r2, [pc, #320]	; (8002a48 <HAL_DMA_Init+0x1f4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d101      	bne.n	8002910 <HAL_DMA_Init+0xbc>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_DMA_Init+0xbe>
 8002910:	2300      	movs	r3, #0
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 813b 	beq.w	8002b8e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a37      	ldr	r2, [pc, #220]	; (8002a0c <HAL_DMA_Init+0x1b8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d04a      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a36      	ldr	r2, [pc, #216]	; (8002a10 <HAL_DMA_Init+0x1bc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d045      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a34      	ldr	r2, [pc, #208]	; (8002a14 <HAL_DMA_Init+0x1c0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d040      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a33      	ldr	r2, [pc, #204]	; (8002a18 <HAL_DMA_Init+0x1c4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d03b      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a31      	ldr	r2, [pc, #196]	; (8002a1c <HAL_DMA_Init+0x1c8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d036      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a30      	ldr	r2, [pc, #192]	; (8002a20 <HAL_DMA_Init+0x1cc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d031      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2e      	ldr	r2, [pc, #184]	; (8002a24 <HAL_DMA_Init+0x1d0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d02c      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2d      	ldr	r2, [pc, #180]	; (8002a28 <HAL_DMA_Init+0x1d4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d027      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2b      	ldr	r2, [pc, #172]	; (8002a2c <HAL_DMA_Init+0x1d8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d022      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a2a      	ldr	r2, [pc, #168]	; (8002a30 <HAL_DMA_Init+0x1dc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d01d      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a28      	ldr	r2, [pc, #160]	; (8002a34 <HAL_DMA_Init+0x1e0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d018      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a27      	ldr	r2, [pc, #156]	; (8002a38 <HAL_DMA_Init+0x1e4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d013      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <HAL_DMA_Init+0x1e8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00e      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <HAL_DMA_Init+0x1ec>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <HAL_DMA_Init+0x1f0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d004      	beq.n	80029c8 <HAL_DMA_Init+0x174>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a21      	ldr	r2, [pc, #132]	; (8002a48 <HAL_DMA_Init+0x1f4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d108      	bne.n	80029da <HAL_DMA_Init+0x186>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	e007      	b.n	80029ea <HAL_DMA_Init+0x196>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80029ea:	e02f      	b.n	8002a4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ec:	f7ff fde6 	bl	80025bc <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d928      	bls.n	8002a4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2203      	movs	r2, #3
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e246      	b.n	8002e9a <HAL_DMA_Init+0x646>
 8002a0c:	40020010 	.word	0x40020010
 8002a10:	40020028 	.word	0x40020028
 8002a14:	40020040 	.word	0x40020040
 8002a18:	40020058 	.word	0x40020058
 8002a1c:	40020070 	.word	0x40020070
 8002a20:	40020088 	.word	0x40020088
 8002a24:	400200a0 	.word	0x400200a0
 8002a28:	400200b8 	.word	0x400200b8
 8002a2c:	40020410 	.word	0x40020410
 8002a30:	40020428 	.word	0x40020428
 8002a34:	40020440 	.word	0x40020440
 8002a38:	40020458 	.word	0x40020458
 8002a3c:	40020470 	.word	0x40020470
 8002a40:	40020488 	.word	0x40020488
 8002a44:	400204a0 	.word	0x400204a0
 8002a48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1c8      	bne.n	80029ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4b83      	ldr	r3, [pc, #524]	; (8002c74 <HAL_DMA_Init+0x420>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002a72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d107      	bne.n	8002ab0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ab0:	4b71      	ldr	r3, [pc, #452]	; (8002c78 <HAL_DMA_Init+0x424>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b71      	ldr	r3, [pc, #452]	; (8002c7c <HAL_DMA_Init+0x428>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002abc:	d328      	bcc.n	8002b10 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b28      	cmp	r3, #40	; 0x28
 8002ac4:	d903      	bls.n	8002ace <HAL_DMA_Init+0x27a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b2e      	cmp	r3, #46	; 0x2e
 8002acc:	d917      	bls.n	8002afe <HAL_DMA_Init+0x2aa>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ad4:	d903      	bls.n	8002ade <HAL_DMA_Init+0x28a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b42      	cmp	r3, #66	; 0x42
 8002adc:	d90f      	bls.n	8002afe <HAL_DMA_Init+0x2aa>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b46      	cmp	r3, #70	; 0x46
 8002ae4:	d903      	bls.n	8002aee <HAL_DMA_Init+0x29a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b48      	cmp	r3, #72	; 0x48
 8002aec:	d907      	bls.n	8002afe <HAL_DMA_Init+0x2aa>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b4e      	cmp	r3, #78	; 0x4e
 8002af4:	d905      	bls.n	8002b02 <HAL_DMA_Init+0x2ae>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b52      	cmp	r3, #82	; 0x52
 8002afc:	d801      	bhi.n	8002b02 <HAL_DMA_Init+0x2ae>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_DMA_Init+0x2b0>
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f023 0307 	bic.w	r3, r3, #7
 8002b26:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d117      	bne.n	8002b6a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f002 fb33 	bl	80051b8 <DMA_CheckFifoParam>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2240      	movs	r2, #64	; 0x40
 8002b5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e197      	b.n	8002e9a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f002 fa6e 	bl	8005054 <DMA_CalcBaseAndBitshift>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	223f      	movs	r2, #63	; 0x3f
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	e0cd      	b.n	8002d2a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3b      	ldr	r2, [pc, #236]	; (8002c80 <HAL_DMA_Init+0x42c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <HAL_DMA_Init+0x38a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a39      	ldr	r2, [pc, #228]	; (8002c84 <HAL_DMA_Init+0x430>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01d      	beq.n	8002bde <HAL_DMA_Init+0x38a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a38      	ldr	r2, [pc, #224]	; (8002c88 <HAL_DMA_Init+0x434>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d018      	beq.n	8002bde <HAL_DMA_Init+0x38a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a36      	ldr	r2, [pc, #216]	; (8002c8c <HAL_DMA_Init+0x438>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_DMA_Init+0x38a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a35      	ldr	r2, [pc, #212]	; (8002c90 <HAL_DMA_Init+0x43c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00e      	beq.n	8002bde <HAL_DMA_Init+0x38a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a33      	ldr	r2, [pc, #204]	; (8002c94 <HAL_DMA_Init+0x440>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d009      	beq.n	8002bde <HAL_DMA_Init+0x38a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a32      	ldr	r2, [pc, #200]	; (8002c98 <HAL_DMA_Init+0x444>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_DMA_Init+0x38a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a30      	ldr	r2, [pc, #192]	; (8002c9c <HAL_DMA_Init+0x448>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_DMA_Init+0x38e>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_DMA_Init+0x390>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8097 	beq.w	8002d18 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <HAL_DMA_Init+0x42c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d021      	beq.n	8002c38 <HAL_DMA_Init+0x3e4>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_DMA_Init+0x430>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01c      	beq.n	8002c38 <HAL_DMA_Init+0x3e4>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <HAL_DMA_Init+0x434>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d017      	beq.n	8002c38 <HAL_DMA_Init+0x3e4>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <HAL_DMA_Init+0x438>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d012      	beq.n	8002c38 <HAL_DMA_Init+0x3e4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <HAL_DMA_Init+0x43c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00d      	beq.n	8002c38 <HAL_DMA_Init+0x3e4>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <HAL_DMA_Init+0x440>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d008      	beq.n	8002c38 <HAL_DMA_Init+0x3e4>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <HAL_DMA_Init+0x444>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d003      	beq.n	8002c38 <HAL_DMA_Init+0x3e4>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <HAL_DMA_Init+0x448>)
 8002c36:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_DMA_Init+0x44c>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d021      	beq.n	8002ca4 <HAL_DMA_Init+0x450>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d102      	bne.n	8002c6e <HAL_DMA_Init+0x41a>
 8002c68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c6c:	e01b      	b.n	8002ca6 <HAL_DMA_Init+0x452>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e019      	b.n	8002ca6 <HAL_DMA_Init+0x452>
 8002c72:	bf00      	nop
 8002c74:	fe10803f 	.word	0xfe10803f
 8002c78:	5c001000 	.word	0x5c001000
 8002c7c:	ffff0000 	.word	0xffff0000
 8002c80:	58025408 	.word	0x58025408
 8002c84:	5802541c 	.word	0x5802541c
 8002c88:	58025430 	.word	0x58025430
 8002c8c:	58025444 	.word	0x58025444
 8002c90:	58025458 	.word	0x58025458
 8002c94:	5802546c 	.word	0x5802546c
 8002c98:	58025480 	.word	0x58025480
 8002c9c:	58025494 	.word	0x58025494
 8002ca0:	fffe000f 	.word	0xfffe000f
 8002ca4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68d2      	ldr	r2, [r2, #12]
 8002caa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002cb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002cbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002cc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ccc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002cd4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b6e      	ldr	r3, [pc, #440]	; (8002ea4 <HAL_DMA_Init+0x650>)
 8002cec:	4413      	add	r3, r2
 8002cee:	4a6e      	ldr	r2, [pc, #440]	; (8002ea8 <HAL_DMA_Init+0x654>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f002 f9a9 	bl	8005054 <DMA_CalcBaseAndBitshift>
 8002d02:	4603      	mov	r3, r0
 8002d04:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	2201      	movs	r2, #1
 8002d10:	409a      	lsls	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	e008      	b.n	8002d2a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2240      	movs	r2, #64	; 0x40
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2203      	movs	r2, #3
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0b7      	b.n	8002e9a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a5f      	ldr	r2, [pc, #380]	; (8002eac <HAL_DMA_Init+0x658>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d072      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a5d      	ldr	r2, [pc, #372]	; (8002eb0 <HAL_DMA_Init+0x65c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d06d      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a5c      	ldr	r2, [pc, #368]	; (8002eb4 <HAL_DMA_Init+0x660>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d068      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a5a      	ldr	r2, [pc, #360]	; (8002eb8 <HAL_DMA_Init+0x664>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d063      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a59      	ldr	r2, [pc, #356]	; (8002ebc <HAL_DMA_Init+0x668>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d05e      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_DMA_Init+0x66c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d059      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a56      	ldr	r2, [pc, #344]	; (8002ec4 <HAL_DMA_Init+0x670>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d054      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a54      	ldr	r2, [pc, #336]	; (8002ec8 <HAL_DMA_Init+0x674>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d04f      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a53      	ldr	r2, [pc, #332]	; (8002ecc <HAL_DMA_Init+0x678>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d04a      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a51      	ldr	r2, [pc, #324]	; (8002ed0 <HAL_DMA_Init+0x67c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d045      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a50      	ldr	r2, [pc, #320]	; (8002ed4 <HAL_DMA_Init+0x680>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d040      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a4e      	ldr	r2, [pc, #312]	; (8002ed8 <HAL_DMA_Init+0x684>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d03b      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a4d      	ldr	r2, [pc, #308]	; (8002edc <HAL_DMA_Init+0x688>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d036      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a4b      	ldr	r2, [pc, #300]	; (8002ee0 <HAL_DMA_Init+0x68c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d031      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a4a      	ldr	r2, [pc, #296]	; (8002ee4 <HAL_DMA_Init+0x690>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d02c      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a48      	ldr	r2, [pc, #288]	; (8002ee8 <HAL_DMA_Init+0x694>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d027      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a47      	ldr	r2, [pc, #284]	; (8002eec <HAL_DMA_Init+0x698>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d022      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a45      	ldr	r2, [pc, #276]	; (8002ef0 <HAL_DMA_Init+0x69c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01d      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a44      	ldr	r2, [pc, #272]	; (8002ef4 <HAL_DMA_Init+0x6a0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d018      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a42      	ldr	r2, [pc, #264]	; (8002ef8 <HAL_DMA_Init+0x6a4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a41      	ldr	r2, [pc, #260]	; (8002efc <HAL_DMA_Init+0x6a8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a3f      	ldr	r2, [pc, #252]	; (8002f00 <HAL_DMA_Init+0x6ac>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d009      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a3e      	ldr	r2, [pc, #248]	; (8002f04 <HAL_DMA_Init+0x6b0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_DMA_Init+0x5c6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a3c      	ldr	r2, [pc, #240]	; (8002f08 <HAL_DMA_Init+0x6b4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_DMA_Init+0x5ca>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_DMA_Init+0x5cc>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d032      	beq.n	8002e8a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f002 fa43 	bl	80052b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b80      	cmp	r3, #128	; 0x80
 8002e30:	d102      	bne.n	8002e38 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e4c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d010      	beq.n	8002e78 <HAL_DMA_Init+0x624>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d80c      	bhi.n	8002e78 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f002 fac0 	bl	80053e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	e008      	b.n	8002e8a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	a7fdabf8 	.word	0xa7fdabf8
 8002ea8:	cccccccd 	.word	0xcccccccd
 8002eac:	40020010 	.word	0x40020010
 8002eb0:	40020028 	.word	0x40020028
 8002eb4:	40020040 	.word	0x40020040
 8002eb8:	40020058 	.word	0x40020058
 8002ebc:	40020070 	.word	0x40020070
 8002ec0:	40020088 	.word	0x40020088
 8002ec4:	400200a0 	.word	0x400200a0
 8002ec8:	400200b8 	.word	0x400200b8
 8002ecc:	40020410 	.word	0x40020410
 8002ed0:	40020428 	.word	0x40020428
 8002ed4:	40020440 	.word	0x40020440
 8002ed8:	40020458 	.word	0x40020458
 8002edc:	40020470 	.word	0x40020470
 8002ee0:	40020488 	.word	0x40020488
 8002ee4:	400204a0 	.word	0x400204a0
 8002ee8:	400204b8 	.word	0x400204b8
 8002eec:	58025408 	.word	0x58025408
 8002ef0:	5802541c 	.word	0x5802541c
 8002ef4:	58025430 	.word	0x58025430
 8002ef8:	58025444 	.word	0x58025444
 8002efc:	58025458 	.word	0x58025458
 8002f00:	5802546c 	.word	0x5802546c
 8002f04:	58025480 	.word	0x58025480
 8002f08:	58025494 	.word	0x58025494

08002f0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e226      	b.n	8003376 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_DMA_Start_IT+0x2a>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e21f      	b.n	8003376 <HAL_DMA_Start_IT+0x46a>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	f040 820a 	bne.w	8003360 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a68      	ldr	r2, [pc, #416]	; (8003100 <HAL_DMA_Start_IT+0x1f4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d04a      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a66      	ldr	r2, [pc, #408]	; (8003104 <HAL_DMA_Start_IT+0x1f8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d045      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a65      	ldr	r2, [pc, #404]	; (8003108 <HAL_DMA_Start_IT+0x1fc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d040      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a63      	ldr	r2, [pc, #396]	; (800310c <HAL_DMA_Start_IT+0x200>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d03b      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a62      	ldr	r2, [pc, #392]	; (8003110 <HAL_DMA_Start_IT+0x204>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d036      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a60      	ldr	r2, [pc, #384]	; (8003114 <HAL_DMA_Start_IT+0x208>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d031      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a5f      	ldr	r2, [pc, #380]	; (8003118 <HAL_DMA_Start_IT+0x20c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d02c      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a5d      	ldr	r2, [pc, #372]	; (800311c <HAL_DMA_Start_IT+0x210>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d027      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a5c      	ldr	r2, [pc, #368]	; (8003120 <HAL_DMA_Start_IT+0x214>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a5a      	ldr	r2, [pc, #360]	; (8003124 <HAL_DMA_Start_IT+0x218>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01d      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a59      	ldr	r2, [pc, #356]	; (8003128 <HAL_DMA_Start_IT+0x21c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d018      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a57      	ldr	r2, [pc, #348]	; (800312c <HAL_DMA_Start_IT+0x220>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d013      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a56      	ldr	r2, [pc, #344]	; (8003130 <HAL_DMA_Start_IT+0x224>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00e      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a54      	ldr	r2, [pc, #336]	; (8003134 <HAL_DMA_Start_IT+0x228>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d009      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a53      	ldr	r2, [pc, #332]	; (8003138 <HAL_DMA_Start_IT+0x22c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_DMA_Start_IT+0xee>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a51      	ldr	r2, [pc, #324]	; (800313c <HAL_DMA_Start_IT+0x230>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d108      	bne.n	800300c <HAL_DMA_Start_IT+0x100>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e007      	b.n	800301c <HAL_DMA_Start_IT+0x110>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f001 fe6a 	bl	8004cfc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a34      	ldr	r2, [pc, #208]	; (8003100 <HAL_DMA_Start_IT+0x1f4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d04a      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a33      	ldr	r2, [pc, #204]	; (8003104 <HAL_DMA_Start_IT+0x1f8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d045      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a31      	ldr	r2, [pc, #196]	; (8003108 <HAL_DMA_Start_IT+0x1fc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d040      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a30      	ldr	r2, [pc, #192]	; (800310c <HAL_DMA_Start_IT+0x200>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d03b      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2e      	ldr	r2, [pc, #184]	; (8003110 <HAL_DMA_Start_IT+0x204>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d036      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2d      	ldr	r2, [pc, #180]	; (8003114 <HAL_DMA_Start_IT+0x208>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d031      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2b      	ldr	r2, [pc, #172]	; (8003118 <HAL_DMA_Start_IT+0x20c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d02c      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a2a      	ldr	r2, [pc, #168]	; (800311c <HAL_DMA_Start_IT+0x210>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d027      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a28      	ldr	r2, [pc, #160]	; (8003120 <HAL_DMA_Start_IT+0x214>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d022      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a27      	ldr	r2, [pc, #156]	; (8003124 <HAL_DMA_Start_IT+0x218>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d01d      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a25      	ldr	r2, [pc, #148]	; (8003128 <HAL_DMA_Start_IT+0x21c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d018      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a24      	ldr	r2, [pc, #144]	; (800312c <HAL_DMA_Start_IT+0x220>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d013      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a22      	ldr	r2, [pc, #136]	; (8003130 <HAL_DMA_Start_IT+0x224>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00e      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a21      	ldr	r2, [pc, #132]	; (8003134 <HAL_DMA_Start_IT+0x228>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d009      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <HAL_DMA_Start_IT+0x22c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_DMA_Start_IT+0x1bc>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1e      	ldr	r2, [pc, #120]	; (800313c <HAL_DMA_Start_IT+0x230>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <HAL_DMA_Start_IT+0x1c0>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_DMA_Start_IT+0x1c2>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d036      	beq.n	8003140 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 021e 	bic.w	r2, r3, #30
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0216 	orr.w	r2, r2, #22
 80030e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d03e      	beq.n	800316c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0208 	orr.w	r2, r2, #8
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e035      	b.n	800316c <HAL_DMA_Start_IT+0x260>
 8003100:	40020010 	.word	0x40020010
 8003104:	40020028 	.word	0x40020028
 8003108:	40020040 	.word	0x40020040
 800310c:	40020058 	.word	0x40020058
 8003110:	40020070 	.word	0x40020070
 8003114:	40020088 	.word	0x40020088
 8003118:	400200a0 	.word	0x400200a0
 800311c:	400200b8 	.word	0x400200b8
 8003120:	40020410 	.word	0x40020410
 8003124:	40020428 	.word	0x40020428
 8003128:	40020440 	.word	0x40020440
 800312c:	40020458 	.word	0x40020458
 8003130:	40020470 	.word	0x40020470
 8003134:	40020488 	.word	0x40020488
 8003138:	400204a0 	.word	0x400204a0
 800313c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 020e 	bic.w	r2, r3, #14
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 020a 	orr.w	r2, r2, #10
 8003152:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0204 	orr.w	r2, r2, #4
 800316a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a83      	ldr	r2, [pc, #524]	; (8003380 <HAL_DMA_Start_IT+0x474>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d072      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a82      	ldr	r2, [pc, #520]	; (8003384 <HAL_DMA_Start_IT+0x478>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d06d      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a80      	ldr	r2, [pc, #512]	; (8003388 <HAL_DMA_Start_IT+0x47c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d068      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7f      	ldr	r2, [pc, #508]	; (800338c <HAL_DMA_Start_IT+0x480>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d063      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7d      	ldr	r2, [pc, #500]	; (8003390 <HAL_DMA_Start_IT+0x484>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d05e      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7c      	ldr	r2, [pc, #496]	; (8003394 <HAL_DMA_Start_IT+0x488>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d059      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a7a      	ldr	r2, [pc, #488]	; (8003398 <HAL_DMA_Start_IT+0x48c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d054      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a79      	ldr	r2, [pc, #484]	; (800339c <HAL_DMA_Start_IT+0x490>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d04f      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a77      	ldr	r2, [pc, #476]	; (80033a0 <HAL_DMA_Start_IT+0x494>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d04a      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a76      	ldr	r2, [pc, #472]	; (80033a4 <HAL_DMA_Start_IT+0x498>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d045      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a74      	ldr	r2, [pc, #464]	; (80033a8 <HAL_DMA_Start_IT+0x49c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d040      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a73      	ldr	r2, [pc, #460]	; (80033ac <HAL_DMA_Start_IT+0x4a0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d03b      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a71      	ldr	r2, [pc, #452]	; (80033b0 <HAL_DMA_Start_IT+0x4a4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d036      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a70      	ldr	r2, [pc, #448]	; (80033b4 <HAL_DMA_Start_IT+0x4a8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d031      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	; (80033b8 <HAL_DMA_Start_IT+0x4ac>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d02c      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <HAL_DMA_Start_IT+0x4b0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d027      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a6b      	ldr	r2, [pc, #428]	; (80033c0 <HAL_DMA_Start_IT+0x4b4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d022      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6a      	ldr	r2, [pc, #424]	; (80033c4 <HAL_DMA_Start_IT+0x4b8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d01d      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a68      	ldr	r2, [pc, #416]	; (80033c8 <HAL_DMA_Start_IT+0x4bc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d018      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a67      	ldr	r2, [pc, #412]	; (80033cc <HAL_DMA_Start_IT+0x4c0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d013      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a65      	ldr	r2, [pc, #404]	; (80033d0 <HAL_DMA_Start_IT+0x4c4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00e      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a64      	ldr	r2, [pc, #400]	; (80033d4 <HAL_DMA_Start_IT+0x4c8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a62      	ldr	r2, [pc, #392]	; (80033d8 <HAL_DMA_Start_IT+0x4cc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_DMA_Start_IT+0x350>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a61      	ldr	r2, [pc, #388]	; (80033dc <HAL_DMA_Start_IT+0x4d0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_DMA_Start_IT+0x354>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <HAL_DMA_Start_IT+0x356>
 8003260:	2300      	movs	r3, #0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01a      	beq.n	800329c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003282:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800329a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a37      	ldr	r2, [pc, #220]	; (8003380 <HAL_DMA_Start_IT+0x474>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d04a      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a36      	ldr	r2, [pc, #216]	; (8003384 <HAL_DMA_Start_IT+0x478>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d045      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a34      	ldr	r2, [pc, #208]	; (8003388 <HAL_DMA_Start_IT+0x47c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d040      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a33      	ldr	r2, [pc, #204]	; (800338c <HAL_DMA_Start_IT+0x480>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d03b      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a31      	ldr	r2, [pc, #196]	; (8003390 <HAL_DMA_Start_IT+0x484>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d036      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a30      	ldr	r2, [pc, #192]	; (8003394 <HAL_DMA_Start_IT+0x488>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d031      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2e      	ldr	r2, [pc, #184]	; (8003398 <HAL_DMA_Start_IT+0x48c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d02c      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2d      	ldr	r2, [pc, #180]	; (800339c <HAL_DMA_Start_IT+0x490>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d027      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <HAL_DMA_Start_IT+0x494>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d022      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <HAL_DMA_Start_IT+0x498>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01d      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a28      	ldr	r2, [pc, #160]	; (80033a8 <HAL_DMA_Start_IT+0x49c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d018      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a27      	ldr	r2, [pc, #156]	; (80033ac <HAL_DMA_Start_IT+0x4a0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d013      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <HAL_DMA_Start_IT+0x4a4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00e      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <HAL_DMA_Start_IT+0x4a8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d009      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <HAL_DMA_Start_IT+0x4ac>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_DMA_Start_IT+0x430>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a21      	ldr	r2, [pc, #132]	; (80033bc <HAL_DMA_Start_IT+0x4b0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d108      	bne.n	800334e <HAL_DMA_Start_IT+0x442>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e012      	b.n	8003374 <HAL_DMA_Start_IT+0x468>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e009      	b.n	8003374 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003366:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003374:	7dfb      	ldrb	r3, [r7, #23]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40020010 	.word	0x40020010
 8003384:	40020028 	.word	0x40020028
 8003388:	40020040 	.word	0x40020040
 800338c:	40020058 	.word	0x40020058
 8003390:	40020070 	.word	0x40020070
 8003394:	40020088 	.word	0x40020088
 8003398:	400200a0 	.word	0x400200a0
 800339c:	400200b8 	.word	0x400200b8
 80033a0:	40020410 	.word	0x40020410
 80033a4:	40020428 	.word	0x40020428
 80033a8:	40020440 	.word	0x40020440
 80033ac:	40020458 	.word	0x40020458
 80033b0:	40020470 	.word	0x40020470
 80033b4:	40020488 	.word	0x40020488
 80033b8:	400204a0 	.word	0x400204a0
 80033bc:	400204b8 	.word	0x400204b8
 80033c0:	58025408 	.word	0x58025408
 80033c4:	5802541c 	.word	0x5802541c
 80033c8:	58025430 	.word	0x58025430
 80033cc:	58025444 	.word	0x58025444
 80033d0:	58025458 	.word	0x58025458
 80033d4:	5802546c 	.word	0x5802546c
 80033d8:	58025480 	.word	0x58025480
 80033dc:	58025494 	.word	0x58025494

080033e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80033e8:	f7ff f8e8 	bl	80025bc <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e2dc      	b.n	80039b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d008      	beq.n	8003416 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e2cd      	b.n	80039b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a76      	ldr	r2, [pc, #472]	; (80035f4 <HAL_DMA_Abort+0x214>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d04a      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a74      	ldr	r2, [pc, #464]	; (80035f8 <HAL_DMA_Abort+0x218>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d045      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a73      	ldr	r2, [pc, #460]	; (80035fc <HAL_DMA_Abort+0x21c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d040      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a71      	ldr	r2, [pc, #452]	; (8003600 <HAL_DMA_Abort+0x220>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d03b      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a70      	ldr	r2, [pc, #448]	; (8003604 <HAL_DMA_Abort+0x224>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d036      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a6e      	ldr	r2, [pc, #440]	; (8003608 <HAL_DMA_Abort+0x228>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d031      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6d      	ldr	r2, [pc, #436]	; (800360c <HAL_DMA_Abort+0x22c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d02c      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6b      	ldr	r2, [pc, #428]	; (8003610 <HAL_DMA_Abort+0x230>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d027      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6a      	ldr	r2, [pc, #424]	; (8003614 <HAL_DMA_Abort+0x234>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a68      	ldr	r2, [pc, #416]	; (8003618 <HAL_DMA_Abort+0x238>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01d      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a67      	ldr	r2, [pc, #412]	; (800361c <HAL_DMA_Abort+0x23c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d018      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a65      	ldr	r2, [pc, #404]	; (8003620 <HAL_DMA_Abort+0x240>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a64      	ldr	r2, [pc, #400]	; (8003624 <HAL_DMA_Abort+0x244>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00e      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a62      	ldr	r2, [pc, #392]	; (8003628 <HAL_DMA_Abort+0x248>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a61      	ldr	r2, [pc, #388]	; (800362c <HAL_DMA_Abort+0x24c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_DMA_Abort+0xd6>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a5f      	ldr	r2, [pc, #380]	; (8003630 <HAL_DMA_Abort+0x250>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_DMA_Abort+0xda>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_DMA_Abort+0xdc>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d013      	beq.n	80034e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 021e 	bic.w	r2, r2, #30
 80034ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e00a      	b.n	80034fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 020e 	bic.w	r2, r2, #14
 80034f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a3c      	ldr	r2, [pc, #240]	; (80035f4 <HAL_DMA_Abort+0x214>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d072      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a3a      	ldr	r2, [pc, #232]	; (80035f8 <HAL_DMA_Abort+0x218>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d06d      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a39      	ldr	r2, [pc, #228]	; (80035fc <HAL_DMA_Abort+0x21c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d068      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a37      	ldr	r2, [pc, #220]	; (8003600 <HAL_DMA_Abort+0x220>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d063      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a36      	ldr	r2, [pc, #216]	; (8003604 <HAL_DMA_Abort+0x224>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d05e      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a34      	ldr	r2, [pc, #208]	; (8003608 <HAL_DMA_Abort+0x228>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d059      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a33      	ldr	r2, [pc, #204]	; (800360c <HAL_DMA_Abort+0x22c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d054      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a31      	ldr	r2, [pc, #196]	; (8003610 <HAL_DMA_Abort+0x230>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d04f      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a30      	ldr	r2, [pc, #192]	; (8003614 <HAL_DMA_Abort+0x234>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d04a      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2e      	ldr	r2, [pc, #184]	; (8003618 <HAL_DMA_Abort+0x238>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d045      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a2d      	ldr	r2, [pc, #180]	; (800361c <HAL_DMA_Abort+0x23c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d040      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <HAL_DMA_Abort+0x240>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d03b      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2a      	ldr	r2, [pc, #168]	; (8003624 <HAL_DMA_Abort+0x244>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d036      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a28      	ldr	r2, [pc, #160]	; (8003628 <HAL_DMA_Abort+0x248>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d031      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_DMA_Abort+0x24c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d02c      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a25      	ldr	r2, [pc, #148]	; (8003630 <HAL_DMA_Abort+0x250>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d027      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a24      	ldr	r2, [pc, #144]	; (8003634 <HAL_DMA_Abort+0x254>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a22      	ldr	r2, [pc, #136]	; (8003638 <HAL_DMA_Abort+0x258>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01d      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a21      	ldr	r2, [pc, #132]	; (800363c <HAL_DMA_Abort+0x25c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d018      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1f      	ldr	r2, [pc, #124]	; (8003640 <HAL_DMA_Abort+0x260>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1e      	ldr	r2, [pc, #120]	; (8003644 <HAL_DMA_Abort+0x264>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00e      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_DMA_Abort+0x268>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1b      	ldr	r2, [pc, #108]	; (800364c <HAL_DMA_Abort+0x26c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_DMA_Abort+0x20e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a19      	ldr	r2, [pc, #100]	; (8003650 <HAL_DMA_Abort+0x270>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d132      	bne.n	8003654 <HAL_DMA_Abort+0x274>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e031      	b.n	8003656 <HAL_DMA_Abort+0x276>
 80035f2:	bf00      	nop
 80035f4:	40020010 	.word	0x40020010
 80035f8:	40020028 	.word	0x40020028
 80035fc:	40020040 	.word	0x40020040
 8003600:	40020058 	.word	0x40020058
 8003604:	40020070 	.word	0x40020070
 8003608:	40020088 	.word	0x40020088
 800360c:	400200a0 	.word	0x400200a0
 8003610:	400200b8 	.word	0x400200b8
 8003614:	40020410 	.word	0x40020410
 8003618:	40020428 	.word	0x40020428
 800361c:	40020440 	.word	0x40020440
 8003620:	40020458 	.word	0x40020458
 8003624:	40020470 	.word	0x40020470
 8003628:	40020488 	.word	0x40020488
 800362c:	400204a0 	.word	0x400204a0
 8003630:	400204b8 	.word	0x400204b8
 8003634:	58025408 	.word	0x58025408
 8003638:	5802541c 	.word	0x5802541c
 800363c:	58025430 	.word	0x58025430
 8003640:	58025444 	.word	0x58025444
 8003644:	58025458 	.word	0x58025458
 8003648:	5802546c 	.word	0x5802546c
 800364c:	58025480 	.word	0x58025480
 8003650:	58025494 	.word	0x58025494
 8003654:	2300      	movs	r3, #0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003668:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a6d      	ldr	r2, [pc, #436]	; (8003824 <HAL_DMA_Abort+0x444>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04a      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a6b      	ldr	r2, [pc, #428]	; (8003828 <HAL_DMA_Abort+0x448>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d045      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6a      	ldr	r2, [pc, #424]	; (800382c <HAL_DMA_Abort+0x44c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d040      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a68      	ldr	r2, [pc, #416]	; (8003830 <HAL_DMA_Abort+0x450>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d03b      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a67      	ldr	r2, [pc, #412]	; (8003834 <HAL_DMA_Abort+0x454>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d036      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a65      	ldr	r2, [pc, #404]	; (8003838 <HAL_DMA_Abort+0x458>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d031      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a64      	ldr	r2, [pc, #400]	; (800383c <HAL_DMA_Abort+0x45c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d02c      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a62      	ldr	r2, [pc, #392]	; (8003840 <HAL_DMA_Abort+0x460>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d027      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a61      	ldr	r2, [pc, #388]	; (8003844 <HAL_DMA_Abort+0x464>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a5f      	ldr	r2, [pc, #380]	; (8003848 <HAL_DMA_Abort+0x468>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01d      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a5e      	ldr	r2, [pc, #376]	; (800384c <HAL_DMA_Abort+0x46c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a5c      	ldr	r2, [pc, #368]	; (8003850 <HAL_DMA_Abort+0x470>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <HAL_DMA_Abort+0x474>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a59      	ldr	r2, [pc, #356]	; (8003858 <HAL_DMA_Abort+0x478>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a58      	ldr	r2, [pc, #352]	; (800385c <HAL_DMA_Abort+0x47c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_DMA_Abort+0x32a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a56      	ldr	r2, [pc, #344]	; (8003860 <HAL_DMA_Abort+0x480>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d108      	bne.n	800371c <HAL_DMA_Abort+0x33c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e007      	b.n	800372c <HAL_DMA_Abort+0x34c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800372c:	e013      	b.n	8003756 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800372e:	f7fe ff45 	bl	80025bc <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b05      	cmp	r3, #5
 800373a:	d90c      	bls.n	8003756 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2203      	movs	r2, #3
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e12d      	b.n	80039b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e5      	bne.n	800372e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2f      	ldr	r2, [pc, #188]	; (8003824 <HAL_DMA_Abort+0x444>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d04a      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a2d      	ldr	r2, [pc, #180]	; (8003828 <HAL_DMA_Abort+0x448>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d045      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2c      	ldr	r2, [pc, #176]	; (800382c <HAL_DMA_Abort+0x44c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d040      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <HAL_DMA_Abort+0x450>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d03b      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a29      	ldr	r2, [pc, #164]	; (8003834 <HAL_DMA_Abort+0x454>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d036      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a27      	ldr	r2, [pc, #156]	; (8003838 <HAL_DMA_Abort+0x458>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d031      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a26      	ldr	r2, [pc, #152]	; (800383c <HAL_DMA_Abort+0x45c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d02c      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a24      	ldr	r2, [pc, #144]	; (8003840 <HAL_DMA_Abort+0x460>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d027      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a23      	ldr	r2, [pc, #140]	; (8003844 <HAL_DMA_Abort+0x464>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d022      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a21      	ldr	r2, [pc, #132]	; (8003848 <HAL_DMA_Abort+0x468>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d01d      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a20      	ldr	r2, [pc, #128]	; (800384c <HAL_DMA_Abort+0x46c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d018      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1e      	ldr	r2, [pc, #120]	; (8003850 <HAL_DMA_Abort+0x470>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <HAL_DMA_Abort+0x474>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00e      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1b      	ldr	r2, [pc, #108]	; (8003858 <HAL_DMA_Abort+0x478>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1a      	ldr	r2, [pc, #104]	; (800385c <HAL_DMA_Abort+0x47c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_DMA_Abort+0x422>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a18      	ldr	r2, [pc, #96]	; (8003860 <HAL_DMA_Abort+0x480>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_DMA_Abort+0x426>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_DMA_Abort+0x428>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02b      	beq.n	8003864 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	223f      	movs	r2, #63	; 0x3f
 800381c:	409a      	lsls	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	e02a      	b.n	800387a <HAL_DMA_Abort+0x49a>
 8003824:	40020010 	.word	0x40020010
 8003828:	40020028 	.word	0x40020028
 800382c:	40020040 	.word	0x40020040
 8003830:	40020058 	.word	0x40020058
 8003834:	40020070 	.word	0x40020070
 8003838:	40020088 	.word	0x40020088
 800383c:	400200a0 	.word	0x400200a0
 8003840:	400200b8 	.word	0x400200b8
 8003844:	40020410 	.word	0x40020410
 8003848:	40020428 	.word	0x40020428
 800384c:	40020440 	.word	0x40020440
 8003850:	40020458 	.word	0x40020458
 8003854:	40020470 	.word	0x40020470
 8003858:	40020488 	.word	0x40020488
 800385c:	400204a0 	.word	0x400204a0
 8003860:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2201      	movs	r2, #1
 8003874:	409a      	lsls	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a4f      	ldr	r2, [pc, #316]	; (80039bc <HAL_DMA_Abort+0x5dc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d072      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a4d      	ldr	r2, [pc, #308]	; (80039c0 <HAL_DMA_Abort+0x5e0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d06d      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a4c      	ldr	r2, [pc, #304]	; (80039c4 <HAL_DMA_Abort+0x5e4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d068      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a4a      	ldr	r2, [pc, #296]	; (80039c8 <HAL_DMA_Abort+0x5e8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d063      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a49      	ldr	r2, [pc, #292]	; (80039cc <HAL_DMA_Abort+0x5ec>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d05e      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a47      	ldr	r2, [pc, #284]	; (80039d0 <HAL_DMA_Abort+0x5f0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d059      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a46      	ldr	r2, [pc, #280]	; (80039d4 <HAL_DMA_Abort+0x5f4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d054      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a44      	ldr	r2, [pc, #272]	; (80039d8 <HAL_DMA_Abort+0x5f8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d04f      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a43      	ldr	r2, [pc, #268]	; (80039dc <HAL_DMA_Abort+0x5fc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04a      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a41      	ldr	r2, [pc, #260]	; (80039e0 <HAL_DMA_Abort+0x600>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d045      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a40      	ldr	r2, [pc, #256]	; (80039e4 <HAL_DMA_Abort+0x604>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d040      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3e      	ldr	r2, [pc, #248]	; (80039e8 <HAL_DMA_Abort+0x608>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d03b      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a3d      	ldr	r2, [pc, #244]	; (80039ec <HAL_DMA_Abort+0x60c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d036      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a3b      	ldr	r2, [pc, #236]	; (80039f0 <HAL_DMA_Abort+0x610>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d031      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a3a      	ldr	r2, [pc, #232]	; (80039f4 <HAL_DMA_Abort+0x614>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d02c      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a38      	ldr	r2, [pc, #224]	; (80039f8 <HAL_DMA_Abort+0x618>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d027      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a37      	ldr	r2, [pc, #220]	; (80039fc <HAL_DMA_Abort+0x61c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a35      	ldr	r2, [pc, #212]	; (8003a00 <HAL_DMA_Abort+0x620>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01d      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a34      	ldr	r2, [pc, #208]	; (8003a04 <HAL_DMA_Abort+0x624>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a32      	ldr	r2, [pc, #200]	; (8003a08 <HAL_DMA_Abort+0x628>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a31      	ldr	r2, [pc, #196]	; (8003a0c <HAL_DMA_Abort+0x62c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2f      	ldr	r2, [pc, #188]	; (8003a10 <HAL_DMA_Abort+0x630>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2e      	ldr	r2, [pc, #184]	; (8003a14 <HAL_DMA_Abort+0x634>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_DMA_Abort+0x58a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2c      	ldr	r2, [pc, #176]	; (8003a18 <HAL_DMA_Abort+0x638>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d101      	bne.n	800396e <HAL_DMA_Abort+0x58e>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_DMA_Abort+0x590>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d015      	beq.n	80039a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800397c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003994:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800399e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40020010 	.word	0x40020010
 80039c0:	40020028 	.word	0x40020028
 80039c4:	40020040 	.word	0x40020040
 80039c8:	40020058 	.word	0x40020058
 80039cc:	40020070 	.word	0x40020070
 80039d0:	40020088 	.word	0x40020088
 80039d4:	400200a0 	.word	0x400200a0
 80039d8:	400200b8 	.word	0x400200b8
 80039dc:	40020410 	.word	0x40020410
 80039e0:	40020428 	.word	0x40020428
 80039e4:	40020440 	.word	0x40020440
 80039e8:	40020458 	.word	0x40020458
 80039ec:	40020470 	.word	0x40020470
 80039f0:	40020488 	.word	0x40020488
 80039f4:	400204a0 	.word	0x400204a0
 80039f8:	400204b8 	.word	0x400204b8
 80039fc:	58025408 	.word	0x58025408
 8003a00:	5802541c 	.word	0x5802541c
 8003a04:	58025430 	.word	0x58025430
 8003a08:	58025444 	.word	0x58025444
 8003a0c:	58025458 	.word	0x58025458
 8003a10:	5802546c 	.word	0x5802546c
 8003a14:	58025480 	.word	0x58025480
 8003a18:	58025494 	.word	0x58025494

08003a1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e237      	b.n	8003e9e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d004      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2280      	movs	r2, #128	; 0x80
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e22c      	b.n	8003e9e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5c      	ldr	r2, [pc, #368]	; (8003bbc <HAL_DMA_Abort_IT+0x1a0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d04a      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a5b      	ldr	r2, [pc, #364]	; (8003bc0 <HAL_DMA_Abort_IT+0x1a4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d045      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a59      	ldr	r2, [pc, #356]	; (8003bc4 <HAL_DMA_Abort_IT+0x1a8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d040      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a58      	ldr	r2, [pc, #352]	; (8003bc8 <HAL_DMA_Abort_IT+0x1ac>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d03b      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a56      	ldr	r2, [pc, #344]	; (8003bcc <HAL_DMA_Abort_IT+0x1b0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d036      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a55      	ldr	r2, [pc, #340]	; (8003bd0 <HAL_DMA_Abort_IT+0x1b4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d031      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a53      	ldr	r2, [pc, #332]	; (8003bd4 <HAL_DMA_Abort_IT+0x1b8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d02c      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a52      	ldr	r2, [pc, #328]	; (8003bd8 <HAL_DMA_Abort_IT+0x1bc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d027      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a50      	ldr	r2, [pc, #320]	; (8003bdc <HAL_DMA_Abort_IT+0x1c0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d022      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a4f      	ldr	r2, [pc, #316]	; (8003be0 <HAL_DMA_Abort_IT+0x1c4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d01d      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a4d      	ldr	r2, [pc, #308]	; (8003be4 <HAL_DMA_Abort_IT+0x1c8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d018      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a4c      	ldr	r2, [pc, #304]	; (8003be8 <HAL_DMA_Abort_IT+0x1cc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d013      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a4a      	ldr	r2, [pc, #296]	; (8003bec <HAL_DMA_Abort_IT+0x1d0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00e      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a49      	ldr	r2, [pc, #292]	; (8003bf0 <HAL_DMA_Abort_IT+0x1d4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d009      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a47      	ldr	r2, [pc, #284]	; (8003bf4 <HAL_DMA_Abort_IT+0x1d8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xc8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a46      	ldr	r2, [pc, #280]	; (8003bf8 <HAL_DMA_Abort_IT+0x1dc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d101      	bne.n	8003ae8 <HAL_DMA_Abort_IT+0xcc>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <HAL_DMA_Abort_IT+0xce>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8086 	beq.w	8003bfc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2204      	movs	r2, #4
 8003af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2f      	ldr	r2, [pc, #188]	; (8003bbc <HAL_DMA_Abort_IT+0x1a0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d04a      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2e      	ldr	r2, [pc, #184]	; (8003bc0 <HAL_DMA_Abort_IT+0x1a4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d045      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2c      	ldr	r2, [pc, #176]	; (8003bc4 <HAL_DMA_Abort_IT+0x1a8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d040      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2b      	ldr	r2, [pc, #172]	; (8003bc8 <HAL_DMA_Abort_IT+0x1ac>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d03b      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a29      	ldr	r2, [pc, #164]	; (8003bcc <HAL_DMA_Abort_IT+0x1b0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d036      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a28      	ldr	r2, [pc, #160]	; (8003bd0 <HAL_DMA_Abort_IT+0x1b4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d031      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a26      	ldr	r2, [pc, #152]	; (8003bd4 <HAL_DMA_Abort_IT+0x1b8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02c      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a25      	ldr	r2, [pc, #148]	; (8003bd8 <HAL_DMA_Abort_IT+0x1bc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d027      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a23      	ldr	r2, [pc, #140]	; (8003bdc <HAL_DMA_Abort_IT+0x1c0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a22      	ldr	r2, [pc, #136]	; (8003be0 <HAL_DMA_Abort_IT+0x1c4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d01d      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a20      	ldr	r2, [pc, #128]	; (8003be4 <HAL_DMA_Abort_IT+0x1c8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1f      	ldr	r2, [pc, #124]	; (8003be8 <HAL_DMA_Abort_IT+0x1cc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <HAL_DMA_Abort_IT+0x1d0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1c      	ldr	r2, [pc, #112]	; (8003bf0 <HAL_DMA_Abort_IT+0x1d4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1a      	ldr	r2, [pc, #104]	; (8003bf4 <HAL_DMA_Abort_IT+0x1d8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x17c>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <HAL_DMA_Abort_IT+0x1dc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d108      	bne.n	8003baa <HAL_DMA_Abort_IT+0x18e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e178      	b.n	8003e9c <HAL_DMA_Abort_IT+0x480>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e16f      	b.n	8003e9c <HAL_DMA_Abort_IT+0x480>
 8003bbc:	40020010 	.word	0x40020010
 8003bc0:	40020028 	.word	0x40020028
 8003bc4:	40020040 	.word	0x40020040
 8003bc8:	40020058 	.word	0x40020058
 8003bcc:	40020070 	.word	0x40020070
 8003bd0:	40020088 	.word	0x40020088
 8003bd4:	400200a0 	.word	0x400200a0
 8003bd8:	400200b8 	.word	0x400200b8
 8003bdc:	40020410 	.word	0x40020410
 8003be0:	40020428 	.word	0x40020428
 8003be4:	40020440 	.word	0x40020440
 8003be8:	40020458 	.word	0x40020458
 8003bec:	40020470 	.word	0x40020470
 8003bf0:	40020488 	.word	0x40020488
 8003bf4:	400204a0 	.word	0x400204a0
 8003bf8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 020e 	bic.w	r2, r2, #14
 8003c0a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a6c      	ldr	r2, [pc, #432]	; (8003dc4 <HAL_DMA_Abort_IT+0x3a8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d04a      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6b      	ldr	r2, [pc, #428]	; (8003dc8 <HAL_DMA_Abort_IT+0x3ac>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d045      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a69      	ldr	r2, [pc, #420]	; (8003dcc <HAL_DMA_Abort_IT+0x3b0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d040      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a68      	ldr	r2, [pc, #416]	; (8003dd0 <HAL_DMA_Abort_IT+0x3b4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d03b      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a66      	ldr	r2, [pc, #408]	; (8003dd4 <HAL_DMA_Abort_IT+0x3b8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d036      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a65      	ldr	r2, [pc, #404]	; (8003dd8 <HAL_DMA_Abort_IT+0x3bc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d031      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a63      	ldr	r2, [pc, #396]	; (8003ddc <HAL_DMA_Abort_IT+0x3c0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d02c      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a62      	ldr	r2, [pc, #392]	; (8003de0 <HAL_DMA_Abort_IT+0x3c4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d027      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a60      	ldr	r2, [pc, #384]	; (8003de4 <HAL_DMA_Abort_IT+0x3c8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d022      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5f      	ldr	r2, [pc, #380]	; (8003de8 <HAL_DMA_Abort_IT+0x3cc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d01d      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a5d      	ldr	r2, [pc, #372]	; (8003dec <HAL_DMA_Abort_IT+0x3d0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d018      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a5c      	ldr	r2, [pc, #368]	; (8003df0 <HAL_DMA_Abort_IT+0x3d4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d013      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5a      	ldr	r2, [pc, #360]	; (8003df4 <HAL_DMA_Abort_IT+0x3d8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a59      	ldr	r2, [pc, #356]	; (8003df8 <HAL_DMA_Abort_IT+0x3dc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a57      	ldr	r2, [pc, #348]	; (8003dfc <HAL_DMA_Abort_IT+0x3e0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_DMA_Abort_IT+0x290>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a56      	ldr	r2, [pc, #344]	; (8003e00 <HAL_DMA_Abort_IT+0x3e4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d108      	bne.n	8003cbe <HAL_DMA_Abort_IT+0x2a2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0201 	bic.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e007      	b.n	8003cce <HAL_DMA_Abort_IT+0x2b2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0201 	bic.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a3c      	ldr	r2, [pc, #240]	; (8003dc4 <HAL_DMA_Abort_IT+0x3a8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d072      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a3a      	ldr	r2, [pc, #232]	; (8003dc8 <HAL_DMA_Abort_IT+0x3ac>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d06d      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a39      	ldr	r2, [pc, #228]	; (8003dcc <HAL_DMA_Abort_IT+0x3b0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d068      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a37      	ldr	r2, [pc, #220]	; (8003dd0 <HAL_DMA_Abort_IT+0x3b4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d063      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a36      	ldr	r2, [pc, #216]	; (8003dd4 <HAL_DMA_Abort_IT+0x3b8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d05e      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a34      	ldr	r2, [pc, #208]	; (8003dd8 <HAL_DMA_Abort_IT+0x3bc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d059      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a33      	ldr	r2, [pc, #204]	; (8003ddc <HAL_DMA_Abort_IT+0x3c0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d054      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a31      	ldr	r2, [pc, #196]	; (8003de0 <HAL_DMA_Abort_IT+0x3c4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d04f      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a30      	ldr	r2, [pc, #192]	; (8003de4 <HAL_DMA_Abort_IT+0x3c8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d04a      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2e      	ldr	r2, [pc, #184]	; (8003de8 <HAL_DMA_Abort_IT+0x3cc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d045      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2d      	ldr	r2, [pc, #180]	; (8003dec <HAL_DMA_Abort_IT+0x3d0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d040      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2b      	ldr	r2, [pc, #172]	; (8003df0 <HAL_DMA_Abort_IT+0x3d4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d03b      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2a      	ldr	r2, [pc, #168]	; (8003df4 <HAL_DMA_Abort_IT+0x3d8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d036      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <HAL_DMA_Abort_IT+0x3dc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d031      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <HAL_DMA_Abort_IT+0x3e0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d02c      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <HAL_DMA_Abort_IT+0x3e4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d027      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <HAL_DMA_Abort_IT+0x3e8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d022      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_DMA_Abort_IT+0x3ec>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01d      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_DMA_Abort_IT+0x3f0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d018      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_DMA_Abort_IT+0x3f4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_DMA_Abort_IT+0x3f8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00e      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_DMA_Abort_IT+0x3fc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_DMA_Abort_IT+0x400>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d004      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x3a2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_DMA_Abort_IT+0x404>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d132      	bne.n	8003e24 <HAL_DMA_Abort_IT+0x408>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e031      	b.n	8003e26 <HAL_DMA_Abort_IT+0x40a>
 8003dc2:	bf00      	nop
 8003dc4:	40020010 	.word	0x40020010
 8003dc8:	40020028 	.word	0x40020028
 8003dcc:	40020040 	.word	0x40020040
 8003dd0:	40020058 	.word	0x40020058
 8003dd4:	40020070 	.word	0x40020070
 8003dd8:	40020088 	.word	0x40020088
 8003ddc:	400200a0 	.word	0x400200a0
 8003de0:	400200b8 	.word	0x400200b8
 8003de4:	40020410 	.word	0x40020410
 8003de8:	40020428 	.word	0x40020428
 8003dec:	40020440 	.word	0x40020440
 8003df0:	40020458 	.word	0x40020458
 8003df4:	40020470 	.word	0x40020470
 8003df8:	40020488 	.word	0x40020488
 8003dfc:	400204a0 	.word	0x400204a0
 8003e00:	400204b8 	.word	0x400204b8
 8003e04:	58025408 	.word	0x58025408
 8003e08:	5802541c 	.word	0x5802541c
 8003e0c:	58025430 	.word	0x58025430
 8003e10:	58025444 	.word	0x58025444
 8003e14:	58025458 	.word	0x58025458
 8003e18:	5802546c 	.word	0x5802546c
 8003e1c:	58025480 	.word	0x58025480
 8003e20:	58025494 	.word	0x58025494
 8003e24:	2300      	movs	r3, #0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d028      	beq.n	8003e7c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e38:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	2201      	movs	r2, #1
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e58:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e70:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e7a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop

08003ea8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003eb4:	4b67      	ldr	r3, [pc, #412]	; (8004054 <HAL_DMA_IRQHandler+0x1ac>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a67      	ldr	r2, [pc, #412]	; (8004058 <HAL_DMA_IRQHandler+0x1b0>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	0a9b      	lsrs	r3, r3, #10
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a5f      	ldr	r2, [pc, #380]	; (800405c <HAL_DMA_IRQHandler+0x1b4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d04a      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a5d      	ldr	r2, [pc, #372]	; (8004060 <HAL_DMA_IRQHandler+0x1b8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d045      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a5c      	ldr	r2, [pc, #368]	; (8004064 <HAL_DMA_IRQHandler+0x1bc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d040      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a5a      	ldr	r2, [pc, #360]	; (8004068 <HAL_DMA_IRQHandler+0x1c0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d03b      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a59      	ldr	r2, [pc, #356]	; (800406c <HAL_DMA_IRQHandler+0x1c4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d036      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a57      	ldr	r2, [pc, #348]	; (8004070 <HAL_DMA_IRQHandler+0x1c8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d031      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a56      	ldr	r2, [pc, #344]	; (8004074 <HAL_DMA_IRQHandler+0x1cc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d02c      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a54      	ldr	r2, [pc, #336]	; (8004078 <HAL_DMA_IRQHandler+0x1d0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d027      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a53      	ldr	r2, [pc, #332]	; (800407c <HAL_DMA_IRQHandler+0x1d4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d022      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a51      	ldr	r2, [pc, #324]	; (8004080 <HAL_DMA_IRQHandler+0x1d8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d01d      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a50      	ldr	r2, [pc, #320]	; (8004084 <HAL_DMA_IRQHandler+0x1dc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d018      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a4e      	ldr	r2, [pc, #312]	; (8004088 <HAL_DMA_IRQHandler+0x1e0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a4d      	ldr	r2, [pc, #308]	; (800408c <HAL_DMA_IRQHandler+0x1e4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a4b      	ldr	r2, [pc, #300]	; (8004090 <HAL_DMA_IRQHandler+0x1e8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a4a      	ldr	r2, [pc, #296]	; (8004094 <HAL_DMA_IRQHandler+0x1ec>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xd2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a48      	ldr	r2, [pc, #288]	; (8004098 <HAL_DMA_IRQHandler+0x1f0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <HAL_DMA_IRQHandler+0xd6>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_DMA_IRQHandler+0xd8>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 842b 	beq.w	80047dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8a:	f003 031f 	and.w	r3, r3, #31
 8003f8e:	2208      	movs	r2, #8
 8003f90:	409a      	lsls	r2, r3
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80a2 	beq.w	80040e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a2e      	ldr	r2, [pc, #184]	; (800405c <HAL_DMA_IRQHandler+0x1b4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d04a      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a2d      	ldr	r2, [pc, #180]	; (8004060 <HAL_DMA_IRQHandler+0x1b8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d045      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2b      	ldr	r2, [pc, #172]	; (8004064 <HAL_DMA_IRQHandler+0x1bc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d040      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2a      	ldr	r2, [pc, #168]	; (8004068 <HAL_DMA_IRQHandler+0x1c0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d03b      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a28      	ldr	r2, [pc, #160]	; (800406c <HAL_DMA_IRQHandler+0x1c4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d036      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a27      	ldr	r2, [pc, #156]	; (8004070 <HAL_DMA_IRQHandler+0x1c8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d031      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a25      	ldr	r2, [pc, #148]	; (8004074 <HAL_DMA_IRQHandler+0x1cc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d02c      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a24      	ldr	r2, [pc, #144]	; (8004078 <HAL_DMA_IRQHandler+0x1d0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d027      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a22      	ldr	r2, [pc, #136]	; (800407c <HAL_DMA_IRQHandler+0x1d4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d022      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a21      	ldr	r2, [pc, #132]	; (8004080 <HAL_DMA_IRQHandler+0x1d8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d01d      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1f      	ldr	r2, [pc, #124]	; (8004084 <HAL_DMA_IRQHandler+0x1dc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d018      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1e      	ldr	r2, [pc, #120]	; (8004088 <HAL_DMA_IRQHandler+0x1e0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1c      	ldr	r2, [pc, #112]	; (800408c <HAL_DMA_IRQHandler+0x1e4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00e      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <HAL_DMA_IRQHandler+0x1e8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d009      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a19      	ldr	r2, [pc, #100]	; (8004094 <HAL_DMA_IRQHandler+0x1ec>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <HAL_DMA_IRQHandler+0x194>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_DMA_IRQHandler+0x1f0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d12f      	bne.n	800409c <HAL_DMA_IRQHandler+0x1f4>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	e02e      	b.n	80040b0 <HAL_DMA_IRQHandler+0x208>
 8004052:	bf00      	nop
 8004054:	24000004 	.word	0x24000004
 8004058:	1b4e81b5 	.word	0x1b4e81b5
 800405c:	40020010 	.word	0x40020010
 8004060:	40020028 	.word	0x40020028
 8004064:	40020040 	.word	0x40020040
 8004068:	40020058 	.word	0x40020058
 800406c:	40020070 	.word	0x40020070
 8004070:	40020088 	.word	0x40020088
 8004074:	400200a0 	.word	0x400200a0
 8004078:	400200b8 	.word	0x400200b8
 800407c:	40020410 	.word	0x40020410
 8004080:	40020428 	.word	0x40020428
 8004084:	40020440 	.word	0x40020440
 8004088:	40020458 	.word	0x40020458
 800408c:	40020470 	.word	0x40020470
 8004090:	40020488 	.word	0x40020488
 8004094:	400204a0 	.word	0x400204a0
 8004098:	400204b8 	.word	0x400204b8
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d015      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0204 	bic.w	r2, r2, #4
 80040c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2208      	movs	r2, #8
 80040ce:	409a      	lsls	r2, r3
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d8:	f043 0201 	orr.w	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d06e      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a69      	ldr	r2, [pc, #420]	; (80042a0 <HAL_DMA_IRQHandler+0x3f8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d04a      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a67      	ldr	r2, [pc, #412]	; (80042a4 <HAL_DMA_IRQHandler+0x3fc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d045      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a66      	ldr	r2, [pc, #408]	; (80042a8 <HAL_DMA_IRQHandler+0x400>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d040      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a64      	ldr	r2, [pc, #400]	; (80042ac <HAL_DMA_IRQHandler+0x404>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d03b      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a63      	ldr	r2, [pc, #396]	; (80042b0 <HAL_DMA_IRQHandler+0x408>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d036      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a61      	ldr	r2, [pc, #388]	; (80042b4 <HAL_DMA_IRQHandler+0x40c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d031      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a60      	ldr	r2, [pc, #384]	; (80042b8 <HAL_DMA_IRQHandler+0x410>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d02c      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a5e      	ldr	r2, [pc, #376]	; (80042bc <HAL_DMA_IRQHandler+0x414>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d027      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a5d      	ldr	r2, [pc, #372]	; (80042c0 <HAL_DMA_IRQHandler+0x418>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a5b      	ldr	r2, [pc, #364]	; (80042c4 <HAL_DMA_IRQHandler+0x41c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01d      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a5a      	ldr	r2, [pc, #360]	; (80042c8 <HAL_DMA_IRQHandler+0x420>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a58      	ldr	r2, [pc, #352]	; (80042cc <HAL_DMA_IRQHandler+0x424>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a57      	ldr	r2, [pc, #348]	; (80042d0 <HAL_DMA_IRQHandler+0x428>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a55      	ldr	r2, [pc, #340]	; (80042d4 <HAL_DMA_IRQHandler+0x42c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a54      	ldr	r2, [pc, #336]	; (80042d8 <HAL_DMA_IRQHandler+0x430>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_IRQHandler+0x2ee>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_DMA_IRQHandler+0x434>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10a      	bne.n	80041ac <HAL_DMA_IRQHandler+0x304>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e003      	b.n	80041b4 <HAL_DMA_IRQHandler+0x30c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2300      	movs	r3, #0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00d      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2201      	movs	r2, #1
 80041c2:	409a      	lsls	r2, r3
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	f043 0202 	orr.w	r2, r3, #2
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2204      	movs	r2, #4
 80041de:	409a      	lsls	r2, r3
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 808f 	beq.w	8004308 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2c      	ldr	r2, [pc, #176]	; (80042a0 <HAL_DMA_IRQHandler+0x3f8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d04a      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <HAL_DMA_IRQHandler+0x3fc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d045      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a29      	ldr	r2, [pc, #164]	; (80042a8 <HAL_DMA_IRQHandler+0x400>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d040      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a27      	ldr	r2, [pc, #156]	; (80042ac <HAL_DMA_IRQHandler+0x404>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d03b      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a26      	ldr	r2, [pc, #152]	; (80042b0 <HAL_DMA_IRQHandler+0x408>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d036      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a24      	ldr	r2, [pc, #144]	; (80042b4 <HAL_DMA_IRQHandler+0x40c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d031      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a23      	ldr	r2, [pc, #140]	; (80042b8 <HAL_DMA_IRQHandler+0x410>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d02c      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a21      	ldr	r2, [pc, #132]	; (80042bc <HAL_DMA_IRQHandler+0x414>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d027      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a20      	ldr	r2, [pc, #128]	; (80042c0 <HAL_DMA_IRQHandler+0x418>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d022      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <HAL_DMA_IRQHandler+0x41c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d01d      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <HAL_DMA_IRQHandler+0x420>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d018      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <HAL_DMA_IRQHandler+0x424>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1a      	ldr	r2, [pc, #104]	; (80042d0 <HAL_DMA_IRQHandler+0x428>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00e      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <HAL_DMA_IRQHandler+0x42c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d009      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <HAL_DMA_IRQHandler+0x430>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_DMA_IRQHandler+0x3e2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a15      	ldr	r2, [pc, #84]	; (80042dc <HAL_DMA_IRQHandler+0x434>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d12a      	bne.n	80042e0 <HAL_DMA_IRQHandler+0x438>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e023      	b.n	80042e8 <HAL_DMA_IRQHandler+0x440>
 80042a0:	40020010 	.word	0x40020010
 80042a4:	40020028 	.word	0x40020028
 80042a8:	40020040 	.word	0x40020040
 80042ac:	40020058 	.word	0x40020058
 80042b0:	40020070 	.word	0x40020070
 80042b4:	40020088 	.word	0x40020088
 80042b8:	400200a0 	.word	0x400200a0
 80042bc:	400200b8 	.word	0x400200b8
 80042c0:	40020410 	.word	0x40020410
 80042c4:	40020428 	.word	0x40020428
 80042c8:	40020440 	.word	0x40020440
 80042cc:	40020458 	.word	0x40020458
 80042d0:	40020470 	.word	0x40020470
 80042d4:	40020488 	.word	0x40020488
 80042d8:	400204a0 	.word	0x400204a0
 80042dc:	400204b8 	.word	0x400204b8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2300      	movs	r3, #0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2204      	movs	r2, #4
 80042f6:	409a      	lsls	r2, r3
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f043 0204 	orr.w	r2, r3, #4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	2210      	movs	r2, #16
 8004312:	409a      	lsls	r2, r3
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80a6 	beq.w	800446a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a85      	ldr	r2, [pc, #532]	; (8004538 <HAL_DMA_IRQHandler+0x690>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d04a      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a83      	ldr	r2, [pc, #524]	; (800453c <HAL_DMA_IRQHandler+0x694>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d045      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a82      	ldr	r2, [pc, #520]	; (8004540 <HAL_DMA_IRQHandler+0x698>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d040      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a80      	ldr	r2, [pc, #512]	; (8004544 <HAL_DMA_IRQHandler+0x69c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d03b      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a7f      	ldr	r2, [pc, #508]	; (8004548 <HAL_DMA_IRQHandler+0x6a0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d036      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a7d      	ldr	r2, [pc, #500]	; (800454c <HAL_DMA_IRQHandler+0x6a4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d031      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a7c      	ldr	r2, [pc, #496]	; (8004550 <HAL_DMA_IRQHandler+0x6a8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d02c      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7a      	ldr	r2, [pc, #488]	; (8004554 <HAL_DMA_IRQHandler+0x6ac>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d027      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a79      	ldr	r2, [pc, #484]	; (8004558 <HAL_DMA_IRQHandler+0x6b0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d022      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a77      	ldr	r2, [pc, #476]	; (800455c <HAL_DMA_IRQHandler+0x6b4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01d      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a76      	ldr	r2, [pc, #472]	; (8004560 <HAL_DMA_IRQHandler+0x6b8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d018      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a74      	ldr	r2, [pc, #464]	; (8004564 <HAL_DMA_IRQHandler+0x6bc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a73      	ldr	r2, [pc, #460]	; (8004568 <HAL_DMA_IRQHandler+0x6c0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00e      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a71      	ldr	r2, [pc, #452]	; (800456c <HAL_DMA_IRQHandler+0x6c4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d009      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a70      	ldr	r2, [pc, #448]	; (8004570 <HAL_DMA_IRQHandler+0x6c8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_DMA_IRQHandler+0x516>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a6e      	ldr	r2, [pc, #440]	; (8004574 <HAL_DMA_IRQHandler+0x6cc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d10a      	bne.n	80043d4 <HAL_DMA_IRQHandler+0x52c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e009      	b.n	80043e8 <HAL_DMA_IRQHandler+0x540>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bf14      	ite	ne
 80043e2:	2301      	movne	r3, #1
 80043e4:	2300      	moveq	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d03e      	beq.n	800446a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	2210      	movs	r2, #16
 80043f6:	409a      	lsls	r2, r3
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d018      	beq.n	800443c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d108      	bne.n	800442a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d024      	beq.n	800446a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
 8004428:	e01f      	b.n	800446a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01b      	beq.n	800446a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	4798      	blx	r3
 800443a:	e016      	b.n	800446a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d107      	bne.n	800445a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0208 	bic.w	r2, r2, #8
 8004458:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2220      	movs	r2, #32
 8004474:	409a      	lsls	r2, r3
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8110 	beq.w	80046a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2c      	ldr	r2, [pc, #176]	; (8004538 <HAL_DMA_IRQHandler+0x690>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d04a      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2b      	ldr	r2, [pc, #172]	; (800453c <HAL_DMA_IRQHandler+0x694>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d045      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a29      	ldr	r2, [pc, #164]	; (8004540 <HAL_DMA_IRQHandler+0x698>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d040      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a28      	ldr	r2, [pc, #160]	; (8004544 <HAL_DMA_IRQHandler+0x69c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d03b      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a26      	ldr	r2, [pc, #152]	; (8004548 <HAL_DMA_IRQHandler+0x6a0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d036      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a25      	ldr	r2, [pc, #148]	; (800454c <HAL_DMA_IRQHandler+0x6a4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d031      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a23      	ldr	r2, [pc, #140]	; (8004550 <HAL_DMA_IRQHandler+0x6a8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d02c      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a22      	ldr	r2, [pc, #136]	; (8004554 <HAL_DMA_IRQHandler+0x6ac>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d027      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a20      	ldr	r2, [pc, #128]	; (8004558 <HAL_DMA_IRQHandler+0x6b0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d022      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_DMA_IRQHandler+0x6b4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d01d      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <HAL_DMA_IRQHandler+0x6b8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d018      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_DMA_IRQHandler+0x6bc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <HAL_DMA_IRQHandler+0x6c0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00e      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a19      	ldr	r2, [pc, #100]	; (800456c <HAL_DMA_IRQHandler+0x6c4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d009      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a17      	ldr	r2, [pc, #92]	; (8004570 <HAL_DMA_IRQHandler+0x6c8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_DMA_IRQHandler+0x678>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a16      	ldr	r2, [pc, #88]	; (8004574 <HAL_DMA_IRQHandler+0x6cc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d12b      	bne.n	8004578 <HAL_DMA_IRQHandler+0x6d0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	bf14      	ite	ne
 800452e:	2301      	movne	r3, #1
 8004530:	2300      	moveq	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	e02a      	b.n	800458c <HAL_DMA_IRQHandler+0x6e4>
 8004536:	bf00      	nop
 8004538:	40020010 	.word	0x40020010
 800453c:	40020028 	.word	0x40020028
 8004540:	40020040 	.word	0x40020040
 8004544:	40020058 	.word	0x40020058
 8004548:	40020070 	.word	0x40020070
 800454c:	40020088 	.word	0x40020088
 8004550:	400200a0 	.word	0x400200a0
 8004554:	400200b8 	.word	0x400200b8
 8004558:	40020410 	.word	0x40020410
 800455c:	40020428 	.word	0x40020428
 8004560:	40020440 	.word	0x40020440
 8004564:	40020458 	.word	0x40020458
 8004568:	40020470 	.word	0x40020470
 800456c:	40020488 	.word	0x40020488
 8004570:	400204a0 	.word	0x400204a0
 8004574:	400204b8 	.word	0x400204b8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	bf14      	ite	ne
 8004586:	2301      	movne	r3, #1
 8004588:	2300      	moveq	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8087 	beq.w	80046a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	2220      	movs	r2, #32
 800459c:	409a      	lsls	r2, r3
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d139      	bne.n	8004622 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0216 	bic.w	r2, r2, #22
 80045bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695a      	ldr	r2, [r3, #20]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d103      	bne.n	80045de <HAL_DMA_IRQHandler+0x736>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0208 	bic.w	r2, r2, #8
 80045ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	223f      	movs	r2, #63	; 0x3f
 80045f8:	409a      	lsls	r2, r3
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 834a 	beq.w	8004cac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
          }
          return;
 8004620:	e344      	b.n	8004cac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d018      	beq.n	8004662 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d108      	bne.n	8004650 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	2b00      	cmp	r3, #0
 8004644:	d02c      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
 800464e:	e027      	b.n	80046a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d023      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
 8004660:	e01e      	b.n	80046a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10f      	bne.n	8004690 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0210 	bic.w	r2, r2, #16
 800467e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8306 	beq.w	8004cb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 8088 	beq.w	80047c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2204      	movs	r2, #4
 80046bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a7a      	ldr	r2, [pc, #488]	; (80048b0 <HAL_DMA_IRQHandler+0xa08>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d04a      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a79      	ldr	r2, [pc, #484]	; (80048b4 <HAL_DMA_IRQHandler+0xa0c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d045      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a77      	ldr	r2, [pc, #476]	; (80048b8 <HAL_DMA_IRQHandler+0xa10>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d040      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a76      	ldr	r2, [pc, #472]	; (80048bc <HAL_DMA_IRQHandler+0xa14>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d03b      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a74      	ldr	r2, [pc, #464]	; (80048c0 <HAL_DMA_IRQHandler+0xa18>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d036      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a73      	ldr	r2, [pc, #460]	; (80048c4 <HAL_DMA_IRQHandler+0xa1c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d031      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a71      	ldr	r2, [pc, #452]	; (80048c8 <HAL_DMA_IRQHandler+0xa20>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d02c      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a70      	ldr	r2, [pc, #448]	; (80048cc <HAL_DMA_IRQHandler+0xa24>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d027      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a6e      	ldr	r2, [pc, #440]	; (80048d0 <HAL_DMA_IRQHandler+0xa28>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d022      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a6d      	ldr	r2, [pc, #436]	; (80048d4 <HAL_DMA_IRQHandler+0xa2c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d01d      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a6b      	ldr	r2, [pc, #428]	; (80048d8 <HAL_DMA_IRQHandler+0xa30>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d018      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a6a      	ldr	r2, [pc, #424]	; (80048dc <HAL_DMA_IRQHandler+0xa34>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d013      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a68      	ldr	r2, [pc, #416]	; (80048e0 <HAL_DMA_IRQHandler+0xa38>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00e      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a67      	ldr	r2, [pc, #412]	; (80048e4 <HAL_DMA_IRQHandler+0xa3c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d009      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a65      	ldr	r2, [pc, #404]	; (80048e8 <HAL_DMA_IRQHandler+0xa40>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <HAL_DMA_IRQHandler+0x8b8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a64      	ldr	r2, [pc, #400]	; (80048ec <HAL_DMA_IRQHandler+0xa44>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d108      	bne.n	8004772 <HAL_DMA_IRQHandler+0x8ca>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	e007      	b.n	8004782 <HAL_DMA_IRQHandler+0x8da>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3301      	adds	r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478a:	429a      	cmp	r2, r3
 800478c:	d307      	bcc.n	800479e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f2      	bne.n	8004782 <HAL_DMA_IRQHandler+0x8da>
 800479c:	e000      	b.n	80047a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800479e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2203      	movs	r2, #3
 80047b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80047b6:	e003      	b.n	80047c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8272 	beq.w	8004cb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
 80047da:	e26c      	b.n	8004cb6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a43      	ldr	r2, [pc, #268]	; (80048f0 <HAL_DMA_IRQHandler+0xa48>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d022      	beq.n	800482c <HAL_DMA_IRQHandler+0x984>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a42      	ldr	r2, [pc, #264]	; (80048f4 <HAL_DMA_IRQHandler+0xa4c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d01d      	beq.n	800482c <HAL_DMA_IRQHandler+0x984>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a40      	ldr	r2, [pc, #256]	; (80048f8 <HAL_DMA_IRQHandler+0xa50>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d018      	beq.n	800482c <HAL_DMA_IRQHandler+0x984>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a3f      	ldr	r2, [pc, #252]	; (80048fc <HAL_DMA_IRQHandler+0xa54>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <HAL_DMA_IRQHandler+0x984>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a3d      	ldr	r2, [pc, #244]	; (8004900 <HAL_DMA_IRQHandler+0xa58>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00e      	beq.n	800482c <HAL_DMA_IRQHandler+0x984>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a3c      	ldr	r2, [pc, #240]	; (8004904 <HAL_DMA_IRQHandler+0xa5c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d009      	beq.n	800482c <HAL_DMA_IRQHandler+0x984>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3a      	ldr	r2, [pc, #232]	; (8004908 <HAL_DMA_IRQHandler+0xa60>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_DMA_IRQHandler+0x984>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a39      	ldr	r2, [pc, #228]	; (800490c <HAL_DMA_IRQHandler+0xa64>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d101      	bne.n	8004830 <HAL_DMA_IRQHandler+0x988>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_DMA_IRQHandler+0x98a>
 8004830:	2300      	movs	r3, #0
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 823f 	beq.w	8004cb6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	2204      	movs	r2, #4
 800484a:	409a      	lsls	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	4013      	ands	r3, r2
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80cd 	beq.w	80049f0 <HAL_DMA_IRQHandler+0xb48>
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80c7 	beq.w	80049f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2204      	movs	r2, #4
 800486c:	409a      	lsls	r2, r3
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d049      	beq.n	8004910 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 8210 	beq.w	8004cb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004898:	e20a      	b.n	8004cb0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8206 	beq.w	8004cb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ac:	e200      	b.n	8004cb0 <HAL_DMA_IRQHandler+0xe08>
 80048ae:	bf00      	nop
 80048b0:	40020010 	.word	0x40020010
 80048b4:	40020028 	.word	0x40020028
 80048b8:	40020040 	.word	0x40020040
 80048bc:	40020058 	.word	0x40020058
 80048c0:	40020070 	.word	0x40020070
 80048c4:	40020088 	.word	0x40020088
 80048c8:	400200a0 	.word	0x400200a0
 80048cc:	400200b8 	.word	0x400200b8
 80048d0:	40020410 	.word	0x40020410
 80048d4:	40020428 	.word	0x40020428
 80048d8:	40020440 	.word	0x40020440
 80048dc:	40020458 	.word	0x40020458
 80048e0:	40020470 	.word	0x40020470
 80048e4:	40020488 	.word	0x40020488
 80048e8:	400204a0 	.word	0x400204a0
 80048ec:	400204b8 	.word	0x400204b8
 80048f0:	58025408 	.word	0x58025408
 80048f4:	5802541c 	.word	0x5802541c
 80048f8:	58025430 	.word	0x58025430
 80048fc:	58025444 	.word	0x58025444
 8004900:	58025458 	.word	0x58025458
 8004904:	5802546c 	.word	0x5802546c
 8004908:	58025480 	.word	0x58025480
 800490c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d160      	bne.n	80049dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a7f      	ldr	r2, [pc, #508]	; (8004b1c <HAL_DMA_IRQHandler+0xc74>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d04a      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a7d      	ldr	r2, [pc, #500]	; (8004b20 <HAL_DMA_IRQHandler+0xc78>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d045      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a7c      	ldr	r2, [pc, #496]	; (8004b24 <HAL_DMA_IRQHandler+0xc7c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d040      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a7a      	ldr	r2, [pc, #488]	; (8004b28 <HAL_DMA_IRQHandler+0xc80>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d03b      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a79      	ldr	r2, [pc, #484]	; (8004b2c <HAL_DMA_IRQHandler+0xc84>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d036      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a77      	ldr	r2, [pc, #476]	; (8004b30 <HAL_DMA_IRQHandler+0xc88>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d031      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a76      	ldr	r2, [pc, #472]	; (8004b34 <HAL_DMA_IRQHandler+0xc8c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d02c      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a74      	ldr	r2, [pc, #464]	; (8004b38 <HAL_DMA_IRQHandler+0xc90>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d027      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a73      	ldr	r2, [pc, #460]	; (8004b3c <HAL_DMA_IRQHandler+0xc94>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d022      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a71      	ldr	r2, [pc, #452]	; (8004b40 <HAL_DMA_IRQHandler+0xc98>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01d      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a70      	ldr	r2, [pc, #448]	; (8004b44 <HAL_DMA_IRQHandler+0xc9c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d018      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a6e      	ldr	r2, [pc, #440]	; (8004b48 <HAL_DMA_IRQHandler+0xca0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a6d      	ldr	r2, [pc, #436]	; (8004b4c <HAL_DMA_IRQHandler+0xca4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a6b      	ldr	r2, [pc, #428]	; (8004b50 <HAL_DMA_IRQHandler+0xca8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a6a      	ldr	r2, [pc, #424]	; (8004b54 <HAL_DMA_IRQHandler+0xcac>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_DMA_IRQHandler+0xb12>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a68      	ldr	r2, [pc, #416]	; (8004b58 <HAL_DMA_IRQHandler+0xcb0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d108      	bne.n	80049cc <HAL_DMA_IRQHandler+0xb24>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0208 	bic.w	r2, r2, #8
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e007      	b.n	80049dc <HAL_DMA_IRQHandler+0xb34>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0204 	bic.w	r2, r2, #4
 80049da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8165 	beq.w	8004cb0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ee:	e15f      	b.n	8004cb0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	2202      	movs	r2, #2
 80049fa:	409a      	lsls	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80c5 	beq.w	8004b90 <HAL_DMA_IRQHandler+0xce8>
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80bf 	beq.w	8004b90 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d018      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 813a 	beq.w	8004cb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a48:	e134      	b.n	8004cb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 8130 	beq.w	8004cb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a5c:	e12a      	b.n	8004cb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f040 8089 	bne.w	8004b7c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	; (8004b1c <HAL_DMA_IRQHandler+0xc74>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d04a      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a29      	ldr	r2, [pc, #164]	; (8004b20 <HAL_DMA_IRQHandler+0xc78>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d045      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a28      	ldr	r2, [pc, #160]	; (8004b24 <HAL_DMA_IRQHandler+0xc7c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d040      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a26      	ldr	r2, [pc, #152]	; (8004b28 <HAL_DMA_IRQHandler+0xc80>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d03b      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a25      	ldr	r2, [pc, #148]	; (8004b2c <HAL_DMA_IRQHandler+0xc84>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d036      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a23      	ldr	r2, [pc, #140]	; (8004b30 <HAL_DMA_IRQHandler+0xc88>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d031      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <HAL_DMA_IRQHandler+0xc8c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d02c      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a20      	ldr	r2, [pc, #128]	; (8004b38 <HAL_DMA_IRQHandler+0xc90>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d027      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <HAL_DMA_IRQHandler+0xc94>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d022      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <HAL_DMA_IRQHandler+0xc98>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01d      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_DMA_IRQHandler+0xc9c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <HAL_DMA_IRQHandler+0xca0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <HAL_DMA_IRQHandler+0xca4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <HAL_DMA_IRQHandler+0xca8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <HAL_DMA_IRQHandler+0xcac>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc62>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <HAL_DMA_IRQHandler+0xcb0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d128      	bne.n	8004b5c <HAL_DMA_IRQHandler+0xcb4>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0214 	bic.w	r2, r2, #20
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	e027      	b.n	8004b6c <HAL_DMA_IRQHandler+0xcc4>
 8004b1c:	40020010 	.word	0x40020010
 8004b20:	40020028 	.word	0x40020028
 8004b24:	40020040 	.word	0x40020040
 8004b28:	40020058 	.word	0x40020058
 8004b2c:	40020070 	.word	0x40020070
 8004b30:	40020088 	.word	0x40020088
 8004b34:	400200a0 	.word	0x400200a0
 8004b38:	400200b8 	.word	0x400200b8
 8004b3c:	40020410 	.word	0x40020410
 8004b40:	40020428 	.word	0x40020428
 8004b44:	40020440 	.word	0x40020440
 8004b48:	40020458 	.word	0x40020458
 8004b4c:	40020470 	.word	0x40020470
 8004b50:	40020488 	.word	0x40020488
 8004b54:	400204a0 	.word	0x400204a0
 8004b58:	400204b8 	.word	0x400204b8
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 020a 	bic.w	r2, r2, #10
 8004b6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8097 	beq.w	8004cb4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b8e:	e091      	b.n	8004cb4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	2208      	movs	r2, #8
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8088 	beq.w	8004cb6 <HAL_DMA_IRQHandler+0xe0e>
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8082 	beq.w	8004cb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a41      	ldr	r2, [pc, #260]	; (8004cbc <HAL_DMA_IRQHandler+0xe14>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d04a      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a3f      	ldr	r2, [pc, #252]	; (8004cc0 <HAL_DMA_IRQHandler+0xe18>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d045      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a3e      	ldr	r2, [pc, #248]	; (8004cc4 <HAL_DMA_IRQHandler+0xe1c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d040      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a3c      	ldr	r2, [pc, #240]	; (8004cc8 <HAL_DMA_IRQHandler+0xe20>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d03b      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a3b      	ldr	r2, [pc, #236]	; (8004ccc <HAL_DMA_IRQHandler+0xe24>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d036      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a39      	ldr	r2, [pc, #228]	; (8004cd0 <HAL_DMA_IRQHandler+0xe28>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a38      	ldr	r2, [pc, #224]	; (8004cd4 <HAL_DMA_IRQHandler+0xe2c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d02c      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a36      	ldr	r2, [pc, #216]	; (8004cd8 <HAL_DMA_IRQHandler+0xe30>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d027      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a35      	ldr	r2, [pc, #212]	; (8004cdc <HAL_DMA_IRQHandler+0xe34>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a33      	ldr	r2, [pc, #204]	; (8004ce0 <HAL_DMA_IRQHandler+0xe38>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01d      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a32      	ldr	r2, [pc, #200]	; (8004ce4 <HAL_DMA_IRQHandler+0xe3c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a30      	ldr	r2, [pc, #192]	; (8004ce8 <HAL_DMA_IRQHandler+0xe40>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2f      	ldr	r2, [pc, #188]	; (8004cec <HAL_DMA_IRQHandler+0xe44>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2d      	ldr	r2, [pc, #180]	; (8004cf0 <HAL_DMA_IRQHandler+0xe48>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2c      	ldr	r2, [pc, #176]	; (8004cf4 <HAL_DMA_IRQHandler+0xe4c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xdaa>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2a      	ldr	r2, [pc, #168]	; (8004cf8 <HAL_DMA_IRQHandler+0xe50>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d108      	bne.n	8004c64 <HAL_DMA_IRQHandler+0xdbc>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 021c 	bic.w	r2, r2, #28
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e007      	b.n	8004c74 <HAL_DMA_IRQHandler+0xdcc>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 020e 	bic.w	r2, r2, #14
 8004c72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	4798      	blx	r3
 8004caa:	e004      	b.n	8004cb6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004cac:	bf00      	nop
 8004cae:	e002      	b.n	8004cb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cb0:	bf00      	nop
 8004cb2:	e000      	b.n	8004cb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cb4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cb6:	3728      	adds	r7, #40	; 0x28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40020010 	.word	0x40020010
 8004cc0:	40020028 	.word	0x40020028
 8004cc4:	40020040 	.word	0x40020040
 8004cc8:	40020058 	.word	0x40020058
 8004ccc:	40020070 	.word	0x40020070
 8004cd0:	40020088 	.word	0x40020088
 8004cd4:	400200a0 	.word	0x400200a0
 8004cd8:	400200b8 	.word	0x400200b8
 8004cdc:	40020410 	.word	0x40020410
 8004ce0:	40020428 	.word	0x40020428
 8004ce4:	40020440 	.word	0x40020440
 8004ce8:	40020458 	.word	0x40020458
 8004cec:	40020470 	.word	0x40020470
 8004cf0:	40020488 	.word	0x40020488
 8004cf4:	400204a0 	.word	0x400204a0
 8004cf8:	400204b8 	.word	0x400204b8

08004cfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a7f      	ldr	r2, [pc, #508]	; (8004f18 <DMA_SetConfig+0x21c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d072      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a7d      	ldr	r2, [pc, #500]	; (8004f1c <DMA_SetConfig+0x220>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d06d      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a7c      	ldr	r2, [pc, #496]	; (8004f20 <DMA_SetConfig+0x224>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d068      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a7a      	ldr	r2, [pc, #488]	; (8004f24 <DMA_SetConfig+0x228>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d063      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a79      	ldr	r2, [pc, #484]	; (8004f28 <DMA_SetConfig+0x22c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d05e      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a77      	ldr	r2, [pc, #476]	; (8004f2c <DMA_SetConfig+0x230>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d059      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a76      	ldr	r2, [pc, #472]	; (8004f30 <DMA_SetConfig+0x234>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d054      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a74      	ldr	r2, [pc, #464]	; (8004f34 <DMA_SetConfig+0x238>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d04f      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a73      	ldr	r2, [pc, #460]	; (8004f38 <DMA_SetConfig+0x23c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d04a      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a71      	ldr	r2, [pc, #452]	; (8004f3c <DMA_SetConfig+0x240>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d045      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a70      	ldr	r2, [pc, #448]	; (8004f40 <DMA_SetConfig+0x244>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d040      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a6e      	ldr	r2, [pc, #440]	; (8004f44 <DMA_SetConfig+0x248>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d03b      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a6d      	ldr	r2, [pc, #436]	; (8004f48 <DMA_SetConfig+0x24c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d036      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a6b      	ldr	r2, [pc, #428]	; (8004f4c <DMA_SetConfig+0x250>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d031      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a6a      	ldr	r2, [pc, #424]	; (8004f50 <DMA_SetConfig+0x254>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d02c      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a68      	ldr	r2, [pc, #416]	; (8004f54 <DMA_SetConfig+0x258>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d027      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a67      	ldr	r2, [pc, #412]	; (8004f58 <DMA_SetConfig+0x25c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d022      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a65      	ldr	r2, [pc, #404]	; (8004f5c <DMA_SetConfig+0x260>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01d      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a64      	ldr	r2, [pc, #400]	; (8004f60 <DMA_SetConfig+0x264>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d018      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a62      	ldr	r2, [pc, #392]	; (8004f64 <DMA_SetConfig+0x268>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a61      	ldr	r2, [pc, #388]	; (8004f68 <DMA_SetConfig+0x26c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00e      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a5f      	ldr	r2, [pc, #380]	; (8004f6c <DMA_SetConfig+0x270>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d009      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a5e      	ldr	r2, [pc, #376]	; (8004f70 <DMA_SetConfig+0x274>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a5c      	ldr	r2, [pc, #368]	; (8004f74 <DMA_SetConfig+0x278>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d101      	bne.n	8004e0a <DMA_SetConfig+0x10e>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <DMA_SetConfig+0x110>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d004      	beq.n	8004e2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a39      	ldr	r2, [pc, #228]	; (8004f18 <DMA_SetConfig+0x21c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d04a      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a38      	ldr	r2, [pc, #224]	; (8004f1c <DMA_SetConfig+0x220>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d045      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a36      	ldr	r2, [pc, #216]	; (8004f20 <DMA_SetConfig+0x224>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d040      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a35      	ldr	r2, [pc, #212]	; (8004f24 <DMA_SetConfig+0x228>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d03b      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a33      	ldr	r2, [pc, #204]	; (8004f28 <DMA_SetConfig+0x22c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d036      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a32      	ldr	r2, [pc, #200]	; (8004f2c <DMA_SetConfig+0x230>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d031      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a30      	ldr	r2, [pc, #192]	; (8004f30 <DMA_SetConfig+0x234>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d02c      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2f      	ldr	r2, [pc, #188]	; (8004f34 <DMA_SetConfig+0x238>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d027      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a2d      	ldr	r2, [pc, #180]	; (8004f38 <DMA_SetConfig+0x23c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d022      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2c      	ldr	r2, [pc, #176]	; (8004f3c <DMA_SetConfig+0x240>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d01d      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2a      	ldr	r2, [pc, #168]	; (8004f40 <DMA_SetConfig+0x244>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <DMA_SetConfig+0x248>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a27      	ldr	r2, [pc, #156]	; (8004f48 <DMA_SetConfig+0x24c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a26      	ldr	r2, [pc, #152]	; (8004f4c <DMA_SetConfig+0x250>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a24      	ldr	r2, [pc, #144]	; (8004f50 <DMA_SetConfig+0x254>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a23      	ldr	r2, [pc, #140]	; (8004f54 <DMA_SetConfig+0x258>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d101      	bne.n	8004ed0 <DMA_SetConfig+0x1d4>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <DMA_SetConfig+0x1d6>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d059      	beq.n	8004f8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	223f      	movs	r2, #63	; 0x3f
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ef4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d138      	bne.n	8004f78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f16:	e086      	b.n	8005026 <DMA_SetConfig+0x32a>
 8004f18:	40020010 	.word	0x40020010
 8004f1c:	40020028 	.word	0x40020028
 8004f20:	40020040 	.word	0x40020040
 8004f24:	40020058 	.word	0x40020058
 8004f28:	40020070 	.word	0x40020070
 8004f2c:	40020088 	.word	0x40020088
 8004f30:	400200a0 	.word	0x400200a0
 8004f34:	400200b8 	.word	0x400200b8
 8004f38:	40020410 	.word	0x40020410
 8004f3c:	40020428 	.word	0x40020428
 8004f40:	40020440 	.word	0x40020440
 8004f44:	40020458 	.word	0x40020458
 8004f48:	40020470 	.word	0x40020470
 8004f4c:	40020488 	.word	0x40020488
 8004f50:	400204a0 	.word	0x400204a0
 8004f54:	400204b8 	.word	0x400204b8
 8004f58:	58025408 	.word	0x58025408
 8004f5c:	5802541c 	.word	0x5802541c
 8004f60:	58025430 	.word	0x58025430
 8004f64:	58025444 	.word	0x58025444
 8004f68:	58025458 	.word	0x58025458
 8004f6c:	5802546c 	.word	0x5802546c
 8004f70:	58025480 	.word	0x58025480
 8004f74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]
}
 8004f88:	e04d      	b.n	8005026 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a29      	ldr	r2, [pc, #164]	; (8005034 <DMA_SetConfig+0x338>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d022      	beq.n	8004fda <DMA_SetConfig+0x2de>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a27      	ldr	r2, [pc, #156]	; (8005038 <DMA_SetConfig+0x33c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01d      	beq.n	8004fda <DMA_SetConfig+0x2de>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a26      	ldr	r2, [pc, #152]	; (800503c <DMA_SetConfig+0x340>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d018      	beq.n	8004fda <DMA_SetConfig+0x2de>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a24      	ldr	r2, [pc, #144]	; (8005040 <DMA_SetConfig+0x344>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <DMA_SetConfig+0x2de>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a23      	ldr	r2, [pc, #140]	; (8005044 <DMA_SetConfig+0x348>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <DMA_SetConfig+0x2de>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a21      	ldr	r2, [pc, #132]	; (8005048 <DMA_SetConfig+0x34c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <DMA_SetConfig+0x2de>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a20      	ldr	r2, [pc, #128]	; (800504c <DMA_SetConfig+0x350>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <DMA_SetConfig+0x2de>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1e      	ldr	r2, [pc, #120]	; (8005050 <DMA_SetConfig+0x354>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <DMA_SetConfig+0x2e2>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <DMA_SetConfig+0x2e4>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d020      	beq.n	8005026 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	2201      	movs	r2, #1
 8004fee:	409a      	lsls	r2, r3
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b40      	cmp	r3, #64	; 0x40
 8005002:	d108      	bne.n	8005016 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	60da      	str	r2, [r3, #12]
}
 8005014:	e007      	b.n	8005026 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	60da      	str	r2, [r3, #12]
}
 8005026:	bf00      	nop
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	58025408 	.word	0x58025408
 8005038:	5802541c 	.word	0x5802541c
 800503c:	58025430 	.word	0x58025430
 8005040:	58025444 	.word	0x58025444
 8005044:	58025458 	.word	0x58025458
 8005048:	5802546c 	.word	0x5802546c
 800504c:	58025480 	.word	0x58025480
 8005050:	58025494 	.word	0x58025494

08005054 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a42      	ldr	r2, [pc, #264]	; (800516c <DMA_CalcBaseAndBitshift+0x118>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d04a      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a41      	ldr	r2, [pc, #260]	; (8005170 <DMA_CalcBaseAndBitshift+0x11c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d045      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a3f      	ldr	r2, [pc, #252]	; (8005174 <DMA_CalcBaseAndBitshift+0x120>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d040      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a3e      	ldr	r2, [pc, #248]	; (8005178 <DMA_CalcBaseAndBitshift+0x124>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d03b      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a3c      	ldr	r2, [pc, #240]	; (800517c <DMA_CalcBaseAndBitshift+0x128>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d036      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a3b      	ldr	r2, [pc, #236]	; (8005180 <DMA_CalcBaseAndBitshift+0x12c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d031      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a39      	ldr	r2, [pc, #228]	; (8005184 <DMA_CalcBaseAndBitshift+0x130>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d02c      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a38      	ldr	r2, [pc, #224]	; (8005188 <DMA_CalcBaseAndBitshift+0x134>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d027      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a36      	ldr	r2, [pc, #216]	; (800518c <DMA_CalcBaseAndBitshift+0x138>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d022      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a35      	ldr	r2, [pc, #212]	; (8005190 <DMA_CalcBaseAndBitshift+0x13c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d01d      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a33      	ldr	r2, [pc, #204]	; (8005194 <DMA_CalcBaseAndBitshift+0x140>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d018      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a32      	ldr	r2, [pc, #200]	; (8005198 <DMA_CalcBaseAndBitshift+0x144>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a30      	ldr	r2, [pc, #192]	; (800519c <DMA_CalcBaseAndBitshift+0x148>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a2f      	ldr	r2, [pc, #188]	; (80051a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d009      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2d      	ldr	r2, [pc, #180]	; (80051a4 <DMA_CalcBaseAndBitshift+0x150>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a2c      	ldr	r2, [pc, #176]	; (80051a8 <DMA_CalcBaseAndBitshift+0x154>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d101      	bne.n	8005100 <DMA_CalcBaseAndBitshift+0xac>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <DMA_CalcBaseAndBitshift+0xae>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d024      	beq.n	8005150 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	3b10      	subs	r3, #16
 800510e:	4a27      	ldr	r2, [pc, #156]	; (80051ac <DMA_CalcBaseAndBitshift+0x158>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	091b      	lsrs	r3, r3, #4
 8005116:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005120:	5cd3      	ldrb	r3, [r2, r3]
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b03      	cmp	r3, #3
 800512c:	d908      	bls.n	8005140 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <DMA_CalcBaseAndBitshift+0x160>)
 8005136:	4013      	ands	r3, r2
 8005138:	1d1a      	adds	r2, r3, #4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	659a      	str	r2, [r3, #88]	; 0x58
 800513e:	e00d      	b.n	800515c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <DMA_CalcBaseAndBitshift+0x160>)
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6593      	str	r3, [r2, #88]	; 0x58
 800514e:	e005      	b.n	800515c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	40020010 	.word	0x40020010
 8005170:	40020028 	.word	0x40020028
 8005174:	40020040 	.word	0x40020040
 8005178:	40020058 	.word	0x40020058
 800517c:	40020070 	.word	0x40020070
 8005180:	40020088 	.word	0x40020088
 8005184:	400200a0 	.word	0x400200a0
 8005188:	400200b8 	.word	0x400200b8
 800518c:	40020410 	.word	0x40020410
 8005190:	40020428 	.word	0x40020428
 8005194:	40020440 	.word	0x40020440
 8005198:	40020458 	.word	0x40020458
 800519c:	40020470 	.word	0x40020470
 80051a0:	40020488 	.word	0x40020488
 80051a4:	400204a0 	.word	0x400204a0
 80051a8:	400204b8 	.word	0x400204b8
 80051ac:	aaaaaaab 	.word	0xaaaaaaab
 80051b0:	0800d824 	.word	0x0800d824
 80051b4:	fffffc00 	.word	0xfffffc00

080051b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d120      	bne.n	800520e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d858      	bhi.n	8005286 <DMA_CheckFifoParam+0xce>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <DMA_CheckFifoParam+0x24>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051ff 	.word	0x080051ff
 80051e4:	080051ed 	.word	0x080051ed
 80051e8:	08005287 	.word	0x08005287
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d048      	beq.n	800528a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051fc:	e045      	b.n	800528a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005206:	d142      	bne.n	800528e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800520c:	e03f      	b.n	800528e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005216:	d123      	bne.n	8005260 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	2b03      	cmp	r3, #3
 800521e:	d838      	bhi.n	8005292 <DMA_CheckFifoParam+0xda>
 8005220:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <DMA_CheckFifoParam+0x70>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	08005239 	.word	0x08005239
 800522c:	0800523f 	.word	0x0800523f
 8005230:	08005239 	.word	0x08005239
 8005234:	08005251 	.word	0x08005251
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
        break;
 800523c:	e030      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d025      	beq.n	8005296 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800524e:	e022      	b.n	8005296 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005258:	d11f      	bne.n	800529a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800525e:	e01c      	b.n	800529a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005264:	2b02      	cmp	r3, #2
 8005266:	d902      	bls.n	800526e <DMA_CheckFifoParam+0xb6>
 8005268:	2b03      	cmp	r3, #3
 800526a:	d003      	beq.n	8005274 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800526c:	e018      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	73fb      	strb	r3, [r7, #15]
        break;
 8005272:	e015      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00e      	beq.n	800529e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
    break;
 8005284:	e00b      	b.n	800529e <DMA_CheckFifoParam+0xe6>
        break;
 8005286:	bf00      	nop
 8005288:	e00a      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        break;
 800528a:	bf00      	nop
 800528c:	e008      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        break;
 800528e:	bf00      	nop
 8005290:	e006      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        break;
 8005292:	bf00      	nop
 8005294:	e004      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        break;
 8005296:	bf00      	nop
 8005298:	e002      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        break;
 800529a:	bf00      	nop
 800529c:	e000      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
    break;
 800529e:	bf00      	nop
    }
  }

  return status;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop

080052b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a38      	ldr	r2, [pc, #224]	; (80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d022      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a36      	ldr	r2, [pc, #216]	; (80053a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01d      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a35      	ldr	r2, [pc, #212]	; (80053ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d018      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a33      	ldr	r2, [pc, #204]	; (80053b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a32      	ldr	r2, [pc, #200]	; (80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a30      	ldr	r2, [pc, #192]	; (80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2d      	ldr	r2, [pc, #180]	; (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01a      	beq.n	800534e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	3b08      	subs	r3, #8
 8005320:	4a28      	ldr	r2, [pc, #160]	; (80053c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	091b      	lsrs	r3, r3, #4
 8005328:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4b26      	ldr	r3, [pc, #152]	; (80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	461a      	mov	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a24      	ldr	r2, [pc, #144]	; (80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800533c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	2201      	movs	r2, #1
 8005346:	409a      	lsls	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800534c:	e024      	b.n	8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	3b10      	subs	r3, #16
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005358:	fba2 2303 	umull	r2, r3, r2, r3
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d806      	bhi.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d902      	bls.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3308      	adds	r3, #8
 8005374:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4b18      	ldr	r3, [pc, #96]	; (80053dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	461a      	mov	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005388:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	2201      	movs	r2, #1
 8005392:	409a      	lsls	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	58025408 	.word	0x58025408
 80053a8:	5802541c 	.word	0x5802541c
 80053ac:	58025430 	.word	0x58025430
 80053b0:	58025444 	.word	0x58025444
 80053b4:	58025458 	.word	0x58025458
 80053b8:	5802546c 	.word	0x5802546c
 80053bc:	58025480 	.word	0x58025480
 80053c0:	58025494 	.word	0x58025494
 80053c4:	cccccccd 	.word	0xcccccccd
 80053c8:	16009600 	.word	0x16009600
 80053cc:	58025880 	.word	0x58025880
 80053d0:	aaaaaaab 	.word	0xaaaaaaab
 80053d4:	400204b8 	.word	0x400204b8
 80053d8:	4002040f 	.word	0x4002040f
 80053dc:	10008200 	.word	0x10008200
 80053e0:	40020880 	.word	0x40020880

080053e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d04a      	beq.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d847      	bhi.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a25      	ldr	r2, [pc, #148]	; (800549c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d022      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a24      	ldr	r2, [pc, #144]	; (80054a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d01d      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d018      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00e      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d009      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005454:	2300      	movs	r3, #0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	461a      	mov	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800546c:	671a      	str	r2, [r3, #112]	; 0x70
 800546e:	e009      	b.n	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	461a      	mov	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a11      	ldr	r2, [pc, #68]	; (80054c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005482:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3b01      	subs	r3, #1
 8005488:	2201      	movs	r2, #1
 800548a:	409a      	lsls	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	58025408 	.word	0x58025408
 80054a0:	5802541c 	.word	0x5802541c
 80054a4:	58025430 	.word	0x58025430
 80054a8:	58025444 	.word	0x58025444
 80054ac:	58025458 	.word	0x58025458
 80054b0:	5802546c 	.word	0x5802546c
 80054b4:	58025480 	.word	0x58025480
 80054b8:	58025494 	.word	0x58025494
 80054bc:	1600963f 	.word	0x1600963f
 80054c0:	58025940 	.word	0x58025940
 80054c4:	1000823f 	.word	0x1000823f
 80054c8:	40020940 	.word	0x40020940

080054cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b089      	sub	sp, #36	; 0x24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054da:	4b89      	ldr	r3, [pc, #548]	; (8005700 <HAL_GPIO_Init+0x234>)
 80054dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054de:	e194      	b.n	800580a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	2101      	movs	r1, #1
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ec:	4013      	ands	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8186 	beq.w	8005804 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f003 0303 	and.w	r3, r3, #3
 8005500:	2b01      	cmp	r3, #1
 8005502:	d005      	beq.n	8005510 <HAL_GPIO_Init+0x44>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d130      	bne.n	8005572 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	2203      	movs	r2, #3
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4013      	ands	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005546:	2201      	movs	r2, #1
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	091b      	lsrs	r3, r3, #4
 800555c:	f003 0201 	and.w	r2, r3, #1
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	2b03      	cmp	r3, #3
 800557c:	d017      	beq.n	80055ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	2203      	movs	r2, #3
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43db      	mvns	r3, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4013      	ands	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d123      	bne.n	8005602 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	08da      	lsrs	r2, r3, #3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3208      	adds	r2, #8
 80055c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	220f      	movs	r2, #15
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	08da      	lsrs	r2, r3, #3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3208      	adds	r2, #8
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	2203      	movs	r2, #3
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 0203 	and.w	r2, r3, #3
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4313      	orrs	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80e0 	beq.w	8005804 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005644:	4b2f      	ldr	r3, [pc, #188]	; (8005704 <HAL_GPIO_Init+0x238>)
 8005646:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800564a:	4a2e      	ldr	r2, [pc, #184]	; (8005704 <HAL_GPIO_Init+0x238>)
 800564c:	f043 0302 	orr.w	r3, r3, #2
 8005650:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005654:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <HAL_GPIO_Init+0x238>)
 8005656:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005662:	4a29      	ldr	r2, [pc, #164]	; (8005708 <HAL_GPIO_Init+0x23c>)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	3302      	adds	r3, #2
 800566a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	220f      	movs	r2, #15
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4013      	ands	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a20      	ldr	r2, [pc, #128]	; (800570c <HAL_GPIO_Init+0x240>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d052      	beq.n	8005734 <HAL_GPIO_Init+0x268>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1f      	ldr	r2, [pc, #124]	; (8005710 <HAL_GPIO_Init+0x244>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d031      	beq.n	80056fa <HAL_GPIO_Init+0x22e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a1e      	ldr	r2, [pc, #120]	; (8005714 <HAL_GPIO_Init+0x248>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d02b      	beq.n	80056f6 <HAL_GPIO_Init+0x22a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <HAL_GPIO_Init+0x24c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d025      	beq.n	80056f2 <HAL_GPIO_Init+0x226>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_GPIO_Init+0x250>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01f      	beq.n	80056ee <HAL_GPIO_Init+0x222>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <HAL_GPIO_Init+0x254>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d019      	beq.n	80056ea <HAL_GPIO_Init+0x21e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <HAL_GPIO_Init+0x258>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_GPIO_Init+0x21a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a19      	ldr	r2, [pc, #100]	; (8005728 <HAL_GPIO_Init+0x25c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00d      	beq.n	80056e2 <HAL_GPIO_Init+0x216>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a18      	ldr	r2, [pc, #96]	; (800572c <HAL_GPIO_Init+0x260>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d007      	beq.n	80056de <HAL_GPIO_Init+0x212>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <HAL_GPIO_Init+0x264>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d101      	bne.n	80056da <HAL_GPIO_Init+0x20e>
 80056d6:	2309      	movs	r3, #9
 80056d8:	e02d      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056da:	230a      	movs	r3, #10
 80056dc:	e02b      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056de:	2308      	movs	r3, #8
 80056e0:	e029      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056e2:	2307      	movs	r3, #7
 80056e4:	e027      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056e6:	2306      	movs	r3, #6
 80056e8:	e025      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056ea:	2305      	movs	r3, #5
 80056ec:	e023      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056ee:	2304      	movs	r3, #4
 80056f0:	e021      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056f2:	2303      	movs	r3, #3
 80056f4:	e01f      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e01d      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e01b      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056fe:	bf00      	nop
 8005700:	58000080 	.word	0x58000080
 8005704:	58024400 	.word	0x58024400
 8005708:	58000400 	.word	0x58000400
 800570c:	58020000 	.word	0x58020000
 8005710:	58020400 	.word	0x58020400
 8005714:	58020800 	.word	0x58020800
 8005718:	58020c00 	.word	0x58020c00
 800571c:	58021000 	.word	0x58021000
 8005720:	58021400 	.word	0x58021400
 8005724:	58021800 	.word	0x58021800
 8005728:	58021c00 	.word	0x58021c00
 800572c:	58022000 	.word	0x58022000
 8005730:	58022400 	.word	0x58022400
 8005734:	2300      	movs	r3, #0
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	f002 0203 	and.w	r2, r2, #3
 800573c:	0092      	lsls	r2, r2, #2
 800573e:	4093      	lsls	r3, r2
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4313      	orrs	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005746:	4938      	ldr	r1, [pc, #224]	; (8005828 <HAL_GPIO_Init+0x35c>)
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	3302      	adds	r3, #2
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	43db      	mvns	r3, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4013      	ands	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800577a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	43db      	mvns	r3, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4013      	ands	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	43db      	mvns	r3, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	3301      	adds	r3, #1
 8005808:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	f47f ae63 	bne.w	80054e0 <HAL_GPIO_Init+0x14>
  }
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	3724      	adds	r7, #36	; 0x24
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	58000400 	.word	0x58000400

0800582c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	887b      	ldrh	r3, [r7, #2]
 800583e:	4013      	ands	r3, r2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
 8005848:	e001      	b.n	800584e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800584e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	807b      	strh	r3, [r7, #2]
 8005868:	4613      	mov	r3, r2
 800586a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800586c:	787b      	ldrb	r3, [r7, #1]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005872:	887a      	ldrh	r2, [r7, #2]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005878:	e003      	b.n	8005882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800587a:	887b      	ldrh	r3, [r7, #2]
 800587c:	041a      	lsls	r2, r3, #16
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	619a      	str	r2, [r3, #24]
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800588e:	b480      	push	{r7}
 8005890:	b085      	sub	sp, #20
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	460b      	mov	r3, r1
 8005898:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058a0:	887a      	ldrh	r2, [r7, #2]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4013      	ands	r3, r2
 80058a6:	041a      	lsls	r2, r3, #16
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	43d9      	mvns	r1, r3
 80058ac:	887b      	ldrh	r3, [r7, #2]
 80058ae:	400b      	ands	r3, r1
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	619a      	str	r2, [r3, #24]
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
	...

080058c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e07f      	b.n	80059d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fc f910 	bl	8001b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2224      	movs	r2, #36	; 0x24
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005914:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005924:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d107      	bne.n	800593e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	e006      	b.n	800594c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800594a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d104      	bne.n	800595e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800595c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6859      	ldr	r1, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4b1d      	ldr	r3, [pc, #116]	; (80059e0 <HAL_I2C_Init+0x11c>)
 800596a:	430b      	orrs	r3, r1
 800596c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800597c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69d9      	ldr	r1, [r3, #28]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a1a      	ldr	r2, [r3, #32]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	02008000 	.word	0x02008000

080059e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	460b      	mov	r3, r1
 80059f2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	f040 80ef 	bne.w	8005be4 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a14:	d101      	bne.n	8005a1a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005a16:	2302      	movs	r3, #2
 8005a18:	e0e5      	b.n	8005be6 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_I2C_IsDeviceReady+0x44>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e0de      	b.n	8005be6 <HAL_I2C_IsDeviceReady+0x202>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2224      	movs	r2, #36	; 0x24
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d105      	bne.n	8005a52 <HAL_I2C_IsDeviceReady+0x6e>
 8005a46:	897b      	ldrh	r3, [r7, #10]
 8005a48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a4c:	4b68      	ldr	r3, [pc, #416]	; (8005bf0 <HAL_I2C_IsDeviceReady+0x20c>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	e004      	b.n	8005a5c <HAL_I2C_IsDeviceReady+0x78>
 8005a52:	897b      	ldrh	r3, [r7, #10]
 8005a54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a58:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005a62:	f7fc fdab 	bl	80025bc <HAL_GetTick>
 8005a66:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	bf0c      	ite	eq
 8005a76:	2301      	moveq	r3, #1
 8005a78:	2300      	movne	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b10      	cmp	r3, #16
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2301      	moveq	r3, #1
 8005a8e:	2300      	movne	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005a94:	e034      	b.n	8005b00 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a9c:	d01a      	beq.n	8005ad4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a9e:	f7fc fd8d 	bl	80025bc <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <HAL_I2C_IsDeviceReady+0xd0>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10f      	bne.n	8005ad4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac0:	f043 0220 	orr.w	r2, r3, #32
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e088      	b.n	8005be6 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	bf0c      	ite	eq
 8005ae2:	2301      	moveq	r3, #1
 8005ae4:	2300      	movne	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	bf0c      	ite	eq
 8005af8:	2301      	moveq	r3, #1
 8005afa:	2300      	movne	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005b00:	7ffb      	ldrb	r3, [r7, #31]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d102      	bne.n	8005b0c <HAL_I2C_IsDeviceReady+0x128>
 8005b06:	7fbb      	ldrb	r3, [r7, #30]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0c4      	beq.n	8005a96 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d01a      	beq.n	8005b50 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2200      	movs	r2, #0
 8005b22:	2120      	movs	r1, #32
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f865 	bl	8005bf4 <I2C_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e058      	b.n	8005be6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e04a      	b.n	8005be6 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2200      	movs	r2, #0
 8005b58:	2120      	movs	r1, #32
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 f84a 	bl	8005bf4 <I2C_WaitOnFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e03d      	b.n	8005be6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2210      	movs	r2, #16
 8005b70:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2220      	movs	r2, #32
 8005b78:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d118      	bne.n	8005bb4 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b90:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2120      	movs	r1, #32
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f829 	bl	8005bf4 <I2C_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e01c      	b.n	8005be6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	f63f af3d 	bhi.w	8005a3e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd0:	f043 0220 	orr.w	r2, r3, #32
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005be4:	2302      	movs	r3, #2
  }
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	02002000 	.word	0x02002000

08005bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	4613      	mov	r3, r2
 8005c02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c04:	e031      	b.n	8005c6a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c0c:	d02d      	beq.n	8005c6a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0e:	f7fc fcd5 	bl	80025bc <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d302      	bcc.n	8005c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d122      	bne.n	8005c6a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d113      	bne.n	8005c6a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e00f      	b.n	8005c8a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4013      	ands	r3, r2
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	bf0c      	ite	eq
 8005c7a:	2301      	moveq	r3, #1
 8005c7c:	2300      	movne	r3, #0
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	79fb      	ldrb	r3, [r7, #7]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d0be      	beq.n	8005c06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d138      	bne.n	8005d1a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e032      	b.n	8005d1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2224      	movs	r2, #36	; 0x24
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ce4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6819      	ldr	r1, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0201 	orr.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e000      	b.n	8005d1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d139      	bne.n	8005db2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e033      	b.n	8005db4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2224      	movs	r2, #36	; 0x24
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0201 	orr.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e000      	b.n	8005db4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005db2:	2302      	movs	r3, #2
  }
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005dc8:	4b19      	ldr	r3, [pc, #100]	; (8005e30 <HAL_PWREx_ConfigSupply+0x70>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d00a      	beq.n	8005dea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dd4:	4b16      	ldr	r3, [pc, #88]	; (8005e30 <HAL_PWREx_ConfigSupply+0x70>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d001      	beq.n	8005de6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e01f      	b.n	8005e26 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e01d      	b.n	8005e26 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dea:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <HAL_PWREx_ConfigSupply+0x70>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f023 0207 	bic.w	r2, r3, #7
 8005df2:	490f      	ldr	r1, [pc, #60]	; (8005e30 <HAL_PWREx_ConfigSupply+0x70>)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005dfa:	f7fc fbdf 	bl	80025bc <HAL_GetTick>
 8005dfe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e00:	e009      	b.n	8005e16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e02:	f7fc fbdb 	bl	80025bc <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e10:	d901      	bls.n	8005e16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e007      	b.n	8005e26 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e16:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <HAL_PWREx_ConfigSupply+0x70>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e22:	d1ee      	bne.n	8005e02 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	58024800 	.word	0x58024800

08005e34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08c      	sub	sp, #48	; 0x30
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f000 bc48 	b.w	80066d8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 8088 	beq.w	8005f66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e56:	4b99      	ldr	r3, [pc, #612]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e60:	4b96      	ldr	r3, [pc, #600]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d007      	beq.n	8005e7c <HAL_RCC_OscConfig+0x48>
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	2b18      	cmp	r3, #24
 8005e70:	d111      	bne.n	8005e96 <HAL_RCC_OscConfig+0x62>
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d10c      	bne.n	8005e96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e7c:	4b8f      	ldr	r3, [pc, #572]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d06d      	beq.n	8005f64 <HAL_RCC_OscConfig+0x130>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d169      	bne.n	8005f64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f000 bc21 	b.w	80066d8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e9e:	d106      	bne.n	8005eae <HAL_RCC_OscConfig+0x7a>
 8005ea0:	4b86      	ldr	r3, [pc, #536]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a85      	ldr	r2, [pc, #532]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	e02e      	b.n	8005f0c <HAL_RCC_OscConfig+0xd8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x9c>
 8005eb6:	4b81      	ldr	r3, [pc, #516]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a80      	ldr	r2, [pc, #512]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	4b7e      	ldr	r3, [pc, #504]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a7d      	ldr	r2, [pc, #500]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	e01d      	b.n	8005f0c <HAL_RCC_OscConfig+0xd8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_RCC_OscConfig+0xc0>
 8005eda:	4b78      	ldr	r3, [pc, #480]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a77      	ldr	r2, [pc, #476]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4b75      	ldr	r3, [pc, #468]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a74      	ldr	r2, [pc, #464]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	e00b      	b.n	8005f0c <HAL_RCC_OscConfig+0xd8>
 8005ef4:	4b71      	ldr	r3, [pc, #452]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a70      	ldr	r2, [pc, #448]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	4b6e      	ldr	r3, [pc, #440]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a6d      	ldr	r2, [pc, #436]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d013      	beq.n	8005f3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f14:	f7fc fb52 	bl	80025bc <HAL_GetTick>
 8005f18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f1c:	f7fc fb4e 	bl	80025bc <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b64      	cmp	r3, #100	; 0x64
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e3d4      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f2e:	4b63      	ldr	r3, [pc, #396]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0f0      	beq.n	8005f1c <HAL_RCC_OscConfig+0xe8>
 8005f3a:	e014      	b.n	8005f66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3c:	f7fc fb3e 	bl	80025bc <HAL_GetTick>
 8005f40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f44:	f7fc fb3a 	bl	80025bc <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b64      	cmp	r3, #100	; 0x64
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e3c0      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f56:	4b59      	ldr	r3, [pc, #356]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f0      	bne.n	8005f44 <HAL_RCC_OscConfig+0x110>
 8005f62:	e000      	b.n	8005f66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 80ca 	beq.w	8006108 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f74:	4b51      	ldr	r3, [pc, #324]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f7e:	4b4f      	ldr	r3, [pc, #316]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d007      	beq.n	8005f9a <HAL_RCC_OscConfig+0x166>
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	2b18      	cmp	r3, #24
 8005f8e:	d156      	bne.n	800603e <HAL_RCC_OscConfig+0x20a>
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d151      	bne.n	800603e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f9a:	4b48      	ldr	r3, [pc, #288]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x17e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e392      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fb2:	4b42      	ldr	r3, [pc, #264]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f023 0219 	bic.w	r2, r3, #25
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	493f      	ldr	r1, [pc, #252]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc4:	f7fc fafa 	bl	80025bc <HAL_GetTick>
 8005fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fcc:	f7fc faf6 	bl	80025bc <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e37c      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fde:	4b37      	ldr	r3, [pc, #220]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f0      	beq.n	8005fcc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fea:	f7fc fb17 	bl	800261c <HAL_GetREVID>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d817      	bhi.n	8006028 <HAL_RCC_OscConfig+0x1f4>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b40      	cmp	r3, #64	; 0x40
 8005ffe:	d108      	bne.n	8006012 <HAL_RCC_OscConfig+0x1de>
 8006000:	4b2e      	ldr	r3, [pc, #184]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006008:	4a2c      	ldr	r2, [pc, #176]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 800600a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800600e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006010:	e07a      	b.n	8006108 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006012:	4b2a      	ldr	r3, [pc, #168]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	031b      	lsls	r3, r3, #12
 8006020:	4926      	ldr	r1, [pc, #152]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8006022:	4313      	orrs	r3, r2
 8006024:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006026:	e06f      	b.n	8006108 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006028:	4b24      	ldr	r3, [pc, #144]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	061b      	lsls	r3, r3, #24
 8006036:	4921      	ldr	r1, [pc, #132]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8006038:	4313      	orrs	r3, r2
 800603a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800603c:	e064      	b.n	8006108 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d047      	beq.n	80060d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006046:	4b1d      	ldr	r3, [pc, #116]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f023 0219 	bic.w	r2, r3, #25
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	491a      	ldr	r1, [pc, #104]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8006054:	4313      	orrs	r3, r2
 8006056:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006058:	f7fc fab0 	bl	80025bc <HAL_GetTick>
 800605c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006060:	f7fc faac 	bl	80025bc <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e332      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006072:	4b12      	ldr	r3, [pc, #72]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800607e:	f7fc facd 	bl	800261c <HAL_GetREVID>
 8006082:	4603      	mov	r3, r0
 8006084:	f241 0203 	movw	r2, #4099	; 0x1003
 8006088:	4293      	cmp	r3, r2
 800608a:	d819      	bhi.n	80060c0 <HAL_RCC_OscConfig+0x28c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d108      	bne.n	80060a6 <HAL_RCC_OscConfig+0x272>
 8006094:	4b09      	ldr	r3, [pc, #36]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800609c:	4a07      	ldr	r2, [pc, #28]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 800609e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a2:	6053      	str	r3, [r2, #4]
 80060a4:	e030      	b.n	8006108 <HAL_RCC_OscConfig+0x2d4>
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	031b      	lsls	r3, r3, #12
 80060b4:	4901      	ldr	r1, [pc, #4]	; (80060bc <HAL_RCC_OscConfig+0x288>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	604b      	str	r3, [r1, #4]
 80060ba:	e025      	b.n	8006108 <HAL_RCC_OscConfig+0x2d4>
 80060bc:	58024400 	.word	0x58024400
 80060c0:	4b9a      	ldr	r3, [pc, #616]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	061b      	lsls	r3, r3, #24
 80060ce:	4997      	ldr	r1, [pc, #604]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	604b      	str	r3, [r1, #4]
 80060d4:	e018      	b.n	8006108 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060d6:	4b95      	ldr	r3, [pc, #596]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a94      	ldr	r2, [pc, #592]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e2:	f7fc fa6b 	bl	80025bc <HAL_GetTick>
 80060e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ea:	f7fc fa67 	bl	80025bc <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e2ed      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060fc:	4b8b      	ldr	r3, [pc, #556]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1f0      	bne.n	80060ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80a9 	beq.w	8006268 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006116:	4b85      	ldr	r3, [pc, #532]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800611e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006120:	4b82      	ldr	r3, [pc, #520]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b08      	cmp	r3, #8
 800612a:	d007      	beq.n	800613c <HAL_RCC_OscConfig+0x308>
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	2b18      	cmp	r3, #24
 8006130:	d13a      	bne.n	80061a8 <HAL_RCC_OscConfig+0x374>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d135      	bne.n	80061a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800613c:	4b7b      	ldr	r3, [pc, #492]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_RCC_OscConfig+0x320>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	2b80      	cmp	r3, #128	; 0x80
 800614e:	d001      	beq.n	8006154 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e2c1      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006154:	f7fc fa62 	bl	800261c <HAL_GetREVID>
 8006158:	4603      	mov	r3, r0
 800615a:	f241 0203 	movw	r2, #4099	; 0x1003
 800615e:	4293      	cmp	r3, r2
 8006160:	d817      	bhi.n	8006192 <HAL_RCC_OscConfig+0x35e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	2b20      	cmp	r3, #32
 8006168:	d108      	bne.n	800617c <HAL_RCC_OscConfig+0x348>
 800616a:	4b70      	ldr	r3, [pc, #448]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006172:	4a6e      	ldr	r2, [pc, #440]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 8006174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006178:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800617a:	e075      	b.n	8006268 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800617c:	4b6b      	ldr	r3, [pc, #428]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	069b      	lsls	r3, r3, #26
 800618a:	4968      	ldr	r1, [pc, #416]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 800618c:	4313      	orrs	r3, r2
 800618e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006190:	e06a      	b.n	8006268 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006192:	4b66      	ldr	r3, [pc, #408]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	061b      	lsls	r3, r3, #24
 80061a0:	4962      	ldr	r1, [pc, #392]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061a6:	e05f      	b.n	8006268 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d042      	beq.n	8006236 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061b0:	4b5e      	ldr	r3, [pc, #376]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a5d      	ldr	r2, [pc, #372]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80061b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061bc:	f7fc f9fe 	bl	80025bc <HAL_GetTick>
 80061c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061c4:	f7fc f9fa 	bl	80025bc <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e280      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061d6:	4b55      	ldr	r3, [pc, #340]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0f0      	beq.n	80061c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061e2:	f7fc fa1b 	bl	800261c <HAL_GetREVID>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d817      	bhi.n	8006220 <HAL_RCC_OscConfig+0x3ec>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	d108      	bne.n	800620a <HAL_RCC_OscConfig+0x3d6>
 80061f8:	4b4c      	ldr	r3, [pc, #304]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006200:	4a4a      	ldr	r2, [pc, #296]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 8006202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006206:	6053      	str	r3, [r2, #4]
 8006208:	e02e      	b.n	8006268 <HAL_RCC_OscConfig+0x434>
 800620a:	4b48      	ldr	r3, [pc, #288]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	069b      	lsls	r3, r3, #26
 8006218:	4944      	ldr	r1, [pc, #272]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 800621a:	4313      	orrs	r3, r2
 800621c:	604b      	str	r3, [r1, #4]
 800621e:	e023      	b.n	8006268 <HAL_RCC_OscConfig+0x434>
 8006220:	4b42      	ldr	r3, [pc, #264]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	061b      	lsls	r3, r3, #24
 800622e:	493f      	ldr	r1, [pc, #252]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 8006230:	4313      	orrs	r3, r2
 8006232:	60cb      	str	r3, [r1, #12]
 8006234:	e018      	b.n	8006268 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006236:	4b3d      	ldr	r3, [pc, #244]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3c      	ldr	r2, [pc, #240]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 800623c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006242:	f7fc f9bb 	bl	80025bc <HAL_GetTick>
 8006246:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800624a:	f7fc f9b7 	bl	80025bc <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e23d      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800625c:	4b33      	ldr	r3, [pc, #204]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1f0      	bne.n	800624a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b00      	cmp	r3, #0
 8006272:	d036      	beq.n	80062e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d019      	beq.n	80062b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800627c:	4b2b      	ldr	r3, [pc, #172]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 800627e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006280:	4a2a      	ldr	r2, [pc, #168]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006288:	f7fc f998 	bl	80025bc <HAL_GetTick>
 800628c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006290:	f7fc f994 	bl	80025bc <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e21a      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062a2:	4b22      	ldr	r3, [pc, #136]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80062a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f0      	beq.n	8006290 <HAL_RCC_OscConfig+0x45c>
 80062ae:	e018      	b.n	80062e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062b0:	4b1e      	ldr	r3, [pc, #120]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80062b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b4:	4a1d      	ldr	r2, [pc, #116]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062bc:	f7fc f97e 	bl	80025bc <HAL_GetTick>
 80062c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062c4:	f7fc f97a 	bl	80025bc <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e200      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062d6:	4b15      	ldr	r3, [pc, #84]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80062d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d039      	beq.n	8006362 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d01c      	beq.n	8006330 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062f6:	4b0d      	ldr	r3, [pc, #52]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a0c      	ldr	r2, [pc, #48]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 80062fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006300:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006302:	f7fc f95b 	bl	80025bc <HAL_GetTick>
 8006306:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800630a:	f7fc f957 	bl	80025bc <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e1dd      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800631c:	4b03      	ldr	r3, [pc, #12]	; (800632c <HAL_RCC_OscConfig+0x4f8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0f0      	beq.n	800630a <HAL_RCC_OscConfig+0x4d6>
 8006328:	e01b      	b.n	8006362 <HAL_RCC_OscConfig+0x52e>
 800632a:	bf00      	nop
 800632c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006330:	4b9b      	ldr	r3, [pc, #620]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a9a      	ldr	r2, [pc, #616]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800633a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800633c:	f7fc f93e 	bl	80025bc <HAL_GetTick>
 8006340:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006344:	f7fc f93a 	bl	80025bc <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e1c0      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006356:	4b92      	ldr	r3, [pc, #584]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f0      	bne.n	8006344 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 8081 	beq.w	8006472 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006370:	4b8c      	ldr	r3, [pc, #560]	; (80065a4 <HAL_RCC_OscConfig+0x770>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a8b      	ldr	r2, [pc, #556]	; (80065a4 <HAL_RCC_OscConfig+0x770>)
 8006376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800637a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800637c:	f7fc f91e 	bl	80025bc <HAL_GetTick>
 8006380:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006384:	f7fc f91a 	bl	80025bc <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b64      	cmp	r3, #100	; 0x64
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e1a0      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006396:	4b83      	ldr	r3, [pc, #524]	; (80065a4 <HAL_RCC_OscConfig+0x770>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0f0      	beq.n	8006384 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d106      	bne.n	80063b8 <HAL_RCC_OscConfig+0x584>
 80063aa:	4b7d      	ldr	r3, [pc, #500]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	4a7c      	ldr	r2, [pc, #496]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80063b0:	f043 0301 	orr.w	r3, r3, #1
 80063b4:	6713      	str	r3, [r2, #112]	; 0x70
 80063b6:	e02d      	b.n	8006414 <HAL_RCC_OscConfig+0x5e0>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10c      	bne.n	80063da <HAL_RCC_OscConfig+0x5a6>
 80063c0:	4b77      	ldr	r3, [pc, #476]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80063c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c4:	4a76      	ldr	r2, [pc, #472]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80063c6:	f023 0301 	bic.w	r3, r3, #1
 80063ca:	6713      	str	r3, [r2, #112]	; 0x70
 80063cc:	4b74      	ldr	r3, [pc, #464]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80063ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d0:	4a73      	ldr	r2, [pc, #460]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80063d2:	f023 0304 	bic.w	r3, r3, #4
 80063d6:	6713      	str	r3, [r2, #112]	; 0x70
 80063d8:	e01c      	b.n	8006414 <HAL_RCC_OscConfig+0x5e0>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b05      	cmp	r3, #5
 80063e0:	d10c      	bne.n	80063fc <HAL_RCC_OscConfig+0x5c8>
 80063e2:	4b6f      	ldr	r3, [pc, #444]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	4a6e      	ldr	r2, [pc, #440]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80063e8:	f043 0304 	orr.w	r3, r3, #4
 80063ec:	6713      	str	r3, [r2, #112]	; 0x70
 80063ee:	4b6c      	ldr	r3, [pc, #432]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	4a6b      	ldr	r2, [pc, #428]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	6713      	str	r3, [r2, #112]	; 0x70
 80063fa:	e00b      	b.n	8006414 <HAL_RCC_OscConfig+0x5e0>
 80063fc:	4b68      	ldr	r3, [pc, #416]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80063fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006400:	4a67      	ldr	r2, [pc, #412]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	6713      	str	r3, [r2, #112]	; 0x70
 8006408:	4b65      	ldr	r3, [pc, #404]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 800640a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640c:	4a64      	ldr	r2, [pc, #400]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 800640e:	f023 0304 	bic.w	r3, r3, #4
 8006412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d015      	beq.n	8006448 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641c:	f7fc f8ce 	bl	80025bc <HAL_GetTick>
 8006420:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006422:	e00a      	b.n	800643a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006424:	f7fc f8ca 	bl	80025bc <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006432:	4293      	cmp	r3, r2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e14e      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800643a:	4b59      	ldr	r3, [pc, #356]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 800643c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0ee      	beq.n	8006424 <HAL_RCC_OscConfig+0x5f0>
 8006446:	e014      	b.n	8006472 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006448:	f7fc f8b8 	bl	80025bc <HAL_GetTick>
 800644c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800644e:	e00a      	b.n	8006466 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006450:	f7fc f8b4 	bl	80025bc <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	f241 3288 	movw	r2, #5000	; 0x1388
 800645e:	4293      	cmp	r3, r2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e138      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006466:	4b4e      	ldr	r3, [pc, #312]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1ee      	bne.n	8006450 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 812d 	beq.w	80066d6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800647c:	4b48      	ldr	r3, [pc, #288]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006484:	2b18      	cmp	r3, #24
 8006486:	f000 80bd 	beq.w	8006604 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	2b02      	cmp	r3, #2
 8006490:	f040 809e 	bne.w	80065d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006494:	4b42      	ldr	r3, [pc, #264]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a41      	ldr	r2, [pc, #260]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 800649a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800649e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fc f88c 	bl	80025bc <HAL_GetTick>
 80064a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a8:	f7fc f888 	bl	80025bc <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e10e      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064ba:	4b39      	ldr	r3, [pc, #228]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064c6:	4b36      	ldr	r3, [pc, #216]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80064c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ca:	4b37      	ldr	r3, [pc, #220]	; (80065a8 <HAL_RCC_OscConfig+0x774>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064d6:	0112      	lsls	r2, r2, #4
 80064d8:	430a      	orrs	r2, r1
 80064da:	4931      	ldr	r1, [pc, #196]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	628b      	str	r3, [r1, #40]	; 0x28
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	3b01      	subs	r3, #1
 80064e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	3b01      	subs	r3, #1
 80064f0:	025b      	lsls	r3, r3, #9
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	431a      	orrs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	3b01      	subs	r3, #1
 80064fc:	041b      	lsls	r3, r3, #16
 80064fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006508:	3b01      	subs	r3, #1
 800650a:	061b      	lsls	r3, r3, #24
 800650c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006510:	4923      	ldr	r1, [pc, #140]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006512:	4313      	orrs	r3, r2
 8006514:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006516:	4b22      	ldr	r3, [pc, #136]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	4a21      	ldr	r2, [pc, #132]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006522:	4b1f      	ldr	r3, [pc, #124]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006526:	4b21      	ldr	r3, [pc, #132]	; (80065ac <HAL_RCC_OscConfig+0x778>)
 8006528:	4013      	ands	r3, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800652e:	00d2      	lsls	r2, r2, #3
 8006530:	491b      	ldr	r1, [pc, #108]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006532:	4313      	orrs	r3, r2
 8006534:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006536:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	f023 020c 	bic.w	r2, r3, #12
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	4917      	ldr	r1, [pc, #92]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006544:	4313      	orrs	r3, r2
 8006546:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006548:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	f023 0202 	bic.w	r2, r3, #2
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006554:	4912      	ldr	r1, [pc, #72]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006556:	4313      	orrs	r3, r2
 8006558:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800655a:	4b11      	ldr	r3, [pc, #68]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	4a10      	ldr	r2, [pc, #64]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006564:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006566:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	4a0d      	ldr	r2, [pc, #52]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 800656c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006570:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006572:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	4a0a      	ldr	r2, [pc, #40]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800657c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800657e:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	4a07      	ldr	r2, [pc, #28]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800658a:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a04      	ldr	r2, [pc, #16]	; (80065a0 <HAL_RCC_OscConfig+0x76c>)
 8006590:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006596:	f7fc f811 	bl	80025bc <HAL_GetTick>
 800659a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800659c:	e011      	b.n	80065c2 <HAL_RCC_OscConfig+0x78e>
 800659e:	bf00      	nop
 80065a0:	58024400 	.word	0x58024400
 80065a4:	58024800 	.word	0x58024800
 80065a8:	fffffc0c 	.word	0xfffffc0c
 80065ac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b0:	f7fc f804 	bl	80025bc <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e08a      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065c2:	4b47      	ldr	r3, [pc, #284]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0x77c>
 80065ce:	e082      	b.n	80066d6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d0:	4b43      	ldr	r3, [pc, #268]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a42      	ldr	r2, [pc, #264]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 80065d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065dc:	f7fb ffee 	bl	80025bc <HAL_GetTick>
 80065e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e4:	f7fb ffea 	bl	80025bc <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e070      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065f6:	4b3a      	ldr	r3, [pc, #232]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <HAL_RCC_OscConfig+0x7b0>
 8006602:	e068      	b.n	80066d6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006604:	4b36      	ldr	r3, [pc, #216]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 8006606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006608:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800660a:	4b35      	ldr	r3, [pc, #212]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	2b01      	cmp	r3, #1
 8006616:	d031      	beq.n	800667c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f003 0203 	and.w	r2, r3, #3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006622:	429a      	cmp	r2, r3
 8006624:	d12a      	bne.n	800667c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	091b      	lsrs	r3, r3, #4
 800662a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006632:	429a      	cmp	r2, r3
 8006634:	d122      	bne.n	800667c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006642:	429a      	cmp	r2, r3
 8006644:	d11a      	bne.n	800667c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	0a5b      	lsrs	r3, r3, #9
 800664a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006654:	429a      	cmp	r2, r3
 8006656:	d111      	bne.n	800667c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	0c1b      	lsrs	r3, r3, #16
 800665c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006664:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006666:	429a      	cmp	r2, r3
 8006668:	d108      	bne.n	800667c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	0e1b      	lsrs	r3, r3, #24
 800666e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006678:	429a      	cmp	r2, r3
 800667a:	d001      	beq.n	8006680 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e02b      	b.n	80066d8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006680:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 8006682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006684:	08db      	lsrs	r3, r3, #3
 8006686:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800668a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	429a      	cmp	r2, r3
 8006694:	d01f      	beq.n	80066d6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006696:	4b12      	ldr	r3, [pc, #72]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	4a11      	ldr	r2, [pc, #68]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066a2:	f7fb ff8b 	bl	80025bc <HAL_GetTick>
 80066a6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80066a8:	bf00      	nop
 80066aa:	f7fb ff87 	bl	80025bc <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d0f9      	beq.n	80066aa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066b6:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 80066b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ba:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <HAL_RCC_OscConfig+0x8b0>)
 80066bc:	4013      	ands	r3, r2
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80066c2:	00d2      	lsls	r2, r2, #3
 80066c4:	4906      	ldr	r1, [pc, #24]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	4a04      	ldr	r2, [pc, #16]	; (80066e0 <HAL_RCC_OscConfig+0x8ac>)
 80066d0:	f043 0301 	orr.w	r3, r3, #1
 80066d4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3730      	adds	r7, #48	; 0x30
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	58024400 	.word	0x58024400
 80066e4:	ffff0007 	.word	0xffff0007

080066e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e19c      	b.n	8006a36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066fc:	4b8a      	ldr	r3, [pc, #552]	; (8006928 <HAL_RCC_ClockConfig+0x240>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d910      	bls.n	800672c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670a:	4b87      	ldr	r3, [pc, #540]	; (8006928 <HAL_RCC_ClockConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f023 020f 	bic.w	r2, r3, #15
 8006712:	4985      	ldr	r1, [pc, #532]	; (8006928 <HAL_RCC_ClockConfig+0x240>)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	4313      	orrs	r3, r2
 8006718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800671a:	4b83      	ldr	r3, [pc, #524]	; (8006928 <HAL_RCC_ClockConfig+0x240>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d001      	beq.n	800672c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e184      	b.n	8006a36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d010      	beq.n	800675a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	4b7b      	ldr	r3, [pc, #492]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006744:	429a      	cmp	r2, r3
 8006746:	d908      	bls.n	800675a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006748:	4b78      	ldr	r3, [pc, #480]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	4975      	ldr	r1, [pc, #468]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 8006756:	4313      	orrs	r3, r2
 8006758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d010      	beq.n	8006788 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695a      	ldr	r2, [r3, #20]
 800676a:	4b70      	ldr	r3, [pc, #448]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006772:	429a      	cmp	r2, r3
 8006774:	d908      	bls.n	8006788 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006776:	4b6d      	ldr	r3, [pc, #436]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	496a      	ldr	r1, [pc, #424]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 8006784:	4313      	orrs	r3, r2
 8006786:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0310 	and.w	r3, r3, #16
 8006790:	2b00      	cmp	r3, #0
 8006792:	d010      	beq.n	80067b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	4b64      	ldr	r3, [pc, #400]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d908      	bls.n	80067b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067a4:	4b61      	ldr	r3, [pc, #388]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	495e      	ldr	r1, [pc, #376]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d010      	beq.n	80067e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69da      	ldr	r2, [r3, #28]
 80067c6:	4b59      	ldr	r3, [pc, #356]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d908      	bls.n	80067e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067d2:	4b56      	ldr	r3, [pc, #344]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	4953      	ldr	r1, [pc, #332]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d010      	beq.n	8006812 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	4b4d      	ldr	r3, [pc, #308]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d908      	bls.n	8006812 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006800:	4b4a      	ldr	r3, [pc, #296]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	f023 020f 	bic.w	r2, r3, #15
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4947      	ldr	r1, [pc, #284]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 800680e:	4313      	orrs	r3, r2
 8006810:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d055      	beq.n	80068ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800681e:	4b43      	ldr	r3, [pc, #268]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	4940      	ldr	r1, [pc, #256]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 800682c:	4313      	orrs	r3, r2
 800682e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b02      	cmp	r3, #2
 8006836:	d107      	bne.n	8006848 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006838:	4b3c      	ldr	r3, [pc, #240]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d121      	bne.n	8006888 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e0f6      	b.n	8006a36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2b03      	cmp	r3, #3
 800684e:	d107      	bne.n	8006860 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006850:	4b36      	ldr	r3, [pc, #216]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d115      	bne.n	8006888 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0ea      	b.n	8006a36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d107      	bne.n	8006878 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006868:	4b30      	ldr	r3, [pc, #192]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0de      	b.n	8006a36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006878:	4b2c      	ldr	r3, [pc, #176]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0d6      	b.n	8006a36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006888:	4b28      	ldr	r3, [pc, #160]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f023 0207 	bic.w	r2, r3, #7
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	4925      	ldr	r1, [pc, #148]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 8006896:	4313      	orrs	r3, r2
 8006898:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800689a:	f7fb fe8f 	bl	80025bc <HAL_GetTick>
 800689e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a0:	e00a      	b.n	80068b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068a2:	f7fb fe8b 	bl	80025bc <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e0be      	b.n	8006a36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b8:	4b1c      	ldr	r3, [pc, #112]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d1eb      	bne.n	80068a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d010      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	4b14      	ldr	r3, [pc, #80]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d208      	bcs.n	80068f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068e6:	4b11      	ldr	r3, [pc, #68]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f023 020f 	bic.w	r2, r3, #15
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	490e      	ldr	r1, [pc, #56]	; (800692c <HAL_RCC_ClockConfig+0x244>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068f8:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <HAL_RCC_ClockConfig+0x240>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d214      	bcs.n	8006930 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006906:	4b08      	ldr	r3, [pc, #32]	; (8006928 <HAL_RCC_ClockConfig+0x240>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f023 020f 	bic.w	r2, r3, #15
 800690e:	4906      	ldr	r1, [pc, #24]	; (8006928 <HAL_RCC_ClockConfig+0x240>)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	4313      	orrs	r3, r2
 8006914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006916:	4b04      	ldr	r3, [pc, #16]	; (8006928 <HAL_RCC_ClockConfig+0x240>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d005      	beq.n	8006930 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e086      	b.n	8006a36 <HAL_RCC_ClockConfig+0x34e>
 8006928:	52002000 	.word	0x52002000
 800692c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	d010      	beq.n	800695e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	4b3f      	ldr	r3, [pc, #252]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006948:	429a      	cmp	r2, r3
 800694a:	d208      	bcs.n	800695e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800694c:	4b3c      	ldr	r3, [pc, #240]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	4939      	ldr	r1, [pc, #228]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 800695a:	4313      	orrs	r3, r2
 800695c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d010      	beq.n	800698c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695a      	ldr	r2, [r3, #20]
 800696e:	4b34      	ldr	r3, [pc, #208]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006976:	429a      	cmp	r2, r3
 8006978:	d208      	bcs.n	800698c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800697a:	4b31      	ldr	r3, [pc, #196]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	492e      	ldr	r1, [pc, #184]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 8006988:	4313      	orrs	r3, r2
 800698a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b00      	cmp	r3, #0
 8006996:	d010      	beq.n	80069ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	4b28      	ldr	r3, [pc, #160]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d208      	bcs.n	80069ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069a8:	4b25      	ldr	r3, [pc, #148]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	4922      	ldr	r1, [pc, #136]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0320 	and.w	r3, r3, #32
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d010      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69da      	ldr	r2, [r3, #28]
 80069ca:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d208      	bcs.n	80069e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069d6:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	4917      	ldr	r1, [pc, #92]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069e8:	f000 f834 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 80069ec:	4602      	mov	r2, r0
 80069ee:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	0a1b      	lsrs	r3, r3, #8
 80069f4:	f003 030f 	and.w	r3, r3, #15
 80069f8:	4912      	ldr	r1, [pc, #72]	; (8006a44 <HAL_RCC_ClockConfig+0x35c>)
 80069fa:	5ccb      	ldrb	r3, [r1, r3]
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
 8006a04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a06:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <HAL_RCC_ClockConfig+0x358>)
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	4a0d      	ldr	r2, [pc, #52]	; (8006a44 <HAL_RCC_ClockConfig+0x35c>)
 8006a10:	5cd3      	ldrb	r3, [r2, r3]
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1c:	4a0a      	ldr	r2, [pc, #40]	; (8006a48 <HAL_RCC_ClockConfig+0x360>)
 8006a1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a20:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <HAL_RCC_ClockConfig+0x364>)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a26:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <HAL_RCC_ClockConfig+0x368>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fb fd7c 	bl	8002528 <HAL_InitTick>
 8006a30:	4603      	mov	r3, r0
 8006a32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	58024400 	.word	0x58024400
 8006a44:	0800d814 	.word	0x0800d814
 8006a48:	24000008 	.word	0x24000008
 8006a4c:	24000004 	.word	0x24000004
 8006a50:	2400000c 	.word	0x2400000c

08006a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b089      	sub	sp, #36	; 0x24
 8006a58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a5a:	4bb3      	ldr	r3, [pc, #716]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a62:	2b18      	cmp	r3, #24
 8006a64:	f200 8155 	bhi.w	8006d12 <HAL_RCC_GetSysClockFreq+0x2be>
 8006a68:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006ad5 	.word	0x08006ad5
 8006a74:	08006d13 	.word	0x08006d13
 8006a78:	08006d13 	.word	0x08006d13
 8006a7c:	08006d13 	.word	0x08006d13
 8006a80:	08006d13 	.word	0x08006d13
 8006a84:	08006d13 	.word	0x08006d13
 8006a88:	08006d13 	.word	0x08006d13
 8006a8c:	08006d13 	.word	0x08006d13
 8006a90:	08006afb 	.word	0x08006afb
 8006a94:	08006d13 	.word	0x08006d13
 8006a98:	08006d13 	.word	0x08006d13
 8006a9c:	08006d13 	.word	0x08006d13
 8006aa0:	08006d13 	.word	0x08006d13
 8006aa4:	08006d13 	.word	0x08006d13
 8006aa8:	08006d13 	.word	0x08006d13
 8006aac:	08006d13 	.word	0x08006d13
 8006ab0:	08006b01 	.word	0x08006b01
 8006ab4:	08006d13 	.word	0x08006d13
 8006ab8:	08006d13 	.word	0x08006d13
 8006abc:	08006d13 	.word	0x08006d13
 8006ac0:	08006d13 	.word	0x08006d13
 8006ac4:	08006d13 	.word	0x08006d13
 8006ac8:	08006d13 	.word	0x08006d13
 8006acc:	08006d13 	.word	0x08006d13
 8006ad0:	08006b07 	.word	0x08006b07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ad4:	4b94      	ldr	r3, [pc, #592]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d009      	beq.n	8006af4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ae0:	4b91      	ldr	r3, [pc, #580]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	08db      	lsrs	r3, r3, #3
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	4a90      	ldr	r2, [pc, #576]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006aec:	fa22 f303 	lsr.w	r3, r2, r3
 8006af0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006af2:	e111      	b.n	8006d18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006af4:	4b8d      	ldr	r3, [pc, #564]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006af6:	61bb      	str	r3, [r7, #24]
      break;
 8006af8:	e10e      	b.n	8006d18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006afa:	4b8d      	ldr	r3, [pc, #564]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006afc:	61bb      	str	r3, [r7, #24]
      break;
 8006afe:	e10b      	b.n	8006d18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006b00:	4b8c      	ldr	r3, [pc, #560]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b02:	61bb      	str	r3, [r7, #24]
      break;
 8006b04:	e108      	b.n	8006d18 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b06:	4b88      	ldr	r3, [pc, #544]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b10:	4b85      	ldr	r3, [pc, #532]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	091b      	lsrs	r3, r3, #4
 8006b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b1a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b1c:	4b82      	ldr	r3, [pc, #520]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b26:	4b80      	ldr	r3, [pc, #512]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2a:	08db      	lsrs	r3, r3, #3
 8006b2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	fb02 f303 	mul.w	r3, r2, r3
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 80e1 	beq.w	8006d0c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	f000 8083 	beq.w	8006c58 <HAL_RCC_GetSysClockFreq+0x204>
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	f200 80a1 	bhi.w	8006c9c <HAL_RCC_GetSysClockFreq+0x248>
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <HAL_RCC_GetSysClockFreq+0x114>
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d056      	beq.n	8006c14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b66:	e099      	b.n	8006c9c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b68:	4b6f      	ldr	r3, [pc, #444]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d02d      	beq.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b74:	4b6c      	ldr	r3, [pc, #432]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	08db      	lsrs	r3, r3, #3
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	4a6b      	ldr	r2, [pc, #428]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b80:	fa22 f303 	lsr.w	r3, r2, r3
 8006b84:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	ee07 3a90 	vmov	s15, r3
 8006b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9e:	4b62      	ldr	r3, [pc, #392]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bb2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006bce:	e087      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bda:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be2:	4b51      	ldr	r3, [pc, #324]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bf6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c12:	e065      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006d40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c26:	4b40      	ldr	r3, [pc, #256]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c3a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c56:	e043      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006d44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6a:	4b2f      	ldr	r3, [pc, #188]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c9a:	e021      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006d40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cae:	4b1e      	ldr	r3, [pc, #120]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cc2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cde:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006ce0:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce4:	0a5b      	lsrs	r3, r3, #9
 8006ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cea:	3301      	adds	r3, #1
 8006cec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d04:	ee17 3a90 	vmov	r3, s15
 8006d08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d0a:	e005      	b.n	8006d18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61bb      	str	r3, [r7, #24]
      break;
 8006d10:	e002      	b.n	8006d18 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d12:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d14:	61bb      	str	r3, [r7, #24]
      break;
 8006d16:	bf00      	nop
  }

  return sysclockfreq;
 8006d18:	69bb      	ldr	r3, [r7, #24]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3724      	adds	r7, #36	; 0x24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	58024400 	.word	0x58024400
 8006d2c:	03d09000 	.word	0x03d09000
 8006d30:	003d0900 	.word	0x003d0900
 8006d34:	017d7840 	.word	0x017d7840
 8006d38:	46000000 	.word	0x46000000
 8006d3c:	4c742400 	.word	0x4c742400
 8006d40:	4a742400 	.word	0x4a742400
 8006d44:	4bbebc20 	.word	0x4bbebc20

08006d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d4e:	f7ff fe81 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 8006d52:	4602      	mov	r2, r0
 8006d54:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	0a1b      	lsrs	r3, r3, #8
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	490f      	ldr	r1, [pc, #60]	; (8006d9c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d60:	5ccb      	ldrb	r3, [r1, r3]
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	; (8006d98 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d76:	5cd3      	ldrb	r3, [r2, r3]
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d82:	4a07      	ldr	r2, [pc, #28]	; (8006da0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d86:	4a07      	ldr	r2, [pc, #28]	; (8006da4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d8c:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	58024400 	.word	0x58024400
 8006d9c:	0800d814 	.word	0x0800d814
 8006da0:	24000008 	.word	0x24000008
 8006da4:	24000004 	.word	0x24000004

08006da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006dac:	f7ff ffcc 	bl	8006d48 <HAL_RCC_GetHCLKFreq>
 8006db0:	4602      	mov	r2, r0
 8006db2:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	091b      	lsrs	r3, r3, #4
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	4904      	ldr	r1, [pc, #16]	; (8006dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dbe:	5ccb      	ldrb	r3, [r1, r3]
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	0800d814 	.word	0x0800d814

08006dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006dd8:	f7ff ffb6 	bl	8006d48 <HAL_RCC_GetHCLKFreq>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	0a1b      	lsrs	r3, r3, #8
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	4904      	ldr	r1, [pc, #16]	; (8006dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dea:	5ccb      	ldrb	r3, [r1, r3]
 8006dec:	f003 031f 	and.w	r3, r3, #31
 8006df0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	58024400 	.word	0x58024400
 8006dfc:	0800d814 	.word	0x0800d814

08006e00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e04:	b0ca      	sub	sp, #296	; 0x128
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e12:	2300      	movs	r3, #0
 8006e14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006e24:	2500      	movs	r5, #0
 8006e26:	ea54 0305 	orrs.w	r3, r4, r5
 8006e2a:	d049      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e36:	d02f      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e3c:	d828      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e42:	d01a      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e48:	d822      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e52:	d007      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e54:	e01c      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e56:	4bb8      	ldr	r3, [pc, #736]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	4ab7      	ldr	r2, [pc, #732]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e62:	e01a      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e68:	3308      	adds	r3, #8
 8006e6a:	2102      	movs	r1, #2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 fc8f 	bl	8008790 <RCCEx_PLL2_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e78:	e00f      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7e:	3328      	adds	r3, #40	; 0x28
 8006e80:	2102      	movs	r1, #2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fd36 	bl	80088f4 <RCCEx_PLL3_Config>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e8e:	e004      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e96:	e000      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10a      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ea2:	4ba5      	ldr	r3, [pc, #660]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb0:	4aa1      	ldr	r2, [pc, #644]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	6513      	str	r3, [r2, #80]	; 0x50
 8006eb6:	e003      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ebc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006ecc:	f04f 0900 	mov.w	r9, #0
 8006ed0:	ea58 0309 	orrs.w	r3, r8, r9
 8006ed4:	d047      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d82a      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006ee0:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee6:	bf00      	nop
 8006ee8:	08006efd 	.word	0x08006efd
 8006eec:	08006f0b 	.word	0x08006f0b
 8006ef0:	08006f21 	.word	0x08006f21
 8006ef4:	08006f3f 	.word	0x08006f3f
 8006ef8:	08006f3f 	.word	0x08006f3f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006efc:	4b8e      	ldr	r3, [pc, #568]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	4a8d      	ldr	r2, [pc, #564]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f08:	e01a      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f0e:	3308      	adds	r3, #8
 8006f10:	2100      	movs	r1, #0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 fc3c 	bl	8008790 <RCCEx_PLL2_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f1e:	e00f      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f24:	3328      	adds	r3, #40	; 0x28
 8006f26:	2100      	movs	r1, #0
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 fce3 	bl	80088f4 <RCCEx_PLL3_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f34:	e004      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f3c:	e000      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f48:	4b7b      	ldr	r3, [pc, #492]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4c:	f023 0107 	bic.w	r1, r3, #7
 8006f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f56:	4a78      	ldr	r2, [pc, #480]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	6513      	str	r3, [r2, #80]	; 0x50
 8006f5c:	e003      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006f72:	f04f 0b00 	mov.w	fp, #0
 8006f76:	ea5a 030b 	orrs.w	r3, sl, fp
 8006f7a:	d04c      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f86:	d030      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8c:	d829      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f90:	d02d      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006f92:	2bc0      	cmp	r3, #192	; 0xc0
 8006f94:	d825      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f96:	2b80      	cmp	r3, #128	; 0x80
 8006f98:	d018      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006f9a:	2b80      	cmp	r3, #128	; 0x80
 8006f9c:	d821      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d007      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006fa6:	e01c      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fa8:	4b63      	ldr	r3, [pc, #396]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	4a62      	ldr	r2, [pc, #392]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fb4:	e01c      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fba:	3308      	adds	r3, #8
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 fbe6 	bl	8008790 <RCCEx_PLL2_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fca:	e011      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd0:	3328      	adds	r3, #40	; 0x28
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fc8d 	bl	80088f4 <RCCEx_PLL3_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fe0:	e006      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fe8:	e002      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fea:	bf00      	nop
 8006fec:	e000      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ff8:	4b4f      	ldr	r3, [pc, #316]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007006:	4a4c      	ldr	r2, [pc, #304]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007008:	430b      	orrs	r3, r1
 800700a:	6513      	str	r3, [r2, #80]	; 0x50
 800700c:	e003      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007012:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007022:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007026:	2300      	movs	r3, #0
 8007028:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800702c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007030:	460b      	mov	r3, r1
 8007032:	4313      	orrs	r3, r2
 8007034:	d053      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800703a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800703e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007042:	d035      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007048:	d82e      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800704a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800704e:	d031      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007050:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007054:	d828      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800705a:	d01a      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800705c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007060:	d822      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800706a:	d007      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800706c:	e01c      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800706e:	4b32      	ldr	r3, [pc, #200]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	4a31      	ldr	r2, [pc, #196]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007078:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800707a:	e01c      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800707c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007080:	3308      	adds	r3, #8
 8007082:	2100      	movs	r1, #0
 8007084:	4618      	mov	r0, r3
 8007086:	f001 fb83 	bl	8008790 <RCCEx_PLL2_Config>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007090:	e011      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007096:	3328      	adds	r3, #40	; 0x28
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f001 fc2a 	bl	80088f4 <RCCEx_PLL3_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070a6:	e006      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070ae:	e002      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80070b0:	bf00      	nop
 80070b2:	e000      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80070b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10b      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80070be:	4b1e      	ldr	r3, [pc, #120]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80070c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070ce:	4a1a      	ldr	r2, [pc, #104]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070d0:	430b      	orrs	r3, r1
 80070d2:	6593      	str	r3, [r2, #88]	; 0x58
 80070d4:	e003      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80070ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070ee:	2300      	movs	r3, #0
 80070f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80070f8:	460b      	mov	r3, r1
 80070fa:	4313      	orrs	r3, r2
 80070fc:	d056      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007102:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007106:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800710a:	d038      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800710c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007110:	d831      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007112:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007116:	d034      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007118:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800711c:	d82b      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800711e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007122:	d01d      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007124:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007128:	d825      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d006      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800712e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007132:	d00a      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007134:	e01f      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007136:	bf00      	nop
 8007138:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800713c:	4ba2      	ldr	r3, [pc, #648]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	4aa1      	ldr	r2, [pc, #644]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007148:	e01c      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800714a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800714e:	3308      	adds	r3, #8
 8007150:	2100      	movs	r1, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f001 fb1c 	bl	8008790 <RCCEx_PLL2_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800715e:	e011      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007164:	3328      	adds	r3, #40	; 0x28
 8007166:	2100      	movs	r1, #0
 8007168:	4618      	mov	r0, r3
 800716a:	f001 fbc3 	bl	80088f4 <RCCEx_PLL3_Config>
 800716e:	4603      	mov	r3, r0
 8007170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007174:	e006      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800717c:	e002      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800717e:	bf00      	nop
 8007180:	e000      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10b      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800718c:	4b8e      	ldr	r3, [pc, #568]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800718e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007190:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007198:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800719c:	4a8a      	ldr	r2, [pc, #552]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800719e:	430b      	orrs	r3, r1
 80071a0:	6593      	str	r3, [r2, #88]	; 0x58
 80071a2:	e003      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80071b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071bc:	2300      	movs	r3, #0
 80071be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80071c6:	460b      	mov	r3, r1
 80071c8:	4313      	orrs	r3, r2
 80071ca:	d03a      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d2:	2b30      	cmp	r3, #48	; 0x30
 80071d4:	d01f      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80071d6:	2b30      	cmp	r3, #48	; 0x30
 80071d8:	d819      	bhi.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071da:	2b20      	cmp	r3, #32
 80071dc:	d00c      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80071de:	2b20      	cmp	r3, #32
 80071e0:	d815      	bhi.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d019      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80071e6:	2b10      	cmp	r3, #16
 80071e8:	d111      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ea:	4b77      	ldr	r3, [pc, #476]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	4a76      	ldr	r2, [pc, #472]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071f6:	e011      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071fc:	3308      	adds	r3, #8
 80071fe:	2102      	movs	r1, #2
 8007200:	4618      	mov	r0, r3
 8007202:	f001 fac5 	bl	8008790 <RCCEx_PLL2_Config>
 8007206:	4603      	mov	r3, r0
 8007208:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800720c:	e006      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007214:	e002      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007216:	bf00      	nop
 8007218:	e000      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800721a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800721c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007224:	4b68      	ldr	r3, [pc, #416]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007228:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007232:	4a65      	ldr	r2, [pc, #404]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007234:	430b      	orrs	r3, r1
 8007236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007238:	e003      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800723a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800723e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800724e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007252:	2300      	movs	r3, #0
 8007254:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007258:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800725c:	460b      	mov	r3, r1
 800725e:	4313      	orrs	r3, r2
 8007260:	d051      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800726c:	d035      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800726e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007272:	d82e      	bhi.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007274:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007278:	d031      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800727a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800727e:	d828      	bhi.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007284:	d01a      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800728a:	d822      	bhi.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007294:	d007      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007296:	e01c      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007298:	4b4b      	ldr	r3, [pc, #300]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	4a4a      	ldr	r2, [pc, #296]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800729e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072a4:	e01c      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072aa:	3308      	adds	r3, #8
 80072ac:	2100      	movs	r1, #0
 80072ae:	4618      	mov	r0, r3
 80072b0:	f001 fa6e 	bl	8008790 <RCCEx_PLL2_Config>
 80072b4:	4603      	mov	r3, r0
 80072b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072ba:	e011      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c0:	3328      	adds	r3, #40	; 0x28
 80072c2:	2100      	movs	r1, #0
 80072c4:	4618      	mov	r0, r3
 80072c6:	f001 fb15 	bl	80088f4 <RCCEx_PLL3_Config>
 80072ca:	4603      	mov	r3, r0
 80072cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072d0:	e006      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072d8:	e002      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072da:	bf00      	nop
 80072dc:	e000      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072e8:	4b37      	ldr	r3, [pc, #220]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80072f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f6:	4a34      	ldr	r2, [pc, #208]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072f8:	430b      	orrs	r3, r1
 80072fa:	6513      	str	r3, [r2, #80]	; 0x50
 80072fc:	e003      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007302:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007316:	2300      	movs	r3, #0
 8007318:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800731c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007320:	460b      	mov	r3, r1
 8007322:	4313      	orrs	r3, r2
 8007324:	d056      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800732c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007330:	d033      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007332:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007336:	d82c      	bhi.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800733c:	d02f      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800733e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007342:	d826      	bhi.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007344:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007348:	d02b      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800734a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800734e:	d820      	bhi.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007354:	d012      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800735a:	d81a      	bhi.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800735c:	2b00      	cmp	r3, #0
 800735e:	d022      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007364:	d115      	bne.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800736a:	3308      	adds	r3, #8
 800736c:	2101      	movs	r1, #1
 800736e:	4618      	mov	r0, r3
 8007370:	f001 fa0e 	bl	8008790 <RCCEx_PLL2_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800737a:	e015      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800737c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007380:	3328      	adds	r3, #40	; 0x28
 8007382:	2101      	movs	r1, #1
 8007384:	4618      	mov	r0, r3
 8007386:	f001 fab5 	bl	80088f4 <RCCEx_PLL3_Config>
 800738a:	4603      	mov	r3, r0
 800738c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007390:	e00a      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007398:	e006      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800739a:	bf00      	nop
 800739c:	e004      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800739e:	bf00      	nop
 80073a0:	e002      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80073a2:	bf00      	nop
 80073a4:	e000      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80073a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10d      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80073b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073be:	4a02      	ldr	r2, [pc, #8]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073c0:	430b      	orrs	r3, r1
 80073c2:	6513      	str	r3, [r2, #80]	; 0x50
 80073c4:	e006      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073c6:	bf00      	nop
 80073c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80073e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073e4:	2300      	movs	r3, #0
 80073e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4313      	orrs	r3, r2
 80073f2:	d055      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007400:	d033      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007406:	d82c      	bhi.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740c:	d02f      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800740e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007412:	d826      	bhi.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007414:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007418:	d02b      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800741a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800741e:	d820      	bhi.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007424:	d012      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800742a:	d81a      	bhi.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800742c:	2b00      	cmp	r3, #0
 800742e:	d022      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007434:	d115      	bne.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743a:	3308      	adds	r3, #8
 800743c:	2101      	movs	r1, #1
 800743e:	4618      	mov	r0, r3
 8007440:	f001 f9a6 	bl	8008790 <RCCEx_PLL2_Config>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800744a:	e015      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007450:	3328      	adds	r3, #40	; 0x28
 8007452:	2101      	movs	r1, #1
 8007454:	4618      	mov	r0, r3
 8007456:	f001 fa4d 	bl	80088f4 <RCCEx_PLL3_Config>
 800745a:	4603      	mov	r3, r0
 800745c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007460:	e00a      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007468:	e006      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800746a:	bf00      	nop
 800746c:	e004      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800746e:	bf00      	nop
 8007470:	e002      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007472:	bf00      	nop
 8007474:	e000      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10b      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007480:	4ba3      	ldr	r3, [pc, #652]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007484:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800748c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007490:	4a9f      	ldr	r2, [pc, #636]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007492:	430b      	orrs	r3, r1
 8007494:	6593      	str	r3, [r2, #88]	; 0x58
 8007496:	e003      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800749c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80074ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074b0:	2300      	movs	r3, #0
 80074b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80074ba:	460b      	mov	r3, r1
 80074bc:	4313      	orrs	r3, r2
 80074be:	d037      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80074c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ca:	d00e      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80074cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074d0:	d816      	bhi.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d018      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80074d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074da:	d111      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074dc:	4b8c      	ldr	r3, [pc, #560]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	4a8b      	ldr	r2, [pc, #556]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074e8:	e00f      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ee:	3308      	adds	r3, #8
 80074f0:	2101      	movs	r1, #1
 80074f2:	4618      	mov	r0, r3
 80074f4:	f001 f94c 	bl	8008790 <RCCEx_PLL2_Config>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074fe:	e004      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007506:	e000      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800750a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007512:	4b7f      	ldr	r3, [pc, #508]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007516:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800751a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800751e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007520:	4a7b      	ldr	r2, [pc, #492]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007522:	430b      	orrs	r3, r1
 8007524:	6513      	str	r3, [r2, #80]	; 0x50
 8007526:	e003      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007528:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800752c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800753c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007540:	2300      	movs	r3, #0
 8007542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007546:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800754a:	460b      	mov	r3, r1
 800754c:	4313      	orrs	r3, r2
 800754e:	d039      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007556:	2b03      	cmp	r3, #3
 8007558:	d81c      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800755a:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	0800759d 	.word	0x0800759d
 8007564:	08007571 	.word	0x08007571
 8007568:	0800757f 	.word	0x0800757f
 800756c:	0800759d 	.word	0x0800759d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007570:	4b67      	ldr	r3, [pc, #412]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	4a66      	ldr	r2, [pc, #408]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800757a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800757c:	e00f      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007582:	3308      	adds	r3, #8
 8007584:	2102      	movs	r1, #2
 8007586:	4618      	mov	r0, r3
 8007588:	f001 f902 	bl	8008790 <RCCEx_PLL2_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007592:	e004      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800759a:	e000      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800759c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80075a6:	4b5a      	ldr	r3, [pc, #360]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075aa:	f023 0103 	bic.w	r1, r3, #3
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b4:	4a56      	ldr	r2, [pc, #344]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075b6:	430b      	orrs	r3, r1
 80075b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075ba:	e003      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80075d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075d4:	2300      	movs	r3, #0
 80075d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80075de:	460b      	mov	r3, r1
 80075e0:	4313      	orrs	r3, r2
 80075e2:	f000 809f 	beq.w	8007724 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075e6:	4b4b      	ldr	r3, [pc, #300]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a4a      	ldr	r2, [pc, #296]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075f2:	f7fa ffe3 	bl	80025bc <HAL_GetTick>
 80075f6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075fa:	e00b      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075fc:	f7fa ffde 	bl	80025bc <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b64      	cmp	r3, #100	; 0x64
 800760a:	d903      	bls.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007612:	e005      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007614:	4b3f      	ldr	r3, [pc, #252]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0ed      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007620:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007624:	2b00      	cmp	r3, #0
 8007626:	d179      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007628:	4b39      	ldr	r3, [pc, #228]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800762a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800762c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007630:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007634:	4053      	eors	r3, r2
 8007636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800763a:	2b00      	cmp	r3, #0
 800763c:	d015      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800763e:	4b34      	ldr	r3, [pc, #208]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007646:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800764a:	4b31      	ldr	r3, [pc, #196]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800764c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764e:	4a30      	ldr	r2, [pc, #192]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007654:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007656:	4b2e      	ldr	r3, [pc, #184]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765a:	4a2d      	ldr	r2, [pc, #180]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800765c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007660:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007662:	4a2b      	ldr	r2, [pc, #172]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007664:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007668:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800766a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800766e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007676:	d118      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007678:	f7fa ffa0 	bl	80025bc <HAL_GetTick>
 800767c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007680:	e00d      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007682:	f7fa ff9b 	bl	80025bc <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800768c:	1ad2      	subs	r2, r2, r3
 800768e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007692:	429a      	cmp	r2, r3
 8007694:	d903      	bls.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800769c:	e005      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800769e:	4b1c      	ldr	r3, [pc, #112]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0eb      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80076aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d129      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076c2:	d10e      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80076c4:	4b12      	ldr	r3, [pc, #72]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076d4:	091a      	lsrs	r2, r3, #4
 80076d6:	4b10      	ldr	r3, [pc, #64]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80076d8:	4013      	ands	r3, r2
 80076da:	4a0d      	ldr	r2, [pc, #52]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076dc:	430b      	orrs	r3, r1
 80076de:	6113      	str	r3, [r2, #16]
 80076e0:	e005      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80076e2:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	4a0a      	ldr	r2, [pc, #40]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076ec:	6113      	str	r3, [r2, #16]
 80076ee:	4b08      	ldr	r3, [pc, #32]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076fe:	4a04      	ldr	r2, [pc, #16]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007700:	430b      	orrs	r3, r1
 8007702:	6713      	str	r3, [r2, #112]	; 0x70
 8007704:	e00e      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800770a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800770e:	e009      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007710:	58024400 	.word	0x58024400
 8007714:	58024800 	.word	0x58024800
 8007718:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007720:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	f002 0301 	and.w	r3, r2, #1
 8007730:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007734:	2300      	movs	r3, #0
 8007736:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800773a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800773e:	460b      	mov	r3, r1
 8007740:	4313      	orrs	r3, r2
 8007742:	f000 8089 	beq.w	8007858 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800774a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800774c:	2b28      	cmp	r3, #40	; 0x28
 800774e:	d86b      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007831 	.word	0x08007831
 800775c:	08007829 	.word	0x08007829
 8007760:	08007829 	.word	0x08007829
 8007764:	08007829 	.word	0x08007829
 8007768:	08007829 	.word	0x08007829
 800776c:	08007829 	.word	0x08007829
 8007770:	08007829 	.word	0x08007829
 8007774:	08007829 	.word	0x08007829
 8007778:	080077fd 	.word	0x080077fd
 800777c:	08007829 	.word	0x08007829
 8007780:	08007829 	.word	0x08007829
 8007784:	08007829 	.word	0x08007829
 8007788:	08007829 	.word	0x08007829
 800778c:	08007829 	.word	0x08007829
 8007790:	08007829 	.word	0x08007829
 8007794:	08007829 	.word	0x08007829
 8007798:	08007813 	.word	0x08007813
 800779c:	08007829 	.word	0x08007829
 80077a0:	08007829 	.word	0x08007829
 80077a4:	08007829 	.word	0x08007829
 80077a8:	08007829 	.word	0x08007829
 80077ac:	08007829 	.word	0x08007829
 80077b0:	08007829 	.word	0x08007829
 80077b4:	08007829 	.word	0x08007829
 80077b8:	08007831 	.word	0x08007831
 80077bc:	08007829 	.word	0x08007829
 80077c0:	08007829 	.word	0x08007829
 80077c4:	08007829 	.word	0x08007829
 80077c8:	08007829 	.word	0x08007829
 80077cc:	08007829 	.word	0x08007829
 80077d0:	08007829 	.word	0x08007829
 80077d4:	08007829 	.word	0x08007829
 80077d8:	08007831 	.word	0x08007831
 80077dc:	08007829 	.word	0x08007829
 80077e0:	08007829 	.word	0x08007829
 80077e4:	08007829 	.word	0x08007829
 80077e8:	08007829 	.word	0x08007829
 80077ec:	08007829 	.word	0x08007829
 80077f0:	08007829 	.word	0x08007829
 80077f4:	08007829 	.word	0x08007829
 80077f8:	08007831 	.word	0x08007831
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007800:	3308      	adds	r3, #8
 8007802:	2101      	movs	r1, #1
 8007804:	4618      	mov	r0, r3
 8007806:	f000 ffc3 	bl	8008790 <RCCEx_PLL2_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007810:	e00f      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007816:	3328      	adds	r3, #40	; 0x28
 8007818:	2101      	movs	r1, #1
 800781a:	4618      	mov	r0, r3
 800781c:	f001 f86a 	bl	80088f4 <RCCEx_PLL3_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007826:	e004      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800782e:	e000      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800783a:	4bbf      	ldr	r3, [pc, #764]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800783c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007848:	4abb      	ldr	r2, [pc, #748]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800784a:	430b      	orrs	r3, r1
 800784c:	6553      	str	r3, [r2, #84]	; 0x54
 800784e:	e003      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007850:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007854:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	f002 0302 	and.w	r3, r2, #2
 8007864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007868:	2300      	movs	r3, #0
 800786a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800786e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007872:	460b      	mov	r3, r1
 8007874:	4313      	orrs	r3, r2
 8007876:	d041      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800787c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800787e:	2b05      	cmp	r3, #5
 8007880:	d824      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007882:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	080078d5 	.word	0x080078d5
 800788c:	080078a1 	.word	0x080078a1
 8007890:	080078b7 	.word	0x080078b7
 8007894:	080078d5 	.word	0x080078d5
 8007898:	080078d5 	.word	0x080078d5
 800789c:	080078d5 	.word	0x080078d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a4:	3308      	adds	r3, #8
 80078a6:	2101      	movs	r1, #1
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 ff71 	bl	8008790 <RCCEx_PLL2_Config>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078b4:	e00f      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ba:	3328      	adds	r3, #40	; 0x28
 80078bc:	2101      	movs	r1, #1
 80078be:	4618      	mov	r0, r3
 80078c0:	f001 f818 	bl	80088f4 <RCCEx_PLL3_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078ca:	e004      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078d2:	e000      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80078d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10a      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078de:	4b96      	ldr	r3, [pc, #600]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e2:	f023 0107 	bic.w	r1, r3, #7
 80078e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078ec:	4a92      	ldr	r2, [pc, #584]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078ee:	430b      	orrs	r3, r1
 80078f0:	6553      	str	r3, [r2, #84]	; 0x54
 80078f2:	e003      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f002 0304 	and.w	r3, r2, #4
 8007908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800790c:	2300      	movs	r3, #0
 800790e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007912:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007916:	460b      	mov	r3, r1
 8007918:	4313      	orrs	r3, r2
 800791a:	d044      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007924:	2b05      	cmp	r3, #5
 8007926:	d825      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	0800797d 	.word	0x0800797d
 8007934:	08007949 	.word	0x08007949
 8007938:	0800795f 	.word	0x0800795f
 800793c:	0800797d 	.word	0x0800797d
 8007940:	0800797d 	.word	0x0800797d
 8007944:	0800797d 	.word	0x0800797d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800794c:	3308      	adds	r3, #8
 800794e:	2101      	movs	r1, #1
 8007950:	4618      	mov	r0, r3
 8007952:	f000 ff1d 	bl	8008790 <RCCEx_PLL2_Config>
 8007956:	4603      	mov	r3, r0
 8007958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800795c:	e00f      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007962:	3328      	adds	r3, #40	; 0x28
 8007964:	2101      	movs	r1, #1
 8007966:	4618      	mov	r0, r3
 8007968:	f000 ffc4 	bl	80088f4 <RCCEx_PLL3_Config>
 800796c:	4603      	mov	r3, r0
 800796e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007972:	e004      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800797a:	e000      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800797c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800797e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10b      	bne.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007986:	4b6c      	ldr	r3, [pc, #432]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798a:	f023 0107 	bic.w	r1, r3, #7
 800798e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007996:	4a68      	ldr	r2, [pc, #416]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007998:	430b      	orrs	r3, r1
 800799a:	6593      	str	r3, [r2, #88]	; 0x58
 800799c:	e003      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f002 0320 	and.w	r3, r2, #32
 80079b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079b6:	2300      	movs	r3, #0
 80079b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80079c0:	460b      	mov	r3, r1
 80079c2:	4313      	orrs	r3, r2
 80079c4:	d055      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079d2:	d033      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80079d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079d8:	d82c      	bhi.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079de:	d02f      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80079e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e4:	d826      	bhi.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079ea:	d02b      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80079ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079f0:	d820      	bhi.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f6:	d012      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80079f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079fc:	d81a      	bhi.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d022      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a06:	d115      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 febd 	bl	8008790 <RCCEx_PLL2_Config>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a1c:	e015      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a22:	3328      	adds	r3, #40	; 0x28
 8007a24:	2102      	movs	r1, #2
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 ff64 	bl	80088f4 <RCCEx_PLL3_Config>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a32:	e00a      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a3a:	e006      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a3c:	bf00      	nop
 8007a3e:	e004      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a40:	bf00      	nop
 8007a42:	e002      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a44:	bf00      	nop
 8007a46:	e000      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10b      	bne.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a52:	4b39      	ldr	r3, [pc, #228]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a56:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a62:	4a35      	ldr	r2, [pc, #212]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a64:	430b      	orrs	r3, r1
 8007a66:	6553      	str	r3, [r2, #84]	; 0x54
 8007a68:	e003      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a82:	2300      	movs	r3, #0
 8007a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	d058      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a9e:	d033      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007aa0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007aa4:	d82c      	bhi.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aaa:	d02f      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab0:	d826      	bhi.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ab2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ab6:	d02b      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007ab8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007abc:	d820      	bhi.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac2:	d012      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac8:	d81a      	bhi.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d022      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad2:	d115      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad8:	3308      	adds	r3, #8
 8007ada:	2100      	movs	r1, #0
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 fe57 	bl	8008790 <RCCEx_PLL2_Config>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ae8:	e015      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aee:	3328      	adds	r3, #40	; 0x28
 8007af0:	2102      	movs	r1, #2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fefe 	bl	80088f4 <RCCEx_PLL3_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007afe:	e00a      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b06:	e006      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b08:	bf00      	nop
 8007b0a:	e004      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b0c:	bf00      	nop
 8007b0e:	e002      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b10:	bf00      	nop
 8007b12:	e000      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10e      	bne.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b1e:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b22:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b2e:	4a02      	ldr	r2, [pc, #8]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b30:	430b      	orrs	r3, r1
 8007b32:	6593      	str	r3, [r2, #88]	; 0x58
 8007b34:	e006      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007b36:	bf00      	nop
 8007b38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b54:	2300      	movs	r3, #0
 8007b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b5a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4313      	orrs	r3, r2
 8007b62:	d055      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b70:	d033      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007b72:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b76:	d82c      	bhi.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b7c:	d02f      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b82:	d826      	bhi.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b88:	d02b      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007b8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b8e:	d820      	bhi.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b94:	d012      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b9a:	d81a      	bhi.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d022      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba4:	d115      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007baa:	3308      	adds	r3, #8
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fdee 	bl	8008790 <RCCEx_PLL2_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bba:	e015      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc0:	3328      	adds	r3, #40	; 0x28
 8007bc2:	2102      	movs	r1, #2
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fe95 	bl	80088f4 <RCCEx_PLL3_Config>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bd0:	e00a      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bd8:	e006      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bda:	bf00      	nop
 8007bdc:	e004      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bde:	bf00      	nop
 8007be0:	e002      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007be2:	bf00      	nop
 8007be4:	e000      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10b      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bf0:	4ba1      	ldr	r3, [pc, #644]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c00:	4a9d      	ldr	r2, [pc, #628]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c02:	430b      	orrs	r3, r1
 8007c04:	6593      	str	r3, [r2, #88]	; 0x58
 8007c06:	e003      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f002 0308 	and.w	r3, r2, #8
 8007c1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c20:	2300      	movs	r3, #0
 8007c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	d01e      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c3c:	d10c      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c42:	3328      	adds	r3, #40	; 0x28
 8007c44:	2102      	movs	r1, #2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fe54 	bl	80088f4 <RCCEx_PLL3_Config>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c58:	4b87      	ldr	r3, [pc, #540]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c68:	4a83      	ldr	r2, [pc, #524]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f002 0310 	and.w	r3, r2, #16
 8007c7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c84:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	d01e      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c9a:	d10c      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca0:	3328      	adds	r3, #40	; 0x28
 8007ca2:	2102      	movs	r1, #2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fe25 	bl	80088f4 <RCCEx_PLL3_Config>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cb6:	4b70      	ldr	r3, [pc, #448]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cc6:	4a6c      	ldr	r2, [pc, #432]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cc8:	430b      	orrs	r3, r1
 8007cca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ce2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	d03e      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cf8:	d022      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007cfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cfe:	d81b      	bhi.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d08:	d00b      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007d0a:	e015      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d10:	3308      	adds	r3, #8
 8007d12:	2100      	movs	r1, #0
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fd3b 	bl	8008790 <RCCEx_PLL2_Config>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d20:	e00f      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d26:	3328      	adds	r3, #40	; 0x28
 8007d28:	2102      	movs	r1, #2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fde2 	bl	80088f4 <RCCEx_PLL3_Config>
 8007d30:	4603      	mov	r3, r0
 8007d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d36:	e004      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d3e:	e000      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10b      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d4a:	4b4b      	ldr	r3, [pc, #300]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d5a:	4a47      	ldr	r2, [pc, #284]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8007d60:	e003      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007d76:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d78:	2300      	movs	r3, #0
 8007d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d7c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007d80:	460b      	mov	r3, r1
 8007d82:	4313      	orrs	r3, r2
 8007d84:	d03b      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d92:	d01f      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007d94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d98:	d818      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d9e:	d003      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007da0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007da4:	d007      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007da6:	e011      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007da8:	4b33      	ldr	r3, [pc, #204]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	4a32      	ldr	r2, [pc, #200]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007db4:	e00f      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dba:	3328      	adds	r3, #40	; 0x28
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fd98 	bl	80088f4 <RCCEx_PLL3_Config>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007dca:	e004      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dd2:	e000      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10b      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dde:	4b26      	ldr	r3, [pc, #152]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dee:	4a22      	ldr	r2, [pc, #136]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007df0:	430b      	orrs	r3, r1
 8007df2:	6553      	str	r3, [r2, #84]	; 0x54
 8007df4:	e003      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007e0a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	677b      	str	r3, [r7, #116]	; 0x74
 8007e10:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007e14:	460b      	mov	r3, r1
 8007e16:	4313      	orrs	r3, r2
 8007e18:	d034      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e28:	d007      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007e2a:	e011      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e2c:	4b12      	ldr	r3, [pc, #72]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	4a11      	ldr	r2, [pc, #68]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e38:	e00e      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e3e:	3308      	adds	r3, #8
 8007e40:	2102      	movs	r1, #2
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fca4 	bl	8008790 <RCCEx_PLL2_Config>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e4e:	e003      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10d      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e60:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e6e:	4a02      	ldr	r2, [pc, #8]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e70:	430b      	orrs	r3, r1
 8007e72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e74:	e006      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007e76:	bf00      	nop
 8007e78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e92:	2300      	movs	r3, #0
 8007e94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e96:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	d00c      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea4:	3328      	adds	r3, #40	; 0x28
 8007ea6:	2102      	movs	r1, #2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 fd23 	bl	80088f4 <RCCEx_PLL3_Config>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007ec6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ec8:	2300      	movs	r3, #0
 8007eca:	667b      	str	r3, [r7, #100]	; 0x64
 8007ecc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	d038      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ee2:	d018      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ee8:	d811      	bhi.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eee:	d014      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef4:	d80b      	bhi.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d011      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007efe:	d106      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f00:	4bc3      	ldr	r3, [pc, #780]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	4ac2      	ldr	r2, [pc, #776]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007f0c:	e008      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f14:	e004      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f16:	bf00      	nop
 8007f18:	e002      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f1a:	bf00      	nop
 8007f1c:	e000      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10b      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f28:	4bb9      	ldr	r3, [pc, #740]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f38:	4ab5      	ldr	r2, [pc, #724]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f3a:	430b      	orrs	r3, r1
 8007f3c:	6553      	str	r3, [r2, #84]	; 0x54
 8007f3e:	e003      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007f54:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f56:	2300      	movs	r3, #0
 8007f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f5a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4313      	orrs	r3, r2
 8007f62:	d009      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f64:	4baa      	ldr	r3, [pc, #680]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f72:	4aa7      	ldr	r2, [pc, #668]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f74:	430b      	orrs	r3, r1
 8007f76:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007f84:	653b      	str	r3, [r7, #80]	; 0x50
 8007f86:	2300      	movs	r3, #0
 8007f88:	657b      	str	r3, [r7, #84]	; 0x54
 8007f8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4313      	orrs	r3, r2
 8007f92:	d00a      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f94:	4b9e      	ldr	r3, [pc, #632]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007fa4:	4a9a      	ldr	r2, [pc, #616]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fb8:	2300      	movs	r3, #0
 8007fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fbc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	d009      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007fc6:	4b92      	ldr	r3, [pc, #584]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fca:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd4:	4a8e      	ldr	r2, [pc, #568]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fd6:	430b      	orrs	r3, r1
 8007fd8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007fe6:	643b      	str	r3, [r7, #64]	; 0x40
 8007fe8:	2300      	movs	r3, #0
 8007fea:	647b      	str	r3, [r7, #68]	; 0x44
 8007fec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	d00e      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ff6:	4b86      	ldr	r3, [pc, #536]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	4a85      	ldr	r2, [pc, #532]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ffc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008000:	6113      	str	r3, [r2, #16]
 8008002:	4b83      	ldr	r3, [pc, #524]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008004:	6919      	ldr	r1, [r3, #16]
 8008006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800800a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800800e:	4a80      	ldr	r2, [pc, #512]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008010:	430b      	orrs	r3, r1
 8008012:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008020:	63bb      	str	r3, [r7, #56]	; 0x38
 8008022:	2300      	movs	r3, #0
 8008024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008026:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800802a:	460b      	mov	r3, r1
 800802c:	4313      	orrs	r3, r2
 800802e:	d009      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008030:	4b77      	ldr	r3, [pc, #476]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008034:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800803c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803e:	4a74      	ldr	r2, [pc, #464]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008040:	430b      	orrs	r3, r1
 8008042:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008050:	633b      	str	r3, [r7, #48]	; 0x30
 8008052:	2300      	movs	r3, #0
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
 8008056:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800805a:	460b      	mov	r3, r1
 800805c:	4313      	orrs	r3, r2
 800805e:	d00a      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008060:	4b6b      	ldr	r3, [pc, #428]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008064:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800806c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008070:	4a67      	ldr	r2, [pc, #412]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008072:	430b      	orrs	r3, r1
 8008074:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	2100      	movs	r1, #0
 8008080:	62b9      	str	r1, [r7, #40]	; 0x28
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008088:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800808c:	460b      	mov	r3, r1
 800808e:	4313      	orrs	r3, r2
 8008090:	d011      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008096:	3308      	adds	r3, #8
 8008098:	2100      	movs	r1, #0
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fb78 	bl	8008790 <RCCEx_PLL2_Config>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80080a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	2100      	movs	r1, #0
 80080c0:	6239      	str	r1, [r7, #32]
 80080c2:	f003 0302 	and.w	r3, r3, #2
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
 80080c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080cc:	460b      	mov	r3, r1
 80080ce:	4313      	orrs	r3, r2
 80080d0:	d011      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080d6:	3308      	adds	r3, #8
 80080d8:	2101      	movs	r1, #1
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fb58 	bl	8008790 <RCCEx_PLL2_Config>
 80080e0:	4603      	mov	r3, r0
 80080e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80080e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	2100      	movs	r1, #0
 8008100:	61b9      	str	r1, [r7, #24]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	61fb      	str	r3, [r7, #28]
 8008108:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800810c:	460b      	mov	r3, r1
 800810e:	4313      	orrs	r3, r2
 8008110:	d011      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008116:	3308      	adds	r3, #8
 8008118:	2102      	movs	r1, #2
 800811a:	4618      	mov	r0, r3
 800811c:	f000 fb38 	bl	8008790 <RCCEx_PLL2_Config>
 8008120:	4603      	mov	r3, r0
 8008122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008132:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	2100      	movs	r1, #0
 8008140:	6139      	str	r1, [r7, #16]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800814c:	460b      	mov	r3, r1
 800814e:	4313      	orrs	r3, r2
 8008150:	d011      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008156:	3328      	adds	r3, #40	; 0x28
 8008158:	2100      	movs	r1, #0
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fbca 	bl	80088f4 <RCCEx_PLL3_Config>
 8008160:	4603      	mov	r3, r0
 8008162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800816e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008172:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	2100      	movs	r1, #0
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	f003 0310 	and.w	r3, r3, #16
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800818c:	460b      	mov	r3, r1
 800818e:	4313      	orrs	r3, r2
 8008190:	d011      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008196:	3328      	adds	r3, #40	; 0x28
 8008198:	2101      	movs	r1, #1
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fbaa 	bl	80088f4 <RCCEx_PLL3_Config>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80081a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	2100      	movs	r1, #0
 80081c0:	6039      	str	r1, [r7, #0]
 80081c2:	f003 0320 	and.w	r3, r3, #32
 80081c6:	607b      	str	r3, [r7, #4]
 80081c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081cc:	460b      	mov	r3, r1
 80081ce:	4313      	orrs	r3, r2
 80081d0:	d011      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d6:	3328      	adds	r3, #40	; 0x28
 80081d8:	2102      	movs	r1, #2
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fb8a 	bl	80088f4 <RCCEx_PLL3_Config>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80081e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80081f6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	e000      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
}
 8008204:	4618      	mov	r0, r3
 8008206:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800820a:	46bd      	mov	sp, r7
 800820c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008210:	58024400 	.word	0x58024400

08008214 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008218:	f7fe fd96 	bl	8006d48 <HAL_RCC_GetHCLKFreq>
 800821c:	4602      	mov	r2, r0
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	091b      	lsrs	r3, r3, #4
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	4904      	ldr	r1, [pc, #16]	; (800823c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800822a:	5ccb      	ldrb	r3, [r1, r3]
 800822c:	f003 031f 	and.w	r3, r3, #31
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008234:	4618      	mov	r0, r3
 8008236:	bd80      	pop	{r7, pc}
 8008238:	58024400 	.word	0x58024400
 800823c:	0800d814 	.word	0x0800d814

08008240 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008240:	b480      	push	{r7}
 8008242:	b089      	sub	sp, #36	; 0x24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008248:	4ba1      	ldr	r3, [pc, #644]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800824a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824c:	f003 0303 	and.w	r3, r3, #3
 8008250:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008252:	4b9f      	ldr	r3, [pc, #636]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008256:	0b1b      	lsrs	r3, r3, #12
 8008258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800825c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800825e:	4b9c      	ldr	r3, [pc, #624]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	091b      	lsrs	r3, r3, #4
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800826a:	4b99      	ldr	r3, [pc, #612]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826e:	08db      	lsrs	r3, r3, #3
 8008270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	fb02 f303 	mul.w	r3, r2, r3
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008282:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 8111 	beq.w	80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	2b02      	cmp	r3, #2
 8008292:	f000 8083 	beq.w	800839c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	2b02      	cmp	r3, #2
 800829a:	f200 80a1 	bhi.w	80083e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d003      	beq.n	80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d056      	beq.n	8008358 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80082aa:	e099      	b.n	80083e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082ac:	4b88      	ldr	r3, [pc, #544]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0320 	and.w	r3, r3, #32
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d02d      	beq.n	8008314 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082b8:	4b85      	ldr	r3, [pc, #532]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	08db      	lsrs	r3, r3, #3
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	4a84      	ldr	r2, [pc, #528]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80082c4:	fa22 f303 	lsr.w	r3, r2, r3
 80082c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	ee07 3a90 	vmov	s15, r3
 80082d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e2:	4b7b      	ldr	r3, [pc, #492]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008312:	e087      	b.n	8008424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008326:	4b6a      	ldr	r3, [pc, #424]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008336:	ed97 6a03 	vldr	s12, [r7, #12]
 800833a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800833e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800834a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008356:	e065      	b.n	8008424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008362:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800836a:	4b59      	ldr	r3, [pc, #356]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837a:	ed97 6a03 	vldr	s12, [r7, #12]
 800837e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800838a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800838e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800839a:	e043      	b.n	8008424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80083aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ae:	4b48      	ldr	r3, [pc, #288]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083be:	ed97 6a03 	vldr	s12, [r7, #12]
 80083c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083de:	e021      	b.n	8008424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f2:	4b37      	ldr	r3, [pc, #220]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008402:	ed97 6a03 	vldr	s12, [r7, #12]
 8008406:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800840a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800840e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800841a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008422:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008424:	4b2a      	ldr	r3, [pc, #168]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	0a5b      	lsrs	r3, r3, #9
 800842a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800842e:	ee07 3a90 	vmov	s15, r3
 8008432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800843a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800843e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800844a:	ee17 2a90 	vmov	r2, s15
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008452:	4b1f      	ldr	r3, [pc, #124]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008456:	0c1b      	lsrs	r3, r3, #16
 8008458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800845c:	ee07 3a90 	vmov	s15, r3
 8008460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008464:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008468:	ee37 7a87 	vadd.f32	s14, s15, s14
 800846c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008478:	ee17 2a90 	vmov	r2, s15
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008480:	4b13      	ldr	r3, [pc, #76]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	0e1b      	lsrs	r3, r3, #24
 8008486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800849a:	edd7 6a07 	vldr	s13, [r7, #28]
 800849e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a6:	ee17 2a90 	vmov	r2, s15
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80084ae:	e008      	b.n	80084c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	609a      	str	r2, [r3, #8]
}
 80084c2:	bf00      	nop
 80084c4:	3724      	adds	r7, #36	; 0x24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	58024400 	.word	0x58024400
 80084d4:	03d09000 	.word	0x03d09000
 80084d8:	46000000 	.word	0x46000000
 80084dc:	4c742400 	.word	0x4c742400
 80084e0:	4a742400 	.word	0x4a742400
 80084e4:	4bbebc20 	.word	0x4bbebc20

080084e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b089      	sub	sp, #36	; 0x24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084f0:	4ba1      	ldr	r3, [pc, #644]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80084fa:	4b9f      	ldr	r3, [pc, #636]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	0d1b      	lsrs	r3, r3, #20
 8008500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008504:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008506:	4b9c      	ldr	r3, [pc, #624]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850a:	0a1b      	lsrs	r3, r3, #8
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008512:	4b99      	ldr	r3, [pc, #612]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008516:	08db      	lsrs	r3, r3, #3
 8008518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	ee07 3a90 	vmov	s15, r3
 8008526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 8111 	beq.w	8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	2b02      	cmp	r3, #2
 800853a:	f000 8083 	beq.w	8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	2b02      	cmp	r3, #2
 8008542:	f200 80a1 	bhi.w	8008688 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d056      	beq.n	8008600 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008552:	e099      	b.n	8008688 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008554:	4b88      	ldr	r3, [pc, #544]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b00      	cmp	r3, #0
 800855e:	d02d      	beq.n	80085bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008560:	4b85      	ldr	r3, [pc, #532]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	08db      	lsrs	r3, r3, #3
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	4a84      	ldr	r2, [pc, #528]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800856c:	fa22 f303 	lsr.w	r3, r2, r3
 8008570:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	ee07 3a90 	vmov	s15, r3
 8008582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858a:	4b7b      	ldr	r3, [pc, #492]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859a:	ed97 6a03 	vldr	s12, [r7, #12]
 800859e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085ba:	e087      	b.n	80086cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	ee07 3a90 	vmov	s15, r3
 80085c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ce:	4b6a      	ldr	r3, [pc, #424]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d6:	ee07 3a90 	vmov	s15, r3
 80085da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085de:	ed97 6a03 	vldr	s12, [r7, #12]
 80085e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085fe:	e065      	b.n	80086cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	ee07 3a90 	vmov	s15, r3
 8008606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800860e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008612:	4b59      	ldr	r3, [pc, #356]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008622:	ed97 6a03 	vldr	s12, [r7, #12]
 8008626:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800862a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800862e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800863e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008642:	e043      	b.n	80086cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800878c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008656:	4b48      	ldr	r3, [pc, #288]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008666:	ed97 6a03 	vldr	s12, [r7, #12]
 800866a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800866e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800867a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008686:	e021      	b.n	80086cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008692:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800869a:	4b37      	ldr	r3, [pc, #220]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800869c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80086cc:	4b2a      	ldr	r3, [pc, #168]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d0:	0a5b      	lsrs	r3, r3, #9
 80086d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086f2:	ee17 2a90 	vmov	r2, s15
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80086fa:	4b1f      	ldr	r3, [pc, #124]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	0c1b      	lsrs	r3, r3, #16
 8008700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008704:	ee07 3a90 	vmov	s15, r3
 8008708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008710:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008714:	edd7 6a07 	vldr	s13, [r7, #28]
 8008718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800871c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008720:	ee17 2a90 	vmov	r2, s15
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008728:	4b13      	ldr	r3, [pc, #76]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800872a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872c:	0e1b      	lsrs	r3, r3, #24
 800872e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800873e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008742:	edd7 6a07 	vldr	s13, [r7, #28]
 8008746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800874a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800874e:	ee17 2a90 	vmov	r2, s15
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008756:	e008      	b.n	800876a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	609a      	str	r2, [r3, #8]
}
 800876a:	bf00      	nop
 800876c:	3724      	adds	r7, #36	; 0x24
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	58024400 	.word	0x58024400
 800877c:	03d09000 	.word	0x03d09000
 8008780:	46000000 	.word	0x46000000
 8008784:	4c742400 	.word	0x4c742400
 8008788:	4a742400 	.word	0x4a742400
 800878c:	4bbebc20 	.word	0x4bbebc20

08008790 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800879e:	4b53      	ldr	r3, [pc, #332]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 80087a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d101      	bne.n	80087ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e099      	b.n	80088e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80087ae:	4b4f      	ldr	r3, [pc, #316]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a4e      	ldr	r2, [pc, #312]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 80087b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087ba:	f7f9 feff 	bl	80025bc <HAL_GetTick>
 80087be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087c0:	e008      	b.n	80087d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80087c2:	f7f9 fefb 	bl	80025bc <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d901      	bls.n	80087d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e086      	b.n	80088e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087d4:	4b45      	ldr	r3, [pc, #276]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1f0      	bne.n	80087c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80087e0:	4b42      	ldr	r3, [pc, #264]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	031b      	lsls	r3, r3, #12
 80087ee:	493f      	ldr	r1, [pc, #252]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	628b      	str	r3, [r1, #40]	; 0x28
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	3b01      	subs	r3, #1
 80087fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	3b01      	subs	r3, #1
 8008804:	025b      	lsls	r3, r3, #9
 8008806:	b29b      	uxth	r3, r3
 8008808:	431a      	orrs	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	3b01      	subs	r3, #1
 8008810:	041b      	lsls	r3, r3, #16
 8008812:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	3b01      	subs	r3, #1
 800881e:	061b      	lsls	r3, r3, #24
 8008820:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008824:	4931      	ldr	r1, [pc, #196]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 8008826:	4313      	orrs	r3, r2
 8008828:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800882a:	4b30      	ldr	r3, [pc, #192]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	492d      	ldr	r1, [pc, #180]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 8008838:	4313      	orrs	r3, r2
 800883a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800883c:	4b2b      	ldr	r3, [pc, #172]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	f023 0220 	bic.w	r2, r3, #32
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	4928      	ldr	r1, [pc, #160]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 800884a:	4313      	orrs	r3, r2
 800884c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800884e:	4b27      	ldr	r3, [pc, #156]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	4a26      	ldr	r2, [pc, #152]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 8008854:	f023 0310 	bic.w	r3, r3, #16
 8008858:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800885a:	4b24      	ldr	r3, [pc, #144]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 800885c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800885e:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <RCCEx_PLL2_Config+0x160>)
 8008860:	4013      	ands	r3, r2
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	69d2      	ldr	r2, [r2, #28]
 8008866:	00d2      	lsls	r2, r2, #3
 8008868:	4920      	ldr	r1, [pc, #128]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 800886a:	4313      	orrs	r3, r2
 800886c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800886e:	4b1f      	ldr	r3, [pc, #124]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	4a1e      	ldr	r2, [pc, #120]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 8008874:	f043 0310 	orr.w	r3, r3, #16
 8008878:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d106      	bne.n	800888e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008880:	4b1a      	ldr	r3, [pc, #104]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	4a19      	ldr	r2, [pc, #100]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 8008886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800888a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800888c:	e00f      	b.n	80088ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d106      	bne.n	80088a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008894:	4b15      	ldr	r3, [pc, #84]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 8008896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008898:	4a14      	ldr	r2, [pc, #80]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 800889a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800889e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088a0:	e005      	b.n	80088ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80088a2:	4b12      	ldr	r3, [pc, #72]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a6:	4a11      	ldr	r2, [pc, #68]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 80088a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80088ae:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a0e      	ldr	r2, [pc, #56]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 80088b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ba:	f7f9 fe7f 	bl	80025bc <HAL_GetTick>
 80088be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088c0:	e008      	b.n	80088d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088c2:	f7f9 fe7b 	bl	80025bc <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d901      	bls.n	80088d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e006      	b.n	80088e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088d4:	4b05      	ldr	r3, [pc, #20]	; (80088ec <RCCEx_PLL2_Config+0x15c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0f0      	beq.n	80088c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	58024400 	.word	0x58024400
 80088f0:	ffff0007 	.word	0xffff0007

080088f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008902:	4b53      	ldr	r3, [pc, #332]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 8008904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008906:	f003 0303 	and.w	r3, r3, #3
 800890a:	2b03      	cmp	r3, #3
 800890c:	d101      	bne.n	8008912 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e099      	b.n	8008a46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008912:	4b4f      	ldr	r3, [pc, #316]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a4e      	ldr	r2, [pc, #312]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 8008918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800891c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800891e:	f7f9 fe4d 	bl	80025bc <HAL_GetTick>
 8008922:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008924:	e008      	b.n	8008938 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008926:	f7f9 fe49 	bl	80025bc <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	2b02      	cmp	r3, #2
 8008932:	d901      	bls.n	8008938 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	e086      	b.n	8008a46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008938:	4b45      	ldr	r3, [pc, #276]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1f0      	bne.n	8008926 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008944:	4b42      	ldr	r3, [pc, #264]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 8008946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008948:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	051b      	lsls	r3, r3, #20
 8008952:	493f      	ldr	r1, [pc, #252]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 8008954:	4313      	orrs	r3, r2
 8008956:	628b      	str	r3, [r1, #40]	; 0x28
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	3b01      	subs	r3, #1
 800895e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	3b01      	subs	r3, #1
 8008968:	025b      	lsls	r3, r3, #9
 800896a:	b29b      	uxth	r3, r3
 800896c:	431a      	orrs	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	3b01      	subs	r3, #1
 8008974:	041b      	lsls	r3, r3, #16
 8008976:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800897a:	431a      	orrs	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	3b01      	subs	r3, #1
 8008982:	061b      	lsls	r3, r3, #24
 8008984:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008988:	4931      	ldr	r1, [pc, #196]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 800898a:	4313      	orrs	r3, r2
 800898c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800898e:	4b30      	ldr	r3, [pc, #192]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	492d      	ldr	r1, [pc, #180]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 800899c:	4313      	orrs	r3, r2
 800899e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089a0:	4b2b      	ldr	r3, [pc, #172]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	4928      	ldr	r1, [pc, #160]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089b2:	4b27      	ldr	r3, [pc, #156]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b6:	4a26      	ldr	r2, [pc, #152]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089be:	4b24      	ldr	r3, [pc, #144]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089c2:	4b24      	ldr	r3, [pc, #144]	; (8008a54 <RCCEx_PLL3_Config+0x160>)
 80089c4:	4013      	ands	r3, r2
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	69d2      	ldr	r2, [r2, #28]
 80089ca:	00d2      	lsls	r2, r2, #3
 80089cc:	4920      	ldr	r1, [pc, #128]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089d2:	4b1f      	ldr	r3, [pc, #124]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d6:	4a1e      	ldr	r2, [pc, #120]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d106      	bne.n	80089f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089e4:	4b1a      	ldr	r3, [pc, #104]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	4a19      	ldr	r2, [pc, #100]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089f0:	e00f      	b.n	8008a12 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d106      	bne.n	8008a06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089f8:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	4a14      	ldr	r2, [pc, #80]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 80089fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a04:	e005      	b.n	8008a12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a06:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	4a11      	ldr	r2, [pc, #68]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 8008a0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a12:	4b0f      	ldr	r3, [pc, #60]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a0e      	ldr	r2, [pc, #56]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 8008a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a1e:	f7f9 fdcd 	bl	80025bc <HAL_GetTick>
 8008a22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a24:	e008      	b.n	8008a38 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a26:	f7f9 fdc9 	bl	80025bc <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e006      	b.n	8008a46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a38:	4b05      	ldr	r3, [pc, #20]	; (8008a50 <RCCEx_PLL3_Config+0x15c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0f0      	beq.n	8008a26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	58024400 	.word	0x58024400
 8008a54:	ffff0007 	.word	0xffff0007

08008a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e049      	b.n	8008afe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7f9 fa80 	bl	8001f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3304      	adds	r3, #4
 8008a94:	4619      	mov	r1, r3
 8008a96:	4610      	mov	r0, r2
 8008a98:	f001 fa9e 	bl	8009fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d001      	beq.n	8008b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e054      	b.n	8008bca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0201 	orr.w	r2, r2, #1
 8008b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a26      	ldr	r2, [pc, #152]	; (8008bd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d022      	beq.n	8008b88 <HAL_TIM_Base_Start_IT+0x80>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b4a:	d01d      	beq.n	8008b88 <HAL_TIM_Base_Start_IT+0x80>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a22      	ldr	r2, [pc, #136]	; (8008bdc <HAL_TIM_Base_Start_IT+0xd4>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d018      	beq.n	8008b88 <HAL_TIM_Base_Start_IT+0x80>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a21      	ldr	r2, [pc, #132]	; (8008be0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d013      	beq.n	8008b88 <HAL_TIM_Base_Start_IT+0x80>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a1f      	ldr	r2, [pc, #124]	; (8008be4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d00e      	beq.n	8008b88 <HAL_TIM_Base_Start_IT+0x80>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a1e      	ldr	r2, [pc, #120]	; (8008be8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d009      	beq.n	8008b88 <HAL_TIM_Base_Start_IT+0x80>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1c      	ldr	r2, [pc, #112]	; (8008bec <HAL_TIM_Base_Start_IT+0xe4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d004      	beq.n	8008b88 <HAL_TIM_Base_Start_IT+0x80>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a1b      	ldr	r2, [pc, #108]	; (8008bf0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d115      	bne.n	8008bb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	4b19      	ldr	r3, [pc, #100]	; (8008bf4 <HAL_TIM_Base_Start_IT+0xec>)
 8008b90:	4013      	ands	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b06      	cmp	r3, #6
 8008b98:	d015      	beq.n	8008bc6 <HAL_TIM_Base_Start_IT+0xbe>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba0:	d011      	beq.n	8008bc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f042 0201 	orr.w	r2, r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bb2:	e008      	b.n	8008bc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f042 0201 	orr.w	r2, r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	e000      	b.n	8008bc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	40010000 	.word	0x40010000
 8008bdc:	40000400 	.word	0x40000400
 8008be0:	40000800 	.word	0x40000800
 8008be4:	40000c00 	.word	0x40000c00
 8008be8:	40010400 	.word	0x40010400
 8008bec:	40001800 	.word	0x40001800
 8008bf0:	40014000 	.word	0x40014000
 8008bf4:	00010007 	.word	0x00010007

08008bf8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0201 	bic.w	r2, r2, #1
 8008c0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6a1a      	ldr	r2, [r3, #32]
 8008c16:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10f      	bne.n	8008c40 <HAL_TIM_Base_Stop_IT+0x48>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6a1a      	ldr	r2, [r3, #32]
 8008c26:	f240 4344 	movw	r3, #1092	; 0x444
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d107      	bne.n	8008c40 <HAL_TIM_Base_Stop_IT+0x48>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 0201 	bic.w	r2, r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e049      	b.n	8008cfc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d106      	bne.n	8008c82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f841 	bl	8008d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2202      	movs	r2, #2
 8008c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4619      	mov	r1, r3
 8008c94:	4610      	mov	r0, r2
 8008c96:	f001 f99f 	bl	8009fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d109      	bne.n	8008d3c <HAL_TIM_PWM_Start+0x24>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	bf14      	ite	ne
 8008d34:	2301      	movne	r3, #1
 8008d36:	2300      	moveq	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	e03c      	b.n	8008db6 <HAL_TIM_PWM_Start+0x9e>
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d109      	bne.n	8008d56 <HAL_TIM_PWM_Start+0x3e>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	bf14      	ite	ne
 8008d4e:	2301      	movne	r3, #1
 8008d50:	2300      	moveq	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	e02f      	b.n	8008db6 <HAL_TIM_PWM_Start+0x9e>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d109      	bne.n	8008d70 <HAL_TIM_PWM_Start+0x58>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	bf14      	ite	ne
 8008d68:	2301      	movne	r3, #1
 8008d6a:	2300      	moveq	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	e022      	b.n	8008db6 <HAL_TIM_PWM_Start+0x9e>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b0c      	cmp	r3, #12
 8008d74:	d109      	bne.n	8008d8a <HAL_TIM_PWM_Start+0x72>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	bf14      	ite	ne
 8008d82:	2301      	movne	r3, #1
 8008d84:	2300      	moveq	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	e015      	b.n	8008db6 <HAL_TIM_PWM_Start+0x9e>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b10      	cmp	r3, #16
 8008d8e:	d109      	bne.n	8008da4 <HAL_TIM_PWM_Start+0x8c>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	bf14      	ite	ne
 8008d9c:	2301      	movne	r3, #1
 8008d9e:	2300      	moveq	r3, #0
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	e008      	b.n	8008db6 <HAL_TIM_PWM_Start+0x9e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	bf14      	ite	ne
 8008db0:	2301      	movne	r3, #1
 8008db2:	2300      	moveq	r3, #0
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e0a1      	b.n	8008f02 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d104      	bne.n	8008dce <HAL_TIM_PWM_Start+0xb6>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dcc:	e023      	b.n	8008e16 <HAL_TIM_PWM_Start+0xfe>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d104      	bne.n	8008dde <HAL_TIM_PWM_Start+0xc6>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ddc:	e01b      	b.n	8008e16 <HAL_TIM_PWM_Start+0xfe>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d104      	bne.n	8008dee <HAL_TIM_PWM_Start+0xd6>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dec:	e013      	b.n	8008e16 <HAL_TIM_PWM_Start+0xfe>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b0c      	cmp	r3, #12
 8008df2:	d104      	bne.n	8008dfe <HAL_TIM_PWM_Start+0xe6>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dfc:	e00b      	b.n	8008e16 <HAL_TIM_PWM_Start+0xfe>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b10      	cmp	r3, #16
 8008e02:	d104      	bne.n	8008e0e <HAL_TIM_PWM_Start+0xf6>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e0c:	e003      	b.n	8008e16 <HAL_TIM_PWM_Start+0xfe>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2202      	movs	r2, #2
 8008e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f001 fefc 	bl	800ac1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a38      	ldr	r2, [pc, #224]	; (8008f0c <HAL_TIM_PWM_Start+0x1f4>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d013      	beq.n	8008e56 <HAL_TIM_PWM_Start+0x13e>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a37      	ldr	r2, [pc, #220]	; (8008f10 <HAL_TIM_PWM_Start+0x1f8>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00e      	beq.n	8008e56 <HAL_TIM_PWM_Start+0x13e>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a35      	ldr	r2, [pc, #212]	; (8008f14 <HAL_TIM_PWM_Start+0x1fc>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d009      	beq.n	8008e56 <HAL_TIM_PWM_Start+0x13e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a34      	ldr	r2, [pc, #208]	; (8008f18 <HAL_TIM_PWM_Start+0x200>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d004      	beq.n	8008e56 <HAL_TIM_PWM_Start+0x13e>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a32      	ldr	r2, [pc, #200]	; (8008f1c <HAL_TIM_PWM_Start+0x204>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d101      	bne.n	8008e5a <HAL_TIM_PWM_Start+0x142>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <HAL_TIM_PWM_Start+0x144>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d007      	beq.n	8008e70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a25      	ldr	r2, [pc, #148]	; (8008f0c <HAL_TIM_PWM_Start+0x1f4>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d022      	beq.n	8008ec0 <HAL_TIM_PWM_Start+0x1a8>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e82:	d01d      	beq.n	8008ec0 <HAL_TIM_PWM_Start+0x1a8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a25      	ldr	r2, [pc, #148]	; (8008f20 <HAL_TIM_PWM_Start+0x208>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d018      	beq.n	8008ec0 <HAL_TIM_PWM_Start+0x1a8>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a24      	ldr	r2, [pc, #144]	; (8008f24 <HAL_TIM_PWM_Start+0x20c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d013      	beq.n	8008ec0 <HAL_TIM_PWM_Start+0x1a8>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a22      	ldr	r2, [pc, #136]	; (8008f28 <HAL_TIM_PWM_Start+0x210>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00e      	beq.n	8008ec0 <HAL_TIM_PWM_Start+0x1a8>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a1a      	ldr	r2, [pc, #104]	; (8008f10 <HAL_TIM_PWM_Start+0x1f8>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d009      	beq.n	8008ec0 <HAL_TIM_PWM_Start+0x1a8>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a1e      	ldr	r2, [pc, #120]	; (8008f2c <HAL_TIM_PWM_Start+0x214>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d004      	beq.n	8008ec0 <HAL_TIM_PWM_Start+0x1a8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a16      	ldr	r2, [pc, #88]	; (8008f14 <HAL_TIM_PWM_Start+0x1fc>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d115      	bne.n	8008eec <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	689a      	ldr	r2, [r3, #8]
 8008ec6:	4b1a      	ldr	r3, [pc, #104]	; (8008f30 <HAL_TIM_PWM_Start+0x218>)
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b06      	cmp	r3, #6
 8008ed0:	d015      	beq.n	8008efe <HAL_TIM_PWM_Start+0x1e6>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed8:	d011      	beq.n	8008efe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f042 0201 	orr.w	r2, r2, #1
 8008ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eea:	e008      	b.n	8008efe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0201 	orr.w	r2, r2, #1
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	e000      	b.n	8008f00 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	40010000 	.word	0x40010000
 8008f10:	40010400 	.word	0x40010400
 8008f14:	40014000 	.word	0x40014000
 8008f18:	40014400 	.word	0x40014400
 8008f1c:	40014800 	.word	0x40014800
 8008f20:	40000400 	.word	0x40000400
 8008f24:	40000800 	.word	0x40000800
 8008f28:	40000c00 	.word	0x40000c00
 8008f2c:	40001800 	.word	0x40001800
 8008f30:	00010007 	.word	0x00010007

08008f34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e049      	b.n	8008fda <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d106      	bne.n	8008f60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f841 	bl	8008fe2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f001 f830 	bl	8009fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b083      	sub	sp, #12
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
	...

08008ff8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d104      	bne.n	8009012 <HAL_TIM_IC_Start+0x1a>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800900e:	b2db      	uxtb	r3, r3
 8009010:	e023      	b.n	800905a <HAL_TIM_IC_Start+0x62>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b04      	cmp	r3, #4
 8009016:	d104      	bne.n	8009022 <HAL_TIM_IC_Start+0x2a>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800901e:	b2db      	uxtb	r3, r3
 8009020:	e01b      	b.n	800905a <HAL_TIM_IC_Start+0x62>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b08      	cmp	r3, #8
 8009026:	d104      	bne.n	8009032 <HAL_TIM_IC_Start+0x3a>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800902e:	b2db      	uxtb	r3, r3
 8009030:	e013      	b.n	800905a <HAL_TIM_IC_Start+0x62>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2b0c      	cmp	r3, #12
 8009036:	d104      	bne.n	8009042 <HAL_TIM_IC_Start+0x4a>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800903e:	b2db      	uxtb	r3, r3
 8009040:	e00b      	b.n	800905a <HAL_TIM_IC_Start+0x62>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b10      	cmp	r3, #16
 8009046:	d104      	bne.n	8009052 <HAL_TIM_IC_Start+0x5a>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800904e:	b2db      	uxtb	r3, r3
 8009050:	e003      	b.n	800905a <HAL_TIM_IC_Start+0x62>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009058:	b2db      	uxtb	r3, r3
 800905a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d104      	bne.n	800906c <HAL_TIM_IC_Start+0x74>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009068:	b2db      	uxtb	r3, r3
 800906a:	e013      	b.n	8009094 <HAL_TIM_IC_Start+0x9c>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b04      	cmp	r3, #4
 8009070:	d104      	bne.n	800907c <HAL_TIM_IC_Start+0x84>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009078:	b2db      	uxtb	r3, r3
 800907a:	e00b      	b.n	8009094 <HAL_TIM_IC_Start+0x9c>
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2b08      	cmp	r3, #8
 8009080:	d104      	bne.n	800908c <HAL_TIM_IC_Start+0x94>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009088:	b2db      	uxtb	r3, r3
 800908a:	e003      	b.n	8009094 <HAL_TIM_IC_Start+0x9c>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009092:	b2db      	uxtb	r3, r3
 8009094:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d102      	bne.n	80090a2 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d001      	beq.n	80090a6 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e097      	b.n	80091d6 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d104      	bne.n	80090b6 <HAL_TIM_IC_Start+0xbe>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090b4:	e023      	b.n	80090fe <HAL_TIM_IC_Start+0x106>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	d104      	bne.n	80090c6 <HAL_TIM_IC_Start+0xce>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090c4:	e01b      	b.n	80090fe <HAL_TIM_IC_Start+0x106>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d104      	bne.n	80090d6 <HAL_TIM_IC_Start+0xde>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090d4:	e013      	b.n	80090fe <HAL_TIM_IC_Start+0x106>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b0c      	cmp	r3, #12
 80090da:	d104      	bne.n	80090e6 <HAL_TIM_IC_Start+0xee>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090e4:	e00b      	b.n	80090fe <HAL_TIM_IC_Start+0x106>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d104      	bne.n	80090f6 <HAL_TIM_IC_Start+0xfe>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2202      	movs	r2, #2
 80090f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090f4:	e003      	b.n	80090fe <HAL_TIM_IC_Start+0x106>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <HAL_TIM_IC_Start+0x116>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2202      	movs	r2, #2
 8009108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800910c:	e013      	b.n	8009136 <HAL_TIM_IC_Start+0x13e>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b04      	cmp	r3, #4
 8009112:	d104      	bne.n	800911e <HAL_TIM_IC_Start+0x126>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2202      	movs	r2, #2
 8009118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800911c:	e00b      	b.n	8009136 <HAL_TIM_IC_Start+0x13e>
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b08      	cmp	r3, #8
 8009122:	d104      	bne.n	800912e <HAL_TIM_IC_Start+0x136>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2202      	movs	r2, #2
 8009128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800912c:	e003      	b.n	8009136 <HAL_TIM_IC_Start+0x13e>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2202      	movs	r2, #2
 8009132:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2201      	movs	r2, #1
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f001 fd6c 	bl	800ac1c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a25      	ldr	r2, [pc, #148]	; (80091e0 <HAL_TIM_IC_Start+0x1e8>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d022      	beq.n	8009194 <HAL_TIM_IC_Start+0x19c>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009156:	d01d      	beq.n	8009194 <HAL_TIM_IC_Start+0x19c>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a21      	ldr	r2, [pc, #132]	; (80091e4 <HAL_TIM_IC_Start+0x1ec>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d018      	beq.n	8009194 <HAL_TIM_IC_Start+0x19c>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a20      	ldr	r2, [pc, #128]	; (80091e8 <HAL_TIM_IC_Start+0x1f0>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d013      	beq.n	8009194 <HAL_TIM_IC_Start+0x19c>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a1e      	ldr	r2, [pc, #120]	; (80091ec <HAL_TIM_IC_Start+0x1f4>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00e      	beq.n	8009194 <HAL_TIM_IC_Start+0x19c>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a1d      	ldr	r2, [pc, #116]	; (80091f0 <HAL_TIM_IC_Start+0x1f8>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d009      	beq.n	8009194 <HAL_TIM_IC_Start+0x19c>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a1b      	ldr	r2, [pc, #108]	; (80091f4 <HAL_TIM_IC_Start+0x1fc>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d004      	beq.n	8009194 <HAL_TIM_IC_Start+0x19c>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a1a      	ldr	r2, [pc, #104]	; (80091f8 <HAL_TIM_IC_Start+0x200>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d115      	bne.n	80091c0 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	4b18      	ldr	r3, [pc, #96]	; (80091fc <HAL_TIM_IC_Start+0x204>)
 800919c:	4013      	ands	r3, r2
 800919e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2b06      	cmp	r3, #6
 80091a4:	d015      	beq.n	80091d2 <HAL_TIM_IC_Start+0x1da>
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091ac:	d011      	beq.n	80091d2 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f042 0201 	orr.w	r2, r2, #1
 80091bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091be:	e008      	b.n	80091d2 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0201 	orr.w	r2, r2, #1
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	e000      	b.n	80091d4 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	40010000 	.word	0x40010000
 80091e4:	40000400 	.word	0x40000400
 80091e8:	40000800 	.word	0x40000800
 80091ec:	40000c00 	.word	0x40000c00
 80091f0:	40010400 	.word	0x40010400
 80091f4:	40001800 	.word	0x40001800
 80091f8:	40014000 	.word	0x40014000
 80091fc:	00010007 	.word	0x00010007

08009200 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2200      	movs	r2, #0
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	4618      	mov	r0, r3
 8009214:	f001 fd02 	bl	800ac1c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6a1a      	ldr	r2, [r3, #32]
 800921e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009222:	4013      	ands	r3, r2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10f      	bne.n	8009248 <HAL_TIM_IC_Stop+0x48>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6a1a      	ldr	r2, [r3, #32]
 800922e:	f240 4344 	movw	r3, #1092	; 0x444
 8009232:	4013      	ands	r3, r2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d107      	bne.n	8009248 <HAL_TIM_IC_Stop+0x48>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 0201 	bic.w	r2, r2, #1
 8009246:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <HAL_TIM_IC_Stop+0x58>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009256:	e023      	b.n	80092a0 <HAL_TIM_IC_Stop+0xa0>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b04      	cmp	r3, #4
 800925c:	d104      	bne.n	8009268 <HAL_TIM_IC_Stop+0x68>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009266:	e01b      	b.n	80092a0 <HAL_TIM_IC_Stop+0xa0>
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	2b08      	cmp	r3, #8
 800926c:	d104      	bne.n	8009278 <HAL_TIM_IC_Stop+0x78>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009276:	e013      	b.n	80092a0 <HAL_TIM_IC_Stop+0xa0>
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b0c      	cmp	r3, #12
 800927c:	d104      	bne.n	8009288 <HAL_TIM_IC_Stop+0x88>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009286:	e00b      	b.n	80092a0 <HAL_TIM_IC_Stop+0xa0>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b10      	cmp	r3, #16
 800928c:	d104      	bne.n	8009298 <HAL_TIM_IC_Stop+0x98>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009296:	e003      	b.n	80092a0 <HAL_TIM_IC_Stop+0xa0>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d104      	bne.n	80092b0 <HAL_TIM_IC_Stop+0xb0>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092ae:	e013      	b.n	80092d8 <HAL_TIM_IC_Stop+0xd8>
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2b04      	cmp	r3, #4
 80092b4:	d104      	bne.n	80092c0 <HAL_TIM_IC_Stop+0xc0>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092be:	e00b      	b.n	80092d8 <HAL_TIM_IC_Stop+0xd8>
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	2b08      	cmp	r3, #8
 80092c4:	d104      	bne.n	80092d0 <HAL_TIM_IC_Stop+0xd0>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092ce:	e003      	b.n	80092d8 <HAL_TIM_IC_Stop+0xd8>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d104      	bne.n	8009302 <HAL_TIM_IC_Start_IT+0x1e>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	e023      	b.n	800934a <HAL_TIM_IC_Start_IT+0x66>
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b04      	cmp	r3, #4
 8009306:	d104      	bne.n	8009312 <HAL_TIM_IC_Start_IT+0x2e>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800930e:	b2db      	uxtb	r3, r3
 8009310:	e01b      	b.n	800934a <HAL_TIM_IC_Start_IT+0x66>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b08      	cmp	r3, #8
 8009316:	d104      	bne.n	8009322 <HAL_TIM_IC_Start_IT+0x3e>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800931e:	b2db      	uxtb	r3, r3
 8009320:	e013      	b.n	800934a <HAL_TIM_IC_Start_IT+0x66>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b0c      	cmp	r3, #12
 8009326:	d104      	bne.n	8009332 <HAL_TIM_IC_Start_IT+0x4e>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800932e:	b2db      	uxtb	r3, r3
 8009330:	e00b      	b.n	800934a <HAL_TIM_IC_Start_IT+0x66>
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b10      	cmp	r3, #16
 8009336:	d104      	bne.n	8009342 <HAL_TIM_IC_Start_IT+0x5e>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800933e:	b2db      	uxtb	r3, r3
 8009340:	e003      	b.n	800934a <HAL_TIM_IC_Start_IT+0x66>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009348:	b2db      	uxtb	r3, r3
 800934a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d104      	bne.n	800935c <HAL_TIM_IC_Start_IT+0x78>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009358:	b2db      	uxtb	r3, r3
 800935a:	e013      	b.n	8009384 <HAL_TIM_IC_Start_IT+0xa0>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b04      	cmp	r3, #4
 8009360:	d104      	bne.n	800936c <HAL_TIM_IC_Start_IT+0x88>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009368:	b2db      	uxtb	r3, r3
 800936a:	e00b      	b.n	8009384 <HAL_TIM_IC_Start_IT+0xa0>
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2b08      	cmp	r3, #8
 8009370:	d104      	bne.n	800937c <HAL_TIM_IC_Start_IT+0x98>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009378:	b2db      	uxtb	r3, r3
 800937a:	e003      	b.n	8009384 <HAL_TIM_IC_Start_IT+0xa0>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009382:	b2db      	uxtb	r3, r3
 8009384:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d102      	bne.n	8009392 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800938c:	7b7b      	ldrb	r3, [r7, #13]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d001      	beq.n	8009396 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e0e2      	b.n	800955c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <HAL_TIM_IC_Start_IT+0xc2>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2202      	movs	r2, #2
 80093a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093a4:	e023      	b.n	80093ee <HAL_TIM_IC_Start_IT+0x10a>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	d104      	bne.n	80093b6 <HAL_TIM_IC_Start_IT+0xd2>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2202      	movs	r2, #2
 80093b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093b4:	e01b      	b.n	80093ee <HAL_TIM_IC_Start_IT+0x10a>
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	d104      	bne.n	80093c6 <HAL_TIM_IC_Start_IT+0xe2>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093c4:	e013      	b.n	80093ee <HAL_TIM_IC_Start_IT+0x10a>
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b0c      	cmp	r3, #12
 80093ca:	d104      	bne.n	80093d6 <HAL_TIM_IC_Start_IT+0xf2>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2202      	movs	r2, #2
 80093d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093d4:	e00b      	b.n	80093ee <HAL_TIM_IC_Start_IT+0x10a>
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b10      	cmp	r3, #16
 80093da:	d104      	bne.n	80093e6 <HAL_TIM_IC_Start_IT+0x102>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093e4:	e003      	b.n	80093ee <HAL_TIM_IC_Start_IT+0x10a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2202      	movs	r2, #2
 80093ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d104      	bne.n	80093fe <HAL_TIM_IC_Start_IT+0x11a>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093fc:	e013      	b.n	8009426 <HAL_TIM_IC_Start_IT+0x142>
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	2b04      	cmp	r3, #4
 8009402:	d104      	bne.n	800940e <HAL_TIM_IC_Start_IT+0x12a>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2202      	movs	r2, #2
 8009408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800940c:	e00b      	b.n	8009426 <HAL_TIM_IC_Start_IT+0x142>
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b08      	cmp	r3, #8
 8009412:	d104      	bne.n	800941e <HAL_TIM_IC_Start_IT+0x13a>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800941c:	e003      	b.n	8009426 <HAL_TIM_IC_Start_IT+0x142>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2202      	movs	r2, #2
 8009422:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b0c      	cmp	r3, #12
 800942a:	d841      	bhi.n	80094b0 <HAL_TIM_IC_Start_IT+0x1cc>
 800942c:	a201      	add	r2, pc, #4	; (adr r2, 8009434 <HAL_TIM_IC_Start_IT+0x150>)
 800942e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009432:	bf00      	nop
 8009434:	08009469 	.word	0x08009469
 8009438:	080094b1 	.word	0x080094b1
 800943c:	080094b1 	.word	0x080094b1
 8009440:	080094b1 	.word	0x080094b1
 8009444:	0800947b 	.word	0x0800947b
 8009448:	080094b1 	.word	0x080094b1
 800944c:	080094b1 	.word	0x080094b1
 8009450:	080094b1 	.word	0x080094b1
 8009454:	0800948d 	.word	0x0800948d
 8009458:	080094b1 	.word	0x080094b1
 800945c:	080094b1 	.word	0x080094b1
 8009460:	080094b1 	.word	0x080094b1
 8009464:	0800949f 	.word	0x0800949f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68da      	ldr	r2, [r3, #12]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0202 	orr.w	r2, r2, #2
 8009476:	60da      	str	r2, [r3, #12]
      break;
 8009478:	e01d      	b.n	80094b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68da      	ldr	r2, [r3, #12]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f042 0204 	orr.w	r2, r2, #4
 8009488:	60da      	str	r2, [r3, #12]
      break;
 800948a:	e014      	b.n	80094b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f042 0208 	orr.w	r2, r2, #8
 800949a:	60da      	str	r2, [r3, #12]
      break;
 800949c:	e00b      	b.n	80094b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68da      	ldr	r2, [r3, #12]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f042 0210 	orr.w	r2, r2, #16
 80094ac:	60da      	str	r2, [r3, #12]
      break;
 80094ae:	e002      	b.n	80094b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	73fb      	strb	r3, [r7, #15]
      break;
 80094b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d14e      	bne.n	800955a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2201      	movs	r2, #1
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f001 fba9 	bl	800ac1c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a25      	ldr	r2, [pc, #148]	; (8009564 <HAL_TIM_IC_Start_IT+0x280>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d022      	beq.n	800951a <HAL_TIM_IC_Start_IT+0x236>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094dc:	d01d      	beq.n	800951a <HAL_TIM_IC_Start_IT+0x236>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a21      	ldr	r2, [pc, #132]	; (8009568 <HAL_TIM_IC_Start_IT+0x284>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d018      	beq.n	800951a <HAL_TIM_IC_Start_IT+0x236>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a1f      	ldr	r2, [pc, #124]	; (800956c <HAL_TIM_IC_Start_IT+0x288>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d013      	beq.n	800951a <HAL_TIM_IC_Start_IT+0x236>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a1e      	ldr	r2, [pc, #120]	; (8009570 <HAL_TIM_IC_Start_IT+0x28c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d00e      	beq.n	800951a <HAL_TIM_IC_Start_IT+0x236>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a1c      	ldr	r2, [pc, #112]	; (8009574 <HAL_TIM_IC_Start_IT+0x290>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d009      	beq.n	800951a <HAL_TIM_IC_Start_IT+0x236>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a1b      	ldr	r2, [pc, #108]	; (8009578 <HAL_TIM_IC_Start_IT+0x294>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d004      	beq.n	800951a <HAL_TIM_IC_Start_IT+0x236>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a19      	ldr	r2, [pc, #100]	; (800957c <HAL_TIM_IC_Start_IT+0x298>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d115      	bne.n	8009546 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	4b17      	ldr	r3, [pc, #92]	; (8009580 <HAL_TIM_IC_Start_IT+0x29c>)
 8009522:	4013      	ands	r3, r2
 8009524:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	2b06      	cmp	r3, #6
 800952a:	d015      	beq.n	8009558 <HAL_TIM_IC_Start_IT+0x274>
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009532:	d011      	beq.n	8009558 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0201 	orr.w	r2, r2, #1
 8009542:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009544:	e008      	b.n	8009558 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f042 0201 	orr.w	r2, r2, #1
 8009554:	601a      	str	r2, [r3, #0]
 8009556:	e000      	b.n	800955a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009558:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800955a:	7bfb      	ldrb	r3, [r7, #15]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	40010000 	.word	0x40010000
 8009568:	40000400 	.word	0x40000400
 800956c:	40000800 	.word	0x40000800
 8009570:	40000c00 	.word	0x40000c00
 8009574:	40010400 	.word	0x40010400
 8009578:	40001800 	.word	0x40001800
 800957c:	40014000 	.word	0x40014000
 8009580:	00010007 	.word	0x00010007

08009584 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2b0c      	cmp	r3, #12
 8009596:	d841      	bhi.n	800961c <HAL_TIM_IC_Stop_IT+0x98>
 8009598:	a201      	add	r2, pc, #4	; (adr r2, 80095a0 <HAL_TIM_IC_Stop_IT+0x1c>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	080095d5 	.word	0x080095d5
 80095a4:	0800961d 	.word	0x0800961d
 80095a8:	0800961d 	.word	0x0800961d
 80095ac:	0800961d 	.word	0x0800961d
 80095b0:	080095e7 	.word	0x080095e7
 80095b4:	0800961d 	.word	0x0800961d
 80095b8:	0800961d 	.word	0x0800961d
 80095bc:	0800961d 	.word	0x0800961d
 80095c0:	080095f9 	.word	0x080095f9
 80095c4:	0800961d 	.word	0x0800961d
 80095c8:	0800961d 	.word	0x0800961d
 80095cc:	0800961d 	.word	0x0800961d
 80095d0:	0800960b 	.word	0x0800960b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f022 0202 	bic.w	r2, r2, #2
 80095e2:	60da      	str	r2, [r3, #12]
      break;
 80095e4:	e01d      	b.n	8009622 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68da      	ldr	r2, [r3, #12]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 0204 	bic.w	r2, r2, #4
 80095f4:	60da      	str	r2, [r3, #12]
      break;
 80095f6:	e014      	b.n	8009622 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0208 	bic.w	r2, r2, #8
 8009606:	60da      	str	r2, [r3, #12]
      break;
 8009608:	e00b      	b.n	8009622 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68da      	ldr	r2, [r3, #12]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0210 	bic.w	r2, r2, #16
 8009618:	60da      	str	r2, [r3, #12]
      break;
 800961a:	e002      	b.n	8009622 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
      break;
 8009620:	bf00      	nop
  }

  if (status == HAL_OK)
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d166      	bne.n	80096f6 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2200      	movs	r2, #0
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	4618      	mov	r0, r3
 8009632:	f001 faf3 	bl	800ac1c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6a1a      	ldr	r2, [r3, #32]
 800963c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009640:	4013      	ands	r3, r2
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10f      	bne.n	8009666 <HAL_TIM_IC_Stop_IT+0xe2>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6a1a      	ldr	r2, [r3, #32]
 800964c:	f240 4344 	movw	r3, #1092	; 0x444
 8009650:	4013      	ands	r3, r2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d107      	bne.n	8009666 <HAL_TIM_IC_Stop_IT+0xe2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 0201 	bic.w	r2, r2, #1
 8009664:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d104      	bne.n	8009676 <HAL_TIM_IC_Stop_IT+0xf2>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009674:	e023      	b.n	80096be <HAL_TIM_IC_Stop_IT+0x13a>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b04      	cmp	r3, #4
 800967a:	d104      	bne.n	8009686 <HAL_TIM_IC_Stop_IT+0x102>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009684:	e01b      	b.n	80096be <HAL_TIM_IC_Stop_IT+0x13a>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b08      	cmp	r3, #8
 800968a:	d104      	bne.n	8009696 <HAL_TIM_IC_Stop_IT+0x112>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009694:	e013      	b.n	80096be <HAL_TIM_IC_Stop_IT+0x13a>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b0c      	cmp	r3, #12
 800969a:	d104      	bne.n	80096a6 <HAL_TIM_IC_Stop_IT+0x122>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096a4:	e00b      	b.n	80096be <HAL_TIM_IC_Stop_IT+0x13a>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b10      	cmp	r3, #16
 80096aa:	d104      	bne.n	80096b6 <HAL_TIM_IC_Stop_IT+0x132>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096b4:	e003      	b.n	80096be <HAL_TIM_IC_Stop_IT+0x13a>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d104      	bne.n	80096ce <HAL_TIM_IC_Stop_IT+0x14a>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096cc:	e013      	b.n	80096f6 <HAL_TIM_IC_Stop_IT+0x172>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d104      	bne.n	80096de <HAL_TIM_IC_Stop_IT+0x15a>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096dc:	e00b      	b.n	80096f6 <HAL_TIM_IC_Stop_IT+0x172>
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b08      	cmp	r3, #8
 80096e2:	d104      	bne.n	80096ee <HAL_TIM_IC_Stop_IT+0x16a>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096ec:	e003      	b.n	80096f6 <HAL_TIM_IC_Stop_IT+0x172>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b02      	cmp	r3, #2
 8009714:	d122      	bne.n	800975c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b02      	cmp	r3, #2
 8009722:	d11b      	bne.n	800975c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f06f 0202 	mvn.w	r2, #2
 800972c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7f7 fe44 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 8009748:	e005      	b.n	8009756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fc26 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fc2d 	bl	8009fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f003 0304 	and.w	r3, r3, #4
 8009766:	2b04      	cmp	r3, #4
 8009768:	d122      	bne.n	80097b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f003 0304 	and.w	r3, r3, #4
 8009774:	2b04      	cmp	r3, #4
 8009776:	d11b      	bne.n	80097b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f06f 0204 	mvn.w	r2, #4
 8009780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2202      	movs	r2, #2
 8009786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7f7 fe1a 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 800979c:	e005      	b.n	80097aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fbfc 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fc03 	bl	8009fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	f003 0308 	and.w	r3, r3, #8
 80097ba:	2b08      	cmp	r3, #8
 80097bc:	d122      	bne.n	8009804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f003 0308 	and.w	r3, r3, #8
 80097c8:	2b08      	cmp	r3, #8
 80097ca:	d11b      	bne.n	8009804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f06f 0208 	mvn.w	r2, #8
 80097d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2204      	movs	r2, #4
 80097da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	f003 0303 	and.w	r3, r3, #3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7f7 fdf0 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 80097f0:	e005      	b.n	80097fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fbd2 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fbd9 	bl	8009fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	2b10      	cmp	r3, #16
 8009810:	d122      	bne.n	8009858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f003 0310 	and.w	r3, r3, #16
 800981c:	2b10      	cmp	r3, #16
 800981e:	d11b      	bne.n	8009858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f06f 0210 	mvn.w	r2, #16
 8009828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2208      	movs	r2, #8
 800982e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7f7 fdc6 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 8009844:	e005      	b.n	8009852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fba8 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fbaf 	bl	8009fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b01      	cmp	r3, #1
 8009864:	d10e      	bne.n	8009884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b01      	cmp	r3, #1
 8009872:	d107      	bne.n	8009884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f06f 0201 	mvn.w	r2, #1
 800987c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7f7 fd78 	bl	8001374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800988e:	2b80      	cmp	r3, #128	; 0x80
 8009890:	d10e      	bne.n	80098b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989c:	2b80      	cmp	r3, #128	; 0x80
 800989e:	d107      	bne.n	80098b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 fa74 	bl	800ad98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098be:	d10e      	bne.n	80098de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ca:	2b80      	cmp	r3, #128	; 0x80
 80098cc:	d107      	bne.n	80098de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80098d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 fa67 	bl	800adac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e8:	2b40      	cmp	r3, #64	; 0x40
 80098ea:	d10e      	bne.n	800990a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f6:	2b40      	cmp	r3, #64	; 0x40
 80098f8:	d107      	bne.n	800990a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fb5d 	bl	8009fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	f003 0320 	and.w	r3, r3, #32
 8009914:	2b20      	cmp	r3, #32
 8009916:	d10e      	bne.n	8009936 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b20      	cmp	r3, #32
 8009924:	d107      	bne.n	8009936 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f06f 0220 	mvn.w	r2, #32
 800992e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f001 fa27 	bl	800ad84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009936:	bf00      	nop
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b086      	sub	sp, #24
 8009942:	af00      	add	r7, sp, #0
 8009944:	60f8      	str	r0, [r7, #12]
 8009946:	60b9      	str	r1, [r7, #8]
 8009948:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009954:	2b01      	cmp	r3, #1
 8009956:	d101      	bne.n	800995c <HAL_TIM_IC_ConfigChannel+0x1e>
 8009958:	2302      	movs	r3, #2
 800995a:	e088      	b.n	8009a6e <HAL_TIM_IC_ConfigChannel+0x130>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d11b      	bne.n	80099a2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800997a:	f000 ff87 	bl	800a88c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	699a      	ldr	r2, [r3, #24]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f022 020c 	bic.w	r2, r2, #12
 800998c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6999      	ldr	r1, [r3, #24]
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	619a      	str	r2, [r3, #24]
 80099a0:	e060      	b.n	8009a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	d11c      	bne.n	80099e2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80099b8:	f001 f80b 	bl	800a9d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	699a      	ldr	r2, [r3, #24]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80099ca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6999      	ldr	r1, [r3, #24]
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	021a      	lsls	r2, r3, #8
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	430a      	orrs	r2, r1
 80099de:	619a      	str	r2, [r3, #24]
 80099e0:	e040      	b.n	8009a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b08      	cmp	r3, #8
 80099e6:	d11b      	bne.n	8009a20 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80099f8:	f001 f858 	bl	800aaac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	69da      	ldr	r2, [r3, #28]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 020c 	bic.w	r2, r2, #12
 8009a0a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	69d9      	ldr	r1, [r3, #28]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	61da      	str	r2, [r3, #28]
 8009a1e:	e021      	b.n	8009a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b0c      	cmp	r3, #12
 8009a24:	d11c      	bne.n	8009a60 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009a36:	f001 f875 	bl	800ab24 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69da      	ldr	r2, [r3, #28]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009a48:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	69d9      	ldr	r1, [r3, #28]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	021a      	lsls	r2, r3, #8
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	61da      	str	r2, [r3, #28]
 8009a5e:	e001      	b.n	8009a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d101      	bne.n	8009a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a92:	2302      	movs	r3, #2
 8009a94:	e0ff      	b.n	8009c96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b14      	cmp	r3, #20
 8009aa2:	f200 80f0 	bhi.w	8009c86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009aa6:	a201      	add	r2, pc, #4	; (adr r2, 8009aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009b01 	.word	0x08009b01
 8009ab0:	08009c87 	.word	0x08009c87
 8009ab4:	08009c87 	.word	0x08009c87
 8009ab8:	08009c87 	.word	0x08009c87
 8009abc:	08009b41 	.word	0x08009b41
 8009ac0:	08009c87 	.word	0x08009c87
 8009ac4:	08009c87 	.word	0x08009c87
 8009ac8:	08009c87 	.word	0x08009c87
 8009acc:	08009b83 	.word	0x08009b83
 8009ad0:	08009c87 	.word	0x08009c87
 8009ad4:	08009c87 	.word	0x08009c87
 8009ad8:	08009c87 	.word	0x08009c87
 8009adc:	08009bc3 	.word	0x08009bc3
 8009ae0:	08009c87 	.word	0x08009c87
 8009ae4:	08009c87 	.word	0x08009c87
 8009ae8:	08009c87 	.word	0x08009c87
 8009aec:	08009c05 	.word	0x08009c05
 8009af0:	08009c87 	.word	0x08009c87
 8009af4:	08009c87 	.word	0x08009c87
 8009af8:	08009c87 	.word	0x08009c87
 8009afc:	08009c45 	.word	0x08009c45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68b9      	ldr	r1, [r7, #8]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 fb00 	bl	800a10c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	699a      	ldr	r2, [r3, #24]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f042 0208 	orr.w	r2, r2, #8
 8009b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	699a      	ldr	r2, [r3, #24]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f022 0204 	bic.w	r2, r2, #4
 8009b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6999      	ldr	r1, [r3, #24]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	691a      	ldr	r2, [r3, #16]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	619a      	str	r2, [r3, #24]
      break;
 8009b3e:	e0a5      	b.n	8009c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68b9      	ldr	r1, [r7, #8]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fb70 	bl	800a22c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	699a      	ldr	r2, [r3, #24]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6999      	ldr	r1, [r3, #24]
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	021a      	lsls	r2, r3, #8
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	619a      	str	r2, [r3, #24]
      break;
 8009b80:	e084      	b.n	8009c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68b9      	ldr	r1, [r7, #8]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f000 fbd9 	bl	800a340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69da      	ldr	r2, [r3, #28]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f042 0208 	orr.w	r2, r2, #8
 8009b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69da      	ldr	r2, [r3, #28]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f022 0204 	bic.w	r2, r2, #4
 8009bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	69d9      	ldr	r1, [r3, #28]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	691a      	ldr	r2, [r3, #16]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	61da      	str	r2, [r3, #28]
      break;
 8009bc0:	e064      	b.n	8009c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68b9      	ldr	r1, [r7, #8]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fc41 	bl	800a450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69da      	ldr	r2, [r3, #28]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	69da      	ldr	r2, [r3, #28]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	69d9      	ldr	r1, [r3, #28]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	021a      	lsls	r2, r3, #8
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	61da      	str	r2, [r3, #28]
      break;
 8009c02:	e043      	b.n	8009c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68b9      	ldr	r1, [r7, #8]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fc8a 	bl	800a524 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f042 0208 	orr.w	r2, r2, #8
 8009c1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f022 0204 	bic.w	r2, r2, #4
 8009c2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	691a      	ldr	r2, [r3, #16]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009c42:	e023      	b.n	8009c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68b9      	ldr	r1, [r7, #8]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 fcce 	bl	800a5ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	021a      	lsls	r2, r3, #8
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009c84:	e002      	b.n	8009c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	75fb      	strb	r3, [r7, #23]
      break;
 8009c8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop

08009ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d101      	bne.n	8009cbc <HAL_TIM_ConfigClockSource+0x1c>
 8009cb8:	2302      	movs	r3, #2
 8009cba:	e0dc      	b.n	8009e76 <HAL_TIM_ConfigClockSource+0x1d6>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	4b6a      	ldr	r3, [pc, #424]	; (8009e80 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009cd8:	4013      	ands	r3, r2
 8009cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a64      	ldr	r2, [pc, #400]	; (8009e84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	f000 80a9 	beq.w	8009e4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009cf8:	4a62      	ldr	r2, [pc, #392]	; (8009e84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	f200 80ae 	bhi.w	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d00:	4a61      	ldr	r2, [pc, #388]	; (8009e88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	f000 80a1 	beq.w	8009e4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009d08:	4a5f      	ldr	r2, [pc, #380]	; (8009e88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	f200 80a6 	bhi.w	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d10:	4a5e      	ldr	r2, [pc, #376]	; (8009e8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	f000 8099 	beq.w	8009e4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009d18:	4a5c      	ldr	r2, [pc, #368]	; (8009e8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	f200 809e 	bhi.w	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d24:	f000 8091 	beq.w	8009e4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009d28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d2c:	f200 8096 	bhi.w	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d34:	f000 8089 	beq.w	8009e4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d3c:	f200 808e 	bhi.w	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d44:	d03e      	beq.n	8009dc4 <HAL_TIM_ConfigClockSource+0x124>
 8009d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d4a:	f200 8087 	bhi.w	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d52:	f000 8086 	beq.w	8009e62 <HAL_TIM_ConfigClockSource+0x1c2>
 8009d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d5a:	d87f      	bhi.n	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d5c:	2b70      	cmp	r3, #112	; 0x70
 8009d5e:	d01a      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0xf6>
 8009d60:	2b70      	cmp	r3, #112	; 0x70
 8009d62:	d87b      	bhi.n	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d64:	2b60      	cmp	r3, #96	; 0x60
 8009d66:	d050      	beq.n	8009e0a <HAL_TIM_ConfigClockSource+0x16a>
 8009d68:	2b60      	cmp	r3, #96	; 0x60
 8009d6a:	d877      	bhi.n	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d6c:	2b50      	cmp	r3, #80	; 0x50
 8009d6e:	d03c      	beq.n	8009dea <HAL_TIM_ConfigClockSource+0x14a>
 8009d70:	2b50      	cmp	r3, #80	; 0x50
 8009d72:	d873      	bhi.n	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d74:	2b40      	cmp	r3, #64	; 0x40
 8009d76:	d058      	beq.n	8009e2a <HAL_TIM_ConfigClockSource+0x18a>
 8009d78:	2b40      	cmp	r3, #64	; 0x40
 8009d7a:	d86f      	bhi.n	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d7c:	2b30      	cmp	r3, #48	; 0x30
 8009d7e:	d064      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009d80:	2b30      	cmp	r3, #48	; 0x30
 8009d82:	d86b      	bhi.n	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	d060      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	d867      	bhi.n	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d05c      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009d90:	2b10      	cmp	r3, #16
 8009d92:	d05a      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009d94:	e062      	b.n	8009e5c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009da6:	f000 ff19 	bl	800abdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009db8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	609a      	str	r2, [r3, #8]
      break;
 8009dc2:	e04f      	b.n	8009e64 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009dd4:	f000 ff02 	bl	800abdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689a      	ldr	r2, [r3, #8]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009de6:	609a      	str	r2, [r3, #8]
      break;
 8009de8:	e03c      	b.n	8009e64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009df6:	461a      	mov	r2, r3
 8009df8:	f000 fdbc 	bl	800a974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2150      	movs	r1, #80	; 0x50
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 fecc 	bl	800aba0 <TIM_ITRx_SetConfig>
      break;
 8009e08:	e02c      	b.n	8009e64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e16:	461a      	mov	r2, r3
 8009e18:	f000 fe18 	bl	800aa4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2160      	movs	r1, #96	; 0x60
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 febc 	bl	800aba0 <TIM_ITRx_SetConfig>
      break;
 8009e28:	e01c      	b.n	8009e64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e36:	461a      	mov	r2, r3
 8009e38:	f000 fd9c 	bl	800a974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2140      	movs	r1, #64	; 0x40
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 feac 	bl	800aba0 <TIM_ITRx_SetConfig>
      break;
 8009e48:	e00c      	b.n	8009e64 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4619      	mov	r1, r3
 8009e54:	4610      	mov	r0, r2
 8009e56:	f000 fea3 	bl	800aba0 <TIM_ITRx_SetConfig>
      break;
 8009e5a:	e003      	b.n	8009e64 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e60:	e000      	b.n	8009e64 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	ffceff88 	.word	0xffceff88
 8009e84:	00100040 	.word	0x00100040
 8009e88:	00100030 	.word	0x00100030
 8009e8c:	00100020 	.word	0x00100020

08009e90 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d101      	bne.n	8009ea8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	e031      	b.n	8009f0c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fbfc 	bl	800a6b8 <TIM_SlaveTimer_SetConfig>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d009      	beq.n	8009eda <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e018      	b.n	8009f0c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68da      	ldr	r2, [r3, #12]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ee8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68da      	ldr	r2, [r3, #12]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ef8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b0c      	cmp	r3, #12
 8009f26:	d831      	bhi.n	8009f8c <HAL_TIM_ReadCapturedValue+0x78>
 8009f28:	a201      	add	r2, pc, #4	; (adr r2, 8009f30 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2e:	bf00      	nop
 8009f30:	08009f65 	.word	0x08009f65
 8009f34:	08009f8d 	.word	0x08009f8d
 8009f38:	08009f8d 	.word	0x08009f8d
 8009f3c:	08009f8d 	.word	0x08009f8d
 8009f40:	08009f6f 	.word	0x08009f6f
 8009f44:	08009f8d 	.word	0x08009f8d
 8009f48:	08009f8d 	.word	0x08009f8d
 8009f4c:	08009f8d 	.word	0x08009f8d
 8009f50:	08009f79 	.word	0x08009f79
 8009f54:	08009f8d 	.word	0x08009f8d
 8009f58:	08009f8d 	.word	0x08009f8d
 8009f5c:	08009f8d 	.word	0x08009f8d
 8009f60:	08009f83 	.word	0x08009f83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6a:	60fb      	str	r3, [r7, #12]

      break;
 8009f6c:	e00f      	b.n	8009f8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f74:	60fb      	str	r3, [r7, #12]

      break;
 8009f76:	e00a      	b.n	8009f8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7e:	60fb      	str	r3, [r7, #12]

      break;
 8009f80:	e005      	b.n	8009f8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f88:	60fb      	str	r3, [r7, #12]

      break;
 8009f8a:	e000      	b.n	8009f8e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009f8c:	bf00      	nop
  }

  return tmpreg;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a40      	ldr	r2, [pc, #256]	; (800a0ec <TIM_Base_SetConfig+0x114>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d013      	beq.n	800a018 <TIM_Base_SetConfig+0x40>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ff6:	d00f      	beq.n	800a018 <TIM_Base_SetConfig+0x40>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a3d      	ldr	r2, [pc, #244]	; (800a0f0 <TIM_Base_SetConfig+0x118>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d00b      	beq.n	800a018 <TIM_Base_SetConfig+0x40>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a3c      	ldr	r2, [pc, #240]	; (800a0f4 <TIM_Base_SetConfig+0x11c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d007      	beq.n	800a018 <TIM_Base_SetConfig+0x40>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a3b      	ldr	r2, [pc, #236]	; (800a0f8 <TIM_Base_SetConfig+0x120>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d003      	beq.n	800a018 <TIM_Base_SetConfig+0x40>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a3a      	ldr	r2, [pc, #232]	; (800a0fc <TIM_Base_SetConfig+0x124>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d108      	bne.n	800a02a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a2f      	ldr	r2, [pc, #188]	; (800a0ec <TIM_Base_SetConfig+0x114>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d01f      	beq.n	800a072 <TIM_Base_SetConfig+0x9a>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a038:	d01b      	beq.n	800a072 <TIM_Base_SetConfig+0x9a>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a2c      	ldr	r2, [pc, #176]	; (800a0f0 <TIM_Base_SetConfig+0x118>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d017      	beq.n	800a072 <TIM_Base_SetConfig+0x9a>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a2b      	ldr	r2, [pc, #172]	; (800a0f4 <TIM_Base_SetConfig+0x11c>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d013      	beq.n	800a072 <TIM_Base_SetConfig+0x9a>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a2a      	ldr	r2, [pc, #168]	; (800a0f8 <TIM_Base_SetConfig+0x120>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d00f      	beq.n	800a072 <TIM_Base_SetConfig+0x9a>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a29      	ldr	r2, [pc, #164]	; (800a0fc <TIM_Base_SetConfig+0x124>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d00b      	beq.n	800a072 <TIM_Base_SetConfig+0x9a>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a28      	ldr	r2, [pc, #160]	; (800a100 <TIM_Base_SetConfig+0x128>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d007      	beq.n	800a072 <TIM_Base_SetConfig+0x9a>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a27      	ldr	r2, [pc, #156]	; (800a104 <TIM_Base_SetConfig+0x12c>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d003      	beq.n	800a072 <TIM_Base_SetConfig+0x9a>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a26      	ldr	r2, [pc, #152]	; (800a108 <TIM_Base_SetConfig+0x130>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d108      	bne.n	800a084 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	4313      	orrs	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	4313      	orrs	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	689a      	ldr	r2, [r3, #8]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a10      	ldr	r2, [pc, #64]	; (800a0ec <TIM_Base_SetConfig+0x114>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d00f      	beq.n	800a0d0 <TIM_Base_SetConfig+0xf8>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a12      	ldr	r2, [pc, #72]	; (800a0fc <TIM_Base_SetConfig+0x124>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d00b      	beq.n	800a0d0 <TIM_Base_SetConfig+0xf8>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a11      	ldr	r2, [pc, #68]	; (800a100 <TIM_Base_SetConfig+0x128>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d007      	beq.n	800a0d0 <TIM_Base_SetConfig+0xf8>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a10      	ldr	r2, [pc, #64]	; (800a104 <TIM_Base_SetConfig+0x12c>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d003      	beq.n	800a0d0 <TIM_Base_SetConfig+0xf8>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a0f      	ldr	r2, [pc, #60]	; (800a108 <TIM_Base_SetConfig+0x130>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d103      	bne.n	800a0d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	691a      	ldr	r2, [r3, #16]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	615a      	str	r2, [r3, #20]
}
 800a0de:	bf00      	nop
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	40010000 	.word	0x40010000
 800a0f0:	40000400 	.word	0x40000400
 800a0f4:	40000800 	.word	0x40000800
 800a0f8:	40000c00 	.word	0x40000c00
 800a0fc:	40010400 	.word	0x40010400
 800a100:	40014000 	.word	0x40014000
 800a104:	40014400 	.word	0x40014400
 800a108:	40014800 	.word	0x40014800

0800a10c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b087      	sub	sp, #28
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	f023 0201 	bic.w	r2, r3, #1
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	4b37      	ldr	r3, [pc, #220]	; (800a214 <TIM_OC1_SetConfig+0x108>)
 800a138:	4013      	ands	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f023 0303 	bic.w	r3, r3, #3
 800a142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f023 0302 	bic.w	r3, r3, #2
 800a154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a2d      	ldr	r2, [pc, #180]	; (800a218 <TIM_OC1_SetConfig+0x10c>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d00f      	beq.n	800a188 <TIM_OC1_SetConfig+0x7c>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a2c      	ldr	r2, [pc, #176]	; (800a21c <TIM_OC1_SetConfig+0x110>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d00b      	beq.n	800a188 <TIM_OC1_SetConfig+0x7c>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a2b      	ldr	r2, [pc, #172]	; (800a220 <TIM_OC1_SetConfig+0x114>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d007      	beq.n	800a188 <TIM_OC1_SetConfig+0x7c>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a2a      	ldr	r2, [pc, #168]	; (800a224 <TIM_OC1_SetConfig+0x118>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d003      	beq.n	800a188 <TIM_OC1_SetConfig+0x7c>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a29      	ldr	r2, [pc, #164]	; (800a228 <TIM_OC1_SetConfig+0x11c>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d10c      	bne.n	800a1a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	f023 0308 	bic.w	r3, r3, #8
 800a18e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	4313      	orrs	r3, r2
 800a198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f023 0304 	bic.w	r3, r3, #4
 800a1a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a1c      	ldr	r2, [pc, #112]	; (800a218 <TIM_OC1_SetConfig+0x10c>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d00f      	beq.n	800a1ca <TIM_OC1_SetConfig+0xbe>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a1b      	ldr	r2, [pc, #108]	; (800a21c <TIM_OC1_SetConfig+0x110>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d00b      	beq.n	800a1ca <TIM_OC1_SetConfig+0xbe>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a1a      	ldr	r2, [pc, #104]	; (800a220 <TIM_OC1_SetConfig+0x114>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d007      	beq.n	800a1ca <TIM_OC1_SetConfig+0xbe>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a19      	ldr	r2, [pc, #100]	; (800a224 <TIM_OC1_SetConfig+0x118>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d003      	beq.n	800a1ca <TIM_OC1_SetConfig+0xbe>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a18      	ldr	r2, [pc, #96]	; (800a228 <TIM_OC1_SetConfig+0x11c>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d111      	bne.n	800a1ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	621a      	str	r2, [r3, #32]
}
 800a208:	bf00      	nop
 800a20a:	371c      	adds	r7, #28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	fffeff8f 	.word	0xfffeff8f
 800a218:	40010000 	.word	0x40010000
 800a21c:	40010400 	.word	0x40010400
 800a220:	40014000 	.word	0x40014000
 800a224:	40014400 	.word	0x40014400
 800a228:	40014800 	.word	0x40014800

0800a22c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	f023 0210 	bic.w	r2, r3, #16
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	4b34      	ldr	r3, [pc, #208]	; (800a328 <TIM_OC2_SetConfig+0xfc>)
 800a258:	4013      	ands	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	021b      	lsls	r3, r3, #8
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	f023 0320 	bic.w	r3, r3, #32
 800a276:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	011b      	lsls	r3, r3, #4
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	4313      	orrs	r3, r2
 800a282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a29      	ldr	r2, [pc, #164]	; (800a32c <TIM_OC2_SetConfig+0x100>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d003      	beq.n	800a294 <TIM_OC2_SetConfig+0x68>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a28      	ldr	r2, [pc, #160]	; (800a330 <TIM_OC2_SetConfig+0x104>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d10d      	bne.n	800a2b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a29a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	011b      	lsls	r3, r3, #4
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a1e      	ldr	r2, [pc, #120]	; (800a32c <TIM_OC2_SetConfig+0x100>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d00f      	beq.n	800a2d8 <TIM_OC2_SetConfig+0xac>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a1d      	ldr	r2, [pc, #116]	; (800a330 <TIM_OC2_SetConfig+0x104>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d00b      	beq.n	800a2d8 <TIM_OC2_SetConfig+0xac>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a1c      	ldr	r2, [pc, #112]	; (800a334 <TIM_OC2_SetConfig+0x108>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d007      	beq.n	800a2d8 <TIM_OC2_SetConfig+0xac>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a1b      	ldr	r2, [pc, #108]	; (800a338 <TIM_OC2_SetConfig+0x10c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d003      	beq.n	800a2d8 <TIM_OC2_SetConfig+0xac>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a1a      	ldr	r2, [pc, #104]	; (800a33c <TIM_OC2_SetConfig+0x110>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d113      	bne.n	800a300 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	621a      	str	r2, [r3, #32]
}
 800a31a:	bf00      	nop
 800a31c:	371c      	adds	r7, #28
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	feff8fff 	.word	0xfeff8fff
 800a32c:	40010000 	.word	0x40010000
 800a330:	40010400 	.word	0x40010400
 800a334:	40014000 	.word	0x40014000
 800a338:	40014400 	.word	0x40014400
 800a33c:	40014800 	.word	0x40014800

0800a340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4b33      	ldr	r3, [pc, #204]	; (800a438 <TIM_OC3_SetConfig+0xf8>)
 800a36c:	4013      	ands	r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f023 0303 	bic.w	r3, r3, #3
 800a376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	021b      	lsls	r3, r3, #8
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	4313      	orrs	r3, r2
 800a394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a28      	ldr	r2, [pc, #160]	; (800a43c <TIM_OC3_SetConfig+0xfc>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d003      	beq.n	800a3a6 <TIM_OC3_SetConfig+0x66>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a27      	ldr	r2, [pc, #156]	; (800a440 <TIM_OC3_SetConfig+0x100>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d10d      	bne.n	800a3c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	021b      	lsls	r3, r3, #8
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a1d      	ldr	r2, [pc, #116]	; (800a43c <TIM_OC3_SetConfig+0xfc>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d00f      	beq.n	800a3ea <TIM_OC3_SetConfig+0xaa>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a1c      	ldr	r2, [pc, #112]	; (800a440 <TIM_OC3_SetConfig+0x100>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d00b      	beq.n	800a3ea <TIM_OC3_SetConfig+0xaa>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a1b      	ldr	r2, [pc, #108]	; (800a444 <TIM_OC3_SetConfig+0x104>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d007      	beq.n	800a3ea <TIM_OC3_SetConfig+0xaa>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a1a      	ldr	r2, [pc, #104]	; (800a448 <TIM_OC3_SetConfig+0x108>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d003      	beq.n	800a3ea <TIM_OC3_SetConfig+0xaa>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a19      	ldr	r2, [pc, #100]	; (800a44c <TIM_OC3_SetConfig+0x10c>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d113      	bne.n	800a412 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	4313      	orrs	r3, r2
 800a404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	011b      	lsls	r3, r3, #4
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	4313      	orrs	r3, r2
 800a410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	621a      	str	r2, [r3, #32]
}
 800a42c:	bf00      	nop
 800a42e:	371c      	adds	r7, #28
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	fffeff8f 	.word	0xfffeff8f
 800a43c:	40010000 	.word	0x40010000
 800a440:	40010400 	.word	0x40010400
 800a444:	40014000 	.word	0x40014000
 800a448:	40014400 	.word	0x40014400
 800a44c:	40014800 	.word	0x40014800

0800a450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	4b24      	ldr	r3, [pc, #144]	; (800a50c <TIM_OC4_SetConfig+0xbc>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	021b      	lsls	r3, r3, #8
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	4313      	orrs	r3, r2
 800a492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a49a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	031b      	lsls	r3, r3, #12
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a19      	ldr	r2, [pc, #100]	; (800a510 <TIM_OC4_SetConfig+0xc0>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d00f      	beq.n	800a4d0 <TIM_OC4_SetConfig+0x80>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a18      	ldr	r2, [pc, #96]	; (800a514 <TIM_OC4_SetConfig+0xc4>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d00b      	beq.n	800a4d0 <TIM_OC4_SetConfig+0x80>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a17      	ldr	r2, [pc, #92]	; (800a518 <TIM_OC4_SetConfig+0xc8>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d007      	beq.n	800a4d0 <TIM_OC4_SetConfig+0x80>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a16      	ldr	r2, [pc, #88]	; (800a51c <TIM_OC4_SetConfig+0xcc>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d003      	beq.n	800a4d0 <TIM_OC4_SetConfig+0x80>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a15      	ldr	r2, [pc, #84]	; (800a520 <TIM_OC4_SetConfig+0xd0>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d109      	bne.n	800a4e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	695b      	ldr	r3, [r3, #20]
 800a4dc:	019b      	lsls	r3, r3, #6
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	621a      	str	r2, [r3, #32]
}
 800a4fe:	bf00      	nop
 800a500:	371c      	adds	r7, #28
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	feff8fff 	.word	0xfeff8fff
 800a510:	40010000 	.word	0x40010000
 800a514:	40010400 	.word	0x40010400
 800a518:	40014000 	.word	0x40014000
 800a51c:	40014400 	.word	0x40014400
 800a520:	40014800 	.word	0x40014800

0800a524 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4b21      	ldr	r3, [pc, #132]	; (800a5d4 <TIM_OC5_SetConfig+0xb0>)
 800a550:	4013      	ands	r3, r2
 800a552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a564:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	041b      	lsls	r3, r3, #16
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	4313      	orrs	r3, r2
 800a570:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a18      	ldr	r2, [pc, #96]	; (800a5d8 <TIM_OC5_SetConfig+0xb4>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d00f      	beq.n	800a59a <TIM_OC5_SetConfig+0x76>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a17      	ldr	r2, [pc, #92]	; (800a5dc <TIM_OC5_SetConfig+0xb8>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d00b      	beq.n	800a59a <TIM_OC5_SetConfig+0x76>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a16      	ldr	r2, [pc, #88]	; (800a5e0 <TIM_OC5_SetConfig+0xbc>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d007      	beq.n	800a59a <TIM_OC5_SetConfig+0x76>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a15      	ldr	r2, [pc, #84]	; (800a5e4 <TIM_OC5_SetConfig+0xc0>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d003      	beq.n	800a59a <TIM_OC5_SetConfig+0x76>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a14      	ldr	r2, [pc, #80]	; (800a5e8 <TIM_OC5_SetConfig+0xc4>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d109      	bne.n	800a5ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	021b      	lsls	r3, r3, #8
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	621a      	str	r2, [r3, #32]
}
 800a5c8:	bf00      	nop
 800a5ca:	371c      	adds	r7, #28
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	fffeff8f 	.word	0xfffeff8f
 800a5d8:	40010000 	.word	0x40010000
 800a5dc:	40010400 	.word	0x40010400
 800a5e0:	40014000 	.word	0x40014000
 800a5e4:	40014400 	.word	0x40014400
 800a5e8:	40014800 	.word	0x40014800

0800a5ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4b22      	ldr	r3, [pc, #136]	; (800a6a0 <TIM_OC6_SetConfig+0xb4>)
 800a618:	4013      	ands	r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	021b      	lsls	r3, r3, #8
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	4313      	orrs	r3, r2
 800a626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a62e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	051b      	lsls	r3, r3, #20
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	4313      	orrs	r3, r2
 800a63a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a19      	ldr	r2, [pc, #100]	; (800a6a4 <TIM_OC6_SetConfig+0xb8>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00f      	beq.n	800a664 <TIM_OC6_SetConfig+0x78>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a18      	ldr	r2, [pc, #96]	; (800a6a8 <TIM_OC6_SetConfig+0xbc>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d00b      	beq.n	800a664 <TIM_OC6_SetConfig+0x78>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a17      	ldr	r2, [pc, #92]	; (800a6ac <TIM_OC6_SetConfig+0xc0>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d007      	beq.n	800a664 <TIM_OC6_SetConfig+0x78>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a16      	ldr	r2, [pc, #88]	; (800a6b0 <TIM_OC6_SetConfig+0xc4>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d003      	beq.n	800a664 <TIM_OC6_SetConfig+0x78>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a15      	ldr	r2, [pc, #84]	; (800a6b4 <TIM_OC6_SetConfig+0xc8>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d109      	bne.n	800a678 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a66a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	029b      	lsls	r3, r3, #10
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	4313      	orrs	r3, r2
 800a676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	621a      	str	r2, [r3, #32]
}
 800a692:	bf00      	nop
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	feff8fff 	.word	0xfeff8fff
 800a6a4:	40010000 	.word	0x40010000
 800a6a8:	40010400 	.word	0x40010400
 800a6ac:	40014000 	.word	0x40014000
 800a6b0:	40014400 	.word	0x40014400
 800a6b4:	40014800 	.word	0x40014800

0800a6b8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	4b65      	ldr	r3, [pc, #404]	; (800a868 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	4b62      	ldr	r3, [pc, #392]	; (800a86c <TIM_SlaveTimer_SetConfig+0x1b4>)
 800a6e4:	4013      	ands	r3, r2
 800a6e6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	4a5c      	ldr	r2, [pc, #368]	; (800a870 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a700:	4293      	cmp	r3, r2
 800a702:	f000 80ab 	beq.w	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a706:	4a5a      	ldr	r2, [pc, #360]	; (800a870 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	f200 80a4 	bhi.w	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a70e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a712:	f000 80a3 	beq.w	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a716:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a71a:	f200 809c 	bhi.w	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a71e:	4a55      	ldr	r2, [pc, #340]	; (800a874 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a720:	4293      	cmp	r3, r2
 800a722:	f000 809b 	beq.w	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a726:	4a53      	ldr	r2, [pc, #332]	; (800a874 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	f200 8094 	bhi.w	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a72e:	4a52      	ldr	r2, [pc, #328]	; (800a878 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800a730:	4293      	cmp	r3, r2
 800a732:	f000 8093 	beq.w	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a736:	4a50      	ldr	r2, [pc, #320]	; (800a878 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	f200 808c 	bhi.w	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a73e:	4a4f      	ldr	r2, [pc, #316]	; (800a87c <TIM_SlaveTimer_SetConfig+0x1c4>)
 800a740:	4293      	cmp	r3, r2
 800a742:	f000 808b 	beq.w	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a746:	4a4d      	ldr	r2, [pc, #308]	; (800a87c <TIM_SlaveTimer_SetConfig+0x1c4>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	f200 8084 	bhi.w	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a74e:	4a4c      	ldr	r2, [pc, #304]	; (800a880 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800a750:	4293      	cmp	r3, r2
 800a752:	f000 8083 	beq.w	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a756:	4a4a      	ldr	r2, [pc, #296]	; (800a880 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d87c      	bhi.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a75c:	4a49      	ldr	r2, [pc, #292]	; (800a884 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d07c      	beq.n	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a762:	4a48      	ldr	r2, [pc, #288]	; (800a884 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d876      	bhi.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a768:	4a47      	ldr	r2, [pc, #284]	; (800a888 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d076      	beq.n	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a76e:	4a46      	ldr	r2, [pc, #280]	; (800a888 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d870      	bhi.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a774:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a778:	d070      	beq.n	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a77a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a77e:	d86a      	bhi.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a784:	d06a      	beq.n	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a78a:	d864      	bhi.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a78c:	2b70      	cmp	r3, #112	; 0x70
 800a78e:	d01a      	beq.n	800a7c6 <TIM_SlaveTimer_SetConfig+0x10e>
 800a790:	2b70      	cmp	r3, #112	; 0x70
 800a792:	d860      	bhi.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a794:	2b60      	cmp	r3, #96	; 0x60
 800a796:	d054      	beq.n	800a842 <TIM_SlaveTimer_SetConfig+0x18a>
 800a798:	2b60      	cmp	r3, #96	; 0x60
 800a79a:	d85c      	bhi.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a79c:	2b50      	cmp	r3, #80	; 0x50
 800a79e:	d046      	beq.n	800a82e <TIM_SlaveTimer_SetConfig+0x176>
 800a7a0:	2b50      	cmp	r3, #80	; 0x50
 800a7a2:	d858      	bhi.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a7a4:	2b40      	cmp	r3, #64	; 0x40
 800a7a6:	d019      	beq.n	800a7dc <TIM_SlaveTimer_SetConfig+0x124>
 800a7a8:	2b40      	cmp	r3, #64	; 0x40
 800a7aa:	d854      	bhi.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a7ac:	2b30      	cmp	r3, #48	; 0x30
 800a7ae:	d055      	beq.n	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a7b0:	2b30      	cmp	r3, #48	; 0x30
 800a7b2:	d850      	bhi.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a7b4:	2b20      	cmp	r3, #32
 800a7b6:	d051      	beq.n	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d84c      	bhi.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d04d      	beq.n	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a7c0:	2b10      	cmp	r3, #16
 800a7c2:	d04b      	beq.n	800a85c <TIM_SlaveTimer_SetConfig+0x1a4>
 800a7c4:	e047      	b.n	800a856 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a7d6:	f000 fa01 	bl	800abdc <TIM_ETR_SetConfig>
      break;
 800a7da:	e040      	b.n	800a85e <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b05      	cmp	r3, #5
 800a7e2:	d101      	bne.n	800a7e8 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e03b      	b.n	800a860 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6a1a      	ldr	r2, [r3, #32]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f022 0201 	bic.w	r2, r2, #1
 800a7fe:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a80e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	011b      	lsls	r3, r3, #4
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	4313      	orrs	r3, r2
 800a81a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	621a      	str	r2, [r3, #32]
      break;
 800a82c:	e017      	b.n	800a85e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a83a:	461a      	mov	r2, r3
 800a83c:	f000 f89a 	bl	800a974 <TIM_TI1_ConfigInputStage>
      break;
 800a840:	e00d      	b.n	800a85e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a84e:	461a      	mov	r2, r3
 800a850:	f000 f8fc 	bl	800aa4c <TIM_TI2_ConfigInputStage>
      break;
 800a854:	e003      	b.n	800a85e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	75fb      	strb	r3, [r7, #23]
      break;
 800a85a:	e000      	b.n	800a85e <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800a85c:	bf00      	nop
  }

  return status;
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	ffcfff8f 	.word	0xffcfff8f
 800a86c:	fffefff8 	.word	0xfffefff8
 800a870:	00200010 	.word	0x00200010
 800a874:	00100070 	.word	0x00100070
 800a878:	00100060 	.word	0x00100060
 800a87c:	00100050 	.word	0x00100050
 800a880:	00100040 	.word	0x00100040
 800a884:	00100030 	.word	0x00100030
 800a888:	00100020 	.word	0x00100020

0800a88c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	f023 0201 	bic.w	r2, r3, #1
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4a28      	ldr	r2, [pc, #160]	; (800a958 <TIM_TI1_SetConfig+0xcc>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d01b      	beq.n	800a8f2 <TIM_TI1_SetConfig+0x66>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8c0:	d017      	beq.n	800a8f2 <TIM_TI1_SetConfig+0x66>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4a25      	ldr	r2, [pc, #148]	; (800a95c <TIM_TI1_SetConfig+0xd0>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d013      	beq.n	800a8f2 <TIM_TI1_SetConfig+0x66>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4a24      	ldr	r2, [pc, #144]	; (800a960 <TIM_TI1_SetConfig+0xd4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d00f      	beq.n	800a8f2 <TIM_TI1_SetConfig+0x66>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	4a23      	ldr	r2, [pc, #140]	; (800a964 <TIM_TI1_SetConfig+0xd8>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d00b      	beq.n	800a8f2 <TIM_TI1_SetConfig+0x66>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4a22      	ldr	r2, [pc, #136]	; (800a968 <TIM_TI1_SetConfig+0xdc>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d007      	beq.n	800a8f2 <TIM_TI1_SetConfig+0x66>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	4a21      	ldr	r2, [pc, #132]	; (800a96c <TIM_TI1_SetConfig+0xe0>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d003      	beq.n	800a8f2 <TIM_TI1_SetConfig+0x66>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	4a20      	ldr	r2, [pc, #128]	; (800a970 <TIM_TI1_SetConfig+0xe4>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d101      	bne.n	800a8f6 <TIM_TI1_SetConfig+0x6a>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e000      	b.n	800a8f8 <TIM_TI1_SetConfig+0x6c>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d008      	beq.n	800a90e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	f023 0303 	bic.w	r3, r3, #3
 800a902:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4313      	orrs	r3, r2
 800a90a:	617b      	str	r3, [r7, #20]
 800a90c:	e003      	b.n	800a916 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f043 0301 	orr.w	r3, r3, #1
 800a914:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a91c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	011b      	lsls	r3, r3, #4
 800a922:	b2db      	uxtb	r3, r3
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	4313      	orrs	r3, r2
 800a928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	f023 030a 	bic.w	r3, r3, #10
 800a930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f003 030a 	and.w	r3, r3, #10
 800a938:	693a      	ldr	r2, [r7, #16]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	621a      	str	r2, [r3, #32]
}
 800a94a:	bf00      	nop
 800a94c:	371c      	adds	r7, #28
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	40010000 	.word	0x40010000
 800a95c:	40000400 	.word	0x40000400
 800a960:	40000800 	.word	0x40000800
 800a964:	40000c00 	.word	0x40000c00
 800a968:	40010400 	.word	0x40010400
 800a96c:	40001800 	.word	0x40001800
 800a970:	40014000 	.word	0x40014000

0800a974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a974:	b480      	push	{r7}
 800a976:	b087      	sub	sp, #28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	f023 0201 	bic.w	r2, r3, #1
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a99e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	011b      	lsls	r3, r3, #4
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f023 030a 	bic.w	r3, r3, #10
 800a9b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	621a      	str	r2, [r3, #32]
}
 800a9c6:	bf00      	nop
 800a9c8:	371c      	adds	r7, #28
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b087      	sub	sp, #28
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	60f8      	str	r0, [r7, #12]
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	607a      	str	r2, [r7, #4]
 800a9de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6a1b      	ldr	r3, [r3, #32]
 800a9e4:	f023 0210 	bic.w	r2, r3, #16
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	021b      	lsls	r3, r3, #8
 800aa04:	697a      	ldr	r2, [r7, #20]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	031b      	lsls	r3, r3, #12
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	011b      	lsls	r3, r3, #4
 800aa2a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	621a      	str	r2, [r3, #32]
}
 800aa40:	bf00      	nop
 800aa42:	371c      	adds	r7, #28
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	f023 0210 	bic.w	r2, r3, #16
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	031b      	lsls	r3, r3, #12
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	011b      	lsls	r3, r3, #4
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	621a      	str	r2, [r3, #32]
}
 800aaa0:	bf00      	nop
 800aaa2:	371c      	adds	r7, #28
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b087      	sub	sp, #28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6a1b      	ldr	r3, [r3, #32]
 800aad0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f023 0303 	bic.w	r3, r3, #3
 800aad8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4313      	orrs	r3, r2
 800aae0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aae8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	011b      	lsls	r3, r3, #4
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800aafc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	021b      	lsls	r3, r3, #8
 800ab02:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	621a      	str	r2, [r3, #32]
}
 800ab18:	bf00      	nop
 800ab1a:	371c      	adds	r7, #28
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6a1b      	ldr	r3, [r3, #32]
 800ab48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	021b      	lsls	r3, r3, #8
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	031b      	lsls	r3, r3, #12
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ab76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	031b      	lsls	r3, r3, #12
 800ab7c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ab80:	693a      	ldr	r2, [r7, #16]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	621a      	str	r2, [r3, #32]
}
 800ab92:	bf00      	nop
 800ab94:	371c      	adds	r7, #28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
	...

0800aba0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4b09      	ldr	r3, [pc, #36]	; (800abd8 <TIM_ITRx_SetConfig+0x38>)
 800abb4:	4013      	ands	r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	f043 0307 	orr.w	r3, r3, #7
 800abc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	609a      	str	r2, [r3, #8]
}
 800abca:	bf00      	nop
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	ffcfff8f 	.word	0xffcfff8f

0800abdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	021a      	lsls	r2, r3, #8
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	431a      	orrs	r2, r3
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	609a      	str	r2, [r3, #8]
}
 800ac10:	bf00      	nop
 800ac12:	371c      	adds	r7, #28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	f003 031f 	and.w	r3, r3, #31
 800ac2e:	2201      	movs	r2, #1
 800ac30:	fa02 f303 	lsl.w	r3, r2, r3
 800ac34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6a1a      	ldr	r2, [r3, #32]
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	43db      	mvns	r3, r3
 800ac3e:	401a      	ands	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6a1a      	ldr	r2, [r3, #32]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f003 031f 	and.w	r3, r3, #31
 800ac4e:	6879      	ldr	r1, [r7, #4]
 800ac50:	fa01 f303 	lsl.w	r3, r1, r3
 800ac54:	431a      	orrs	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	621a      	str	r2, [r3, #32]
}
 800ac5a:	bf00      	nop
 800ac5c:	371c      	adds	r7, #28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
	...

0800ac68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d101      	bne.n	800ac80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	e06d      	b.n	800ad5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a30      	ldr	r2, [pc, #192]	; (800ad68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d004      	beq.n	800acb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a2f      	ldr	r2, [pc, #188]	; (800ad6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d108      	bne.n	800acc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800acba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800accc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a20      	ldr	r2, [pc, #128]	; (800ad68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d022      	beq.n	800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf2:	d01d      	beq.n	800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a1d      	ldr	r2, [pc, #116]	; (800ad70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d018      	beq.n	800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a1c      	ldr	r2, [pc, #112]	; (800ad74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d013      	beq.n	800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a1a      	ldr	r2, [pc, #104]	; (800ad78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d00e      	beq.n	800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a15      	ldr	r2, [pc, #84]	; (800ad6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d009      	beq.n	800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a16      	ldr	r2, [pc, #88]	; (800ad7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d004      	beq.n	800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a15      	ldr	r2, [pc, #84]	; (800ad80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d10c      	bne.n	800ad4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3714      	adds	r7, #20
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	40010000 	.word	0x40010000
 800ad6c:	40010400 	.word	0x40010400
 800ad70:	40000400 	.word	0x40000400
 800ad74:	40000800 	.word	0x40000800
 800ad78:	40000c00 	.word	0x40000c00
 800ad7c:	40001800 	.word	0x40001800
 800ad80:	40014000 	.word	0x40014000

0800ad84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800adb4:	bf00      	nop
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e042      	b.n	800ae58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add8:	2b00      	cmp	r3, #0
 800adda:	d106      	bne.n	800adea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7f6 ff4b 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2224      	movs	r2, #36	; 0x24
 800adee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f022 0201 	bic.w	r2, r2, #1
 800ae00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fce0 	bl	800b7c8 <UART_SetConfig>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d101      	bne.n	800ae12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e022      	b.n	800ae58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d002      	beq.n	800ae20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f001 fa3c 	bl	800c298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685a      	ldr	r2, [r3, #4]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689a      	ldr	r2, [r3, #8]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f042 0201 	orr.w	r2, r2, #1
 800ae4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f001 fac3 	bl	800c3dc <UART_CheckIdleState>
 800ae56:	4603      	mov	r3, r0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b08a      	sub	sp, #40	; 0x28
 800ae64:	af02      	add	r7, sp, #8
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	603b      	str	r3, [r7, #0]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae76:	2b20      	cmp	r3, #32
 800ae78:	d17b      	bne.n	800af72 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <HAL_UART_Transmit+0x26>
 800ae80:	88fb      	ldrh	r3, [r7, #6]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d101      	bne.n	800ae8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e074      	b.n	800af74 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2221      	movs	r2, #33	; 0x21
 800ae96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae9a:	f7f7 fb8f 	bl	80025bc <HAL_GetTick>
 800ae9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	88fa      	ldrh	r2, [r7, #6]
 800aea4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	88fa      	ldrh	r2, [r7, #6]
 800aeac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeb8:	d108      	bne.n	800aecc <HAL_UART_Transmit+0x6c>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d104      	bne.n	800aecc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aec2:	2300      	movs	r3, #0
 800aec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	61bb      	str	r3, [r7, #24]
 800aeca:	e003      	b.n	800aed4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aed0:	2300      	movs	r3, #0
 800aed2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aed4:	e030      	b.n	800af38 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	2200      	movs	r2, #0
 800aede:	2180      	movs	r1, #128	; 0x80
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f001 fb25 	bl	800c530 <UART_WaitOnFlagUntilTimeout>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d005      	beq.n	800aef8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2220      	movs	r2, #32
 800aef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e03d      	b.n	800af74 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10b      	bne.n	800af16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	3302      	adds	r3, #2
 800af12:	61bb      	str	r3, [r7, #24]
 800af14:	e007      	b.n	800af26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	781a      	ldrb	r2, [r3, #0]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	3301      	adds	r3, #1
 800af24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	3b01      	subs	r3, #1
 800af30:	b29a      	uxth	r2, r3
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800af3e:	b29b      	uxth	r3, r3
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1c8      	bne.n	800aed6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2200      	movs	r2, #0
 800af4c:	2140      	movs	r1, #64	; 0x40
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f001 faee 	bl	800c530 <UART_WaitOnFlagUntilTimeout>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d005      	beq.n	800af66 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2220      	movs	r2, #32
 800af5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	e006      	b.n	800af74 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2220      	movs	r2, #32
 800af6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	e000      	b.n	800af74 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800af72:	2302      	movs	r3, #2
  }
}
 800af74:	4618      	mov	r0, r3
 800af76:	3720      	adds	r7, #32
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b08a      	sub	sp, #40	; 0x28
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	4613      	mov	r3, r2
 800af88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af90:	2b20      	cmp	r3, #32
 800af92:	d137      	bne.n	800b004 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <HAL_UART_Receive_DMA+0x24>
 800af9a:	88fb      	ldrh	r3, [r7, #6]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	e030      	b.n	800b006 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a18      	ldr	r2, [pc, #96]	; (800b010 <HAL_UART_Receive_DMA+0x94>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d01f      	beq.n	800aff4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d018      	beq.n	800aff4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	e853 3f00 	ldrex	r3, [r3]
 800afce:	613b      	str	r3, [r7, #16]
   return(result);
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800afd6:	627b      	str	r3, [r7, #36]	; 0x24
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	461a      	mov	r2, r3
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	623b      	str	r3, [r7, #32]
 800afe2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe4:	69f9      	ldr	r1, [r7, #28]
 800afe6:	6a3a      	ldr	r2, [r7, #32]
 800afe8:	e841 2300 	strex	r3, r2, [r1]
 800afec:	61bb      	str	r3, [r7, #24]
   return(result);
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1e6      	bne.n	800afc2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aff4:	88fb      	ldrh	r3, [r7, #6]
 800aff6:	461a      	mov	r2, r3
 800aff8:	68b9      	ldr	r1, [r7, #8]
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f001 fb00 	bl	800c600 <UART_Start_Receive_DMA>
 800b000:	4603      	mov	r3, r0
 800b002:	e000      	b.n	800b006 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b004:	2302      	movs	r3, #2
  }
}
 800b006:	4618      	mov	r0, r3
 800b008:	3728      	adds	r7, #40	; 0x28
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	58000c00 	.word	0x58000c00

0800b014 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b0ba      	sub	sp, #232	; 0xe8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b03a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b03e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b042:	4013      	ands	r3, r2
 800b044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d11b      	bne.n	800b088 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b054:	f003 0320 	and.w	r3, r3, #32
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d015      	beq.n	800b088 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b05c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b060:	f003 0320 	and.w	r3, r3, #32
 800b064:	2b00      	cmp	r3, #0
 800b066:	d105      	bne.n	800b074 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b06c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d009      	beq.n	800b088 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 8377 	beq.w	800b76c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	4798      	blx	r3
      }
      return;
 800b086:	e371      	b.n	800b76c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 8123 	beq.w	800b2d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b092:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b096:	4b8d      	ldr	r3, [pc, #564]	; (800b2cc <HAL_UART_IRQHandler+0x2b8>)
 800b098:	4013      	ands	r3, r2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d106      	bne.n	800b0ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b09e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b0a2:	4b8b      	ldr	r3, [pc, #556]	; (800b2d0 <HAL_UART_IRQHandler+0x2bc>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f000 8116 	beq.w	800b2d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d011      	beq.n	800b0dc <HAL_UART_IRQHandler+0xc8>
 800b0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00b      	beq.n	800b0dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0d2:	f043 0201 	orr.w	r2, r3, #1
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0e0:	f003 0302 	and.w	r3, r3, #2
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d011      	beq.n	800b10c <HAL_UART_IRQHandler+0xf8>
 800b0e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00b      	beq.n	800b10c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b102:	f043 0204 	orr.w	r2, r3, #4
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b10c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b110:	f003 0304 	and.w	r3, r3, #4
 800b114:	2b00      	cmp	r3, #0
 800b116:	d011      	beq.n	800b13c <HAL_UART_IRQHandler+0x128>
 800b118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00b      	beq.n	800b13c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2204      	movs	r2, #4
 800b12a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b132:	f043 0202 	orr.w	r2, r3, #2
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b140:	f003 0308 	and.w	r3, r3, #8
 800b144:	2b00      	cmp	r3, #0
 800b146:	d017      	beq.n	800b178 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b14c:	f003 0320 	and.w	r3, r3, #32
 800b150:	2b00      	cmp	r3, #0
 800b152:	d105      	bne.n	800b160 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b154:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b158:	4b5c      	ldr	r3, [pc, #368]	; (800b2cc <HAL_UART_IRQHandler+0x2b8>)
 800b15a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2208      	movs	r2, #8
 800b166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b16e:	f043 0208 	orr.w	r2, r3, #8
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b17c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b180:	2b00      	cmp	r3, #0
 800b182:	d012      	beq.n	800b1aa <HAL_UART_IRQHandler+0x196>
 800b184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00c      	beq.n	800b1aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b198:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1a0:	f043 0220 	orr.w	r2, r3, #32
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 82dd 	beq.w	800b770 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ba:	f003 0320 	and.w	r3, r3, #32
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d013      	beq.n	800b1ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1c6:	f003 0320 	and.w	r3, r3, #32
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d105      	bne.n	800b1da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d007      	beq.n	800b1ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d003      	beq.n	800b1ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fe:	2b40      	cmp	r3, #64	; 0x40
 800b200:	d005      	beq.n	800b20e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b206:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d054      	beq.n	800b2b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f001 fade 	bl	800c7d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b21e:	2b40      	cmp	r3, #64	; 0x40
 800b220:	d146      	bne.n	800b2b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3308      	adds	r3, #8
 800b228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b230:	e853 3f00 	ldrex	r3, [r3]
 800b234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b23c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3308      	adds	r3, #8
 800b24a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b24e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b256:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b25a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b25e:	e841 2300 	strex	r3, r2, [r1]
 800b262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1d9      	bne.n	800b222 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b274:	2b00      	cmp	r3, #0
 800b276:	d017      	beq.n	800b2a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b27e:	4a15      	ldr	r2, [pc, #84]	; (800b2d4 <HAL_UART_IRQHandler+0x2c0>)
 800b280:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b288:	4618      	mov	r0, r3
 800b28a:	f7f8 fbc7 	bl	8003a1c <HAL_DMA_Abort_IT>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d019      	beq.n	800b2c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a6:	e00f      	b.n	800b2c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7f6 f84b 	bl	8001344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ae:	e00b      	b.n	800b2c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7f6 f847 	bl	8001344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b6:	e007      	b.n	800b2c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7f6 f843 	bl	8001344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b2c6:	e253      	b.n	800b770 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c8:	bf00      	nop
    return;
 800b2ca:	e251      	b.n	800b770 <HAL_UART_IRQHandler+0x75c>
 800b2cc:	10000001 	.word	0x10000001
 800b2d0:	04000120 	.word	0x04000120
 800b2d4:	0800ca83 	.word	0x0800ca83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	f040 81e7 	bne.w	800b6b0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2e6:	f003 0310 	and.w	r3, r3, #16
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 81e0 	beq.w	800b6b0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b2f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f4:	f003 0310 	and.w	r3, r3, #16
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 81d9 	beq.w	800b6b0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2210      	movs	r2, #16
 800b304:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b310:	2b40      	cmp	r3, #64	; 0x40
 800b312:	f040 8151 	bne.w	800b5b8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a96      	ldr	r2, [pc, #600]	; (800b578 <HAL_UART_IRQHandler+0x564>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d068      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a93      	ldr	r2, [pc, #588]	; (800b57c <HAL_UART_IRQHandler+0x568>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d061      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a91      	ldr	r2, [pc, #580]	; (800b580 <HAL_UART_IRQHandler+0x56c>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d05a      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a8e      	ldr	r2, [pc, #568]	; (800b584 <HAL_UART_IRQHandler+0x570>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d053      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a8c      	ldr	r2, [pc, #560]	; (800b588 <HAL_UART_IRQHandler+0x574>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d04c      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a89      	ldr	r2, [pc, #548]	; (800b58c <HAL_UART_IRQHandler+0x578>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d045      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a87      	ldr	r2, [pc, #540]	; (800b590 <HAL_UART_IRQHandler+0x57c>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d03e      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a84      	ldr	r2, [pc, #528]	; (800b594 <HAL_UART_IRQHandler+0x580>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d037      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a82      	ldr	r2, [pc, #520]	; (800b598 <HAL_UART_IRQHandler+0x584>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d030      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a7f      	ldr	r2, [pc, #508]	; (800b59c <HAL_UART_IRQHandler+0x588>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d029      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a7d      	ldr	r2, [pc, #500]	; (800b5a0 <HAL_UART_IRQHandler+0x58c>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d022      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a7a      	ldr	r2, [pc, #488]	; (800b5a4 <HAL_UART_IRQHandler+0x590>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d01b      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a78      	ldr	r2, [pc, #480]	; (800b5a8 <HAL_UART_IRQHandler+0x594>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d014      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a75      	ldr	r2, [pc, #468]	; (800b5ac <HAL_UART_IRQHandler+0x598>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d00d      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a73      	ldr	r2, [pc, #460]	; (800b5b0 <HAL_UART_IRQHandler+0x59c>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d006      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3e2>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a70      	ldr	r2, [pc, #448]	; (800b5b4 <HAL_UART_IRQHandler+0x5a0>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d106      	bne.n	800b404 <HAL_UART_IRQHandler+0x3f0>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	b29b      	uxth	r3, r3
 800b402:	e005      	b.n	800b410 <HAL_UART_IRQHandler+0x3fc>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b414:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 81ab 	beq.w	800b774 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b424:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b428:	429a      	cmp	r2, r3
 800b42a:	f080 81a3 	bcs.w	800b774 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b43e:	69db      	ldr	r3, [r3, #28]
 800b440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b444:	f000 8087 	beq.w	800b556 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b454:	e853 3f00 	ldrex	r3, [r3]
 800b458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b45c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	461a      	mov	r2, r3
 800b46e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b476:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b47e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b482:	e841 2300 	strex	r3, r2, [r1]
 800b486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b48a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1da      	bne.n	800b448 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3308      	adds	r3, #8
 800b498:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b4a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4a4:	f023 0301 	bic.w	r3, r3, #1
 800b4a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b4b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b4ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b4be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b4c2:	e841 2300 	strex	r3, r2, [r1]
 800b4c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b4c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d1e1      	bne.n	800b492 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	3308      	adds	r3, #8
 800b4d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4d8:	e853 3f00 	ldrex	r3, [r3]
 800b4dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b4de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b4f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b4f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4fa:	e841 2300 	strex	r3, r2, [r1]
 800b4fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1e3      	bne.n	800b4ce <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2220      	movs	r2, #32
 800b50a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b51c:	e853 3f00 	ldrex	r3, [r3]
 800b520:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b524:	f023 0310 	bic.w	r3, r3, #16
 800b528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	461a      	mov	r2, r3
 800b532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b536:	65bb      	str	r3, [r7, #88]	; 0x58
 800b538:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b53c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b53e:	e841 2300 	strex	r3, r2, [r1]
 800b542:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1e4      	bne.n	800b514 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b550:	4618      	mov	r0, r3
 800b552:	f7f7 ff45 	bl	80033e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2202      	movs	r2, #2
 800b55a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b568:	b29b      	uxth	r3, r3
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f91d 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b576:	e0fd      	b.n	800b774 <HAL_UART_IRQHandler+0x760>
 800b578:	40020010 	.word	0x40020010
 800b57c:	40020028 	.word	0x40020028
 800b580:	40020040 	.word	0x40020040
 800b584:	40020058 	.word	0x40020058
 800b588:	40020070 	.word	0x40020070
 800b58c:	40020088 	.word	0x40020088
 800b590:	400200a0 	.word	0x400200a0
 800b594:	400200b8 	.word	0x400200b8
 800b598:	40020410 	.word	0x40020410
 800b59c:	40020428 	.word	0x40020428
 800b5a0:	40020440 	.word	0x40020440
 800b5a4:	40020458 	.word	0x40020458
 800b5a8:	40020470 	.word	0x40020470
 800b5ac:	40020488 	.word	0x40020488
 800b5b0:	400204a0 	.word	0x400204a0
 800b5b4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 80cf 	beq.w	800b778 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b5da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 80ca 	beq.w	800b778 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	461a      	mov	r2, r3
 800b602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b606:	647b      	str	r3, [r7, #68]	; 0x44
 800b608:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b60c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b60e:	e841 2300 	strex	r3, r2, [r1]
 800b612:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1e4      	bne.n	800b5e4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	3308      	adds	r3, #8
 800b620:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b624:	e853 3f00 	ldrex	r3, [r3]
 800b628:	623b      	str	r3, [r7, #32]
   return(result);
 800b62a:	6a3a      	ldr	r2, [r7, #32]
 800b62c:	4b55      	ldr	r3, [pc, #340]	; (800b784 <HAL_UART_IRQHandler+0x770>)
 800b62e:	4013      	ands	r3, r2
 800b630:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3308      	adds	r3, #8
 800b63a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b63e:	633a      	str	r2, [r7, #48]	; 0x30
 800b640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b646:	e841 2300 	strex	r3, r2, [r1]
 800b64a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1e3      	bne.n	800b61a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2220      	movs	r2, #32
 800b656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	e853 3f00 	ldrex	r3, [r3]
 800b672:	60fb      	str	r3, [r7, #12]
   return(result);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f023 0310 	bic.w	r3, r3, #16
 800b67a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	461a      	mov	r2, r3
 800b684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b688:	61fb      	str	r3, [r7, #28]
 800b68a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68c:	69b9      	ldr	r1, [r7, #24]
 800b68e:	69fa      	ldr	r2, [r7, #28]
 800b690:	e841 2300 	strex	r3, r2, [r1]
 800b694:	617b      	str	r3, [r7, #20]
   return(result);
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1e4      	bne.n	800b666 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f881 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6ae:	e063      	b.n	800b778 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00e      	beq.n	800b6da <HAL_UART_IRQHandler+0x6c6>
 800b6bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d008      	beq.n	800b6da <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b6d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f001 fa16 	bl	800cb04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6d8:	e051      	b.n	800b77e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d014      	beq.n	800b710 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b6e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d105      	bne.n	800b6fe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b6f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d008      	beq.n	800b710 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b702:	2b00      	cmp	r3, #0
 800b704:	d03a      	beq.n	800b77c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	4798      	blx	r3
    }
    return;
 800b70e:	e035      	b.n	800b77c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d009      	beq.n	800b730 <HAL_UART_IRQHandler+0x71c>
 800b71c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b724:	2b00      	cmp	r3, #0
 800b726:	d003      	beq.n	800b730 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f001 f9c0 	bl	800caae <UART_EndTransmit_IT>
    return;
 800b72e:	e026      	b.n	800b77e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d009      	beq.n	800b750 <HAL_UART_IRQHandler+0x73c>
 800b73c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b740:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b744:	2b00      	cmp	r3, #0
 800b746:	d003      	beq.n	800b750 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f001 f9ef 	bl	800cb2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b74e:	e016      	b.n	800b77e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d010      	beq.n	800b77e <HAL_UART_IRQHandler+0x76a>
 800b75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b760:	2b00      	cmp	r3, #0
 800b762:	da0c      	bge.n	800b77e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f001 f9d7 	bl	800cb18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b76a:	e008      	b.n	800b77e <HAL_UART_IRQHandler+0x76a>
      return;
 800b76c:	bf00      	nop
 800b76e:	e006      	b.n	800b77e <HAL_UART_IRQHandler+0x76a>
    return;
 800b770:	bf00      	nop
 800b772:	e004      	b.n	800b77e <HAL_UART_IRQHandler+0x76a>
      return;
 800b774:	bf00      	nop
 800b776:	e002      	b.n	800b77e <HAL_UART_IRQHandler+0x76a>
      return;
 800b778:	bf00      	nop
 800b77a:	e000      	b.n	800b77e <HAL_UART_IRQHandler+0x76a>
    return;
 800b77c:	bf00      	nop
  }
}
 800b77e:	37e8      	adds	r7, #232	; 0xe8
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	effffffe 	.word	0xeffffffe

0800b788 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7cc:	b092      	sub	sp, #72	; 0x48
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	689a      	ldr	r2, [r3, #8]
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	431a      	orrs	r2, r3
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	69db      	ldr	r3, [r3, #28]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	4bbe      	ldr	r3, [pc, #760]	; (800baf0 <UART_SetConfig+0x328>)
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	697a      	ldr	r2, [r7, #20]
 800b7fc:	6812      	ldr	r2, [r2, #0]
 800b7fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b800:	430b      	orrs	r3, r1
 800b802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	68da      	ldr	r2, [r3, #12]
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	430a      	orrs	r2, r1
 800b818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4ab3      	ldr	r2, [pc, #716]	; (800baf4 <UART_SetConfig+0x32c>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d004      	beq.n	800b834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	6a1b      	ldr	r3, [r3, #32]
 800b82e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b830:	4313      	orrs	r3, r2
 800b832:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	689a      	ldr	r2, [r3, #8]
 800b83a:	4baf      	ldr	r3, [pc, #700]	; (800baf8 <UART_SetConfig+0x330>)
 800b83c:	4013      	ands	r3, r2
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	6812      	ldr	r2, [r2, #0]
 800b842:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b844:	430b      	orrs	r3, r1
 800b846:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84e:	f023 010f 	bic.w	r1, r3, #15
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	430a      	orrs	r2, r1
 800b85c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4aa6      	ldr	r2, [pc, #664]	; (800bafc <UART_SetConfig+0x334>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d177      	bne.n	800b958 <UART_SetConfig+0x190>
 800b868:	4ba5      	ldr	r3, [pc, #660]	; (800bb00 <UART_SetConfig+0x338>)
 800b86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b86c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b870:	2b28      	cmp	r3, #40	; 0x28
 800b872:	d86d      	bhi.n	800b950 <UART_SetConfig+0x188>
 800b874:	a201      	add	r2, pc, #4	; (adr r2, 800b87c <UART_SetConfig+0xb4>)
 800b876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87a:	bf00      	nop
 800b87c:	0800b921 	.word	0x0800b921
 800b880:	0800b951 	.word	0x0800b951
 800b884:	0800b951 	.word	0x0800b951
 800b888:	0800b951 	.word	0x0800b951
 800b88c:	0800b951 	.word	0x0800b951
 800b890:	0800b951 	.word	0x0800b951
 800b894:	0800b951 	.word	0x0800b951
 800b898:	0800b951 	.word	0x0800b951
 800b89c:	0800b929 	.word	0x0800b929
 800b8a0:	0800b951 	.word	0x0800b951
 800b8a4:	0800b951 	.word	0x0800b951
 800b8a8:	0800b951 	.word	0x0800b951
 800b8ac:	0800b951 	.word	0x0800b951
 800b8b0:	0800b951 	.word	0x0800b951
 800b8b4:	0800b951 	.word	0x0800b951
 800b8b8:	0800b951 	.word	0x0800b951
 800b8bc:	0800b931 	.word	0x0800b931
 800b8c0:	0800b951 	.word	0x0800b951
 800b8c4:	0800b951 	.word	0x0800b951
 800b8c8:	0800b951 	.word	0x0800b951
 800b8cc:	0800b951 	.word	0x0800b951
 800b8d0:	0800b951 	.word	0x0800b951
 800b8d4:	0800b951 	.word	0x0800b951
 800b8d8:	0800b951 	.word	0x0800b951
 800b8dc:	0800b939 	.word	0x0800b939
 800b8e0:	0800b951 	.word	0x0800b951
 800b8e4:	0800b951 	.word	0x0800b951
 800b8e8:	0800b951 	.word	0x0800b951
 800b8ec:	0800b951 	.word	0x0800b951
 800b8f0:	0800b951 	.word	0x0800b951
 800b8f4:	0800b951 	.word	0x0800b951
 800b8f8:	0800b951 	.word	0x0800b951
 800b8fc:	0800b941 	.word	0x0800b941
 800b900:	0800b951 	.word	0x0800b951
 800b904:	0800b951 	.word	0x0800b951
 800b908:	0800b951 	.word	0x0800b951
 800b90c:	0800b951 	.word	0x0800b951
 800b910:	0800b951 	.word	0x0800b951
 800b914:	0800b951 	.word	0x0800b951
 800b918:	0800b951 	.word	0x0800b951
 800b91c:	0800b949 	.word	0x0800b949
 800b920:	2301      	movs	r3, #1
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b926:	e222      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b928:	2304      	movs	r3, #4
 800b92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b92e:	e21e      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b930:	2308      	movs	r3, #8
 800b932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b936:	e21a      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b938:	2310      	movs	r3, #16
 800b93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b93e:	e216      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b940:	2320      	movs	r3, #32
 800b942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b946:	e212      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b948:	2340      	movs	r3, #64	; 0x40
 800b94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b94e:	e20e      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b950:	2380      	movs	r3, #128	; 0x80
 800b952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b956:	e20a      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a69      	ldr	r2, [pc, #420]	; (800bb04 <UART_SetConfig+0x33c>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d130      	bne.n	800b9c4 <UART_SetConfig+0x1fc>
 800b962:	4b67      	ldr	r3, [pc, #412]	; (800bb00 <UART_SetConfig+0x338>)
 800b964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	2b05      	cmp	r3, #5
 800b96c:	d826      	bhi.n	800b9bc <UART_SetConfig+0x1f4>
 800b96e:	a201      	add	r2, pc, #4	; (adr r2, 800b974 <UART_SetConfig+0x1ac>)
 800b970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b974:	0800b98d 	.word	0x0800b98d
 800b978:	0800b995 	.word	0x0800b995
 800b97c:	0800b99d 	.word	0x0800b99d
 800b980:	0800b9a5 	.word	0x0800b9a5
 800b984:	0800b9ad 	.word	0x0800b9ad
 800b988:	0800b9b5 	.word	0x0800b9b5
 800b98c:	2300      	movs	r3, #0
 800b98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b992:	e1ec      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b994:	2304      	movs	r3, #4
 800b996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b99a:	e1e8      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b99c:	2308      	movs	r3, #8
 800b99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9a2:	e1e4      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b9a4:	2310      	movs	r3, #16
 800b9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9aa:	e1e0      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b9ac:	2320      	movs	r3, #32
 800b9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9b2:	e1dc      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b9b4:	2340      	movs	r3, #64	; 0x40
 800b9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ba:	e1d8      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b9bc:	2380      	movs	r3, #128	; 0x80
 800b9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9c2:	e1d4      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a4f      	ldr	r2, [pc, #316]	; (800bb08 <UART_SetConfig+0x340>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d130      	bne.n	800ba30 <UART_SetConfig+0x268>
 800b9ce:	4b4c      	ldr	r3, [pc, #304]	; (800bb00 <UART_SetConfig+0x338>)
 800b9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d2:	f003 0307 	and.w	r3, r3, #7
 800b9d6:	2b05      	cmp	r3, #5
 800b9d8:	d826      	bhi.n	800ba28 <UART_SetConfig+0x260>
 800b9da:	a201      	add	r2, pc, #4	; (adr r2, 800b9e0 <UART_SetConfig+0x218>)
 800b9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e0:	0800b9f9 	.word	0x0800b9f9
 800b9e4:	0800ba01 	.word	0x0800ba01
 800b9e8:	0800ba09 	.word	0x0800ba09
 800b9ec:	0800ba11 	.word	0x0800ba11
 800b9f0:	0800ba19 	.word	0x0800ba19
 800b9f4:	0800ba21 	.word	0x0800ba21
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9fe:	e1b6      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba00:	2304      	movs	r3, #4
 800ba02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba06:	e1b2      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba08:	2308      	movs	r3, #8
 800ba0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba0e:	e1ae      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba10:	2310      	movs	r3, #16
 800ba12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba16:	e1aa      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba18:	2320      	movs	r3, #32
 800ba1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba1e:	e1a6      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba20:	2340      	movs	r3, #64	; 0x40
 800ba22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba26:	e1a2      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba28:	2380      	movs	r3, #128	; 0x80
 800ba2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba2e:	e19e      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a35      	ldr	r2, [pc, #212]	; (800bb0c <UART_SetConfig+0x344>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d130      	bne.n	800ba9c <UART_SetConfig+0x2d4>
 800ba3a:	4b31      	ldr	r3, [pc, #196]	; (800bb00 <UART_SetConfig+0x338>)
 800ba3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba3e:	f003 0307 	and.w	r3, r3, #7
 800ba42:	2b05      	cmp	r3, #5
 800ba44:	d826      	bhi.n	800ba94 <UART_SetConfig+0x2cc>
 800ba46:	a201      	add	r2, pc, #4	; (adr r2, 800ba4c <UART_SetConfig+0x284>)
 800ba48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4c:	0800ba65 	.word	0x0800ba65
 800ba50:	0800ba6d 	.word	0x0800ba6d
 800ba54:	0800ba75 	.word	0x0800ba75
 800ba58:	0800ba7d 	.word	0x0800ba7d
 800ba5c:	0800ba85 	.word	0x0800ba85
 800ba60:	0800ba8d 	.word	0x0800ba8d
 800ba64:	2300      	movs	r3, #0
 800ba66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba6a:	e180      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba6c:	2304      	movs	r3, #4
 800ba6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba72:	e17c      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba74:	2308      	movs	r3, #8
 800ba76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba7a:	e178      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba7c:	2310      	movs	r3, #16
 800ba7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba82:	e174      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba84:	2320      	movs	r3, #32
 800ba86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba8a:	e170      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba8c:	2340      	movs	r3, #64	; 0x40
 800ba8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba92:	e16c      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba94:	2380      	movs	r3, #128	; 0x80
 800ba96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba9a:	e168      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a1b      	ldr	r2, [pc, #108]	; (800bb10 <UART_SetConfig+0x348>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d142      	bne.n	800bb2c <UART_SetConfig+0x364>
 800baa6:	4b16      	ldr	r3, [pc, #88]	; (800bb00 <UART_SetConfig+0x338>)
 800baa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baaa:	f003 0307 	and.w	r3, r3, #7
 800baae:	2b05      	cmp	r3, #5
 800bab0:	d838      	bhi.n	800bb24 <UART_SetConfig+0x35c>
 800bab2:	a201      	add	r2, pc, #4	; (adr r2, 800bab8 <UART_SetConfig+0x2f0>)
 800bab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab8:	0800bad1 	.word	0x0800bad1
 800babc:	0800bad9 	.word	0x0800bad9
 800bac0:	0800bae1 	.word	0x0800bae1
 800bac4:	0800bae9 	.word	0x0800bae9
 800bac8:	0800bb15 	.word	0x0800bb15
 800bacc:	0800bb1d 	.word	0x0800bb1d
 800bad0:	2300      	movs	r3, #0
 800bad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bad6:	e14a      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bad8:	2304      	movs	r3, #4
 800bada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bade:	e146      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bae0:	2308      	movs	r3, #8
 800bae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bae6:	e142      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bae8:	2310      	movs	r3, #16
 800baea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baee:	e13e      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800baf0:	cfff69f3 	.word	0xcfff69f3
 800baf4:	58000c00 	.word	0x58000c00
 800baf8:	11fff4ff 	.word	0x11fff4ff
 800bafc:	40011000 	.word	0x40011000
 800bb00:	58024400 	.word	0x58024400
 800bb04:	40004400 	.word	0x40004400
 800bb08:	40004800 	.word	0x40004800
 800bb0c:	40004c00 	.word	0x40004c00
 800bb10:	40005000 	.word	0x40005000
 800bb14:	2320      	movs	r3, #32
 800bb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb1a:	e128      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bb1c:	2340      	movs	r3, #64	; 0x40
 800bb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb22:	e124      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bb24:	2380      	movs	r3, #128	; 0x80
 800bb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb2a:	e120      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4acb      	ldr	r2, [pc, #812]	; (800be60 <UART_SetConfig+0x698>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d176      	bne.n	800bc24 <UART_SetConfig+0x45c>
 800bb36:	4bcb      	ldr	r3, [pc, #812]	; (800be64 <UART_SetConfig+0x69c>)
 800bb38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb3e:	2b28      	cmp	r3, #40	; 0x28
 800bb40:	d86c      	bhi.n	800bc1c <UART_SetConfig+0x454>
 800bb42:	a201      	add	r2, pc, #4	; (adr r2, 800bb48 <UART_SetConfig+0x380>)
 800bb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb48:	0800bbed 	.word	0x0800bbed
 800bb4c:	0800bc1d 	.word	0x0800bc1d
 800bb50:	0800bc1d 	.word	0x0800bc1d
 800bb54:	0800bc1d 	.word	0x0800bc1d
 800bb58:	0800bc1d 	.word	0x0800bc1d
 800bb5c:	0800bc1d 	.word	0x0800bc1d
 800bb60:	0800bc1d 	.word	0x0800bc1d
 800bb64:	0800bc1d 	.word	0x0800bc1d
 800bb68:	0800bbf5 	.word	0x0800bbf5
 800bb6c:	0800bc1d 	.word	0x0800bc1d
 800bb70:	0800bc1d 	.word	0x0800bc1d
 800bb74:	0800bc1d 	.word	0x0800bc1d
 800bb78:	0800bc1d 	.word	0x0800bc1d
 800bb7c:	0800bc1d 	.word	0x0800bc1d
 800bb80:	0800bc1d 	.word	0x0800bc1d
 800bb84:	0800bc1d 	.word	0x0800bc1d
 800bb88:	0800bbfd 	.word	0x0800bbfd
 800bb8c:	0800bc1d 	.word	0x0800bc1d
 800bb90:	0800bc1d 	.word	0x0800bc1d
 800bb94:	0800bc1d 	.word	0x0800bc1d
 800bb98:	0800bc1d 	.word	0x0800bc1d
 800bb9c:	0800bc1d 	.word	0x0800bc1d
 800bba0:	0800bc1d 	.word	0x0800bc1d
 800bba4:	0800bc1d 	.word	0x0800bc1d
 800bba8:	0800bc05 	.word	0x0800bc05
 800bbac:	0800bc1d 	.word	0x0800bc1d
 800bbb0:	0800bc1d 	.word	0x0800bc1d
 800bbb4:	0800bc1d 	.word	0x0800bc1d
 800bbb8:	0800bc1d 	.word	0x0800bc1d
 800bbbc:	0800bc1d 	.word	0x0800bc1d
 800bbc0:	0800bc1d 	.word	0x0800bc1d
 800bbc4:	0800bc1d 	.word	0x0800bc1d
 800bbc8:	0800bc0d 	.word	0x0800bc0d
 800bbcc:	0800bc1d 	.word	0x0800bc1d
 800bbd0:	0800bc1d 	.word	0x0800bc1d
 800bbd4:	0800bc1d 	.word	0x0800bc1d
 800bbd8:	0800bc1d 	.word	0x0800bc1d
 800bbdc:	0800bc1d 	.word	0x0800bc1d
 800bbe0:	0800bc1d 	.word	0x0800bc1d
 800bbe4:	0800bc1d 	.word	0x0800bc1d
 800bbe8:	0800bc15 	.word	0x0800bc15
 800bbec:	2301      	movs	r3, #1
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbf2:	e0bc      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbfa:	e0b8      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc02:	e0b4      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc04:	2310      	movs	r3, #16
 800bc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc0a:	e0b0      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc0c:	2320      	movs	r3, #32
 800bc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc12:	e0ac      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc14:	2340      	movs	r3, #64	; 0x40
 800bc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc1a:	e0a8      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc1c:	2380      	movs	r3, #128	; 0x80
 800bc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc22:	e0a4      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a8f      	ldr	r2, [pc, #572]	; (800be68 <UART_SetConfig+0x6a0>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d130      	bne.n	800bc90 <UART_SetConfig+0x4c8>
 800bc2e:	4b8d      	ldr	r3, [pc, #564]	; (800be64 <UART_SetConfig+0x69c>)
 800bc30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc32:	f003 0307 	and.w	r3, r3, #7
 800bc36:	2b05      	cmp	r3, #5
 800bc38:	d826      	bhi.n	800bc88 <UART_SetConfig+0x4c0>
 800bc3a:	a201      	add	r2, pc, #4	; (adr r2, 800bc40 <UART_SetConfig+0x478>)
 800bc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc40:	0800bc59 	.word	0x0800bc59
 800bc44:	0800bc61 	.word	0x0800bc61
 800bc48:	0800bc69 	.word	0x0800bc69
 800bc4c:	0800bc71 	.word	0x0800bc71
 800bc50:	0800bc79 	.word	0x0800bc79
 800bc54:	0800bc81 	.word	0x0800bc81
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc5e:	e086      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc60:	2304      	movs	r3, #4
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc66:	e082      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc68:	2308      	movs	r3, #8
 800bc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc6e:	e07e      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc70:	2310      	movs	r3, #16
 800bc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc76:	e07a      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc78:	2320      	movs	r3, #32
 800bc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc7e:	e076      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc80:	2340      	movs	r3, #64	; 0x40
 800bc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc86:	e072      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc88:	2380      	movs	r3, #128	; 0x80
 800bc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc8e:	e06e      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a75      	ldr	r2, [pc, #468]	; (800be6c <UART_SetConfig+0x6a4>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d130      	bne.n	800bcfc <UART_SetConfig+0x534>
 800bc9a:	4b72      	ldr	r3, [pc, #456]	; (800be64 <UART_SetConfig+0x69c>)
 800bc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9e:	f003 0307 	and.w	r3, r3, #7
 800bca2:	2b05      	cmp	r3, #5
 800bca4:	d826      	bhi.n	800bcf4 <UART_SetConfig+0x52c>
 800bca6:	a201      	add	r2, pc, #4	; (adr r2, 800bcac <UART_SetConfig+0x4e4>)
 800bca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcac:	0800bcc5 	.word	0x0800bcc5
 800bcb0:	0800bccd 	.word	0x0800bccd
 800bcb4:	0800bcd5 	.word	0x0800bcd5
 800bcb8:	0800bcdd 	.word	0x0800bcdd
 800bcbc:	0800bce5 	.word	0x0800bce5
 800bcc0:	0800bced 	.word	0x0800bced
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcca:	e050      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bccc:	2304      	movs	r3, #4
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcd2:	e04c      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bcd4:	2308      	movs	r3, #8
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcda:	e048      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bcdc:	2310      	movs	r3, #16
 800bcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bce2:	e044      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bce4:	2320      	movs	r3, #32
 800bce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcea:	e040      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bcec:	2340      	movs	r3, #64	; 0x40
 800bcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcf2:	e03c      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bcf4:	2380      	movs	r3, #128	; 0x80
 800bcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcfa:	e038      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a5b      	ldr	r2, [pc, #364]	; (800be70 <UART_SetConfig+0x6a8>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d130      	bne.n	800bd68 <UART_SetConfig+0x5a0>
 800bd06:	4b57      	ldr	r3, [pc, #348]	; (800be64 <UART_SetConfig+0x69c>)
 800bd08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd0a:	f003 0307 	and.w	r3, r3, #7
 800bd0e:	2b05      	cmp	r3, #5
 800bd10:	d826      	bhi.n	800bd60 <UART_SetConfig+0x598>
 800bd12:	a201      	add	r2, pc, #4	; (adr r2, 800bd18 <UART_SetConfig+0x550>)
 800bd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd18:	0800bd31 	.word	0x0800bd31
 800bd1c:	0800bd39 	.word	0x0800bd39
 800bd20:	0800bd41 	.word	0x0800bd41
 800bd24:	0800bd49 	.word	0x0800bd49
 800bd28:	0800bd51 	.word	0x0800bd51
 800bd2c:	0800bd59 	.word	0x0800bd59
 800bd30:	2302      	movs	r3, #2
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd36:	e01a      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bd38:	2304      	movs	r3, #4
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd3e:	e016      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bd40:	2308      	movs	r3, #8
 800bd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd46:	e012      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bd48:	2310      	movs	r3, #16
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd4e:	e00e      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bd50:	2320      	movs	r3, #32
 800bd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd56:	e00a      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bd58:	2340      	movs	r3, #64	; 0x40
 800bd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd5e:	e006      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bd60:	2380      	movs	r3, #128	; 0x80
 800bd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd66:	e002      	b.n	800bd6e <UART_SetConfig+0x5a6>
 800bd68:	2380      	movs	r3, #128	; 0x80
 800bd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a3f      	ldr	r2, [pc, #252]	; (800be70 <UART_SetConfig+0x6a8>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	f040 80f8 	bne.w	800bf6a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bd7e:	2b20      	cmp	r3, #32
 800bd80:	dc46      	bgt.n	800be10 <UART_SetConfig+0x648>
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	f2c0 8082 	blt.w	800be8c <UART_SetConfig+0x6c4>
 800bd88:	3b02      	subs	r3, #2
 800bd8a:	2b1e      	cmp	r3, #30
 800bd8c:	d87e      	bhi.n	800be8c <UART_SetConfig+0x6c4>
 800bd8e:	a201      	add	r2, pc, #4	; (adr r2, 800bd94 <UART_SetConfig+0x5cc>)
 800bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd94:	0800be17 	.word	0x0800be17
 800bd98:	0800be8d 	.word	0x0800be8d
 800bd9c:	0800be1f 	.word	0x0800be1f
 800bda0:	0800be8d 	.word	0x0800be8d
 800bda4:	0800be8d 	.word	0x0800be8d
 800bda8:	0800be8d 	.word	0x0800be8d
 800bdac:	0800be2f 	.word	0x0800be2f
 800bdb0:	0800be8d 	.word	0x0800be8d
 800bdb4:	0800be8d 	.word	0x0800be8d
 800bdb8:	0800be8d 	.word	0x0800be8d
 800bdbc:	0800be8d 	.word	0x0800be8d
 800bdc0:	0800be8d 	.word	0x0800be8d
 800bdc4:	0800be8d 	.word	0x0800be8d
 800bdc8:	0800be8d 	.word	0x0800be8d
 800bdcc:	0800be3f 	.word	0x0800be3f
 800bdd0:	0800be8d 	.word	0x0800be8d
 800bdd4:	0800be8d 	.word	0x0800be8d
 800bdd8:	0800be8d 	.word	0x0800be8d
 800bddc:	0800be8d 	.word	0x0800be8d
 800bde0:	0800be8d 	.word	0x0800be8d
 800bde4:	0800be8d 	.word	0x0800be8d
 800bde8:	0800be8d 	.word	0x0800be8d
 800bdec:	0800be8d 	.word	0x0800be8d
 800bdf0:	0800be8d 	.word	0x0800be8d
 800bdf4:	0800be8d 	.word	0x0800be8d
 800bdf8:	0800be8d 	.word	0x0800be8d
 800bdfc:	0800be8d 	.word	0x0800be8d
 800be00:	0800be8d 	.word	0x0800be8d
 800be04:	0800be8d 	.word	0x0800be8d
 800be08:	0800be8d 	.word	0x0800be8d
 800be0c:	0800be7f 	.word	0x0800be7f
 800be10:	2b40      	cmp	r3, #64	; 0x40
 800be12:	d037      	beq.n	800be84 <UART_SetConfig+0x6bc>
 800be14:	e03a      	b.n	800be8c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800be16:	f7fc f9fd 	bl	8008214 <HAL_RCCEx_GetD3PCLK1Freq>
 800be1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800be1c:	e03c      	b.n	800be98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be22:	4618      	mov	r0, r3
 800be24:	f7fc fa0c 	bl	8008240 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be2c:	e034      	b.n	800be98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be2e:	f107 0318 	add.w	r3, r7, #24
 800be32:	4618      	mov	r0, r3
 800be34:	f7fc fb58 	bl	80084e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be3c:	e02c      	b.n	800be98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be3e:	4b09      	ldr	r3, [pc, #36]	; (800be64 <UART_SetConfig+0x69c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f003 0320 	and.w	r3, r3, #32
 800be46:	2b00      	cmp	r3, #0
 800be48:	d016      	beq.n	800be78 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be4a:	4b06      	ldr	r3, [pc, #24]	; (800be64 <UART_SetConfig+0x69c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	08db      	lsrs	r3, r3, #3
 800be50:	f003 0303 	and.w	r3, r3, #3
 800be54:	4a07      	ldr	r2, [pc, #28]	; (800be74 <UART_SetConfig+0x6ac>)
 800be56:	fa22 f303 	lsr.w	r3, r2, r3
 800be5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be5c:	e01c      	b.n	800be98 <UART_SetConfig+0x6d0>
 800be5e:	bf00      	nop
 800be60:	40011400 	.word	0x40011400
 800be64:	58024400 	.word	0x58024400
 800be68:	40007800 	.word	0x40007800
 800be6c:	40007c00 	.word	0x40007c00
 800be70:	58000c00 	.word	0x58000c00
 800be74:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800be78:	4b9d      	ldr	r3, [pc, #628]	; (800c0f0 <UART_SetConfig+0x928>)
 800be7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be7c:	e00c      	b.n	800be98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be7e:	4b9d      	ldr	r3, [pc, #628]	; (800c0f4 <UART_SetConfig+0x92c>)
 800be80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be82:	e009      	b.n	800be98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be8a:	e005      	b.n	800be98 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800be8c:	2300      	movs	r3, #0
 800be8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800be96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800be98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f000 81de 	beq.w	800c25c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea4:	4a94      	ldr	r2, [pc, #592]	; (800c0f8 <UART_SetConfig+0x930>)
 800bea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beaa:	461a      	mov	r2, r3
 800beac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beae:	fbb3 f3f2 	udiv	r3, r3, r2
 800beb2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	685a      	ldr	r2, [r3, #4]
 800beb8:	4613      	mov	r3, r2
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	4413      	add	r3, r2
 800bebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d305      	bcc.n	800bed0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800beca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800becc:	429a      	cmp	r2, r3
 800bece:	d903      	bls.n	800bed8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bed6:	e1c1      	b.n	800c25c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beda:	2200      	movs	r2, #0
 800bedc:	60bb      	str	r3, [r7, #8]
 800bede:	60fa      	str	r2, [r7, #12]
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	4a84      	ldr	r2, [pc, #528]	; (800c0f8 <UART_SetConfig+0x930>)
 800bee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beea:	b29b      	uxth	r3, r3
 800beec:	2200      	movs	r2, #0
 800beee:	603b      	str	r3, [r7, #0]
 800bef0:	607a      	str	r2, [r7, #4]
 800bef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800befa:	f7f4 fa41 	bl	8000380 <__aeabi_uldivmod>
 800befe:	4602      	mov	r2, r0
 800bf00:	460b      	mov	r3, r1
 800bf02:	4610      	mov	r0, r2
 800bf04:	4619      	mov	r1, r3
 800bf06:	f04f 0200 	mov.w	r2, #0
 800bf0a:	f04f 0300 	mov.w	r3, #0
 800bf0e:	020b      	lsls	r3, r1, #8
 800bf10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf14:	0202      	lsls	r2, r0, #8
 800bf16:	6979      	ldr	r1, [r7, #20]
 800bf18:	6849      	ldr	r1, [r1, #4]
 800bf1a:	0849      	lsrs	r1, r1, #1
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	460c      	mov	r4, r1
 800bf20:	4605      	mov	r5, r0
 800bf22:	eb12 0804 	adds.w	r8, r2, r4
 800bf26:	eb43 0905 	adc.w	r9, r3, r5
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	469a      	mov	sl, r3
 800bf32:	4693      	mov	fp, r2
 800bf34:	4652      	mov	r2, sl
 800bf36:	465b      	mov	r3, fp
 800bf38:	4640      	mov	r0, r8
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	f7f4 fa20 	bl	8000380 <__aeabi_uldivmod>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	4613      	mov	r3, r2
 800bf46:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf4e:	d308      	bcc.n	800bf62 <UART_SetConfig+0x79a>
 800bf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf56:	d204      	bcs.n	800bf62 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf5e:	60da      	str	r2, [r3, #12]
 800bf60:	e17c      	b.n	800c25c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bf68:	e178      	b.n	800c25c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	69db      	ldr	r3, [r3, #28]
 800bf6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf72:	f040 80c5 	bne.w	800c100 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bf76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bf7a:	2b20      	cmp	r3, #32
 800bf7c:	dc48      	bgt.n	800c010 <UART_SetConfig+0x848>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	db7b      	blt.n	800c07a <UART_SetConfig+0x8b2>
 800bf82:	2b20      	cmp	r3, #32
 800bf84:	d879      	bhi.n	800c07a <UART_SetConfig+0x8b2>
 800bf86:	a201      	add	r2, pc, #4	; (adr r2, 800bf8c <UART_SetConfig+0x7c4>)
 800bf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf8c:	0800c017 	.word	0x0800c017
 800bf90:	0800c01f 	.word	0x0800c01f
 800bf94:	0800c07b 	.word	0x0800c07b
 800bf98:	0800c07b 	.word	0x0800c07b
 800bf9c:	0800c027 	.word	0x0800c027
 800bfa0:	0800c07b 	.word	0x0800c07b
 800bfa4:	0800c07b 	.word	0x0800c07b
 800bfa8:	0800c07b 	.word	0x0800c07b
 800bfac:	0800c037 	.word	0x0800c037
 800bfb0:	0800c07b 	.word	0x0800c07b
 800bfb4:	0800c07b 	.word	0x0800c07b
 800bfb8:	0800c07b 	.word	0x0800c07b
 800bfbc:	0800c07b 	.word	0x0800c07b
 800bfc0:	0800c07b 	.word	0x0800c07b
 800bfc4:	0800c07b 	.word	0x0800c07b
 800bfc8:	0800c07b 	.word	0x0800c07b
 800bfcc:	0800c047 	.word	0x0800c047
 800bfd0:	0800c07b 	.word	0x0800c07b
 800bfd4:	0800c07b 	.word	0x0800c07b
 800bfd8:	0800c07b 	.word	0x0800c07b
 800bfdc:	0800c07b 	.word	0x0800c07b
 800bfe0:	0800c07b 	.word	0x0800c07b
 800bfe4:	0800c07b 	.word	0x0800c07b
 800bfe8:	0800c07b 	.word	0x0800c07b
 800bfec:	0800c07b 	.word	0x0800c07b
 800bff0:	0800c07b 	.word	0x0800c07b
 800bff4:	0800c07b 	.word	0x0800c07b
 800bff8:	0800c07b 	.word	0x0800c07b
 800bffc:	0800c07b 	.word	0x0800c07b
 800c000:	0800c07b 	.word	0x0800c07b
 800c004:	0800c07b 	.word	0x0800c07b
 800c008:	0800c07b 	.word	0x0800c07b
 800c00c:	0800c06d 	.word	0x0800c06d
 800c010:	2b40      	cmp	r3, #64	; 0x40
 800c012:	d02e      	beq.n	800c072 <UART_SetConfig+0x8aa>
 800c014:	e031      	b.n	800c07a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c016:	f7fa fec7 	bl	8006da8 <HAL_RCC_GetPCLK1Freq>
 800c01a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c01c:	e033      	b.n	800c086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c01e:	f7fa fed9 	bl	8006dd4 <HAL_RCC_GetPCLK2Freq>
 800c022:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c024:	e02f      	b.n	800c086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fc f908 	bl	8008240 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c034:	e027      	b.n	800c086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c036:	f107 0318 	add.w	r3, r7, #24
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fc fa54 	bl	80084e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c044:	e01f      	b.n	800c086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c046:	4b2d      	ldr	r3, [pc, #180]	; (800c0fc <UART_SetConfig+0x934>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 0320 	and.w	r3, r3, #32
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d009      	beq.n	800c066 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c052:	4b2a      	ldr	r3, [pc, #168]	; (800c0fc <UART_SetConfig+0x934>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	08db      	lsrs	r3, r3, #3
 800c058:	f003 0303 	and.w	r3, r3, #3
 800c05c:	4a24      	ldr	r2, [pc, #144]	; (800c0f0 <UART_SetConfig+0x928>)
 800c05e:	fa22 f303 	lsr.w	r3, r2, r3
 800c062:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c064:	e00f      	b.n	800c086 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c066:	4b22      	ldr	r3, [pc, #136]	; (800c0f0 <UART_SetConfig+0x928>)
 800c068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c06a:	e00c      	b.n	800c086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c06c:	4b21      	ldr	r3, [pc, #132]	; (800c0f4 <UART_SetConfig+0x92c>)
 800c06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c070:	e009      	b.n	800c086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c078:	e005      	b.n	800c086 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c07a:	2300      	movs	r3, #0
 800c07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f000 80e7 	beq.w	800c25c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c092:	4a19      	ldr	r2, [pc, #100]	; (800c0f8 <UART_SetConfig+0x930>)
 800c094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c098:	461a      	mov	r2, r3
 800c09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c09c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0a0:	005a      	lsls	r2, r3, #1
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	085b      	lsrs	r3, r3, #1
 800c0a8:	441a      	add	r2, r3
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	2b0f      	cmp	r3, #15
 800c0b8:	d916      	bls.n	800c0e8 <UART_SetConfig+0x920>
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0c0:	d212      	bcs.n	800c0e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	f023 030f 	bic.w	r3, r3, #15
 800c0ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	085b      	lsrs	r3, r3, #1
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	f003 0307 	and.w	r3, r3, #7
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c0e4:	60da      	str	r2, [r3, #12]
 800c0e6:	e0b9      	b.n	800c25c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c0ee:	e0b5      	b.n	800c25c <UART_SetConfig+0xa94>
 800c0f0:	03d09000 	.word	0x03d09000
 800c0f4:	003d0900 	.word	0x003d0900
 800c0f8:	0800d82c 	.word	0x0800d82c
 800c0fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c100:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c104:	2b20      	cmp	r3, #32
 800c106:	dc49      	bgt.n	800c19c <UART_SetConfig+0x9d4>
 800c108:	2b00      	cmp	r3, #0
 800c10a:	db7c      	blt.n	800c206 <UART_SetConfig+0xa3e>
 800c10c:	2b20      	cmp	r3, #32
 800c10e:	d87a      	bhi.n	800c206 <UART_SetConfig+0xa3e>
 800c110:	a201      	add	r2, pc, #4	; (adr r2, 800c118 <UART_SetConfig+0x950>)
 800c112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c116:	bf00      	nop
 800c118:	0800c1a3 	.word	0x0800c1a3
 800c11c:	0800c1ab 	.word	0x0800c1ab
 800c120:	0800c207 	.word	0x0800c207
 800c124:	0800c207 	.word	0x0800c207
 800c128:	0800c1b3 	.word	0x0800c1b3
 800c12c:	0800c207 	.word	0x0800c207
 800c130:	0800c207 	.word	0x0800c207
 800c134:	0800c207 	.word	0x0800c207
 800c138:	0800c1c3 	.word	0x0800c1c3
 800c13c:	0800c207 	.word	0x0800c207
 800c140:	0800c207 	.word	0x0800c207
 800c144:	0800c207 	.word	0x0800c207
 800c148:	0800c207 	.word	0x0800c207
 800c14c:	0800c207 	.word	0x0800c207
 800c150:	0800c207 	.word	0x0800c207
 800c154:	0800c207 	.word	0x0800c207
 800c158:	0800c1d3 	.word	0x0800c1d3
 800c15c:	0800c207 	.word	0x0800c207
 800c160:	0800c207 	.word	0x0800c207
 800c164:	0800c207 	.word	0x0800c207
 800c168:	0800c207 	.word	0x0800c207
 800c16c:	0800c207 	.word	0x0800c207
 800c170:	0800c207 	.word	0x0800c207
 800c174:	0800c207 	.word	0x0800c207
 800c178:	0800c207 	.word	0x0800c207
 800c17c:	0800c207 	.word	0x0800c207
 800c180:	0800c207 	.word	0x0800c207
 800c184:	0800c207 	.word	0x0800c207
 800c188:	0800c207 	.word	0x0800c207
 800c18c:	0800c207 	.word	0x0800c207
 800c190:	0800c207 	.word	0x0800c207
 800c194:	0800c207 	.word	0x0800c207
 800c198:	0800c1f9 	.word	0x0800c1f9
 800c19c:	2b40      	cmp	r3, #64	; 0x40
 800c19e:	d02e      	beq.n	800c1fe <UART_SetConfig+0xa36>
 800c1a0:	e031      	b.n	800c206 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1a2:	f7fa fe01 	bl	8006da8 <HAL_RCC_GetPCLK1Freq>
 800c1a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c1a8:	e033      	b.n	800c212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1aa:	f7fa fe13 	bl	8006dd4 <HAL_RCC_GetPCLK2Freq>
 800c1ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c1b0:	e02f      	b.n	800c212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fc f842 	bl	8008240 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c0:	e027      	b.n	800c212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1c2:	f107 0318 	add.w	r3, r7, #24
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fc f98e 	bl	80084e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d0:	e01f      	b.n	800c212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1d2:	4b2d      	ldr	r3, [pc, #180]	; (800c288 <UART_SetConfig+0xac0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f003 0320 	and.w	r3, r3, #32
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d009      	beq.n	800c1f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1de:	4b2a      	ldr	r3, [pc, #168]	; (800c288 <UART_SetConfig+0xac0>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	08db      	lsrs	r3, r3, #3
 800c1e4:	f003 0303 	and.w	r3, r3, #3
 800c1e8:	4a28      	ldr	r2, [pc, #160]	; (800c28c <UART_SetConfig+0xac4>)
 800c1ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1f0:	e00f      	b.n	800c212 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c1f2:	4b26      	ldr	r3, [pc, #152]	; (800c28c <UART_SetConfig+0xac4>)
 800c1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f6:	e00c      	b.n	800c212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1f8:	4b25      	ldr	r3, [pc, #148]	; (800c290 <UART_SetConfig+0xac8>)
 800c1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1fc:	e009      	b.n	800c212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c204:	e005      	b.n	800c212 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c206:	2300      	movs	r3, #0
 800c208:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c210:	bf00      	nop
    }

    if (pclk != 0U)
 800c212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c214:	2b00      	cmp	r3, #0
 800c216:	d021      	beq.n	800c25c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21c:	4a1d      	ldr	r2, [pc, #116]	; (800c294 <UART_SetConfig+0xacc>)
 800c21e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c222:	461a      	mov	r2, r3
 800c224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c226:	fbb3 f2f2 	udiv	r2, r3, r2
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	085b      	lsrs	r3, r3, #1
 800c230:	441a      	add	r2, r3
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	fbb2 f3f3 	udiv	r3, r2, r3
 800c23a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23e:	2b0f      	cmp	r3, #15
 800c240:	d909      	bls.n	800c256 <UART_SetConfig+0xa8e>
 800c242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c248:	d205      	bcs.n	800c256 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	60da      	str	r2, [r3, #12]
 800c254:	e002      	b.n	800c25c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c256:	2301      	movs	r3, #1
 800c258:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2201      	movs	r2, #1
 800c260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	2201      	movs	r2, #1
 800c268:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	2200      	movs	r2, #0
 800c270:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2200      	movs	r2, #0
 800c276:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c278:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3748      	adds	r7, #72	; 0x48
 800c280:	46bd      	mov	sp, r7
 800c282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c286:	bf00      	nop
 800c288:	58024400 	.word	0x58024400
 800c28c:	03d09000 	.word	0x03d09000
 800c290:	003d0900 	.word	0x003d0900
 800c294:	0800d82c 	.word	0x0800d82c

0800c298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a4:	f003 0301 	and.w	r3, r3, #1
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00a      	beq.n	800c2c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	430a      	orrs	r2, r1
 800c2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c6:	f003 0302 	and.w	r3, r3, #2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00a      	beq.n	800c2e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	430a      	orrs	r2, r1
 800c2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e8:	f003 0304 	and.w	r3, r3, #4
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00a      	beq.n	800c306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	430a      	orrs	r2, r1
 800c304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c30a:	f003 0308 	and.w	r3, r3, #8
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00a      	beq.n	800c328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	430a      	orrs	r2, r1
 800c326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c32c:	f003 0310 	and.w	r3, r3, #16
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00a      	beq.n	800c34a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	430a      	orrs	r2, r1
 800c348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c34e:	f003 0320 	and.w	r3, r3, #32
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00a      	beq.n	800c36c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	430a      	orrs	r2, r1
 800c36a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c374:	2b00      	cmp	r3, #0
 800c376:	d01a      	beq.n	800c3ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	430a      	orrs	r2, r1
 800c38c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c396:	d10a      	bne.n	800c3ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	430a      	orrs	r2, r1
 800c3ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00a      	beq.n	800c3d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	430a      	orrs	r2, r1
 800c3ce:	605a      	str	r2, [r3, #4]
  }
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b098      	sub	sp, #96	; 0x60
 800c3e0:	af02      	add	r7, sp, #8
 800c3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3ec:	f7f6 f8e6 	bl	80025bc <HAL_GetTick>
 800c3f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 0308 	and.w	r3, r3, #8
 800c3fc:	2b08      	cmp	r3, #8
 800c3fe:	d12f      	bne.n	800c460 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c408:	2200      	movs	r2, #0
 800c40a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 f88e 	bl	800c530 <UART_WaitOnFlagUntilTimeout>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d022      	beq.n	800c460 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c422:	e853 3f00 	ldrex	r3, [r3]
 800c426:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c42e:	653b      	str	r3, [r7, #80]	; 0x50
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	461a      	mov	r2, r3
 800c436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c438:	647b      	str	r3, [r7, #68]	; 0x44
 800c43a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c43e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c440:	e841 2300 	strex	r3, r2, [r1]
 800c444:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e6      	bne.n	800c41a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2220      	movs	r2, #32
 800c450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c45c:	2303      	movs	r3, #3
 800c45e:	e063      	b.n	800c528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f003 0304 	and.w	r3, r3, #4
 800c46a:	2b04      	cmp	r3, #4
 800c46c:	d149      	bne.n	800c502 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c46e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c476:	2200      	movs	r2, #0
 800c478:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f857 	bl	800c530 <UART_WaitOnFlagUntilTimeout>
 800c482:	4603      	mov	r3, r0
 800c484:	2b00      	cmp	r3, #0
 800c486:	d03c      	beq.n	800c502 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c490:	e853 3f00 	ldrex	r3, [r3]
 800c494:	623b      	str	r3, [r7, #32]
   return(result);
 800c496:	6a3b      	ldr	r3, [r7, #32]
 800c498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c49c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4a6:	633b      	str	r3, [r7, #48]	; 0x30
 800c4a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ae:	e841 2300 	strex	r3, r2, [r1]
 800c4b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d1e6      	bne.n	800c488 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	3308      	adds	r3, #8
 800c4c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	e853 3f00 	ldrex	r3, [r3]
 800c4c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f023 0301 	bic.w	r3, r3, #1
 800c4d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	3308      	adds	r3, #8
 800c4d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4da:	61fa      	str	r2, [r7, #28]
 800c4dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4de:	69b9      	ldr	r1, [r7, #24]
 800c4e0:	69fa      	ldr	r2, [r7, #28]
 800c4e2:	e841 2300 	strex	r3, r2, [r1]
 800c4e6:	617b      	str	r3, [r7, #20]
   return(result);
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1e5      	bne.n	800c4ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2220      	movs	r2, #32
 800c4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e012      	b.n	800c528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2220      	movs	r2, #32
 800c506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2220      	movs	r2, #32
 800c50e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3758      	adds	r7, #88	; 0x58
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	603b      	str	r3, [r7, #0]
 800c53c:	4613      	mov	r3, r2
 800c53e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c540:	e049      	b.n	800c5d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c548:	d045      	beq.n	800c5d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c54a:	f7f6 f837 	bl	80025bc <HAL_GetTick>
 800c54e:	4602      	mov	r2, r0
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	69ba      	ldr	r2, [r7, #24]
 800c556:	429a      	cmp	r2, r3
 800c558:	d302      	bcc.n	800c560 <UART_WaitOnFlagUntilTimeout+0x30>
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c560:	2303      	movs	r3, #3
 800c562:	e048      	b.n	800c5f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 0304 	and.w	r3, r3, #4
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d031      	beq.n	800c5d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	69db      	ldr	r3, [r3, #28]
 800c578:	f003 0308 	and.w	r3, r3, #8
 800c57c:	2b08      	cmp	r3, #8
 800c57e:	d110      	bne.n	800c5a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2208      	movs	r2, #8
 800c586:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f000 f921 	bl	800c7d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2208      	movs	r2, #8
 800c592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e029      	b.n	800c5f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5b0:	d111      	bne.n	800c5d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f000 f907 	bl	800c7d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2220      	movs	r2, #32
 800c5c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c5d2:	2303      	movs	r3, #3
 800c5d4:	e00f      	b.n	800c5f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	69da      	ldr	r2, [r3, #28]
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	4013      	ands	r3, r2
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	bf0c      	ite	eq
 800c5e6:	2301      	moveq	r3, #1
 800c5e8:	2300      	movne	r3, #0
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	79fb      	ldrb	r3, [r7, #7]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d0a6      	beq.n	800c542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
	...

0800c600 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b096      	sub	sp, #88	; 0x58
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	4613      	mov	r3, r2
 800c60c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	88fa      	ldrh	r2, [r7, #6]
 800c618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2222      	movs	r2, #34	; 0x22
 800c628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c632:	2b00      	cmp	r3, #0
 800c634:	d02d      	beq.n	800c692 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c63c:	4a40      	ldr	r2, [pc, #256]	; (800c740 <UART_Start_Receive_DMA+0x140>)
 800c63e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c646:	4a3f      	ldr	r2, [pc, #252]	; (800c744 <UART_Start_Receive_DMA+0x144>)
 800c648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c650:	4a3d      	ldr	r2, [pc, #244]	; (800c748 <UART_Start_Receive_DMA+0x148>)
 800c652:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c65a:	2200      	movs	r2, #0
 800c65c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	3324      	adds	r3, #36	; 0x24
 800c66a:	4619      	mov	r1, r3
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c670:	461a      	mov	r2, r3
 800c672:	88fb      	ldrh	r3, [r7, #6]
 800c674:	f7f6 fc4a 	bl	8002f0c <HAL_DMA_Start_IT>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d009      	beq.n	800c692 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2210      	movs	r2, #16
 800c682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2220      	movs	r2, #32
 800c68a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e051      	b.n	800c736 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d018      	beq.n	800c6cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6a2:	e853 3f00 	ldrex	r3, [r3]
 800c6a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6ae:	657b      	str	r3, [r7, #84]	; 0x54
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6ba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c6be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6c0:	e841 2300 	strex	r3, r2, [r1]
 800c6c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1e6      	bne.n	800c69a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d6:	e853 3f00 	ldrex	r3, [r3]
 800c6da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	f043 0301 	orr.w	r3, r3, #1
 800c6e2:	653b      	str	r3, [r7, #80]	; 0x50
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c6ec:	637a      	str	r2, [r7, #52]	; 0x34
 800c6ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6f4:	e841 2300 	strex	r3, r2, [r1]
 800c6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1e5      	bne.n	800c6cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3308      	adds	r3, #8
 800c706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	e853 3f00 	ldrex	r3, [r3]
 800c70e:	613b      	str	r3, [r7, #16]
   return(result);
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c716:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	3308      	adds	r3, #8
 800c71e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c720:	623a      	str	r2, [r7, #32]
 800c722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c724:	69f9      	ldr	r1, [r7, #28]
 800c726:	6a3a      	ldr	r2, [r7, #32]
 800c728:	e841 2300 	strex	r3, r2, [r1]
 800c72c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1e5      	bne.n	800c700 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3758      	adds	r7, #88	; 0x58
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	0800c89d 	.word	0x0800c89d
 800c744:	0800c9c5 	.word	0x0800c9c5
 800c748:	0800ca03 	.word	0x0800ca03

0800c74c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b08f      	sub	sp, #60	; 0x3c
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75a:	6a3b      	ldr	r3, [r7, #32]
 800c75c:	e853 3f00 	ldrex	r3, [r3]
 800c760:	61fb      	str	r3, [r7, #28]
   return(result);
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c768:	637b      	str	r3, [r7, #52]	; 0x34
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	461a      	mov	r2, r3
 800c770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c772:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c774:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c77a:	e841 2300 	strex	r3, r2, [r1]
 800c77e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1e6      	bne.n	800c754 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3308      	adds	r3, #8
 800c78c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	e853 3f00 	ldrex	r3, [r3]
 800c794:	60bb      	str	r3, [r7, #8]
   return(result);
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c79c:	633b      	str	r3, [r7, #48]	; 0x30
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	3308      	adds	r3, #8
 800c7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7a6:	61ba      	str	r2, [r7, #24]
 800c7a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7aa:	6979      	ldr	r1, [r7, #20]
 800c7ac:	69ba      	ldr	r2, [r7, #24]
 800c7ae:	e841 2300 	strex	r3, r2, [r1]
 800c7b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1e5      	bne.n	800c786 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2220      	movs	r2, #32
 800c7be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800c7c2:	bf00      	nop
 800c7c4:	373c      	adds	r7, #60	; 0x3c
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
	...

0800c7d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b095      	sub	sp, #84	; 0x54
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e0:	e853 3f00 	ldrex	r3, [r3]
 800c7e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7f6:	643b      	str	r3, [r7, #64]	; 0x40
 800c7f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c7fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7fe:	e841 2300 	strex	r3, r2, [r1]
 800c802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1e6      	bne.n	800c7d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	3308      	adds	r3, #8
 800c810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c812:	6a3b      	ldr	r3, [r7, #32]
 800c814:	e853 3f00 	ldrex	r3, [r3]
 800c818:	61fb      	str	r3, [r7, #28]
   return(result);
 800c81a:	69fa      	ldr	r2, [r7, #28]
 800c81c:	4b1e      	ldr	r3, [pc, #120]	; (800c898 <UART_EndRxTransfer+0xc8>)
 800c81e:	4013      	ands	r3, r2
 800c820:	64bb      	str	r3, [r7, #72]	; 0x48
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	3308      	adds	r3, #8
 800c828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c82a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c82c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c832:	e841 2300 	strex	r3, r2, [r1]
 800c836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1e5      	bne.n	800c80a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c842:	2b01      	cmp	r3, #1
 800c844:	d118      	bne.n	800c878 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	e853 3f00 	ldrex	r3, [r3]
 800c852:	60bb      	str	r3, [r7, #8]
   return(result);
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	f023 0310 	bic.w	r3, r3, #16
 800c85a:	647b      	str	r3, [r7, #68]	; 0x44
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	461a      	mov	r2, r3
 800c862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c864:	61bb      	str	r3, [r7, #24]
 800c866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c868:	6979      	ldr	r1, [r7, #20]
 800c86a:	69ba      	ldr	r2, [r7, #24]
 800c86c:	e841 2300 	strex	r3, r2, [r1]
 800c870:	613b      	str	r3, [r7, #16]
   return(result);
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1e6      	bne.n	800c846 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2220      	movs	r2, #32
 800c87c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c88c:	bf00      	nop
 800c88e:	3754      	adds	r7, #84	; 0x54
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	effffffe 	.word	0xeffffffe

0800c89c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b09c      	sub	sp, #112	; 0x70
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	69db      	ldr	r3, [r3, #28]
 800c8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b2:	d071      	beq.n	800c998 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c8b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c4:	e853 3f00 	ldrex	r3, [r3]
 800c8c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8da:	65bb      	str	r3, [r7, #88]	; 0x58
 800c8dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8e2:	e841 2300 	strex	r3, r2, [r1]
 800c8e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1e6      	bne.n	800c8bc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	3308      	adds	r3, #8
 800c8f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f8:	e853 3f00 	ldrex	r3, [r3]
 800c8fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c900:	f023 0301 	bic.w	r3, r3, #1
 800c904:	667b      	str	r3, [r7, #100]	; 0x64
 800c906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3308      	adds	r3, #8
 800c90c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c90e:	647a      	str	r2, [r7, #68]	; 0x44
 800c910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c916:	e841 2300 	strex	r3, r2, [r1]
 800c91a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1e5      	bne.n	800c8ee <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3308      	adds	r3, #8
 800c928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	e853 3f00 	ldrex	r3, [r3]
 800c930:	623b      	str	r3, [r7, #32]
   return(result);
 800c932:	6a3b      	ldr	r3, [r7, #32]
 800c934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c938:	663b      	str	r3, [r7, #96]	; 0x60
 800c93a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	3308      	adds	r3, #8
 800c940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c942:	633a      	str	r2, [r7, #48]	; 0x30
 800c944:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c94a:	e841 2300 	strex	r3, r2, [r1]
 800c94e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1e5      	bne.n	800c922 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c958:	2220      	movs	r2, #32
 800c95a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c95e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c962:	2b01      	cmp	r3, #1
 800c964:	d118      	bne.n	800c998 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	e853 3f00 	ldrex	r3, [r3]
 800c972:	60fb      	str	r3, [r7, #12]
   return(result);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f023 0310 	bic.w	r3, r3, #16
 800c97a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c97c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	461a      	mov	r2, r3
 800c982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c984:	61fb      	str	r3, [r7, #28]
 800c986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c988:	69b9      	ldr	r1, [r7, #24]
 800c98a:	69fa      	ldr	r2, [r7, #28]
 800c98c:	e841 2300 	strex	r3, r2, [r1]
 800c990:	617b      	str	r3, [r7, #20]
   return(result);
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d1e6      	bne.n	800c966 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c99a:	2200      	movs	r2, #0
 800c99c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c99e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d107      	bne.n	800c9b6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c9b0:	f7fe fefe 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c9b4:	e002      	b.n	800c9bc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c9b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c9b8:	f7f4 fc22 	bl	8001200 <HAL_UART_RxCpltCallback>
}
 800c9bc:	bf00      	nop
 800c9be:	3770      	adds	r7, #112	; 0x70
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d109      	bne.n	800c9f4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9e6:	085b      	lsrs	r3, r3, #1
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f7fe fedf 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c9f2:	e002      	b.n	800c9fa <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f7fe fed1 	bl	800b79c <HAL_UART_RxHalfCpltCallback>
}
 800c9fa:	bf00      	nop
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b086      	sub	sp, #24
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca16:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca1e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca2a:	2b80      	cmp	r3, #128	; 0x80
 800ca2c:	d109      	bne.n	800ca42 <UART_DMAError+0x40>
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	2b21      	cmp	r3, #33	; 0x21
 800ca32:	d106      	bne.n	800ca42 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	2200      	movs	r2, #0
 800ca38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ca3c:	6978      	ldr	r0, [r7, #20]
 800ca3e:	f7ff fe85 	bl	800c74c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca4c:	2b40      	cmp	r3, #64	; 0x40
 800ca4e:	d109      	bne.n	800ca64 <UART_DMAError+0x62>
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2b22      	cmp	r3, #34	; 0x22
 800ca54:	d106      	bne.n	800ca64 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ca5e:	6978      	ldr	r0, [r7, #20]
 800ca60:	f7ff feb6 	bl	800c7d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca6a:	f043 0210 	orr.w	r2, r3, #16
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca74:	6978      	ldr	r0, [r7, #20]
 800ca76:	f7f4 fc65 	bl	8001344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca7a:	bf00      	nop
 800ca7c:	3718      	adds	r7, #24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b084      	sub	sp, #16
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f7f4 fc4f 	bl	8001344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800caa6:	bf00      	nop
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b088      	sub	sp, #32
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	e853 3f00 	ldrex	r3, [r3]
 800cac2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caca:	61fb      	str	r3, [r7, #28]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	461a      	mov	r2, r3
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	61bb      	str	r3, [r7, #24]
 800cad6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad8:	6979      	ldr	r1, [r7, #20]
 800cada:	69ba      	ldr	r2, [r7, #24]
 800cadc:	e841 2300 	strex	r3, r2, [r1]
 800cae0:	613b      	str	r3, [r7, #16]
   return(result);
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1e6      	bne.n	800cab6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2220      	movs	r2, #32
 800caec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7fe fe46 	bl	800b788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cafc:	bf00      	nop
 800cafe:	3720      	adds	r7, #32
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb0c:	bf00      	nop
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr

0800cb18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cb34:	bf00      	nop
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d101      	bne.n	800cb56 <HAL_UARTEx_DisableFifoMode+0x16>
 800cb52:	2302      	movs	r3, #2
 800cb54:	e027      	b.n	800cba6 <HAL_UARTEx_DisableFifoMode+0x66>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2224      	movs	r2, #36	; 0x24
 800cb62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f022 0201 	bic.w	r2, r2, #1
 800cb7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cb84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2220      	movs	r2, #32
 800cb98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3714      	adds	r7, #20
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b084      	sub	sp, #16
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d101      	bne.n	800cbca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cbc6:	2302      	movs	r3, #2
 800cbc8:	e02d      	b.n	800cc26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2224      	movs	r2, #36	; 0x24
 800cbd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f022 0201 	bic.w	r2, r2, #1
 800cbf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	683a      	ldr	r2, [r7, #0]
 800cc02:	430a      	orrs	r2, r1
 800cc04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 f850 	bl	800ccac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2220      	movs	r2, #32
 800cc18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b084      	sub	sp, #16
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
 800cc36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d101      	bne.n	800cc46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cc42:	2302      	movs	r3, #2
 800cc44:	e02d      	b.n	800cca2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2224      	movs	r2, #36	; 0x24
 800cc52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f022 0201 	bic.w	r2, r2, #1
 800cc6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	430a      	orrs	r2, r1
 800cc80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f812 	bl	800ccac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2220      	movs	r2, #32
 800cc94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3710      	adds	r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
	...

0800ccac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d108      	bne.n	800ccce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cccc:	e031      	b.n	800cd32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ccce:	2310      	movs	r3, #16
 800ccd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ccd2:	2310      	movs	r3, #16
 800ccd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	0e5b      	lsrs	r3, r3, #25
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	f003 0307 	and.w	r3, r3, #7
 800cce4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	0f5b      	lsrs	r3, r3, #29
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	f003 0307 	and.w	r3, r3, #7
 800ccf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccf6:	7bbb      	ldrb	r3, [r7, #14]
 800ccf8:	7b3a      	ldrb	r2, [r7, #12]
 800ccfa:	4911      	ldr	r1, [pc, #68]	; (800cd40 <UARTEx_SetNbDataToProcess+0x94>)
 800ccfc:	5c8a      	ldrb	r2, [r1, r2]
 800ccfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd02:	7b3a      	ldrb	r2, [r7, #12]
 800cd04:	490f      	ldr	r1, [pc, #60]	; (800cd44 <UARTEx_SetNbDataToProcess+0x98>)
 800cd06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd08:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd0c:	b29a      	uxth	r2, r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
 800cd16:	7b7a      	ldrb	r2, [r7, #13]
 800cd18:	4909      	ldr	r1, [pc, #36]	; (800cd40 <UARTEx_SetNbDataToProcess+0x94>)
 800cd1a:	5c8a      	ldrb	r2, [r1, r2]
 800cd1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cd20:	7b7a      	ldrb	r2, [r7, #13]
 800cd22:	4908      	ldr	r1, [pc, #32]	; (800cd44 <UARTEx_SetNbDataToProcess+0x98>)
 800cd24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd26:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cd32:	bf00      	nop
 800cd34:	3714      	adds	r7, #20
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	0800d844 	.word	0x0800d844
 800cd44:	0800d84c 	.word	0x0800d84c

0800cd48 <siprintf>:
 800cd48:	b40e      	push	{r1, r2, r3}
 800cd4a:	b500      	push	{lr}
 800cd4c:	b09c      	sub	sp, #112	; 0x70
 800cd4e:	ab1d      	add	r3, sp, #116	; 0x74
 800cd50:	9002      	str	r0, [sp, #8]
 800cd52:	9006      	str	r0, [sp, #24]
 800cd54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd58:	4809      	ldr	r0, [pc, #36]	; (800cd80 <siprintf+0x38>)
 800cd5a:	9107      	str	r1, [sp, #28]
 800cd5c:	9104      	str	r1, [sp, #16]
 800cd5e:	4909      	ldr	r1, [pc, #36]	; (800cd84 <siprintf+0x3c>)
 800cd60:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd64:	9105      	str	r1, [sp, #20]
 800cd66:	6800      	ldr	r0, [r0, #0]
 800cd68:	9301      	str	r3, [sp, #4]
 800cd6a:	a902      	add	r1, sp, #8
 800cd6c:	f000 f9a0 	bl	800d0b0 <_svfiprintf_r>
 800cd70:	9b02      	ldr	r3, [sp, #8]
 800cd72:	2200      	movs	r2, #0
 800cd74:	701a      	strb	r2, [r3, #0]
 800cd76:	b01c      	add	sp, #112	; 0x70
 800cd78:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd7c:	b003      	add	sp, #12
 800cd7e:	4770      	bx	lr
 800cd80:	24000060 	.word	0x24000060
 800cd84:	ffff0208 	.word	0xffff0208

0800cd88 <memset>:
 800cd88:	4402      	add	r2, r0
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d100      	bne.n	800cd92 <memset+0xa>
 800cd90:	4770      	bx	lr
 800cd92:	f803 1b01 	strb.w	r1, [r3], #1
 800cd96:	e7f9      	b.n	800cd8c <memset+0x4>

0800cd98 <__errno>:
 800cd98:	4b01      	ldr	r3, [pc, #4]	; (800cda0 <__errno+0x8>)
 800cd9a:	6818      	ldr	r0, [r3, #0]
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop
 800cda0:	24000060 	.word	0x24000060

0800cda4 <__libc_init_array>:
 800cda4:	b570      	push	{r4, r5, r6, lr}
 800cda6:	4d0d      	ldr	r5, [pc, #52]	; (800cddc <__libc_init_array+0x38>)
 800cda8:	4c0d      	ldr	r4, [pc, #52]	; (800cde0 <__libc_init_array+0x3c>)
 800cdaa:	1b64      	subs	r4, r4, r5
 800cdac:	10a4      	asrs	r4, r4, #2
 800cdae:	2600      	movs	r6, #0
 800cdb0:	42a6      	cmp	r6, r4
 800cdb2:	d109      	bne.n	800cdc8 <__libc_init_array+0x24>
 800cdb4:	4d0b      	ldr	r5, [pc, #44]	; (800cde4 <__libc_init_array+0x40>)
 800cdb6:	4c0c      	ldr	r4, [pc, #48]	; (800cde8 <__libc_init_array+0x44>)
 800cdb8:	f000 fc6a 	bl	800d690 <_init>
 800cdbc:	1b64      	subs	r4, r4, r5
 800cdbe:	10a4      	asrs	r4, r4, #2
 800cdc0:	2600      	movs	r6, #0
 800cdc2:	42a6      	cmp	r6, r4
 800cdc4:	d105      	bne.n	800cdd2 <__libc_init_array+0x2e>
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}
 800cdc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdcc:	4798      	blx	r3
 800cdce:	3601      	adds	r6, #1
 800cdd0:	e7ee      	b.n	800cdb0 <__libc_init_array+0xc>
 800cdd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdd6:	4798      	blx	r3
 800cdd8:	3601      	adds	r6, #1
 800cdda:	e7f2      	b.n	800cdc2 <__libc_init_array+0x1e>
 800cddc:	0800d890 	.word	0x0800d890
 800cde0:	0800d890 	.word	0x0800d890
 800cde4:	0800d890 	.word	0x0800d890
 800cde8:	0800d894 	.word	0x0800d894

0800cdec <__retarget_lock_acquire_recursive>:
 800cdec:	4770      	bx	lr

0800cdee <__retarget_lock_release_recursive>:
 800cdee:	4770      	bx	lr

0800cdf0 <memcpy>:
 800cdf0:	440a      	add	r2, r1
 800cdf2:	4291      	cmp	r1, r2
 800cdf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cdf8:	d100      	bne.n	800cdfc <memcpy+0xc>
 800cdfa:	4770      	bx	lr
 800cdfc:	b510      	push	{r4, lr}
 800cdfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce06:	4291      	cmp	r1, r2
 800ce08:	d1f9      	bne.n	800cdfe <memcpy+0xe>
 800ce0a:	bd10      	pop	{r4, pc}

0800ce0c <_free_r>:
 800ce0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce0e:	2900      	cmp	r1, #0
 800ce10:	d044      	beq.n	800ce9c <_free_r+0x90>
 800ce12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce16:	9001      	str	r0, [sp, #4]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ce1e:	bfb8      	it	lt
 800ce20:	18e4      	addlt	r4, r4, r3
 800ce22:	f000 f8df 	bl	800cfe4 <__malloc_lock>
 800ce26:	4a1e      	ldr	r2, [pc, #120]	; (800cea0 <_free_r+0x94>)
 800ce28:	9801      	ldr	r0, [sp, #4]
 800ce2a:	6813      	ldr	r3, [r2, #0]
 800ce2c:	b933      	cbnz	r3, 800ce3c <_free_r+0x30>
 800ce2e:	6063      	str	r3, [r4, #4]
 800ce30:	6014      	str	r4, [r2, #0]
 800ce32:	b003      	add	sp, #12
 800ce34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce38:	f000 b8da 	b.w	800cff0 <__malloc_unlock>
 800ce3c:	42a3      	cmp	r3, r4
 800ce3e:	d908      	bls.n	800ce52 <_free_r+0x46>
 800ce40:	6825      	ldr	r5, [r4, #0]
 800ce42:	1961      	adds	r1, r4, r5
 800ce44:	428b      	cmp	r3, r1
 800ce46:	bf01      	itttt	eq
 800ce48:	6819      	ldreq	r1, [r3, #0]
 800ce4a:	685b      	ldreq	r3, [r3, #4]
 800ce4c:	1949      	addeq	r1, r1, r5
 800ce4e:	6021      	streq	r1, [r4, #0]
 800ce50:	e7ed      	b.n	800ce2e <_free_r+0x22>
 800ce52:	461a      	mov	r2, r3
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	b10b      	cbz	r3, 800ce5c <_free_r+0x50>
 800ce58:	42a3      	cmp	r3, r4
 800ce5a:	d9fa      	bls.n	800ce52 <_free_r+0x46>
 800ce5c:	6811      	ldr	r1, [r2, #0]
 800ce5e:	1855      	adds	r5, r2, r1
 800ce60:	42a5      	cmp	r5, r4
 800ce62:	d10b      	bne.n	800ce7c <_free_r+0x70>
 800ce64:	6824      	ldr	r4, [r4, #0]
 800ce66:	4421      	add	r1, r4
 800ce68:	1854      	adds	r4, r2, r1
 800ce6a:	42a3      	cmp	r3, r4
 800ce6c:	6011      	str	r1, [r2, #0]
 800ce6e:	d1e0      	bne.n	800ce32 <_free_r+0x26>
 800ce70:	681c      	ldr	r4, [r3, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	6053      	str	r3, [r2, #4]
 800ce76:	440c      	add	r4, r1
 800ce78:	6014      	str	r4, [r2, #0]
 800ce7a:	e7da      	b.n	800ce32 <_free_r+0x26>
 800ce7c:	d902      	bls.n	800ce84 <_free_r+0x78>
 800ce7e:	230c      	movs	r3, #12
 800ce80:	6003      	str	r3, [r0, #0]
 800ce82:	e7d6      	b.n	800ce32 <_free_r+0x26>
 800ce84:	6825      	ldr	r5, [r4, #0]
 800ce86:	1961      	adds	r1, r4, r5
 800ce88:	428b      	cmp	r3, r1
 800ce8a:	bf04      	itt	eq
 800ce8c:	6819      	ldreq	r1, [r3, #0]
 800ce8e:	685b      	ldreq	r3, [r3, #4]
 800ce90:	6063      	str	r3, [r4, #4]
 800ce92:	bf04      	itt	eq
 800ce94:	1949      	addeq	r1, r1, r5
 800ce96:	6021      	streq	r1, [r4, #0]
 800ce98:	6054      	str	r4, [r2, #4]
 800ce9a:	e7ca      	b.n	800ce32 <_free_r+0x26>
 800ce9c:	b003      	add	sp, #12
 800ce9e:	bd30      	pop	{r4, r5, pc}
 800cea0:	24000730 	.word	0x24000730

0800cea4 <sbrk_aligned>:
 800cea4:	b570      	push	{r4, r5, r6, lr}
 800cea6:	4e0e      	ldr	r6, [pc, #56]	; (800cee0 <sbrk_aligned+0x3c>)
 800cea8:	460c      	mov	r4, r1
 800ceaa:	6831      	ldr	r1, [r6, #0]
 800ceac:	4605      	mov	r5, r0
 800ceae:	b911      	cbnz	r1, 800ceb6 <sbrk_aligned+0x12>
 800ceb0:	f000 fba6 	bl	800d600 <_sbrk_r>
 800ceb4:	6030      	str	r0, [r6, #0]
 800ceb6:	4621      	mov	r1, r4
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f000 fba1 	bl	800d600 <_sbrk_r>
 800cebe:	1c43      	adds	r3, r0, #1
 800cec0:	d00a      	beq.n	800ced8 <sbrk_aligned+0x34>
 800cec2:	1cc4      	adds	r4, r0, #3
 800cec4:	f024 0403 	bic.w	r4, r4, #3
 800cec8:	42a0      	cmp	r0, r4
 800ceca:	d007      	beq.n	800cedc <sbrk_aligned+0x38>
 800cecc:	1a21      	subs	r1, r4, r0
 800cece:	4628      	mov	r0, r5
 800ced0:	f000 fb96 	bl	800d600 <_sbrk_r>
 800ced4:	3001      	adds	r0, #1
 800ced6:	d101      	bne.n	800cedc <sbrk_aligned+0x38>
 800ced8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cedc:	4620      	mov	r0, r4
 800cede:	bd70      	pop	{r4, r5, r6, pc}
 800cee0:	24000734 	.word	0x24000734

0800cee4 <_malloc_r>:
 800cee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee8:	1ccd      	adds	r5, r1, #3
 800ceea:	f025 0503 	bic.w	r5, r5, #3
 800ceee:	3508      	adds	r5, #8
 800cef0:	2d0c      	cmp	r5, #12
 800cef2:	bf38      	it	cc
 800cef4:	250c      	movcc	r5, #12
 800cef6:	2d00      	cmp	r5, #0
 800cef8:	4607      	mov	r7, r0
 800cefa:	db01      	blt.n	800cf00 <_malloc_r+0x1c>
 800cefc:	42a9      	cmp	r1, r5
 800cefe:	d905      	bls.n	800cf0c <_malloc_r+0x28>
 800cf00:	230c      	movs	r3, #12
 800cf02:	603b      	str	r3, [r7, #0]
 800cf04:	2600      	movs	r6, #0
 800cf06:	4630      	mov	r0, r6
 800cf08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cfe0 <_malloc_r+0xfc>
 800cf10:	f000 f868 	bl	800cfe4 <__malloc_lock>
 800cf14:	f8d8 3000 	ldr.w	r3, [r8]
 800cf18:	461c      	mov	r4, r3
 800cf1a:	bb5c      	cbnz	r4, 800cf74 <_malloc_r+0x90>
 800cf1c:	4629      	mov	r1, r5
 800cf1e:	4638      	mov	r0, r7
 800cf20:	f7ff ffc0 	bl	800cea4 <sbrk_aligned>
 800cf24:	1c43      	adds	r3, r0, #1
 800cf26:	4604      	mov	r4, r0
 800cf28:	d155      	bne.n	800cfd6 <_malloc_r+0xf2>
 800cf2a:	f8d8 4000 	ldr.w	r4, [r8]
 800cf2e:	4626      	mov	r6, r4
 800cf30:	2e00      	cmp	r6, #0
 800cf32:	d145      	bne.n	800cfc0 <_malloc_r+0xdc>
 800cf34:	2c00      	cmp	r4, #0
 800cf36:	d048      	beq.n	800cfca <_malloc_r+0xe6>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	eb04 0903 	add.w	r9, r4, r3
 800cf42:	f000 fb5d 	bl	800d600 <_sbrk_r>
 800cf46:	4581      	cmp	r9, r0
 800cf48:	d13f      	bne.n	800cfca <_malloc_r+0xe6>
 800cf4a:	6821      	ldr	r1, [r4, #0]
 800cf4c:	1a6d      	subs	r5, r5, r1
 800cf4e:	4629      	mov	r1, r5
 800cf50:	4638      	mov	r0, r7
 800cf52:	f7ff ffa7 	bl	800cea4 <sbrk_aligned>
 800cf56:	3001      	adds	r0, #1
 800cf58:	d037      	beq.n	800cfca <_malloc_r+0xe6>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	442b      	add	r3, r5
 800cf5e:	6023      	str	r3, [r4, #0]
 800cf60:	f8d8 3000 	ldr.w	r3, [r8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d038      	beq.n	800cfda <_malloc_r+0xf6>
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	42a2      	cmp	r2, r4
 800cf6c:	d12b      	bne.n	800cfc6 <_malloc_r+0xe2>
 800cf6e:	2200      	movs	r2, #0
 800cf70:	605a      	str	r2, [r3, #4]
 800cf72:	e00f      	b.n	800cf94 <_malloc_r+0xb0>
 800cf74:	6822      	ldr	r2, [r4, #0]
 800cf76:	1b52      	subs	r2, r2, r5
 800cf78:	d41f      	bmi.n	800cfba <_malloc_r+0xd6>
 800cf7a:	2a0b      	cmp	r2, #11
 800cf7c:	d917      	bls.n	800cfae <_malloc_r+0xca>
 800cf7e:	1961      	adds	r1, r4, r5
 800cf80:	42a3      	cmp	r3, r4
 800cf82:	6025      	str	r5, [r4, #0]
 800cf84:	bf18      	it	ne
 800cf86:	6059      	strne	r1, [r3, #4]
 800cf88:	6863      	ldr	r3, [r4, #4]
 800cf8a:	bf08      	it	eq
 800cf8c:	f8c8 1000 	streq.w	r1, [r8]
 800cf90:	5162      	str	r2, [r4, r5]
 800cf92:	604b      	str	r3, [r1, #4]
 800cf94:	4638      	mov	r0, r7
 800cf96:	f104 060b 	add.w	r6, r4, #11
 800cf9a:	f000 f829 	bl	800cff0 <__malloc_unlock>
 800cf9e:	f026 0607 	bic.w	r6, r6, #7
 800cfa2:	1d23      	adds	r3, r4, #4
 800cfa4:	1af2      	subs	r2, r6, r3
 800cfa6:	d0ae      	beq.n	800cf06 <_malloc_r+0x22>
 800cfa8:	1b9b      	subs	r3, r3, r6
 800cfaa:	50a3      	str	r3, [r4, r2]
 800cfac:	e7ab      	b.n	800cf06 <_malloc_r+0x22>
 800cfae:	42a3      	cmp	r3, r4
 800cfb0:	6862      	ldr	r2, [r4, #4]
 800cfb2:	d1dd      	bne.n	800cf70 <_malloc_r+0x8c>
 800cfb4:	f8c8 2000 	str.w	r2, [r8]
 800cfb8:	e7ec      	b.n	800cf94 <_malloc_r+0xb0>
 800cfba:	4623      	mov	r3, r4
 800cfbc:	6864      	ldr	r4, [r4, #4]
 800cfbe:	e7ac      	b.n	800cf1a <_malloc_r+0x36>
 800cfc0:	4634      	mov	r4, r6
 800cfc2:	6876      	ldr	r6, [r6, #4]
 800cfc4:	e7b4      	b.n	800cf30 <_malloc_r+0x4c>
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	e7cc      	b.n	800cf64 <_malloc_r+0x80>
 800cfca:	230c      	movs	r3, #12
 800cfcc:	603b      	str	r3, [r7, #0]
 800cfce:	4638      	mov	r0, r7
 800cfd0:	f000 f80e 	bl	800cff0 <__malloc_unlock>
 800cfd4:	e797      	b.n	800cf06 <_malloc_r+0x22>
 800cfd6:	6025      	str	r5, [r4, #0]
 800cfd8:	e7dc      	b.n	800cf94 <_malloc_r+0xb0>
 800cfda:	605b      	str	r3, [r3, #4]
 800cfdc:	deff      	udf	#255	; 0xff
 800cfde:	bf00      	nop
 800cfe0:	24000730 	.word	0x24000730

0800cfe4 <__malloc_lock>:
 800cfe4:	4801      	ldr	r0, [pc, #4]	; (800cfec <__malloc_lock+0x8>)
 800cfe6:	f7ff bf01 	b.w	800cdec <__retarget_lock_acquire_recursive>
 800cfea:	bf00      	nop
 800cfec:	2400072c 	.word	0x2400072c

0800cff0 <__malloc_unlock>:
 800cff0:	4801      	ldr	r0, [pc, #4]	; (800cff8 <__malloc_unlock+0x8>)
 800cff2:	f7ff befc 	b.w	800cdee <__retarget_lock_release_recursive>
 800cff6:	bf00      	nop
 800cff8:	2400072c 	.word	0x2400072c

0800cffc <__ssputs_r>:
 800cffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d000:	688e      	ldr	r6, [r1, #8]
 800d002:	461f      	mov	r7, r3
 800d004:	42be      	cmp	r6, r7
 800d006:	680b      	ldr	r3, [r1, #0]
 800d008:	4682      	mov	sl, r0
 800d00a:	460c      	mov	r4, r1
 800d00c:	4690      	mov	r8, r2
 800d00e:	d82c      	bhi.n	800d06a <__ssputs_r+0x6e>
 800d010:	898a      	ldrh	r2, [r1, #12]
 800d012:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d016:	d026      	beq.n	800d066 <__ssputs_r+0x6a>
 800d018:	6965      	ldr	r5, [r4, #20]
 800d01a:	6909      	ldr	r1, [r1, #16]
 800d01c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d020:	eba3 0901 	sub.w	r9, r3, r1
 800d024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d028:	1c7b      	adds	r3, r7, #1
 800d02a:	444b      	add	r3, r9
 800d02c:	106d      	asrs	r5, r5, #1
 800d02e:	429d      	cmp	r5, r3
 800d030:	bf38      	it	cc
 800d032:	461d      	movcc	r5, r3
 800d034:	0553      	lsls	r3, r2, #21
 800d036:	d527      	bpl.n	800d088 <__ssputs_r+0x8c>
 800d038:	4629      	mov	r1, r5
 800d03a:	f7ff ff53 	bl	800cee4 <_malloc_r>
 800d03e:	4606      	mov	r6, r0
 800d040:	b360      	cbz	r0, 800d09c <__ssputs_r+0xa0>
 800d042:	6921      	ldr	r1, [r4, #16]
 800d044:	464a      	mov	r2, r9
 800d046:	f7ff fed3 	bl	800cdf0 <memcpy>
 800d04a:	89a3      	ldrh	r3, [r4, #12]
 800d04c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d054:	81a3      	strh	r3, [r4, #12]
 800d056:	6126      	str	r6, [r4, #16]
 800d058:	6165      	str	r5, [r4, #20]
 800d05a:	444e      	add	r6, r9
 800d05c:	eba5 0509 	sub.w	r5, r5, r9
 800d060:	6026      	str	r6, [r4, #0]
 800d062:	60a5      	str	r5, [r4, #8]
 800d064:	463e      	mov	r6, r7
 800d066:	42be      	cmp	r6, r7
 800d068:	d900      	bls.n	800d06c <__ssputs_r+0x70>
 800d06a:	463e      	mov	r6, r7
 800d06c:	6820      	ldr	r0, [r4, #0]
 800d06e:	4632      	mov	r2, r6
 800d070:	4641      	mov	r1, r8
 800d072:	f000 faab 	bl	800d5cc <memmove>
 800d076:	68a3      	ldr	r3, [r4, #8]
 800d078:	1b9b      	subs	r3, r3, r6
 800d07a:	60a3      	str	r3, [r4, #8]
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	4433      	add	r3, r6
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	2000      	movs	r0, #0
 800d084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d088:	462a      	mov	r2, r5
 800d08a:	f000 fac9 	bl	800d620 <_realloc_r>
 800d08e:	4606      	mov	r6, r0
 800d090:	2800      	cmp	r0, #0
 800d092:	d1e0      	bne.n	800d056 <__ssputs_r+0x5a>
 800d094:	6921      	ldr	r1, [r4, #16]
 800d096:	4650      	mov	r0, sl
 800d098:	f7ff feb8 	bl	800ce0c <_free_r>
 800d09c:	230c      	movs	r3, #12
 800d09e:	f8ca 3000 	str.w	r3, [sl]
 800d0a2:	89a3      	ldrh	r3, [r4, #12]
 800d0a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0a8:	81a3      	strh	r3, [r4, #12]
 800d0aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0ae:	e7e9      	b.n	800d084 <__ssputs_r+0x88>

0800d0b0 <_svfiprintf_r>:
 800d0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b4:	4698      	mov	r8, r3
 800d0b6:	898b      	ldrh	r3, [r1, #12]
 800d0b8:	061b      	lsls	r3, r3, #24
 800d0ba:	b09d      	sub	sp, #116	; 0x74
 800d0bc:	4607      	mov	r7, r0
 800d0be:	460d      	mov	r5, r1
 800d0c0:	4614      	mov	r4, r2
 800d0c2:	d50e      	bpl.n	800d0e2 <_svfiprintf_r+0x32>
 800d0c4:	690b      	ldr	r3, [r1, #16]
 800d0c6:	b963      	cbnz	r3, 800d0e2 <_svfiprintf_r+0x32>
 800d0c8:	2140      	movs	r1, #64	; 0x40
 800d0ca:	f7ff ff0b 	bl	800cee4 <_malloc_r>
 800d0ce:	6028      	str	r0, [r5, #0]
 800d0d0:	6128      	str	r0, [r5, #16]
 800d0d2:	b920      	cbnz	r0, 800d0de <_svfiprintf_r+0x2e>
 800d0d4:	230c      	movs	r3, #12
 800d0d6:	603b      	str	r3, [r7, #0]
 800d0d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0dc:	e0d0      	b.n	800d280 <_svfiprintf_r+0x1d0>
 800d0de:	2340      	movs	r3, #64	; 0x40
 800d0e0:	616b      	str	r3, [r5, #20]
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0e6:	2320      	movs	r3, #32
 800d0e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0f0:	2330      	movs	r3, #48	; 0x30
 800d0f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d298 <_svfiprintf_r+0x1e8>
 800d0f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0fa:	f04f 0901 	mov.w	r9, #1
 800d0fe:	4623      	mov	r3, r4
 800d100:	469a      	mov	sl, r3
 800d102:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d106:	b10a      	cbz	r2, 800d10c <_svfiprintf_r+0x5c>
 800d108:	2a25      	cmp	r2, #37	; 0x25
 800d10a:	d1f9      	bne.n	800d100 <_svfiprintf_r+0x50>
 800d10c:	ebba 0b04 	subs.w	fp, sl, r4
 800d110:	d00b      	beq.n	800d12a <_svfiprintf_r+0x7a>
 800d112:	465b      	mov	r3, fp
 800d114:	4622      	mov	r2, r4
 800d116:	4629      	mov	r1, r5
 800d118:	4638      	mov	r0, r7
 800d11a:	f7ff ff6f 	bl	800cffc <__ssputs_r>
 800d11e:	3001      	adds	r0, #1
 800d120:	f000 80a9 	beq.w	800d276 <_svfiprintf_r+0x1c6>
 800d124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d126:	445a      	add	r2, fp
 800d128:	9209      	str	r2, [sp, #36]	; 0x24
 800d12a:	f89a 3000 	ldrb.w	r3, [sl]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f000 80a1 	beq.w	800d276 <_svfiprintf_r+0x1c6>
 800d134:	2300      	movs	r3, #0
 800d136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d13a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d13e:	f10a 0a01 	add.w	sl, sl, #1
 800d142:	9304      	str	r3, [sp, #16]
 800d144:	9307      	str	r3, [sp, #28]
 800d146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d14a:	931a      	str	r3, [sp, #104]	; 0x68
 800d14c:	4654      	mov	r4, sl
 800d14e:	2205      	movs	r2, #5
 800d150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d154:	4850      	ldr	r0, [pc, #320]	; (800d298 <_svfiprintf_r+0x1e8>)
 800d156:	f7f3 f8c3 	bl	80002e0 <memchr>
 800d15a:	9a04      	ldr	r2, [sp, #16]
 800d15c:	b9d8      	cbnz	r0, 800d196 <_svfiprintf_r+0xe6>
 800d15e:	06d0      	lsls	r0, r2, #27
 800d160:	bf44      	itt	mi
 800d162:	2320      	movmi	r3, #32
 800d164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d168:	0711      	lsls	r1, r2, #28
 800d16a:	bf44      	itt	mi
 800d16c:	232b      	movmi	r3, #43	; 0x2b
 800d16e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d172:	f89a 3000 	ldrb.w	r3, [sl]
 800d176:	2b2a      	cmp	r3, #42	; 0x2a
 800d178:	d015      	beq.n	800d1a6 <_svfiprintf_r+0xf6>
 800d17a:	9a07      	ldr	r2, [sp, #28]
 800d17c:	4654      	mov	r4, sl
 800d17e:	2000      	movs	r0, #0
 800d180:	f04f 0c0a 	mov.w	ip, #10
 800d184:	4621      	mov	r1, r4
 800d186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d18a:	3b30      	subs	r3, #48	; 0x30
 800d18c:	2b09      	cmp	r3, #9
 800d18e:	d94d      	bls.n	800d22c <_svfiprintf_r+0x17c>
 800d190:	b1b0      	cbz	r0, 800d1c0 <_svfiprintf_r+0x110>
 800d192:	9207      	str	r2, [sp, #28]
 800d194:	e014      	b.n	800d1c0 <_svfiprintf_r+0x110>
 800d196:	eba0 0308 	sub.w	r3, r0, r8
 800d19a:	fa09 f303 	lsl.w	r3, r9, r3
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	9304      	str	r3, [sp, #16]
 800d1a2:	46a2      	mov	sl, r4
 800d1a4:	e7d2      	b.n	800d14c <_svfiprintf_r+0x9c>
 800d1a6:	9b03      	ldr	r3, [sp, #12]
 800d1a8:	1d19      	adds	r1, r3, #4
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	9103      	str	r1, [sp, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bfbb      	ittet	lt
 800d1b2:	425b      	neglt	r3, r3
 800d1b4:	f042 0202 	orrlt.w	r2, r2, #2
 800d1b8:	9307      	strge	r3, [sp, #28]
 800d1ba:	9307      	strlt	r3, [sp, #28]
 800d1bc:	bfb8      	it	lt
 800d1be:	9204      	strlt	r2, [sp, #16]
 800d1c0:	7823      	ldrb	r3, [r4, #0]
 800d1c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d1c4:	d10c      	bne.n	800d1e0 <_svfiprintf_r+0x130>
 800d1c6:	7863      	ldrb	r3, [r4, #1]
 800d1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ca:	d134      	bne.n	800d236 <_svfiprintf_r+0x186>
 800d1cc:	9b03      	ldr	r3, [sp, #12]
 800d1ce:	1d1a      	adds	r2, r3, #4
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	9203      	str	r2, [sp, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	bfb8      	it	lt
 800d1d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d1dc:	3402      	adds	r4, #2
 800d1de:	9305      	str	r3, [sp, #20]
 800d1e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d2a8 <_svfiprintf_r+0x1f8>
 800d1e4:	7821      	ldrb	r1, [r4, #0]
 800d1e6:	2203      	movs	r2, #3
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	f7f3 f879 	bl	80002e0 <memchr>
 800d1ee:	b138      	cbz	r0, 800d200 <_svfiprintf_r+0x150>
 800d1f0:	9b04      	ldr	r3, [sp, #16]
 800d1f2:	eba0 000a 	sub.w	r0, r0, sl
 800d1f6:	2240      	movs	r2, #64	; 0x40
 800d1f8:	4082      	lsls	r2, r0
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	3401      	adds	r4, #1
 800d1fe:	9304      	str	r3, [sp, #16]
 800d200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d204:	4825      	ldr	r0, [pc, #148]	; (800d29c <_svfiprintf_r+0x1ec>)
 800d206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d20a:	2206      	movs	r2, #6
 800d20c:	f7f3 f868 	bl	80002e0 <memchr>
 800d210:	2800      	cmp	r0, #0
 800d212:	d038      	beq.n	800d286 <_svfiprintf_r+0x1d6>
 800d214:	4b22      	ldr	r3, [pc, #136]	; (800d2a0 <_svfiprintf_r+0x1f0>)
 800d216:	bb1b      	cbnz	r3, 800d260 <_svfiprintf_r+0x1b0>
 800d218:	9b03      	ldr	r3, [sp, #12]
 800d21a:	3307      	adds	r3, #7
 800d21c:	f023 0307 	bic.w	r3, r3, #7
 800d220:	3308      	adds	r3, #8
 800d222:	9303      	str	r3, [sp, #12]
 800d224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d226:	4433      	add	r3, r6
 800d228:	9309      	str	r3, [sp, #36]	; 0x24
 800d22a:	e768      	b.n	800d0fe <_svfiprintf_r+0x4e>
 800d22c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d230:	460c      	mov	r4, r1
 800d232:	2001      	movs	r0, #1
 800d234:	e7a6      	b.n	800d184 <_svfiprintf_r+0xd4>
 800d236:	2300      	movs	r3, #0
 800d238:	3401      	adds	r4, #1
 800d23a:	9305      	str	r3, [sp, #20]
 800d23c:	4619      	mov	r1, r3
 800d23e:	f04f 0c0a 	mov.w	ip, #10
 800d242:	4620      	mov	r0, r4
 800d244:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d248:	3a30      	subs	r2, #48	; 0x30
 800d24a:	2a09      	cmp	r2, #9
 800d24c:	d903      	bls.n	800d256 <_svfiprintf_r+0x1a6>
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d0c6      	beq.n	800d1e0 <_svfiprintf_r+0x130>
 800d252:	9105      	str	r1, [sp, #20]
 800d254:	e7c4      	b.n	800d1e0 <_svfiprintf_r+0x130>
 800d256:	fb0c 2101 	mla	r1, ip, r1, r2
 800d25a:	4604      	mov	r4, r0
 800d25c:	2301      	movs	r3, #1
 800d25e:	e7f0      	b.n	800d242 <_svfiprintf_r+0x192>
 800d260:	ab03      	add	r3, sp, #12
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	462a      	mov	r2, r5
 800d266:	4b0f      	ldr	r3, [pc, #60]	; (800d2a4 <_svfiprintf_r+0x1f4>)
 800d268:	a904      	add	r1, sp, #16
 800d26a:	4638      	mov	r0, r7
 800d26c:	f3af 8000 	nop.w
 800d270:	1c42      	adds	r2, r0, #1
 800d272:	4606      	mov	r6, r0
 800d274:	d1d6      	bne.n	800d224 <_svfiprintf_r+0x174>
 800d276:	89ab      	ldrh	r3, [r5, #12]
 800d278:	065b      	lsls	r3, r3, #25
 800d27a:	f53f af2d 	bmi.w	800d0d8 <_svfiprintf_r+0x28>
 800d27e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d280:	b01d      	add	sp, #116	; 0x74
 800d282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d286:	ab03      	add	r3, sp, #12
 800d288:	9300      	str	r3, [sp, #0]
 800d28a:	462a      	mov	r2, r5
 800d28c:	4b05      	ldr	r3, [pc, #20]	; (800d2a4 <_svfiprintf_r+0x1f4>)
 800d28e:	a904      	add	r1, sp, #16
 800d290:	4638      	mov	r0, r7
 800d292:	f000 f879 	bl	800d388 <_printf_i>
 800d296:	e7eb      	b.n	800d270 <_svfiprintf_r+0x1c0>
 800d298:	0800d854 	.word	0x0800d854
 800d29c:	0800d85e 	.word	0x0800d85e
 800d2a0:	00000000 	.word	0x00000000
 800d2a4:	0800cffd 	.word	0x0800cffd
 800d2a8:	0800d85a 	.word	0x0800d85a

0800d2ac <_printf_common>:
 800d2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2b0:	4616      	mov	r6, r2
 800d2b2:	4699      	mov	r9, r3
 800d2b4:	688a      	ldr	r2, [r1, #8]
 800d2b6:	690b      	ldr	r3, [r1, #16]
 800d2b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	bfb8      	it	lt
 800d2c0:	4613      	movlt	r3, r2
 800d2c2:	6033      	str	r3, [r6, #0]
 800d2c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d2c8:	4607      	mov	r7, r0
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	b10a      	cbz	r2, 800d2d2 <_printf_common+0x26>
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	6033      	str	r3, [r6, #0]
 800d2d2:	6823      	ldr	r3, [r4, #0]
 800d2d4:	0699      	lsls	r1, r3, #26
 800d2d6:	bf42      	ittt	mi
 800d2d8:	6833      	ldrmi	r3, [r6, #0]
 800d2da:	3302      	addmi	r3, #2
 800d2dc:	6033      	strmi	r3, [r6, #0]
 800d2de:	6825      	ldr	r5, [r4, #0]
 800d2e0:	f015 0506 	ands.w	r5, r5, #6
 800d2e4:	d106      	bne.n	800d2f4 <_printf_common+0x48>
 800d2e6:	f104 0a19 	add.w	sl, r4, #25
 800d2ea:	68e3      	ldr	r3, [r4, #12]
 800d2ec:	6832      	ldr	r2, [r6, #0]
 800d2ee:	1a9b      	subs	r3, r3, r2
 800d2f0:	42ab      	cmp	r3, r5
 800d2f2:	dc26      	bgt.n	800d342 <_printf_common+0x96>
 800d2f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2f8:	1e13      	subs	r3, r2, #0
 800d2fa:	6822      	ldr	r2, [r4, #0]
 800d2fc:	bf18      	it	ne
 800d2fe:	2301      	movne	r3, #1
 800d300:	0692      	lsls	r2, r2, #26
 800d302:	d42b      	bmi.n	800d35c <_printf_common+0xb0>
 800d304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d308:	4649      	mov	r1, r9
 800d30a:	4638      	mov	r0, r7
 800d30c:	47c0      	blx	r8
 800d30e:	3001      	adds	r0, #1
 800d310:	d01e      	beq.n	800d350 <_printf_common+0xa4>
 800d312:	6823      	ldr	r3, [r4, #0]
 800d314:	6922      	ldr	r2, [r4, #16]
 800d316:	f003 0306 	and.w	r3, r3, #6
 800d31a:	2b04      	cmp	r3, #4
 800d31c:	bf02      	ittt	eq
 800d31e:	68e5      	ldreq	r5, [r4, #12]
 800d320:	6833      	ldreq	r3, [r6, #0]
 800d322:	1aed      	subeq	r5, r5, r3
 800d324:	68a3      	ldr	r3, [r4, #8]
 800d326:	bf0c      	ite	eq
 800d328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d32c:	2500      	movne	r5, #0
 800d32e:	4293      	cmp	r3, r2
 800d330:	bfc4      	itt	gt
 800d332:	1a9b      	subgt	r3, r3, r2
 800d334:	18ed      	addgt	r5, r5, r3
 800d336:	2600      	movs	r6, #0
 800d338:	341a      	adds	r4, #26
 800d33a:	42b5      	cmp	r5, r6
 800d33c:	d11a      	bne.n	800d374 <_printf_common+0xc8>
 800d33e:	2000      	movs	r0, #0
 800d340:	e008      	b.n	800d354 <_printf_common+0xa8>
 800d342:	2301      	movs	r3, #1
 800d344:	4652      	mov	r2, sl
 800d346:	4649      	mov	r1, r9
 800d348:	4638      	mov	r0, r7
 800d34a:	47c0      	blx	r8
 800d34c:	3001      	adds	r0, #1
 800d34e:	d103      	bne.n	800d358 <_printf_common+0xac>
 800d350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d358:	3501      	adds	r5, #1
 800d35a:	e7c6      	b.n	800d2ea <_printf_common+0x3e>
 800d35c:	18e1      	adds	r1, r4, r3
 800d35e:	1c5a      	adds	r2, r3, #1
 800d360:	2030      	movs	r0, #48	; 0x30
 800d362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d366:	4422      	add	r2, r4
 800d368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d36c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d370:	3302      	adds	r3, #2
 800d372:	e7c7      	b.n	800d304 <_printf_common+0x58>
 800d374:	2301      	movs	r3, #1
 800d376:	4622      	mov	r2, r4
 800d378:	4649      	mov	r1, r9
 800d37a:	4638      	mov	r0, r7
 800d37c:	47c0      	blx	r8
 800d37e:	3001      	adds	r0, #1
 800d380:	d0e6      	beq.n	800d350 <_printf_common+0xa4>
 800d382:	3601      	adds	r6, #1
 800d384:	e7d9      	b.n	800d33a <_printf_common+0x8e>
	...

0800d388 <_printf_i>:
 800d388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d38c:	7e0f      	ldrb	r7, [r1, #24]
 800d38e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d390:	2f78      	cmp	r7, #120	; 0x78
 800d392:	4691      	mov	r9, r2
 800d394:	4680      	mov	r8, r0
 800d396:	460c      	mov	r4, r1
 800d398:	469a      	mov	sl, r3
 800d39a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d39e:	d807      	bhi.n	800d3b0 <_printf_i+0x28>
 800d3a0:	2f62      	cmp	r7, #98	; 0x62
 800d3a2:	d80a      	bhi.n	800d3ba <_printf_i+0x32>
 800d3a4:	2f00      	cmp	r7, #0
 800d3a6:	f000 80d4 	beq.w	800d552 <_printf_i+0x1ca>
 800d3aa:	2f58      	cmp	r7, #88	; 0x58
 800d3ac:	f000 80c0 	beq.w	800d530 <_printf_i+0x1a8>
 800d3b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3b8:	e03a      	b.n	800d430 <_printf_i+0xa8>
 800d3ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3be:	2b15      	cmp	r3, #21
 800d3c0:	d8f6      	bhi.n	800d3b0 <_printf_i+0x28>
 800d3c2:	a101      	add	r1, pc, #4	; (adr r1, 800d3c8 <_printf_i+0x40>)
 800d3c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3c8:	0800d421 	.word	0x0800d421
 800d3cc:	0800d435 	.word	0x0800d435
 800d3d0:	0800d3b1 	.word	0x0800d3b1
 800d3d4:	0800d3b1 	.word	0x0800d3b1
 800d3d8:	0800d3b1 	.word	0x0800d3b1
 800d3dc:	0800d3b1 	.word	0x0800d3b1
 800d3e0:	0800d435 	.word	0x0800d435
 800d3e4:	0800d3b1 	.word	0x0800d3b1
 800d3e8:	0800d3b1 	.word	0x0800d3b1
 800d3ec:	0800d3b1 	.word	0x0800d3b1
 800d3f0:	0800d3b1 	.word	0x0800d3b1
 800d3f4:	0800d539 	.word	0x0800d539
 800d3f8:	0800d461 	.word	0x0800d461
 800d3fc:	0800d4f3 	.word	0x0800d4f3
 800d400:	0800d3b1 	.word	0x0800d3b1
 800d404:	0800d3b1 	.word	0x0800d3b1
 800d408:	0800d55b 	.word	0x0800d55b
 800d40c:	0800d3b1 	.word	0x0800d3b1
 800d410:	0800d461 	.word	0x0800d461
 800d414:	0800d3b1 	.word	0x0800d3b1
 800d418:	0800d3b1 	.word	0x0800d3b1
 800d41c:	0800d4fb 	.word	0x0800d4fb
 800d420:	682b      	ldr	r3, [r5, #0]
 800d422:	1d1a      	adds	r2, r3, #4
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	602a      	str	r2, [r5, #0]
 800d428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d42c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d430:	2301      	movs	r3, #1
 800d432:	e09f      	b.n	800d574 <_printf_i+0x1ec>
 800d434:	6820      	ldr	r0, [r4, #0]
 800d436:	682b      	ldr	r3, [r5, #0]
 800d438:	0607      	lsls	r7, r0, #24
 800d43a:	f103 0104 	add.w	r1, r3, #4
 800d43e:	6029      	str	r1, [r5, #0]
 800d440:	d501      	bpl.n	800d446 <_printf_i+0xbe>
 800d442:	681e      	ldr	r6, [r3, #0]
 800d444:	e003      	b.n	800d44e <_printf_i+0xc6>
 800d446:	0646      	lsls	r6, r0, #25
 800d448:	d5fb      	bpl.n	800d442 <_printf_i+0xba>
 800d44a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d44e:	2e00      	cmp	r6, #0
 800d450:	da03      	bge.n	800d45a <_printf_i+0xd2>
 800d452:	232d      	movs	r3, #45	; 0x2d
 800d454:	4276      	negs	r6, r6
 800d456:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d45a:	485a      	ldr	r0, [pc, #360]	; (800d5c4 <_printf_i+0x23c>)
 800d45c:	230a      	movs	r3, #10
 800d45e:	e012      	b.n	800d486 <_printf_i+0xfe>
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	6820      	ldr	r0, [r4, #0]
 800d464:	1d19      	adds	r1, r3, #4
 800d466:	6029      	str	r1, [r5, #0]
 800d468:	0605      	lsls	r5, r0, #24
 800d46a:	d501      	bpl.n	800d470 <_printf_i+0xe8>
 800d46c:	681e      	ldr	r6, [r3, #0]
 800d46e:	e002      	b.n	800d476 <_printf_i+0xee>
 800d470:	0641      	lsls	r1, r0, #25
 800d472:	d5fb      	bpl.n	800d46c <_printf_i+0xe4>
 800d474:	881e      	ldrh	r6, [r3, #0]
 800d476:	4853      	ldr	r0, [pc, #332]	; (800d5c4 <_printf_i+0x23c>)
 800d478:	2f6f      	cmp	r7, #111	; 0x6f
 800d47a:	bf0c      	ite	eq
 800d47c:	2308      	moveq	r3, #8
 800d47e:	230a      	movne	r3, #10
 800d480:	2100      	movs	r1, #0
 800d482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d486:	6865      	ldr	r5, [r4, #4]
 800d488:	60a5      	str	r5, [r4, #8]
 800d48a:	2d00      	cmp	r5, #0
 800d48c:	bfa2      	ittt	ge
 800d48e:	6821      	ldrge	r1, [r4, #0]
 800d490:	f021 0104 	bicge.w	r1, r1, #4
 800d494:	6021      	strge	r1, [r4, #0]
 800d496:	b90e      	cbnz	r6, 800d49c <_printf_i+0x114>
 800d498:	2d00      	cmp	r5, #0
 800d49a:	d04b      	beq.n	800d534 <_printf_i+0x1ac>
 800d49c:	4615      	mov	r5, r2
 800d49e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d4a2:	fb03 6711 	mls	r7, r3, r1, r6
 800d4a6:	5dc7      	ldrb	r7, [r0, r7]
 800d4a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d4ac:	4637      	mov	r7, r6
 800d4ae:	42bb      	cmp	r3, r7
 800d4b0:	460e      	mov	r6, r1
 800d4b2:	d9f4      	bls.n	800d49e <_printf_i+0x116>
 800d4b4:	2b08      	cmp	r3, #8
 800d4b6:	d10b      	bne.n	800d4d0 <_printf_i+0x148>
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	07de      	lsls	r6, r3, #31
 800d4bc:	d508      	bpl.n	800d4d0 <_printf_i+0x148>
 800d4be:	6923      	ldr	r3, [r4, #16]
 800d4c0:	6861      	ldr	r1, [r4, #4]
 800d4c2:	4299      	cmp	r1, r3
 800d4c4:	bfde      	ittt	le
 800d4c6:	2330      	movle	r3, #48	; 0x30
 800d4c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d4cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d4d0:	1b52      	subs	r2, r2, r5
 800d4d2:	6122      	str	r2, [r4, #16]
 800d4d4:	f8cd a000 	str.w	sl, [sp]
 800d4d8:	464b      	mov	r3, r9
 800d4da:	aa03      	add	r2, sp, #12
 800d4dc:	4621      	mov	r1, r4
 800d4de:	4640      	mov	r0, r8
 800d4e0:	f7ff fee4 	bl	800d2ac <_printf_common>
 800d4e4:	3001      	adds	r0, #1
 800d4e6:	d14a      	bne.n	800d57e <_printf_i+0x1f6>
 800d4e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4ec:	b004      	add	sp, #16
 800d4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	f043 0320 	orr.w	r3, r3, #32
 800d4f8:	6023      	str	r3, [r4, #0]
 800d4fa:	4833      	ldr	r0, [pc, #204]	; (800d5c8 <_printf_i+0x240>)
 800d4fc:	2778      	movs	r7, #120	; 0x78
 800d4fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d502:	6823      	ldr	r3, [r4, #0]
 800d504:	6829      	ldr	r1, [r5, #0]
 800d506:	061f      	lsls	r7, r3, #24
 800d508:	f851 6b04 	ldr.w	r6, [r1], #4
 800d50c:	d402      	bmi.n	800d514 <_printf_i+0x18c>
 800d50e:	065f      	lsls	r7, r3, #25
 800d510:	bf48      	it	mi
 800d512:	b2b6      	uxthmi	r6, r6
 800d514:	07df      	lsls	r7, r3, #31
 800d516:	bf48      	it	mi
 800d518:	f043 0320 	orrmi.w	r3, r3, #32
 800d51c:	6029      	str	r1, [r5, #0]
 800d51e:	bf48      	it	mi
 800d520:	6023      	strmi	r3, [r4, #0]
 800d522:	b91e      	cbnz	r6, 800d52c <_printf_i+0x1a4>
 800d524:	6823      	ldr	r3, [r4, #0]
 800d526:	f023 0320 	bic.w	r3, r3, #32
 800d52a:	6023      	str	r3, [r4, #0]
 800d52c:	2310      	movs	r3, #16
 800d52e:	e7a7      	b.n	800d480 <_printf_i+0xf8>
 800d530:	4824      	ldr	r0, [pc, #144]	; (800d5c4 <_printf_i+0x23c>)
 800d532:	e7e4      	b.n	800d4fe <_printf_i+0x176>
 800d534:	4615      	mov	r5, r2
 800d536:	e7bd      	b.n	800d4b4 <_printf_i+0x12c>
 800d538:	682b      	ldr	r3, [r5, #0]
 800d53a:	6826      	ldr	r6, [r4, #0]
 800d53c:	6961      	ldr	r1, [r4, #20]
 800d53e:	1d18      	adds	r0, r3, #4
 800d540:	6028      	str	r0, [r5, #0]
 800d542:	0635      	lsls	r5, r6, #24
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	d501      	bpl.n	800d54c <_printf_i+0x1c4>
 800d548:	6019      	str	r1, [r3, #0]
 800d54a:	e002      	b.n	800d552 <_printf_i+0x1ca>
 800d54c:	0670      	lsls	r0, r6, #25
 800d54e:	d5fb      	bpl.n	800d548 <_printf_i+0x1c0>
 800d550:	8019      	strh	r1, [r3, #0]
 800d552:	2300      	movs	r3, #0
 800d554:	6123      	str	r3, [r4, #16]
 800d556:	4615      	mov	r5, r2
 800d558:	e7bc      	b.n	800d4d4 <_printf_i+0x14c>
 800d55a:	682b      	ldr	r3, [r5, #0]
 800d55c:	1d1a      	adds	r2, r3, #4
 800d55e:	602a      	str	r2, [r5, #0]
 800d560:	681d      	ldr	r5, [r3, #0]
 800d562:	6862      	ldr	r2, [r4, #4]
 800d564:	2100      	movs	r1, #0
 800d566:	4628      	mov	r0, r5
 800d568:	f7f2 feba 	bl	80002e0 <memchr>
 800d56c:	b108      	cbz	r0, 800d572 <_printf_i+0x1ea>
 800d56e:	1b40      	subs	r0, r0, r5
 800d570:	6060      	str	r0, [r4, #4]
 800d572:	6863      	ldr	r3, [r4, #4]
 800d574:	6123      	str	r3, [r4, #16]
 800d576:	2300      	movs	r3, #0
 800d578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d57c:	e7aa      	b.n	800d4d4 <_printf_i+0x14c>
 800d57e:	6923      	ldr	r3, [r4, #16]
 800d580:	462a      	mov	r2, r5
 800d582:	4649      	mov	r1, r9
 800d584:	4640      	mov	r0, r8
 800d586:	47d0      	blx	sl
 800d588:	3001      	adds	r0, #1
 800d58a:	d0ad      	beq.n	800d4e8 <_printf_i+0x160>
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	079b      	lsls	r3, r3, #30
 800d590:	d413      	bmi.n	800d5ba <_printf_i+0x232>
 800d592:	68e0      	ldr	r0, [r4, #12]
 800d594:	9b03      	ldr	r3, [sp, #12]
 800d596:	4298      	cmp	r0, r3
 800d598:	bfb8      	it	lt
 800d59a:	4618      	movlt	r0, r3
 800d59c:	e7a6      	b.n	800d4ec <_printf_i+0x164>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	4632      	mov	r2, r6
 800d5a2:	4649      	mov	r1, r9
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	47d0      	blx	sl
 800d5a8:	3001      	adds	r0, #1
 800d5aa:	d09d      	beq.n	800d4e8 <_printf_i+0x160>
 800d5ac:	3501      	adds	r5, #1
 800d5ae:	68e3      	ldr	r3, [r4, #12]
 800d5b0:	9903      	ldr	r1, [sp, #12]
 800d5b2:	1a5b      	subs	r3, r3, r1
 800d5b4:	42ab      	cmp	r3, r5
 800d5b6:	dcf2      	bgt.n	800d59e <_printf_i+0x216>
 800d5b8:	e7eb      	b.n	800d592 <_printf_i+0x20a>
 800d5ba:	2500      	movs	r5, #0
 800d5bc:	f104 0619 	add.w	r6, r4, #25
 800d5c0:	e7f5      	b.n	800d5ae <_printf_i+0x226>
 800d5c2:	bf00      	nop
 800d5c4:	0800d865 	.word	0x0800d865
 800d5c8:	0800d876 	.word	0x0800d876

0800d5cc <memmove>:
 800d5cc:	4288      	cmp	r0, r1
 800d5ce:	b510      	push	{r4, lr}
 800d5d0:	eb01 0402 	add.w	r4, r1, r2
 800d5d4:	d902      	bls.n	800d5dc <memmove+0x10>
 800d5d6:	4284      	cmp	r4, r0
 800d5d8:	4623      	mov	r3, r4
 800d5da:	d807      	bhi.n	800d5ec <memmove+0x20>
 800d5dc:	1e43      	subs	r3, r0, #1
 800d5de:	42a1      	cmp	r1, r4
 800d5e0:	d008      	beq.n	800d5f4 <memmove+0x28>
 800d5e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5ea:	e7f8      	b.n	800d5de <memmove+0x12>
 800d5ec:	4402      	add	r2, r0
 800d5ee:	4601      	mov	r1, r0
 800d5f0:	428a      	cmp	r2, r1
 800d5f2:	d100      	bne.n	800d5f6 <memmove+0x2a>
 800d5f4:	bd10      	pop	{r4, pc}
 800d5f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5fe:	e7f7      	b.n	800d5f0 <memmove+0x24>

0800d600 <_sbrk_r>:
 800d600:	b538      	push	{r3, r4, r5, lr}
 800d602:	4d06      	ldr	r5, [pc, #24]	; (800d61c <_sbrk_r+0x1c>)
 800d604:	2300      	movs	r3, #0
 800d606:	4604      	mov	r4, r0
 800d608:	4608      	mov	r0, r1
 800d60a:	602b      	str	r3, [r5, #0]
 800d60c:	f7f4 fe68 	bl	80022e0 <_sbrk>
 800d610:	1c43      	adds	r3, r0, #1
 800d612:	d102      	bne.n	800d61a <_sbrk_r+0x1a>
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	b103      	cbz	r3, 800d61a <_sbrk_r+0x1a>
 800d618:	6023      	str	r3, [r4, #0]
 800d61a:	bd38      	pop	{r3, r4, r5, pc}
 800d61c:	24000728 	.word	0x24000728

0800d620 <_realloc_r>:
 800d620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d624:	4680      	mov	r8, r0
 800d626:	4614      	mov	r4, r2
 800d628:	460e      	mov	r6, r1
 800d62a:	b921      	cbnz	r1, 800d636 <_realloc_r+0x16>
 800d62c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d630:	4611      	mov	r1, r2
 800d632:	f7ff bc57 	b.w	800cee4 <_malloc_r>
 800d636:	b92a      	cbnz	r2, 800d644 <_realloc_r+0x24>
 800d638:	f7ff fbe8 	bl	800ce0c <_free_r>
 800d63c:	4625      	mov	r5, r4
 800d63e:	4628      	mov	r0, r5
 800d640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d644:	f000 f81b 	bl	800d67e <_malloc_usable_size_r>
 800d648:	4284      	cmp	r4, r0
 800d64a:	4607      	mov	r7, r0
 800d64c:	d802      	bhi.n	800d654 <_realloc_r+0x34>
 800d64e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d652:	d812      	bhi.n	800d67a <_realloc_r+0x5a>
 800d654:	4621      	mov	r1, r4
 800d656:	4640      	mov	r0, r8
 800d658:	f7ff fc44 	bl	800cee4 <_malloc_r>
 800d65c:	4605      	mov	r5, r0
 800d65e:	2800      	cmp	r0, #0
 800d660:	d0ed      	beq.n	800d63e <_realloc_r+0x1e>
 800d662:	42bc      	cmp	r4, r7
 800d664:	4622      	mov	r2, r4
 800d666:	4631      	mov	r1, r6
 800d668:	bf28      	it	cs
 800d66a:	463a      	movcs	r2, r7
 800d66c:	f7ff fbc0 	bl	800cdf0 <memcpy>
 800d670:	4631      	mov	r1, r6
 800d672:	4640      	mov	r0, r8
 800d674:	f7ff fbca 	bl	800ce0c <_free_r>
 800d678:	e7e1      	b.n	800d63e <_realloc_r+0x1e>
 800d67a:	4635      	mov	r5, r6
 800d67c:	e7df      	b.n	800d63e <_realloc_r+0x1e>

0800d67e <_malloc_usable_size_r>:
 800d67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d682:	1f18      	subs	r0, r3, #4
 800d684:	2b00      	cmp	r3, #0
 800d686:	bfbc      	itt	lt
 800d688:	580b      	ldrlt	r3, [r1, r0]
 800d68a:	18c0      	addlt	r0, r0, r3
 800d68c:	4770      	bx	lr
	...

0800d690 <_init>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	bf00      	nop
 800d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d696:	bc08      	pop	{r3}
 800d698:	469e      	mov	lr, r3
 800d69a:	4770      	bx	lr

0800d69c <_fini>:
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69e:	bf00      	nop
 800d6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a2:	bc08      	pop	{r3}
 800d6a4:	469e      	mov	lr, r3
 800d6a6:	4770      	bx	lr
