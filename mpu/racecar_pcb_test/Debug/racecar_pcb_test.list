
racecar_pcb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012640  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  080128e0  080128e0  000228e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012e3c  08012e3c  00022e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012e44  08012e44  00022e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012e48  08012e48  00022e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  08012e4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007d4  240001dc  08013028  000301dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009b0  08013028  000309b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022525  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003672  00000000  00000000  00052772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001920  00000000  00000000  00055de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000013be  00000000  00000000  00057708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e197  00000000  00000000  00058ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00020f8b  00000000  00000000  00096c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017f11d  00000000  00000000  000b7be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007c30  00000000  00000000  00236d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  0023e938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080128c8 	.word	0x080128c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	080128c8 	.word	0x080128c8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f002 faa6 	bl	8002be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f822 	bl	80006dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000698:	f000 f89e 	bl	80007d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 fdbc 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a0:	f000 fd8a 	bl	80011b8 <MX_DMA_Init>
  MX_UART5_Init();
 80006a4:	f000 fa70 	bl	8000b88 <MX_UART5_Init>
  MX_LPUART1_UART_Init();
 80006a8:	f000 fa22 	bl	8000af0 <MX_LPUART1_UART_Init>
  MX_UART7_Init();
 80006ac:	f000 fab8 	bl	8000c20 <MX_UART7_Init>
  MX_I2C1_Init();
 80006b0:	f000 f99e 	bl	80009f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006b4:	f000 f9dc 	bl	8000a70 <MX_I2C2_Init>
  MX_TIM2_Init();
 80006b8:	f000 fafe 	bl	8000cb8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006bc:	f000 fb94 	bl	8000de8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006c0:	f000 fc14 	bl	8000eec <MX_TIM5_Init>
  MX_TIM15_Init();
 80006c4:	f000 fcb0 	bl	8001028 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006c8:	f000 fd50 	bl	800116c <MX_TIM16_Init>
  MX_ADC1_Init();
 80006cc:	f000 f8a2 	bl	8000814 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  setup();
 80006d0:	f001 fb1a 	bl	8001d08 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80006d4:	f001 fbd4 	bl	8001e80 <loop>
  {
 80006d8:	e7fc      	b.n	80006d4 <main+0x48>
	...

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09c      	sub	sp, #112	; 0x70
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	224c      	movs	r2, #76	; 0x4c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f010 f877 	bl	80107de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2220      	movs	r2, #32
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f010 f871 	bl	80107de <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006fc:	2002      	movs	r0, #2
 80006fe:	f007 fc77 	bl	8007ff0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <SystemClock_Config+0xf4>)
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	4a31      	ldr	r2, [pc, #196]	; (80007d0 <SystemClock_Config+0xf4>)
 800070c:	f023 0301 	bic.w	r3, r3, #1
 8000710:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000712:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <SystemClock_Config+0xf4>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <SystemClock_Config+0xf8>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <SystemClock_Config+0xf8>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <SystemClock_Config+0xf8>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000734:	bf00      	nop
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <SystemClock_Config+0xf8>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000742:	d1f8      	bne.n	8000736 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000744:	2303      	movs	r3, #3
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800074e:	2301      	movs	r3, #1
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	2302      	movs	r3, #2
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800075e:	2305      	movs	r3, #5
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000762:	23a0      	movs	r3, #160	; 0xa0
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 800076e:	2308      	movs	r3, #8
 8000770:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000772:	2308      	movs	r3, #8
 8000774:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000776:	2300      	movs	r3, #0
 8000778:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4618      	mov	r0, r3
 8000784:	f007 fc6e 	bl	8008064 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800078e:	f000 fde9 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	233f      	movs	r3, #63	; 0x3f
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2303      	movs	r3, #3
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800079e:	2309      	movs	r3, #9
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f008 f8ae 	bl	8008918 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80007c2:	f000 fdcf 	bl	8001364 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3770      	adds	r7, #112	; 0x70
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800

080007d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0b0      	sub	sp, #192	; 0xc0
 80007dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	22c0      	movs	r2, #192	; 0xc0
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00f fffa 	bl	80107de <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80007ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80007ee:	f04f 0300 	mov.w	r3, #0
 80007f2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80007f6:	2300      	movs	r3, #0
 80007f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4618      	mov	r0, r3
 80007fe:	f008 fc17 	bl	8009030 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000808:	f000 fdac 	bl	8001364 <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	37c0      	adds	r7, #192	; 0xc0
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]
 8000836:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000838:	4b63      	ldr	r3, [pc, #396]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800083a:	4a64      	ldr	r2, [pc, #400]	; (80009cc <MX_ADC1_Init+0x1b8>)
 800083c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800083e:	4b62      	ldr	r3, [pc, #392]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000840:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000846:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b5e      	ldr	r3, [pc, #376]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b5d      	ldr	r3, [pc, #372]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b5b      	ldr	r3, [pc, #364]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800085e:	4b5a      	ldr	r3, [pc, #360]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 8000864:	4b58      	ldr	r3, [pc, #352]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000866:	2208      	movs	r2, #8
 8000868:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b57      	ldr	r3, [pc, #348]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b55      	ldr	r3, [pc, #340]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b54      	ldr	r3, [pc, #336]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b52      	ldr	r3, [pc, #328]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000882:	4b51      	ldr	r3, [pc, #324]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000884:	2200      	movs	r2, #0
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000888:	4b4f      	ldr	r3, [pc, #316]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800088a:	2200      	movs	r2, #0
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800088e:	4b4e      	ldr	r3, [pc, #312]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000896:	484c      	ldr	r0, [pc, #304]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000898:	f002 fc6c 	bl	8003174 <HAL_ADC_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008a2:	f000 fd5f 	bl	8001364 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4845      	ldr	r0, [pc, #276]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80008b2:	f003 fef9 	bl	80046a8 <HAL_ADCEx_MultiModeConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008bc:	f000 fd52 	bl	8001364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008c0:	4b43      	ldr	r3, [pc, #268]	; (80009d0 <MX_ADC1_Init+0x1bc>)
 80008c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c4:	2306      	movs	r3, #6
 80008c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80008c8:	2304      	movs	r3, #4
 80008ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d2:	2304      	movs	r3, #4
 80008d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4839      	ldr	r0, [pc, #228]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80008e4:	f003 f90e 	bl	8003b04 <HAL_ADC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008ee:	f000 fd39 	bl	8001364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <MX_ADC1_Init+0x1c0>)
 80008f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008f6:	230c      	movs	r3, #12
 80008f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4832      	ldr	r0, [pc, #200]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000900:	f003 f900 	bl	8003b04 <HAL_ADC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800090a:	f000 fd2b 	bl	8001364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800090e:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MX_ADC1_Init+0x1c4>)
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000912:	2312      	movs	r3, #18
 8000914:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	4619      	mov	r1, r3
 800091a:	482b      	ldr	r0, [pc, #172]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800091c:	f003 f8f2 	bl	8003b04 <HAL_ADC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000926:	f000 fd1d 	bl	8001364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_ADC1_Init+0x1c8>)
 800092c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800092e:	2318      	movs	r3, #24
 8000930:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4824      	ldr	r0, [pc, #144]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000938:	f003 f8e4 	bl	8003b04 <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000942:	f000 fd0f 	bl	8001364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_ADC1_Init+0x1cc>)
 8000948:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800094a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	481c      	ldr	r0, [pc, #112]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000956:	f003 f8d5 	bl	8003b04 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000960:	f000 fd00 	bl	8001364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_ADC1_Init+0x1d0>)
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000968:	f44f 7383 	mov.w	r3, #262	; 0x106
 800096c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4815      	ldr	r0, [pc, #84]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000974:	f003 f8c6 	bl	8003b04 <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800097e:	f000 fcf1 	bl	8001364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_ADC1_Init+0x1d4>)
 8000984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000986:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000992:	f003 f8b7 	bl	8003b04 <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800099c:	f000 fce2 	bl	8001364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_ADC1_Init+0x1d8>)
 80009a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009a4:	f44f 7389 	mov.w	r3, #274	; 0x112
 80009a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80009b0:	f003 f8a8 	bl	8003b04 <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80009ba:	f000 fcd3 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	240001f8 	.word	0x240001f8
 80009cc:	40022000 	.word	0x40022000
 80009d0:	0c900008 	.word	0x0c900008
 80009d4:	10c00010 	.word	0x10c00010
 80009d8:	14f00020 	.word	0x14f00020
 80009dc:	21800100 	.word	0x21800100
 80009e0:	25b00200 	.word	0x25b00200
 80009e4:	2a000400 	.word	0x2a000400
 80009e8:	2e300800 	.word	0x2e300800
 80009ec:	4b840000 	.word	0x4b840000

080009f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f007 f862 	bl	8007af4 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 fc95 	bl	8001364 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f007 fa40 	bl	8007ec2 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fc8c 	bl	8001364 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f007 fa82 	bl	8007f58 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fc83 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	240002d4 	.word	0x240002d4
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	10c0ecff 	.word	0x10c0ecff

08000a70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_I2C2_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <MX_I2C2_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aac:	f007 f822 	bl	8007af4 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 fc55 	bl	8001364 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000abe:	f007 fa00 	bl	8007ec2 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fc4c 	bl	8001364 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000ad0:	f007 fa42 	bl	8007f58 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fc43 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000328 	.word	0x24000328
 8000ae8:	40005800 	.word	0x40005800
 8000aec:	10c0ecff 	.word	0x10c0ecff

08000af0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <MX_LPUART1_UART_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b3a:	f00d f92b 	bl	800dd94 <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 fc0e 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b4c:	f00f f81b 	bl	800fb86 <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 fc05 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b5e:	f00f f850 	bl	800fc02 <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 fbfc 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b6e:	f00e ffd1 	bl	800fb14 <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 fbf4 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2400037c 	.word	0x2400037c
 8000b84:	58000c00 	.word	0x58000c00

08000b88 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_UART5_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_UART5_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_UART5_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bd2:	f00d f8df 	bl	800dd94 <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 fbc2 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_UART5_Init+0x90>)
 8000be4:	f00e ffcf 	bl	800fb86 <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 fbb9 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bf6:	f00f f804 	bl	800fc02 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 fbb0 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_UART5_Init+0x90>)
 8000c06:	f00e ff85 	bl	800fb14 <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 fba8 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000410 	.word	0x24000410
 8000c1c:	40005000 	.word	0x40005000

08000c20 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <MX_UART7_Init+0x94>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c6a:	f00d f893 	bl	800dd94 <HAL_UART_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000c74:	f000 fb76 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c7c:	f00e ff83 	bl	800fb86 <HAL_UARTEx_SetTxFifoThreshold>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000c86:	f000 fb6d 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c8e:	f00e ffb8 	bl	800fc02 <HAL_UARTEx_SetRxFifoThreshold>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000c98:	f000 fb64 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c9e:	f00e ff39 	bl	800fb14 <HAL_UARTEx_DisableFifoMode>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000ca8:	f000 fb5c 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240004a4 	.word	0x240004a4
 8000cb4:	40007800 	.word	0x40007800

08000cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
 8000ce6:	615a      	str	r2, [r3, #20]
 8000ce8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cea:	4b3e      	ldr	r3, [pc, #248]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000d00:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d02:	2263      	movs	r2, #99	; 0x63
 8000d04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d12:	4834      	ldr	r0, [pc, #208]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d14:	f00a fe8a 	bl	800ba2c <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d1e:	f000 fb21 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482d      	ldr	r0, [pc, #180]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d30:	f00b ffa0 	bl	800cc74 <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d3a:	f000 fb13 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d3e:	4829      	ldr	r0, [pc, #164]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d40:	f00a ff73 	bl	800bc2a <HAL_TIM_PWM_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d4a:	f000 fb0b 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4821      	ldr	r0, [pc, #132]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d5e:	f00c ff6d 	bl	800dc3c <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d68:	f000 fafc 	bl	8001364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d84:	f00b fe62 	bl	800ca4c <HAL_TIM_PWM_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d8e:	f000 fae9 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	2204      	movs	r2, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4812      	ldr	r0, [pc, #72]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d9a:	f00b fe57 	bl	800ca4c <HAL_TIM_PWM_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000da4:	f000 fade 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	2208      	movs	r2, #8
 8000dac:	4619      	mov	r1, r3
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000db0:	f00b fe4c 	bl	800ca4c <HAL_TIM_PWM_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000dba:	f000 fad3 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000dc6:	f00b fe41 	bl	800ca4c <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000dd0:	f000 fac8 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000dd6:	f001 fca5 	bl	8002724 <HAL_TIM_MspPostInit>

}
 8000dda:	bf00      	nop
 8000ddc:	3738      	adds	r7, #56	; 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	24000628 	.word	0x24000628

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1a:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e1c:	4a32      	ldr	r2, [pc, #200]	; (8000ee8 <MX_TIM3_Init+0x100>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000e20:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e22:	2263      	movs	r2, #99	; 0x63
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e2e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e40:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e42:	f00a fdf3 	bl	800ba2c <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e4c:	f000 fa8a 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4821      	ldr	r0, [pc, #132]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e5e:	f00b ff09 	bl	800cc74 <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e68:	f000 fa7c 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6c:	481d      	ldr	r0, [pc, #116]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e6e:	f00a fedc 	bl	800bc2a <HAL_TIM_PWM_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e78:	f000 fa74 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e8c:	f00c fed6 	bl	800dc3c <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e96:	f000 fa65 	bl	8001364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9a:	2360      	movs	r3, #96	; 0x60
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000eb2:	f00b fdcb 	bl	800ca4c <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ebc:	f000 fa52 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000ec8:	f00b fdc0 	bl	800ca4c <HAL_TIM_PWM_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000ed2:	f000 fa47 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000ed8:	f001 fc24 	bl	8002724 <HAL_TIM_MspPostInit>

}
 8000edc:	bf00      	nop
 8000ede:	3738      	adds	r7, #56	; 0x38
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	24000674 	.word	0x24000674
 8000ee8:	40000400 	.word	0x40000400

08000eec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b090      	sub	sp, #64	; 0x40
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f28:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f2a:	4a3e      	ldr	r2, [pc, #248]	; (8001024 <MX_TIM5_Init+0x138>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f30:	2263      	movs	r2, #99	; 0x63
 8000f32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b37      	ldr	r3, [pc, #220]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f4e:	4834      	ldr	r0, [pc, #208]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f50:	f00a fd6c 	bl	800ba2c <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000f5a:	f000 fa03 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f68:	4619      	mov	r1, r3
 8000f6a:	482d      	ldr	r0, [pc, #180]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f6c:	f00b fe82 	bl	800cc74 <HAL_TIM_ConfigClockSource>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000f76:	f000 f9f5 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000f7a:	4829      	ldr	r0, [pc, #164]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f7c:	f00a ffc4 	bl	800bf08 <HAL_TIM_IC_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000f86:	f000 f9ed 	bl	8001364 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f8e:	2350      	movs	r3, #80	; 0x50
 8000f90:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481e      	ldr	r0, [pc, #120]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fa6:	f00b ff5d 	bl	800ce64 <HAL_TIM_SlaveConfigSynchro>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000fb0:	f000 f9d8 	bl	8001364 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fce:	f00b fca0 	bl	800c912 <HAL_TIM_IC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8000fd8:	f000 f9c4 	bl	8001364 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fee:	f00b fc90 	bl	800c912 <HAL_TIM_IC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8000ff8:	f000 f9b4 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_TIM5_Init+0x134>)
 800100a:	f00c fe17 	bl	800dc3c <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8001014:	f000 f9a6 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3740      	adds	r7, #64	; 0x40
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	240006c0 	.word	0x240006c0
 8001024:	40000c00 	.word	0x40000c00

08001028 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	; 0x40
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001064:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001066:	4a40      	ldr	r2, [pc, #256]	; (8001168 <MX_TIM15_Init+0x140>)
 8001068:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 800106a:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <MX_TIM15_Init+0x13c>)
 800106c:	2263      	movs	r2, #99	; 0x63
 800106e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001084:	4b37      	ldr	r3, [pc, #220]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <MX_TIM15_Init+0x13c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001090:	4834      	ldr	r0, [pc, #208]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001092:	f00a fccb 	bl	800ba2c <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800109c:	f000 f962 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010aa:	4619      	mov	r1, r3
 80010ac:	482d      	ldr	r0, [pc, #180]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010ae:	f00b fde1 	bl	800cc74 <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80010b8:	f000 f954 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80010bc:	4829      	ldr	r0, [pc, #164]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010be:	f00a ff23 	bl	800bf08 <HAL_TIM_IC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 80010c8:	f000 f94c 	bl	8001364 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010cc:	2304      	movs	r3, #4
 80010ce:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80010d0:	2350      	movs	r3, #80	; 0x50
 80010d2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	481f      	ldr	r0, [pc, #124]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010e8:	f00b febc 	bl	800ce64 <HAL_TIM_SlaveConfigSynchro>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80010f2:	f000 f937 	bl	8001364 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010fa:	2301      	movs	r3, #1
 80010fc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4815      	ldr	r0, [pc, #84]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001110:	f00b fbff 	bl	800c912 <HAL_TIM_IC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800111a:	f000 f923 	bl	8001364 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800111e:	2302      	movs	r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2204      	movs	r2, #4
 800112c:	4619      	mov	r1, r3
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001130:	f00b fbef 	bl	800c912 <HAL_TIM_IC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 800113a:	f000 f913 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_TIM15_Init+0x13c>)
 800114c:	f00c fd76 	bl	800dc3c <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001156:	f000 f905 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3740      	adds	r7, #64	; 0x40
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2400070c 	.word	0x2400070c
 8001168:	40014000 	.word	0x40014000

0800116c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <MX_TIM16_Init+0x48>)
 8001174:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 99;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001178:	2263      	movs	r2, #99	; 0x63
 800117a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_TIM16_Init+0x44>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001188:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_TIM16_Init+0x44>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_TIM16_Init+0x44>)
 800119e:	f00a fc45 	bl	800ba2c <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80011a8:	f000 f8dc 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	24000758 	.word	0x24000758
 80011b4:	40014400 	.word	0x40014400

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_DMA_Init+0x5c>)
 80011c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011c4:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_DMA_Init+0x5c>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_DMA_Init+0x5c>)
 80011d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	200b      	movs	r0, #11
 80011e2:	f003 fc1a 	bl	8004a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011e6:	200b      	movs	r0, #11
 80011e8:	f003 fc31 	bl	8004a4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	200c      	movs	r0, #12
 80011f2:	f003 fc12 	bl	8004a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011f6:	200c      	movs	r0, #12
 80011f8:	f003 fc29 	bl	8004a4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	200d      	movs	r0, #13
 8001202:	f003 fc0a 	bl	8004a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001206:	200d      	movs	r0, #13
 8001208:	f003 fc21 	bl	8004a4e <HAL_NVIC_EnableIRQ>

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58024400 	.word	0x58024400

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <MX_GPIO_Init+0x140>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a48      	ldr	r2, [pc, #288]	; (8001358 <MX_GPIO_Init+0x140>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b46      	ldr	r3, [pc, #280]	; (8001358 <MX_GPIO_Init+0x140>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b42      	ldr	r3, [pc, #264]	; (8001358 <MX_GPIO_Init+0x140>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a41      	ldr	r2, [pc, #260]	; (8001358 <MX_GPIO_Init+0x140>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <MX_GPIO_Init+0x140>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <MX_GPIO_Init+0x140>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a39      	ldr	r2, [pc, #228]	; (8001358 <MX_GPIO_Init+0x140>)
 8001272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <MX_GPIO_Init+0x140>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <MX_GPIO_Init+0x140>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	4a32      	ldr	r2, [pc, #200]	; (8001358 <MX_GPIO_Init+0x140>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <MX_GPIO_Init+0x140>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_GPIO_Init+0x140>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a2a      	ldr	r2, [pc, #168]	; (8001358 <MX_GPIO_Init+0x140>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <MX_GPIO_Init+0x140>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <MX_GPIO_Init+0x140>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	4a23      	ldr	r2, [pc, #140]	; (8001358 <MX_GPIO_Init+0x140>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <MX_GPIO_Init+0x140>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f24c 0120 	movw	r1, #49184	; 0xc020
 80012e8:	481c      	ldr	r0, [pc, #112]	; (800135c <MX_GPIO_Init+0x144>)
 80012ea:	f006 fbcf 	bl	8007a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|LED_BLUE_Pin|LED_YELLOW_Pin
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 715a 	mov.w	r1, #872	; 0x368
 80012f4:	481a      	ldr	r0, [pc, #104]	; (8001360 <MX_GPIO_Init+0x148>)
 80012f6:	f006 fbc9 	bl	8007a8c <HAL_GPIO_WritePin>
                          |LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin Manual_Output_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin;
 80012fa:	f24c 0320 	movw	r3, #49184	; 0xc020
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4812      	ldr	r0, [pc, #72]	; (800135c <MX_GPIO_Init+0x144>)
 8001314:	f006 f9f2 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin LED_BLUE_Pin LED_YELLOW_Pin
                           LED_RED_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin|LED_BLUE_Pin|LED_YELLOW_Pin
 8001318:	f44f 735a 	mov.w	r3, #872	; 0x368
 800131c:	61fb      	str	r3, [r7, #28]
                          |LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <MX_GPIO_Init+0x148>)
 8001332:	f006 f9e3 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_GPIO_Init+0x144>)
 800134a:	f006 f9d7 	bl	80076fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	; 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	58024400 	.word	0x58024400
 800135c:	58020400 	.word	0x58020400
 8001360:	58020c00 	.word	0x58020c00

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	e7fe      	b.n	800136c <Error_Handler+0x8>
	...

08001370 <_ZL8DWT_Initv>:
#define INC_UTILITY_H_

#include "main.h"

static inline void DWT_Init(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_ZL8DWT_Initv+0x28>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <_ZL8DWT_Initv+0x28>)
 800137a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800137e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <_ZL8DWT_Initv+0x2c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <_ZL8DWT_Initv+0x2c>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000edf0 	.word	0xe000edf0
 800139c:	e0001000 	.word	0xe0001000

080013a0 <_Z15read_speed_datav>:
uint8_t ch3_cnt=0,ch4_cnt=99;

uint32_t servo_duty,esc_duty,freq;
uint32_t force_raw[8];

HAL_StatusTypeDef read_speed_data(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80013a6:	2300      	movs	r3, #0
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	e009      	b.n	80013c0 <_Z15read_speed_datav+0x20>
		if(received_speed[i]==acsr)break;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <_Z15read_speed_datav+0x78>)
 80013b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <_Z15read_speed_datav+0x7c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d006      	beq.n	80013c8 <_Z15read_speed_datav+0x28>
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	3301      	adds	r3, #1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b10      	cmp	r3, #16
 80013c4:	d9f2      	bls.n	80013ac <_Z15read_speed_datav+0xc>
 80013c6:	e000      	b.n	80013ca <_Z15read_speed_datav+0x2a>
		if(received_speed[i]==acsr)break;
 80013c8:	bf00      	nop
	}
	if(i==SPEED_PIN_COUNT+1)return HAL_ERROR;
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b11      	cmp	r3, #17
 80013ce:	d101      	bne.n	80013d4 <_Z15read_speed_datav+0x34>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e01c      	b.n	800140e <_Z15read_speed_datav+0x6e>

	memcpy(speed,&received_speed[i+1],(SPEED_PIN_COUNT-i)*sizeof(uint32_t));
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	3301      	adds	r3, #1
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <_Z15read_speed_datav+0x78>)
 80013dc:	1899      	adds	r1, r3, r2
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f1c3 0310 	rsb	r3, r3, #16
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	461a      	mov	r2, r3
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <_Z15read_speed_datav+0x80>)
 80013ea:	f00f fa78 	bl	80108de <memcpy>
	if(i){
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00b      	beq.n	800140c <_Z15read_speed_datav+0x6c>
		memcpy(&speed[SPEED_PIN_COUNT-i],received_speed,i*sizeof(uint32_t));
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f1c3 0310 	rsb	r3, r3, #16
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4a08      	ldr	r2, [pc, #32]	; (8001420 <_Z15read_speed_datav+0x80>)
 80013fe:	1898      	adds	r0, r3, r2
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	461a      	mov	r2, r3
 8001406:	4904      	ldr	r1, [pc, #16]	; (8001418 <_Z15read_speed_datav+0x78>)
 8001408:	f00f fa69 	bl	80108de <memcpy>
	}
	return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	240007a8 	.word	0x240007a8
 800141c:	41435352 	.word	0x41435352
 8001420:	240007ec 	.word	0x240007ec

08001424 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a45      	ldr	r2, [pc, #276]	; (8001548 <HAL_UART_RxCpltCallback+0x124>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d10f      	bne.n	8001456 <HAL_UART_RxCpltCallback+0x32>
		if(read_speed_data()==HAL_ERROR){
 8001436:	f7ff ffb3 	bl	80013a0 <_Z15read_speed_datav>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	bf0c      	ite	eq
 8001440:	2301      	moveq	r3, #1
 8001442:	2300      	movne	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d07a      	beq.n	8001540 <HAL_UART_RxCpltCallback+0x11c>
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 800144a:	2244      	movs	r2, #68	; 0x44
 800144c:	493f      	ldr	r1, [pc, #252]	; (800154c <HAL_UART_RxCpltCallback+0x128>)
 800144e:	4840      	ldr	r0, [pc, #256]	; (8001550 <HAL_UART_RxCpltCallback+0x12c>)
 8001450:	f00c fd7e 	bl	800df50 <HAL_UART_Receive_DMA>
			break;
		default:
			break;
		}
	}
}
 8001454:	e074      	b.n	8001540 <HAL_UART_RxCpltCallback+0x11c>
	}else if(huart->Instance==UART7){
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a3e      	ldr	r2, [pc, #248]	; (8001554 <HAL_UART_RxCpltCallback+0x130>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d16f      	bne.n	8001540 <HAL_UART_RxCpltCallback+0x11c>
		switch(led_state){
 8001460:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <HAL_UART_RxCpltCallback+0x134>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b42      	cmp	r3, #66	; 0x42
 8001466:	d060      	beq.n	800152a <HAL_UART_RxCpltCallback+0x106>
 8001468:	2b42      	cmp	r3, #66	; 0x42
 800146a:	db68      	blt.n	800153e <HAL_UART_RxCpltCallback+0x11a>
 800146c:	2b79      	cmp	r3, #121	; 0x79
 800146e:	dc66      	bgt.n	800153e <HAL_UART_RxCpltCallback+0x11a>
 8001470:	2b52      	cmp	r3, #82	; 0x52
 8001472:	db64      	blt.n	800153e <HAL_UART_RxCpltCallback+0x11a>
 8001474:	3b52      	subs	r3, #82	; 0x52
 8001476:	2b27      	cmp	r3, #39	; 0x27
 8001478:	d861      	bhi.n	800153e <HAL_UART_RxCpltCallback+0x11a>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <HAL_UART_RxCpltCallback+0x5c>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	08001521 	.word	0x08001521
 8001484:	0800153f 	.word	0x0800153f
 8001488:	0800153f 	.word	0x0800153f
 800148c:	0800153f 	.word	0x0800153f
 8001490:	0800153f 	.word	0x0800153f
 8001494:	0800153f 	.word	0x0800153f
 8001498:	0800153f 	.word	0x0800153f
 800149c:	08001535 	.word	0x08001535
 80014a0:	0800153f 	.word	0x0800153f
 80014a4:	0800153f 	.word	0x0800153f
 80014a8:	0800153f 	.word	0x0800153f
 80014ac:	0800153f 	.word	0x0800153f
 80014b0:	0800153f 	.word	0x0800153f
 80014b4:	0800153f 	.word	0x0800153f
 80014b8:	0800153f 	.word	0x0800153f
 80014bc:	0800153f 	.word	0x0800153f
 80014c0:	0800152b 	.word	0x0800152b
 80014c4:	0800153f 	.word	0x0800153f
 80014c8:	0800153f 	.word	0x0800153f
 80014cc:	0800153f 	.word	0x0800153f
 80014d0:	0800153f 	.word	0x0800153f
 80014d4:	0800153f 	.word	0x0800153f
 80014d8:	0800153f 	.word	0x0800153f
 80014dc:	0800153f 	.word	0x0800153f
 80014e0:	0800153f 	.word	0x0800153f
 80014e4:	0800153f 	.word	0x0800153f
 80014e8:	0800153f 	.word	0x0800153f
 80014ec:	0800153f 	.word	0x0800153f
 80014f0:	0800153f 	.word	0x0800153f
 80014f4:	0800153f 	.word	0x0800153f
 80014f8:	0800153f 	.word	0x0800153f
 80014fc:	0800153f 	.word	0x0800153f
 8001500:	08001521 	.word	0x08001521
 8001504:	0800153f 	.word	0x0800153f
 8001508:	0800153f 	.word	0x0800153f
 800150c:	0800153f 	.word	0x0800153f
 8001510:	0800153f 	.word	0x0800153f
 8001514:	0800153f 	.word	0x0800153f
 8001518:	0800153f 	.word	0x0800153f
 800151c:	08001535 	.word	0x08001535
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001520:	2140      	movs	r1, #64	; 0x40
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <HAL_UART_RxCpltCallback+0x138>)
 8001524:	f006 facb 	bl	8007abe <HAL_GPIO_TogglePin>
			break;
 8001528:	e00a      	b.n	8001540 <HAL_UART_RxCpltCallback+0x11c>
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800152a:	2108      	movs	r1, #8
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <HAL_UART_RxCpltCallback+0x138>)
 800152e:	f006 fac6 	bl	8007abe <HAL_GPIO_TogglePin>
			break;
 8001532:	e005      	b.n	8001540 <HAL_UART_RxCpltCallback+0x11c>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001534:	2120      	movs	r1, #32
 8001536:	4809      	ldr	r0, [pc, #36]	; (800155c <HAL_UART_RxCpltCallback+0x138>)
 8001538:	f006 fac1 	bl	8007abe <HAL_GPIO_TogglePin>
			break;
 800153c:	e000      	b.n	8001540 <HAL_UART_RxCpltCallback+0x11c>
			break;
 800153e:	bf00      	nop
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40005000 	.word	0x40005000
 800154c:	240007a8 	.word	0x240007a8
 8001550:	24000410 	.word	0x24000410
 8001554:	40007800 	.word	0x40007800
 8001558:	2400082c 	.word	0x2400082c
 800155c:	58020c00 	.word	0x58020c00

08001560 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==UART5) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_UART_ErrorCallback+0x24>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d104      	bne.n	800157c <HAL_UART_ErrorCallback+0x1c>
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8001572:	2244      	movs	r2, #68	; 0x44
 8001574:	4904      	ldr	r1, [pc, #16]	; (8001588 <HAL_UART_ErrorCallback+0x28>)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_UART_ErrorCallback+0x2c>)
 8001578:	f00c fcea 	bl	800df50 <HAL_UART_Receive_DMA>
    }
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40005000 	.word	0x40005000
 8001588:	240007a8 	.word	0x240007a8
 800158c:	24000410 	.word	0x24000410

08001590 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM16){
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d113      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x3a>
		if(input_mode==Manual){
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10f      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x3a>
			esc_duty=0;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
			servo_duty=0;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,esc_duty);
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,servo_duty);
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40014400 	.word	0x40014400
 80015dc:	240007a4 	.word	0x240007a4
 80015e0:	24000834 	.word	0x24000834
 80015e4:	24000830 	.word	0x24000830
 80015e8:	24000674 	.word	0x24000674

080015ec <HAL_TIM_IC_CaptureCallback>:
	char msg[100]={0};
	sprintf(msg,"Force: %0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f\n",force[0],force[1],force[2],force[3],force[4],force[5],force[6],force[7]);

}*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

//	if(input_mode==Auto)return;

	uint32_t temp_freq;
	if(htim->Instance==TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a35      	ldr	r2, [pc, #212]	; (80016d0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d121      	bne.n	8001642 <HAL_TIM_IC_CaptureCallback+0x56>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7f1b      	ldrb	r3, [r3, #28]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d11d      	bne.n	8001642 <HAL_TIM_IC_CaptureCallback+0x56>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001606:	2100      	movs	r1, #0
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f00b fc6d 	bl	800cee8 <HAL_TIM_ReadCapturedValue>
 800160e:	60f8      	str	r0, [r7, #12]
		servo_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001610:	2104      	movs	r1, #4
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f00b fc68 	bl	800cee8 <HAL_TIM_ReadCapturedValue>
 8001618:	4603      	mov	r3, r0
 800161a:	4a2e      	ldr	r2, [pc, #184]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800161c:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_duty);
 800161e:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a2c      	ldr	r2, [pc, #176]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCounter(htim,0);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001630:	2100      	movs	r1, #0
 8001632:	482a      	ldr	r0, [pc, #168]	; (80016dc <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001634:	f00a fe40 	bl	800c2b8 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001638:	2104      	movs	r1, #4
 800163a:	4828      	ldr	r0, [pc, #160]	; (80016dc <HAL_TIM_IC_CaptureCallback+0xf0>)
 800163c:	f00a fcc6 	bl	800bfcc <HAL_TIM_IC_Start>
 8001640:	e025      	b.n	800168e <HAL_TIM_IC_CaptureCallback+0xa2>

	}else if(htim->Instance==TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d120      	bne.n	800168e <HAL_TIM_IC_CaptureCallback+0xa2>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7f1b      	ldrb	r3, [r3, #28]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d11c      	bne.n	800168e <HAL_TIM_IC_CaptureCallback+0xa2>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001654:	2100      	movs	r1, #0
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f00b fc46 	bl	800cee8 <HAL_TIM_ReadCapturedValue>
 800165c:	60f8      	str	r0, [r7, #12]
		esc_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800165e:	2104      	movs	r1, #4
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f00b fc41 	bl	800cee8 <HAL_TIM_ReadCapturedValue>
 8001666:	4603      	mov	r3, r0
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800166a:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_duty);
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0xec>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCounter(htim,0);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800167e:	2100      	movs	r1, #0
 8001680:	4819      	ldr	r0, [pc, #100]	; (80016e8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001682:	f00a fe19 	bl	800c2b8 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8001686:	2104      	movs	r1, #4
 8001688:	4817      	ldr	r0, [pc, #92]	; (80016e8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800168a:	f00a fc9f 	bl	800bfcc <HAL_TIM_IC_Start>

	}
	if(freq<1000 || abs((int)temp_freq-(int)freq)>50){
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_TIM_IC_CaptureCallback+0x100>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001696:	d308      	bcc.n	80016aa <HAL_TIM_IC_CaptureCallback+0xbe>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_TIM_IC_CaptureCallback+0x100>)
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bfb8      	it	lt
 80016a4:	425b      	neglt	r3, r3
 80016a6:	2b32      	cmp	r3, #50	; 0x32
 80016a8:	dd09      	ble.n	80016be <HAL_TIM_IC_CaptureCallback+0xd2>
		freq=temp_freq;
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_TIM_IC_CaptureCallback+0x100>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0xec>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0xec>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	60d3      	str	r3, [r2, #12]
	}
	__HAL_TIM_SetCounter(&htim16,0);
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40000c00 	.word	0x40000c00
 80016d4:	24000830 	.word	0x24000830
 80016d8:	24000674 	.word	0x24000674
 80016dc:	240006c0 	.word	0x240006c0
 80016e0:	40014000 	.word	0x40014000
 80016e4:	24000834 	.word	0x24000834
 80016e8:	2400070c 	.word	0x2400070c
 80016ec:	24000838 	.word	0x24000838
 80016f0:	24000758 	.word	0x24000758

080016f4 <_Z8test_i2cv>:

void test_cp2101(){

}

void test_i2c(){
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b091      	sub	sp, #68	; 0x44
 80016f8:	af00      	add	r7, sp, #0

    uint8_t i;
    HAL_StatusTypeDef ret;
    uint8_t address[10];
    uint8_t length=0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 8001700:	2301      	movs	r3, #1
 8001702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001706:	e020      	b.n	800174a <_Z8test_i2cv+0x56>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8001708:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800170c:	b29b      	uxth	r3, r3
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	b299      	uxth	r1, r3
 8001712:	2305      	movs	r3, #5
 8001714:	2203      	movs	r2, #3
 8001716:	4865      	ldr	r0, [pc, #404]	; (80018ac <_Z8test_i2cv+0x1b8>)
 8001718:	f006 fa7c 	bl	8007c14 <HAL_I2C_IsDeviceReady>
 800171c:	4603      	mov	r3, r0
 800171e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        if(ret == HAL_OK)
 8001722:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10a      	bne.n	8001740 <_Z8test_i2cv+0x4c>
        {
            address[length++]=i;
 800172a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001734:	3340      	adds	r3, #64	; 0x40
 8001736:	443b      	add	r3, r7
 8001738:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800173c:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 8001740:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001744:	3301      	adds	r3, #1
 8001746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800174a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800174e:	2b00      	cmp	r3, #0
 8001750:	dada      	bge.n	8001708 <_Z8test_i2cv+0x14>
        }
    }
    uint8_t i2c_start_msg1[] = "I2C Scanning:\n";
 8001752:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <_Z8test_i2cv+0x1bc>)
 8001754:	f107 0420 	add.w	r4, r7, #32
 8001758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175a:	c407      	stmia	r4!, {r0, r1, r2}
 800175c:	8023      	strh	r3, [r4, #0]
 800175e:	3402      	adds	r4, #2
 8001760:	0c1b      	lsrs	r3, r3, #16
 8001762:	7023      	strb	r3, [r4, #0]

	char buffer[25] = {0};
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	751a      	strb	r2, [r3, #20]
	HAL_UART_Transmit(&huart7, i2c_start_msg1, sizeof(i2c_start_msg1)-1, 10);
 800177a:	f107 0120 	add.w	r1, r7, #32
 800177e:	230a      	movs	r3, #10
 8001780:	220e      	movs	r2, #14
 8001782:	484c      	ldr	r0, [pc, #304]	; (80018b4 <_Z8test_i2cv+0x1c0>)
 8001784:	f00c fb56 	bl	800de34 <HAL_UART_Transmit>

	if(length==2){
 8001788:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800178c:	2b02      	cmp	r3, #2
 800178e:	d10f      	bne.n	80017b0 <_Z8test_i2cv+0xbc>
		sprintf(buffer, "\tI2C1 Address:0x%02X,0x%02X\n", address[0],address[1]);
 8001790:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001794:	461a      	mov	r2, r3
 8001796:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800179a:	1d38      	adds	r0, r7, #4
 800179c:	4946      	ldr	r1, [pc, #280]	; (80018b8 <_Z8test_i2cv+0x1c4>)
 800179e:	f00e ffbb 	bl	8010718 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 80017a2:	1d39      	adds	r1, r7, #4
 80017a4:	230a      	movs	r3, #10
 80017a6:	2218      	movs	r2, #24
 80017a8:	4842      	ldr	r0, [pc, #264]	; (80018b4 <_Z8test_i2cv+0x1c0>)
 80017aa:	f00c fb43 	bl	800de34 <HAL_UART_Transmit>
 80017ae:	e01c      	b.n	80017ea <_Z8test_i2cv+0xf6>
	}else if(length==1){
 80017b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d10e      	bne.n	80017d6 <_Z8test_i2cv+0xe2>
		sprintf(buffer, "\tI2C1 Address:0x%02X\n", address[0]);
 80017b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017bc:	461a      	mov	r2, r3
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	493e      	ldr	r1, [pc, #248]	; (80018bc <_Z8test_i2cv+0x1c8>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f00e ffa8 	bl	8010718 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 80017c8:	1d39      	adds	r1, r7, #4
 80017ca:	230a      	movs	r3, #10
 80017cc:	2213      	movs	r2, #19
 80017ce:	4839      	ldr	r0, [pc, #228]	; (80018b4 <_Z8test_i2cv+0x1c0>)
 80017d0:	f00c fb30 	bl	800de34 <HAL_UART_Transmit>
 80017d4:	e009      	b.n	80017ea <_Z8test_i2cv+0xf6>
	}else if(length==0){
 80017d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d105      	bne.n	80017ea <_Z8test_i2cv+0xf6>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C1\n", 25, 10);
 80017de:	230a      	movs	r3, #10
 80017e0:	2219      	movs	r2, #25
 80017e2:	4937      	ldr	r1, [pc, #220]	; (80018c0 <_Z8test_i2cv+0x1cc>)
 80017e4:	4833      	ldr	r0, [pc, #204]	; (80018b4 <_Z8test_i2cv+0x1c0>)
 80017e6:	f00c fb25 	bl	800de34 <HAL_UART_Transmit>
	}

    length=0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 80017f0:	2301      	movs	r3, #1
 80017f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80017f6:	e020      	b.n	800183a <_Z8test_i2cv+0x146>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 80017f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	b299      	uxth	r1, r3
 8001802:	2305      	movs	r3, #5
 8001804:	2203      	movs	r2, #3
 8001806:	482f      	ldr	r0, [pc, #188]	; (80018c4 <_Z8test_i2cv+0x1d0>)
 8001808:	f006 fa04 	bl	8007c14 <HAL_I2C_IsDeviceReady>
 800180c:	4603      	mov	r3, r0
 800180e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if(ret == HAL_OK)
 8001812:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10a      	bne.n	8001830 <_Z8test_i2cv+0x13c>
		{
			address[length++]=i;
 800181a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001824:	3340      	adds	r3, #64	; 0x40
 8001826:	443b      	add	r3, r7
 8001828:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800182c:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 8001830:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001834:	3301      	adds	r3, #1
 8001836:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800183a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800183e:	2b00      	cmp	r3, #0
 8001840:	dada      	bge.n	80017f8 <_Z8test_i2cv+0x104>
		}
	}
    if(length==2){
 8001842:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001846:	2b02      	cmp	r3, #2
 8001848:	d10f      	bne.n	800186a <_Z8test_i2cv+0x176>
		sprintf(buffer, "\tI2C2 Address:0x%02X,0x%02X\n", address[0],address[1]);
 800184a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800184e:	461a      	mov	r2, r3
 8001850:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001854:	1d38      	adds	r0, r7, #4
 8001856:	491c      	ldr	r1, [pc, #112]	; (80018c8 <_Z8test_i2cv+0x1d4>)
 8001858:	f00e ff5e 	bl	8010718 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 800185c:	1d39      	adds	r1, r7, #4
 800185e:	230a      	movs	r3, #10
 8001860:	2218      	movs	r2, #24
 8001862:	4814      	ldr	r0, [pc, #80]	; (80018b4 <_Z8test_i2cv+0x1c0>)
 8001864:	f00c fae6 	bl	800de34 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
	}else if(length==0){
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
	}

}
 8001868:	e01c      	b.n	80018a4 <_Z8test_i2cv+0x1b0>
	}else if(length==1){
 800186a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800186e:	2b01      	cmp	r3, #1
 8001870:	d10e      	bne.n	8001890 <_Z8test_i2cv+0x19c>
		sprintf(buffer, "\tI2C2 Address:0x%02X\n", address[0]);
 8001872:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001876:	461a      	mov	r2, r3
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	4914      	ldr	r1, [pc, #80]	; (80018cc <_Z8test_i2cv+0x1d8>)
 800187c:	4618      	mov	r0, r3
 800187e:	f00e ff4b 	bl	8010718 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 8001882:	1d39      	adds	r1, r7, #4
 8001884:	230a      	movs	r3, #10
 8001886:	2213      	movs	r2, #19
 8001888:	480a      	ldr	r0, [pc, #40]	; (80018b4 <_Z8test_i2cv+0x1c0>)
 800188a:	f00c fad3 	bl	800de34 <HAL_UART_Transmit>
}
 800188e:	e009      	b.n	80018a4 <_Z8test_i2cv+0x1b0>
	}else if(length==0){
 8001890:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <_Z8test_i2cv+0x1b0>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
 8001898:	230a      	movs	r3, #10
 800189a:	2219      	movs	r2, #25
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <_Z8test_i2cv+0x1dc>)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <_Z8test_i2cv+0x1c0>)
 80018a0:	f00c fac8 	bl	800de34 <HAL_UART_Transmit>
}
 80018a4:	bf00      	nop
 80018a6:	3744      	adds	r7, #68	; 0x44
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}
 80018ac:	240002d4 	.word	0x240002d4
 80018b0:	08012988 	.word	0x08012988
 80018b4:	240004a4 	.word	0x240004a4
 80018b8:	080128e0 	.word	0x080128e0
 80018bc:	08012900 	.word	0x08012900
 80018c0:	08012918 	.word	0x08012918
 80018c4:	24000328 	.word	0x24000328
 80018c8:	08012934 	.word	0x08012934
 80018cc:	08012954 	.word	0x08012954
 80018d0:	0801296c 	.word	0x0801296c

080018d4 <_Z10test_speedv>:

void test_speed(){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
	char send_data[7];
	HAL_UART_Transmit(&huart7, (uint8_t*)"Speed: ", 7, 10);
 80018da:	230a      	movs	r3, #10
 80018dc:	2207      	movs	r2, #7
 80018de:	4914      	ldr	r1, [pc, #80]	; (8001930 <_Z10test_speedv+0x5c>)
 80018e0:	4814      	ldr	r0, [pc, #80]	; (8001934 <_Z10test_speedv+0x60>)
 80018e2:	f00c faa7 	bl	800de34 <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e011      	b.n	8001910 <_Z10test_speedv+0x3c>
		sprintf(send_data,"%04lu ",speed[i]);
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <_Z10test_speedv+0x64>)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <_Z10test_speedv+0x68>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f00e ff0d 	bl	8010718 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)send_data, 5, 10);
 80018fe:	1d39      	adds	r1, r7, #4
 8001900:	230a      	movs	r3, #10
 8001902:	2205      	movs	r2, #5
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <_Z10test_speedv+0x60>)
 8001906:	f00c fa95 	bl	800de34 <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3301      	adds	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	ddea      	ble.n	80018ec <_Z10test_speedv+0x18>
	}
	uint8_t lf[]={10};
 8001916:	230a      	movs	r3, #10
 8001918:	703b      	strb	r3, [r7, #0]
	HAL_UART_Transmit(&huart7, lf, 1, 10);
 800191a:	4639      	mov	r1, r7
 800191c:	230a      	movs	r3, #10
 800191e:	2201      	movs	r2, #1
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <_Z10test_speedv+0x60>)
 8001922:	f00c fa87 	bl	800de34 <HAL_UART_Transmit>

}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	08012998 	.word	0x08012998
 8001934:	240004a4 	.word	0x240004a4
 8001938:	240007ec 	.word	0x240007ec
 800193c:	080129a0 	.word	0x080129a0

08001940 <_Z10test_brakev>:

void test_brake(){
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,ch3_cnt++);
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <_Z10test_brakev+0x50>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	b2d1      	uxtb	r1, r2
 800194c:	4a10      	ldr	r2, [pc, #64]	; (8001990 <_Z10test_brakev+0x50>)
 800194e:	7011      	strb	r1, [r2, #0]
 8001950:	4a10      	ldr	r2, [pc, #64]	; (8001994 <_Z10test_brakev+0x54>)
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,ch4_cnt--);
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_Z10test_brakev+0x58>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	1e5a      	subs	r2, r3, #1
 800195c:	b2d1      	uxtb	r1, r2
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <_Z10test_brakev+0x58>)
 8001960:	7011      	strb	r1, [r2, #0]
 8001962:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <_Z10test_brakev+0x54>)
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	6413      	str	r3, [r2, #64]	; 0x40
	if(ch3_cnt==99)ch3_cnt=0;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <_Z10test_brakev+0x50>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b63      	cmp	r3, #99	; 0x63
 800196e:	d102      	bne.n	8001976 <_Z10test_brakev+0x36>
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <_Z10test_brakev+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
	if(ch4_cnt==0)ch4_cnt=99;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_Z10test_brakev+0x58>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <_Z10test_brakev+0x44>
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <_Z10test_brakev+0x58>)
 8001980:	2263      	movs	r2, #99	; 0x63
 8001982:	701a      	strb	r2, [r3, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2400082d 	.word	0x2400082d
 8001994:	24000628 	.word	0x24000628
 8001998:	24000000 	.word	0x24000000

0800199c <_Z10input_testv>:


void input_test(){
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b0b9      	sub	sp, #228	; 0xe4
 80019a0:	af02      	add	r7, sp, #8
	InputMode mode = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin)==GPIO_PIN_RESET?Auto:Manual;
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	4867      	ldr	r0, [pc, #412]	; (8001b44 <_Z10input_testv+0x1a8>)
 80019a6:	f006 f859 	bl	8007a5c <HAL_GPIO_ReadPin>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	if(input_mode!=mode){
 80019ba:	4b63      	ldr	r3, [pc, #396]	; (8001b48 <_Z10input_testv+0x1ac>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f897 20d6 	ldrb.w	r2, [r7, #214]	; 0xd6
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d044      	beq.n	8001a50 <_Z10input_testv+0xb4>
		input_mode=mode;
 80019c6:	4a60      	ldr	r2, [pc, #384]	; (8001b48 <_Z10input_testv+0x1ac>)
 80019c8:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80019cc:	7013      	strb	r3, [r2, #0]
		if(input_mode==Manual){
 80019ce:	4b5e      	ldr	r3, [pc, #376]	; (8001b48 <_Z10input_testv+0x1ac>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d113      	bne.n	80019fe <_Z10input_testv+0x62>
			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80019d6:	2100      	movs	r1, #0
 80019d8:	485c      	ldr	r0, [pc, #368]	; (8001b4c <_Z10input_testv+0x1b0>)
 80019da:	f00a fc6d 	bl	800c2b8 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 80019de:	2104      	movs	r1, #4
 80019e0:	485a      	ldr	r0, [pc, #360]	; (8001b4c <_Z10input_testv+0x1b0>)
 80019e2:	f00a faf3 	bl	800bfcc <HAL_TIM_IC_Start>
			HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80019e6:	2100      	movs	r1, #0
 80019e8:	4859      	ldr	r0, [pc, #356]	; (8001b50 <_Z10input_testv+0x1b4>)
 80019ea:	f00a fc65 	bl	800c2b8 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 80019ee:	2104      	movs	r1, #4
 80019f0:	4857      	ldr	r0, [pc, #348]	; (8001b50 <_Z10input_testv+0x1b4>)
 80019f2:	f00a faeb 	bl	800bfcc <HAL_TIM_IC_Start>

			HAL_TIM_Base_Start_IT(&htim16);
 80019f6:	4857      	ldr	r0, [pc, #348]	; (8001b54 <_Z10input_testv+0x1b8>)
 80019f8:	f00a f870 	bl	800badc <HAL_TIM_Base_Start_IT>
 80019fc:	e028      	b.n	8001a50 <_Z10input_testv+0xb4>
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
		}else{
			freq=0;
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <_Z10input_testv+0x1bc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8001a04:	2100      	movs	r1, #0
 8001a06:	4851      	ldr	r0, [pc, #324]	; (8001b4c <_Z10input_testv+0x1b0>)
 8001a08:	f00a fda6 	bl	800c558 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_2);
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	484f      	ldr	r0, [pc, #316]	; (8001b4c <_Z10input_testv+0x1b0>)
 8001a10:	f00a fbe0 	bl	800c1d4 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop_IT(&htim15, TIM_CHANNEL_1);
 8001a14:	2100      	movs	r1, #0
 8001a16:	484e      	ldr	r0, [pc, #312]	; (8001b50 <_Z10input_testv+0x1b4>)
 8001a18:	f00a fd9e 	bl	800c558 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop(&htim15, TIM_CHANNEL_2);
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	484c      	ldr	r0, [pc, #304]	; (8001b50 <_Z10input_testv+0x1b4>)
 8001a20:	f00a fbd8 	bl	800c1d4 <HAL_TIM_IC_Stop>

			HAL_TIM_Base_Stop_IT(&htim16);
 8001a24:	484b      	ldr	r0, [pc, #300]	; (8001b54 <_Z10input_testv+0x1b8>)
 8001a26:	f00a f8d1 	bl	800bbcc <HAL_TIM_Base_Stop_IT>

			__HAL_TIM_SET_AUTORELOAD(&htim3,20000-1);
 8001a2a:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <_Z10input_testv+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a34:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <_Z10input_testv+0x1c0>)
 8001a36:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a3a:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,5000-1);
 8001a3c:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <_Z10input_testv+0x1c0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a44:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,10000-1);
 8001a46:	4b45      	ldr	r3, [pc, #276]	; (8001b5c <_Z10input_testv+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
//			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
		}
	}
	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8001a50:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <_Z10input_testv+0x1c0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	uint32_t esc_cnt = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 8001a5a:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <_Z10input_testv+0x1c0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	uint32_t servo_cnt = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2);
 8001a64:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <_Z10input_testv+0x1c0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	char str[200]={0};
 8001a6e:	2300      	movs	r3, #0
 8001a70:	603b      	str	r3, [r7, #0]
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	22c4      	movs	r2, #196	; 0xc4
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00e feb0 	bl	80107de <memset>
	if(mode==Auto){
 8001a7e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11e      	bne.n	8001ac4 <_Z10input_testv+0x128>
		sprintf(str,"Input Mode: Auto, Frequency: %lu Hz, ESC DutyCycle: %u%%, SERVO DutyCycle: %lu%%\n",1000000/arr,esc_cnt*100/arr,servo_cnt*100/arr);
 8001a86:	4a36      	ldr	r2, [pc, #216]	; (8001b60 <_Z10input_testv+0x1c4>)
 8001a88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a94:	2264      	movs	r2, #100	; 0x64
 8001a96:	fb03 f202 	mul.w	r2, r3, r2
 8001a9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a9e:	fbb2 f4f3 	udiv	r4, r2, r3
 8001aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001aa6:	2264      	movs	r2, #100	; 0x64
 8001aa8:	fb03 f202 	mul.w	r2, r3, r2
 8001aac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	4638      	mov	r0, r7
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	4623      	mov	r3, r4
 8001aba:	460a      	mov	r2, r1
 8001abc:	4929      	ldr	r1, [pc, #164]	; (8001b64 <_Z10input_testv+0x1c8>)
 8001abe:	f00e fe2b 	bl	8010718 <siprintf>
 8001ac2:	e01d      	b.n	8001b00 <_Z10input_testv+0x164>
	}else{
		sprintf(str,"Input Mode: Manual, Frequency: %lu Hz, ESC DutyCycle: %u%%, SERVO DutyCycle: %lu%%\n",1000000/arr,esc_cnt*100/arr,servo_cnt*100/arr);
 8001ac4:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <_Z10input_testv+0x1c4>)
 8001ac6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aca:	fbb2 f1f3 	udiv	r1, r2, r3
 8001ace:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ad2:	2264      	movs	r2, #100	; 0x64
 8001ad4:	fb03 f202 	mul.w	r2, r3, r2
 8001ad8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001adc:	fbb2 f4f3 	udiv	r4, r2, r3
 8001ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ae4:	2264      	movs	r2, #100	; 0x64
 8001ae6:	fb03 f202 	mul.w	r2, r3, r2
 8001aea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	4638      	mov	r0, r7
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4623      	mov	r3, r4
 8001af8:	460a      	mov	r2, r1
 8001afa:	491b      	ldr	r1, [pc, #108]	; (8001b68 <_Z10input_testv+0x1cc>)
 8001afc:	f00e fe0c 	bl	8010718 <siprintf>
	}
	uint8_t i=0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	while(str[i]!=0 && i<200){
 8001b06:	e00c      	b.n	8001b22 <_Z10input_testv+0x186>
		HAL_UART_Transmit(&huart7, (uint8_t*)(&str[i++]), 1, 1);
 8001b08:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	f887 20d7 	strb.w	r2, [r7, #215]	; 0xd7
 8001b12:	461a      	mov	r2, r3
 8001b14:	463b      	mov	r3, r7
 8001b16:	1899      	adds	r1, r3, r2
 8001b18:	2301      	movs	r3, #1
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4813      	ldr	r0, [pc, #76]	; (8001b6c <_Z10input_testv+0x1d0>)
 8001b1e:	f00c f989 	bl	800de34 <HAL_UART_Transmit>
	while(str[i]!=0 && i<200){
 8001b22:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b26:	33d8      	adds	r3, #216	; 0xd8
 8001b28:	443b      	add	r3, r7
 8001b2a:	f813 3cd8 	ldrb.w	r3, [r3, #-216]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <_Z10input_testv+0x19e>
 8001b32:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b36:	2bc7      	cmp	r3, #199	; 0xc7
 8001b38:	d9e6      	bls.n	8001b08 <_Z10input_testv+0x16c>
	}

}
 8001b3a:	bf00      	nop
 8001b3c:	37dc      	adds	r7, #220	; 0xdc
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	58020400 	.word	0x58020400
 8001b48:	240007a4 	.word	0x240007a4
 8001b4c:	240006c0 	.word	0x240006c0
 8001b50:	2400070c 	.word	0x2400070c
 8001b54:	24000758 	.word	0x24000758
 8001b58:	24000838 	.word	0x24000838
 8001b5c:	24000674 	.word	0x24000674
 8001b60:	000f4240 	.word	0x000f4240
 8001b64:	080129a8 	.word	0x080129a8
 8001b68:	080129fc 	.word	0x080129fc
 8001b6c:	240004a4 	.word	0x240004a4

08001b70 <_Z10force_testv>:

void force_test(){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0b0      	sub	sp, #192	; 0xc0
 8001b74:	af0e      	add	r7, sp, #56	; 0x38
	float force[8];
	for(uint8_t i=0;i<8;++i){
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001b7c:	e021      	b.n	8001bc2 <_Z10force_testv+0x52>
		force[i]=(float)force_raw[i]*3.3/0xFFFF;
 8001b7e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001b82:	4a45      	ldr	r2, [pc, #276]	; (8001c98 <_Z10force_testv+0x128>)
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b94:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001c88 <_Z10force_testv+0x118>
 8001b98:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b9c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8001c90 <_Z10force_testv+0x120>
 8001ba0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ba4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001ba8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	3388      	adds	r3, #136	; 0x88
 8001bb0:	443b      	add	r3, r7
 8001bb2:	3b24      	subs	r3, #36	; 0x24
 8001bb4:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<8;++i){
 8001bb8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001bc2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bc6:	2b07      	cmp	r3, #7
 8001bc8:	d9d9      	bls.n	8001b7e <_Z10force_testv+0xe>
	}
	char msg[100]={0};
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2260      	movs	r2, #96	; 0x60
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f00e fe02 	bl	80107de <memset>
	sprintf(msg,"Force: %0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f\n",force[0],force[1],force[2],force[3],force[4],force[5],force[6],force[7]);
 8001bda:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001bde:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
 8001be2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001be6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bea:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001bee:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001bf2:	edd7 5a1c 	vldr	s11, [r7, #112]	; 0x70
 8001bf6:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001bfa:	edd7 4a1d 	vldr	s9, [r7, #116]	; 0x74
 8001bfe:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001c02:	edd7 3a1e 	vldr	s7, [r7, #120]	; 0x78
 8001c06:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8001c0a:	edd7 2a1f 	vldr	s5, [r7, #124]	; 0x7c
 8001c0e:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8001c12:	edd7 1a20 	vldr	s3, [r7, #128]	; 0x80
 8001c16:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8001c1a:	4638      	mov	r0, r7
 8001c1c:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8001c20:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8001c24:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001c28:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001c2c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001c30:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001c34:	ed8d 7b00 	vstr	d7, [sp]
 8001c38:	ec53 2b10 	vmov	r2, r3, d0
 8001c3c:	4917      	ldr	r1, [pc, #92]	; (8001c9c <_Z10force_testv+0x12c>)
 8001c3e:	f00e fd6b 	bl	8010718 <siprintf>
	uint8_t i=0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	while(msg[i]!=0 && i<100){
 8001c48:	e00c      	b.n	8001c64 <_Z10force_testv+0xf4>
		HAL_UART_Transmit(&huart7, (uint8_t*)(&msg[i++]), 1, 1);
 8001c4a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 8001c54:	461a      	mov	r2, r3
 8001c56:	463b      	mov	r3, r7
 8001c58:	1899      	adds	r1, r3, r2
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4810      	ldr	r0, [pc, #64]	; (8001ca0 <_Z10force_testv+0x130>)
 8001c60:	f00c f8e8 	bl	800de34 <HAL_UART_Transmit>
	while(msg[i]!=0 && i<100){
 8001c64:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c68:	3388      	adds	r3, #136	; 0x88
 8001c6a:	443b      	add	r3, r7
 8001c6c:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <_Z10force_testv+0x10c>
 8001c74:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c78:	2b63      	cmp	r3, #99	; 0x63
 8001c7a:	d9e6      	bls.n	8001c4a <_Z10force_testv+0xda>
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	3788      	adds	r7, #136	; 0x88
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	f3af 8000 	nop.w
 8001c88:	66666666 	.word	0x66666666
 8001c8c:	400a6666 	.word	0x400a6666
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40efffe0 	.word	0x40efffe0
 8001c98:	2400083c 	.word	0x2400083c
 8001c9c:	08012a50 	.word	0x08012a50
 8001ca0:	240004a4 	.word	0x240004a4

08001ca4 <_Z12BNO085_setupv>:

void BNO085_setup(){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BNO_P0_GPIO_Port, BNO_P0_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cae:	4814      	ldr	r0, [pc, #80]	; (8001d00 <_Z12BNO085_setupv+0x5c>)
 8001cb0:	f005 feec 	bl	8007a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BNO_P1_GPIO_Port, BNO_P1_Pin, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cba:	4811      	ldr	r0, [pc, #68]	; (8001d00 <_Z12BNO085_setupv+0x5c>)
 8001cbc:	f005 fee6 	bl	8007a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BNO_BOOTN_GPIO_Port, BNO_BOOTN_Pin, GPIO_PIN_SET);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cc6:	480f      	ldr	r0, [pc, #60]	; (8001d04 <_Z12BNO085_setupv+0x60>)
 8001cc8:	f005 fee0 	bl	8007a8c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cd2:	480c      	ldr	r0, [pc, #48]	; (8001d04 <_Z12BNO085_setupv+0x60>)
 8001cd4:	f005 feda 	bl	8007a8c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f001 f813 	bl	8002d04 <HAL_Delay>
	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce4:	4807      	ldr	r0, [pc, #28]	; (8001d04 <_Z12BNO085_setupv+0x60>)
 8001ce6:	f005 fed1 	bl	8007a8c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f001 f80a 	bl	8002d04 <HAL_Delay>
	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_SET);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf6:	4803      	ldr	r0, [pc, #12]	; (8001d04 <_Z12BNO085_setupv+0x60>)
 8001cf8:	f005 fec8 	bl	8007a8c <HAL_GPIO_WritePin>

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	58020c00 	.word	0x58020c00
 8001d04:	58020400 	.word	0x58020400

08001d08 <setup>:

void setup(){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	DWT_Init();
 8001d0c:	f7ff fb30 	bl	8001370 <_ZL8DWT_Initv>
//	HAL_ADC_Start_DMA(&hadc1, force_raw, 8);
	HAL_ADC_Start_DMA(&hadc1,force_raw,8);
 8001d10:	2208      	movs	r2, #8
 8001d12:	494a      	ldr	r1, [pc, #296]	; (8001e3c <setup+0x134>)
 8001d14:	484a      	ldr	r0, [pc, #296]	; (8001e40 <setup+0x138>)
 8001d16:	f001 fbcf 	bl	80034b8 <HAL_ADC_Start_DMA>
	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8001d1a:	2244      	movs	r2, #68	; 0x44
 8001d1c:	4949      	ldr	r1, [pc, #292]	; (8001e44 <setup+0x13c>)
 8001d1e:	484a      	ldr	r0, [pc, #296]	; (8001e48 <setup+0x140>)
 8001d20:	f00c f916 	bl	800df50 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart7, (uint8_t*)&led_state, 1);
 8001d24:	2201      	movs	r2, #1
 8001d26:	4949      	ldr	r1, [pc, #292]	; (8001e4c <setup+0x144>)
 8001d28:	4849      	ldr	r0, [pc, #292]	; (8001e50 <setup+0x148>)
 8001d2a:	f00c f911 	bl	800df50 <HAL_UART_Receive_DMA>

	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2108      	movs	r1, #8
 8001d32:	4848      	ldr	r0, [pc, #288]	; (8001e54 <setup+0x14c>)
 8001d34:	f005 feaa 	bl	8007a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2120      	movs	r1, #32
 8001d3c:	4845      	ldr	r0, [pc, #276]	; (8001e54 <setup+0x14c>)
 8001d3e:	f005 fea5 	bl	8007a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2140      	movs	r1, #64	; 0x40
 8001d46:	4843      	ldr	r0, [pc, #268]	; (8001e54 <setup+0x14c>)
 8001d48:	f005 fea0 	bl	8007a8c <HAL_GPIO_WritePin>

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,33);
 8001d4c:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <setup+0x150>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2221      	movs	r2, #33	; 0x21
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2,67);
 8001d54:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <setup+0x150>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2243      	movs	r2, #67	; 0x43
 8001d5a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,ch3_cnt++);
 8001d5c:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <setup+0x154>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	b2d1      	uxtb	r1, r2
 8001d64:	4a3d      	ldr	r2, [pc, #244]	; (8001e5c <setup+0x154>)
 8001d66:	7011      	strb	r1, [r2, #0]
 8001d68:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <setup+0x150>)
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,ch4_cnt--);
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	; (8001e60 <setup+0x158>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	1e5a      	subs	r2, r3, #1
 8001d74:	b2d1      	uxtb	r1, r2
 8001d76:	4a3a      	ldr	r2, [pc, #232]	; (8001e60 <setup+0x158>)
 8001d78:	7011      	strb	r1, [r2, #0]
 8001d7a:	4a37      	ldr	r2, [pc, #220]	; (8001e58 <setup+0x150>)
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40

	HAL_TIM_Base_Start_IT(&htim2);
 8001d80:	4835      	ldr	r0, [pc, #212]	; (8001e58 <setup+0x150>)
 8001d82:	f009 feab 	bl	800badc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d86:	2100      	movs	r1, #0
 8001d88:	4833      	ldr	r0, [pc, #204]	; (8001e58 <setup+0x150>)
 8001d8a:	f009 ffaf 	bl	800bcec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d8e:	2104      	movs	r1, #4
 8001d90:	4831      	ldr	r0, [pc, #196]	; (8001e58 <setup+0x150>)
 8001d92:	f009 ffab 	bl	800bcec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001d96:	2108      	movs	r1, #8
 8001d98:	482f      	ldr	r0, [pc, #188]	; (8001e58 <setup+0x150>)
 8001d9a:	f009 ffa7 	bl	800bcec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001d9e:	210c      	movs	r1, #12
 8001da0:	482d      	ldr	r0, [pc, #180]	; (8001e58 <setup+0x150>)
 8001da2:	f009 ffa3 	bl	800bcec <HAL_TIM_PWM_Start>


	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2120      	movs	r1, #32
 8001daa:	482e      	ldr	r0, [pc, #184]	; (8001e64 <setup+0x15c>)
 8001dac:	f005 fe6e 	bl	8007a8c <HAL_GPIO_WritePin>
	freq = 0;
 8001db0:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <setup+0x160>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
	input_mode = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin)==GPIO_PIN_RESET?Auto:Manual;
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	482a      	ldr	r0, [pc, #168]	; (8001e64 <setup+0x15c>)
 8001dba:	f005 fe4f 	bl	8007a5c <HAL_GPIO_ReadPin>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <setup+0x164>)
 8001dce:	701a      	strb	r2, [r3, #0]
	if(input_mode==Manual){
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <setup+0x164>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d112      	bne.n	8001dfe <setup+0xf6>
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4825      	ldr	r0, [pc, #148]	; (8001e70 <setup+0x168>)
 8001ddc:	f00a fa6c 	bl	800c2b8 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001de0:	2104      	movs	r1, #4
 8001de2:	4823      	ldr	r0, [pc, #140]	; (8001e70 <setup+0x168>)
 8001de4:	f00a f8f2 	bl	800bfcc <HAL_TIM_IC_Start>
		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001de8:	2100      	movs	r1, #0
 8001dea:	4822      	ldr	r0, [pc, #136]	; (8001e74 <setup+0x16c>)
 8001dec:	f00a fa64 	bl	800c2b8 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8001df0:	2104      	movs	r1, #4
 8001df2:	4820      	ldr	r0, [pc, #128]	; (8001e74 <setup+0x16c>)
 8001df4:	f00a f8ea 	bl	800bfcc <HAL_TIM_IC_Start>

		HAL_TIM_Base_Start_IT(&htim16);
 8001df8:	481f      	ldr	r0, [pc, #124]	; (8001e78 <setup+0x170>)
 8001dfa:	f009 fe6f 	bl	800badc <HAL_TIM_Base_Start_IT>
	}

	__HAL_TIM_SET_AUTORELOAD(&htim3,20000-1);
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <setup+0x174>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <setup+0x174>)
 8001e0a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001e0e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,5000-1);
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <setup+0x174>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f241 3287 	movw	r2, #4999	; 0x1387
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,10000-1);
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <setup+0x174>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e22:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e24:	2100      	movs	r1, #0
 8001e26:	4815      	ldr	r0, [pc, #84]	; (8001e7c <setup+0x174>)
 8001e28:	f009 ff60 	bl	800bcec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	4813      	ldr	r0, [pc, #76]	; (8001e7c <setup+0x174>)
 8001e30:	f009 ff5c 	bl	800bcec <HAL_TIM_PWM_Start>

	BNO085_setup();
 8001e34:	f7ff ff36 	bl	8001ca4 <_Z12BNO085_setupv>

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	2400083c 	.word	0x2400083c
 8001e40:	240001f8 	.word	0x240001f8
 8001e44:	240007a8 	.word	0x240007a8
 8001e48:	24000410 	.word	0x24000410
 8001e4c:	2400082c 	.word	0x2400082c
 8001e50:	240004a4 	.word	0x240004a4
 8001e54:	58020c00 	.word	0x58020c00
 8001e58:	24000628 	.word	0x24000628
 8001e5c:	2400082d 	.word	0x2400082d
 8001e60:	24000000 	.word	0x24000000
 8001e64:	58020400 	.word	0x58020400
 8001e68:	24000838 	.word	0x24000838
 8001e6c:	240007a4 	.word	0x240007a4
 8001e70:	240006c0 	.word	0x240006c0
 8001e74:	2400070c 	.word	0x2400070c
 8001e78:	24000758 	.word	0x24000758
 8001e7c:	24000674 	.word	0x24000674

08001e80 <loop>:




void loop(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart7, (uint8_t*)("\n\n"), 2, 1);
 8001e84:	2301      	movs	r3, #1
 8001e86:	2202      	movs	r2, #2
 8001e88:	4909      	ldr	r1, [pc, #36]	; (8001eb0 <loop+0x30>)
 8001e8a:	480a      	ldr	r0, [pc, #40]	; (8001eb4 <loop+0x34>)
 8001e8c:	f00b ffd2 	bl	800de34 <HAL_UART_Transmit>
	force_test();
 8001e90:	f7ff fe6e 	bl	8001b70 <_Z10force_testv>
	input_test();
 8001e94:	f7ff fd82 	bl	800199c <_Z10input_testv>
	test_speed();
 8001e98:	f7ff fd1c 	bl	80018d4 <_Z10test_speedv>
	test_i2c();
 8001e9c:	f7ff fc2a 	bl	80016f4 <_Z8test_i2cv>
	test_brake();
 8001ea0:	f7ff fd4e 	bl	8001940 <_Z10test_brakev>
	HAL_Delay(1000);
 8001ea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ea8:	f000 ff2c 	bl	8002d04 <HAL_Delay>


}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	08012a88 	.word	0x08012a88
 8001eb4:	240004a4 	.word	0x240004a4

08001eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_MspInit+0x30>)
 8001ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ec4:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <HAL_MspInit+0x30>)
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_MspInit+0x30>)
 8001ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	58024400 	.word	0x58024400

08001eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0bc      	sub	sp, #240	; 0xf0
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	22c0      	movs	r2, #192	; 0xc0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f00e fc66 	bl	80107de <memset>
  if(hadc->Instance==ADC1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a5e      	ldr	r2, [pc, #376]	; (8002090 <HAL_ADC_MspInit+0x1a4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	f040 80b5 	bne.w	8002088 <HAL_ADC_MspInit+0x19c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f32:	f107 0318 	add.w	r3, r7, #24
 8001f36:	4618      	mov	r0, r3
 8001f38:	f007 f87a 	bl	8009030 <HAL_RCCEx_PeriphCLKConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8001f42:	f7ff fa0f 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f46:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f4c:	4a51      	ldr	r2, [pc, #324]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001f4e:	f043 0320 	orr.w	r3, r3, #32
 8001f52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f56:	4b4f      	ldr	r3, [pc, #316]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6a:	4a4a      	ldr	r2, [pc, #296]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f74:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b44      	ldr	r3, [pc, #272]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f88:	4a42      	ldr	r2, [pc, #264]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f92:	4b40      	ldr	r3, [pc, #256]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa0:	4b3c      	ldr	r3, [pc, #240]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa6:	4a3b      	ldr	r2, [pc, #236]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb0:	4b38      	ldr	r3, [pc, #224]	; (8002094 <HAL_ADC_MspInit+0x1a8>)
 8001fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8001fbe:	2333      	movs	r3, #51	; 0x33
 8001fc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4830      	ldr	r0, [pc, #192]	; (8002098 <HAL_ADC_MspInit+0x1ac>)
 8001fd8:	f005 fb90 	bl	80076fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 8001fdc:	2350      	movs	r3, #80	; 0x50
 8001fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4829      	ldr	r0, [pc, #164]	; (800209c <HAL_ADC_MspInit+0x1b0>)
 8001ff6:	f005 fb81 	bl	80076fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002000:	2303      	movs	r3, #3
 8002002:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002010:	4619      	mov	r1, r3
 8002012:	4823      	ldr	r0, [pc, #140]	; (80020a0 <HAL_ADC_MspInit+0x1b4>)
 8002014:	f005 fb72 	bl	80076fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 800201a:	4a23      	ldr	r2, [pc, #140]	; (80020a8 <HAL_ADC_MspInit+0x1bc>)
 800201c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 8002020:	2209      	movs	r2, #9
 8002022:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002030:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 8002032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002036:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 800203a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800203e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 8002042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002046:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 800204a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800204e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 8002052:	2200      	movs	r2, #0
 8002054:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800205c:	4811      	ldr	r0, [pc, #68]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 800205e:	f002 fd11 	bl	8004a84 <HAL_DMA_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_ADC_MspInit+0x180>
    {
      Error_Handler();
 8002068:	f7ff f97c 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 8002070:	64da      	str	r2, [r3, #76]	; 0x4c
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_ADC_MspInit+0x1b8>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	2012      	movs	r0, #18
 800207e:	f002 fccc 	bl	8004a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002082:	2012      	movs	r0, #18
 8002084:	f002 fce3 	bl	8004a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002088:	bf00      	nop
 800208a:	37f0      	adds	r7, #240	; 0xf0
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40022000 	.word	0x40022000
 8002094:	58024400 	.word	0x58024400
 8002098:	58020800 	.word	0x58020800
 800209c:	58020000 	.word	0x58020000
 80020a0:	58020400 	.word	0x58020400
 80020a4:	2400025c 	.word	0x2400025c
 80020a8:	40020040 	.word	0x40020040

080020ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0bc      	sub	sp, #240	; 0xf0
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	22c0      	movs	r2, #192	; 0xc0
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f00e fb86 	bl	80107de <memset>
  if(hi2c->Instance==I2C1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a4d      	ldr	r2, [pc, #308]	; (800220c <HAL_I2C_MspInit+0x160>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d147      	bne.n	800216c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020dc:	f04f 0208 	mov.w	r2, #8
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ee:	f107 0318 	add.w	r3, r7, #24
 80020f2:	4618      	mov	r0, r3
 80020f4:	f006 ff9c 	bl	8009030 <HAL_RCCEx_PeriphCLKConfig>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80020fe:	f7ff f931 	bl	8001364 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	4b43      	ldr	r3, [pc, #268]	; (8002210 <HAL_I2C_MspInit+0x164>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002108:	4a41      	ldr	r2, [pc, #260]	; (8002210 <HAL_I2C_MspInit+0x164>)
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002112:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <HAL_I2C_MspInit+0x164>)
 8002114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002120:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002128:	2312      	movs	r3, #18
 800212a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800213a:	2304      	movs	r3, #4
 800213c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002144:	4619      	mov	r1, r3
 8002146:	4833      	ldr	r0, [pc, #204]	; (8002214 <HAL_I2C_MspInit+0x168>)
 8002148:	f005 fad8 	bl	80076fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800214c:	4b30      	ldr	r3, [pc, #192]	; (8002210 <HAL_I2C_MspInit+0x164>)
 800214e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002152:	4a2f      	ldr	r2, [pc, #188]	; (8002210 <HAL_I2C_MspInit+0x164>)
 8002154:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002158:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800215c:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <HAL_I2C_MspInit+0x164>)
 800215e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800216a:	e04b      	b.n	8002204 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a29      	ldr	r2, [pc, #164]	; (8002218 <HAL_I2C_MspInit+0x16c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d146      	bne.n	8002204 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002176:	f04f 0208 	mov.w	r2, #8
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002188:	f107 0318 	add.w	r3, r7, #24
 800218c:	4618      	mov	r0, r3
 800218e:	f006 ff4f 	bl	8009030 <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8002198:	f7ff f8e4 	bl	8001364 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_I2C_MspInit+0x164>)
 800219e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a2:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <HAL_I2C_MspInit+0x164>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_I2C_MspInit+0x164>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c2:	2312      	movs	r3, #18
 80021c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021d4:	2304      	movs	r3, #4
 80021d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021da:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021de:	4619      	mov	r1, r3
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <HAL_I2C_MspInit+0x168>)
 80021e2:	f005 fa8b 	bl	80076fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_I2C_MspInit+0x164>)
 80021e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ec:	4a08      	ldr	r2, [pc, #32]	; (8002210 <HAL_I2C_MspInit+0x164>)
 80021ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_I2C_MspInit+0x164>)
 80021f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
}
 8002204:	bf00      	nop
 8002206:	37f0      	adds	r7, #240	; 0xf0
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40005400 	.word	0x40005400
 8002210:	58024400 	.word	0x58024400
 8002214:	58020400 	.word	0x58020400
 8002218:	40005800 	.word	0x40005800

0800221c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0c0      	sub	sp, #256	; 0x100
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002238:	22c0      	movs	r2, #192	; 0xc0
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f00e face 	bl	80107de <memset>
  if(huart->Instance==LPUART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4abe      	ldr	r2, [pc, #760]	; (8002540 <HAL_UART_MspInit+0x324>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d147      	bne.n	80022dc <HAL_UART_MspInit+0xc0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800224c:	f04f 0204 	mov.w	r2, #4
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800225e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002262:	4618      	mov	r0, r3
 8002264:	f006 fee4 	bl	8009030 <HAL_RCCEx_PeriphCLKConfig>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800226e:	f7ff f879 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002272:	4bb4      	ldr	r3, [pc, #720]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002278:	4ab2      	ldr	r2, [pc, #712]	; (8002544 <HAL_UART_MspInit+0x328>)
 800227a:	f043 0308 	orr.w	r3, r3, #8
 800227e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002282:	4bb0      	ldr	r3, [pc, #704]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	4bac      	ldr	r3, [pc, #688]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002296:	4aab      	ldr	r2, [pc, #684]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a0:	4ba8      	ldr	r3, [pc, #672]	; (8002544 <HAL_UART_MspInit+0x328>)
 80022a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	623b      	str	r3, [r7, #32]
 80022ac:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 80022c8:	2303      	movs	r3, #3
 80022ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80022d2:	4619      	mov	r1, r3
 80022d4:	489c      	ldr	r0, [pc, #624]	; (8002548 <HAL_UART_MspInit+0x32c>)
 80022d6:	f005 fa11 	bl	80076fc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80022da:	e12c      	b.n	8002536 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART5)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a9a      	ldr	r2, [pc, #616]	; (800254c <HAL_UART_MspInit+0x330>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d17e      	bne.n	80023e4 <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80022e6:	f04f 0202 	mov.w	r2, #2
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022fc:	4618      	mov	r0, r3
 80022fe:	f006 fe97 	bl	8009030 <HAL_RCCEx_PeriphCLKConfig>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002308:	f7ff f82c 	bl	8001364 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800230c:	4b8d      	ldr	r3, [pc, #564]	; (8002544 <HAL_UART_MspInit+0x328>)
 800230e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002312:	4a8c      	ldr	r2, [pc, #560]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002318:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800231c:	4b89      	ldr	r3, [pc, #548]	; (8002544 <HAL_UART_MspInit+0x328>)
 800231e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	4b86      	ldr	r3, [pc, #536]	; (8002544 <HAL_UART_MspInit+0x328>)
 800232c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002330:	4a84      	ldr	r2, [pc, #528]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800233a:	4b82      	ldr	r3, [pc, #520]	; (8002544 <HAL_UART_MspInit+0x328>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002348:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800234c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002362:	230e      	movs	r3, #14
 8002364:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800236c:	4619      	mov	r1, r3
 800236e:	4878      	ldr	r0, [pc, #480]	; (8002550 <HAL_UART_MspInit+0x334>)
 8002370:	f005 f9c4 	bl	80076fc <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002374:	4b77      	ldr	r3, [pc, #476]	; (8002554 <HAL_UART_MspInit+0x338>)
 8002376:	4a78      	ldr	r2, [pc, #480]	; (8002558 <HAL_UART_MspInit+0x33c>)
 8002378:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800237a:	4b76      	ldr	r3, [pc, #472]	; (8002554 <HAL_UART_MspInit+0x338>)
 800237c:	2241      	movs	r2, #65	; 0x41
 800237e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002380:	4b74      	ldr	r3, [pc, #464]	; (8002554 <HAL_UART_MspInit+0x338>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002386:	4b73      	ldr	r3, [pc, #460]	; (8002554 <HAL_UART_MspInit+0x338>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800238c:	4b71      	ldr	r3, [pc, #452]	; (8002554 <HAL_UART_MspInit+0x338>)
 800238e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002392:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002394:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_UART_MspInit+0x338>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800239a:	4b6e      	ldr	r3, [pc, #440]	; (8002554 <HAL_UART_MspInit+0x338>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80023a0:	4b6c      	ldr	r3, [pc, #432]	; (8002554 <HAL_UART_MspInit+0x338>)
 80023a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_UART_MspInit+0x338>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ae:	4b69      	ldr	r3, [pc, #420]	; (8002554 <HAL_UART_MspInit+0x338>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80023b4:	4867      	ldr	r0, [pc, #412]	; (8002554 <HAL_UART_MspInit+0x338>)
 80023b6:	f002 fb65 	bl	8004a84 <HAL_DMA_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80023c0:	f7fe ffd0 	bl	8001364 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a63      	ldr	r2, [pc, #396]	; (8002554 <HAL_UART_MspInit+0x338>)
 80023c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80023cc:	4a61      	ldr	r2, [pc, #388]	; (8002554 <HAL_UART_MspInit+0x338>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	2035      	movs	r0, #53	; 0x35
 80023d8:	f002 fb1f 	bl	8004a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80023dc:	2035      	movs	r0, #53	; 0x35
 80023de:	f002 fb36 	bl	8004a4e <HAL_NVIC_EnableIRQ>
}
 80023e2:	e0a8      	b.n	8002536 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART7)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a5c      	ldr	r2, [pc, #368]	; (800255c <HAL_UART_MspInit+0x340>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	f040 80a3 	bne.w	8002536 <HAL_UART_MspInit+0x31a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80023f0:	f04f 0202 	mov.w	r2, #2
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002406:	4618      	mov	r0, r3
 8002408:	f006 fe12 	bl	8009030 <HAL_RCCEx_PeriphCLKConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8002412:	f7fe ffa7 	bl	8001364 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002416:	4b4b      	ldr	r3, [pc, #300]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800241c:	4a49      	ldr	r2, [pc, #292]	; (8002544 <HAL_UART_MspInit+0x328>)
 800241e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002422:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800242c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002434:	4b43      	ldr	r3, [pc, #268]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243a:	4a42      	ldr	r2, [pc, #264]	; (8002544 <HAL_UART_MspInit+0x328>)
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002444:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	4b3c      	ldr	r3, [pc, #240]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002458:	4a3a      	ldr	r2, [pc, #232]	; (8002544 <HAL_UART_MspInit+0x328>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002462:	4b38      	ldr	r3, [pc, #224]	; (8002544 <HAL_UART_MspInit+0x328>)
 8002464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002474:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800248a:	2307      	movs	r3, #7
 800248c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002490:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002494:	4619      	mov	r1, r3
 8002496:	4832      	ldr	r0, [pc, #200]	; (8002560 <HAL_UART_MspInit+0x344>)
 8002498:	f005 f930 	bl	80076fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800249c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 80024b6:	230b      	movs	r3, #11
 80024b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024c0:	4619      	mov	r1, r3
 80024c2:	4821      	ldr	r0, [pc, #132]	; (8002548 <HAL_UART_MspInit+0x32c>)
 80024c4:	f005 f91a 	bl	80076fc <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream1;
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_UART_MspInit+0x348>)
 80024ca:	4a27      	ldr	r2, [pc, #156]	; (8002568 <HAL_UART_MspInit+0x34c>)
 80024cc:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80024ce:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_UART_MspInit+0x348>)
 80024d0:	224f      	movs	r2, #79	; 0x4f
 80024d2:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024d4:	4b23      	ldr	r3, [pc, #140]	; (8002564 <HAL_UART_MspInit+0x348>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_UART_MspInit+0x348>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024e0:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_UART_MspInit+0x348>)
 80024e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e6:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_UART_MspInit+0x348>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_UART_MspInit+0x348>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_UART_MspInit+0x348>)
 80024f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fa:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_UART_MspInit+0x348>)
 80024fe:	2200      	movs	r2, #0
 8002500:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <HAL_UART_MspInit+0x348>)
 8002504:	2200      	movs	r2, #0
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002508:	4816      	ldr	r0, [pc, #88]	; (8002564 <HAL_UART_MspInit+0x348>)
 800250a:	f002 fabb 	bl	8004a84 <HAL_DMA_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 8002514:	f7fe ff26 	bl	8001364 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <HAL_UART_MspInit+0x348>)
 800251c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002520:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_UART_MspInit+0x348>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2052      	movs	r0, #82	; 0x52
 800252c:	f002 fa75 	bl	8004a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002530:	2052      	movs	r0, #82	; 0x52
 8002532:	f002 fa8c 	bl	8004a4e <HAL_NVIC_EnableIRQ>
}
 8002536:	bf00      	nop
 8002538:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	58000c00 	.word	0x58000c00
 8002544:	58024400 	.word	0x58024400
 8002548:	58020000 	.word	0x58020000
 800254c:	40005000 	.word	0x40005000
 8002550:	58020400 	.word	0x58020400
 8002554:	24000538 	.word	0x24000538
 8002558:	40020010 	.word	0x40020010
 800255c:	40007800 	.word	0x40007800
 8002560:	58021000 	.word	0x58021000
 8002564:	240005b0 	.word	0x240005b0
 8002568:	40020028 	.word	0x40020028

0800256c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258c:	d10f      	bne.n	80025ae <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800258e:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 8002590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002594:	4a5c      	ldr	r2, [pc, #368]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800259e:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 80025a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	623b      	str	r3, [r7, #32]
 80025aa:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80025ac:	e0a8      	b.n	8002700 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a56      	ldr	r2, [pc, #344]	; (800270c <HAL_TIM_Base_MspInit+0x1a0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d10f      	bne.n	80025d8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 80025ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025be:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025c8:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 80025ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
}
 80025d6:	e093      	b.n	8002700 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM5)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a4c      	ldr	r2, [pc, #304]	; (8002710 <HAL_TIM_Base_MspInit+0x1a4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d136      	bne.n	8002650 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025e2:	4b49      	ldr	r3, [pc, #292]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 80025e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025e8:	4a47      	ldr	r2, [pc, #284]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025f2:	4b45      	ldr	r3, [pc, #276]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 80025f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002600:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 8002602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002606:	4a40      	ldr	r2, [pc, #256]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002610:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 8002612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800261e:	2301      	movs	r3, #1
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800262e:	2302      	movs	r3, #2
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002636:	4619      	mov	r1, r3
 8002638:	4836      	ldr	r0, [pc, #216]	; (8002714 <HAL_TIM_Base_MspInit+0x1a8>)
 800263a:	f005 f85f 	bl	80076fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	2032      	movs	r0, #50	; 0x32
 8002644:	f002 f9e9 	bl	8004a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002648:	2032      	movs	r0, #50	; 0x32
 800264a:	f002 fa00 	bl	8004a4e <HAL_NVIC_EnableIRQ>
}
 800264e:	e057      	b.n	8002700 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM15)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a30      	ldr	r2, [pc, #192]	; (8002718 <HAL_TIM_Base_MspInit+0x1ac>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d136      	bne.n	80026c8 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800265a:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 800265c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002660:	4a29      	ldr	r2, [pc, #164]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002666:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 800266c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002678:	4b23      	ldr	r3, [pc, #140]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 800267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267e:	4a22      	ldr	r2, [pc, #136]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 8002680:	f043 0310 	orr.w	r3, r3, #16
 8002684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002688:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 800268a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002696:	2320      	movs	r3, #32
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80026a6:	2304      	movs	r3, #4
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ae:	4619      	mov	r1, r3
 80026b0:	481a      	ldr	r0, [pc, #104]	; (800271c <HAL_TIM_Base_MspInit+0x1b0>)
 80026b2:	f005 f823 	bl	80076fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	2074      	movs	r0, #116	; 0x74
 80026bc:	f002 f9ad 	bl	8004a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80026c0:	2074      	movs	r0, #116	; 0x74
 80026c2:	f002 f9c4 	bl	8004a4e <HAL_NVIC_EnableIRQ>
}
 80026c6:	e01b      	b.n	8002700 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM16)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <HAL_TIM_Base_MspInit+0x1b4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d116      	bne.n	8002700 <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 80026d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026d8:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 80026da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_TIM_Base_MspInit+0x19c>)
 80026e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80026f0:	2200      	movs	r2, #0
 80026f2:	2100      	movs	r1, #0
 80026f4:	2075      	movs	r0, #117	; 0x75
 80026f6:	f002 f990 	bl	8004a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80026fa:	2075      	movs	r0, #117	; 0x75
 80026fc:	f002 f9a7 	bl	8004a4e <HAL_NVIC_EnableIRQ>
}
 8002700:	bf00      	nop
 8002702:	3738      	adds	r7, #56	; 0x38
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	58024400 	.word	0x58024400
 800270c:	40000400 	.word	0x40000400
 8002710:	40000c00 	.word	0x40000c00
 8002714:	58020000 	.word	0x58020000
 8002718:	40014000 	.word	0x40014000
 800271c:	58021000 	.word	0x58021000
 8002720:	40014400 	.word	0x40014400

08002724 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d120      	bne.n	8002788 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <HAL_TIM_MspPostInit+0xb4>)
 8002748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274c:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <HAL_TIM_MspPostInit+0xb4>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_TIM_MspPostInit+0xb4>)
 8002758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8002764:	f248 030e 	movw	r3, #32782	; 0x800e
 8002768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002776:	2301      	movs	r3, #1
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	4816      	ldr	r0, [pc, #88]	; (80027dc <HAL_TIM_MspPostInit+0xb8>)
 8002782:	f004 ffbb 	bl	80076fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002786:	e023      	b.n	80027d0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_TIM_MspPostInit+0xbc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d11e      	bne.n	80027d0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_TIM_MspPostInit+0xb4>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002798:	4a0f      	ldr	r2, [pc, #60]	; (80027d8 <HAL_TIM_MspPostInit+0xb4>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_TIM_MspPostInit+0xb4>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027b0:	23c0      	movs	r3, #192	; 0xc0
 80027b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027c0:	2302      	movs	r3, #2
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	4619      	mov	r1, r3
 80027ca:	4806      	ldr	r0, [pc, #24]	; (80027e4 <HAL_TIM_MspPostInit+0xc0>)
 80027cc:	f004 ff96 	bl	80076fc <HAL_GPIO_Init>
}
 80027d0:	bf00      	nop
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	58024400 	.word	0x58024400
 80027dc:	58020000 	.word	0x58020000
 80027e0:	40000400 	.word	0x40000400
 80027e4:	58020800 	.word	0x58020800

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <NMI_Handler+0x4>

080027ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <MemManage_Handler+0x4>

080027fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <UsageFault_Handler+0x4>

08002806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002834:	f000 fa46 	bl	8002cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <DMA1_Stream0_IRQHandler+0x10>)
 8002842:	f003 fc49 	bl	80060d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	24000538 	.word	0x24000538

08002850 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <DMA1_Stream1_IRQHandler+0x10>)
 8002856:	f003 fc3f 	bl	80060d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	240005b0 	.word	0x240005b0

08002864 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002868:	4802      	ldr	r0, [pc, #8]	; (8002874 <DMA1_Stream2_IRQHandler+0x10>)
 800286a:	f003 fc35 	bl	80060d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2400025c 	.word	0x2400025c

08002878 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <ADC_IRQHandler+0x10>)
 800287e:	f000 fedf 	bl	8003640 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	240001f8 	.word	0x240001f8

0800288c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <TIM5_IRQHandler+0x10>)
 8002892:	f009 ff1f 	bl	800c6d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	240006c0 	.word	0x240006c0

080028a0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <UART5_IRQHandler+0x10>)
 80028a6:	f00b fb9f 	bl	800dfe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	24000410 	.word	0x24000410

080028b4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <UART7_IRQHandler+0x10>)
 80028ba:	f00b fb95 	bl	800dfe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	240004a4 	.word	0x240004a4

080028c8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <TIM15_IRQHandler+0x10>)
 80028ce:	f009 ff01 	bl	800c6d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2400070c 	.word	0x2400070c

080028dc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <TIM16_IRQHandler+0x10>)
 80028e2:	f009 fef7 	bl	800c6d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	24000758 	.word	0x24000758

080028f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return 1;
 80028f4:	2301      	movs	r3, #1
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_kill>:

int _kill(int pid, int sig)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800290a:	f00d ffbb 	bl	8010884 <__errno>
 800290e:	4603      	mov	r3, r0
 8002910:	2216      	movs	r2, #22
 8002912:	601a      	str	r2, [r3, #0]
  return -1;
 8002914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <_exit>:

void _exit (int status)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ffe7 	bl	8002900 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002932:	e7fe      	b.n	8002932 <_exit+0x12>

08002934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	e00a      	b.n	800295c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002946:	f3af 8000 	nop.w
 800294a:	4601      	mov	r1, r0
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	60ba      	str	r2, [r7, #8]
 8002952:	b2ca      	uxtb	r2, r1
 8002954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	dbf0      	blt.n	8002946 <_read+0x12>
  }

  return len;
 8002964:	687b      	ldr	r3, [r7, #4]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	e009      	b.n	8002994 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	60ba      	str	r2, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3301      	adds	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	dbf1      	blt.n	8002980 <_write+0x12>
  }
  return len;
 800299c:	687b      	ldr	r3, [r7, #4]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <_close>:

int _close(int file)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ce:	605a      	str	r2, [r3, #4]
  return 0;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_isatty>:

int _isatty(int file)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029e6:	2301      	movs	r3, #1
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <_sbrk+0x5c>)
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <_sbrk+0x60>)
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <_sbrk+0x64>)
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <_sbrk+0x68>)
 8002a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <_sbrk+0x64>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d207      	bcs.n	8002a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a40:	f00d ff20 	bl	8010884 <__errno>
 8002a44:	4603      	mov	r3, r0
 8002a46:	220c      	movs	r2, #12
 8002a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a4e:	e009      	b.n	8002a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <_sbrk+0x64>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <_sbrk+0x64>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <_sbrk+0x64>)
 8002a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	24080000 	.word	0x24080000
 8002a70:	00000400 	.word	0x00000400
 8002a74:	2400085c 	.word	0x2400085c
 8002a78:	240009b0 	.word	0x240009b0

08002a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a80:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <SystemInit+0xe4>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	4a36      	ldr	r2, [pc, #216]	; (8002b60 <SystemInit+0xe4>)
 8002a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a90:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <SystemInit+0xe8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	2b06      	cmp	r3, #6
 8002a9a:	d807      	bhi.n	8002aac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a9c:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <SystemInit+0xe8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f023 030f 	bic.w	r3, r3, #15
 8002aa4:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <SystemInit+0xe8>)
 8002aa6:	f043 0307 	orr.w	r3, r3, #7
 8002aaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002aac:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <SystemInit+0xec>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2d      	ldr	r2, [pc, #180]	; (8002b68 <SystemInit+0xec>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <SystemInit+0xec>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002abe:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <SystemInit+0xec>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4929      	ldr	r1, [pc, #164]	; (8002b68 <SystemInit+0xec>)
 8002ac4:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <SystemInit+0xf0>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002aca:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <SystemInit+0xe8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <SystemInit+0xe8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 030f 	bic.w	r3, r3, #15
 8002ade:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <SystemInit+0xe8>)
 8002ae0:	f043 0307 	orr.w	r3, r3, #7
 8002ae4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <SystemInit+0xec>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002aec:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <SystemInit+0xec>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <SystemInit+0xec>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <SystemInit+0xec>)
 8002afa:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <SystemInit+0xf4>)
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <SystemInit+0xec>)
 8002b00:	4a1c      	ldr	r2, [pc, #112]	; (8002b74 <SystemInit+0xf8>)
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <SystemInit+0xec>)
 8002b06:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <SystemInit+0xfc>)
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b0a:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <SystemInit+0xec>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b10:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <SystemInit+0xec>)
 8002b12:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <SystemInit+0xfc>)
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <SystemInit+0xec>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <SystemInit+0xec>)
 8002b1e:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <SystemInit+0xfc>)
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <SystemInit+0xec>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <SystemInit+0xec>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0e      	ldr	r2, [pc, #56]	; (8002b68 <SystemInit+0xec>)
 8002b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <SystemInit+0xec>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <SystemInit+0x100>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <SystemInit+0x104>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b46:	d202      	bcs.n	8002b4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <SystemInit+0x108>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <SystemInit+0x10c>)
 8002b50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b54:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00
 8002b64:	52002000 	.word	0x52002000
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b70:	02020200 	.word	0x02020200
 8002b74:	01ff0000 	.word	0x01ff0000
 8002b78:	01010280 	.word	0x01010280
 8002b7c:	5c001000 	.word	0x5c001000
 8002b80:	ffff0000 	.word	0xffff0000
 8002b84:	51008108 	.word	0x51008108
 8002b88:	52004000 	.word	0x52004000

08002b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b90:	f7ff ff74 	bl	8002a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b96:	490d      	ldr	r1, [pc, #52]	; (8002bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b98:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b9c:	e002      	b.n	8002ba4 <LoopCopyDataInit>

08002b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ba2:	3304      	adds	r3, #4

08002ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba8:	d3f9      	bcc.n	8002b9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bac:	4c0a      	ldr	r4, [pc, #40]	; (8002bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb0:	e001      	b.n	8002bb6 <LoopFillZerobss>

08002bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb4:	3204      	adds	r2, #4

08002bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb8:	d3fb      	bcc.n	8002bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bba:	f00d fe69 	bl	8010890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bbe:	f7fd fd65 	bl	800068c <main>
  bx  lr
 8002bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bc4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002bc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002bcc:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002bd0:	08012e4c 	.word	0x08012e4c
  ldr r2, =_sbss
 8002bd4:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8002bd8:	240009b0 	.word	0x240009b0

08002bdc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bdc:	e7fe      	b.n	8002bdc <ADC3_IRQHandler>
	...

08002be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be6:	2003      	movs	r0, #3
 8002be8:	f001 ff0c 	bl	8004a04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bec:	f006 f84a 	bl	8008c84 <HAL_RCC_GetSysClockFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_Init+0x68>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	4913      	ldr	r1, [pc, #76]	; (8002c4c <HAL_Init+0x6c>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
 8002c08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_Init+0x68>)
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <HAL_Init+0x6c>)
 8002c14:	5cd3      	ldrb	r3, [r2, r3]
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c20:	4a0b      	ldr	r2, [pc, #44]	; (8002c50 <HAL_Init+0x70>)
 8002c22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c24:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <HAL_Init+0x74>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c2a:	200f      	movs	r0, #15
 8002c2c:	f000 f814 	bl	8002c58 <HAL_InitTick>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e002      	b.n	8002c40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c3a:	f7ff f93d 	bl	8001eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	08012a8c 	.word	0x08012a8c
 8002c50:	24000008 	.word	0x24000008
 8002c54:	24000004 	.word	0x24000004

08002c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_InitTick+0x60>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e021      	b.n	8002cb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_InitTick+0x64>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_InitTick+0x60>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 fef1 	bl	8004a6a <HAL_SYSTICK_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00e      	b.n	8002cb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b0f      	cmp	r3, #15
 8002c96:	d80a      	bhi.n	8002cae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca0:	f001 febb 	bl	8004a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca4:	4a06      	ldr	r2, [pc, #24]	; (8002cc0 <HAL_InitTick+0x68>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	24000010 	.word	0x24000010
 8002cbc:	24000004 	.word	0x24000004
 8002cc0:	2400000c 	.word	0x2400000c

08002cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_IncTick+0x24>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_IncTick+0x24>)
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	24000010 	.word	0x24000010
 8002ce8:	24000860 	.word	0x24000860

08002cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <HAL_GetTick+0x14>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	24000860 	.word	0x24000860

08002d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d0c:	f7ff ffee 	bl	8002cec <HAL_GetTick>
 8002d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d1c:	d005      	beq.n	8002d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_Delay+0x44>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4413      	add	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d2a:	bf00      	nop
 8002d2c:	f7ff ffde 	bl	8002cec <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d8f7      	bhi.n	8002d2c <HAL_Delay+0x28>
  {
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	24000010 	.word	0x24000010

08002d4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_GetREVID+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0c1b      	lsrs	r3, r3, #16
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	5c001000 	.word	0x5c001000

08002d64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3360      	adds	r3, #96	; 0x60
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	611a      	str	r2, [r3, #16]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3360      	adds	r3, #96	; 0x60
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	601a      	str	r2, [r3, #0]
  }
}
 8002e68:	bf00      	nop
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b087      	sub	sp, #28
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3330      	adds	r3, #48	; 0x30
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	4413      	add	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	211f      	movs	r1, #31
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	401a      	ands	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	f003 011f 	and.w	r1, r3, #31
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ee6:	bf00      	nop
 8002ee8:	371c      	adds	r7, #28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f023 0203 	bic.w	r2, r3, #3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f24:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b087      	sub	sp, #28
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3314      	adds	r3, #20
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	0e5b      	lsrs	r3, r3, #25
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	4413      	add	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0d1b      	lsrs	r3, r3, #20
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	2107      	movs	r1, #7
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	401a      	ands	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	0d1b      	lsrs	r3, r3, #20
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	431a      	orrs	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f88:	bf00      	nop
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fac:	43db      	mvns	r3, r3
 8002fae:	401a      	ands	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0318 	and.w	r3, r3, #24
 8002fb6:	4908      	ldr	r1, [pc, #32]	; (8002fd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002fb8:	40d9      	lsrs	r1, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	000fffff 	.word	0x000fffff

08002fdc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003022:	4013      	ands	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6093      	str	r3, [r2, #8]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	5fffffc0 	.word	0x5fffffc0

08003038 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800304c:	d101      	bne.n	8003052 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <LL_ADC_EnableInternalRegulator+0x24>)
 800306e:	4013      	ands	r3, r2
 8003070:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	6fffffc0 	.word	0x6fffffc0

08003088 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800309c:	d101      	bne.n	80030a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <LL_ADC_Enable+0x24>)
 80030be:	4013      	ands	r3, r2
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	7fffffc0 	.word	0x7fffffc0

080030d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <LL_ADC_IsEnabled+0x18>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <LL_ADC_IsEnabled+0x1a>
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <LL_ADC_REG_StartConversion+0x24>)
 800310e:	4013      	ands	r3, r2
 8003110:	f043 0204 	orr.w	r2, r3, #4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	7fffffc0 	.word	0x7fffffc0

08003128 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d101      	bne.n	8003140 <LL_ADC_REG_IsConversionOngoing+0x18>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b08      	cmp	r3, #8
 8003160:	d101      	bne.n	8003166 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003180:	2300      	movs	r3, #0
 8003182:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e18f      	b.n	80034ae <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fe fea5 	bl	8001eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff3f 	bl	8003038 <LL_ADC_IsDeepPowerDownEnabled>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff25 	bl	8003014 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff5a 	bl	8003088 <LL_ADC_IsInternalRegulatorEnabled>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d114      	bne.n	8003204 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff3e 	bl	8003060 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e4:	4b87      	ldr	r3, [pc, #540]	; (8003404 <HAL_ADC_Init+0x290>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	4a87      	ldr	r2, [pc, #540]	; (8003408 <HAL_ADC_Init+0x294>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	3301      	adds	r3, #1
 80031f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031f6:	e002      	b.n	80031fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f9      	bne.n	80031f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff3d 	bl	8003088 <LL_ADC_IsInternalRegulatorEnabled>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10d      	bne.n	8003230 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	f043 0210 	orr.w	r2, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff77 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 800323a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 8129 	bne.w	800349c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 8125 	bne.w	800349c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800325a:	f043 0202 	orr.w	r2, r3, #2
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ff36 	bl	80030d8 <LL_ADC_IsEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d136      	bne.n	80032e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a65      	ldr	r2, [pc, #404]	; (800340c <HAL_ADC_Init+0x298>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_ADC_Init+0x112>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a63      	ldr	r2, [pc, #396]	; (8003410 <HAL_ADC_Init+0x29c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10e      	bne.n	80032a4 <HAL_ADC_Init+0x130>
 8003286:	4861      	ldr	r0, [pc, #388]	; (800340c <HAL_ADC_Init+0x298>)
 8003288:	f7ff ff26 	bl	80030d8 <LL_ADC_IsEnabled>
 800328c:	4604      	mov	r4, r0
 800328e:	4860      	ldr	r0, [pc, #384]	; (8003410 <HAL_ADC_Init+0x29c>)
 8003290:	f7ff ff22 	bl	80030d8 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	4323      	orrs	r3, r4
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e008      	b.n	80032b6 <HAL_ADC_Init+0x142>
 80032a4:	485b      	ldr	r0, [pc, #364]	; (8003414 <HAL_ADC_Init+0x2a0>)
 80032a6:	f7ff ff17 	bl	80030d8 <LL_ADC_IsEnabled>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a53      	ldr	r2, [pc, #332]	; (800340c <HAL_ADC_Init+0x298>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_ADC_Init+0x15a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a51      	ldr	r2, [pc, #324]	; (8003410 <HAL_ADC_Init+0x29c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_Init+0x15e>
 80032ce:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_ADC_Init+0x2a4>)
 80032d0:	e000      	b.n	80032d4 <HAL_ADC_Init+0x160>
 80032d2:	4a52      	ldr	r2, [pc, #328]	; (800341c <HAL_ADC_Init+0x2a8>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f7ff fd42 	bl	8002d64 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80032e0:	f7ff fd34 	bl	8002d4c <HAL_GetREVID>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d914      	bls.n	8003318 <HAL_ADC_Init+0x1a4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d110      	bne.n	8003318 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7d5b      	ldrb	r3, [r3, #21]
 80032fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003300:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003306:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7f1b      	ldrb	r3, [r3, #28]
 800330c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800330e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003310:	f043 030c 	orr.w	r3, r3, #12
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	e00d      	b.n	8003334 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	7d5b      	ldrb	r3, [r3, #21]
 800331c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003322:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003328:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7f1b      	ldrb	r3, [r3, #28]
 800332e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7f1b      	ldrb	r3, [r3, #28]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d106      	bne.n	800334a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	3b01      	subs	r3, #1
 8003342:	045b      	lsls	r3, r3, #17
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_ADC_Init+0x2ac>)
 800336e:	4013      	ands	r3, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	69b9      	ldr	r1, [r7, #24]
 8003376:	430b      	orrs	r3, r1
 8003378:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fed2 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 8003384:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fedf 	bl	800314e <LL_ADC_INJ_IsConversionOngoing>
 8003390:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d15f      	bne.n	8003458 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d15c      	bne.n	8003458 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7d1b      	ldrb	r3, [r3, #20]
 80033a2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <HAL_ADC_Init+0x2b0>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	69b9      	ldr	r1, [r7, #24]
 80033bc:	430b      	orrs	r3, r1
 80033be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d130      	bne.n	800342c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <HAL_ADC_Init+0x2b4>)
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033de:	3a01      	subs	r2, #1
 80033e0:	0411      	lsls	r1, r2, #16
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033f2:	430a      	orrs	r2, r1
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	611a      	str	r2, [r3, #16]
 8003400:	e01c      	b.n	800343c <HAL_ADC_Init+0x2c8>
 8003402:	bf00      	nop
 8003404:	24000004 	.word	0x24000004
 8003408:	053e2d63 	.word	0x053e2d63
 800340c:	40022000 	.word	0x40022000
 8003410:	40022100 	.word	0x40022100
 8003414:	58026000 	.word	0x58026000
 8003418:	40022300 	.word	0x40022300
 800341c:	58026300 	.word	0x58026300
 8003420:	fff0c003 	.word	0xfff0c003
 8003424:	ffffbffc 	.word	0xffffbffc
 8003428:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 ffc4 	bl	80043e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d10c      	bne.n	800347a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f023 010f 	bic.w	r1, r3, #15
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	1e5a      	subs	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
 8003478:	e007      	b.n	800348a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 020f 	bic.w	r2, r2, #15
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	f043 0201 	orr.w	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
 800349a:	e007      	b.n	80034ac <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f043 0210 	orr.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}
 80034b6:	bf00      	nop

080034b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a55      	ldr	r2, [pc, #340]	; (8003620 <HAL_ADC_Start_DMA+0x168>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_ADC_Start_DMA+0x20>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a54      	ldr	r2, [pc, #336]	; (8003624 <HAL_ADC_Start_DMA+0x16c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_ADC_Start_DMA+0x24>
 80034d8:	4b53      	ldr	r3, [pc, #332]	; (8003628 <HAL_ADC_Start_DMA+0x170>)
 80034da:	e000      	b.n	80034de <HAL_ADC_Start_DMA+0x26>
 80034dc:	4b53      	ldr	r3, [pc, #332]	; (800362c <HAL_ADC_Start_DMA+0x174>)
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fd7c 	bl	8002fdc <LL_ADC_GetMultimode>
 80034e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fe1c 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 808c 	bne.w	8003610 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_ADC_Start_DMA+0x4e>
 8003502:	2302      	movs	r3, #2
 8003504:	e087      	b.n	8003616 <HAL_ADC_Start_DMA+0x15e>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b05      	cmp	r3, #5
 8003518:	d002      	beq.n	8003520 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b09      	cmp	r3, #9
 800351e:	d170      	bne.n	8003602 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 fe3f 	bl	80041a4 <ADC_Enable>
 8003526:	4603      	mov	r3, r0
 8003528:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d163      	bne.n	80035f8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003534:	4b3e      	ldr	r3, [pc, #248]	; (8003630 <HAL_ADC_Start_DMA+0x178>)
 8003536:	4013      	ands	r3, r2
 8003538:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a37      	ldr	r2, [pc, #220]	; (8003624 <HAL_ADC_Start_DMA+0x16c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d002      	beq.n	8003550 <HAL_ADC_Start_DMA+0x98>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	e000      	b.n	8003552 <HAL_ADC_Start_DMA+0x9a>
 8003550:	4b33      	ldr	r3, [pc, #204]	; (8003620 <HAL_ADC_Start_DMA+0x168>)
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	4293      	cmp	r3, r2
 8003558:	d002      	beq.n	8003560 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d006      	beq.n	8003586 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	f023 0206 	bic.w	r2, r3, #6
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	659a      	str	r2, [r3, #88]	; 0x58
 8003584:	e002      	b.n	800358c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003590:	4a28      	ldr	r2, [pc, #160]	; (8003634 <HAL_ADC_Start_DMA+0x17c>)
 8003592:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003598:	4a27      	ldr	r2, [pc, #156]	; (8003638 <HAL_ADC_Start_DMA+0x180>)
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a0:	4a26      	ldr	r2, [pc, #152]	; (800363c <HAL_ADC_Start_DMA+0x184>)
 80035a2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	221c      	movs	r2, #28
 80035aa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0210 	orr.w	r2, r2, #16
 80035c2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f7ff fc8f 	bl	8002ef2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3340      	adds	r3, #64	; 0x40
 80035de:	4619      	mov	r1, r3
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f001 fdaa 	bl	800513c <HAL_DMA_Start_IT>
 80035e8:	4603      	mov	r3, r0
 80035ea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fd85 	bl	8003100 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80035f6:	e00d      	b.n	8003614 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003600:	e008      	b.n	8003614 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800360e:	e001      	b.n	8003614 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003610:	2302      	movs	r3, #2
 8003612:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40022000 	.word	0x40022000
 8003624:	40022100 	.word	0x40022100
 8003628:	40022300 	.word	0x40022300
 800362c:	58026300 	.word	0x58026300
 8003630:	fffff0fe 	.word	0xfffff0fe
 8003634:	080042b9 	.word	0x080042b9
 8003638:	08004391 	.word	0x08004391
 800363c:	080043ad 	.word	0x080043ad

08003640 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a87      	ldr	r2, [pc, #540]	; (8003880 <HAL_ADC_IRQHandler+0x240>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_ADC_IRQHandler+0x30>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a86      	ldr	r2, [pc, #536]	; (8003884 <HAL_ADC_IRQHandler+0x244>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_ADC_IRQHandler+0x34>
 8003670:	4b85      	ldr	r3, [pc, #532]	; (8003888 <HAL_ADC_IRQHandler+0x248>)
 8003672:	e000      	b.n	8003676 <HAL_ADC_IRQHandler+0x36>
 8003674:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_ADC_IRQHandler+0x24c>)
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fcb0 	bl	8002fdc <LL_ADC_GetMultimode>
 800367c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d017      	beq.n	80036b8 <HAL_ADC_IRQHandler+0x78>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fff2 	bl	8004694 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2202      	movs	r2, #2
 80036b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_ADC_IRQHandler+0x8c>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8083 	beq.w	80037de <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d07d      	beq.n	80037de <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fbb8 	bl	8002e74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d062      	beq.n	80037d0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a5d      	ldr	r2, [pc, #372]	; (8003884 <HAL_ADC_IRQHandler+0x244>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d002      	beq.n	800371a <HAL_ADC_IRQHandler+0xda>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	e000      	b.n	800371c <HAL_ADC_IRQHandler+0xdc>
 800371a:	4b59      	ldr	r3, [pc, #356]	; (8003880 <HAL_ADC_IRQHandler+0x240>)
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	4293      	cmp	r3, r2
 8003722:	d008      	beq.n	8003736 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b05      	cmp	r3, #5
 800372e:	d002      	beq.n	8003736 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b09      	cmp	r3, #9
 8003734:	d104      	bne.n	8003740 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	623b      	str	r3, [r7, #32]
 800373e:	e00c      	b.n	800375a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a4f      	ldr	r2, [pc, #316]	; (8003884 <HAL_ADC_IRQHandler+0x244>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d002      	beq.n	8003750 <HAL_ADC_IRQHandler+0x110>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	e000      	b.n	8003752 <HAL_ADC_IRQHandler+0x112>
 8003750:	4b4b      	ldr	r3, [pc, #300]	; (8003880 <HAL_ADC_IRQHandler+0x240>)
 8003752:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d135      	bne.n	80037d0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	d12e      	bne.n	80037d0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fcd6 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d11a      	bne.n	80037b8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 020c 	bic.w	r2, r2, #12
 8003790:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d112      	bne.n	80037d0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	f043 0201 	orr.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
 80037b6:	e00b      	b.n	80037d0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	f043 0210 	orr.w	r2, r3, #16
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f96f 	bl	8003ab4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	220c      	movs	r2, #12
 80037dc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x1b2>
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10b      	bne.n	800380a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80a0 	beq.w	800393e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 809a 	beq.w	800393e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d105      	bne.n	8003822 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fb76 	bl	8002f18 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800382c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fb1e 	bl	8002e74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003838:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a11      	ldr	r2, [pc, #68]	; (8003884 <HAL_ADC_IRQHandler+0x244>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d002      	beq.n	800384a <HAL_ADC_IRQHandler+0x20a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	e000      	b.n	800384c <HAL_ADC_IRQHandler+0x20c>
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <HAL_ADC_IRQHandler+0x240>)
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	4293      	cmp	r3, r2
 8003852:	d008      	beq.n	8003866 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b06      	cmp	r3, #6
 800385e:	d002      	beq.n	8003866 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b07      	cmp	r3, #7
 8003864:	d104      	bne.n	8003870 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	623b      	str	r3, [r7, #32]
 800386e:	e014      	b.n	800389a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a03      	ldr	r2, [pc, #12]	; (8003884 <HAL_ADC_IRQHandler+0x244>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00a      	beq.n	8003890 <HAL_ADC_IRQHandler+0x250>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	e008      	b.n	8003892 <HAL_ADC_IRQHandler+0x252>
 8003880:	40022000 	.word	0x40022000
 8003884:	40022100 	.word	0x40022100
 8003888:	40022300 	.word	0x40022300
 800388c:	58026300 	.word	0x58026300
 8003890:	4b84      	ldr	r3, [pc, #528]	; (8003aa4 <HAL_ADC_IRQHandler+0x464>)
 8003892:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d047      	beq.n	8003930 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_ADC_IRQHandler+0x27a>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d03f      	beq.n	8003930 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d13a      	bne.n	8003930 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d133      	bne.n	8003930 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d12e      	bne.n	8003930 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fc39 	bl	800314e <LL_ADC_INJ_IsConversionOngoing>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11a      	bne.n	8003918 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038f0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d112      	bne.n	8003930 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
 8003916:	e00b      	b.n	8003930 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	f043 0210 	orr.w	r2, r3, #16
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	f043 0201 	orr.w	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fe87 	bl	8004644 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2260      	movs	r2, #96	; 0x60
 800393c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	d011      	beq.n	800396c <HAL_ADC_IRQHandler+0x32c>
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00c      	beq.n	800396c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8bc 	bl	8003adc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d012      	beq.n	800399c <HAL_ADC_IRQHandler+0x35c>
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fe6d 	bl	800466c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800399a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d012      	beq.n	80039cc <HAL_ADC_IRQHandler+0x38c>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fe5f 	bl	8004680 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d043      	beq.n	8003a5e <HAL_ADC_IRQHandler+0x41e>
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d03e      	beq.n	8003a5e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80039e8:	2301      	movs	r3, #1
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	e021      	b.n	8003a32 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a2a      	ldr	r2, [pc, #168]	; (8003aa4 <HAL_ADC_IRQHandler+0x464>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_ADC_IRQHandler+0x3c8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <HAL_ADC_IRQHandler+0x468>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d101      	bne.n	8003a0c <HAL_ADC_IRQHandler+0x3cc>
 8003a08:	4b28      	ldr	r3, [pc, #160]	; (8003aac <HAL_ADC_IRQHandler+0x46c>)
 8003a0a:	e000      	b.n	8003a0e <HAL_ADC_IRQHandler+0x3ce>
 8003a0c:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <HAL_ADC_IRQHandler+0x470>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff faf2 	bl	8002ff8 <LL_ADC_GetMultiDMATransfer>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1e:	e008      	b.n	8003a32 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d10e      	bne.n	8003a56 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	f043 0202 	orr.w	r2, r3, #2
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f84d 	bl	8003af0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2210      	movs	r2, #16
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d018      	beq.n	8003a9a <HAL_ADC_IRQHandler+0x45a>
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d013      	beq.n	8003a9a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	f043 0208 	orr.w	r2, r3, #8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a92:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fddf 	bl	8004658 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003a9a:	bf00      	nop
 8003a9c:	3728      	adds	r7, #40	; 0x28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40022000 	.word	0x40022000
 8003aa8:	40022100 	.word	0x40022100
 8003aac:	40022300 	.word	0x40022300
 8003ab0:	58026300 	.word	0x58026300

08003ab4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b0a1      	sub	sp, #132	; 0x84
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a9d      	ldr	r2, [pc, #628]	; (8003d94 <HAL_ADC_ConfigChannel+0x290>)
 8003b1e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x2a>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e321      	b.n	8004172 <HAL_ADC_ConfigChannel+0x66e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff faf4 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 8306 	bne.w	8004154 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d108      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x62>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	0e9b      	lsrs	r3, r3, #26
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	2201      	movs	r2, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	e016      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x90>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b6e:	fa93 f3a3 	rbit	r3, r3
 8003b72:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b76:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003b7e:	2320      	movs	r3, #32
 8003b80:	e003      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b84:	fab3 f383 	clz	r3, r3
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2201      	movs	r2, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	69d1      	ldr	r1, [r2, #28]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f7ff f973 	bl	8002e9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fab5 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 8003bbe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fac2 	bl	800314e <LL_ADC_INJ_IsConversionOngoing>
 8003bca:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 80b3 	bne.w	8003d3a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f040 80af 	bne.w	8003d3a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	461a      	mov	r2, r3
 8003bea:	f7ff f9a8 	bl	8002f3e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bee:	4b6a      	ldr	r3, [pc, #424]	; (8003d98 <HAL_ADC_ConfigChannel+0x294>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bfa:	d10b      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x110>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	e01d      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x14c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x136>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	e00a      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x14c>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	089b      	lsrs	r3, r3, #2
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d027      	beq.n	8003caa <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6919      	ldr	r1, [r3, #16]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c68:	f7ff f8b0 	bl	8002dcc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	6919      	ldr	r1, [r3, #16]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	7e5b      	ldrb	r3, [r3, #25]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d102      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x17e>
 8003c7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c80:	e000      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x180>
 8003c82:	2300      	movs	r3, #0
 8003c84:	461a      	mov	r2, r3
 8003c86:	f7ff f8da 	bl	8002e3e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6919      	ldr	r1, [r3, #16]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	7e1b      	ldrb	r3, [r3, #24]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d102      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x19c>
 8003c9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c9e:	e000      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x19e>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f7ff f8b2 	bl	8002e0c <LL_ADC_SetDataRightShift>
 8003ca8:	e047      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	069b      	lsls	r3, r3, #26
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d107      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ccc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	069b      	lsls	r3, r3, #26
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d107      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cf0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	069b      	lsls	r3, r3, #26
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d107      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d14:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	069b      	lsls	r3, r3, #26
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d107      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d38:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff f9ca 	bl	80030d8 <LL_ADC_IsEnabled>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 820d 	bne.w	8004166 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f7ff f91b 	bl	8002f94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	4a0c      	ldr	r2, [pc, #48]	; (8003d94 <HAL_ADC_ConfigChannel+0x290>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	f040 8133 	bne.w	8003fd0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d110      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x298>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	0e9b      	lsrs	r3, r3, #26
 8003d80:	3301      	adds	r3, #1
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2b09      	cmp	r3, #9
 8003d88:	bf94      	ite	ls
 8003d8a:	2301      	movls	r3, #1
 8003d8c:	2300      	movhi	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	e01e      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x2cc>
 8003d92:	bf00      	nop
 8003d94:	47ff0000 	.word	0x47ff0000
 8003d98:	5c001000 	.word	0x5c001000
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003db4:	2320      	movs	r3, #32
 8003db6:	e003      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dba:	fab3 f383 	clz	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2b09      	cmp	r3, #9
 8003dc8:	bf94      	ite	ls
 8003dca:	2301      	movls	r3, #1
 8003dcc:	2300      	movhi	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d079      	beq.n	8003ec8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x2ec>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	0e9b      	lsrs	r3, r3, #26
 8003de6:	3301      	adds	r3, #1
 8003de8:	069b      	lsls	r3, r3, #26
 8003dea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dee:	e015      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x318>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df8:	fa93 f3a3 	rbit	r3, r3
 8003dfc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e00:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003e08:	2320      	movs	r3, #32
 8003e0a:	e003      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	3301      	adds	r3, #1
 8003e16:	069b      	lsls	r3, r3, #26
 8003e18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x338>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0e9b      	lsrs	r3, r3, #26
 8003e2e:	3301      	adds	r3, #1
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2101      	movs	r1, #1
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	e017      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x368>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e44:	fa93 f3a3 	rbit	r3, r3
 8003e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003e54:	2320      	movs	r3, #32
 8003e56:	e003      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	3301      	adds	r3, #1
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	2101      	movs	r1, #1
 8003e68:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6c:	ea42 0103 	orr.w	r1, r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x38e>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	0e9b      	lsrs	r3, r3, #26
 8003e82:	3301      	adds	r3, #1
 8003e84:	f003 021f 	and.w	r2, r3, #31
 8003e88:	4613      	mov	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	051b      	lsls	r3, r3, #20
 8003e90:	e018      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x3c0>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003eaa:	2320      	movs	r3, #32
 8003eac:	e003      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f003 021f 	and.w	r2, r3, #31
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	e07e      	b.n	8003fc6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d107      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x3e0>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	0e9b      	lsrs	r3, r3, #26
 8003eda:	3301      	adds	r3, #1
 8003edc:	069b      	lsls	r3, r3, #26
 8003ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ee2:	e015      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x40c>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003efc:	2320      	movs	r3, #32
 8003efe:	e003      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	069b      	lsls	r3, r3, #26
 8003f0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x42c>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	0e9b      	lsrs	r3, r3, #26
 8003f22:	3301      	adds	r3, #1
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	2101      	movs	r1, #1
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	e017      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x45c>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	61bb      	str	r3, [r7, #24]
  return result;
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003f48:	2320      	movs	r3, #32
 8003f4a:	e003      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	fab3 f383 	clz	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	3301      	adds	r3, #1
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	ea42 0103 	orr.w	r1, r2, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10d      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x488>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	0e9b      	lsrs	r3, r3, #26
 8003f76:	3301      	adds	r3, #1
 8003f78:	f003 021f 	and.w	r2, r3, #31
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	3b1e      	subs	r3, #30
 8003f84:	051b      	lsls	r3, r3, #20
 8003f86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	e01b      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x4c0>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	fa93 f3a3 	rbit	r3, r3
 8003f98:	60fb      	str	r3, [r7, #12]
  return result;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003fa4:	2320      	movs	r3, #32
 8003fa6:	e003      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	f003 021f 	and.w	r2, r3, #31
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	3b1e      	subs	r3, #30
 8003fbe:	051b      	lsls	r3, r3, #20
 8003fc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	6892      	ldr	r2, [r2, #8]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f7fe ffb7 	bl	8002f3e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f280 80c6 	bge.w	8004166 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a67      	ldr	r2, [pc, #412]	; (800417c <HAL_ADC_ConfigChannel+0x678>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_ADC_ConfigChannel+0x4ea>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a65      	ldr	r2, [pc, #404]	; (8004180 <HAL_ADC_ConfigChannel+0x67c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x4ee>
 8003fee:	4b65      	ldr	r3, [pc, #404]	; (8004184 <HAL_ADC_ConfigChannel+0x680>)
 8003ff0:	e000      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x4f0>
 8003ff2:	4b65      	ldr	r3, [pc, #404]	; (8004188 <HAL_ADC_ConfigChannel+0x684>)
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe fedb 	bl	8002db0 <LL_ADC_GetCommonPathInternalCh>
 8003ffa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a5e      	ldr	r2, [pc, #376]	; (800417c <HAL_ADC_ConfigChannel+0x678>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_ADC_ConfigChannel+0x50c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5d      	ldr	r2, [pc, #372]	; (8004180 <HAL_ADC_ConfigChannel+0x67c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d10e      	bne.n	800402e <HAL_ADC_ConfigChannel+0x52a>
 8004010:	485a      	ldr	r0, [pc, #360]	; (800417c <HAL_ADC_ConfigChannel+0x678>)
 8004012:	f7ff f861 	bl	80030d8 <LL_ADC_IsEnabled>
 8004016:	4604      	mov	r4, r0
 8004018:	4859      	ldr	r0, [pc, #356]	; (8004180 <HAL_ADC_ConfigChannel+0x67c>)
 800401a:	f7ff f85d 	bl	80030d8 <LL_ADC_IsEnabled>
 800401e:	4603      	mov	r3, r0
 8004020:	4323      	orrs	r3, r4
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e008      	b.n	8004040 <HAL_ADC_ConfigChannel+0x53c>
 800402e:	4857      	ldr	r0, [pc, #348]	; (800418c <HAL_ADC_ConfigChannel+0x688>)
 8004030:	f7ff f852 	bl	80030d8 <LL_ADC_IsEnabled>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	bf0c      	ite	eq
 800403a:	2301      	moveq	r3, #1
 800403c:	2300      	movne	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d07d      	beq.n	8004140 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a51      	ldr	r2, [pc, #324]	; (8004190 <HAL_ADC_ConfigChannel+0x68c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d130      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x5ac>
 800404e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d12b      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a4b      	ldr	r2, [pc, #300]	; (800418c <HAL_ADC_ConfigChannel+0x688>)
 800405e:	4293      	cmp	r3, r2
 8004060:	f040 8081 	bne.w	8004166 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a44      	ldr	r2, [pc, #272]	; (800417c <HAL_ADC_ConfigChannel+0x678>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_ADC_ConfigChannel+0x574>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a43      	ldr	r2, [pc, #268]	; (8004180 <HAL_ADC_ConfigChannel+0x67c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_ADC_ConfigChannel+0x578>
 8004078:	4a42      	ldr	r2, [pc, #264]	; (8004184 <HAL_ADC_ConfigChannel+0x680>)
 800407a:	e000      	b.n	800407e <HAL_ADC_ConfigChannel+0x57a>
 800407c:	4a42      	ldr	r2, [pc, #264]	; (8004188 <HAL_ADC_ConfigChannel+0x684>)
 800407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f7fe fe7f 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800408c:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_ADC_ConfigChannel+0x690>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	099b      	lsrs	r3, r3, #6
 8004092:	4a41      	ldr	r2, [pc, #260]	; (8004198 <HAL_ADC_ConfigChannel+0x694>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	099b      	lsrs	r3, r3, #6
 800409a:	3301      	adds	r3, #1
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80040a0:	e002      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f9      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040ae:	e05a      	b.n	8004166 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a39      	ldr	r2, [pc, #228]	; (800419c <HAL_ADC_ConfigChannel+0x698>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d11e      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x5f4>
 80040ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d119      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a30      	ldr	r2, [pc, #192]	; (800418c <HAL_ADC_ConfigChannel+0x688>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d14b      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2a      	ldr	r2, [pc, #168]	; (800417c <HAL_ADC_ConfigChannel+0x678>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_ADC_ConfigChannel+0x5de>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a28      	ldr	r2, [pc, #160]	; (8004180 <HAL_ADC_ConfigChannel+0x67c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x5e2>
 80040e2:	4a28      	ldr	r2, [pc, #160]	; (8004184 <HAL_ADC_ConfigChannel+0x680>)
 80040e4:	e000      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x5e4>
 80040e6:	4a28      	ldr	r2, [pc, #160]	; (8004188 <HAL_ADC_ConfigChannel+0x684>)
 80040e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ee:	4619      	mov	r1, r3
 80040f0:	4610      	mov	r0, r2
 80040f2:	f7fe fe4a 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040f6:	e036      	b.n	8004166 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a28      	ldr	r2, [pc, #160]	; (80041a0 <HAL_ADC_ConfigChannel+0x69c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d131      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x662>
 8004102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d12c      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1e      	ldr	r2, [pc, #120]	; (800418c <HAL_ADC_ConfigChannel+0x688>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d127      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a18      	ldr	r2, [pc, #96]	; (800417c <HAL_ADC_ConfigChannel+0x678>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_ADC_ConfigChannel+0x626>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a16      	ldr	r2, [pc, #88]	; (8004180 <HAL_ADC_ConfigChannel+0x67c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <HAL_ADC_ConfigChannel+0x62a>
 800412a:	4a16      	ldr	r2, [pc, #88]	; (8004184 <HAL_ADC_ConfigChannel+0x680>)
 800412c:	e000      	b.n	8004130 <HAL_ADC_ConfigChannel+0x62c>
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_ADC_ConfigChannel+0x684>)
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004136:	4619      	mov	r1, r3
 8004138:	4610      	mov	r0, r2
 800413a:	f7fe fe26 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
 800413e:	e012      	b.n	8004166 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	f043 0220 	orr.w	r2, r3, #32
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004152:	e008      	b.n	8004166 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f043 0220 	orr.w	r2, r3, #32
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800416e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004172:	4618      	mov	r0, r3
 8004174:	3784      	adds	r7, #132	; 0x84
 8004176:	46bd      	mov	sp, r7
 8004178:	bd90      	pop	{r4, r7, pc}
 800417a:	bf00      	nop
 800417c:	40022000 	.word	0x40022000
 8004180:	40022100 	.word	0x40022100
 8004184:	40022300 	.word	0x40022300
 8004188:	58026300 	.word	0x58026300
 800418c:	58026000 	.word	0x58026000
 8004190:	cb840000 	.word	0xcb840000
 8004194:	24000004 	.word	0x24000004
 8004198:	053e2d63 	.word	0x053e2d63
 800419c:	c7520000 	.word	0xc7520000
 80041a0:	cfb80000 	.word	0xcfb80000

080041a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe ff91 	bl	80030d8 <LL_ADC_IsEnabled>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d16e      	bne.n	800429a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	4b38      	ldr	r3, [pc, #224]	; (80042a4 <ADC_Enable+0x100>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	f043 0210 	orr.w	r2, r3, #16
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	f043 0201 	orr.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e05a      	b.n	800429c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe ff60 	bl	80030b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80041f0:	f7fe fd7c 	bl	8002cec <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2b      	ldr	r2, [pc, #172]	; (80042a8 <ADC_Enable+0x104>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <ADC_Enable+0x66>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a29      	ldr	r2, [pc, #164]	; (80042ac <ADC_Enable+0x108>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <ADC_Enable+0x6a>
 800420a:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <ADC_Enable+0x10c>)
 800420c:	e000      	b.n	8004210 <ADC_Enable+0x6c>
 800420e:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <ADC_Enable+0x110>)
 8004210:	4618      	mov	r0, r3
 8004212:	f7fe fee3 	bl	8002fdc <LL_ADC_GetMultimode>
 8004216:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a23      	ldr	r2, [pc, #140]	; (80042ac <ADC_Enable+0x108>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d002      	beq.n	8004228 <ADC_Enable+0x84>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	e000      	b.n	800422a <ADC_Enable+0x86>
 8004228:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <ADC_Enable+0x104>)
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	4293      	cmp	r3, r2
 8004230:	d02c      	beq.n	800428c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d130      	bne.n	800429a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004238:	e028      	b.n	800428c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe ff4a 	bl	80030d8 <LL_ADC_IsEnabled>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe ff2e 	bl	80030b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004254:	f7fe fd4a 	bl	8002cec <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d914      	bls.n	800428c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d00d      	beq.n	800428c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	f043 0210 	orr.w	r2, r3, #16
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	f043 0201 	orr.w	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e007      	b.n	800429c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b01      	cmp	r3, #1
 8004298:	d1cf      	bne.n	800423a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	8000003f 	.word	0x8000003f
 80042a8:	40022000 	.word	0x40022000
 80042ac:	40022100 	.word	0x40022100
 80042b0:	40022300 	.word	0x40022300
 80042b4:	58026300 	.word	0x58026300

080042b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d14b      	bne.n	800436a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d021      	beq.n	8004330 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fdbf 	bl	8002e74 <LL_ADC_REG_IsTriggerSourceSWStart>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d032      	beq.n	8004362 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d12b      	bne.n	8004362 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d11f      	bne.n	8004362 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	f043 0201 	orr.w	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
 800432e:	e018      	b.n	8004362 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d111      	bne.n	8004362 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d105      	bne.n	8004362 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f043 0201 	orr.w	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff fba6 	bl	8003ab4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004368:	e00e      	b.n	8004388 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7ff fbba 	bl	8003af0 <HAL_ADC_ErrorCallback>
}
 800437c:	e004      	b.n	8004388 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f7ff fb92 	bl	8003ac8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f043 0204 	orr.w	r2, r3, #4
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff fb8c 	bl	8003af0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a7a      	ldr	r2, [pc, #488]	; (80045d8 <ADC_ConfigureBoostMode+0x1f8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <ADC_ConfigureBoostMode+0x1c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a79      	ldr	r2, [pc, #484]	; (80045dc <ADC_ConfigureBoostMode+0x1fc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d109      	bne.n	8004410 <ADC_ConfigureBoostMode+0x30>
 80043fc:	4b78      	ldr	r3, [pc, #480]	; (80045e0 <ADC_ConfigureBoostMode+0x200>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e008      	b.n	8004422 <ADC_ConfigureBoostMode+0x42>
 8004410:	4b74      	ldr	r3, [pc, #464]	; (80045e4 <ADC_ConfigureBoostMode+0x204>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01c      	beq.n	8004460 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004426:	f004 fda7 	bl	8008f78 <HAL_RCC_GetHCLKFreq>
 800442a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004434:	d010      	beq.n	8004458 <ADC_ConfigureBoostMode+0x78>
 8004436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800443a:	d873      	bhi.n	8004524 <ADC_ConfigureBoostMode+0x144>
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004440:	d002      	beq.n	8004448 <ADC_ConfigureBoostMode+0x68>
 8004442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004446:	d16d      	bne.n	8004524 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	60fb      	str	r3, [r7, #12]
        break;
 8004456:	e068      	b.n	800452a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	089b      	lsrs	r3, r3, #2
 800445c:	60fb      	str	r3, [r7, #12]
        break;
 800445e:	e064      	b.n	800452a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004460:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004464:	f04f 0100 	mov.w	r1, #0
 8004468:	f005 ffec 	bl	800a444 <HAL_RCCEx_GetPeriphCLKFreq>
 800446c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004476:	d051      	beq.n	800451c <ADC_ConfigureBoostMode+0x13c>
 8004478:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800447c:	d854      	bhi.n	8004528 <ADC_ConfigureBoostMode+0x148>
 800447e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004482:	d047      	beq.n	8004514 <ADC_ConfigureBoostMode+0x134>
 8004484:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004488:	d84e      	bhi.n	8004528 <ADC_ConfigureBoostMode+0x148>
 800448a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800448e:	d03d      	beq.n	800450c <ADC_ConfigureBoostMode+0x12c>
 8004490:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004494:	d848      	bhi.n	8004528 <ADC_ConfigureBoostMode+0x148>
 8004496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800449a:	d033      	beq.n	8004504 <ADC_ConfigureBoostMode+0x124>
 800449c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044a0:	d842      	bhi.n	8004528 <ADC_ConfigureBoostMode+0x148>
 80044a2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044a6:	d029      	beq.n	80044fc <ADC_ConfigureBoostMode+0x11c>
 80044a8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044ac:	d83c      	bhi.n	8004528 <ADC_ConfigureBoostMode+0x148>
 80044ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044b2:	d01a      	beq.n	80044ea <ADC_ConfigureBoostMode+0x10a>
 80044b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044b8:	d836      	bhi.n	8004528 <ADC_ConfigureBoostMode+0x148>
 80044ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044be:	d014      	beq.n	80044ea <ADC_ConfigureBoostMode+0x10a>
 80044c0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044c4:	d830      	bhi.n	8004528 <ADC_ConfigureBoostMode+0x148>
 80044c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ca:	d00e      	beq.n	80044ea <ADC_ConfigureBoostMode+0x10a>
 80044cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044d0:	d82a      	bhi.n	8004528 <ADC_ConfigureBoostMode+0x148>
 80044d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044d6:	d008      	beq.n	80044ea <ADC_ConfigureBoostMode+0x10a>
 80044d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044dc:	d824      	bhi.n	8004528 <ADC_ConfigureBoostMode+0x148>
 80044de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044e2:	d002      	beq.n	80044ea <ADC_ConfigureBoostMode+0x10a>
 80044e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044e8:	d11e      	bne.n	8004528 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	0c9b      	lsrs	r3, r3, #18
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	60fb      	str	r3, [r7, #12]
        break;
 80044fa:	e016      	b.n	800452a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	60fb      	str	r3, [r7, #12]
        break;
 8004502:	e012      	b.n	800452a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	60fb      	str	r3, [r7, #12]
        break;
 800450a:	e00e      	b.n	800452a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	60fb      	str	r3, [r7, #12]
        break;
 8004512:	e00a      	b.n	800452a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	09db      	lsrs	r3, r3, #7
 8004518:	60fb      	str	r3, [r7, #12]
        break;
 800451a:	e006      	b.n	800452a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	0a1b      	lsrs	r3, r3, #8
 8004520:	60fb      	str	r3, [r7, #12]
        break;
 8004522:	e002      	b.n	800452a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004524:	bf00      	nop
 8004526:	e000      	b.n	800452a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004528:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800452a:	f7fe fc0f 	bl	8002d4c <HAL_GetREVID>
 800452e:	4603      	mov	r3, r0
 8004530:	f241 0203 	movw	r2, #4099	; 0x1003
 8004534:	4293      	cmp	r3, r2
 8004536:	d815      	bhi.n	8004564 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a2b      	ldr	r2, [pc, #172]	; (80045e8 <ADC_ConfigureBoostMode+0x208>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d908      	bls.n	8004552 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800454e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004550:	e03e      	b.n	80045d0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004560:	609a      	str	r2, [r3, #8]
}
 8004562:	e035      	b.n	80045d0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <ADC_ConfigureBoostMode+0x20c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d808      	bhi.n	8004584 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004580:	609a      	str	r2, [r3, #8]
}
 8004582:	e025      	b.n	80045d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <ADC_ConfigureBoostMode+0x210>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d80a      	bhi.n	80045a2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800459e:	609a      	str	r2, [r3, #8]
}
 80045a0:	e016      	b.n	80045d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <ADC_ConfigureBoostMode+0x214>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d80a      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045bc:	609a      	str	r2, [r3, #8]
}
 80045be:	e007      	b.n	80045d0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80045ce:	609a      	str	r2, [r3, #8]
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40022000 	.word	0x40022000
 80045dc:	40022100 	.word	0x40022100
 80045e0:	40022300 	.word	0x40022300
 80045e4:	58026300 	.word	0x58026300
 80045e8:	01312d00 	.word	0x01312d00
 80045ec:	005f5e10 	.word	0x005f5e10
 80045f0:	00bebc20 	.word	0x00bebc20
 80045f4:	017d7840 	.word	0x017d7840

080045f8 <LL_ADC_IsEnabled>:
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <LL_ADC_IsEnabled+0x18>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <LL_ADC_IsEnabled+0x1a>
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <LL_ADC_REG_IsConversionOngoing>:
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b04      	cmp	r3, #4
 8004630:	d101      	bne.n	8004636 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b09f      	sub	sp, #124	; 0x7c
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e0be      	b.n	8004844 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80046ce:	2300      	movs	r3, #0
 80046d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80046d2:	2300      	movs	r3, #0
 80046d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a5c      	ldr	r2, [pc, #368]	; (800484c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d102      	bne.n	80046e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80046e0:	4b5b      	ldr	r3, [pc, #364]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	e001      	b.n	80046ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e09d      	b.n	8004844 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff ff87 	bl	800461e <LL_ADC_REG_IsConversionOngoing>
 8004710:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff ff81 	bl	800461e <LL_ADC_REG_IsConversionOngoing>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d17f      	bne.n	8004822 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004724:	2b00      	cmp	r3, #0
 8004726:	d17c      	bne.n	8004822 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a47      	ldr	r2, [pc, #284]	; (800484c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a46      	ldr	r2, [pc, #280]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d101      	bne.n	8004740 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800473c:	4b45      	ldr	r3, [pc, #276]	; (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800473e:	e000      	b.n	8004742 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004740:	4b45      	ldr	r3, [pc, #276]	; (8004858 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004742:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d039      	beq.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800474c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	431a      	orrs	r2, r3
 800475a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3a      	ldr	r2, [pc, #232]	; (800484c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a38      	ldr	r2, [pc, #224]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d10e      	bne.n	8004790 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004772:	4836      	ldr	r0, [pc, #216]	; (800484c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004774:	f7ff ff40 	bl	80045f8 <LL_ADC_IsEnabled>
 8004778:	4604      	mov	r4, r0
 800477a:	4835      	ldr	r0, [pc, #212]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800477c:	f7ff ff3c 	bl	80045f8 <LL_ADC_IsEnabled>
 8004780:	4603      	mov	r3, r0
 8004782:	4323      	orrs	r3, r4
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e008      	b.n	80047a2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004790:	4832      	ldr	r0, [pc, #200]	; (800485c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004792:	f7ff ff31 	bl	80045f8 <LL_ADC_IsEnabled>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d047      	beq.n	8004836 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	4b2d      	ldr	r3, [pc, #180]	; (8004860 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	6811      	ldr	r1, [r2, #0]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	6892      	ldr	r2, [r2, #8]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	431a      	orrs	r2, r3
 80047ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047bc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047be:	e03a      	b.n	8004836 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80047c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1e      	ldr	r2, [pc, #120]	; (800484c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d10e      	bne.n	80047fe <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80047e0:	481a      	ldr	r0, [pc, #104]	; (800484c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047e2:	f7ff ff09 	bl	80045f8 <LL_ADC_IsEnabled>
 80047e6:	4604      	mov	r4, r0
 80047e8:	4819      	ldr	r0, [pc, #100]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047ea:	f7ff ff05 	bl	80045f8 <LL_ADC_IsEnabled>
 80047ee:	4603      	mov	r3, r0
 80047f0:	4323      	orrs	r3, r4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bf0c      	ite	eq
 80047f6:	2301      	moveq	r3, #1
 80047f8:	2300      	movne	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	e008      	b.n	8004810 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80047fe:	4817      	ldr	r0, [pc, #92]	; (800485c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004800:	f7ff fefa 	bl	80045f8 <LL_ADC_IsEnabled>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	bf0c      	ite	eq
 800480a:	2301      	moveq	r3, #1
 800480c:	2300      	movne	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d010      	beq.n	8004836 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800481a:	4013      	ands	r3, r2
 800481c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800481e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004820:	e009      	b.n	8004836 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	f043 0220 	orr.w	r2, r3, #32
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004834:	e000      	b.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004836:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004840:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004844:	4618      	mov	r0, r3
 8004846:	377c      	adds	r7, #124	; 0x7c
 8004848:	46bd      	mov	sp, r7
 800484a:	bd90      	pop	{r4, r7, pc}
 800484c:	40022000 	.word	0x40022000
 8004850:	40022100 	.word	0x40022100
 8004854:	40022300 	.word	0x40022300
 8004858:	58026300 	.word	0x58026300
 800485c:	58026000 	.word	0x58026000
 8004860:	fffff0e0 	.word	0xfffff0e0

08004864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004880:	4013      	ands	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <__NVIC_SetPriorityGrouping+0x44>)
 800488e:	4313      	orrs	r3, r2
 8004890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004892:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	60d3      	str	r3, [r2, #12]
}
 8004898:	bf00      	nop
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	e000ed00 	.word	0xe000ed00
 80048a8:	05fa0000 	.word	0x05fa0000

080048ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <__NVIC_GetPriorityGrouping+0x18>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	0a1b      	lsrs	r3, r3, #8
 80048b6:	f003 0307 	and.w	r3, r3, #7
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	e000ed00 	.word	0xe000ed00

080048c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	db0b      	blt.n	80048f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	f003 021f 	and.w	r2, r3, #31
 80048e0:	4907      	ldr	r1, [pc, #28]	; (8004900 <__NVIC_EnableIRQ+0x38>)
 80048e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2001      	movs	r0, #1
 80048ea:	fa00 f202 	lsl.w	r2, r0, r2
 80048ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	e000e100 	.word	0xe000e100

08004904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	6039      	str	r1, [r7, #0]
 800490e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004910:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004914:	2b00      	cmp	r3, #0
 8004916:	db0a      	blt.n	800492e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	b2da      	uxtb	r2, r3
 800491c:	490c      	ldr	r1, [pc, #48]	; (8004950 <__NVIC_SetPriority+0x4c>)
 800491e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004922:	0112      	lsls	r2, r2, #4
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	440b      	add	r3, r1
 8004928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800492c:	e00a      	b.n	8004944 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4908      	ldr	r1, [pc, #32]	; (8004954 <__NVIC_SetPriority+0x50>)
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	3b04      	subs	r3, #4
 800493c:	0112      	lsls	r2, r2, #4
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	440b      	add	r3, r1
 8004942:	761a      	strb	r2, [r3, #24]
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	e000e100 	.word	0xe000e100
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004958:	b480      	push	{r7}
 800495a:	b089      	sub	sp, #36	; 0x24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f1c3 0307 	rsb	r3, r3, #7
 8004972:	2b04      	cmp	r3, #4
 8004974:	bf28      	it	cs
 8004976:	2304      	movcs	r3, #4
 8004978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	3304      	adds	r3, #4
 800497e:	2b06      	cmp	r3, #6
 8004980:	d902      	bls.n	8004988 <NVIC_EncodePriority+0x30>
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3b03      	subs	r3, #3
 8004986:	e000      	b.n	800498a <NVIC_EncodePriority+0x32>
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800498c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43da      	mvns	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	401a      	ands	r2, r3
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	43d9      	mvns	r1, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b0:	4313      	orrs	r3, r2
         );
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3724      	adds	r7, #36	; 0x24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049d0:	d301      	bcc.n	80049d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049d2:	2301      	movs	r3, #1
 80049d4:	e00f      	b.n	80049f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049d6:	4a0a      	ldr	r2, [pc, #40]	; (8004a00 <SysTick_Config+0x40>)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3b01      	subs	r3, #1
 80049dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049de:	210f      	movs	r1, #15
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049e4:	f7ff ff8e 	bl	8004904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <SysTick_Config+0x40>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049ee:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <SysTick_Config+0x40>)
 80049f0:	2207      	movs	r2, #7
 80049f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	e000e010 	.word	0xe000e010

08004a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ff29 	bl	8004864 <__NVIC_SetPriorityGrouping>
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b086      	sub	sp, #24
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	4603      	mov	r3, r0
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
 8004a26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a28:	f7ff ff40 	bl	80048ac <__NVIC_GetPriorityGrouping>
 8004a2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	6978      	ldr	r0, [r7, #20]
 8004a34:	f7ff ff90 	bl	8004958 <NVIC_EncodePriority>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a3e:	4611      	mov	r1, r2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff ff5f 	bl	8004904 <__NVIC_SetPriority>
}
 8004a46:	bf00      	nop
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	4603      	mov	r3, r0
 8004a56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff33 	bl	80048c8 <__NVIC_EnableIRQ>
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff ffa4 	bl	80049c0 <SysTick_Config>
 8004a78:	4603      	mov	r3, r0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a8c:	f7fe f92e 	bl	8002cec <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e316      	b.n	80050ca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a66      	ldr	r2, [pc, #408]	; (8004c3c <HAL_DMA_Init+0x1b8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d04a      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a65      	ldr	r2, [pc, #404]	; (8004c40 <HAL_DMA_Init+0x1bc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d045      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a63      	ldr	r2, [pc, #396]	; (8004c44 <HAL_DMA_Init+0x1c0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d040      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a62      	ldr	r2, [pc, #392]	; (8004c48 <HAL_DMA_Init+0x1c4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d03b      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a60      	ldr	r2, [pc, #384]	; (8004c4c <HAL_DMA_Init+0x1c8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d036      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a5f      	ldr	r2, [pc, #380]	; (8004c50 <HAL_DMA_Init+0x1cc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d031      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5d      	ldr	r2, [pc, #372]	; (8004c54 <HAL_DMA_Init+0x1d0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d02c      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a5c      	ldr	r2, [pc, #368]	; (8004c58 <HAL_DMA_Init+0x1d4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d027      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a5a      	ldr	r2, [pc, #360]	; (8004c5c <HAL_DMA_Init+0x1d8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d022      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a59      	ldr	r2, [pc, #356]	; (8004c60 <HAL_DMA_Init+0x1dc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d01d      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a57      	ldr	r2, [pc, #348]	; (8004c64 <HAL_DMA_Init+0x1e0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d018      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a56      	ldr	r2, [pc, #344]	; (8004c68 <HAL_DMA_Init+0x1e4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a54      	ldr	r2, [pc, #336]	; (8004c6c <HAL_DMA_Init+0x1e8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00e      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a53      	ldr	r2, [pc, #332]	; (8004c70 <HAL_DMA_Init+0x1ec>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a51      	ldr	r2, [pc, #324]	; (8004c74 <HAL_DMA_Init+0x1f0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_DMA_Init+0xb8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a50      	ldr	r2, [pc, #320]	; (8004c78 <HAL_DMA_Init+0x1f4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d101      	bne.n	8004b40 <HAL_DMA_Init+0xbc>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <HAL_DMA_Init+0xbe>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 813b 	beq.w	8004dbe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a37      	ldr	r2, [pc, #220]	; (8004c3c <HAL_DMA_Init+0x1b8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d04a      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a36      	ldr	r2, [pc, #216]	; (8004c40 <HAL_DMA_Init+0x1bc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d045      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a34      	ldr	r2, [pc, #208]	; (8004c44 <HAL_DMA_Init+0x1c0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d040      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a33      	ldr	r2, [pc, #204]	; (8004c48 <HAL_DMA_Init+0x1c4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d03b      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a31      	ldr	r2, [pc, #196]	; (8004c4c <HAL_DMA_Init+0x1c8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d036      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a30      	ldr	r2, [pc, #192]	; (8004c50 <HAL_DMA_Init+0x1cc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d031      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2e      	ldr	r2, [pc, #184]	; (8004c54 <HAL_DMA_Init+0x1d0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d02c      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2d      	ldr	r2, [pc, #180]	; (8004c58 <HAL_DMA_Init+0x1d4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d027      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <HAL_DMA_Init+0x1d8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d022      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a2a      	ldr	r2, [pc, #168]	; (8004c60 <HAL_DMA_Init+0x1dc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d01d      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a28      	ldr	r2, [pc, #160]	; (8004c64 <HAL_DMA_Init+0x1e0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d018      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a27      	ldr	r2, [pc, #156]	; (8004c68 <HAL_DMA_Init+0x1e4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d013      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a25      	ldr	r2, [pc, #148]	; (8004c6c <HAL_DMA_Init+0x1e8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00e      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a24      	ldr	r2, [pc, #144]	; (8004c70 <HAL_DMA_Init+0x1ec>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d009      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a22      	ldr	r2, [pc, #136]	; (8004c74 <HAL_DMA_Init+0x1f0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <HAL_DMA_Init+0x174>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <HAL_DMA_Init+0x1f4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d108      	bne.n	8004c0a <HAL_DMA_Init+0x186>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e007      	b.n	8004c1a <HAL_DMA_Init+0x196>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c1a:	e02f      	b.n	8004c7c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c1c:	f7fe f866 	bl	8002cec <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b05      	cmp	r3, #5
 8004c28:	d928      	bls.n	8004c7c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2203      	movs	r2, #3
 8004c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e246      	b.n	80050ca <HAL_DMA_Init+0x646>
 8004c3c:	40020010 	.word	0x40020010
 8004c40:	40020028 	.word	0x40020028
 8004c44:	40020040 	.word	0x40020040
 8004c48:	40020058 	.word	0x40020058
 8004c4c:	40020070 	.word	0x40020070
 8004c50:	40020088 	.word	0x40020088
 8004c54:	400200a0 	.word	0x400200a0
 8004c58:	400200b8 	.word	0x400200b8
 8004c5c:	40020410 	.word	0x40020410
 8004c60:	40020428 	.word	0x40020428
 8004c64:	40020440 	.word	0x40020440
 8004c68:	40020458 	.word	0x40020458
 8004c6c:	40020470 	.word	0x40020470
 8004c70:	40020488 	.word	0x40020488
 8004c74:	400204a0 	.word	0x400204a0
 8004c78:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1c8      	bne.n	8004c1c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4b83      	ldr	r3, [pc, #524]	; (8004ea4 <HAL_DMA_Init+0x420>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004ca2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d107      	bne.n	8004ce0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004ce0:	4b71      	ldr	r3, [pc, #452]	; (8004ea8 <HAL_DMA_Init+0x424>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b71      	ldr	r3, [pc, #452]	; (8004eac <HAL_DMA_Init+0x428>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cec:	d328      	bcc.n	8004d40 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b28      	cmp	r3, #40	; 0x28
 8004cf4:	d903      	bls.n	8004cfe <HAL_DMA_Init+0x27a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8004cfc:	d917      	bls.n	8004d2e <HAL_DMA_Init+0x2aa>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b3e      	cmp	r3, #62	; 0x3e
 8004d04:	d903      	bls.n	8004d0e <HAL_DMA_Init+0x28a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b42      	cmp	r3, #66	; 0x42
 8004d0c:	d90f      	bls.n	8004d2e <HAL_DMA_Init+0x2aa>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b46      	cmp	r3, #70	; 0x46
 8004d14:	d903      	bls.n	8004d1e <HAL_DMA_Init+0x29a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b48      	cmp	r3, #72	; 0x48
 8004d1c:	d907      	bls.n	8004d2e <HAL_DMA_Init+0x2aa>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b4e      	cmp	r3, #78	; 0x4e
 8004d24:	d905      	bls.n	8004d32 <HAL_DMA_Init+0x2ae>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b52      	cmp	r3, #82	; 0x52
 8004d2c:	d801      	bhi.n	8004d32 <HAL_DMA_Init+0x2ae>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_DMA_Init+0x2b0>
 8004d32:	2300      	movs	r3, #0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d3e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0307 	bic.w	r3, r3, #7
 8004d56:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d117      	bne.n	8004d9a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00e      	beq.n	8004d9a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f002 fb33 	bl	80073e8 <DMA_CheckFifoParam>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2240      	movs	r2, #64	; 0x40
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e197      	b.n	80050ca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f002 fa6e 	bl	8007284 <DMA_CalcBaseAndBitshift>
 8004da8:	4603      	mov	r3, r0
 8004daa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	223f      	movs	r2, #63	; 0x3f
 8004db6:	409a      	lsls	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	e0cd      	b.n	8004f5a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a3b      	ldr	r2, [pc, #236]	; (8004eb0 <HAL_DMA_Init+0x42c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d022      	beq.n	8004e0e <HAL_DMA_Init+0x38a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a39      	ldr	r2, [pc, #228]	; (8004eb4 <HAL_DMA_Init+0x430>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01d      	beq.n	8004e0e <HAL_DMA_Init+0x38a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a38      	ldr	r2, [pc, #224]	; (8004eb8 <HAL_DMA_Init+0x434>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d018      	beq.n	8004e0e <HAL_DMA_Init+0x38a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a36      	ldr	r2, [pc, #216]	; (8004ebc <HAL_DMA_Init+0x438>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_DMA_Init+0x38a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a35      	ldr	r2, [pc, #212]	; (8004ec0 <HAL_DMA_Init+0x43c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_DMA_Init+0x38a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a33      	ldr	r2, [pc, #204]	; (8004ec4 <HAL_DMA_Init+0x440>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_DMA_Init+0x38a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a32      	ldr	r2, [pc, #200]	; (8004ec8 <HAL_DMA_Init+0x444>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_DMA_Init+0x38a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a30      	ldr	r2, [pc, #192]	; (8004ecc <HAL_DMA_Init+0x448>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_DMA_Init+0x38e>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_DMA_Init+0x390>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8097 	beq.w	8004f48 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a24      	ldr	r2, [pc, #144]	; (8004eb0 <HAL_DMA_Init+0x42c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d021      	beq.n	8004e68 <HAL_DMA_Init+0x3e4>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <HAL_DMA_Init+0x430>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01c      	beq.n	8004e68 <HAL_DMA_Init+0x3e4>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <HAL_DMA_Init+0x434>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d017      	beq.n	8004e68 <HAL_DMA_Init+0x3e4>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <HAL_DMA_Init+0x438>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d012      	beq.n	8004e68 <HAL_DMA_Init+0x3e4>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <HAL_DMA_Init+0x43c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00d      	beq.n	8004e68 <HAL_DMA_Init+0x3e4>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <HAL_DMA_Init+0x440>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d008      	beq.n	8004e68 <HAL_DMA_Init+0x3e4>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <HAL_DMA_Init+0x444>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <HAL_DMA_Init+0x3e4>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a19      	ldr	r2, [pc, #100]	; (8004ecc <HAL_DMA_Init+0x448>)
 8004e66:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <HAL_DMA_Init+0x44c>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d021      	beq.n	8004ed4 <HAL_DMA_Init+0x450>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b80      	cmp	r3, #128	; 0x80
 8004e96:	d102      	bne.n	8004e9e <HAL_DMA_Init+0x41a>
 8004e98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e9c:	e01b      	b.n	8004ed6 <HAL_DMA_Init+0x452>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e019      	b.n	8004ed6 <HAL_DMA_Init+0x452>
 8004ea2:	bf00      	nop
 8004ea4:	fe10803f 	.word	0xfe10803f
 8004ea8:	5c001000 	.word	0x5c001000
 8004eac:	ffff0000 	.word	0xffff0000
 8004eb0:	58025408 	.word	0x58025408
 8004eb4:	5802541c 	.word	0x5802541c
 8004eb8:	58025430 	.word	0x58025430
 8004ebc:	58025444 	.word	0x58025444
 8004ec0:	58025458 	.word	0x58025458
 8004ec4:	5802546c 	.word	0x5802546c
 8004ec8:	58025480 	.word	0x58025480
 8004ecc:	58025494 	.word	0x58025494
 8004ed0:	fffe000f 	.word	0xfffe000f
 8004ed4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68d2      	ldr	r2, [r2, #12]
 8004eda:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004edc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ee4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004eec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ef4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004efc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f04:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b6e      	ldr	r3, [pc, #440]	; (80050d4 <HAL_DMA_Init+0x650>)
 8004f1c:	4413      	add	r3, r2
 8004f1e:	4a6e      	ldr	r2, [pc, #440]	; (80050d8 <HAL_DMA_Init+0x654>)
 8004f20:	fba2 2303 	umull	r2, r3, r2, r3
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	009a      	lsls	r2, r3, #2
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f002 f9a9 	bl	8007284 <DMA_CalcBaseAndBitshift>
 8004f32:	4603      	mov	r3, r0
 8004f34:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	2201      	movs	r2, #1
 8004f40:	409a      	lsls	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	605a      	str	r2, [r3, #4]
 8004f46:	e008      	b.n	8004f5a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2240      	movs	r2, #64	; 0x40
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2203      	movs	r2, #3
 8004f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e0b7      	b.n	80050ca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a5f      	ldr	r2, [pc, #380]	; (80050dc <HAL_DMA_Init+0x658>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d072      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a5d      	ldr	r2, [pc, #372]	; (80050e0 <HAL_DMA_Init+0x65c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d06d      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a5c      	ldr	r2, [pc, #368]	; (80050e4 <HAL_DMA_Init+0x660>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d068      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a5a      	ldr	r2, [pc, #360]	; (80050e8 <HAL_DMA_Init+0x664>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d063      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a59      	ldr	r2, [pc, #356]	; (80050ec <HAL_DMA_Init+0x668>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d05e      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a57      	ldr	r2, [pc, #348]	; (80050f0 <HAL_DMA_Init+0x66c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d059      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a56      	ldr	r2, [pc, #344]	; (80050f4 <HAL_DMA_Init+0x670>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d054      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a54      	ldr	r2, [pc, #336]	; (80050f8 <HAL_DMA_Init+0x674>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d04f      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a53      	ldr	r2, [pc, #332]	; (80050fc <HAL_DMA_Init+0x678>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d04a      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a51      	ldr	r2, [pc, #324]	; (8005100 <HAL_DMA_Init+0x67c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d045      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a50      	ldr	r2, [pc, #320]	; (8005104 <HAL_DMA_Init+0x680>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d040      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a4e      	ldr	r2, [pc, #312]	; (8005108 <HAL_DMA_Init+0x684>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d03b      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a4d      	ldr	r2, [pc, #308]	; (800510c <HAL_DMA_Init+0x688>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d036      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a4b      	ldr	r2, [pc, #300]	; (8005110 <HAL_DMA_Init+0x68c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d031      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a4a      	ldr	r2, [pc, #296]	; (8005114 <HAL_DMA_Init+0x690>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d02c      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a48      	ldr	r2, [pc, #288]	; (8005118 <HAL_DMA_Init+0x694>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d027      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a47      	ldr	r2, [pc, #284]	; (800511c <HAL_DMA_Init+0x698>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d022      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a45      	ldr	r2, [pc, #276]	; (8005120 <HAL_DMA_Init+0x69c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01d      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a44      	ldr	r2, [pc, #272]	; (8005124 <HAL_DMA_Init+0x6a0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d018      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a42      	ldr	r2, [pc, #264]	; (8005128 <HAL_DMA_Init+0x6a4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a41      	ldr	r2, [pc, #260]	; (800512c <HAL_DMA_Init+0x6a8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00e      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3f      	ldr	r2, [pc, #252]	; (8005130 <HAL_DMA_Init+0x6ac>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d009      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3e      	ldr	r2, [pc, #248]	; (8005134 <HAL_DMA_Init+0x6b0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d004      	beq.n	800504a <HAL_DMA_Init+0x5c6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a3c      	ldr	r2, [pc, #240]	; (8005138 <HAL_DMA_Init+0x6b4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <HAL_DMA_Init+0x5ca>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <HAL_DMA_Init+0x5cc>
 800504e:	2300      	movs	r3, #0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d032      	beq.n	80050ba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f002 fa43 	bl	80074e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	2b80      	cmp	r3, #128	; 0x80
 8005060:	d102      	bne.n	8005068 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800507c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d010      	beq.n	80050a8 <HAL_DMA_Init+0x624>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b08      	cmp	r3, #8
 800508c:	d80c      	bhi.n	80050a8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f002 fac0 	bl	8007614 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	e008      	b.n	80050ba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	a7fdabf8 	.word	0xa7fdabf8
 80050d8:	cccccccd 	.word	0xcccccccd
 80050dc:	40020010 	.word	0x40020010
 80050e0:	40020028 	.word	0x40020028
 80050e4:	40020040 	.word	0x40020040
 80050e8:	40020058 	.word	0x40020058
 80050ec:	40020070 	.word	0x40020070
 80050f0:	40020088 	.word	0x40020088
 80050f4:	400200a0 	.word	0x400200a0
 80050f8:	400200b8 	.word	0x400200b8
 80050fc:	40020410 	.word	0x40020410
 8005100:	40020428 	.word	0x40020428
 8005104:	40020440 	.word	0x40020440
 8005108:	40020458 	.word	0x40020458
 800510c:	40020470 	.word	0x40020470
 8005110:	40020488 	.word	0x40020488
 8005114:	400204a0 	.word	0x400204a0
 8005118:	400204b8 	.word	0x400204b8
 800511c:	58025408 	.word	0x58025408
 8005120:	5802541c 	.word	0x5802541c
 8005124:	58025430 	.word	0x58025430
 8005128:	58025444 	.word	0x58025444
 800512c:	58025458 	.word	0x58025458
 8005130:	5802546c 	.word	0x5802546c
 8005134:	58025480 	.word	0x58025480
 8005138:	58025494 	.word	0x58025494

0800513c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e226      	b.n	80055a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_DMA_Start_IT+0x2a>
 8005162:	2302      	movs	r3, #2
 8005164:	e21f      	b.n	80055a6 <HAL_DMA_Start_IT+0x46a>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b01      	cmp	r3, #1
 8005178:	f040 820a 	bne.w	8005590 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a68      	ldr	r2, [pc, #416]	; (8005330 <HAL_DMA_Start_IT+0x1f4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d04a      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a66      	ldr	r2, [pc, #408]	; (8005334 <HAL_DMA_Start_IT+0x1f8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d045      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a65      	ldr	r2, [pc, #404]	; (8005338 <HAL_DMA_Start_IT+0x1fc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d040      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a63      	ldr	r2, [pc, #396]	; (800533c <HAL_DMA_Start_IT+0x200>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d03b      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a62      	ldr	r2, [pc, #392]	; (8005340 <HAL_DMA_Start_IT+0x204>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d036      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a60      	ldr	r2, [pc, #384]	; (8005344 <HAL_DMA_Start_IT+0x208>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d031      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a5f      	ldr	r2, [pc, #380]	; (8005348 <HAL_DMA_Start_IT+0x20c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d02c      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a5d      	ldr	r2, [pc, #372]	; (800534c <HAL_DMA_Start_IT+0x210>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d027      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a5c      	ldr	r2, [pc, #368]	; (8005350 <HAL_DMA_Start_IT+0x214>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d022      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a5a      	ldr	r2, [pc, #360]	; (8005354 <HAL_DMA_Start_IT+0x218>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01d      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a59      	ldr	r2, [pc, #356]	; (8005358 <HAL_DMA_Start_IT+0x21c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d018      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a57      	ldr	r2, [pc, #348]	; (800535c <HAL_DMA_Start_IT+0x220>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a56      	ldr	r2, [pc, #344]	; (8005360 <HAL_DMA_Start_IT+0x224>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00e      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a54      	ldr	r2, [pc, #336]	; (8005364 <HAL_DMA_Start_IT+0x228>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d009      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a53      	ldr	r2, [pc, #332]	; (8005368 <HAL_DMA_Start_IT+0x22c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <HAL_DMA_Start_IT+0xee>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a51      	ldr	r2, [pc, #324]	; (800536c <HAL_DMA_Start_IT+0x230>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d108      	bne.n	800523c <HAL_DMA_Start_IT+0x100>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e007      	b.n	800524c <HAL_DMA_Start_IT+0x110>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f001 fe6a 	bl	8006f2c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a34      	ldr	r2, [pc, #208]	; (8005330 <HAL_DMA_Start_IT+0x1f4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d04a      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a33      	ldr	r2, [pc, #204]	; (8005334 <HAL_DMA_Start_IT+0x1f8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d045      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a31      	ldr	r2, [pc, #196]	; (8005338 <HAL_DMA_Start_IT+0x1fc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d040      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a30      	ldr	r2, [pc, #192]	; (800533c <HAL_DMA_Start_IT+0x200>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d03b      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a2e      	ldr	r2, [pc, #184]	; (8005340 <HAL_DMA_Start_IT+0x204>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d036      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a2d      	ldr	r2, [pc, #180]	; (8005344 <HAL_DMA_Start_IT+0x208>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d031      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a2b      	ldr	r2, [pc, #172]	; (8005348 <HAL_DMA_Start_IT+0x20c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d02c      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2a      	ldr	r2, [pc, #168]	; (800534c <HAL_DMA_Start_IT+0x210>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d027      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a28      	ldr	r2, [pc, #160]	; (8005350 <HAL_DMA_Start_IT+0x214>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d022      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a27      	ldr	r2, [pc, #156]	; (8005354 <HAL_DMA_Start_IT+0x218>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d01d      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a25      	ldr	r2, [pc, #148]	; (8005358 <HAL_DMA_Start_IT+0x21c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d018      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a24      	ldr	r2, [pc, #144]	; (800535c <HAL_DMA_Start_IT+0x220>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a22      	ldr	r2, [pc, #136]	; (8005360 <HAL_DMA_Start_IT+0x224>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a21      	ldr	r2, [pc, #132]	; (8005364 <HAL_DMA_Start_IT+0x228>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1f      	ldr	r2, [pc, #124]	; (8005368 <HAL_DMA_Start_IT+0x22c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_DMA_Start_IT+0x1bc>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1e      	ldr	r2, [pc, #120]	; (800536c <HAL_DMA_Start_IT+0x230>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d101      	bne.n	80052fc <HAL_DMA_Start_IT+0x1c0>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <HAL_DMA_Start_IT+0x1c2>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d036      	beq.n	8005370 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f023 021e 	bic.w	r2, r3, #30
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0216 	orr.w	r2, r2, #22
 8005314:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d03e      	beq.n	800539c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0208 	orr.w	r2, r2, #8
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e035      	b.n	800539c <HAL_DMA_Start_IT+0x260>
 8005330:	40020010 	.word	0x40020010
 8005334:	40020028 	.word	0x40020028
 8005338:	40020040 	.word	0x40020040
 800533c:	40020058 	.word	0x40020058
 8005340:	40020070 	.word	0x40020070
 8005344:	40020088 	.word	0x40020088
 8005348:	400200a0 	.word	0x400200a0
 800534c:	400200b8 	.word	0x400200b8
 8005350:	40020410 	.word	0x40020410
 8005354:	40020428 	.word	0x40020428
 8005358:	40020440 	.word	0x40020440
 800535c:	40020458 	.word	0x40020458
 8005360:	40020470 	.word	0x40020470
 8005364:	40020488 	.word	0x40020488
 8005368:	400204a0 	.word	0x400204a0
 800536c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 020e 	bic.w	r2, r3, #14
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 020a 	orr.w	r2, r2, #10
 8005382:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0204 	orr.w	r2, r2, #4
 800539a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a83      	ldr	r2, [pc, #524]	; (80055b0 <HAL_DMA_Start_IT+0x474>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d072      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a82      	ldr	r2, [pc, #520]	; (80055b4 <HAL_DMA_Start_IT+0x478>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d06d      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a80      	ldr	r2, [pc, #512]	; (80055b8 <HAL_DMA_Start_IT+0x47c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d068      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a7f      	ldr	r2, [pc, #508]	; (80055bc <HAL_DMA_Start_IT+0x480>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d063      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a7d      	ldr	r2, [pc, #500]	; (80055c0 <HAL_DMA_Start_IT+0x484>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d05e      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a7c      	ldr	r2, [pc, #496]	; (80055c4 <HAL_DMA_Start_IT+0x488>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d059      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a7a      	ldr	r2, [pc, #488]	; (80055c8 <HAL_DMA_Start_IT+0x48c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d054      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a79      	ldr	r2, [pc, #484]	; (80055cc <HAL_DMA_Start_IT+0x490>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d04f      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a77      	ldr	r2, [pc, #476]	; (80055d0 <HAL_DMA_Start_IT+0x494>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d04a      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a76      	ldr	r2, [pc, #472]	; (80055d4 <HAL_DMA_Start_IT+0x498>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d045      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a74      	ldr	r2, [pc, #464]	; (80055d8 <HAL_DMA_Start_IT+0x49c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d040      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a73      	ldr	r2, [pc, #460]	; (80055dc <HAL_DMA_Start_IT+0x4a0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d03b      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a71      	ldr	r2, [pc, #452]	; (80055e0 <HAL_DMA_Start_IT+0x4a4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d036      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a70      	ldr	r2, [pc, #448]	; (80055e4 <HAL_DMA_Start_IT+0x4a8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d031      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a6e      	ldr	r2, [pc, #440]	; (80055e8 <HAL_DMA_Start_IT+0x4ac>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d02c      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a6d      	ldr	r2, [pc, #436]	; (80055ec <HAL_DMA_Start_IT+0x4b0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d027      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a6b      	ldr	r2, [pc, #428]	; (80055f0 <HAL_DMA_Start_IT+0x4b4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a6a      	ldr	r2, [pc, #424]	; (80055f4 <HAL_DMA_Start_IT+0x4b8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d01d      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a68      	ldr	r2, [pc, #416]	; (80055f8 <HAL_DMA_Start_IT+0x4bc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a67      	ldr	r2, [pc, #412]	; (80055fc <HAL_DMA_Start_IT+0x4c0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a65      	ldr	r2, [pc, #404]	; (8005600 <HAL_DMA_Start_IT+0x4c4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a64      	ldr	r2, [pc, #400]	; (8005604 <HAL_DMA_Start_IT+0x4c8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a62      	ldr	r2, [pc, #392]	; (8005608 <HAL_DMA_Start_IT+0x4cc>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_DMA_Start_IT+0x350>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a61      	ldr	r2, [pc, #388]	; (800560c <HAL_DMA_Start_IT+0x4d0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d101      	bne.n	8005490 <HAL_DMA_Start_IT+0x354>
 800548c:	2301      	movs	r3, #1
 800548e:	e000      	b.n	8005492 <HAL_DMA_Start_IT+0x356>
 8005490:	2300      	movs	r3, #0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01a      	beq.n	80054cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a37      	ldr	r2, [pc, #220]	; (80055b0 <HAL_DMA_Start_IT+0x474>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d04a      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a36      	ldr	r2, [pc, #216]	; (80055b4 <HAL_DMA_Start_IT+0x478>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d045      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a34      	ldr	r2, [pc, #208]	; (80055b8 <HAL_DMA_Start_IT+0x47c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d040      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a33      	ldr	r2, [pc, #204]	; (80055bc <HAL_DMA_Start_IT+0x480>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d03b      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a31      	ldr	r2, [pc, #196]	; (80055c0 <HAL_DMA_Start_IT+0x484>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d036      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a30      	ldr	r2, [pc, #192]	; (80055c4 <HAL_DMA_Start_IT+0x488>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d031      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2e      	ldr	r2, [pc, #184]	; (80055c8 <HAL_DMA_Start_IT+0x48c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d02c      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a2d      	ldr	r2, [pc, #180]	; (80055cc <HAL_DMA_Start_IT+0x490>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d027      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2b      	ldr	r2, [pc, #172]	; (80055d0 <HAL_DMA_Start_IT+0x494>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d022      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2a      	ldr	r2, [pc, #168]	; (80055d4 <HAL_DMA_Start_IT+0x498>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d01d      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a28      	ldr	r2, [pc, #160]	; (80055d8 <HAL_DMA_Start_IT+0x49c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d018      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a27      	ldr	r2, [pc, #156]	; (80055dc <HAL_DMA_Start_IT+0x4a0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <HAL_DMA_Start_IT+0x4a4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00e      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a24      	ldr	r2, [pc, #144]	; (80055e4 <HAL_DMA_Start_IT+0x4a8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d009      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <HAL_DMA_Start_IT+0x4ac>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_DMA_Start_IT+0x430>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a21      	ldr	r2, [pc, #132]	; (80055ec <HAL_DMA_Start_IT+0x4b0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d108      	bne.n	800557e <HAL_DMA_Start_IT+0x442>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e012      	b.n	80055a4 <HAL_DMA_Start_IT+0x468>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e009      	b.n	80055a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005596:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40020010 	.word	0x40020010
 80055b4:	40020028 	.word	0x40020028
 80055b8:	40020040 	.word	0x40020040
 80055bc:	40020058 	.word	0x40020058
 80055c0:	40020070 	.word	0x40020070
 80055c4:	40020088 	.word	0x40020088
 80055c8:	400200a0 	.word	0x400200a0
 80055cc:	400200b8 	.word	0x400200b8
 80055d0:	40020410 	.word	0x40020410
 80055d4:	40020428 	.word	0x40020428
 80055d8:	40020440 	.word	0x40020440
 80055dc:	40020458 	.word	0x40020458
 80055e0:	40020470 	.word	0x40020470
 80055e4:	40020488 	.word	0x40020488
 80055e8:	400204a0 	.word	0x400204a0
 80055ec:	400204b8 	.word	0x400204b8
 80055f0:	58025408 	.word	0x58025408
 80055f4:	5802541c 	.word	0x5802541c
 80055f8:	58025430 	.word	0x58025430
 80055fc:	58025444 	.word	0x58025444
 8005600:	58025458 	.word	0x58025458
 8005604:	5802546c 	.word	0x5802546c
 8005608:	58025480 	.word	0x58025480
 800560c:	58025494 	.word	0x58025494

08005610 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005618:	f7fd fb68 	bl	8002cec <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e2dc      	b.n	8005be2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d008      	beq.n	8005646 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2280      	movs	r2, #128	; 0x80
 8005638:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e2cd      	b.n	8005be2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a76      	ldr	r2, [pc, #472]	; (8005824 <HAL_DMA_Abort+0x214>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d04a      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a74      	ldr	r2, [pc, #464]	; (8005828 <HAL_DMA_Abort+0x218>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d045      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a73      	ldr	r2, [pc, #460]	; (800582c <HAL_DMA_Abort+0x21c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d040      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a71      	ldr	r2, [pc, #452]	; (8005830 <HAL_DMA_Abort+0x220>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d03b      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a70      	ldr	r2, [pc, #448]	; (8005834 <HAL_DMA_Abort+0x224>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d036      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a6e      	ldr	r2, [pc, #440]	; (8005838 <HAL_DMA_Abort+0x228>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d031      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a6d      	ldr	r2, [pc, #436]	; (800583c <HAL_DMA_Abort+0x22c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d02c      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a6b      	ldr	r2, [pc, #428]	; (8005840 <HAL_DMA_Abort+0x230>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d027      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a6a      	ldr	r2, [pc, #424]	; (8005844 <HAL_DMA_Abort+0x234>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d022      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a68      	ldr	r2, [pc, #416]	; (8005848 <HAL_DMA_Abort+0x238>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01d      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a67      	ldr	r2, [pc, #412]	; (800584c <HAL_DMA_Abort+0x23c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d018      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a65      	ldr	r2, [pc, #404]	; (8005850 <HAL_DMA_Abort+0x240>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a64      	ldr	r2, [pc, #400]	; (8005854 <HAL_DMA_Abort+0x244>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00e      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a62      	ldr	r2, [pc, #392]	; (8005858 <HAL_DMA_Abort+0x248>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d009      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a61      	ldr	r2, [pc, #388]	; (800585c <HAL_DMA_Abort+0x24c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d004      	beq.n	80056e6 <HAL_DMA_Abort+0xd6>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a5f      	ldr	r2, [pc, #380]	; (8005860 <HAL_DMA_Abort+0x250>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d101      	bne.n	80056ea <HAL_DMA_Abort+0xda>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <HAL_DMA_Abort+0xdc>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d013      	beq.n	8005718 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 021e 	bic.w	r2, r2, #30
 80056fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800570e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	e00a      	b.n	800572e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 020e 	bic.w	r2, r2, #14
 8005726:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a3c      	ldr	r2, [pc, #240]	; (8005824 <HAL_DMA_Abort+0x214>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d072      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a3a      	ldr	r2, [pc, #232]	; (8005828 <HAL_DMA_Abort+0x218>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d06d      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a39      	ldr	r2, [pc, #228]	; (800582c <HAL_DMA_Abort+0x21c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d068      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a37      	ldr	r2, [pc, #220]	; (8005830 <HAL_DMA_Abort+0x220>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d063      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a36      	ldr	r2, [pc, #216]	; (8005834 <HAL_DMA_Abort+0x224>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d05e      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a34      	ldr	r2, [pc, #208]	; (8005838 <HAL_DMA_Abort+0x228>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d059      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a33      	ldr	r2, [pc, #204]	; (800583c <HAL_DMA_Abort+0x22c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d054      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a31      	ldr	r2, [pc, #196]	; (8005840 <HAL_DMA_Abort+0x230>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d04f      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a30      	ldr	r2, [pc, #192]	; (8005844 <HAL_DMA_Abort+0x234>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d04a      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2e      	ldr	r2, [pc, #184]	; (8005848 <HAL_DMA_Abort+0x238>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d045      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2d      	ldr	r2, [pc, #180]	; (800584c <HAL_DMA_Abort+0x23c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d040      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a2b      	ldr	r2, [pc, #172]	; (8005850 <HAL_DMA_Abort+0x240>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d03b      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <HAL_DMA_Abort+0x244>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d036      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a28      	ldr	r2, [pc, #160]	; (8005858 <HAL_DMA_Abort+0x248>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d031      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a27      	ldr	r2, [pc, #156]	; (800585c <HAL_DMA_Abort+0x24c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d02c      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a25      	ldr	r2, [pc, #148]	; (8005860 <HAL_DMA_Abort+0x250>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d027      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a24      	ldr	r2, [pc, #144]	; (8005864 <HAL_DMA_Abort+0x254>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d022      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a22      	ldr	r2, [pc, #136]	; (8005868 <HAL_DMA_Abort+0x258>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d01d      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a21      	ldr	r2, [pc, #132]	; (800586c <HAL_DMA_Abort+0x25c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d018      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1f      	ldr	r2, [pc, #124]	; (8005870 <HAL_DMA_Abort+0x260>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1e      	ldr	r2, [pc, #120]	; (8005874 <HAL_DMA_Abort+0x264>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <HAL_DMA_Abort+0x268>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1b      	ldr	r2, [pc, #108]	; (800587c <HAL_DMA_Abort+0x26c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_DMA_Abort+0x20e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a19      	ldr	r2, [pc, #100]	; (8005880 <HAL_DMA_Abort+0x270>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d132      	bne.n	8005884 <HAL_DMA_Abort+0x274>
 800581e:	2301      	movs	r3, #1
 8005820:	e031      	b.n	8005886 <HAL_DMA_Abort+0x276>
 8005822:	bf00      	nop
 8005824:	40020010 	.word	0x40020010
 8005828:	40020028 	.word	0x40020028
 800582c:	40020040 	.word	0x40020040
 8005830:	40020058 	.word	0x40020058
 8005834:	40020070 	.word	0x40020070
 8005838:	40020088 	.word	0x40020088
 800583c:	400200a0 	.word	0x400200a0
 8005840:	400200b8 	.word	0x400200b8
 8005844:	40020410 	.word	0x40020410
 8005848:	40020428 	.word	0x40020428
 800584c:	40020440 	.word	0x40020440
 8005850:	40020458 	.word	0x40020458
 8005854:	40020470 	.word	0x40020470
 8005858:	40020488 	.word	0x40020488
 800585c:	400204a0 	.word	0x400204a0
 8005860:	400204b8 	.word	0x400204b8
 8005864:	58025408 	.word	0x58025408
 8005868:	5802541c 	.word	0x5802541c
 800586c:	58025430 	.word	0x58025430
 8005870:	58025444 	.word	0x58025444
 8005874:	58025458 	.word	0x58025458
 8005878:	5802546c 	.word	0x5802546c
 800587c:	58025480 	.word	0x58025480
 8005880:	58025494 	.word	0x58025494
 8005884:	2300      	movs	r3, #0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005898:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a6d      	ldr	r2, [pc, #436]	; (8005a54 <HAL_DMA_Abort+0x444>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d04a      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a6b      	ldr	r2, [pc, #428]	; (8005a58 <HAL_DMA_Abort+0x448>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d045      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a6a      	ldr	r2, [pc, #424]	; (8005a5c <HAL_DMA_Abort+0x44c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d040      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a68      	ldr	r2, [pc, #416]	; (8005a60 <HAL_DMA_Abort+0x450>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d03b      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a67      	ldr	r2, [pc, #412]	; (8005a64 <HAL_DMA_Abort+0x454>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d036      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a65      	ldr	r2, [pc, #404]	; (8005a68 <HAL_DMA_Abort+0x458>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d031      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a64      	ldr	r2, [pc, #400]	; (8005a6c <HAL_DMA_Abort+0x45c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d02c      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a62      	ldr	r2, [pc, #392]	; (8005a70 <HAL_DMA_Abort+0x460>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d027      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a61      	ldr	r2, [pc, #388]	; (8005a74 <HAL_DMA_Abort+0x464>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a5f      	ldr	r2, [pc, #380]	; (8005a78 <HAL_DMA_Abort+0x468>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01d      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a5e      	ldr	r2, [pc, #376]	; (8005a7c <HAL_DMA_Abort+0x46c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a5c      	ldr	r2, [pc, #368]	; (8005a80 <HAL_DMA_Abort+0x470>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a5b      	ldr	r2, [pc, #364]	; (8005a84 <HAL_DMA_Abort+0x474>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a59      	ldr	r2, [pc, #356]	; (8005a88 <HAL_DMA_Abort+0x478>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a58      	ldr	r2, [pc, #352]	; (8005a8c <HAL_DMA_Abort+0x47c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_DMA_Abort+0x32a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a56      	ldr	r2, [pc, #344]	; (8005a90 <HAL_DMA_Abort+0x480>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d108      	bne.n	800594c <HAL_DMA_Abort+0x33c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0201 	bic.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e007      	b.n	800595c <HAL_DMA_Abort+0x34c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800595c:	e013      	b.n	8005986 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800595e:	f7fd f9c5 	bl	8002cec <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b05      	cmp	r3, #5
 800596a:	d90c      	bls.n	8005986 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2203      	movs	r2, #3
 8005976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e12d      	b.n	8005be2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e5      	bne.n	800595e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2f      	ldr	r2, [pc, #188]	; (8005a54 <HAL_DMA_Abort+0x444>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d04a      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2d      	ldr	r2, [pc, #180]	; (8005a58 <HAL_DMA_Abort+0x448>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d045      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a2c      	ldr	r2, [pc, #176]	; (8005a5c <HAL_DMA_Abort+0x44c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d040      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a2a      	ldr	r2, [pc, #168]	; (8005a60 <HAL_DMA_Abort+0x450>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d03b      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a29      	ldr	r2, [pc, #164]	; (8005a64 <HAL_DMA_Abort+0x454>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d036      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a27      	ldr	r2, [pc, #156]	; (8005a68 <HAL_DMA_Abort+0x458>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d031      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a26      	ldr	r2, [pc, #152]	; (8005a6c <HAL_DMA_Abort+0x45c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d02c      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a24      	ldr	r2, [pc, #144]	; (8005a70 <HAL_DMA_Abort+0x460>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d027      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a23      	ldr	r2, [pc, #140]	; (8005a74 <HAL_DMA_Abort+0x464>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d022      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a21      	ldr	r2, [pc, #132]	; (8005a78 <HAL_DMA_Abort+0x468>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01d      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a20      	ldr	r2, [pc, #128]	; (8005a7c <HAL_DMA_Abort+0x46c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d018      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1e      	ldr	r2, [pc, #120]	; (8005a80 <HAL_DMA_Abort+0x470>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <HAL_DMA_Abort+0x474>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00e      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1b      	ldr	r2, [pc, #108]	; (8005a88 <HAL_DMA_Abort+0x478>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d009      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1a      	ldr	r2, [pc, #104]	; (8005a8c <HAL_DMA_Abort+0x47c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d004      	beq.n	8005a32 <HAL_DMA_Abort+0x422>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <HAL_DMA_Abort+0x480>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d101      	bne.n	8005a36 <HAL_DMA_Abort+0x426>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <HAL_DMA_Abort+0x428>
 8005a36:	2300      	movs	r3, #0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d02b      	beq.n	8005a94 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a40:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a46:	f003 031f 	and.w	r3, r3, #31
 8005a4a:	223f      	movs	r2, #63	; 0x3f
 8005a4c:	409a      	lsls	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	609a      	str	r2, [r3, #8]
 8005a52:	e02a      	b.n	8005aaa <HAL_DMA_Abort+0x49a>
 8005a54:	40020010 	.word	0x40020010
 8005a58:	40020028 	.word	0x40020028
 8005a5c:	40020040 	.word	0x40020040
 8005a60:	40020058 	.word	0x40020058
 8005a64:	40020070 	.word	0x40020070
 8005a68:	40020088 	.word	0x40020088
 8005a6c:	400200a0 	.word	0x400200a0
 8005a70:	400200b8 	.word	0x400200b8
 8005a74:	40020410 	.word	0x40020410
 8005a78:	40020428 	.word	0x40020428
 8005a7c:	40020440 	.word	0x40020440
 8005a80:	40020458 	.word	0x40020458
 8005a84:	40020470 	.word	0x40020470
 8005a88:	40020488 	.word	0x40020488
 8005a8c:	400204a0 	.word	0x400204a0
 8005a90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a98:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	409a      	lsls	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a4f      	ldr	r2, [pc, #316]	; (8005bec <HAL_DMA_Abort+0x5dc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d072      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a4d      	ldr	r2, [pc, #308]	; (8005bf0 <HAL_DMA_Abort+0x5e0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d06d      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a4c      	ldr	r2, [pc, #304]	; (8005bf4 <HAL_DMA_Abort+0x5e4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d068      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a4a      	ldr	r2, [pc, #296]	; (8005bf8 <HAL_DMA_Abort+0x5e8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d063      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a49      	ldr	r2, [pc, #292]	; (8005bfc <HAL_DMA_Abort+0x5ec>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d05e      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a47      	ldr	r2, [pc, #284]	; (8005c00 <HAL_DMA_Abort+0x5f0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d059      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a46      	ldr	r2, [pc, #280]	; (8005c04 <HAL_DMA_Abort+0x5f4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d054      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a44      	ldr	r2, [pc, #272]	; (8005c08 <HAL_DMA_Abort+0x5f8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d04f      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a43      	ldr	r2, [pc, #268]	; (8005c0c <HAL_DMA_Abort+0x5fc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d04a      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a41      	ldr	r2, [pc, #260]	; (8005c10 <HAL_DMA_Abort+0x600>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d045      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a40      	ldr	r2, [pc, #256]	; (8005c14 <HAL_DMA_Abort+0x604>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d040      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a3e      	ldr	r2, [pc, #248]	; (8005c18 <HAL_DMA_Abort+0x608>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d03b      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a3d      	ldr	r2, [pc, #244]	; (8005c1c <HAL_DMA_Abort+0x60c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d036      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3b      	ldr	r2, [pc, #236]	; (8005c20 <HAL_DMA_Abort+0x610>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d031      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a3a      	ldr	r2, [pc, #232]	; (8005c24 <HAL_DMA_Abort+0x614>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d02c      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a38      	ldr	r2, [pc, #224]	; (8005c28 <HAL_DMA_Abort+0x618>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d027      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a37      	ldr	r2, [pc, #220]	; (8005c2c <HAL_DMA_Abort+0x61c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d022      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a35      	ldr	r2, [pc, #212]	; (8005c30 <HAL_DMA_Abort+0x620>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01d      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a34      	ldr	r2, [pc, #208]	; (8005c34 <HAL_DMA_Abort+0x624>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d018      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a32      	ldr	r2, [pc, #200]	; (8005c38 <HAL_DMA_Abort+0x628>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a31      	ldr	r2, [pc, #196]	; (8005c3c <HAL_DMA_Abort+0x62c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2f      	ldr	r2, [pc, #188]	; (8005c40 <HAL_DMA_Abort+0x630>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d009      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2e      	ldr	r2, [pc, #184]	; (8005c44 <HAL_DMA_Abort+0x634>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_DMA_Abort+0x58a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2c      	ldr	r2, [pc, #176]	; (8005c48 <HAL_DMA_Abort+0x638>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <HAL_DMA_Abort+0x58e>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <HAL_DMA_Abort+0x590>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d015      	beq.n	8005bd0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00c      	beq.n	8005bd0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bc4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40020010 	.word	0x40020010
 8005bf0:	40020028 	.word	0x40020028
 8005bf4:	40020040 	.word	0x40020040
 8005bf8:	40020058 	.word	0x40020058
 8005bfc:	40020070 	.word	0x40020070
 8005c00:	40020088 	.word	0x40020088
 8005c04:	400200a0 	.word	0x400200a0
 8005c08:	400200b8 	.word	0x400200b8
 8005c0c:	40020410 	.word	0x40020410
 8005c10:	40020428 	.word	0x40020428
 8005c14:	40020440 	.word	0x40020440
 8005c18:	40020458 	.word	0x40020458
 8005c1c:	40020470 	.word	0x40020470
 8005c20:	40020488 	.word	0x40020488
 8005c24:	400204a0 	.word	0x400204a0
 8005c28:	400204b8 	.word	0x400204b8
 8005c2c:	58025408 	.word	0x58025408
 8005c30:	5802541c 	.word	0x5802541c
 8005c34:	58025430 	.word	0x58025430
 8005c38:	58025444 	.word	0x58025444
 8005c3c:	58025458 	.word	0x58025458
 8005c40:	5802546c 	.word	0x5802546c
 8005c44:	58025480 	.word	0x58025480
 8005c48:	58025494 	.word	0x58025494

08005c4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e237      	b.n	80060ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d004      	beq.n	8005c74 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2280      	movs	r2, #128	; 0x80
 8005c6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e22c      	b.n	80060ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a5c      	ldr	r2, [pc, #368]	; (8005dec <HAL_DMA_Abort_IT+0x1a0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d04a      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a5b      	ldr	r2, [pc, #364]	; (8005df0 <HAL_DMA_Abort_IT+0x1a4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d045      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a59      	ldr	r2, [pc, #356]	; (8005df4 <HAL_DMA_Abort_IT+0x1a8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d040      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a58      	ldr	r2, [pc, #352]	; (8005df8 <HAL_DMA_Abort_IT+0x1ac>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d03b      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a56      	ldr	r2, [pc, #344]	; (8005dfc <HAL_DMA_Abort_IT+0x1b0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d036      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a55      	ldr	r2, [pc, #340]	; (8005e00 <HAL_DMA_Abort_IT+0x1b4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d031      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a53      	ldr	r2, [pc, #332]	; (8005e04 <HAL_DMA_Abort_IT+0x1b8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d02c      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a52      	ldr	r2, [pc, #328]	; (8005e08 <HAL_DMA_Abort_IT+0x1bc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d027      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a50      	ldr	r2, [pc, #320]	; (8005e0c <HAL_DMA_Abort_IT+0x1c0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d022      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a4f      	ldr	r2, [pc, #316]	; (8005e10 <HAL_DMA_Abort_IT+0x1c4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d01d      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a4d      	ldr	r2, [pc, #308]	; (8005e14 <HAL_DMA_Abort_IT+0x1c8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d018      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a4c      	ldr	r2, [pc, #304]	; (8005e18 <HAL_DMA_Abort_IT+0x1cc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a4a      	ldr	r2, [pc, #296]	; (8005e1c <HAL_DMA_Abort_IT+0x1d0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00e      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a49      	ldr	r2, [pc, #292]	; (8005e20 <HAL_DMA_Abort_IT+0x1d4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d009      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a47      	ldr	r2, [pc, #284]	; (8005e24 <HAL_DMA_Abort_IT+0x1d8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_DMA_Abort_IT+0xc8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a46      	ldr	r2, [pc, #280]	; (8005e28 <HAL_DMA_Abort_IT+0x1dc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d101      	bne.n	8005d18 <HAL_DMA_Abort_IT+0xcc>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <HAL_DMA_Abort_IT+0xce>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 8086 	beq.w	8005e2c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2204      	movs	r2, #4
 8005d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2f      	ldr	r2, [pc, #188]	; (8005dec <HAL_DMA_Abort_IT+0x1a0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d04a      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2e      	ldr	r2, [pc, #184]	; (8005df0 <HAL_DMA_Abort_IT+0x1a4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d045      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a2c      	ldr	r2, [pc, #176]	; (8005df4 <HAL_DMA_Abort_IT+0x1a8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d040      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2b      	ldr	r2, [pc, #172]	; (8005df8 <HAL_DMA_Abort_IT+0x1ac>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d03b      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a29      	ldr	r2, [pc, #164]	; (8005dfc <HAL_DMA_Abort_IT+0x1b0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d036      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a28      	ldr	r2, [pc, #160]	; (8005e00 <HAL_DMA_Abort_IT+0x1b4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d031      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a26      	ldr	r2, [pc, #152]	; (8005e04 <HAL_DMA_Abort_IT+0x1b8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d02c      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <HAL_DMA_Abort_IT+0x1bc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d027      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a23      	ldr	r2, [pc, #140]	; (8005e0c <HAL_DMA_Abort_IT+0x1c0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d022      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a22      	ldr	r2, [pc, #136]	; (8005e10 <HAL_DMA_Abort_IT+0x1c4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <HAL_DMA_Abort_IT+0x1c8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d018      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1f      	ldr	r2, [pc, #124]	; (8005e18 <HAL_DMA_Abort_IT+0x1cc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1d      	ldr	r2, [pc, #116]	; (8005e1c <HAL_DMA_Abort_IT+0x1d0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1c      	ldr	r2, [pc, #112]	; (8005e20 <HAL_DMA_Abort_IT+0x1d4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1a      	ldr	r2, [pc, #104]	; (8005e24 <HAL_DMA_Abort_IT+0x1d8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x17c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a19      	ldr	r2, [pc, #100]	; (8005e28 <HAL_DMA_Abort_IT+0x1dc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d108      	bne.n	8005dda <HAL_DMA_Abort_IT+0x18e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e178      	b.n	80060cc <HAL_DMA_Abort_IT+0x480>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e16f      	b.n	80060cc <HAL_DMA_Abort_IT+0x480>
 8005dec:	40020010 	.word	0x40020010
 8005df0:	40020028 	.word	0x40020028
 8005df4:	40020040 	.word	0x40020040
 8005df8:	40020058 	.word	0x40020058
 8005dfc:	40020070 	.word	0x40020070
 8005e00:	40020088 	.word	0x40020088
 8005e04:	400200a0 	.word	0x400200a0
 8005e08:	400200b8 	.word	0x400200b8
 8005e0c:	40020410 	.word	0x40020410
 8005e10:	40020428 	.word	0x40020428
 8005e14:	40020440 	.word	0x40020440
 8005e18:	40020458 	.word	0x40020458
 8005e1c:	40020470 	.word	0x40020470
 8005e20:	40020488 	.word	0x40020488
 8005e24:	400204a0 	.word	0x400204a0
 8005e28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 020e 	bic.w	r2, r2, #14
 8005e3a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a6c      	ldr	r2, [pc, #432]	; (8005ff4 <HAL_DMA_Abort_IT+0x3a8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d04a      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a6b      	ldr	r2, [pc, #428]	; (8005ff8 <HAL_DMA_Abort_IT+0x3ac>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d045      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a69      	ldr	r2, [pc, #420]	; (8005ffc <HAL_DMA_Abort_IT+0x3b0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d040      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a68      	ldr	r2, [pc, #416]	; (8006000 <HAL_DMA_Abort_IT+0x3b4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d03b      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a66      	ldr	r2, [pc, #408]	; (8006004 <HAL_DMA_Abort_IT+0x3b8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d036      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a65      	ldr	r2, [pc, #404]	; (8006008 <HAL_DMA_Abort_IT+0x3bc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d031      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a63      	ldr	r2, [pc, #396]	; (800600c <HAL_DMA_Abort_IT+0x3c0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d02c      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a62      	ldr	r2, [pc, #392]	; (8006010 <HAL_DMA_Abort_IT+0x3c4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d027      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a60      	ldr	r2, [pc, #384]	; (8006014 <HAL_DMA_Abort_IT+0x3c8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d022      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a5f      	ldr	r2, [pc, #380]	; (8006018 <HAL_DMA_Abort_IT+0x3cc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d01d      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a5d      	ldr	r2, [pc, #372]	; (800601c <HAL_DMA_Abort_IT+0x3d0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a5c      	ldr	r2, [pc, #368]	; (8006020 <HAL_DMA_Abort_IT+0x3d4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a5a      	ldr	r2, [pc, #360]	; (8006024 <HAL_DMA_Abort_IT+0x3d8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a59      	ldr	r2, [pc, #356]	; (8006028 <HAL_DMA_Abort_IT+0x3dc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a57      	ldr	r2, [pc, #348]	; (800602c <HAL_DMA_Abort_IT+0x3e0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_DMA_Abort_IT+0x290>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a56      	ldr	r2, [pc, #344]	; (8006030 <HAL_DMA_Abort_IT+0x3e4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d108      	bne.n	8005eee <HAL_DMA_Abort_IT+0x2a2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0201 	bic.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	e007      	b.n	8005efe <HAL_DMA_Abort_IT+0x2b2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0201 	bic.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a3c      	ldr	r2, [pc, #240]	; (8005ff4 <HAL_DMA_Abort_IT+0x3a8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d072      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a3a      	ldr	r2, [pc, #232]	; (8005ff8 <HAL_DMA_Abort_IT+0x3ac>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d06d      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a39      	ldr	r2, [pc, #228]	; (8005ffc <HAL_DMA_Abort_IT+0x3b0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d068      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a37      	ldr	r2, [pc, #220]	; (8006000 <HAL_DMA_Abort_IT+0x3b4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d063      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a36      	ldr	r2, [pc, #216]	; (8006004 <HAL_DMA_Abort_IT+0x3b8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d05e      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a34      	ldr	r2, [pc, #208]	; (8006008 <HAL_DMA_Abort_IT+0x3bc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d059      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a33      	ldr	r2, [pc, #204]	; (800600c <HAL_DMA_Abort_IT+0x3c0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d054      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a31      	ldr	r2, [pc, #196]	; (8006010 <HAL_DMA_Abort_IT+0x3c4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d04f      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a30      	ldr	r2, [pc, #192]	; (8006014 <HAL_DMA_Abort_IT+0x3c8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d04a      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a2e      	ldr	r2, [pc, #184]	; (8006018 <HAL_DMA_Abort_IT+0x3cc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d045      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2d      	ldr	r2, [pc, #180]	; (800601c <HAL_DMA_Abort_IT+0x3d0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d040      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a2b      	ldr	r2, [pc, #172]	; (8006020 <HAL_DMA_Abort_IT+0x3d4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d03b      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a2a      	ldr	r2, [pc, #168]	; (8006024 <HAL_DMA_Abort_IT+0x3d8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d036      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a28      	ldr	r2, [pc, #160]	; (8006028 <HAL_DMA_Abort_IT+0x3dc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d031      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a27      	ldr	r2, [pc, #156]	; (800602c <HAL_DMA_Abort_IT+0x3e0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d02c      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a25      	ldr	r2, [pc, #148]	; (8006030 <HAL_DMA_Abort_IT+0x3e4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d027      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a24      	ldr	r2, [pc, #144]	; (8006034 <HAL_DMA_Abort_IT+0x3e8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a22      	ldr	r2, [pc, #136]	; (8006038 <HAL_DMA_Abort_IT+0x3ec>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01d      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a21      	ldr	r2, [pc, #132]	; (800603c <HAL_DMA_Abort_IT+0x3f0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d018      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <HAL_DMA_Abort_IT+0x3f4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1e      	ldr	r2, [pc, #120]	; (8006044 <HAL_DMA_Abort_IT+0x3f8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <HAL_DMA_Abort_IT+0x3fc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1b      	ldr	r2, [pc, #108]	; (800604c <HAL_DMA_Abort_IT+0x400>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_DMA_Abort_IT+0x3a2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a19      	ldr	r2, [pc, #100]	; (8006050 <HAL_DMA_Abort_IT+0x404>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d132      	bne.n	8006054 <HAL_DMA_Abort_IT+0x408>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e031      	b.n	8006056 <HAL_DMA_Abort_IT+0x40a>
 8005ff2:	bf00      	nop
 8005ff4:	40020010 	.word	0x40020010
 8005ff8:	40020028 	.word	0x40020028
 8005ffc:	40020040 	.word	0x40020040
 8006000:	40020058 	.word	0x40020058
 8006004:	40020070 	.word	0x40020070
 8006008:	40020088 	.word	0x40020088
 800600c:	400200a0 	.word	0x400200a0
 8006010:	400200b8 	.word	0x400200b8
 8006014:	40020410 	.word	0x40020410
 8006018:	40020428 	.word	0x40020428
 800601c:	40020440 	.word	0x40020440
 8006020:	40020458 	.word	0x40020458
 8006024:	40020470 	.word	0x40020470
 8006028:	40020488 	.word	0x40020488
 800602c:	400204a0 	.word	0x400204a0
 8006030:	400204b8 	.word	0x400204b8
 8006034:	58025408 	.word	0x58025408
 8006038:	5802541c 	.word	0x5802541c
 800603c:	58025430 	.word	0x58025430
 8006040:	58025444 	.word	0x58025444
 8006044:	58025458 	.word	0x58025458
 8006048:	5802546c 	.word	0x5802546c
 800604c:	58025480 	.word	0x58025480
 8006050:	58025494 	.word	0x58025494
 8006054:	2300      	movs	r3, #0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d028      	beq.n	80060ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006068:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	2201      	movs	r2, #1
 800607a:	409a      	lsls	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006088:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00c      	beq.n	80060ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop

080060d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08a      	sub	sp, #40	; 0x28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060e4:	4b67      	ldr	r3, [pc, #412]	; (8006284 <HAL_DMA_IRQHandler+0x1ac>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a67      	ldr	r2, [pc, #412]	; (8006288 <HAL_DMA_IRQHandler+0x1b0>)
 80060ea:	fba2 2303 	umull	r2, r3, r2, r3
 80060ee:	0a9b      	lsrs	r3, r3, #10
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a5f      	ldr	r2, [pc, #380]	; (800628c <HAL_DMA_IRQHandler+0x1b4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d04a      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a5d      	ldr	r2, [pc, #372]	; (8006290 <HAL_DMA_IRQHandler+0x1b8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d045      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a5c      	ldr	r2, [pc, #368]	; (8006294 <HAL_DMA_IRQHandler+0x1bc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d040      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a5a      	ldr	r2, [pc, #360]	; (8006298 <HAL_DMA_IRQHandler+0x1c0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d03b      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a59      	ldr	r2, [pc, #356]	; (800629c <HAL_DMA_IRQHandler+0x1c4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d036      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a57      	ldr	r2, [pc, #348]	; (80062a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d031      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a56      	ldr	r2, [pc, #344]	; (80062a4 <HAL_DMA_IRQHandler+0x1cc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d02c      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a54      	ldr	r2, [pc, #336]	; (80062a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d027      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a53      	ldr	r2, [pc, #332]	; (80062ac <HAL_DMA_IRQHandler+0x1d4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d022      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a51      	ldr	r2, [pc, #324]	; (80062b0 <HAL_DMA_IRQHandler+0x1d8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01d      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a50      	ldr	r2, [pc, #320]	; (80062b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d018      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a4e      	ldr	r2, [pc, #312]	; (80062b8 <HAL_DMA_IRQHandler+0x1e0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a4d      	ldr	r2, [pc, #308]	; (80062bc <HAL_DMA_IRQHandler+0x1e4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a4b      	ldr	r2, [pc, #300]	; (80062c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a4a      	ldr	r2, [pc, #296]	; (80062c4 <HAL_DMA_IRQHandler+0x1ec>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_DMA_IRQHandler+0xd2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a48      	ldr	r2, [pc, #288]	; (80062c8 <HAL_DMA_IRQHandler+0x1f0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d101      	bne.n	80061ae <HAL_DMA_IRQHandler+0xd6>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <HAL_DMA_IRQHandler+0xd8>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 842b 	beq.w	8006a0c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	2208      	movs	r2, #8
 80061c0:	409a      	lsls	r2, r3
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80a2 	beq.w	8006310 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a2e      	ldr	r2, [pc, #184]	; (800628c <HAL_DMA_IRQHandler+0x1b4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d04a      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a2d      	ldr	r2, [pc, #180]	; (8006290 <HAL_DMA_IRQHandler+0x1b8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d045      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a2b      	ldr	r2, [pc, #172]	; (8006294 <HAL_DMA_IRQHandler+0x1bc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d040      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a2a      	ldr	r2, [pc, #168]	; (8006298 <HAL_DMA_IRQHandler+0x1c0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d03b      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a28      	ldr	r2, [pc, #160]	; (800629c <HAL_DMA_IRQHandler+0x1c4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d036      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a27      	ldr	r2, [pc, #156]	; (80062a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d031      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a25      	ldr	r2, [pc, #148]	; (80062a4 <HAL_DMA_IRQHandler+0x1cc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d02c      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a24      	ldr	r2, [pc, #144]	; (80062a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d027      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a22      	ldr	r2, [pc, #136]	; (80062ac <HAL_DMA_IRQHandler+0x1d4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d022      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <HAL_DMA_IRQHandler+0x1d8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d01d      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1f      	ldr	r2, [pc, #124]	; (80062b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d018      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <HAL_DMA_IRQHandler+0x1e0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1c      	ldr	r2, [pc, #112]	; (80062bc <HAL_DMA_IRQHandler+0x1e4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00e      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d009      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a19      	ldr	r2, [pc, #100]	; (80062c4 <HAL_DMA_IRQHandler+0x1ec>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d004      	beq.n	800626c <HAL_DMA_IRQHandler+0x194>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_DMA_IRQHandler+0x1f0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d12f      	bne.n	80062cc <HAL_DMA_IRQHandler+0x1f4>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	bf14      	ite	ne
 800627a:	2301      	movne	r3, #1
 800627c:	2300      	moveq	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	e02e      	b.n	80062e0 <HAL_DMA_IRQHandler+0x208>
 8006282:	bf00      	nop
 8006284:	24000004 	.word	0x24000004
 8006288:	1b4e81b5 	.word	0x1b4e81b5
 800628c:	40020010 	.word	0x40020010
 8006290:	40020028 	.word	0x40020028
 8006294:	40020040 	.word	0x40020040
 8006298:	40020058 	.word	0x40020058
 800629c:	40020070 	.word	0x40020070
 80062a0:	40020088 	.word	0x40020088
 80062a4:	400200a0 	.word	0x400200a0
 80062a8:	400200b8 	.word	0x400200b8
 80062ac:	40020410 	.word	0x40020410
 80062b0:	40020428 	.word	0x40020428
 80062b4:	40020440 	.word	0x40020440
 80062b8:	40020458 	.word	0x40020458
 80062bc:	40020470 	.word	0x40020470
 80062c0:	40020488 	.word	0x40020488
 80062c4:	400204a0 	.word	0x400204a0
 80062c8:	400204b8 	.word	0x400204b8
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bf14      	ite	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	2300      	moveq	r3, #0
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d015      	beq.n	8006310 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0204 	bic.w	r2, r2, #4
 80062f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	2208      	movs	r2, #8
 80062fe:	409a      	lsls	r2, r3
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006308:	f043 0201 	orr.w	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	fa22 f303 	lsr.w	r3, r2, r3
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d06e      	beq.n	8006404 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a69      	ldr	r2, [pc, #420]	; (80064d0 <HAL_DMA_IRQHandler+0x3f8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d04a      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a67      	ldr	r2, [pc, #412]	; (80064d4 <HAL_DMA_IRQHandler+0x3fc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d045      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a66      	ldr	r2, [pc, #408]	; (80064d8 <HAL_DMA_IRQHandler+0x400>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d040      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a64      	ldr	r2, [pc, #400]	; (80064dc <HAL_DMA_IRQHandler+0x404>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d03b      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a63      	ldr	r2, [pc, #396]	; (80064e0 <HAL_DMA_IRQHandler+0x408>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d036      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a61      	ldr	r2, [pc, #388]	; (80064e4 <HAL_DMA_IRQHandler+0x40c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d031      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a60      	ldr	r2, [pc, #384]	; (80064e8 <HAL_DMA_IRQHandler+0x410>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d02c      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a5e      	ldr	r2, [pc, #376]	; (80064ec <HAL_DMA_IRQHandler+0x414>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d027      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a5d      	ldr	r2, [pc, #372]	; (80064f0 <HAL_DMA_IRQHandler+0x418>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d022      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a5b      	ldr	r2, [pc, #364]	; (80064f4 <HAL_DMA_IRQHandler+0x41c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01d      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a5a      	ldr	r2, [pc, #360]	; (80064f8 <HAL_DMA_IRQHandler+0x420>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d018      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a58      	ldr	r2, [pc, #352]	; (80064fc <HAL_DMA_IRQHandler+0x424>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d013      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a57      	ldr	r2, [pc, #348]	; (8006500 <HAL_DMA_IRQHandler+0x428>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00e      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a55      	ldr	r2, [pc, #340]	; (8006504 <HAL_DMA_IRQHandler+0x42c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a54      	ldr	r2, [pc, #336]	; (8006508 <HAL_DMA_IRQHandler+0x430>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x2ee>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a52      	ldr	r2, [pc, #328]	; (800650c <HAL_DMA_IRQHandler+0x434>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d10a      	bne.n	80063dc <HAL_DMA_IRQHandler+0x304>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bf14      	ite	ne
 80063d4:	2301      	movne	r3, #1
 80063d6:	2300      	moveq	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	e003      	b.n	80063e4 <HAL_DMA_IRQHandler+0x30c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2300      	movs	r3, #0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00d      	beq.n	8006404 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2201      	movs	r2, #1
 80063f2:	409a      	lsls	r2, r3
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fc:	f043 0202 	orr.w	r2, r3, #2
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	2204      	movs	r2, #4
 800640e:	409a      	lsls	r2, r3
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	4013      	ands	r3, r2
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 808f 	beq.w	8006538 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a2c      	ldr	r2, [pc, #176]	; (80064d0 <HAL_DMA_IRQHandler+0x3f8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d04a      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a2a      	ldr	r2, [pc, #168]	; (80064d4 <HAL_DMA_IRQHandler+0x3fc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d045      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a29      	ldr	r2, [pc, #164]	; (80064d8 <HAL_DMA_IRQHandler+0x400>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d040      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a27      	ldr	r2, [pc, #156]	; (80064dc <HAL_DMA_IRQHandler+0x404>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d03b      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a26      	ldr	r2, [pc, #152]	; (80064e0 <HAL_DMA_IRQHandler+0x408>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d036      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a24      	ldr	r2, [pc, #144]	; (80064e4 <HAL_DMA_IRQHandler+0x40c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d031      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a23      	ldr	r2, [pc, #140]	; (80064e8 <HAL_DMA_IRQHandler+0x410>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d02c      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a21      	ldr	r2, [pc, #132]	; (80064ec <HAL_DMA_IRQHandler+0x414>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d027      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a20      	ldr	r2, [pc, #128]	; (80064f0 <HAL_DMA_IRQHandler+0x418>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d022      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1e      	ldr	r2, [pc, #120]	; (80064f4 <HAL_DMA_IRQHandler+0x41c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01d      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1d      	ldr	r2, [pc, #116]	; (80064f8 <HAL_DMA_IRQHandler+0x420>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d018      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <HAL_DMA_IRQHandler+0x424>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d013      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1a      	ldr	r2, [pc, #104]	; (8006500 <HAL_DMA_IRQHandler+0x428>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00e      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a18      	ldr	r2, [pc, #96]	; (8006504 <HAL_DMA_IRQHandler+0x42c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d009      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a17      	ldr	r2, [pc, #92]	; (8006508 <HAL_DMA_IRQHandler+0x430>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_DMA_IRQHandler+0x3e2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a15      	ldr	r2, [pc, #84]	; (800650c <HAL_DMA_IRQHandler+0x434>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d12a      	bne.n	8006510 <HAL_DMA_IRQHandler+0x438>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bf14      	ite	ne
 80064c8:	2301      	movne	r3, #1
 80064ca:	2300      	moveq	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	e023      	b.n	8006518 <HAL_DMA_IRQHandler+0x440>
 80064d0:	40020010 	.word	0x40020010
 80064d4:	40020028 	.word	0x40020028
 80064d8:	40020040 	.word	0x40020040
 80064dc:	40020058 	.word	0x40020058
 80064e0:	40020070 	.word	0x40020070
 80064e4:	40020088 	.word	0x40020088
 80064e8:	400200a0 	.word	0x400200a0
 80064ec:	400200b8 	.word	0x400200b8
 80064f0:	40020410 	.word	0x40020410
 80064f4:	40020428 	.word	0x40020428
 80064f8:	40020440 	.word	0x40020440
 80064fc:	40020458 	.word	0x40020458
 8006500:	40020470 	.word	0x40020470
 8006504:	40020488 	.word	0x40020488
 8006508:	400204a0 	.word	0x400204a0
 800650c:	400204b8 	.word	0x400204b8
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2300      	movs	r3, #0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00d      	beq.n	8006538 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	2204      	movs	r2, #4
 8006526:	409a      	lsls	r2, r3
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006530:	f043 0204 	orr.w	r2, r3, #4
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	2210      	movs	r2, #16
 8006542:	409a      	lsls	r2, r3
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	4013      	ands	r3, r2
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 80a6 	beq.w	800669a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a85      	ldr	r2, [pc, #532]	; (8006768 <HAL_DMA_IRQHandler+0x690>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d04a      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a83      	ldr	r2, [pc, #524]	; (800676c <HAL_DMA_IRQHandler+0x694>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d045      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a82      	ldr	r2, [pc, #520]	; (8006770 <HAL_DMA_IRQHandler+0x698>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d040      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a80      	ldr	r2, [pc, #512]	; (8006774 <HAL_DMA_IRQHandler+0x69c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d03b      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a7f      	ldr	r2, [pc, #508]	; (8006778 <HAL_DMA_IRQHandler+0x6a0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d036      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a7d      	ldr	r2, [pc, #500]	; (800677c <HAL_DMA_IRQHandler+0x6a4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d031      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a7c      	ldr	r2, [pc, #496]	; (8006780 <HAL_DMA_IRQHandler+0x6a8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d02c      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a7a      	ldr	r2, [pc, #488]	; (8006784 <HAL_DMA_IRQHandler+0x6ac>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d027      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a79      	ldr	r2, [pc, #484]	; (8006788 <HAL_DMA_IRQHandler+0x6b0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d022      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a77      	ldr	r2, [pc, #476]	; (800678c <HAL_DMA_IRQHandler+0x6b4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d01d      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a76      	ldr	r2, [pc, #472]	; (8006790 <HAL_DMA_IRQHandler+0x6b8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d018      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a74      	ldr	r2, [pc, #464]	; (8006794 <HAL_DMA_IRQHandler+0x6bc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a73      	ldr	r2, [pc, #460]	; (8006798 <HAL_DMA_IRQHandler+0x6c0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00e      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a71      	ldr	r2, [pc, #452]	; (800679c <HAL_DMA_IRQHandler+0x6c4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d009      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a70      	ldr	r2, [pc, #448]	; (80067a0 <HAL_DMA_IRQHandler+0x6c8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <HAL_DMA_IRQHandler+0x516>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a6e      	ldr	r2, [pc, #440]	; (80067a4 <HAL_DMA_IRQHandler+0x6cc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d10a      	bne.n	8006604 <HAL_DMA_IRQHandler+0x52c>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf14      	ite	ne
 80065fc:	2301      	movne	r3, #1
 80065fe:	2300      	moveq	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	e009      	b.n	8006618 <HAL_DMA_IRQHandler+0x540>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b00      	cmp	r3, #0
 8006610:	bf14      	ite	ne
 8006612:	2301      	movne	r3, #1
 8006614:	2300      	moveq	r3, #0
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d03e      	beq.n	800669a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006620:	f003 031f 	and.w	r3, r3, #31
 8006624:	2210      	movs	r2, #16
 8006626:	409a      	lsls	r2, r3
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d018      	beq.n	800666c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d108      	bne.n	800665a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d024      	beq.n	800669a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
 8006658:	e01f      	b.n	800669a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01b      	beq.n	800669a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
 800666a:	e016      	b.n	800669a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d107      	bne.n	800668a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0208 	bic.w	r2, r2, #8
 8006688:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	2220      	movs	r2, #32
 80066a4:	409a      	lsls	r2, r3
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8110 	beq.w	80068d0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2c      	ldr	r2, [pc, #176]	; (8006768 <HAL_DMA_IRQHandler+0x690>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d04a      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a2b      	ldr	r2, [pc, #172]	; (800676c <HAL_DMA_IRQHandler+0x694>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d045      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a29      	ldr	r2, [pc, #164]	; (8006770 <HAL_DMA_IRQHandler+0x698>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d040      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a28      	ldr	r2, [pc, #160]	; (8006774 <HAL_DMA_IRQHandler+0x69c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d03b      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a26      	ldr	r2, [pc, #152]	; (8006778 <HAL_DMA_IRQHandler+0x6a0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d036      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a25      	ldr	r2, [pc, #148]	; (800677c <HAL_DMA_IRQHandler+0x6a4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d031      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a23      	ldr	r2, [pc, #140]	; (8006780 <HAL_DMA_IRQHandler+0x6a8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d02c      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a22      	ldr	r2, [pc, #136]	; (8006784 <HAL_DMA_IRQHandler+0x6ac>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d027      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a20      	ldr	r2, [pc, #128]	; (8006788 <HAL_DMA_IRQHandler+0x6b0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d022      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1f      	ldr	r2, [pc, #124]	; (800678c <HAL_DMA_IRQHandler+0x6b4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d01d      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1d      	ldr	r2, [pc, #116]	; (8006790 <HAL_DMA_IRQHandler+0x6b8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d018      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1c      	ldr	r2, [pc, #112]	; (8006794 <HAL_DMA_IRQHandler+0x6bc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d013      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1a      	ldr	r2, [pc, #104]	; (8006798 <HAL_DMA_IRQHandler+0x6c0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00e      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a19      	ldr	r2, [pc, #100]	; (800679c <HAL_DMA_IRQHandler+0x6c4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d009      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a17      	ldr	r2, [pc, #92]	; (80067a0 <HAL_DMA_IRQHandler+0x6c8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d004      	beq.n	8006750 <HAL_DMA_IRQHandler+0x678>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a16      	ldr	r2, [pc, #88]	; (80067a4 <HAL_DMA_IRQHandler+0x6cc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d12b      	bne.n	80067a8 <HAL_DMA_IRQHandler+0x6d0>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b00      	cmp	r3, #0
 800675c:	bf14      	ite	ne
 800675e:	2301      	movne	r3, #1
 8006760:	2300      	moveq	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	e02a      	b.n	80067bc <HAL_DMA_IRQHandler+0x6e4>
 8006766:	bf00      	nop
 8006768:	40020010 	.word	0x40020010
 800676c:	40020028 	.word	0x40020028
 8006770:	40020040 	.word	0x40020040
 8006774:	40020058 	.word	0x40020058
 8006778:	40020070 	.word	0x40020070
 800677c:	40020088 	.word	0x40020088
 8006780:	400200a0 	.word	0x400200a0
 8006784:	400200b8 	.word	0x400200b8
 8006788:	40020410 	.word	0x40020410
 800678c:	40020428 	.word	0x40020428
 8006790:	40020440 	.word	0x40020440
 8006794:	40020458 	.word	0x40020458
 8006798:	40020470 	.word	0x40020470
 800679c:	40020488 	.word	0x40020488
 80067a0:	400204a0 	.word	0x400204a0
 80067a4:	400204b8 	.word	0x400204b8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bf14      	ite	ne
 80067b6:	2301      	movne	r3, #1
 80067b8:	2300      	moveq	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 8087 	beq.w	80068d0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2220      	movs	r2, #32
 80067cc:	409a      	lsls	r2, r3
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d139      	bne.n	8006852 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0216 	bic.w	r2, r2, #22
 80067ec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695a      	ldr	r2, [r3, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067fc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	2b00      	cmp	r3, #0
 8006804:	d103      	bne.n	800680e <HAL_DMA_IRQHandler+0x736>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0208 	bic.w	r2, r2, #8
 800681c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	223f      	movs	r2, #63	; 0x3f
 8006828:	409a      	lsls	r2, r3
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 834a 	beq.w	8006edc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4798      	blx	r3
          }
          return;
 8006850:	e344      	b.n	8006edc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d018      	beq.n	8006892 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d108      	bne.n	8006880 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006872:	2b00      	cmp	r3, #0
 8006874:	d02c      	beq.n	80068d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
 800687e:	e027      	b.n	80068d0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d023      	beq.n	80068d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
 8006890:	e01e      	b.n	80068d0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10f      	bne.n	80068c0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0210 	bic.w	r2, r2, #16
 80068ae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8306 	beq.w	8006ee6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 8088 	beq.w	80069f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2204      	movs	r2, #4
 80068ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a7a      	ldr	r2, [pc, #488]	; (8006ae0 <HAL_DMA_IRQHandler+0xa08>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d04a      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a79      	ldr	r2, [pc, #484]	; (8006ae4 <HAL_DMA_IRQHandler+0xa0c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d045      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a77      	ldr	r2, [pc, #476]	; (8006ae8 <HAL_DMA_IRQHandler+0xa10>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d040      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a76      	ldr	r2, [pc, #472]	; (8006aec <HAL_DMA_IRQHandler+0xa14>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d03b      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a74      	ldr	r2, [pc, #464]	; (8006af0 <HAL_DMA_IRQHandler+0xa18>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d036      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a73      	ldr	r2, [pc, #460]	; (8006af4 <HAL_DMA_IRQHandler+0xa1c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d031      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a71      	ldr	r2, [pc, #452]	; (8006af8 <HAL_DMA_IRQHandler+0xa20>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d02c      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a70      	ldr	r2, [pc, #448]	; (8006afc <HAL_DMA_IRQHandler+0xa24>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d027      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a6e      	ldr	r2, [pc, #440]	; (8006b00 <HAL_DMA_IRQHandler+0xa28>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d022      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a6d      	ldr	r2, [pc, #436]	; (8006b04 <HAL_DMA_IRQHandler+0xa2c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d01d      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a6b      	ldr	r2, [pc, #428]	; (8006b08 <HAL_DMA_IRQHandler+0xa30>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d018      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a6a      	ldr	r2, [pc, #424]	; (8006b0c <HAL_DMA_IRQHandler+0xa34>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d013      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a68      	ldr	r2, [pc, #416]	; (8006b10 <HAL_DMA_IRQHandler+0xa38>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00e      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a67      	ldr	r2, [pc, #412]	; (8006b14 <HAL_DMA_IRQHandler+0xa3c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d009      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a65      	ldr	r2, [pc, #404]	; (8006b18 <HAL_DMA_IRQHandler+0xa40>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d004      	beq.n	8006990 <HAL_DMA_IRQHandler+0x8b8>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a64      	ldr	r2, [pc, #400]	; (8006b1c <HAL_DMA_IRQHandler+0xa44>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d108      	bne.n	80069a2 <HAL_DMA_IRQHandler+0x8ca>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0201 	bic.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	e007      	b.n	80069b2 <HAL_DMA_IRQHandler+0x8da>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0201 	bic.w	r2, r2, #1
 80069b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d307      	bcc.n	80069ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1f2      	bne.n	80069b2 <HAL_DMA_IRQHandler+0x8da>
 80069cc:	e000      	b.n	80069d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80069ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d004      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2203      	movs	r2, #3
 80069e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80069e6:	e003      	b.n	80069f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8272 	beq.w	8006ee6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
 8006a0a:	e26c      	b.n	8006ee6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a43      	ldr	r2, [pc, #268]	; (8006b20 <HAL_DMA_IRQHandler+0xa48>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d022      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x984>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a42      	ldr	r2, [pc, #264]	; (8006b24 <HAL_DMA_IRQHandler+0xa4c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d01d      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x984>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a40      	ldr	r2, [pc, #256]	; (8006b28 <HAL_DMA_IRQHandler+0xa50>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d018      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x984>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a3f      	ldr	r2, [pc, #252]	; (8006b2c <HAL_DMA_IRQHandler+0xa54>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x984>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a3d      	ldr	r2, [pc, #244]	; (8006b30 <HAL_DMA_IRQHandler+0xa58>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00e      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x984>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a3c      	ldr	r2, [pc, #240]	; (8006b34 <HAL_DMA_IRQHandler+0xa5c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d009      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x984>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a3a      	ldr	r2, [pc, #232]	; (8006b38 <HAL_DMA_IRQHandler+0xa60>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x984>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a39      	ldr	r2, [pc, #228]	; (8006b3c <HAL_DMA_IRQHandler+0xa64>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d101      	bne.n	8006a60 <HAL_DMA_IRQHandler+0x988>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e000      	b.n	8006a62 <HAL_DMA_IRQHandler+0x98a>
 8006a60:	2300      	movs	r3, #0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 823f 	beq.w	8006ee6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	2204      	movs	r2, #4
 8006a7a:	409a      	lsls	r2, r3
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80cd 	beq.w	8006c20 <HAL_DMA_IRQHandler+0xb48>
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 80c7 	beq.w	8006c20 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a96:	f003 031f 	and.w	r3, r3, #31
 8006a9a:	2204      	movs	r2, #4
 8006a9c:	409a      	lsls	r2, r3
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d049      	beq.n	8006b40 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 8210 	beq.w	8006ee0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ac8:	e20a      	b.n	8006ee0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 8206 	beq.w	8006ee0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006adc:	e200      	b.n	8006ee0 <HAL_DMA_IRQHandler+0xe08>
 8006ade:	bf00      	nop
 8006ae0:	40020010 	.word	0x40020010
 8006ae4:	40020028 	.word	0x40020028
 8006ae8:	40020040 	.word	0x40020040
 8006aec:	40020058 	.word	0x40020058
 8006af0:	40020070 	.word	0x40020070
 8006af4:	40020088 	.word	0x40020088
 8006af8:	400200a0 	.word	0x400200a0
 8006afc:	400200b8 	.word	0x400200b8
 8006b00:	40020410 	.word	0x40020410
 8006b04:	40020428 	.word	0x40020428
 8006b08:	40020440 	.word	0x40020440
 8006b0c:	40020458 	.word	0x40020458
 8006b10:	40020470 	.word	0x40020470
 8006b14:	40020488 	.word	0x40020488
 8006b18:	400204a0 	.word	0x400204a0
 8006b1c:	400204b8 	.word	0x400204b8
 8006b20:	58025408 	.word	0x58025408
 8006b24:	5802541c 	.word	0x5802541c
 8006b28:	58025430 	.word	0x58025430
 8006b2c:	58025444 	.word	0x58025444
 8006b30:	58025458 	.word	0x58025458
 8006b34:	5802546c 	.word	0x5802546c
 8006b38:	58025480 	.word	0x58025480
 8006b3c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d160      	bne.n	8006c0c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a7f      	ldr	r2, [pc, #508]	; (8006d4c <HAL_DMA_IRQHandler+0xc74>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d04a      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a7d      	ldr	r2, [pc, #500]	; (8006d50 <HAL_DMA_IRQHandler+0xc78>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d045      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a7c      	ldr	r2, [pc, #496]	; (8006d54 <HAL_DMA_IRQHandler+0xc7c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d040      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a7a      	ldr	r2, [pc, #488]	; (8006d58 <HAL_DMA_IRQHandler+0xc80>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d03b      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a79      	ldr	r2, [pc, #484]	; (8006d5c <HAL_DMA_IRQHandler+0xc84>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d036      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a77      	ldr	r2, [pc, #476]	; (8006d60 <HAL_DMA_IRQHandler+0xc88>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d031      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a76      	ldr	r2, [pc, #472]	; (8006d64 <HAL_DMA_IRQHandler+0xc8c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d02c      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a74      	ldr	r2, [pc, #464]	; (8006d68 <HAL_DMA_IRQHandler+0xc90>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d027      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a73      	ldr	r2, [pc, #460]	; (8006d6c <HAL_DMA_IRQHandler+0xc94>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d022      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a71      	ldr	r2, [pc, #452]	; (8006d70 <HAL_DMA_IRQHandler+0xc98>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d01d      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a70      	ldr	r2, [pc, #448]	; (8006d74 <HAL_DMA_IRQHandler+0xc9c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d018      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a6e      	ldr	r2, [pc, #440]	; (8006d78 <HAL_DMA_IRQHandler+0xca0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a6d      	ldr	r2, [pc, #436]	; (8006d7c <HAL_DMA_IRQHandler+0xca4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00e      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a6b      	ldr	r2, [pc, #428]	; (8006d80 <HAL_DMA_IRQHandler+0xca8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d009      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a6a      	ldr	r2, [pc, #424]	; (8006d84 <HAL_DMA_IRQHandler+0xcac>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d004      	beq.n	8006bea <HAL_DMA_IRQHandler+0xb12>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a68      	ldr	r2, [pc, #416]	; (8006d88 <HAL_DMA_IRQHandler+0xcb0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d108      	bne.n	8006bfc <HAL_DMA_IRQHandler+0xb24>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0208 	bic.w	r2, r2, #8
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	e007      	b.n	8006c0c <HAL_DMA_IRQHandler+0xb34>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0204 	bic.w	r2, r2, #4
 8006c0a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8165 	beq.w	8006ee0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c1e:	e15f      	b.n	8006ee0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2202      	movs	r2, #2
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80c5 	beq.w	8006dc0 <HAL_DMA_IRQHandler+0xce8>
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80bf 	beq.w	8006dc0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	409a      	lsls	r2, r3
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d018      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 813a 	beq.w	8006ee4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c78:	e134      	b.n	8006ee4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 8130 	beq.w	8006ee4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c8c:	e12a      	b.n	8006ee4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f040 8089 	bne.w	8006dac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a2b      	ldr	r2, [pc, #172]	; (8006d4c <HAL_DMA_IRQHandler+0xc74>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d04a      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a29      	ldr	r2, [pc, #164]	; (8006d50 <HAL_DMA_IRQHandler+0xc78>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d045      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a28      	ldr	r2, [pc, #160]	; (8006d54 <HAL_DMA_IRQHandler+0xc7c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d040      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <HAL_DMA_IRQHandler+0xc80>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d03b      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a25      	ldr	r2, [pc, #148]	; (8006d5c <HAL_DMA_IRQHandler+0xc84>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d036      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a23      	ldr	r2, [pc, #140]	; (8006d60 <HAL_DMA_IRQHandler+0xc88>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d031      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a22      	ldr	r2, [pc, #136]	; (8006d64 <HAL_DMA_IRQHandler+0xc8c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d02c      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <HAL_DMA_IRQHandler+0xc90>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d027      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a1f      	ldr	r2, [pc, #124]	; (8006d6c <HAL_DMA_IRQHandler+0xc94>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d022      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1d      	ldr	r2, [pc, #116]	; (8006d70 <HAL_DMA_IRQHandler+0xc98>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d01d      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a1c      	ldr	r2, [pc, #112]	; (8006d74 <HAL_DMA_IRQHandler+0xc9c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d018      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a1a      	ldr	r2, [pc, #104]	; (8006d78 <HAL_DMA_IRQHandler+0xca0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a19      	ldr	r2, [pc, #100]	; (8006d7c <HAL_DMA_IRQHandler+0xca4>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d00e      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a17      	ldr	r2, [pc, #92]	; (8006d80 <HAL_DMA_IRQHandler+0xca8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d009      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a16      	ldr	r2, [pc, #88]	; (8006d84 <HAL_DMA_IRQHandler+0xcac>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d004      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xc62>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a14      	ldr	r2, [pc, #80]	; (8006d88 <HAL_DMA_IRQHandler+0xcb0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d128      	bne.n	8006d8c <HAL_DMA_IRQHandler+0xcb4>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0214 	bic.w	r2, r2, #20
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	e027      	b.n	8006d9c <HAL_DMA_IRQHandler+0xcc4>
 8006d4c:	40020010 	.word	0x40020010
 8006d50:	40020028 	.word	0x40020028
 8006d54:	40020040 	.word	0x40020040
 8006d58:	40020058 	.word	0x40020058
 8006d5c:	40020070 	.word	0x40020070
 8006d60:	40020088 	.word	0x40020088
 8006d64:	400200a0 	.word	0x400200a0
 8006d68:	400200b8 	.word	0x400200b8
 8006d6c:	40020410 	.word	0x40020410
 8006d70:	40020428 	.word	0x40020428
 8006d74:	40020440 	.word	0x40020440
 8006d78:	40020458 	.word	0x40020458
 8006d7c:	40020470 	.word	0x40020470
 8006d80:	40020488 	.word	0x40020488
 8006d84:	400204a0 	.word	0x400204a0
 8006d88:	400204b8 	.word	0x400204b8
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 020a 	bic.w	r2, r2, #10
 8006d9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8097 	beq.w	8006ee4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dbe:	e091      	b.n	8006ee4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	2208      	movs	r2, #8
 8006dca:	409a      	lsls	r2, r3
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8088 	beq.w	8006ee6 <HAL_DMA_IRQHandler+0xe0e>
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f003 0308 	and.w	r3, r3, #8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8082 	beq.w	8006ee6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a41      	ldr	r2, [pc, #260]	; (8006eec <HAL_DMA_IRQHandler+0xe14>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d04a      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a3f      	ldr	r2, [pc, #252]	; (8006ef0 <HAL_DMA_IRQHandler+0xe18>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d045      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a3e      	ldr	r2, [pc, #248]	; (8006ef4 <HAL_DMA_IRQHandler+0xe1c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d040      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a3c      	ldr	r2, [pc, #240]	; (8006ef8 <HAL_DMA_IRQHandler+0xe20>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d03b      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a3b      	ldr	r2, [pc, #236]	; (8006efc <HAL_DMA_IRQHandler+0xe24>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d036      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a39      	ldr	r2, [pc, #228]	; (8006f00 <HAL_DMA_IRQHandler+0xe28>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d031      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a38      	ldr	r2, [pc, #224]	; (8006f04 <HAL_DMA_IRQHandler+0xe2c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d02c      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a36      	ldr	r2, [pc, #216]	; (8006f08 <HAL_DMA_IRQHandler+0xe30>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d027      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a35      	ldr	r2, [pc, #212]	; (8006f0c <HAL_DMA_IRQHandler+0xe34>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d022      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a33      	ldr	r2, [pc, #204]	; (8006f10 <HAL_DMA_IRQHandler+0xe38>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d01d      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a32      	ldr	r2, [pc, #200]	; (8006f14 <HAL_DMA_IRQHandler+0xe3c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d018      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a30      	ldr	r2, [pc, #192]	; (8006f18 <HAL_DMA_IRQHandler+0xe40>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d013      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a2f      	ldr	r2, [pc, #188]	; (8006f1c <HAL_DMA_IRQHandler+0xe44>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00e      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a2d      	ldr	r2, [pc, #180]	; (8006f20 <HAL_DMA_IRQHandler+0xe48>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a2c      	ldr	r2, [pc, #176]	; (8006f24 <HAL_DMA_IRQHandler+0xe4c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d004      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xdaa>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a2a      	ldr	r2, [pc, #168]	; (8006f28 <HAL_DMA_IRQHandler+0xe50>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d108      	bne.n	8006e94 <HAL_DMA_IRQHandler+0xdbc>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 021c 	bic.w	r2, r2, #28
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	e007      	b.n	8006ea4 <HAL_DMA_IRQHandler+0xdcc>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 020e 	bic.w	r2, r2, #14
 8006ea2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2201      	movs	r2, #1
 8006eae:	409a      	lsls	r2, r3
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d009      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	4798      	blx	r3
 8006eda:	e004      	b.n	8006ee6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006edc:	bf00      	nop
 8006ede:	e002      	b.n	8006ee6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ee0:	bf00      	nop
 8006ee2:	e000      	b.n	8006ee6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ee4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ee6:	3728      	adds	r7, #40	; 0x28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40020010 	.word	0x40020010
 8006ef0:	40020028 	.word	0x40020028
 8006ef4:	40020040 	.word	0x40020040
 8006ef8:	40020058 	.word	0x40020058
 8006efc:	40020070 	.word	0x40020070
 8006f00:	40020088 	.word	0x40020088
 8006f04:	400200a0 	.word	0x400200a0
 8006f08:	400200b8 	.word	0x400200b8
 8006f0c:	40020410 	.word	0x40020410
 8006f10:	40020428 	.word	0x40020428
 8006f14:	40020440 	.word	0x40020440
 8006f18:	40020458 	.word	0x40020458
 8006f1c:	40020470 	.word	0x40020470
 8006f20:	40020488 	.word	0x40020488
 8006f24:	400204a0 	.word	0x400204a0
 8006f28:	400204b8 	.word	0x400204b8

08006f2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f44:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a7f      	ldr	r2, [pc, #508]	; (8007148 <DMA_SetConfig+0x21c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d072      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a7d      	ldr	r2, [pc, #500]	; (800714c <DMA_SetConfig+0x220>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d06d      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a7c      	ldr	r2, [pc, #496]	; (8007150 <DMA_SetConfig+0x224>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d068      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a7a      	ldr	r2, [pc, #488]	; (8007154 <DMA_SetConfig+0x228>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d063      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a79      	ldr	r2, [pc, #484]	; (8007158 <DMA_SetConfig+0x22c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d05e      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a77      	ldr	r2, [pc, #476]	; (800715c <DMA_SetConfig+0x230>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d059      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a76      	ldr	r2, [pc, #472]	; (8007160 <DMA_SetConfig+0x234>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d054      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a74      	ldr	r2, [pc, #464]	; (8007164 <DMA_SetConfig+0x238>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d04f      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a73      	ldr	r2, [pc, #460]	; (8007168 <DMA_SetConfig+0x23c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d04a      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a71      	ldr	r2, [pc, #452]	; (800716c <DMA_SetConfig+0x240>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d045      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a70      	ldr	r2, [pc, #448]	; (8007170 <DMA_SetConfig+0x244>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d040      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a6e      	ldr	r2, [pc, #440]	; (8007174 <DMA_SetConfig+0x248>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d03b      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a6d      	ldr	r2, [pc, #436]	; (8007178 <DMA_SetConfig+0x24c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d036      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a6b      	ldr	r2, [pc, #428]	; (800717c <DMA_SetConfig+0x250>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d031      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a6a      	ldr	r2, [pc, #424]	; (8007180 <DMA_SetConfig+0x254>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d02c      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a68      	ldr	r2, [pc, #416]	; (8007184 <DMA_SetConfig+0x258>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d027      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a67      	ldr	r2, [pc, #412]	; (8007188 <DMA_SetConfig+0x25c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d022      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a65      	ldr	r2, [pc, #404]	; (800718c <DMA_SetConfig+0x260>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d01d      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a64      	ldr	r2, [pc, #400]	; (8007190 <DMA_SetConfig+0x264>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d018      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a62      	ldr	r2, [pc, #392]	; (8007194 <DMA_SetConfig+0x268>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d013      	beq.n	8007036 <DMA_SetConfig+0x10a>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a61      	ldr	r2, [pc, #388]	; (8007198 <DMA_SetConfig+0x26c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00e      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a5f      	ldr	r2, [pc, #380]	; (800719c <DMA_SetConfig+0x270>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d009      	beq.n	8007036 <DMA_SetConfig+0x10a>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a5e      	ldr	r2, [pc, #376]	; (80071a0 <DMA_SetConfig+0x274>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d004      	beq.n	8007036 <DMA_SetConfig+0x10a>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a5c      	ldr	r2, [pc, #368]	; (80071a4 <DMA_SetConfig+0x278>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d101      	bne.n	800703a <DMA_SetConfig+0x10e>
 8007036:	2301      	movs	r3, #1
 8007038:	e000      	b.n	800703c <DMA_SetConfig+0x110>
 800703a:	2300      	movs	r3, #0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00d      	beq.n	800705c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007048:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800705a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a39      	ldr	r2, [pc, #228]	; (8007148 <DMA_SetConfig+0x21c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d04a      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a38      	ldr	r2, [pc, #224]	; (800714c <DMA_SetConfig+0x220>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d045      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a36      	ldr	r2, [pc, #216]	; (8007150 <DMA_SetConfig+0x224>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d040      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a35      	ldr	r2, [pc, #212]	; (8007154 <DMA_SetConfig+0x228>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d03b      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a33      	ldr	r2, [pc, #204]	; (8007158 <DMA_SetConfig+0x22c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d036      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a32      	ldr	r2, [pc, #200]	; (800715c <DMA_SetConfig+0x230>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d031      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a30      	ldr	r2, [pc, #192]	; (8007160 <DMA_SetConfig+0x234>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d02c      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a2f      	ldr	r2, [pc, #188]	; (8007164 <DMA_SetConfig+0x238>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d027      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a2d      	ldr	r2, [pc, #180]	; (8007168 <DMA_SetConfig+0x23c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d022      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a2c      	ldr	r2, [pc, #176]	; (800716c <DMA_SetConfig+0x240>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d01d      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a2a      	ldr	r2, [pc, #168]	; (8007170 <DMA_SetConfig+0x244>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d018      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a29      	ldr	r2, [pc, #164]	; (8007174 <DMA_SetConfig+0x248>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d013      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a27      	ldr	r2, [pc, #156]	; (8007178 <DMA_SetConfig+0x24c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00e      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a26      	ldr	r2, [pc, #152]	; (800717c <DMA_SetConfig+0x250>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d009      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a24      	ldr	r2, [pc, #144]	; (8007180 <DMA_SetConfig+0x254>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d004      	beq.n	80070fc <DMA_SetConfig+0x1d0>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a23      	ldr	r2, [pc, #140]	; (8007184 <DMA_SetConfig+0x258>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d101      	bne.n	8007100 <DMA_SetConfig+0x1d4>
 80070fc:	2301      	movs	r3, #1
 80070fe:	e000      	b.n	8007102 <DMA_SetConfig+0x1d6>
 8007100:	2300      	movs	r3, #0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d059      	beq.n	80071ba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	223f      	movs	r2, #63	; 0x3f
 8007110:	409a      	lsls	r2, r3
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007124:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2b40      	cmp	r3, #64	; 0x40
 8007134:	d138      	bne.n	80071a8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007146:	e086      	b.n	8007256 <DMA_SetConfig+0x32a>
 8007148:	40020010 	.word	0x40020010
 800714c:	40020028 	.word	0x40020028
 8007150:	40020040 	.word	0x40020040
 8007154:	40020058 	.word	0x40020058
 8007158:	40020070 	.word	0x40020070
 800715c:	40020088 	.word	0x40020088
 8007160:	400200a0 	.word	0x400200a0
 8007164:	400200b8 	.word	0x400200b8
 8007168:	40020410 	.word	0x40020410
 800716c:	40020428 	.word	0x40020428
 8007170:	40020440 	.word	0x40020440
 8007174:	40020458 	.word	0x40020458
 8007178:	40020470 	.word	0x40020470
 800717c:	40020488 	.word	0x40020488
 8007180:	400204a0 	.word	0x400204a0
 8007184:	400204b8 	.word	0x400204b8
 8007188:	58025408 	.word	0x58025408
 800718c:	5802541c 	.word	0x5802541c
 8007190:	58025430 	.word	0x58025430
 8007194:	58025444 	.word	0x58025444
 8007198:	58025458 	.word	0x58025458
 800719c:	5802546c 	.word	0x5802546c
 80071a0:	58025480 	.word	0x58025480
 80071a4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	60da      	str	r2, [r3, #12]
}
 80071b8:	e04d      	b.n	8007256 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a29      	ldr	r2, [pc, #164]	; (8007264 <DMA_SetConfig+0x338>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d022      	beq.n	800720a <DMA_SetConfig+0x2de>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a27      	ldr	r2, [pc, #156]	; (8007268 <DMA_SetConfig+0x33c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d01d      	beq.n	800720a <DMA_SetConfig+0x2de>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a26      	ldr	r2, [pc, #152]	; (800726c <DMA_SetConfig+0x340>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d018      	beq.n	800720a <DMA_SetConfig+0x2de>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a24      	ldr	r2, [pc, #144]	; (8007270 <DMA_SetConfig+0x344>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <DMA_SetConfig+0x2de>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a23      	ldr	r2, [pc, #140]	; (8007274 <DMA_SetConfig+0x348>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00e      	beq.n	800720a <DMA_SetConfig+0x2de>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a21      	ldr	r2, [pc, #132]	; (8007278 <DMA_SetConfig+0x34c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d009      	beq.n	800720a <DMA_SetConfig+0x2de>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a20      	ldr	r2, [pc, #128]	; (800727c <DMA_SetConfig+0x350>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d004      	beq.n	800720a <DMA_SetConfig+0x2de>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1e      	ldr	r2, [pc, #120]	; (8007280 <DMA_SetConfig+0x354>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d101      	bne.n	800720e <DMA_SetConfig+0x2e2>
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <DMA_SetConfig+0x2e4>
 800720e:	2300      	movs	r3, #0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d020      	beq.n	8007256 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007218:	f003 031f 	and.w	r3, r3, #31
 800721c:	2201      	movs	r2, #1
 800721e:	409a      	lsls	r2, r3
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b40      	cmp	r3, #64	; 0x40
 8007232:	d108      	bne.n	8007246 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	60da      	str	r2, [r3, #12]
}
 8007244:	e007      	b.n	8007256 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	60da      	str	r2, [r3, #12]
}
 8007256:	bf00      	nop
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	58025408 	.word	0x58025408
 8007268:	5802541c 	.word	0x5802541c
 800726c:	58025430 	.word	0x58025430
 8007270:	58025444 	.word	0x58025444
 8007274:	58025458 	.word	0x58025458
 8007278:	5802546c 	.word	0x5802546c
 800727c:	58025480 	.word	0x58025480
 8007280:	58025494 	.word	0x58025494

08007284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a42      	ldr	r2, [pc, #264]	; (800739c <DMA_CalcBaseAndBitshift+0x118>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d04a      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a41      	ldr	r2, [pc, #260]	; (80073a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d045      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a3f      	ldr	r2, [pc, #252]	; (80073a4 <DMA_CalcBaseAndBitshift+0x120>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d040      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a3e      	ldr	r2, [pc, #248]	; (80073a8 <DMA_CalcBaseAndBitshift+0x124>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d03b      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a3c      	ldr	r2, [pc, #240]	; (80073ac <DMA_CalcBaseAndBitshift+0x128>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d036      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a3b      	ldr	r2, [pc, #236]	; (80073b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d031      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a39      	ldr	r2, [pc, #228]	; (80073b4 <DMA_CalcBaseAndBitshift+0x130>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d02c      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a38      	ldr	r2, [pc, #224]	; (80073b8 <DMA_CalcBaseAndBitshift+0x134>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d027      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a36      	ldr	r2, [pc, #216]	; (80073bc <DMA_CalcBaseAndBitshift+0x138>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d022      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a35      	ldr	r2, [pc, #212]	; (80073c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d01d      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a33      	ldr	r2, [pc, #204]	; (80073c4 <DMA_CalcBaseAndBitshift+0x140>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d018      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a32      	ldr	r2, [pc, #200]	; (80073c8 <DMA_CalcBaseAndBitshift+0x144>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d013      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a30      	ldr	r2, [pc, #192]	; (80073cc <DMA_CalcBaseAndBitshift+0x148>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d00e      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a2f      	ldr	r2, [pc, #188]	; (80073d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d009      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a2d      	ldr	r2, [pc, #180]	; (80073d4 <DMA_CalcBaseAndBitshift+0x150>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d004      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a2c      	ldr	r2, [pc, #176]	; (80073d8 <DMA_CalcBaseAndBitshift+0x154>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d101      	bne.n	8007330 <DMA_CalcBaseAndBitshift+0xac>
 800732c:	2301      	movs	r3, #1
 800732e:	e000      	b.n	8007332 <DMA_CalcBaseAndBitshift+0xae>
 8007330:	2300      	movs	r3, #0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d024      	beq.n	8007380 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	3b10      	subs	r3, #16
 800733e:	4a27      	ldr	r2, [pc, #156]	; (80073dc <DMA_CalcBaseAndBitshift+0x158>)
 8007340:	fba2 2303 	umull	r2, r3, r2, r3
 8007344:	091b      	lsrs	r3, r3, #4
 8007346:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	4a24      	ldr	r2, [pc, #144]	; (80073e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007350:	5cd3      	ldrb	r3, [r2, r3]
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b03      	cmp	r3, #3
 800735c:	d908      	bls.n	8007370 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	4b1f      	ldr	r3, [pc, #124]	; (80073e4 <DMA_CalcBaseAndBitshift+0x160>)
 8007366:	4013      	ands	r3, r2
 8007368:	1d1a      	adds	r2, r3, #4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	659a      	str	r2, [r3, #88]	; 0x58
 800736e:	e00d      	b.n	800738c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	4b1b      	ldr	r3, [pc, #108]	; (80073e4 <DMA_CalcBaseAndBitshift+0x160>)
 8007378:	4013      	ands	r3, r2
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6593      	str	r3, [r2, #88]	; 0x58
 800737e:	e005      	b.n	800738c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40020010 	.word	0x40020010
 80073a0:	40020028 	.word	0x40020028
 80073a4:	40020040 	.word	0x40020040
 80073a8:	40020058 	.word	0x40020058
 80073ac:	40020070 	.word	0x40020070
 80073b0:	40020088 	.word	0x40020088
 80073b4:	400200a0 	.word	0x400200a0
 80073b8:	400200b8 	.word	0x400200b8
 80073bc:	40020410 	.word	0x40020410
 80073c0:	40020428 	.word	0x40020428
 80073c4:	40020440 	.word	0x40020440
 80073c8:	40020458 	.word	0x40020458
 80073cc:	40020470 	.word	0x40020470
 80073d0:	40020488 	.word	0x40020488
 80073d4:	400204a0 	.word	0x400204a0
 80073d8:	400204b8 	.word	0x400204b8
 80073dc:	aaaaaaab 	.word	0xaaaaaaab
 80073e0:	08012a9c 	.word	0x08012a9c
 80073e4:	fffffc00 	.word	0xfffffc00

080073e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d120      	bne.n	800743e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007400:	2b03      	cmp	r3, #3
 8007402:	d858      	bhi.n	80074b6 <DMA_CheckFifoParam+0xce>
 8007404:	a201      	add	r2, pc, #4	; (adr r2, 800740c <DMA_CheckFifoParam+0x24>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	0800741d 	.word	0x0800741d
 8007410:	0800742f 	.word	0x0800742f
 8007414:	0800741d 	.word	0x0800741d
 8007418:	080074b7 	.word	0x080074b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d048      	beq.n	80074ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800742c:	e045      	b.n	80074ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007436:	d142      	bne.n	80074be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800743c:	e03f      	b.n	80074be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007446:	d123      	bne.n	8007490 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744c:	2b03      	cmp	r3, #3
 800744e:	d838      	bhi.n	80074c2 <DMA_CheckFifoParam+0xda>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <DMA_CheckFifoParam+0x70>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	08007469 	.word	0x08007469
 800745c:	0800746f 	.word	0x0800746f
 8007460:	08007469 	.word	0x08007469
 8007464:	08007481 	.word	0x08007481
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	73fb      	strb	r3, [r7, #15]
        break;
 800746c:	e030      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d025      	beq.n	80074c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800747e:	e022      	b.n	80074c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007488:	d11f      	bne.n	80074ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800748e:	e01c      	b.n	80074ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007494:	2b02      	cmp	r3, #2
 8007496:	d902      	bls.n	800749e <DMA_CheckFifoParam+0xb6>
 8007498:	2b03      	cmp	r3, #3
 800749a:	d003      	beq.n	80074a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800749c:	e018      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	73fb      	strb	r3, [r7, #15]
        break;
 80074a2:	e015      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00e      	beq.n	80074ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
    break;
 80074b4:	e00b      	b.n	80074ce <DMA_CheckFifoParam+0xe6>
        break;
 80074b6:	bf00      	nop
 80074b8:	e00a      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        break;
 80074ba:	bf00      	nop
 80074bc:	e008      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        break;
 80074be:	bf00      	nop
 80074c0:	e006      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        break;
 80074c2:	bf00      	nop
 80074c4:	e004      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        break;
 80074c6:	bf00      	nop
 80074c8:	e002      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        break;
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
    break;
 80074ce:	bf00      	nop
    }
  }

  return status;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop

080074e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a38      	ldr	r2, [pc, #224]	; (80075d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d022      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a36      	ldr	r2, [pc, #216]	; (80075d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d01d      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a35      	ldr	r2, [pc, #212]	; (80075dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d018      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a33      	ldr	r2, [pc, #204]	; (80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d013      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a32      	ldr	r2, [pc, #200]	; (80075e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00e      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a30      	ldr	r2, [pc, #192]	; (80075e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d009      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a2f      	ldr	r2, [pc, #188]	; (80075ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d004      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a2d      	ldr	r2, [pc, #180]	; (80075f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d101      	bne.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800753e:	2301      	movs	r3, #1
 8007540:	e000      	b.n	8007544 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007542:	2300      	movs	r3, #0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01a      	beq.n	800757e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	3b08      	subs	r3, #8
 8007550:	4a28      	ldr	r2, [pc, #160]	; (80075f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007552:	fba2 2303 	umull	r2, r3, r2, r3
 8007556:	091b      	lsrs	r3, r3, #4
 8007558:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4b26      	ldr	r3, [pc, #152]	; (80075f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a24      	ldr	r2, [pc, #144]	; (80075fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800756c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	2201      	movs	r2, #1
 8007576:	409a      	lsls	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800757c:	e024      	b.n	80075c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	3b10      	subs	r3, #16
 8007586:	4a1e      	ldr	r2, [pc, #120]	; (8007600 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007588:	fba2 2303 	umull	r2, r3, r2, r3
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4a1c      	ldr	r2, [pc, #112]	; (8007604 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d806      	bhi.n	80075a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4a1b      	ldr	r2, [pc, #108]	; (8007608 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d902      	bls.n	80075a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3308      	adds	r3, #8
 80075a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4b18      	ldr	r3, [pc, #96]	; (800760c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	461a      	mov	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a16      	ldr	r2, [pc, #88]	; (8007610 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80075b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f003 031f 	and.w	r3, r3, #31
 80075c0:	2201      	movs	r2, #1
 80075c2:	409a      	lsls	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80075c8:	bf00      	nop
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	58025408 	.word	0x58025408
 80075d8:	5802541c 	.word	0x5802541c
 80075dc:	58025430 	.word	0x58025430
 80075e0:	58025444 	.word	0x58025444
 80075e4:	58025458 	.word	0x58025458
 80075e8:	5802546c 	.word	0x5802546c
 80075ec:	58025480 	.word	0x58025480
 80075f0:	58025494 	.word	0x58025494
 80075f4:	cccccccd 	.word	0xcccccccd
 80075f8:	16009600 	.word	0x16009600
 80075fc:	58025880 	.word	0x58025880
 8007600:	aaaaaaab 	.word	0xaaaaaaab
 8007604:	400204b8 	.word	0x400204b8
 8007608:	4002040f 	.word	0x4002040f
 800760c:	10008200 	.word	0x10008200
 8007610:	40020880 	.word	0x40020880

08007614 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d04a      	beq.n	80076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b08      	cmp	r3, #8
 800762e:	d847      	bhi.n	80076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a25      	ldr	r2, [pc, #148]	; (80076cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d022      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a24      	ldr	r2, [pc, #144]	; (80076d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d01d      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a22      	ldr	r2, [pc, #136]	; (80076d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d018      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a21      	ldr	r2, [pc, #132]	; (80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d013      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1f      	ldr	r2, [pc, #124]	; (80076dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00e      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a1e      	ldr	r2, [pc, #120]	; (80076e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d009      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1c      	ldr	r2, [pc, #112]	; (80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d004      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1b      	ldr	r2, [pc, #108]	; (80076e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d101      	bne.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007684:	2300      	movs	r3, #0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4b17      	ldr	r3, [pc, #92]	; (80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	461a      	mov	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800769c:	671a      	str	r2, [r3, #112]	; 0x70
 800769e:	e009      	b.n	80076b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4b14      	ldr	r3, [pc, #80]	; (80076f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	461a      	mov	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a11      	ldr	r2, [pc, #68]	; (80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80076b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	2201      	movs	r2, #1
 80076ba:	409a      	lsls	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80076c0:	bf00      	nop
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	58025408 	.word	0x58025408
 80076d0:	5802541c 	.word	0x5802541c
 80076d4:	58025430 	.word	0x58025430
 80076d8:	58025444 	.word	0x58025444
 80076dc:	58025458 	.word	0x58025458
 80076e0:	5802546c 	.word	0x5802546c
 80076e4:	58025480 	.word	0x58025480
 80076e8:	58025494 	.word	0x58025494
 80076ec:	1600963f 	.word	0x1600963f
 80076f0:	58025940 	.word	0x58025940
 80076f4:	1000823f 	.word	0x1000823f
 80076f8:	40020940 	.word	0x40020940

080076fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b089      	sub	sp, #36	; 0x24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007706:	2300      	movs	r3, #0
 8007708:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800770a:	4b89      	ldr	r3, [pc, #548]	; (8007930 <HAL_GPIO_Init+0x234>)
 800770c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800770e:	e194      	b.n	8007a3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	2101      	movs	r1, #1
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	fa01 f303 	lsl.w	r3, r1, r3
 800771c:	4013      	ands	r3, r2
 800771e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8186 	beq.w	8007a34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	2b01      	cmp	r3, #1
 8007732:	d005      	beq.n	8007740 <HAL_GPIO_Init+0x44>
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d130      	bne.n	80077a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	2203      	movs	r2, #3
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	43db      	mvns	r3, r3
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	4013      	ands	r3, r2
 8007756:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	4313      	orrs	r3, r2
 8007768:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007776:	2201      	movs	r2, #1
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43db      	mvns	r3, r3
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	4013      	ands	r3, r2
 8007784:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	091b      	lsrs	r3, r3, #4
 800778c:	f003 0201 	and.w	r2, r3, #1
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	4313      	orrs	r3, r2
 800779a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d017      	beq.n	80077de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	2203      	movs	r2, #3
 80077ba:	fa02 f303 	lsl.w	r3, r2, r3
 80077be:	43db      	mvns	r3, r3
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	4013      	ands	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d123      	bne.n	8007832 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	08da      	lsrs	r2, r3, #3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3208      	adds	r2, #8
 80077f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	220f      	movs	r2, #15
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	43db      	mvns	r3, r3
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	4013      	ands	r3, r2
 800780c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	4313      	orrs	r3, r2
 8007822:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	08da      	lsrs	r2, r3, #3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3208      	adds	r2, #8
 800782c:	69b9      	ldr	r1, [r7, #24]
 800782e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	2203      	movs	r2, #3
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	43db      	mvns	r3, r3
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	4013      	ands	r3, r2
 8007848:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f003 0203 	and.w	r2, r3, #3
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	4313      	orrs	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 80e0 	beq.w	8007a34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007874:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <HAL_GPIO_Init+0x238>)
 8007876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800787a:	4a2e      	ldr	r2, [pc, #184]	; (8007934 <HAL_GPIO_Init+0x238>)
 800787c:	f043 0302 	orr.w	r3, r3, #2
 8007880:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007884:	4b2b      	ldr	r3, [pc, #172]	; (8007934 <HAL_GPIO_Init+0x238>)
 8007886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007892:	4a29      	ldr	r2, [pc, #164]	; (8007938 <HAL_GPIO_Init+0x23c>)
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	089b      	lsrs	r3, r3, #2
 8007898:	3302      	adds	r3, #2
 800789a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800789e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	220f      	movs	r2, #15
 80078aa:	fa02 f303 	lsl.w	r3, r2, r3
 80078ae:	43db      	mvns	r3, r3
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	4013      	ands	r3, r2
 80078b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a20      	ldr	r2, [pc, #128]	; (800793c <HAL_GPIO_Init+0x240>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d052      	beq.n	8007964 <HAL_GPIO_Init+0x268>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a1f      	ldr	r2, [pc, #124]	; (8007940 <HAL_GPIO_Init+0x244>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d031      	beq.n	800792a <HAL_GPIO_Init+0x22e>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a1e      	ldr	r2, [pc, #120]	; (8007944 <HAL_GPIO_Init+0x248>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d02b      	beq.n	8007926 <HAL_GPIO_Init+0x22a>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a1d      	ldr	r2, [pc, #116]	; (8007948 <HAL_GPIO_Init+0x24c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d025      	beq.n	8007922 <HAL_GPIO_Init+0x226>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a1c      	ldr	r2, [pc, #112]	; (800794c <HAL_GPIO_Init+0x250>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d01f      	beq.n	800791e <HAL_GPIO_Init+0x222>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a1b      	ldr	r2, [pc, #108]	; (8007950 <HAL_GPIO_Init+0x254>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d019      	beq.n	800791a <HAL_GPIO_Init+0x21e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a1a      	ldr	r2, [pc, #104]	; (8007954 <HAL_GPIO_Init+0x258>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d013      	beq.n	8007916 <HAL_GPIO_Init+0x21a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a19      	ldr	r2, [pc, #100]	; (8007958 <HAL_GPIO_Init+0x25c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00d      	beq.n	8007912 <HAL_GPIO_Init+0x216>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a18      	ldr	r2, [pc, #96]	; (800795c <HAL_GPIO_Init+0x260>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d007      	beq.n	800790e <HAL_GPIO_Init+0x212>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a17      	ldr	r2, [pc, #92]	; (8007960 <HAL_GPIO_Init+0x264>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d101      	bne.n	800790a <HAL_GPIO_Init+0x20e>
 8007906:	2309      	movs	r3, #9
 8007908:	e02d      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800790a:	230a      	movs	r3, #10
 800790c:	e02b      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800790e:	2308      	movs	r3, #8
 8007910:	e029      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 8007912:	2307      	movs	r3, #7
 8007914:	e027      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 8007916:	2306      	movs	r3, #6
 8007918:	e025      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800791a:	2305      	movs	r3, #5
 800791c:	e023      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800791e:	2304      	movs	r3, #4
 8007920:	e021      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 8007922:	2303      	movs	r3, #3
 8007924:	e01f      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 8007926:	2302      	movs	r3, #2
 8007928:	e01d      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800792a:	2301      	movs	r3, #1
 800792c:	e01b      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800792e:	bf00      	nop
 8007930:	58000080 	.word	0x58000080
 8007934:	58024400 	.word	0x58024400
 8007938:	58000400 	.word	0x58000400
 800793c:	58020000 	.word	0x58020000
 8007940:	58020400 	.word	0x58020400
 8007944:	58020800 	.word	0x58020800
 8007948:	58020c00 	.word	0x58020c00
 800794c:	58021000 	.word	0x58021000
 8007950:	58021400 	.word	0x58021400
 8007954:	58021800 	.word	0x58021800
 8007958:	58021c00 	.word	0x58021c00
 800795c:	58022000 	.word	0x58022000
 8007960:	58022400 	.word	0x58022400
 8007964:	2300      	movs	r3, #0
 8007966:	69fa      	ldr	r2, [r7, #28]
 8007968:	f002 0203 	and.w	r2, r2, #3
 800796c:	0092      	lsls	r2, r2, #2
 800796e:	4093      	lsls	r3, r2
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	4313      	orrs	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007976:	4938      	ldr	r1, [pc, #224]	; (8007a58 <HAL_GPIO_Init+0x35c>)
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	089b      	lsrs	r3, r3, #2
 800797c:	3302      	adds	r3, #2
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	43db      	mvns	r3, r3
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4013      	ands	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80079aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80079b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	43db      	mvns	r3, r3
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	4013      	ands	r3, r2
 80079c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80079d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	43db      	mvns	r3, r3
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	4013      	ands	r3, r2
 80079ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	43db      	mvns	r3, r3
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4013      	ands	r3, r2
 8007a18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	3301      	adds	r3, #1
 8007a38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f47f ae63 	bne.w	8007710 <HAL_GPIO_Init+0x14>
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	bf00      	nop
 8007a4e:	3724      	adds	r7, #36	; 0x24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	58000400 	.word	0x58000400

08007a5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	887b      	ldrh	r3, [r7, #2]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
 8007a78:	e001      	b.n	8007a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	807b      	strh	r3, [r7, #2]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a9c:	787b      	ldrb	r3, [r7, #1]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007aa2:	887a      	ldrh	r2, [r7, #2]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007aa8:	e003      	b.n	8007ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007aaa:	887b      	ldrh	r3, [r7, #2]
 8007aac:	041a      	lsls	r2, r3, #16
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	619a      	str	r2, [r3, #24]
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ad0:	887a      	ldrh	r2, [r7, #2]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	041a      	lsls	r2, r3, #16
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	43d9      	mvns	r1, r3
 8007adc:	887b      	ldrh	r3, [r7, #2]
 8007ade:	400b      	ands	r3, r1
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	619a      	str	r2, [r3, #24]
}
 8007ae6:	bf00      	nop
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
	...

08007af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e07f      	b.n	8007c06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fa fac6 	bl	80020ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2224      	movs	r2, #36	; 0x24
 8007b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d107      	bne.n	8007b6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b6a:	609a      	str	r2, [r3, #8]
 8007b6c:	e006      	b.n	8007b7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007b7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d104      	bne.n	8007b8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6859      	ldr	r1, [r3, #4]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <HAL_I2C_Init+0x11c>)
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	69d9      	ldr	r1, [r3, #28]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a1a      	ldr	r2, [r3, #32]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	02008000 	.word	0x02008000

08007c14 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08a      	sub	sp, #40	; 0x28
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	607a      	str	r2, [r7, #4]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	460b      	mov	r3, r1
 8007c22:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b20      	cmp	r3, #32
 8007c32:	f040 80ef 	bne.w	8007e14 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c44:	d101      	bne.n	8007c4a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007c46:	2302      	movs	r3, #2
 8007c48:	e0e5      	b.n	8007e16 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_I2C_IsDeviceReady+0x44>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e0de      	b.n	8007e16 <HAL_I2C_IsDeviceReady+0x202>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2224      	movs	r2, #36	; 0x24
 8007c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d105      	bne.n	8007c82 <HAL_I2C_IsDeviceReady+0x6e>
 8007c76:	897b      	ldrh	r3, [r7, #10]
 8007c78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c7c:	4b68      	ldr	r3, [pc, #416]	; (8007e20 <HAL_I2C_IsDeviceReady+0x20c>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	e004      	b.n	8007c8c <HAL_I2C_IsDeviceReady+0x78>
 8007c82:	897b      	ldrh	r3, [r7, #10]
 8007c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c88:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007c92:	f7fb f82b 	bl	8002cec <HAL_GetTick>
 8007c96:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	bf0c      	ite	eq
 8007ca6:	2301      	moveq	r3, #1
 8007ca8:	2300      	movne	r3, #0
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	f003 0310 	and.w	r3, r3, #16
 8007cb8:	2b10      	cmp	r3, #16
 8007cba:	bf0c      	ite	eq
 8007cbc:	2301      	moveq	r3, #1
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007cc4:	e034      	b.n	8007d30 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ccc:	d01a      	beq.n	8007d04 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cce:	f7fb f80d 	bl	8002cec <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d302      	bcc.n	8007ce4 <HAL_I2C_IsDeviceReady+0xd0>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10f      	bne.n	8007d04 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf0:	f043 0220 	orr.w	r2, r3, #32
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e088      	b.n	8007e16 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	bf0c      	ite	eq
 8007d12:	2301      	moveq	r3, #1
 8007d14:	2300      	movne	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b10      	cmp	r3, #16
 8007d26:	bf0c      	ite	eq
 8007d28:	2301      	moveq	r3, #1
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007d30:	7ffb      	ldrb	r3, [r7, #31]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d102      	bne.n	8007d3c <HAL_I2C_IsDeviceReady+0x128>
 8007d36:	7fbb      	ldrb	r3, [r7, #30]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0c4      	beq.n	8007cc6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	f003 0310 	and.w	r3, r3, #16
 8007d46:	2b10      	cmp	r3, #16
 8007d48:	d01a      	beq.n	8007d80 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2200      	movs	r2, #0
 8007d52:	2120      	movs	r1, #32
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f865 	bl	8007e24 <I2C_WaitOnFlagUntilTimeout>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e058      	b.n	8007e16 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e04a      	b.n	8007e16 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2200      	movs	r2, #0
 8007d88:	2120      	movs	r1, #32
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 f84a 	bl	8007e24 <I2C_WaitOnFlagUntilTimeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e03d      	b.n	8007e16 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2210      	movs	r2, #16
 8007da0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2220      	movs	r2, #32
 8007da8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d118      	bne.n	8007de4 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dc0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2120      	movs	r1, #32
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f829 	bl	8007e24 <I2C_WaitOnFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e01c      	b.n	8007e16 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2220      	movs	r2, #32
 8007de2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	3301      	adds	r3, #1
 8007de8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	f63f af3d 	bhi.w	8007c6e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e00:	f043 0220 	orr.w	r2, r3, #32
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8007e14:	2302      	movs	r3, #2
  }
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3720      	adds	r7, #32
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	02002000 	.word	0x02002000

08007e24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	603b      	str	r3, [r7, #0]
 8007e30:	4613      	mov	r3, r2
 8007e32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e34:	e031      	b.n	8007e9a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e3c:	d02d      	beq.n	8007e9a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e3e:	f7fa ff55 	bl	8002cec <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d302      	bcc.n	8007e54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d122      	bne.n	8007e9a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	699a      	ldr	r2, [r3, #24]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	bf0c      	ite	eq
 8007e64:	2301      	moveq	r3, #1
 8007e66:	2300      	movne	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d113      	bne.n	8007e9a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e76:	f043 0220 	orr.w	r2, r3, #32
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e00f      	b.n	8007eba <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	699a      	ldr	r2, [r3, #24]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	bf0c      	ite	eq
 8007eaa:	2301      	moveq	r3, #1
 8007eac:	2300      	movne	r3, #0
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d0be      	beq.n	8007e36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d138      	bne.n	8007f4a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e032      	b.n	8007f4c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2224      	movs	r2, #36	; 0x24
 8007ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0201 	bic.w	r2, r2, #1
 8007f04:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f14:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6819      	ldr	r1, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f042 0201 	orr.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	e000      	b.n	8007f4c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f4a:	2302      	movs	r3, #2
  }
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d139      	bne.n	8007fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d101      	bne.n	8007f7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	e033      	b.n	8007fe4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2224      	movs	r2, #36	; 0x24
 8007f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0201 	bic.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007faa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	021b      	lsls	r3, r3, #8
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0201 	orr.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e000      	b.n	8007fe4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fe2:	2302      	movs	r3, #2
  }
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ff8:	4b19      	ldr	r3, [pc, #100]	; (8008060 <HAL_PWREx_ConfigSupply+0x70>)
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	2b04      	cmp	r3, #4
 8008002:	d00a      	beq.n	800801a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008004:	4b16      	ldr	r3, [pc, #88]	; (8008060 <HAL_PWREx_ConfigSupply+0x70>)
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	429a      	cmp	r2, r3
 8008010:	d001      	beq.n	8008016 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e01f      	b.n	8008056 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	e01d      	b.n	8008056 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800801a:	4b11      	ldr	r3, [pc, #68]	; (8008060 <HAL_PWREx_ConfigSupply+0x70>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f023 0207 	bic.w	r2, r3, #7
 8008022:	490f      	ldr	r1, [pc, #60]	; (8008060 <HAL_PWREx_ConfigSupply+0x70>)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4313      	orrs	r3, r2
 8008028:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800802a:	f7fa fe5f 	bl	8002cec <HAL_GetTick>
 800802e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008030:	e009      	b.n	8008046 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008032:	f7fa fe5b 	bl	8002cec <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008040:	d901      	bls.n	8008046 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e007      	b.n	8008056 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008046:	4b06      	ldr	r3, [pc, #24]	; (8008060 <HAL_PWREx_ConfigSupply+0x70>)
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800804e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008052:	d1ee      	bne.n	8008032 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	58024800 	.word	0x58024800

08008064 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08c      	sub	sp, #48	; 0x30
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d102      	bne.n	8008078 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f000 bc48 	b.w	8008908 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 8088 	beq.w	8008196 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008086:	4b99      	ldr	r3, [pc, #612]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800808e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008090:	4b96      	ldr	r3, [pc, #600]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008094:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	2b10      	cmp	r3, #16
 800809a:	d007      	beq.n	80080ac <HAL_RCC_OscConfig+0x48>
 800809c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809e:	2b18      	cmp	r3, #24
 80080a0:	d111      	bne.n	80080c6 <HAL_RCC_OscConfig+0x62>
 80080a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a4:	f003 0303 	and.w	r3, r3, #3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d10c      	bne.n	80080c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080ac:	4b8f      	ldr	r3, [pc, #572]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d06d      	beq.n	8008194 <HAL_RCC_OscConfig+0x130>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d169      	bne.n	8008194 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	f000 bc21 	b.w	8008908 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ce:	d106      	bne.n	80080de <HAL_RCC_OscConfig+0x7a>
 80080d0:	4b86      	ldr	r3, [pc, #536]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a85      	ldr	r2, [pc, #532]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80080d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	e02e      	b.n	800813c <HAL_RCC_OscConfig+0xd8>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10c      	bne.n	8008100 <HAL_RCC_OscConfig+0x9c>
 80080e6:	4b81      	ldr	r3, [pc, #516]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a80      	ldr	r2, [pc, #512]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80080ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	4b7e      	ldr	r3, [pc, #504]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a7d      	ldr	r2, [pc, #500]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80080f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	e01d      	b.n	800813c <HAL_RCC_OscConfig+0xd8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008108:	d10c      	bne.n	8008124 <HAL_RCC_OscConfig+0xc0>
 800810a:	4b78      	ldr	r3, [pc, #480]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a77      	ldr	r2, [pc, #476]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	4b75      	ldr	r3, [pc, #468]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a74      	ldr	r2, [pc, #464]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 800811c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	e00b      	b.n	800813c <HAL_RCC_OscConfig+0xd8>
 8008124:	4b71      	ldr	r3, [pc, #452]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a70      	ldr	r2, [pc, #448]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 800812a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	4b6e      	ldr	r3, [pc, #440]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a6d      	ldr	r2, [pc, #436]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800813a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d013      	beq.n	800816c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008144:	f7fa fdd2 	bl	8002cec <HAL_GetTick>
 8008148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800814a:	e008      	b.n	800815e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800814c:	f7fa fdce 	bl	8002cec <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	2b64      	cmp	r3, #100	; 0x64
 8008158:	d901      	bls.n	800815e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e3d4      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800815e:	4b63      	ldr	r3, [pc, #396]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0f0      	beq.n	800814c <HAL_RCC_OscConfig+0xe8>
 800816a:	e014      	b.n	8008196 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800816c:	f7fa fdbe 	bl	8002cec <HAL_GetTick>
 8008170:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008172:	e008      	b.n	8008186 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008174:	f7fa fdba 	bl	8002cec <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	2b64      	cmp	r3, #100	; 0x64
 8008180:	d901      	bls.n	8008186 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e3c0      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008186:	4b59      	ldr	r3, [pc, #356]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1f0      	bne.n	8008174 <HAL_RCC_OscConfig+0x110>
 8008192:	e000      	b.n	8008196 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 80ca 	beq.w	8008338 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081a4:	4b51      	ldr	r3, [pc, #324]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081ae:	4b4f      	ldr	r3, [pc, #316]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <HAL_RCC_OscConfig+0x166>
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	2b18      	cmp	r3, #24
 80081be:	d156      	bne.n	800826e <HAL_RCC_OscConfig+0x20a>
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d151      	bne.n	800826e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081ca:	4b48      	ldr	r3, [pc, #288]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0304 	and.w	r3, r3, #4
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d005      	beq.n	80081e2 <HAL_RCC_OscConfig+0x17e>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e392      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081e2:	4b42      	ldr	r3, [pc, #264]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f023 0219 	bic.w	r2, r3, #25
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	493f      	ldr	r1, [pc, #252]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f4:	f7fa fd7a 	bl	8002cec <HAL_GetTick>
 80081f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081fa:	e008      	b.n	800820e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081fc:	f7fa fd76 	bl	8002cec <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	2b02      	cmp	r3, #2
 8008208:	d901      	bls.n	800820e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e37c      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800820e:	4b37      	ldr	r3, [pc, #220]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0304 	and.w	r3, r3, #4
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0f0      	beq.n	80081fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800821a:	f7fa fd97 	bl	8002d4c <HAL_GetREVID>
 800821e:	4603      	mov	r3, r0
 8008220:	f241 0203 	movw	r2, #4099	; 0x1003
 8008224:	4293      	cmp	r3, r2
 8008226:	d817      	bhi.n	8008258 <HAL_RCC_OscConfig+0x1f4>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	2b40      	cmp	r3, #64	; 0x40
 800822e:	d108      	bne.n	8008242 <HAL_RCC_OscConfig+0x1de>
 8008230:	4b2e      	ldr	r3, [pc, #184]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008238:	4a2c      	ldr	r2, [pc, #176]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 800823a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800823e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008240:	e07a      	b.n	8008338 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008242:	4b2a      	ldr	r3, [pc, #168]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	031b      	lsls	r3, r3, #12
 8008250:	4926      	ldr	r1, [pc, #152]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008252:	4313      	orrs	r3, r2
 8008254:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008256:	e06f      	b.n	8008338 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008258:	4b24      	ldr	r3, [pc, #144]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	061b      	lsls	r3, r3, #24
 8008266:	4921      	ldr	r1, [pc, #132]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008268:	4313      	orrs	r3, r2
 800826a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800826c:	e064      	b.n	8008338 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d047      	beq.n	8008306 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008276:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f023 0219 	bic.w	r2, r3, #25
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	491a      	ldr	r1, [pc, #104]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 8008284:	4313      	orrs	r3, r2
 8008286:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008288:	f7fa fd30 	bl	8002cec <HAL_GetTick>
 800828c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800828e:	e008      	b.n	80082a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008290:	f7fa fd2c 	bl	8002cec <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d901      	bls.n	80082a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e332      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082a2:	4b12      	ldr	r3, [pc, #72]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0f0      	beq.n	8008290 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082ae:	f7fa fd4d 	bl	8002d4c <HAL_GetREVID>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d819      	bhi.n	80082f0 <HAL_RCC_OscConfig+0x28c>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	2b40      	cmp	r3, #64	; 0x40
 80082c2:	d108      	bne.n	80082d6 <HAL_RCC_OscConfig+0x272>
 80082c4:	4b09      	ldr	r3, [pc, #36]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80082cc:	4a07      	ldr	r2, [pc, #28]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80082ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082d2:	6053      	str	r3, [r2, #4]
 80082d4:	e030      	b.n	8008338 <HAL_RCC_OscConfig+0x2d4>
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	031b      	lsls	r3, r3, #12
 80082e4:	4901      	ldr	r1, [pc, #4]	; (80082ec <HAL_RCC_OscConfig+0x288>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	604b      	str	r3, [r1, #4]
 80082ea:	e025      	b.n	8008338 <HAL_RCC_OscConfig+0x2d4>
 80082ec:	58024400 	.word	0x58024400
 80082f0:	4b9a      	ldr	r3, [pc, #616]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	061b      	lsls	r3, r3, #24
 80082fe:	4997      	ldr	r1, [pc, #604]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 8008300:	4313      	orrs	r3, r2
 8008302:	604b      	str	r3, [r1, #4]
 8008304:	e018      	b.n	8008338 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008306:	4b95      	ldr	r3, [pc, #596]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a94      	ldr	r2, [pc, #592]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 800830c:	f023 0301 	bic.w	r3, r3, #1
 8008310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008312:	f7fa fceb 	bl	8002cec <HAL_GetTick>
 8008316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008318:	e008      	b.n	800832c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800831a:	f7fa fce7 	bl	8002cec <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	2b02      	cmp	r3, #2
 8008326:	d901      	bls.n	800832c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e2ed      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800832c:	4b8b      	ldr	r3, [pc, #556]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1f0      	bne.n	800831a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80a9 	beq.w	8008498 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008346:	4b85      	ldr	r3, [pc, #532]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800834e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008350:	4b82      	ldr	r3, [pc, #520]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 8008352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008354:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	2b08      	cmp	r3, #8
 800835a:	d007      	beq.n	800836c <HAL_RCC_OscConfig+0x308>
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	2b18      	cmp	r3, #24
 8008360:	d13a      	bne.n	80083d8 <HAL_RCC_OscConfig+0x374>
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f003 0303 	and.w	r3, r3, #3
 8008368:	2b01      	cmp	r3, #1
 800836a:	d135      	bne.n	80083d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800836c:	4b7b      	ldr	r3, [pc, #492]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <HAL_RCC_OscConfig+0x320>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	2b80      	cmp	r3, #128	; 0x80
 800837e:	d001      	beq.n	8008384 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e2c1      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008384:	f7fa fce2 	bl	8002d4c <HAL_GetREVID>
 8008388:	4603      	mov	r3, r0
 800838a:	f241 0203 	movw	r2, #4099	; 0x1003
 800838e:	4293      	cmp	r3, r2
 8008390:	d817      	bhi.n	80083c2 <HAL_RCC_OscConfig+0x35e>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	2b20      	cmp	r3, #32
 8008398:	d108      	bne.n	80083ac <HAL_RCC_OscConfig+0x348>
 800839a:	4b70      	ldr	r3, [pc, #448]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80083a2:	4a6e      	ldr	r2, [pc, #440]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80083a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083aa:	e075      	b.n	8008498 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083ac:	4b6b      	ldr	r3, [pc, #428]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	069b      	lsls	r3, r3, #26
 80083ba:	4968      	ldr	r1, [pc, #416]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083c0:	e06a      	b.n	8008498 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083c2:	4b66      	ldr	r3, [pc, #408]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	061b      	lsls	r3, r3, #24
 80083d0:	4962      	ldr	r1, [pc, #392]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083d6:	e05f      	b.n	8008498 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d042      	beq.n	8008466 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80083e0:	4b5e      	ldr	r3, [pc, #376]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a5d      	ldr	r2, [pc, #372]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80083e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ec:	f7fa fc7e 	bl	8002cec <HAL_GetTick>
 80083f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083f2:	e008      	b.n	8008406 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80083f4:	f7fa fc7a 	bl	8002cec <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d901      	bls.n	8008406 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e280      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008406:	4b55      	ldr	r3, [pc, #340]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0f0      	beq.n	80083f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008412:	f7fa fc9b 	bl	8002d4c <HAL_GetREVID>
 8008416:	4603      	mov	r3, r0
 8008418:	f241 0203 	movw	r2, #4099	; 0x1003
 800841c:	4293      	cmp	r3, r2
 800841e:	d817      	bhi.n	8008450 <HAL_RCC_OscConfig+0x3ec>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	2b20      	cmp	r3, #32
 8008426:	d108      	bne.n	800843a <HAL_RCC_OscConfig+0x3d6>
 8008428:	4b4c      	ldr	r3, [pc, #304]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008430:	4a4a      	ldr	r2, [pc, #296]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 8008432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008436:	6053      	str	r3, [r2, #4]
 8008438:	e02e      	b.n	8008498 <HAL_RCC_OscConfig+0x434>
 800843a:	4b48      	ldr	r3, [pc, #288]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	069b      	lsls	r3, r3, #26
 8008448:	4944      	ldr	r1, [pc, #272]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 800844a:	4313      	orrs	r3, r2
 800844c:	604b      	str	r3, [r1, #4]
 800844e:	e023      	b.n	8008498 <HAL_RCC_OscConfig+0x434>
 8008450:	4b42      	ldr	r3, [pc, #264]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	061b      	lsls	r3, r3, #24
 800845e:	493f      	ldr	r1, [pc, #252]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 8008460:	4313      	orrs	r3, r2
 8008462:	60cb      	str	r3, [r1, #12]
 8008464:	e018      	b.n	8008498 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008466:	4b3d      	ldr	r3, [pc, #244]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a3c      	ldr	r2, [pc, #240]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 800846c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008472:	f7fa fc3b 	bl	8002cec <HAL_GetTick>
 8008476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008478:	e008      	b.n	800848c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800847a:	f7fa fc37 	bl	8002cec <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e23d      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800848c:	4b33      	ldr	r3, [pc, #204]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1f0      	bne.n	800847a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d036      	beq.n	8008512 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d019      	beq.n	80084e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084ac:	4b2b      	ldr	r3, [pc, #172]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80084ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084b0:	4a2a      	ldr	r2, [pc, #168]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80084b2:	f043 0301 	orr.w	r3, r3, #1
 80084b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084b8:	f7fa fc18 	bl	8002cec <HAL_GetTick>
 80084bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084be:	e008      	b.n	80084d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084c0:	f7fa fc14 	bl	8002cec <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e21a      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084d2:	4b22      	ldr	r3, [pc, #136]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80084d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d0f0      	beq.n	80084c0 <HAL_RCC_OscConfig+0x45c>
 80084de:	e018      	b.n	8008512 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084e0:	4b1e      	ldr	r3, [pc, #120]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80084e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e4:	4a1d      	ldr	r2, [pc, #116]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 80084e6:	f023 0301 	bic.w	r3, r3, #1
 80084ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ec:	f7fa fbfe 	bl	8002cec <HAL_GetTick>
 80084f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084f4:	f7fa fbfa 	bl	8002cec <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e200      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008506:	4b15      	ldr	r3, [pc, #84]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 8008508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1f0      	bne.n	80084f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0320 	and.w	r3, r3, #32
 800851a:	2b00      	cmp	r3, #0
 800851c:	d039      	beq.n	8008592 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01c      	beq.n	8008560 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008526:	4b0d      	ldr	r3, [pc, #52]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a0c      	ldr	r2, [pc, #48]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 800852c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008530:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008532:	f7fa fbdb 	bl	8002cec <HAL_GetTick>
 8008536:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008538:	e008      	b.n	800854c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800853a:	f7fa fbd7 	bl	8002cec <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	2b02      	cmp	r3, #2
 8008546:	d901      	bls.n	800854c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e1dd      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800854c:	4b03      	ldr	r3, [pc, #12]	; (800855c <HAL_RCC_OscConfig+0x4f8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0f0      	beq.n	800853a <HAL_RCC_OscConfig+0x4d6>
 8008558:	e01b      	b.n	8008592 <HAL_RCC_OscConfig+0x52e>
 800855a:	bf00      	nop
 800855c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008560:	4b9b      	ldr	r3, [pc, #620]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a9a      	ldr	r2, [pc, #616]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800856a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800856c:	f7fa fbbe 	bl	8002cec <HAL_GetTick>
 8008570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008572:	e008      	b.n	8008586 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008574:	f7fa fbba 	bl	8002cec <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	2b02      	cmp	r3, #2
 8008580:	d901      	bls.n	8008586 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e1c0      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008586:	4b92      	ldr	r3, [pc, #584]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1f0      	bne.n	8008574 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 8081 	beq.w	80086a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80085a0:	4b8c      	ldr	r3, [pc, #560]	; (80087d4 <HAL_RCC_OscConfig+0x770>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a8b      	ldr	r2, [pc, #556]	; (80087d4 <HAL_RCC_OscConfig+0x770>)
 80085a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085ac:	f7fa fb9e 	bl	8002cec <HAL_GetTick>
 80085b0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085b2:	e008      	b.n	80085c6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085b4:	f7fa fb9a 	bl	8002cec <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b64      	cmp	r3, #100	; 0x64
 80085c0:	d901      	bls.n	80085c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e1a0      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085c6:	4b83      	ldr	r3, [pc, #524]	; (80087d4 <HAL_RCC_OscConfig+0x770>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0f0      	beq.n	80085b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d106      	bne.n	80085e8 <HAL_RCC_OscConfig+0x584>
 80085da:	4b7d      	ldr	r3, [pc, #500]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80085dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085de:	4a7c      	ldr	r2, [pc, #496]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	6713      	str	r3, [r2, #112]	; 0x70
 80085e6:	e02d      	b.n	8008644 <HAL_RCC_OscConfig+0x5e0>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10c      	bne.n	800860a <HAL_RCC_OscConfig+0x5a6>
 80085f0:	4b77      	ldr	r3, [pc, #476]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80085f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f4:	4a76      	ldr	r2, [pc, #472]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80085f6:	f023 0301 	bic.w	r3, r3, #1
 80085fa:	6713      	str	r3, [r2, #112]	; 0x70
 80085fc:	4b74      	ldr	r3, [pc, #464]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80085fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008600:	4a73      	ldr	r2, [pc, #460]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008602:	f023 0304 	bic.w	r3, r3, #4
 8008606:	6713      	str	r3, [r2, #112]	; 0x70
 8008608:	e01c      	b.n	8008644 <HAL_RCC_OscConfig+0x5e0>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	2b05      	cmp	r3, #5
 8008610:	d10c      	bne.n	800862c <HAL_RCC_OscConfig+0x5c8>
 8008612:	4b6f      	ldr	r3, [pc, #444]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008616:	4a6e      	ldr	r2, [pc, #440]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008618:	f043 0304 	orr.w	r3, r3, #4
 800861c:	6713      	str	r3, [r2, #112]	; 0x70
 800861e:	4b6c      	ldr	r3, [pc, #432]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008622:	4a6b      	ldr	r2, [pc, #428]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008624:	f043 0301 	orr.w	r3, r3, #1
 8008628:	6713      	str	r3, [r2, #112]	; 0x70
 800862a:	e00b      	b.n	8008644 <HAL_RCC_OscConfig+0x5e0>
 800862c:	4b68      	ldr	r3, [pc, #416]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 800862e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008630:	4a67      	ldr	r2, [pc, #412]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008632:	f023 0301 	bic.w	r3, r3, #1
 8008636:	6713      	str	r3, [r2, #112]	; 0x70
 8008638:	4b65      	ldr	r3, [pc, #404]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 800863a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863c:	4a64      	ldr	r2, [pc, #400]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 800863e:	f023 0304 	bic.w	r3, r3, #4
 8008642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d015      	beq.n	8008678 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800864c:	f7fa fb4e 	bl	8002cec <HAL_GetTick>
 8008650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008652:	e00a      	b.n	800866a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008654:	f7fa fb4a 	bl	8002cec <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008662:	4293      	cmp	r3, r2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e14e      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800866a:	4b59      	ldr	r3, [pc, #356]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 800866c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0ee      	beq.n	8008654 <HAL_RCC_OscConfig+0x5f0>
 8008676:	e014      	b.n	80086a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008678:	f7fa fb38 	bl	8002cec <HAL_GetTick>
 800867c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800867e:	e00a      	b.n	8008696 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008680:	f7fa fb34 	bl	8002cec <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	f241 3288 	movw	r2, #5000	; 0x1388
 800868e:	4293      	cmp	r3, r2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e138      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008696:	4b4e      	ldr	r3, [pc, #312]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1ee      	bne.n	8008680 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 812d 	beq.w	8008906 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80086ac:	4b48      	ldr	r3, [pc, #288]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086b4:	2b18      	cmp	r3, #24
 80086b6:	f000 80bd 	beq.w	8008834 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	2b02      	cmp	r3, #2
 80086c0:	f040 809e 	bne.w	8008800 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086c4:	4b42      	ldr	r3, [pc, #264]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a41      	ldr	r2, [pc, #260]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80086ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d0:	f7fa fb0c 	bl	8002cec <HAL_GetTick>
 80086d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086d6:	e008      	b.n	80086ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086d8:	f7fa fb08 	bl	8002cec <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e10e      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086ea:	4b39      	ldr	r3, [pc, #228]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1f0      	bne.n	80086d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086f6:	4b36      	ldr	r3, [pc, #216]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80086f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086fa:	4b37      	ldr	r3, [pc, #220]	; (80087d8 <HAL_RCC_OscConfig+0x774>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008706:	0112      	lsls	r2, r2, #4
 8008708:	430a      	orrs	r2, r1
 800870a:	4931      	ldr	r1, [pc, #196]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 800870c:	4313      	orrs	r3, r2
 800870e:	628b      	str	r3, [r1, #40]	; 0x28
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008714:	3b01      	subs	r3, #1
 8008716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871e:	3b01      	subs	r3, #1
 8008720:	025b      	lsls	r3, r3, #9
 8008722:	b29b      	uxth	r3, r3
 8008724:	431a      	orrs	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	3b01      	subs	r3, #1
 800872c:	041b      	lsls	r3, r3, #16
 800872e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008732:	431a      	orrs	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008738:	3b01      	subs	r3, #1
 800873a:	061b      	lsls	r3, r3, #24
 800873c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008740:	4923      	ldr	r1, [pc, #140]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008742:	4313      	orrs	r3, r2
 8008744:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008746:	4b22      	ldr	r3, [pc, #136]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	4a21      	ldr	r2, [pc, #132]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008752:	4b1f      	ldr	r3, [pc, #124]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008756:	4b21      	ldr	r3, [pc, #132]	; (80087dc <HAL_RCC_OscConfig+0x778>)
 8008758:	4013      	ands	r3, r2
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800875e:	00d2      	lsls	r2, r2, #3
 8008760:	491b      	ldr	r1, [pc, #108]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008762:	4313      	orrs	r3, r2
 8008764:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008766:	4b1a      	ldr	r3, [pc, #104]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	f023 020c 	bic.w	r2, r3, #12
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008772:	4917      	ldr	r1, [pc, #92]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008774:	4313      	orrs	r3, r2
 8008776:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008778:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	f023 0202 	bic.w	r2, r3, #2
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008784:	4912      	ldr	r1, [pc, #72]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008786:	4313      	orrs	r3, r2
 8008788:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800878a:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	4a10      	ldr	r2, [pc, #64]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008794:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008796:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 8008798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879a:	4a0d      	ldr	r2, [pc, #52]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 800879c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80087a2:	4b0b      	ldr	r3, [pc, #44]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	4a0a      	ldr	r2, [pc, #40]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80087a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80087ae:	4b08      	ldr	r3, [pc, #32]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b2:	4a07      	ldr	r2, [pc, #28]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80087b4:	f043 0301 	orr.w	r3, r3, #1
 80087b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087ba:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a04      	ldr	r2, [pc, #16]	; (80087d0 <HAL_RCC_OscConfig+0x76c>)
 80087c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c6:	f7fa fa91 	bl	8002cec <HAL_GetTick>
 80087ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087cc:	e011      	b.n	80087f2 <HAL_RCC_OscConfig+0x78e>
 80087ce:	bf00      	nop
 80087d0:	58024400 	.word	0x58024400
 80087d4:	58024800 	.word	0x58024800
 80087d8:	fffffc0c 	.word	0xfffffc0c
 80087dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087e0:	f7fa fa84 	bl	8002cec <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d901      	bls.n	80087f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e08a      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087f2:	4b47      	ldr	r3, [pc, #284]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0f0      	beq.n	80087e0 <HAL_RCC_OscConfig+0x77c>
 80087fe:	e082      	b.n	8008906 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008800:	4b43      	ldr	r3, [pc, #268]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a42      	ldr	r2, [pc, #264]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 8008806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800880a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880c:	f7fa fa6e 	bl	8002cec <HAL_GetTick>
 8008810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008812:	e008      	b.n	8008826 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008814:	f7fa fa6a 	bl	8002cec <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b02      	cmp	r3, #2
 8008820:	d901      	bls.n	8008826 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e070      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008826:	4b3a      	ldr	r3, [pc, #232]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1f0      	bne.n	8008814 <HAL_RCC_OscConfig+0x7b0>
 8008832:	e068      	b.n	8008906 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008834:	4b36      	ldr	r3, [pc, #216]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 8008836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008838:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800883a:	4b35      	ldr	r3, [pc, #212]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	2b01      	cmp	r3, #1
 8008846:	d031      	beq.n	80088ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f003 0203 	and.w	r2, r3, #3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008852:	429a      	cmp	r2, r3
 8008854:	d12a      	bne.n	80088ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	091b      	lsrs	r3, r3, #4
 800885a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008862:	429a      	cmp	r2, r3
 8008864:	d122      	bne.n	80088ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008872:	429a      	cmp	r2, r3
 8008874:	d11a      	bne.n	80088ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	0a5b      	lsrs	r3, r3, #9
 800887a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008882:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008884:	429a      	cmp	r2, r3
 8008886:	d111      	bne.n	80088ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	0c1b      	lsrs	r3, r3, #16
 800888c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008896:	429a      	cmp	r2, r3
 8008898:	d108      	bne.n	80088ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	0e1b      	lsrs	r3, r3, #24
 800889e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d001      	beq.n	80088b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e02b      	b.n	8008908 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80088b0:	4b17      	ldr	r3, [pc, #92]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 80088b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b4:	08db      	lsrs	r3, r3, #3
 80088b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d01f      	beq.n	8008906 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80088c6:	4b12      	ldr	r3, [pc, #72]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	4a11      	ldr	r2, [pc, #68]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 80088cc:	f023 0301 	bic.w	r3, r3, #1
 80088d0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088d2:	f7fa fa0b 	bl	8002cec <HAL_GetTick>
 80088d6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80088d8:	bf00      	nop
 80088da:	f7fa fa07 	bl	8002cec <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d0f9      	beq.n	80088da <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80088e6:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 80088e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088ea:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <HAL_RCC_OscConfig+0x8b0>)
 80088ec:	4013      	ands	r3, r2
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80088f2:	00d2      	lsls	r2, r2, #3
 80088f4:	4906      	ldr	r1, [pc, #24]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80088fa:	4b05      	ldr	r3, [pc, #20]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	4a04      	ldr	r2, [pc, #16]	; (8008910 <HAL_RCC_OscConfig+0x8ac>)
 8008900:	f043 0301 	orr.w	r3, r3, #1
 8008904:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3730      	adds	r7, #48	; 0x30
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	58024400 	.word	0x58024400
 8008914:	ffff0007 	.word	0xffff0007

08008918 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e19c      	b.n	8008c66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800892c:	4b8a      	ldr	r3, [pc, #552]	; (8008b58 <HAL_RCC_ClockConfig+0x240>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 030f 	and.w	r3, r3, #15
 8008934:	683a      	ldr	r2, [r7, #0]
 8008936:	429a      	cmp	r2, r3
 8008938:	d910      	bls.n	800895c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800893a:	4b87      	ldr	r3, [pc, #540]	; (8008b58 <HAL_RCC_ClockConfig+0x240>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f023 020f 	bic.w	r2, r3, #15
 8008942:	4985      	ldr	r1, [pc, #532]	; (8008b58 <HAL_RCC_ClockConfig+0x240>)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	4313      	orrs	r3, r2
 8008948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800894a:	4b83      	ldr	r3, [pc, #524]	; (8008b58 <HAL_RCC_ClockConfig+0x240>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 030f 	and.w	r3, r3, #15
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d001      	beq.n	800895c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e184      	b.n	8008c66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b00      	cmp	r3, #0
 8008966:	d010      	beq.n	800898a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	4b7b      	ldr	r3, [pc, #492]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008974:	429a      	cmp	r2, r3
 8008976:	d908      	bls.n	800898a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008978:	4b78      	ldr	r3, [pc, #480]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	4975      	ldr	r1, [pc, #468]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008986:	4313      	orrs	r3, r2
 8008988:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d010      	beq.n	80089b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	695a      	ldr	r2, [r3, #20]
 800899a:	4b70      	ldr	r3, [pc, #448]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d908      	bls.n	80089b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089a6:	4b6d      	ldr	r3, [pc, #436]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	496a      	ldr	r1, [pc, #424]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0310 	and.w	r3, r3, #16
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d010      	beq.n	80089e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	699a      	ldr	r2, [r3, #24]
 80089c8:	4b64      	ldr	r3, [pc, #400]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d908      	bls.n	80089e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089d4:	4b61      	ldr	r3, [pc, #388]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	495e      	ldr	r1, [pc, #376]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d010      	beq.n	8008a14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69da      	ldr	r2, [r3, #28]
 80089f6:	4b59      	ldr	r3, [pc, #356]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d908      	bls.n	8008a14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008a02:	4b56      	ldr	r3, [pc, #344]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	4953      	ldr	r1, [pc, #332]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008a10:	4313      	orrs	r3, r2
 8008a12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d010      	beq.n	8008a42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	4b4d      	ldr	r3, [pc, #308]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	f003 030f 	and.w	r3, r3, #15
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d908      	bls.n	8008a42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a30:	4b4a      	ldr	r3, [pc, #296]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	f023 020f 	bic.w	r2, r3, #15
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	4947      	ldr	r1, [pc, #284]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d055      	beq.n	8008afa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a4e:	4b43      	ldr	r3, [pc, #268]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	4940      	ldr	r1, [pc, #256]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d107      	bne.n	8008a78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a68:	4b3c      	ldr	r3, [pc, #240]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d121      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e0f6      	b.n	8008c66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d107      	bne.n	8008a90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a80:	4b36      	ldr	r3, [pc, #216]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d115      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e0ea      	b.n	8008c66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d107      	bne.n	8008aa8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a98:	4b30      	ldr	r3, [pc, #192]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d109      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e0de      	b.n	8008c66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008aa8:	4b2c      	ldr	r3, [pc, #176]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e0d6      	b.n	8008c66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ab8:	4b28      	ldr	r3, [pc, #160]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	f023 0207 	bic.w	r2, r3, #7
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	4925      	ldr	r1, [pc, #148]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aca:	f7fa f90f 	bl	8002cec <HAL_GetTick>
 8008ace:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ad0:	e00a      	b.n	8008ae8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ad2:	f7fa f90b 	bl	8002cec <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e0be      	b.n	8008c66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ae8:	4b1c      	ldr	r3, [pc, #112]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	00db      	lsls	r3, r3, #3
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d1eb      	bne.n	8008ad2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0302 	and.w	r3, r3, #2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d010      	beq.n	8008b28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	4b14      	ldr	r3, [pc, #80]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d208      	bcs.n	8008b28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b16:	4b11      	ldr	r3, [pc, #68]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f023 020f 	bic.w	r2, r3, #15
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	490e      	ldr	r1, [pc, #56]	; (8008b5c <HAL_RCC_ClockConfig+0x244>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b28:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <HAL_RCC_ClockConfig+0x240>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 030f 	and.w	r3, r3, #15
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d214      	bcs.n	8008b60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b36:	4b08      	ldr	r3, [pc, #32]	; (8008b58 <HAL_RCC_ClockConfig+0x240>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f023 020f 	bic.w	r2, r3, #15
 8008b3e:	4906      	ldr	r1, [pc, #24]	; (8008b58 <HAL_RCC_ClockConfig+0x240>)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b46:	4b04      	ldr	r3, [pc, #16]	; (8008b58 <HAL_RCC_ClockConfig+0x240>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d005      	beq.n	8008b60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e086      	b.n	8008c66 <HAL_RCC_ClockConfig+0x34e>
 8008b58:	52002000 	.word	0x52002000
 8008b5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d010      	beq.n	8008b8e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691a      	ldr	r2, [r3, #16]
 8008b70:	4b3f      	ldr	r3, [pc, #252]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d208      	bcs.n	8008b8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b7c:	4b3c      	ldr	r3, [pc, #240]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	4939      	ldr	r1, [pc, #228]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0308 	and.w	r3, r3, #8
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d010      	beq.n	8008bbc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	695a      	ldr	r2, [r3, #20]
 8008b9e:	4b34      	ldr	r3, [pc, #208]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d208      	bcs.n	8008bbc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008baa:	4b31      	ldr	r3, [pc, #196]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	492e      	ldr	r1, [pc, #184]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0310 	and.w	r3, r3, #16
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d010      	beq.n	8008bea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	699a      	ldr	r2, [r3, #24]
 8008bcc:	4b28      	ldr	r3, [pc, #160]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d208      	bcs.n	8008bea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008bd8:	4b25      	ldr	r3, [pc, #148]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	4922      	ldr	r1, [pc, #136]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d010      	beq.n	8008c18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	69da      	ldr	r2, [r3, #28]
 8008bfa:	4b1d      	ldr	r3, [pc, #116]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d208      	bcs.n	8008c18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c06:	4b1a      	ldr	r3, [pc, #104]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	4917      	ldr	r1, [pc, #92]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c18:	f000 f834 	bl	8008c84 <HAL_RCC_GetSysClockFreq>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	4b14      	ldr	r3, [pc, #80]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	0a1b      	lsrs	r3, r3, #8
 8008c24:	f003 030f 	and.w	r3, r3, #15
 8008c28:	4912      	ldr	r1, [pc, #72]	; (8008c74 <HAL_RCC_ClockConfig+0x35c>)
 8008c2a:	5ccb      	ldrb	r3, [r1, r3]
 8008c2c:	f003 031f 	and.w	r3, r3, #31
 8008c30:	fa22 f303 	lsr.w	r3, r2, r3
 8008c34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c36:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <HAL_RCC_ClockConfig+0x358>)
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	4a0d      	ldr	r2, [pc, #52]	; (8008c74 <HAL_RCC_ClockConfig+0x35c>)
 8008c40:	5cd3      	ldrb	r3, [r2, r3]
 8008c42:	f003 031f 	and.w	r3, r3, #31
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	fa22 f303 	lsr.w	r3, r2, r3
 8008c4c:	4a0a      	ldr	r2, [pc, #40]	; (8008c78 <HAL_RCC_ClockConfig+0x360>)
 8008c4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c50:	4a0a      	ldr	r2, [pc, #40]	; (8008c7c <HAL_RCC_ClockConfig+0x364>)
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008c56:	4b0a      	ldr	r3, [pc, #40]	; (8008c80 <HAL_RCC_ClockConfig+0x368>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7f9 fffc 	bl	8002c58 <HAL_InitTick>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	58024400 	.word	0x58024400
 8008c74:	08012a8c 	.word	0x08012a8c
 8008c78:	24000008 	.word	0x24000008
 8008c7c:	24000004 	.word	0x24000004
 8008c80:	2400000c 	.word	0x2400000c

08008c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b089      	sub	sp, #36	; 0x24
 8008c88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c8a:	4bb3      	ldr	r3, [pc, #716]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c92:	2b18      	cmp	r3, #24
 8008c94:	f200 8155 	bhi.w	8008f42 <HAL_RCC_GetSysClockFreq+0x2be>
 8008c98:	a201      	add	r2, pc, #4	; (adr r2, 8008ca0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9e:	bf00      	nop
 8008ca0:	08008d05 	.word	0x08008d05
 8008ca4:	08008f43 	.word	0x08008f43
 8008ca8:	08008f43 	.word	0x08008f43
 8008cac:	08008f43 	.word	0x08008f43
 8008cb0:	08008f43 	.word	0x08008f43
 8008cb4:	08008f43 	.word	0x08008f43
 8008cb8:	08008f43 	.word	0x08008f43
 8008cbc:	08008f43 	.word	0x08008f43
 8008cc0:	08008d2b 	.word	0x08008d2b
 8008cc4:	08008f43 	.word	0x08008f43
 8008cc8:	08008f43 	.word	0x08008f43
 8008ccc:	08008f43 	.word	0x08008f43
 8008cd0:	08008f43 	.word	0x08008f43
 8008cd4:	08008f43 	.word	0x08008f43
 8008cd8:	08008f43 	.word	0x08008f43
 8008cdc:	08008f43 	.word	0x08008f43
 8008ce0:	08008d31 	.word	0x08008d31
 8008ce4:	08008f43 	.word	0x08008f43
 8008ce8:	08008f43 	.word	0x08008f43
 8008cec:	08008f43 	.word	0x08008f43
 8008cf0:	08008f43 	.word	0x08008f43
 8008cf4:	08008f43 	.word	0x08008f43
 8008cf8:	08008f43 	.word	0x08008f43
 8008cfc:	08008f43 	.word	0x08008f43
 8008d00:	08008d37 	.word	0x08008d37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d04:	4b94      	ldr	r3, [pc, #592]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d009      	beq.n	8008d24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d10:	4b91      	ldr	r3, [pc, #580]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	08db      	lsrs	r3, r3, #3
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	4a90      	ldr	r2, [pc, #576]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008d22:	e111      	b.n	8008f48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008d24:	4b8d      	ldr	r3, [pc, #564]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d26:	61bb      	str	r3, [r7, #24]
      break;
 8008d28:	e10e      	b.n	8008f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008d2a:	4b8d      	ldr	r3, [pc, #564]	; (8008f60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d2c:	61bb      	str	r3, [r7, #24]
      break;
 8008d2e:	e10b      	b.n	8008f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008d30:	4b8c      	ldr	r3, [pc, #560]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008d32:	61bb      	str	r3, [r7, #24]
      break;
 8008d34:	e108      	b.n	8008f48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d36:	4b88      	ldr	r3, [pc, #544]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3a:	f003 0303 	and.w	r3, r3, #3
 8008d3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008d40:	4b85      	ldr	r3, [pc, #532]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d44:	091b      	lsrs	r3, r3, #4
 8008d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008d4c:	4b82      	ldr	r3, [pc, #520]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d56:	4b80      	ldr	r3, [pc, #512]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5a:	08db      	lsrs	r3, r3, #3
 8008d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	fb02 f303 	mul.w	r3, r2, r3
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 80e1 	beq.w	8008f3c <HAL_RCC_GetSysClockFreq+0x2b8>
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	f000 8083 	beq.w	8008e88 <HAL_RCC_GetSysClockFreq+0x204>
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	f200 80a1 	bhi.w	8008ecc <HAL_RCC_GetSysClockFreq+0x248>
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <HAL_RCC_GetSysClockFreq+0x114>
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d056      	beq.n	8008e44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d96:	e099      	b.n	8008ecc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d98:	4b6f      	ldr	r3, [pc, #444]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0320 	and.w	r3, r3, #32
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d02d      	beq.n	8008e00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008da4:	4b6c      	ldr	r3, [pc, #432]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	08db      	lsrs	r3, r3, #3
 8008daa:	f003 0303 	and.w	r3, r3, #3
 8008dae:	4a6b      	ldr	r2, [pc, #428]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008db0:	fa22 f303 	lsr.w	r3, r2, r3
 8008db4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	ee07 3a90 	vmov	s15, r3
 8008dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	ee07 3a90 	vmov	s15, r3
 8008dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dce:	4b62      	ldr	r3, [pc, #392]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8008de2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008dfe:	e087      	b.n	8008f10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008f6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e12:	4b51      	ldr	r3, [pc, #324]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1a:	ee07 3a90 	vmov	s15, r3
 8008e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e26:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e42:	e065      	b.n	8008f10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008f70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e56:	4b40      	ldr	r3, [pc, #256]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5e:	ee07 3a90 	vmov	s15, r3
 8008e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e6a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e86:	e043      	b.n	8008f10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e92:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008f74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e9a:	4b2f      	ldr	r3, [pc, #188]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea2:	ee07 3a90 	vmov	s15, r3
 8008ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008eca:	e021      	b.n	8008f10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008f70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ede:	4b1e      	ldr	r3, [pc, #120]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee6:	ee07 3a90 	vmov	s15, r3
 8008eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ef2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008f10:	4b11      	ldr	r3, [pc, #68]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f14:	0a5b      	lsrs	r3, r3, #9
 8008f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f34:	ee17 3a90 	vmov	r3, s15
 8008f38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008f3a:	e005      	b.n	8008f48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61bb      	str	r3, [r7, #24]
      break;
 8008f40:	e002      	b.n	8008f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008f42:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f44:	61bb      	str	r3, [r7, #24]
      break;
 8008f46:	bf00      	nop
  }

  return sysclockfreq;
 8008f48:	69bb      	ldr	r3, [r7, #24]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3724      	adds	r7, #36	; 0x24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	58024400 	.word	0x58024400
 8008f5c:	03d09000 	.word	0x03d09000
 8008f60:	003d0900 	.word	0x003d0900
 8008f64:	017d7840 	.word	0x017d7840
 8008f68:	46000000 	.word	0x46000000
 8008f6c:	4c742400 	.word	0x4c742400
 8008f70:	4a742400 	.word	0x4a742400
 8008f74:	4bbebc20 	.word	0x4bbebc20

08008f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f7e:	f7ff fe81 	bl	8008c84 <HAL_RCC_GetSysClockFreq>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	0a1b      	lsrs	r3, r3, #8
 8008f8a:	f003 030f 	and.w	r3, r3, #15
 8008f8e:	490f      	ldr	r1, [pc, #60]	; (8008fcc <HAL_RCC_GetHCLKFreq+0x54>)
 8008f90:	5ccb      	ldrb	r3, [r1, r3]
 8008f92:	f003 031f 	and.w	r3, r3, #31
 8008f96:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	f003 030f 	and.w	r3, r3, #15
 8008fa4:	4a09      	ldr	r2, [pc, #36]	; (8008fcc <HAL_RCC_GetHCLKFreq+0x54>)
 8008fa6:	5cd3      	ldrb	r3, [r2, r3]
 8008fa8:	f003 031f 	and.w	r3, r3, #31
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb2:	4a07      	ldr	r2, [pc, #28]	; (8008fd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008fb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008fb6:	4a07      	ldr	r2, [pc, #28]	; (8008fd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008fbc:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	58024400 	.word	0x58024400
 8008fcc:	08012a8c 	.word	0x08012a8c
 8008fd0:	24000008 	.word	0x24000008
 8008fd4:	24000004 	.word	0x24000004

08008fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008fdc:	f7ff ffcc 	bl	8008f78 <HAL_RCC_GetHCLKFreq>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	091b      	lsrs	r3, r3, #4
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	4904      	ldr	r1, [pc, #16]	; (8009000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008fee:	5ccb      	ldrb	r3, [r1, r3]
 8008ff0:	f003 031f 	and.w	r3, r3, #31
 8008ff4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	58024400 	.word	0x58024400
 8009000:	08012a8c 	.word	0x08012a8c

08009004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009008:	f7ff ffb6 	bl	8008f78 <HAL_RCC_GetHCLKFreq>
 800900c:	4602      	mov	r2, r0
 800900e:	4b06      	ldr	r3, [pc, #24]	; (8009028 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	0a1b      	lsrs	r3, r3, #8
 8009014:	f003 0307 	and.w	r3, r3, #7
 8009018:	4904      	ldr	r1, [pc, #16]	; (800902c <HAL_RCC_GetPCLK2Freq+0x28>)
 800901a:	5ccb      	ldrb	r3, [r1, r3]
 800901c:	f003 031f 	and.w	r3, r3, #31
 8009020:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009024:	4618      	mov	r0, r3
 8009026:	bd80      	pop	{r7, pc}
 8009028:	58024400 	.word	0x58024400
 800902c:	08012a8c 	.word	0x08012a8c

08009030 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009034:	b0ca      	sub	sp, #296	; 0x128
 8009036:	af00      	add	r7, sp, #0
 8009038:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800903c:	2300      	movs	r3, #0
 800903e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009042:	2300      	movs	r3, #0
 8009044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009050:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009054:	2500      	movs	r5, #0
 8009056:	ea54 0305 	orrs.w	r3, r4, r5
 800905a:	d049      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800905c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009062:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009066:	d02f      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009068:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800906c:	d828      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800906e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009072:	d01a      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009078:	d822      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800907e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009082:	d007      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009084:	e01c      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009086:	4bb8      	ldr	r3, [pc, #736]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908a:	4ab7      	ldr	r2, [pc, #732]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800908c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009090:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009092:	e01a      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009098:	3308      	adds	r3, #8
 800909a:	2102      	movs	r1, #2
 800909c:	4618      	mov	r0, r3
 800909e:	f002 fb61 	bl	800b764 <RCCEx_PLL2_Config>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80090a8:	e00f      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ae:	3328      	adds	r3, #40	; 0x28
 80090b0:	2102      	movs	r1, #2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f002 fc08 	bl	800b8c8 <RCCEx_PLL3_Config>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80090be:	e004      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090c6:	e000      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80090c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10a      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80090d2:	4ba5      	ldr	r3, [pc, #660]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80090da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090e0:	4aa1      	ldr	r2, [pc, #644]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090e2:	430b      	orrs	r3, r1
 80090e4:	6513      	str	r3, [r2, #80]	; 0x50
 80090e6:	e003      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80090f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80090fc:	f04f 0900 	mov.w	r9, #0
 8009100:	ea58 0309 	orrs.w	r3, r8, r9
 8009104:	d047      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910c:	2b04      	cmp	r3, #4
 800910e:	d82a      	bhi.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009110:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	0800912d 	.word	0x0800912d
 800911c:	0800913b 	.word	0x0800913b
 8009120:	08009151 	.word	0x08009151
 8009124:	0800916f 	.word	0x0800916f
 8009128:	0800916f 	.word	0x0800916f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800912c:	4b8e      	ldr	r3, [pc, #568]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009130:	4a8d      	ldr	r2, [pc, #564]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009138:	e01a      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800913e:	3308      	adds	r3, #8
 8009140:	2100      	movs	r1, #0
 8009142:	4618      	mov	r0, r3
 8009144:	f002 fb0e 	bl	800b764 <RCCEx_PLL2_Config>
 8009148:	4603      	mov	r3, r0
 800914a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800914e:	e00f      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009154:	3328      	adds	r3, #40	; 0x28
 8009156:	2100      	movs	r1, #0
 8009158:	4618      	mov	r0, r3
 800915a:	f002 fbb5 	bl	800b8c8 <RCCEx_PLL3_Config>
 800915e:	4603      	mov	r3, r0
 8009160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009164:	e004      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800916c:	e000      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800916e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009178:	4b7b      	ldr	r3, [pc, #492]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800917a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800917c:	f023 0107 	bic.w	r1, r3, #7
 8009180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009186:	4a78      	ldr	r2, [pc, #480]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009188:	430b      	orrs	r3, r1
 800918a:	6513      	str	r3, [r2, #80]	; 0x50
 800918c:	e003      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009192:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80091a2:	f04f 0b00 	mov.w	fp, #0
 80091a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80091aa:	d04c      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80091ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b6:	d030      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80091b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091bc:	d829      	bhi.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091be:	2bc0      	cmp	r3, #192	; 0xc0
 80091c0:	d02d      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80091c2:	2bc0      	cmp	r3, #192	; 0xc0
 80091c4:	d825      	bhi.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091c6:	2b80      	cmp	r3, #128	; 0x80
 80091c8:	d018      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80091ca:	2b80      	cmp	r3, #128	; 0x80
 80091cc:	d821      	bhi.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80091d2:	2b40      	cmp	r3, #64	; 0x40
 80091d4:	d007      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80091d6:	e01c      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d8:	4b63      	ldr	r3, [pc, #396]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091dc:	4a62      	ldr	r2, [pc, #392]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80091e4:	e01c      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ea:	3308      	adds	r3, #8
 80091ec:	2100      	movs	r1, #0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f002 fab8 	bl	800b764 <RCCEx_PLL2_Config>
 80091f4:	4603      	mov	r3, r0
 80091f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80091fa:	e011      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009200:	3328      	adds	r3, #40	; 0x28
 8009202:	2100      	movs	r1, #0
 8009204:	4618      	mov	r0, r3
 8009206:	f002 fb5f 	bl	800b8c8 <RCCEx_PLL3_Config>
 800920a:	4603      	mov	r3, r0
 800920c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009210:	e006      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009218:	e002      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800921a:	bf00      	nop
 800921c:	e000      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800921e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10a      	bne.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009228:	4b4f      	ldr	r3, [pc, #316]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800922a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800922c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009236:	4a4c      	ldr	r2, [pc, #304]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009238:	430b      	orrs	r3, r1
 800923a:	6513      	str	r3, [r2, #80]	; 0x50
 800923c:	e003      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009242:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009252:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009256:	2300      	movs	r3, #0
 8009258:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800925c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009260:	460b      	mov	r3, r1
 8009262:	4313      	orrs	r3, r2
 8009264:	d053      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800926a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800926e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009272:	d035      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009278:	d82e      	bhi.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800927a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800927e:	d031      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009280:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009284:	d828      	bhi.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800928a:	d01a      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800928c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009290:	d822      	bhi.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800929a:	d007      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800929c:	e01c      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800929e:	4b32      	ldr	r3, [pc, #200]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	4a31      	ldr	r2, [pc, #196]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092aa:	e01c      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092b0:	3308      	adds	r3, #8
 80092b2:	2100      	movs	r1, #0
 80092b4:	4618      	mov	r0, r3
 80092b6:	f002 fa55 	bl	800b764 <RCCEx_PLL2_Config>
 80092ba:	4603      	mov	r3, r0
 80092bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80092c0:	e011      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c6:	3328      	adds	r3, #40	; 0x28
 80092c8:	2100      	movs	r1, #0
 80092ca:	4618      	mov	r0, r3
 80092cc:	f002 fafc 	bl	800b8c8 <RCCEx_PLL3_Config>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092d6:	e006      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092de:	e002      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80092e0:	bf00      	nop
 80092e2:	e000      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80092e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10b      	bne.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80092ee:	4b1e      	ldr	r3, [pc, #120]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80092f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80092fe:	4a1a      	ldr	r2, [pc, #104]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009300:	430b      	orrs	r3, r1
 8009302:	6593      	str	r3, [r2, #88]	; 0x58
 8009304:	e003      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800930a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800930e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800931a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800931e:	2300      	movs	r3, #0
 8009320:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009324:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009328:	460b      	mov	r3, r1
 800932a:	4313      	orrs	r3, r2
 800932c:	d056      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800932e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009332:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009336:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800933a:	d038      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800933c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009340:	d831      	bhi.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009342:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009346:	d034      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009348:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800934c:	d82b      	bhi.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800934e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009352:	d01d      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009358:	d825      	bhi.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d006      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800935e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009362:	d00a      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009364:	e01f      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009366:	bf00      	nop
 8009368:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800936c:	4ba2      	ldr	r3, [pc, #648]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	4aa1      	ldr	r2, [pc, #644]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009376:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009378:	e01c      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800937e:	3308      	adds	r3, #8
 8009380:	2100      	movs	r1, #0
 8009382:	4618      	mov	r0, r3
 8009384:	f002 f9ee 	bl	800b764 <RCCEx_PLL2_Config>
 8009388:	4603      	mov	r3, r0
 800938a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800938e:	e011      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009394:	3328      	adds	r3, #40	; 0x28
 8009396:	2100      	movs	r1, #0
 8009398:	4618      	mov	r0, r3
 800939a:	f002 fa95 	bl	800b8c8 <RCCEx_PLL3_Config>
 800939e:	4603      	mov	r3, r0
 80093a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093a4:	e006      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093ac:	e002      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80093ae:	bf00      	nop
 80093b0:	e000      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80093b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10b      	bne.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80093bc:	4b8e      	ldr	r3, [pc, #568]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80093c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093cc:	4a8a      	ldr	r2, [pc, #552]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093ce:	430b      	orrs	r3, r1
 80093d0:	6593      	str	r3, [r2, #88]	; 0x58
 80093d2:	e003      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80093dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80093e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80093ec:	2300      	movs	r3, #0
 80093ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80093f6:	460b      	mov	r3, r1
 80093f8:	4313      	orrs	r3, r2
 80093fa:	d03a      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80093fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009402:	2b30      	cmp	r3, #48	; 0x30
 8009404:	d01f      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009406:	2b30      	cmp	r3, #48	; 0x30
 8009408:	d819      	bhi.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800940a:	2b20      	cmp	r3, #32
 800940c:	d00c      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800940e:	2b20      	cmp	r3, #32
 8009410:	d815      	bhi.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009412:	2b00      	cmp	r3, #0
 8009414:	d019      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009416:	2b10      	cmp	r3, #16
 8009418:	d111      	bne.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800941a:	4b77      	ldr	r3, [pc, #476]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800941c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941e:	4a76      	ldr	r2, [pc, #472]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009424:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009426:	e011      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800942c:	3308      	adds	r3, #8
 800942e:	2102      	movs	r1, #2
 8009430:	4618      	mov	r0, r3
 8009432:	f002 f997 	bl	800b764 <RCCEx_PLL2_Config>
 8009436:	4603      	mov	r3, r0
 8009438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800943c:	e006      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009444:	e002      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009446:	bf00      	nop
 8009448:	e000      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800944a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800944c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10a      	bne.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009454:	4b68      	ldr	r3, [pc, #416]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009458:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800945c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009462:	4a65      	ldr	r2, [pc, #404]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009464:	430b      	orrs	r3, r1
 8009466:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009468:	e003      	b.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800946a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800946e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800947e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009482:	2300      	movs	r3, #0
 8009484:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009488:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800948c:	460b      	mov	r3, r1
 800948e:	4313      	orrs	r3, r2
 8009490:	d051      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800949c:	d035      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800949e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094a2:	d82e      	bhi.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094a8:	d031      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80094aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094ae:	d828      	bhi.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094b4:	d01a      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80094b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ba:	d822      	bhi.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80094c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094c4:	d007      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80094c6:	e01c      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c8:	4b4b      	ldr	r3, [pc, #300]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094cc:	4a4a      	ldr	r2, [pc, #296]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094d4:	e01c      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094da:	3308      	adds	r3, #8
 80094dc:	2100      	movs	r1, #0
 80094de:	4618      	mov	r0, r3
 80094e0:	f002 f940 	bl	800b764 <RCCEx_PLL2_Config>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094ea:	e011      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094f0:	3328      	adds	r3, #40	; 0x28
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f002 f9e7 	bl	800b8c8 <RCCEx_PLL3_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009500:	e006      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009508:	e002      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800950a:	bf00      	nop
 800950c:	e000      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800950e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009518:	4b37      	ldr	r3, [pc, #220]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800951a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800951c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009526:	4a34      	ldr	r2, [pc, #208]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009528:	430b      	orrs	r3, r1
 800952a:	6513      	str	r3, [r2, #80]	; 0x50
 800952c:	e003      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009542:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009546:	2300      	movs	r3, #0
 8009548:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800954c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009550:	460b      	mov	r3, r1
 8009552:	4313      	orrs	r3, r2
 8009554:	d056      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800955c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009560:	d033      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009562:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009566:	d82c      	bhi.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009568:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800956c:	d02f      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800956e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009572:	d826      	bhi.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009574:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009578:	d02b      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800957a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800957e:	d820      	bhi.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009584:	d012      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800958a:	d81a      	bhi.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800958c:	2b00      	cmp	r3, #0
 800958e:	d022      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009594:	d115      	bne.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959a:	3308      	adds	r3, #8
 800959c:	2101      	movs	r1, #1
 800959e:	4618      	mov	r0, r3
 80095a0:	f002 f8e0 	bl	800b764 <RCCEx_PLL2_Config>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80095aa:	e015      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b0:	3328      	adds	r3, #40	; 0x28
 80095b2:	2101      	movs	r1, #1
 80095b4:	4618      	mov	r0, r3
 80095b6:	f002 f987 	bl	800b8c8 <RCCEx_PLL3_Config>
 80095ba:	4603      	mov	r3, r0
 80095bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80095c0:	e00a      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095c8:	e006      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095ca:	bf00      	nop
 80095cc:	e004      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095ce:	bf00      	nop
 80095d0:	e002      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095d2:	bf00      	nop
 80095d4:	e000      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10d      	bne.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80095e0:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80095e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ee:	4a02      	ldr	r2, [pc, #8]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095f0:	430b      	orrs	r3, r1
 80095f2:	6513      	str	r3, [r2, #80]	; 0x50
 80095f4:	e006      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80095f6:	bf00      	nop
 80095f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009600:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009614:	2300      	movs	r3, #0
 8009616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800961a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800961e:	460b      	mov	r3, r1
 8009620:	4313      	orrs	r3, r2
 8009622:	d055      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009628:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800962c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009630:	d033      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009636:	d82c      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800963c:	d02f      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800963e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009642:	d826      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009644:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009648:	d02b      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800964a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800964e:	d820      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009654:	d012      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800965a:	d81a      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d022      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009664:	d115      	bne.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800966a:	3308      	adds	r3, #8
 800966c:	2101      	movs	r1, #1
 800966e:	4618      	mov	r0, r3
 8009670:	f002 f878 	bl	800b764 <RCCEx_PLL2_Config>
 8009674:	4603      	mov	r3, r0
 8009676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800967a:	e015      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800967c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009680:	3328      	adds	r3, #40	; 0x28
 8009682:	2101      	movs	r1, #1
 8009684:	4618      	mov	r0, r3
 8009686:	f002 f91f 	bl	800b8c8 <RCCEx_PLL3_Config>
 800968a:	4603      	mov	r3, r0
 800968c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009690:	e00a      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009698:	e006      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800969a:	bf00      	nop
 800969c:	e004      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800969e:	bf00      	nop
 80096a0:	e002      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096a2:	bf00      	nop
 80096a4:	e000      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10b      	bne.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096b0:	4ba3      	ldr	r3, [pc, #652]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80096b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096c0:	4a9f      	ldr	r2, [pc, #636]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096c2:	430b      	orrs	r3, r1
 80096c4:	6593      	str	r3, [r2, #88]	; 0x58
 80096c6:	e003      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80096dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096e0:	2300      	movs	r3, #0
 80096e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80096ea:	460b      	mov	r3, r1
 80096ec:	4313      	orrs	r3, r2
 80096ee:	d037      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80096f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096fa:	d00e      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80096fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009700:	d816      	bhi.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009702:	2b00      	cmp	r3, #0
 8009704:	d018      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800970a:	d111      	bne.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800970c:	4b8c      	ldr	r3, [pc, #560]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800970e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009710:	4a8b      	ldr	r2, [pc, #556]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009718:	e00f      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800971a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800971e:	3308      	adds	r3, #8
 8009720:	2101      	movs	r1, #1
 8009722:	4618      	mov	r0, r3
 8009724:	f002 f81e 	bl	800b764 <RCCEx_PLL2_Config>
 8009728:	4603      	mov	r3, r0
 800972a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800972e:	e004      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009736:	e000      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800973a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10a      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009742:	4b7f      	ldr	r3, [pc, #508]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009746:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800974a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800974e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009750:	4a7b      	ldr	r2, [pc, #492]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009752:	430b      	orrs	r3, r1
 8009754:	6513      	str	r3, [r2, #80]	; 0x50
 8009756:	e003      	b.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800975c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800976c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009770:	2300      	movs	r3, #0
 8009772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009776:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800977a:	460b      	mov	r3, r1
 800977c:	4313      	orrs	r3, r2
 800977e:	d039      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009786:	2b03      	cmp	r3, #3
 8009788:	d81c      	bhi.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800978a:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800978c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009790:	080097cd 	.word	0x080097cd
 8009794:	080097a1 	.word	0x080097a1
 8009798:	080097af 	.word	0x080097af
 800979c:	080097cd 	.word	0x080097cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a0:	4b67      	ldr	r3, [pc, #412]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	4a66      	ldr	r2, [pc, #408]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80097ac:	e00f      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b2:	3308      	adds	r3, #8
 80097b4:	2102      	movs	r1, #2
 80097b6:	4618      	mov	r0, r3
 80097b8:	f001 ffd4 	bl	800b764 <RCCEx_PLL2_Config>
 80097bc:	4603      	mov	r3, r0
 80097be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80097c2:	e004      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097ca:	e000      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80097cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10a      	bne.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097d6:	4b5a      	ldr	r3, [pc, #360]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097da:	f023 0103 	bic.w	r1, r3, #3
 80097de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e4:	4a56      	ldr	r2, [pc, #344]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097e6:	430b      	orrs	r3, r1
 80097e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097ea:	e003      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009800:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009804:	2300      	movs	r3, #0
 8009806:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800980a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800980e:	460b      	mov	r3, r1
 8009810:	4313      	orrs	r3, r2
 8009812:	f000 809f 	beq.w	8009954 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009816:	4b4b      	ldr	r3, [pc, #300]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a4a      	ldr	r2, [pc, #296]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800981c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009820:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009822:	f7f9 fa63 	bl	8002cec <HAL_GetTick>
 8009826:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800982a:	e00b      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800982c:	f7f9 fa5e 	bl	8002cec <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	2b64      	cmp	r3, #100	; 0x64
 800983a:	d903      	bls.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800983c:	2303      	movs	r3, #3
 800983e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009842:	e005      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009844:	4b3f      	ldr	r3, [pc, #252]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0ed      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009850:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009854:	2b00      	cmp	r3, #0
 8009856:	d179      	bne.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009858:	4b39      	ldr	r3, [pc, #228]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800985a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800985c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009860:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009864:	4053      	eors	r3, r2
 8009866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800986a:	2b00      	cmp	r3, #0
 800986c:	d015      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800986e:	4b34      	ldr	r3, [pc, #208]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009876:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800987a:	4b31      	ldr	r3, [pc, #196]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800987c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987e:	4a30      	ldr	r2, [pc, #192]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009884:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009886:	4b2e      	ldr	r3, [pc, #184]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988a:	4a2d      	ldr	r2, [pc, #180]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800988c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009890:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009892:	4a2b      	ldr	r2, [pc, #172]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009894:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009898:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800989a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800989e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098a6:	d118      	bne.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a8:	f7f9 fa20 	bl	8002cec <HAL_GetTick>
 80098ac:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098b0:	e00d      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098b2:	f7f9 fa1b 	bl	8002cec <HAL_GetTick>
 80098b6:	4602      	mov	r2, r0
 80098b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80098bc:	1ad2      	subs	r2, r2, r3
 80098be:	f241 3388 	movw	r3, #5000	; 0x1388
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d903      	bls.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80098cc:	e005      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098ce:	4b1c      	ldr	r3, [pc, #112]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d2:	f003 0302 	and.w	r3, r3, #2
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0eb      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80098da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d129      	bne.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098f2:	d10e      	bne.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80098f4:	4b12      	ldr	r3, [pc, #72]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80098fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009900:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009904:	091a      	lsrs	r2, r3, #4
 8009906:	4b10      	ldr	r3, [pc, #64]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009908:	4013      	ands	r3, r2
 800990a:	4a0d      	ldr	r2, [pc, #52]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800990c:	430b      	orrs	r3, r1
 800990e:	6113      	str	r3, [r2, #16]
 8009910:	e005      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009912:	4b0b      	ldr	r3, [pc, #44]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	4a0a      	ldr	r2, [pc, #40]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009918:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800991c:	6113      	str	r3, [r2, #16]
 800991e:	4b08      	ldr	r3, [pc, #32]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009920:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800992a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800992e:	4a04      	ldr	r2, [pc, #16]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009930:	430b      	orrs	r3, r1
 8009932:	6713      	str	r3, [r2, #112]	; 0x70
 8009934:	e00e      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800993a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800993e:	e009      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009940:	58024400 	.word	0x58024400
 8009944:	58024800 	.word	0x58024800
 8009948:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800994c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009950:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f002 0301 	and.w	r3, r2, #1
 8009960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009964:	2300      	movs	r3, #0
 8009966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800996a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800996e:	460b      	mov	r3, r1
 8009970:	4313      	orrs	r3, r2
 8009972:	f000 8089 	beq.w	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800997c:	2b28      	cmp	r3, #40	; 0x28
 800997e:	d86b      	bhi.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009980:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009986:	bf00      	nop
 8009988:	08009a61 	.word	0x08009a61
 800998c:	08009a59 	.word	0x08009a59
 8009990:	08009a59 	.word	0x08009a59
 8009994:	08009a59 	.word	0x08009a59
 8009998:	08009a59 	.word	0x08009a59
 800999c:	08009a59 	.word	0x08009a59
 80099a0:	08009a59 	.word	0x08009a59
 80099a4:	08009a59 	.word	0x08009a59
 80099a8:	08009a2d 	.word	0x08009a2d
 80099ac:	08009a59 	.word	0x08009a59
 80099b0:	08009a59 	.word	0x08009a59
 80099b4:	08009a59 	.word	0x08009a59
 80099b8:	08009a59 	.word	0x08009a59
 80099bc:	08009a59 	.word	0x08009a59
 80099c0:	08009a59 	.word	0x08009a59
 80099c4:	08009a59 	.word	0x08009a59
 80099c8:	08009a43 	.word	0x08009a43
 80099cc:	08009a59 	.word	0x08009a59
 80099d0:	08009a59 	.word	0x08009a59
 80099d4:	08009a59 	.word	0x08009a59
 80099d8:	08009a59 	.word	0x08009a59
 80099dc:	08009a59 	.word	0x08009a59
 80099e0:	08009a59 	.word	0x08009a59
 80099e4:	08009a59 	.word	0x08009a59
 80099e8:	08009a61 	.word	0x08009a61
 80099ec:	08009a59 	.word	0x08009a59
 80099f0:	08009a59 	.word	0x08009a59
 80099f4:	08009a59 	.word	0x08009a59
 80099f8:	08009a59 	.word	0x08009a59
 80099fc:	08009a59 	.word	0x08009a59
 8009a00:	08009a59 	.word	0x08009a59
 8009a04:	08009a59 	.word	0x08009a59
 8009a08:	08009a61 	.word	0x08009a61
 8009a0c:	08009a59 	.word	0x08009a59
 8009a10:	08009a59 	.word	0x08009a59
 8009a14:	08009a59 	.word	0x08009a59
 8009a18:	08009a59 	.word	0x08009a59
 8009a1c:	08009a59 	.word	0x08009a59
 8009a20:	08009a59 	.word	0x08009a59
 8009a24:	08009a59 	.word	0x08009a59
 8009a28:	08009a61 	.word	0x08009a61
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a30:	3308      	adds	r3, #8
 8009a32:	2101      	movs	r1, #1
 8009a34:	4618      	mov	r0, r3
 8009a36:	f001 fe95 	bl	800b764 <RCCEx_PLL2_Config>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a40:	e00f      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a46:	3328      	adds	r3, #40	; 0x28
 8009a48:	2101      	movs	r1, #1
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f001 ff3c 	bl	800b8c8 <RCCEx_PLL3_Config>
 8009a50:	4603      	mov	r3, r0
 8009a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a56:	e004      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a5e:	e000      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10a      	bne.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009a6a:	4bbf      	ldr	r3, [pc, #764]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a78:	4abb      	ldr	r2, [pc, #748]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a7a:	430b      	orrs	r3, r1
 8009a7c:	6553      	str	r3, [r2, #84]	; 0x54
 8009a7e:	e003      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f002 0302 	and.w	r3, r2, #2
 8009a94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009a9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	d041      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aae:	2b05      	cmp	r3, #5
 8009ab0:	d824      	bhi.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009ab2:	a201      	add	r2, pc, #4	; (adr r2, 8009ab8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab8:	08009b05 	.word	0x08009b05
 8009abc:	08009ad1 	.word	0x08009ad1
 8009ac0:	08009ae7 	.word	0x08009ae7
 8009ac4:	08009b05 	.word	0x08009b05
 8009ac8:	08009b05 	.word	0x08009b05
 8009acc:	08009b05 	.word	0x08009b05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 fe43 	bl	800b764 <RCCEx_PLL2_Config>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ae4:	e00f      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aea:	3328      	adds	r3, #40	; 0x28
 8009aec:	2101      	movs	r1, #1
 8009aee:	4618      	mov	r0, r3
 8009af0:	f001 feea 	bl	800b8c8 <RCCEx_PLL3_Config>
 8009af4:	4603      	mov	r3, r0
 8009af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009afa:	e004      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b02:	e000      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b0e:	4b96      	ldr	r3, [pc, #600]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b12:	f023 0107 	bic.w	r1, r3, #7
 8009b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b1c:	4a92      	ldr	r2, [pc, #584]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b1e:	430b      	orrs	r3, r1
 8009b20:	6553      	str	r3, [r2, #84]	; 0x54
 8009b22:	e003      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	f002 0304 	and.w	r3, r2, #4
 8009b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	d044      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b54:	2b05      	cmp	r3, #5
 8009b56:	d825      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009b58:	a201      	add	r2, pc, #4	; (adr r2, 8009b60 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5e:	bf00      	nop
 8009b60:	08009bad 	.word	0x08009bad
 8009b64:	08009b79 	.word	0x08009b79
 8009b68:	08009b8f 	.word	0x08009b8f
 8009b6c:	08009bad 	.word	0x08009bad
 8009b70:	08009bad 	.word	0x08009bad
 8009b74:	08009bad 	.word	0x08009bad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	2101      	movs	r1, #1
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 fdef 	bl	800b764 <RCCEx_PLL2_Config>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b8c:	e00f      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b92:	3328      	adds	r3, #40	; 0x28
 8009b94:	2101      	movs	r1, #1
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 fe96 	bl	800b8c8 <RCCEx_PLL3_Config>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009ba2:	e004      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009baa:	e000      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10b      	bne.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bb6:	4b6c      	ldr	r3, [pc, #432]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bba:	f023 0107 	bic.w	r1, r3, #7
 8009bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bc6:	4a68      	ldr	r2, [pc, #416]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bc8:	430b      	orrs	r3, r1
 8009bca:	6593      	str	r3, [r2, #88]	; 0x58
 8009bcc:	e003      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	f002 0320 	and.w	r3, r2, #32
 8009be2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009be6:	2300      	movs	r3, #0
 8009be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	d055      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c02:	d033      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c08:	d82c      	bhi.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c0e:	d02f      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c14:	d826      	bhi.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c1a:	d02b      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009c1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c20:	d820      	bhi.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c26:	d012      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c2c:	d81a      	bhi.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d022      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c36:	d115      	bne.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	2100      	movs	r1, #0
 8009c40:	4618      	mov	r0, r3
 8009c42:	f001 fd8f 	bl	800b764 <RCCEx_PLL2_Config>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c4c:	e015      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c52:	3328      	adds	r3, #40	; 0x28
 8009c54:	2102      	movs	r1, #2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 fe36 	bl	800b8c8 <RCCEx_PLL3_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c62:	e00a      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c6a:	e006      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c6c:	bf00      	nop
 8009c6e:	e004      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c70:	bf00      	nop
 8009c72:	e002      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c74:	bf00      	nop
 8009c76:	e000      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10b      	bne.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c82:	4b39      	ldr	r3, [pc, #228]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c86:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c92:	4a35      	ldr	r2, [pc, #212]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c94:	430b      	orrs	r3, r1
 8009c96:	6553      	str	r3, [r2, #84]	; 0x54
 8009c98:	e003      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009cb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	d058      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cce:	d033      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009cd0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cd4:	d82c      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cda:	d02f      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce0:	d826      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ce2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ce6:	d02b      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009ce8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cec:	d820      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cf2:	d012      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cf8:	d81a      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d022      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d02:	d115      	bne.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d08:	3308      	adds	r3, #8
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f001 fd29 	bl	800b764 <RCCEx_PLL2_Config>
 8009d12:	4603      	mov	r3, r0
 8009d14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d18:	e015      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1e:	3328      	adds	r3, #40	; 0x28
 8009d20:	2102      	movs	r1, #2
 8009d22:	4618      	mov	r0, r3
 8009d24:	f001 fdd0 	bl	800b8c8 <RCCEx_PLL3_Config>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d2e:	e00a      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d36:	e006      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d38:	bf00      	nop
 8009d3a:	e004      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d3c:	bf00      	nop
 8009d3e:	e002      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d40:	bf00      	nop
 8009d42:	e000      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10e      	bne.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d4e:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d52:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d5e:	4a02      	ldr	r2, [pc, #8]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d60:	430b      	orrs	r3, r1
 8009d62:	6593      	str	r3, [r2, #88]	; 0x58
 8009d64:	e006      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009d66:	bf00      	nop
 8009d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d84:	2300      	movs	r3, #0
 8009d86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4313      	orrs	r3, r2
 8009d92:	d055      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009da0:	d033      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009da2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009da6:	d82c      	bhi.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dac:	d02f      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db2:	d826      	bhi.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009db4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009db8:	d02b      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009dba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dbe:	d820      	bhi.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dc4:	d012      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dca:	d81a      	bhi.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d022      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dd4:	d115      	bne.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dda:	3308      	adds	r3, #8
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4618      	mov	r0, r3
 8009de0:	f001 fcc0 	bl	800b764 <RCCEx_PLL2_Config>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009dea:	e015      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df0:	3328      	adds	r3, #40	; 0x28
 8009df2:	2102      	movs	r1, #2
 8009df4:	4618      	mov	r0, r3
 8009df6:	f001 fd67 	bl	800b8c8 <RCCEx_PLL3_Config>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e00:	e00a      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e08:	e006      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e0a:	bf00      	nop
 8009e0c:	e004      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e0e:	bf00      	nop
 8009e10:	e002      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e12:	bf00      	nop
 8009e14:	e000      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10b      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e20:	4ba1      	ldr	r3, [pc, #644]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e24:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e30:	4a9d      	ldr	r2, [pc, #628]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e32:	430b      	orrs	r3, r1
 8009e34:	6593      	str	r3, [r2, #88]	; 0x58
 8009e36:	e003      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	f002 0308 	and.w	r3, r2, #8
 8009e4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e50:	2300      	movs	r3, #0
 8009e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	d01e      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e6c:	d10c      	bne.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e72:	3328      	adds	r3, #40	; 0x28
 8009e74:	2102      	movs	r1, #2
 8009e76:	4618      	mov	r0, r3
 8009e78:	f001 fd26 	bl	800b8c8 <RCCEx_PLL3_Config>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e88:	4b87      	ldr	r3, [pc, #540]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e98:	4a83      	ldr	r2, [pc, #524]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e9a:	430b      	orrs	r3, r1
 8009e9c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	f002 0310 	and.w	r3, r2, #16
 8009eaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009eb4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	d01e      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eca:	d10c      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed0:	3328      	adds	r3, #40	; 0x28
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 fcf7 	bl	800b8c8 <RCCEx_PLL3_Config>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ee6:	4b70      	ldr	r3, [pc, #448]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ef6:	4a6c      	ldr	r2, [pc, #432]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ef8:	430b      	orrs	r3, r1
 8009efa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009f08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009f16:	460b      	mov	r3, r1
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	d03e      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f28:	d022      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009f2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f2e:	d81b      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d003      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f38:	d00b      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009f3a:	e015      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f40:	3308      	adds	r3, #8
 8009f42:	2100      	movs	r1, #0
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 fc0d 	bl	800b764 <RCCEx_PLL2_Config>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f50:	e00f      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f56:	3328      	adds	r3, #40	; 0x28
 8009f58:	2102      	movs	r1, #2
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 fcb4 	bl	800b8c8 <RCCEx_PLL3_Config>
 8009f60:	4603      	mov	r3, r0
 8009f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f66:	e004      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f6e:	e000      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10b      	bne.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f7a:	4b4b      	ldr	r3, [pc, #300]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f8a:	4a47      	ldr	r2, [pc, #284]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8009f90:	e003      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009fa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8009fa8:	2300      	movs	r3, #0
 8009faa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009fac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	d03b      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fc2:	d01f      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009fc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fc8:	d818      	bhi.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fce:	d003      	beq.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009fd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fd4:	d007      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009fd6:	e011      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fd8:	4b33      	ldr	r3, [pc, #204]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	4a32      	ldr	r2, [pc, #200]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009fe4:	e00f      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fea:	3328      	adds	r3, #40	; 0x28
 8009fec:	2101      	movs	r1, #1
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f001 fc6a 	bl	800b8c8 <RCCEx_PLL3_Config>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ffa:	e004      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a002:	e000      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10b      	bne.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a00e:	4b26      	ldr	r3, [pc, #152]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a012:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a01e:	4a22      	ldr	r2, [pc, #136]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a020:	430b      	orrs	r3, r1
 800a022:	6553      	str	r3, [r2, #84]	; 0x54
 800a024:	e003      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a02a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a03a:	673b      	str	r3, [r7, #112]	; 0x70
 800a03c:	2300      	movs	r3, #0
 800a03e:	677b      	str	r3, [r7, #116]	; 0x74
 800a040:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a044:	460b      	mov	r3, r1
 800a046:	4313      	orrs	r3, r2
 800a048:	d034      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a058:	d007      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a05a:	e011      	b.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a05c:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a060:	4a11      	ldr	r2, [pc, #68]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a068:	e00e      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06e:	3308      	adds	r3, #8
 800a070:	2102      	movs	r1, #2
 800a072:	4618      	mov	r0, r3
 800a074:	f001 fb76 	bl	800b764 <RCCEx_PLL2_Config>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a07e:	e003      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a086:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10d      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a090:	4b05      	ldr	r3, [pc, #20]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a09e:	4a02      	ldr	r2, [pc, #8]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0a0:	430b      	orrs	r3, r1
 800a0a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a0a4:	e006      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a0a6:	bf00      	nop
 800a0a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a0c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	d00c      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d4:	3328      	adds	r3, #40	; 0x28
 800a0d6:	2102      	movs	r1, #2
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f001 fbf5 	bl	800b8c8 <RCCEx_PLL3_Config>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a0f6:	663b      	str	r3, [r7, #96]	; 0x60
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	667b      	str	r3, [r7, #100]	; 0x64
 800a0fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a100:	460b      	mov	r3, r1
 800a102:	4313      	orrs	r3, r2
 800a104:	d038      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a10e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a112:	d018      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a118:	d811      	bhi.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a11a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a11e:	d014      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a124:	d80b      	bhi.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a126:	2b00      	cmp	r3, #0
 800a128:	d011      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a12e:	d106      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a130:	4bc3      	ldr	r3, [pc, #780]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	4ac2      	ldr	r2, [pc, #776]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a13a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a13c:	e008      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a144:	e004      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a146:	bf00      	nop
 800a148:	e002      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a14a:	bf00      	nop
 800a14c:	e000      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a14e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10b      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a158:	4bb9      	ldr	r3, [pc, #740]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a15a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a168:	4ab5      	ldr	r2, [pc, #724]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a16a:	430b      	orrs	r3, r1
 800a16c:	6553      	str	r3, [r2, #84]	; 0x54
 800a16e:	e003      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a174:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a184:	65bb      	str	r3, [r7, #88]	; 0x58
 800a186:	2300      	movs	r3, #0
 800a188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a18a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a18e:	460b      	mov	r3, r1
 800a190:	4313      	orrs	r3, r2
 800a192:	d009      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a194:	4baa      	ldr	r3, [pc, #680]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a198:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1a2:	4aa7      	ldr	r2, [pc, #668]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1a4:	430b      	orrs	r3, r1
 800a1a6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a1b4:	653b      	str	r3, [r7, #80]	; 0x50
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	657b      	str	r3, [r7, #84]	; 0x54
 800a1ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	d00a      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a1c4:	4b9e      	ldr	r3, [pc, #632]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a1d4:	4a9a      	ldr	r2, [pc, #616]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1d6:	430b      	orrs	r3, r1
 800a1d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a1e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	d009      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a1f6:	4b92      	ldr	r3, [pc, #584]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1fa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a204:	4a8e      	ldr	r2, [pc, #568]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a206:	430b      	orrs	r3, r1
 800a208:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a216:	643b      	str	r3, [r7, #64]	; 0x40
 800a218:	2300      	movs	r3, #0
 800a21a:	647b      	str	r3, [r7, #68]	; 0x44
 800a21c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a220:	460b      	mov	r3, r1
 800a222:	4313      	orrs	r3, r2
 800a224:	d00e      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a226:	4b86      	ldr	r3, [pc, #536]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	4a85      	ldr	r2, [pc, #532]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a22c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a230:	6113      	str	r3, [r2, #16]
 800a232:	4b83      	ldr	r3, [pc, #524]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a234:	6919      	ldr	r1, [r3, #16]
 800a236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a23e:	4a80      	ldr	r2, [pc, #512]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a240:	430b      	orrs	r3, r1
 800a242:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a250:	63bb      	str	r3, [r7, #56]	; 0x38
 800a252:	2300      	movs	r3, #0
 800a254:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a256:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a25a:	460b      	mov	r3, r1
 800a25c:	4313      	orrs	r3, r2
 800a25e:	d009      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a260:	4b77      	ldr	r3, [pc, #476]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a264:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26e:	4a74      	ldr	r2, [pc, #464]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a270:	430b      	orrs	r3, r1
 800a272:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a280:	633b      	str	r3, [r7, #48]	; 0x30
 800a282:	2300      	movs	r3, #0
 800a284:	637b      	str	r3, [r7, #52]	; 0x34
 800a286:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a28a:	460b      	mov	r3, r1
 800a28c:	4313      	orrs	r3, r2
 800a28e:	d00a      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a290:	4b6b      	ldr	r3, [pc, #428]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a294:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a29c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2a0:	4a67      	ldr	r2, [pc, #412]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2a2:	430b      	orrs	r3, r1
 800a2a4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	62b9      	str	r1, [r7, #40]	; 0x28
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	d011      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2c6:	3308      	adds	r3, #8
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f001 fa4a 	bl	800b764 <RCCEx_PLL2_Config>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a2d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	6239      	str	r1, [r7, #32]
 800a2f2:	f003 0302 	and.w	r3, r3, #2
 800a2f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4313      	orrs	r3, r2
 800a300:	d011      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a306:	3308      	adds	r3, #8
 800a308:	2101      	movs	r1, #1
 800a30a:	4618      	mov	r0, r3
 800a30c:	f001 fa2a 	bl	800b764 <RCCEx_PLL2_Config>
 800a310:	4603      	mov	r3, r0
 800a312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a322:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	2100      	movs	r1, #0
 800a330:	61b9      	str	r1, [r7, #24]
 800a332:	f003 0304 	and.w	r3, r3, #4
 800a336:	61fb      	str	r3, [r7, #28]
 800a338:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a33c:	460b      	mov	r3, r1
 800a33e:	4313      	orrs	r3, r2
 800a340:	d011      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a346:	3308      	adds	r3, #8
 800a348:	2102      	movs	r1, #2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 fa0a 	bl	800b764 <RCCEx_PLL2_Config>
 800a350:	4603      	mov	r3, r0
 800a352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a35e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	2100      	movs	r1, #0
 800a370:	6139      	str	r1, [r7, #16]
 800a372:	f003 0308 	and.w	r3, r3, #8
 800a376:	617b      	str	r3, [r7, #20]
 800a378:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a37c:	460b      	mov	r3, r1
 800a37e:	4313      	orrs	r3, r2
 800a380:	d011      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a386:	3328      	adds	r3, #40	; 0x28
 800a388:	2100      	movs	r1, #0
 800a38a:	4618      	mov	r0, r3
 800a38c:	f001 fa9c 	bl	800b8c8 <RCCEx_PLL3_Config>
 800a390:	4603      	mov	r3, r0
 800a392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a39e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	f003 0310 	and.w	r3, r3, #16
 800a3b6:	60fb      	str	r3, [r7, #12]
 800a3b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	d011      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c6:	3328      	adds	r3, #40	; 0x28
 800a3c8:	2101      	movs	r1, #1
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 fa7c 	bl	800b8c8 <RCCEx_PLL3_Config>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a3d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d003      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	6039      	str	r1, [r7, #0]
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	607b      	str	r3, [r7, #4]
 800a3f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4313      	orrs	r3, r2
 800a400:	d011      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a406:	3328      	adds	r3, #40	; 0x28
 800a408:	2102      	movs	r1, #2
 800a40a:	4618      	mov	r0, r3
 800a40c:	f001 fa5c 	bl	800b8c8 <RCCEx_PLL3_Config>
 800a410:	4603      	mov	r3, r0
 800a412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a416:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a41e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a422:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a426:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	e000      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
}
 800a434:	4618      	mov	r0, r3
 800a436:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a43a:	46bd      	mov	sp, r7
 800a43c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a440:	58024400 	.word	0x58024400

0800a444 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b090      	sub	sp, #64	; 0x40
 800a448:	af00      	add	r7, sp, #0
 800a44a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a44e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a452:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a456:	430b      	orrs	r3, r1
 800a458:	f040 8094 	bne.w	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a45c:	4b9e      	ldr	r3, [pc, #632]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a45e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a460:	f003 0307 	and.w	r3, r3, #7
 800a464:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a468:	2b04      	cmp	r3, #4
 800a46a:	f200 8087 	bhi.w	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a46e:	a201      	add	r2, pc, #4	; (adr r2, 800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a474:	0800a489 	.word	0x0800a489
 800a478:	0800a4b1 	.word	0x0800a4b1
 800a47c:	0800a4d9 	.word	0x0800a4d9
 800a480:	0800a575 	.word	0x0800a575
 800a484:	0800a501 	.word	0x0800a501
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a488:	4b93      	ldr	r3, [pc, #588]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a494:	d108      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a49a:	4618      	mov	r0, r3
 800a49c:	f001 f810 	bl	800b4c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a4:	f000 bd45 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4ac:	f000 bd41 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4b0:	4b89      	ldr	r3, [pc, #548]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4bc:	d108      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4be:	f107 0318 	add.w	r3, r7, #24
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f000 fd54 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4cc:	f000 bd31 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4d4:	f000 bd2d 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4d8:	4b7f      	ldr	r3, [pc, #508]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4e4:	d108      	bne.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4e6:	f107 030c 	add.w	r3, r7, #12
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 fe94 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4f4:	f000 bd1d 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4fc:	f000 bd19 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a500:	4b75      	ldr	r3, [pc, #468]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a508:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a50a:	4b73      	ldr	r3, [pc, #460]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 0304 	and.w	r3, r3, #4
 800a512:	2b04      	cmp	r3, #4
 800a514:	d10c      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d109      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a51c:	4b6e      	ldr	r3, [pc, #440]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	08db      	lsrs	r3, r3, #3
 800a522:	f003 0303 	and.w	r3, r3, #3
 800a526:	4a6d      	ldr	r2, [pc, #436]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a528:	fa22 f303 	lsr.w	r3, r2, r3
 800a52c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a52e:	e01f      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a530:	4b69      	ldr	r3, [pc, #420]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a53c:	d106      	bne.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a544:	d102      	bne.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a546:	4b66      	ldr	r3, [pc, #408]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a54a:	e011      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a54c:	4b62      	ldr	r3, [pc, #392]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a558:	d106      	bne.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a560:	d102      	bne.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a562:	4b60      	ldr	r3, [pc, #384]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a564:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a566:	e003      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a56c:	f000 bce1 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a570:	f000 bcdf 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a574:	4b5c      	ldr	r3, [pc, #368]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a578:	f000 bcdb 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a580:	f000 bcd7 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a584:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a588:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a58c:	430b      	orrs	r3, r1
 800a58e:	f040 80ad 	bne.w	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a592:	4b51      	ldr	r3, [pc, #324]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a596:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a59a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5a2:	d056      	beq.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5aa:	f200 8090 	bhi.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b0:	2bc0      	cmp	r3, #192	; 0xc0
 800a5b2:	f000 8088 	beq.w	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	2bc0      	cmp	r3, #192	; 0xc0
 800a5ba:	f200 8088 	bhi.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	2b80      	cmp	r3, #128	; 0x80
 800a5c2:	d032      	beq.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	2b80      	cmp	r3, #128	; 0x80
 800a5c8:	f200 8081 	bhi.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	2b40      	cmp	r3, #64	; 0x40
 800a5d6:	d014      	beq.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a5d8:	e079      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5da:	4b3f      	ldr	r3, [pc, #252]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5e6:	d108      	bne.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 ff67 	bl	800b4c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5f6:	f000 bc9c 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5fe:	f000 bc98 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a602:	4b35      	ldr	r3, [pc, #212]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a60a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a60e:	d108      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a610:	f107 0318 	add.w	r3, r7, #24
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fcab 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61e:	f000 bc88 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a626:	f000 bc84 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a62a:	4b2b      	ldr	r3, [pc, #172]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a636:	d108      	bne.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a638:	f107 030c 	add.w	r3, r7, #12
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 fdeb 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a646:	f000 bc74 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a64e:	f000 bc70 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a652:	4b21      	ldr	r3, [pc, #132]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a656:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a65a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a65c:	4b1e      	ldr	r3, [pc, #120]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	2b04      	cmp	r3, #4
 800a666:	d10c      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d109      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a66e:	4b1a      	ldr	r3, [pc, #104]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	08db      	lsrs	r3, r3, #3
 800a674:	f003 0303 	and.w	r3, r3, #3
 800a678:	4a18      	ldr	r2, [pc, #96]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a67a:	fa22 f303 	lsr.w	r3, r2, r3
 800a67e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a680:	e01f      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a68e:	d106      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a696:	d102      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a698:	4b11      	ldr	r3, [pc, #68]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a69a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a69c:	e011      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a69e:	4b0e      	ldr	r3, [pc, #56]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6aa:	d106      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6b2:	d102      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6b4:	4b0b      	ldr	r3, [pc, #44]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6b8:	e003      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a6be:	f000 bc38 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6c2:	f000 bc36 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6c6:	4b08      	ldr	r3, [pc, #32]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6ca:	f000 bc32 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d2:	f000 bc2e 	b.w	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6d6:	bf00      	nop
 800a6d8:	58024400 	.word	0x58024400
 800a6dc:	03d09000 	.word	0x03d09000
 800a6e0:	003d0900 	.word	0x003d0900
 800a6e4:	017d7840 	.word	0x017d7840
 800a6e8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a6ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6f0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a6f4:	430b      	orrs	r3, r1
 800a6f6:	f040 809c 	bne.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a6fa:	4b9e      	ldr	r3, [pc, #632]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6fe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a702:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a706:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a70a:	d054      	beq.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a712:	f200 808b 	bhi.w	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a71c:	f000 8083 	beq.w	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a726:	f200 8081 	bhi.w	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a730:	d02f      	beq.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a738:	d878      	bhi.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d004      	beq.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a746:	d012      	beq.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a748:	e070      	b.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a74a:	4b8a      	ldr	r3, [pc, #552]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a756:	d107      	bne.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 feaf 	bl	800b4c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a764:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a766:	e3e4      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a76c:	e3e1      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a76e:	4b81      	ldr	r3, [pc, #516]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a77a:	d107      	bne.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a77c:	f107 0318 	add.w	r3, r7, #24
 800a780:	4618      	mov	r0, r3
 800a782:	f000 fbf5 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a78a:	e3d2      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a790:	e3cf      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a792:	4b78      	ldr	r3, [pc, #480]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a79a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a79e:	d107      	bne.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7a0:	f107 030c 	add.w	r3, r7, #12
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 fd37 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7ae:	e3c0      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7b4:	e3bd      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7b6:	4b6f      	ldr	r3, [pc, #444]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7c0:	4b6c      	ldr	r3, [pc, #432]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	d10c      	bne.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d109      	bne.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7d2:	4b68      	ldr	r3, [pc, #416]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	08db      	lsrs	r3, r3, #3
 800a7d8:	f003 0303 	and.w	r3, r3, #3
 800a7dc:	4a66      	ldr	r2, [pc, #408]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a7de:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7e4:	e01e      	b.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7e6:	4b63      	ldr	r3, [pc, #396]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f2:	d106      	bne.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7fa:	d102      	bne.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7fc:	4b5f      	ldr	r3, [pc, #380]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a800:	e010      	b.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a802:	4b5c      	ldr	r3, [pc, #368]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a80a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a80e:	d106      	bne.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a816:	d102      	bne.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a818:	4b59      	ldr	r3, [pc, #356]	; (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a81a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a81c:	e002      	b.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a81e:	2300      	movs	r3, #0
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a822:	e386      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a824:	e385      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a826:	4b57      	ldr	r3, [pc, #348]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a82a:	e382      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a830:	e37f      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a832:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a836:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a83a:	430b      	orrs	r3, r1
 800a83c:	f040 80a7 	bne.w	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a840:	4b4c      	ldr	r3, [pc, #304]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a844:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a848:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a850:	d055      	beq.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a858:	f200 8096 	bhi.w	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a862:	f000 8084 	beq.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a86c:	f200 808c 	bhi.w	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a876:	d030      	beq.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a87e:	f200 8083 	bhi.w	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	2b00      	cmp	r3, #0
 800a886:	d004      	beq.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a88e:	d012      	beq.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a890:	e07a      	b.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a892:	4b38      	ldr	r3, [pc, #224]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a89a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a89e:	d107      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 fe0b 	bl	800b4c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ae:	e340      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8b4:	e33d      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8b6:	4b2f      	ldr	r3, [pc, #188]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8c2:	d107      	bne.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c4:	f107 0318 	add.w	r3, r7, #24
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 fb51 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d2:	e32e      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8d8:	e32b      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8da:	4b26      	ldr	r3, [pc, #152]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8e6:	d107      	bne.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8e8:	f107 030c 	add.w	r3, r7, #12
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fc93 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f6:	e31c      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8fc:	e319      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8fe:	4b1d      	ldr	r3, [pc, #116]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a902:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a906:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a908:	4b1a      	ldr	r3, [pc, #104]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0304 	and.w	r3, r3, #4
 800a910:	2b04      	cmp	r3, #4
 800a912:	d10c      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a916:	2b00      	cmp	r3, #0
 800a918:	d109      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a91a:	4b16      	ldr	r3, [pc, #88]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	08db      	lsrs	r3, r3, #3
 800a920:	f003 0303 	and.w	r3, r3, #3
 800a924:	4a14      	ldr	r2, [pc, #80]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a926:	fa22 f303 	lsr.w	r3, r2, r3
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a92c:	e01e      	b.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a92e:	4b11      	ldr	r3, [pc, #68]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93a:	d106      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a942:	d102      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a944:	4b0d      	ldr	r3, [pc, #52]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a946:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a948:	e010      	b.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a94a:	4b0a      	ldr	r3, [pc, #40]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a956:	d106      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a95a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a95e:	d102      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a960:	4b07      	ldr	r3, [pc, #28]	; (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a962:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a964:	e002      	b.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a966:	2300      	movs	r3, #0
 800a968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a96a:	e2e2      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a96c:	e2e1      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a96e:	4b05      	ldr	r3, [pc, #20]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a972:	e2de      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a974:	58024400 	.word	0x58024400
 800a978:	03d09000 	.word	0x03d09000
 800a97c:	003d0900 	.word	0x003d0900
 800a980:	017d7840 	.word	0x017d7840
 800a984:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a98c:	e2d1      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a98e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a992:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a996:	430b      	orrs	r3, r1
 800a998:	f040 809c 	bne.w	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a99c:	4b93      	ldr	r3, [pc, #588]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a99e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a9a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9ac:	d054      	beq.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9b4:	f200 808b 	bhi.w	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9be:	f000 8083 	beq.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9c8:	f200 8081 	bhi.w	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9d2:	d02f      	beq.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9da:	d878      	bhi.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d004      	beq.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e8:	d012      	beq.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a9ea:	e070      	b.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9ec:	4b7f      	ldr	r3, [pc, #508]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9f8:	d107      	bne.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 fd5e 	bl	800b4c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa08:	e293      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa0e:	e290      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa10:	4b76      	ldr	r3, [pc, #472]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa1c:	d107      	bne.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa1e:	f107 0318 	add.w	r3, r7, #24
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 faa4 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa2c:	e281      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa32:	e27e      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa34:	4b6d      	ldr	r3, [pc, #436]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa40:	d107      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa42:	f107 030c 	add.w	r3, r7, #12
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 fbe6 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa50:	e26f      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa56:	e26c      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa58:	4b64      	ldr	r3, [pc, #400]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa60:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa62:	4b62      	ldr	r3, [pc, #392]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 0304 	and.w	r3, r3, #4
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	d10c      	bne.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800aa6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d109      	bne.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa74:	4b5d      	ldr	r3, [pc, #372]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	08db      	lsrs	r3, r3, #3
 800aa7a:	f003 0303 	and.w	r3, r3, #3
 800aa7e:	4a5c      	ldr	r2, [pc, #368]	; (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aa80:	fa22 f303 	lsr.w	r3, r2, r3
 800aa84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa86:	e01e      	b.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa88:	4b58      	ldr	r3, [pc, #352]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa94:	d106      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800aa96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa9c:	d102      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa9e:	4b55      	ldr	r3, [pc, #340]	; (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aaa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaa2:	e010      	b.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aaa4:	4b51      	ldr	r3, [pc, #324]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aab0:	d106      	bne.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aab8:	d102      	bne.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aaba:	4b4f      	ldr	r3, [pc, #316]	; (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aabc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aabe:	e002      	b.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aac4:	e235      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aac6:	e234      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aac8:	4b4c      	ldr	r3, [pc, #304]	; (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aacc:	e231      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aad2:	e22e      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aad8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800aadc:	430b      	orrs	r3, r1
 800aade:	f040 808f 	bne.w	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aae2:	4b42      	ldr	r3, [pc, #264]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800aaea:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800aaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aaf2:	d06b      	beq.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aafa:	d874      	bhi.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab02:	d056      	beq.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ab04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab0a:	d86c      	bhi.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab12:	d03b      	beq.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ab14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab1a:	d864      	bhi.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab22:	d021      	beq.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab2a:	d85c      	bhi.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d004      	beq.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab38:	d004      	beq.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ab3a:	e054      	b.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ab3c:	f7fe fa4c 	bl	8008fd8 <HAL_RCC_GetPCLK1Freq>
 800ab40:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab42:	e1f6      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab44:	4b29      	ldr	r3, [pc, #164]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab50:	d107      	bne.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab52:	f107 0318 	add.w	r3, r7, #24
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 fa0a 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab60:	e1e7      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab66:	e1e4      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab68:	4b20      	ldr	r3, [pc, #128]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab74:	d107      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab76:	f107 030c 	add.w	r3, r7, #12
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 fb4c 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab84:	e1d5      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab8a:	e1d2      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab8c:	4b17      	ldr	r3, [pc, #92]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	2b04      	cmp	r3, #4
 800ab96:	d109      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab98:	4b14      	ldr	r3, [pc, #80]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	08db      	lsrs	r3, r3, #3
 800ab9e:	f003 0303 	and.w	r3, r3, #3
 800aba2:	4a13      	ldr	r2, [pc, #76]	; (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aba4:	fa22 f303 	lsr.w	r3, r2, r3
 800aba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abaa:	e1c2      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abb0:	e1bf      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800abb2:	4b0e      	ldr	r3, [pc, #56]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abbe:	d102      	bne.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800abc0:	4b0c      	ldr	r3, [pc, #48]	; (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800abc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abc4:	e1b5      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abca:	e1b2      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800abcc:	4b07      	ldr	r3, [pc, #28]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abd8:	d102      	bne.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800abda:	4b07      	ldr	r3, [pc, #28]	; (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800abdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abde:	e1a8      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abe4:	e1a5      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abe6:	2300      	movs	r3, #0
 800abe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abea:	e1a2      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abec:	58024400 	.word	0x58024400
 800abf0:	03d09000 	.word	0x03d09000
 800abf4:	003d0900 	.word	0x003d0900
 800abf8:	017d7840 	.word	0x017d7840
 800abfc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac04:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ac08:	430b      	orrs	r3, r1
 800ac0a:	d173      	bne.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac0c:	4b9c      	ldr	r3, [pc, #624]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac14:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ac16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac1c:	d02f      	beq.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac24:	d863      	bhi.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ac26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d004      	beq.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac32:	d012      	beq.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ac34:	e05b      	b.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac36:	4b92      	ldr	r3, [pc, #584]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac42:	d107      	bne.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac44:	f107 0318 	add.w	r3, r7, #24
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f000 f991 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac52:	e16e      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac58:	e16b      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac5a:	4b89      	ldr	r3, [pc, #548]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac66:	d107      	bne.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac68:	f107 030c 	add.w	r3, r7, #12
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 fad3 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac76:	e15c      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac7c:	e159      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac7e:	4b80      	ldr	r3, [pc, #512]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac86:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac88:	4b7d      	ldr	r3, [pc, #500]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 0304 	and.w	r3, r3, #4
 800ac90:	2b04      	cmp	r3, #4
 800ac92:	d10c      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ac94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d109      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac9a:	4b79      	ldr	r3, [pc, #484]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	08db      	lsrs	r3, r3, #3
 800aca0:	f003 0303 	and.w	r3, r3, #3
 800aca4:	4a77      	ldr	r2, [pc, #476]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aca6:	fa22 f303 	lsr.w	r3, r2, r3
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acac:	e01e      	b.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acae:	4b74      	ldr	r3, [pc, #464]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acba:	d106      	bne.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800acbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acc2:	d102      	bne.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acc4:	4b70      	ldr	r3, [pc, #448]	; (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800acc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc8:	e010      	b.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acca:	4b6d      	ldr	r3, [pc, #436]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acd6:	d106      	bne.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800acd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acde:	d102      	bne.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ace0:	4b6a      	ldr	r3, [pc, #424]	; (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ace2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace4:	e002      	b.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800acea:	e122      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acec:	e121      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf2:	e11e      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800acf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acf8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800acfc:	430b      	orrs	r3, r1
 800acfe:	d133      	bne.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ad00:	4b5f      	ldr	r3, [pc, #380]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad08:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d004      	beq.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ad10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad16:	d012      	beq.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ad18:	e023      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad1a:	4b59      	ldr	r3, [pc, #356]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad26:	d107      	bne.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 fbc7 	bl	800b4c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad36:	e0fc      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad3c:	e0f9      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad3e:	4b50      	ldr	r3, [pc, #320]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad4a:	d107      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad4c:	f107 0318 	add.w	r3, r7, #24
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 f90d 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ad56:	6a3b      	ldr	r3, [r7, #32]
 800ad58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad5a:	e0ea      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad60:	e0e7      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad66:	e0e4      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ad68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad6c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ad70:	430b      	orrs	r3, r1
 800ad72:	f040 808d 	bne.w	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ad76:	4b42      	ldr	r3, [pc, #264]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad7a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ad7e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad86:	d06b      	beq.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ad88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad8e:	d874      	bhi.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad96:	d056      	beq.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ad98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad9e:	d86c      	bhi.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ada0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ada6:	d03b      	beq.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ada8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adae:	d864      	bhi.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800adb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb6:	d021      	beq.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800adb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adbe:	d85c      	bhi.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d004      	beq.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800adc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adcc:	d004      	beq.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800adce:	e054      	b.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800add0:	f000 f8b8 	bl	800af44 <HAL_RCCEx_GetD3PCLK1Freq>
 800add4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800add6:	e0ac      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800add8:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ade0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ade4:	d107      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ade6:	f107 0318 	add.w	r3, r7, #24
 800adea:	4618      	mov	r0, r3
 800adec:	f000 f8c0 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf4:	e09d      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adfa:	e09a      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adfc:	4b20      	ldr	r3, [pc, #128]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae08:	d107      	bne.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae0a:	f107 030c 	add.w	r3, r7, #12
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 fa02 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae18:	e08b      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae1e:	e088      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae20:	4b17      	ldr	r3, [pc, #92]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0304 	and.w	r3, r3, #4
 800ae28:	2b04      	cmp	r3, #4
 800ae2a:	d109      	bne.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae2c:	4b14      	ldr	r3, [pc, #80]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	08db      	lsrs	r3, r3, #3
 800ae32:	f003 0303 	and.w	r3, r3, #3
 800ae36:	4a13      	ldr	r2, [pc, #76]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ae38:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae3e:	e078      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae44:	e075      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae46:	4b0e      	ldr	r3, [pc, #56]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae52:	d102      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ae54:	4b0c      	ldr	r3, [pc, #48]	; (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ae56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae58:	e06b      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae5e:	e068      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae60:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae6c:	d102      	bne.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ae6e:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ae70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae72:	e05e      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae74:	2300      	movs	r3, #0
 800ae76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae78:	e05b      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae7e:	e058      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae80:	58024400 	.word	0x58024400
 800ae84:	03d09000 	.word	0x03d09000
 800ae88:	003d0900 	.word	0x003d0900
 800ae8c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae94:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ae98:	430b      	orrs	r3, r1
 800ae9a:	d148      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ae9c:	4b27      	ldr	r3, [pc, #156]	; (800af3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aea0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aea4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeac:	d02a      	beq.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800aeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeb4:	d838      	bhi.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d004      	beq.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aec2:	d00d      	beq.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800aec4:	e030      	b.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aec6:	4b1d      	ldr	r3, [pc, #116]	; (800af3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aed2:	d102      	bne.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800aed4:	4b1a      	ldr	r3, [pc, #104]	; (800af40 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800aed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aed8:	e02b      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aede:	e028      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aee0:	4b16      	ldr	r3, [pc, #88]	; (800af3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aeec:	d107      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aeee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aef2:	4618      	mov	r0, r3
 800aef4:	f000 fae4 	bl	800b4c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aefc:	e019      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af02:	e016      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af04:	4b0d      	ldr	r3, [pc, #52]	; (800af3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af10:	d107      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af12:	f107 0318 	add.w	r3, r7, #24
 800af16:	4618      	mov	r0, r3
 800af18:	f000 f82a 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af20:	e007      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af26:	e004      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af2c:	e001      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800af32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800af34:	4618      	mov	r0, r3
 800af36:	3740      	adds	r7, #64	; 0x40
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	58024400 	.word	0x58024400
 800af40:	017d7840 	.word	0x017d7840

0800af44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af48:	f7fe f816 	bl	8008f78 <HAL_RCC_GetHCLKFreq>
 800af4c:	4602      	mov	r2, r0
 800af4e:	4b06      	ldr	r3, [pc, #24]	; (800af68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	091b      	lsrs	r3, r3, #4
 800af54:	f003 0307 	and.w	r3, r3, #7
 800af58:	4904      	ldr	r1, [pc, #16]	; (800af6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800af5a:	5ccb      	ldrb	r3, [r1, r3]
 800af5c:	f003 031f 	and.w	r3, r3, #31
 800af60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800af64:	4618      	mov	r0, r3
 800af66:	bd80      	pop	{r7, pc}
 800af68:	58024400 	.word	0x58024400
 800af6c:	08012a8c 	.word	0x08012a8c

0800af70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800af70:	b480      	push	{r7}
 800af72:	b089      	sub	sp, #36	; 0x24
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af78:	4ba1      	ldr	r3, [pc, #644]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800af82:	4b9f      	ldr	r3, [pc, #636]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af86:	0b1b      	lsrs	r3, r3, #12
 800af88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af8e:	4b9c      	ldr	r3, [pc, #624]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af92:	091b      	lsrs	r3, r3, #4
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af9a:	4b99      	ldr	r3, [pc, #612]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af9e:	08db      	lsrs	r3, r3, #3
 800afa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	fb02 f303 	mul.w	r3, r2, r3
 800afaa:	ee07 3a90 	vmov	s15, r3
 800afae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 8111 	beq.w	800b1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	f000 8083 	beq.w	800b0cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	2b02      	cmp	r3, #2
 800afca:	f200 80a1 	bhi.w	800b110 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d003      	beq.n	800afdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d056      	beq.n	800b088 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800afda:	e099      	b.n	800b110 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afdc:	4b88      	ldr	r3, [pc, #544]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0320 	and.w	r3, r3, #32
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d02d      	beq.n	800b044 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afe8:	4b85      	ldr	r3, [pc, #532]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	08db      	lsrs	r3, r3, #3
 800afee:	f003 0303 	and.w	r3, r3, #3
 800aff2:	4a84      	ldr	r2, [pc, #528]	; (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aff4:	fa22 f303 	lsr.w	r3, r2, r3
 800aff8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	ee07 3a90 	vmov	s15, r3
 800b000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b012:	4b7b      	ldr	r3, [pc, #492]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01a:	ee07 3a90 	vmov	s15, r3
 800b01e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b022:	ed97 6a03 	vldr	s12, [r7, #12]
 800b026:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b02a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b02e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b03e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b042:	e087      	b.n	800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b20c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b056:	4b6a      	ldr	r3, [pc, #424]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05e:	ee07 3a90 	vmov	s15, r3
 800b062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b066:	ed97 6a03 	vldr	s12, [r7, #12]
 800b06a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b06e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b07a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b086:	e065      	b.n	800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b092:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b09a:	4b59      	ldr	r3, [pc, #356]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ca:	e043      	b.n	800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0de:	4b48      	ldr	r3, [pc, #288]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e6:	ee07 3a90 	vmov	s15, r3
 800b0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b10e:	e021      	b.n	800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b11e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b122:	4b37      	ldr	r3, [pc, #220]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b12a:	ee07 3a90 	vmov	s15, r3
 800b12e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b132:	ed97 6a03 	vldr	s12, [r7, #12]
 800b136:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b13a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b13e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b152:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b154:	4b2a      	ldr	r3, [pc, #168]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b158:	0a5b      	lsrs	r3, r3, #9
 800b15a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b15e:	ee07 3a90 	vmov	s15, r3
 800b162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b16a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b16e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b17a:	ee17 2a90 	vmov	r2, s15
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b182:	4b1f      	ldr	r3, [pc, #124]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b186:	0c1b      	lsrs	r3, r3, #16
 800b188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b18c:	ee07 3a90 	vmov	s15, r3
 800b190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b19c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1a8:	ee17 2a90 	vmov	r2, s15
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b1b0:	4b13      	ldr	r3, [pc, #76]	; (800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b4:	0e1b      	lsrs	r3, r3, #24
 800b1b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ba:	ee07 3a90 	vmov	s15, r3
 800b1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1d6:	ee17 2a90 	vmov	r2, s15
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b1de:	e008      	b.n	800b1f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	609a      	str	r2, [r3, #8]
}
 800b1f2:	bf00      	nop
 800b1f4:	3724      	adds	r7, #36	; 0x24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop
 800b200:	58024400 	.word	0x58024400
 800b204:	03d09000 	.word	0x03d09000
 800b208:	46000000 	.word	0x46000000
 800b20c:	4c742400 	.word	0x4c742400
 800b210:	4a742400 	.word	0x4a742400
 800b214:	4bbebc20 	.word	0x4bbebc20

0800b218 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b218:	b480      	push	{r7}
 800b21a:	b089      	sub	sp, #36	; 0x24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b220:	4ba1      	ldr	r3, [pc, #644]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b224:	f003 0303 	and.w	r3, r3, #3
 800b228:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b22a:	4b9f      	ldr	r3, [pc, #636]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22e:	0d1b      	lsrs	r3, r3, #20
 800b230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b234:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b236:	4b9c      	ldr	r3, [pc, #624]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	0a1b      	lsrs	r3, r3, #8
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b242:	4b99      	ldr	r3, [pc, #612]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b246:	08db      	lsrs	r3, r3, #3
 800b248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b24c:	693a      	ldr	r2, [r7, #16]
 800b24e:	fb02 f303 	mul.w	r3, r2, r3
 800b252:	ee07 3a90 	vmov	s15, r3
 800b256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 8111 	beq.w	800b488 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	2b02      	cmp	r3, #2
 800b26a:	f000 8083 	beq.w	800b374 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	2b02      	cmp	r3, #2
 800b272:	f200 80a1 	bhi.w	800b3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d003      	beq.n	800b284 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d056      	beq.n	800b330 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b282:	e099      	b.n	800b3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b284:	4b88      	ldr	r3, [pc, #544]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 0320 	and.w	r3, r3, #32
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d02d      	beq.n	800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b290:	4b85      	ldr	r3, [pc, #532]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	08db      	lsrs	r3, r3, #3
 800b296:	f003 0303 	and.w	r3, r3, #3
 800b29a:	4a84      	ldr	r2, [pc, #528]	; (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b29c:	fa22 f303 	lsr.w	r3, r2, r3
 800b2a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	ee07 3a90 	vmov	s15, r3
 800b2a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ba:	4b7b      	ldr	r3, [pc, #492]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c2:	ee07 3a90 	vmov	s15, r3
 800b2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b2ea:	e087      	b.n	800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	ee07 3a90 	vmov	s15, r3
 800b2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2fe:	4b6a      	ldr	r3, [pc, #424]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b30e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b312:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b31e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b32e:	e065      	b.n	800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	ee07 3a90 	vmov	s15, r3
 800b336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b4b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b342:	4b59      	ldr	r3, [pc, #356]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34a:	ee07 3a90 	vmov	s15, r3
 800b34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b352:	ed97 6a03 	vldr	s12, [r7, #12]
 800b356:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b372:	e043      	b.n	800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b4bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b386:	4b48      	ldr	r3, [pc, #288]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b396:	ed97 6a03 	vldr	s12, [r7, #12]
 800b39a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3b6:	e021      	b.n	800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	ee07 3a90 	vmov	s15, r3
 800b3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b4b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ca:	4b37      	ldr	r3, [pc, #220]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d2:	ee07 3a90 	vmov	s15, r3
 800b3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b3fc:	4b2a      	ldr	r3, [pc, #168]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b400:	0a5b      	lsrs	r3, r3, #9
 800b402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b406:	ee07 3a90 	vmov	s15, r3
 800b40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b40e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b412:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b416:	edd7 6a07 	vldr	s13, [r7, #28]
 800b41a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b41e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b422:	ee17 2a90 	vmov	r2, s15
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b42a:	4b1f      	ldr	r3, [pc, #124]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42e:	0c1b      	lsrs	r3, r3, #16
 800b430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b434:	ee07 3a90 	vmov	s15, r3
 800b438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b43c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b440:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b444:	edd7 6a07 	vldr	s13, [r7, #28]
 800b448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b44c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b450:	ee17 2a90 	vmov	r2, s15
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b458:	4b13      	ldr	r3, [pc, #76]	; (800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45c:	0e1b      	lsrs	r3, r3, #24
 800b45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b462:	ee07 3a90 	vmov	s15, r3
 800b466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b46a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b46e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b472:	edd7 6a07 	vldr	s13, [r7, #28]
 800b476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b47a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b47e:	ee17 2a90 	vmov	r2, s15
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b486:	e008      	b.n	800b49a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	609a      	str	r2, [r3, #8]
}
 800b49a:	bf00      	nop
 800b49c:	3724      	adds	r7, #36	; 0x24
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	58024400 	.word	0x58024400
 800b4ac:	03d09000 	.word	0x03d09000
 800b4b0:	46000000 	.word	0x46000000
 800b4b4:	4c742400 	.word	0x4c742400
 800b4b8:	4a742400 	.word	0x4a742400
 800b4bc:	4bbebc20 	.word	0x4bbebc20

0800b4c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b089      	sub	sp, #36	; 0x24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4c8:	4ba0      	ldr	r3, [pc, #640]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4cc:	f003 0303 	and.w	r3, r3, #3
 800b4d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b4d2:	4b9e      	ldr	r3, [pc, #632]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d6:	091b      	lsrs	r3, r3, #4
 800b4d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b4de:	4b9b      	ldr	r3, [pc, #620]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b4e8:	4b98      	ldr	r3, [pc, #608]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ec:	08db      	lsrs	r3, r3, #3
 800b4ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	fb02 f303 	mul.w	r3, r2, r3
 800b4f8:	ee07 3a90 	vmov	s15, r3
 800b4fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b500:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2b00      	cmp	r3, #0
 800b508:	f000 8111 	beq.w	800b72e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	f000 8083 	beq.w	800b61a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	2b02      	cmp	r3, #2
 800b518:	f200 80a1 	bhi.w	800b65e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d056      	beq.n	800b5d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b528:	e099      	b.n	800b65e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b52a:	4b88      	ldr	r3, [pc, #544]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 0320 	and.w	r3, r3, #32
 800b532:	2b00      	cmp	r3, #0
 800b534:	d02d      	beq.n	800b592 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b536:	4b85      	ldr	r3, [pc, #532]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	08db      	lsrs	r3, r3, #3
 800b53c:	f003 0303 	and.w	r3, r3, #3
 800b540:	4a83      	ldr	r2, [pc, #524]	; (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b542:	fa22 f303 	lsr.w	r3, r2, r3
 800b546:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	ee07 3a90 	vmov	s15, r3
 800b54e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	ee07 3a90 	vmov	s15, r3
 800b558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b560:	4b7a      	ldr	r3, [pc, #488]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b568:	ee07 3a90 	vmov	s15, r3
 800b56c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b570:	ed97 6a03 	vldr	s12, [r7, #12]
 800b574:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b57c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b590:	e087      	b.n	800b6a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	ee07 3a90 	vmov	s15, r3
 800b598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b59c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b758 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a4:	4b69      	ldr	r3, [pc, #420]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ac:	ee07 3a90 	vmov	s15, r3
 800b5b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5d4:	e065      	b.n	800b6a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	ee07 3a90 	vmov	s15, r3
 800b5dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b5e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5e8:	4b58      	ldr	r3, [pc, #352]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f0:	ee07 3a90 	vmov	s15, r3
 800b5f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b60c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b610:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b618:	e043      	b.n	800b6a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	ee07 3a90 	vmov	s15, r3
 800b620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b624:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b760 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62c:	4b47      	ldr	r3, [pc, #284]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b634:	ee07 3a90 	vmov	s15, r3
 800b638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b640:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b65c:	e021      	b.n	800b6a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	ee07 3a90 	vmov	s15, r3
 800b664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b668:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b758 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b66c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b670:	4b36      	ldr	r3, [pc, #216]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b678:	ee07 3a90 	vmov	s15, r3
 800b67c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b680:	ed97 6a03 	vldr	s12, [r7, #12]
 800b684:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b68c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b69c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b6a2:	4b2a      	ldr	r3, [pc, #168]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a6:	0a5b      	lsrs	r3, r3, #9
 800b6a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6ac:	ee07 3a90 	vmov	s15, r3
 800b6b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6c8:	ee17 2a90 	vmov	r2, s15
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b6d0:	4b1e      	ldr	r3, [pc, #120]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d4:	0c1b      	lsrs	r3, r3, #16
 800b6d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6da:	ee07 3a90 	vmov	s15, r3
 800b6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6f6:	ee17 2a90 	vmov	r2, s15
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b6fe:	4b13      	ldr	r3, [pc, #76]	; (800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b702:	0e1b      	lsrs	r3, r3, #24
 800b704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b708:	ee07 3a90 	vmov	s15, r3
 800b70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b714:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b718:	edd7 6a07 	vldr	s13, [r7, #28]
 800b71c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b724:	ee17 2a90 	vmov	r2, s15
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b72c:	e008      	b.n	800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	609a      	str	r2, [r3, #8]
}
 800b740:	bf00      	nop
 800b742:	3724      	adds	r7, #36	; 0x24
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr
 800b74c:	58024400 	.word	0x58024400
 800b750:	03d09000 	.word	0x03d09000
 800b754:	46000000 	.word	0x46000000
 800b758:	4c742400 	.word	0x4c742400
 800b75c:	4a742400 	.word	0x4a742400
 800b760:	4bbebc20 	.word	0x4bbebc20

0800b764 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b772:	4b53      	ldr	r3, [pc, #332]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b776:	f003 0303 	and.w	r3, r3, #3
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d101      	bne.n	800b782 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e099      	b.n	800b8b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b782:	4b4f      	ldr	r3, [pc, #316]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a4e      	ldr	r2, [pc, #312]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b788:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b78c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b78e:	f7f7 faad 	bl	8002cec <HAL_GetTick>
 800b792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b794:	e008      	b.n	800b7a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b796:	f7f7 faa9 	bl	8002cec <HAL_GetTick>
 800b79a:	4602      	mov	r2, r0
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d901      	bls.n	800b7a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	e086      	b.n	800b8b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7a8:	4b45      	ldr	r3, [pc, #276]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1f0      	bne.n	800b796 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b7b4:	4b42      	ldr	r3, [pc, #264]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	031b      	lsls	r3, r3, #12
 800b7c2:	493f      	ldr	r1, [pc, #252]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	628b      	str	r3, [r1, #40]	; 0x28
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	025b      	lsls	r3, r3, #9
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	041b      	lsls	r3, r3, #16
 800b7e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b7ea:	431a      	orrs	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	061b      	lsls	r3, r3, #24
 800b7f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b7f8:	4931      	ldr	r1, [pc, #196]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b7fe:	4b30      	ldr	r3, [pc, #192]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b802:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	492d      	ldr	r1, [pc, #180]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b80c:	4313      	orrs	r3, r2
 800b80e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b810:	4b2b      	ldr	r3, [pc, #172]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b814:	f023 0220 	bic.w	r2, r3, #32
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	4928      	ldr	r1, [pc, #160]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b81e:	4313      	orrs	r3, r2
 800b820:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b822:	4b27      	ldr	r3, [pc, #156]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b826:	4a26      	ldr	r2, [pc, #152]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b828:	f023 0310 	bic.w	r3, r3, #16
 800b82c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b82e:	4b24      	ldr	r3, [pc, #144]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b832:	4b24      	ldr	r3, [pc, #144]	; (800b8c4 <RCCEx_PLL2_Config+0x160>)
 800b834:	4013      	ands	r3, r2
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	69d2      	ldr	r2, [r2, #28]
 800b83a:	00d2      	lsls	r2, r2, #3
 800b83c:	4920      	ldr	r1, [pc, #128]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b83e:	4313      	orrs	r3, r2
 800b840:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b842:	4b1f      	ldr	r3, [pc, #124]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b846:	4a1e      	ldr	r2, [pc, #120]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b848:	f043 0310 	orr.w	r3, r3, #16
 800b84c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d106      	bne.n	800b862 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b854:	4b1a      	ldr	r3, [pc, #104]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	4a19      	ldr	r2, [pc, #100]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b85a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b85e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b860:	e00f      	b.n	800b882 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d106      	bne.n	800b876 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b868:	4b15      	ldr	r3, [pc, #84]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	4a14      	ldr	r2, [pc, #80]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b86e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b872:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b874:	e005      	b.n	800b882 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b876:	4b12      	ldr	r3, [pc, #72]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87a:	4a11      	ldr	r2, [pc, #68]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b87c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b880:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b882:	4b0f      	ldr	r3, [pc, #60]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a0e      	ldr	r2, [pc, #56]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b888:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b88c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b88e:	f7f7 fa2d 	bl	8002cec <HAL_GetTick>
 800b892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b894:	e008      	b.n	800b8a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b896:	f7f7 fa29 	bl	8002cec <HAL_GetTick>
 800b89a:	4602      	mov	r2, r0
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d901      	bls.n	800b8a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8a4:	2303      	movs	r3, #3
 800b8a6:	e006      	b.n	800b8b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8a8:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <RCCEx_PLL2_Config+0x15c>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d0f0      	beq.n	800b896 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	58024400 	.word	0x58024400
 800b8c4:	ffff0007 	.word	0xffff0007

0800b8c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8d6:	4b53      	ldr	r3, [pc, #332]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8da:	f003 0303 	and.w	r3, r3, #3
 800b8de:	2b03      	cmp	r3, #3
 800b8e0:	d101      	bne.n	800b8e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e099      	b.n	800ba1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b8e6:	4b4f      	ldr	r3, [pc, #316]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a4e      	ldr	r2, [pc, #312]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b8ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8f2:	f7f7 f9fb 	bl	8002cec <HAL_GetTick>
 800b8f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8f8:	e008      	b.n	800b90c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b8fa:	f7f7 f9f7 	bl	8002cec <HAL_GetTick>
 800b8fe:	4602      	mov	r2, r0
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	2b02      	cmp	r3, #2
 800b906:	d901      	bls.n	800b90c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b908:	2303      	movs	r3, #3
 800b90a:	e086      	b.n	800ba1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b90c:	4b45      	ldr	r3, [pc, #276]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1f0      	bne.n	800b8fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b918:	4b42      	ldr	r3, [pc, #264]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	051b      	lsls	r3, r3, #20
 800b926:	493f      	ldr	r1, [pc, #252]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b928:	4313      	orrs	r3, r2
 800b92a:	628b      	str	r3, [r1, #40]	; 0x28
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	3b01      	subs	r3, #1
 800b932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	025b      	lsls	r3, r3, #9
 800b93e:	b29b      	uxth	r3, r3
 800b940:	431a      	orrs	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	3b01      	subs	r3, #1
 800b948:	041b      	lsls	r3, r3, #16
 800b94a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b94e:	431a      	orrs	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	3b01      	subs	r3, #1
 800b956:	061b      	lsls	r3, r3, #24
 800b958:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b95c:	4931      	ldr	r1, [pc, #196]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b95e:	4313      	orrs	r3, r2
 800b960:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b962:	4b30      	ldr	r3, [pc, #192]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b966:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	695b      	ldr	r3, [r3, #20]
 800b96e:	492d      	ldr	r1, [pc, #180]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b970:	4313      	orrs	r3, r2
 800b972:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b974:	4b2b      	ldr	r3, [pc, #172]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	4928      	ldr	r1, [pc, #160]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b982:	4313      	orrs	r3, r2
 800b984:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b986:	4b27      	ldr	r3, [pc, #156]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98a:	4a26      	ldr	r2, [pc, #152]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b98c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b990:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b992:	4b24      	ldr	r3, [pc, #144]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b996:	4b24      	ldr	r3, [pc, #144]	; (800ba28 <RCCEx_PLL3_Config+0x160>)
 800b998:	4013      	ands	r3, r2
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	69d2      	ldr	r2, [r2, #28]
 800b99e:	00d2      	lsls	r2, r2, #3
 800b9a0:	4920      	ldr	r1, [pc, #128]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b9a6:	4b1f      	ldr	r3, [pc, #124]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9aa:	4a1e      	ldr	r2, [pc, #120]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b9ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d106      	bne.n	800b9c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b9b8:	4b1a      	ldr	r3, [pc, #104]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9bc:	4a19      	ldr	r2, [pc, #100]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b9be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b9c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9c4:	e00f      	b.n	800b9e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d106      	bne.n	800b9da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b9cc:	4b15      	ldr	r3, [pc, #84]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d0:	4a14      	ldr	r2, [pc, #80]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b9d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9d8:	e005      	b.n	800b9e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b9da:	4b12      	ldr	r3, [pc, #72]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9de:	4a11      	ldr	r2, [pc, #68]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b9e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a0e      	ldr	r2, [pc, #56]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800b9ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9f2:	f7f7 f97b 	bl	8002cec <HAL_GetTick>
 800b9f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9f8:	e008      	b.n	800ba0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b9fa:	f7f7 f977 	bl	8002cec <HAL_GetTick>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d901      	bls.n	800ba0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	e006      	b.n	800ba1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba0c:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <RCCEx_PLL3_Config+0x15c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d0f0      	beq.n	800b9fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	58024400 	.word	0x58024400
 800ba28:	ffff0007 	.word	0xffff0007

0800ba2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e049      	b.n	800bad2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d106      	bne.n	800ba58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7f6 fd8a 	bl	800256c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	3304      	adds	r3, #4
 800ba68:	4619      	mov	r1, r3
 800ba6a:	4610      	mov	r0, r2
 800ba6c:	f001 fa9e 	bl	800cfac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
	...

0800badc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baea:	b2db      	uxtb	r3, r3
 800baec:	2b01      	cmp	r3, #1
 800baee:	d001      	beq.n	800baf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	e054      	b.n	800bb9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2202      	movs	r2, #2
 800baf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68da      	ldr	r2, [r3, #12]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f042 0201 	orr.w	r2, r2, #1
 800bb0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a26      	ldr	r2, [pc, #152]	; (800bbac <HAL_TIM_Base_Start_IT+0xd0>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d022      	beq.n	800bb5c <HAL_TIM_Base_Start_IT+0x80>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb1e:	d01d      	beq.n	800bb5c <HAL_TIM_Base_Start_IT+0x80>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a22      	ldr	r2, [pc, #136]	; (800bbb0 <HAL_TIM_Base_Start_IT+0xd4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d018      	beq.n	800bb5c <HAL_TIM_Base_Start_IT+0x80>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a21      	ldr	r2, [pc, #132]	; (800bbb4 <HAL_TIM_Base_Start_IT+0xd8>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d013      	beq.n	800bb5c <HAL_TIM_Base_Start_IT+0x80>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a1f      	ldr	r2, [pc, #124]	; (800bbb8 <HAL_TIM_Base_Start_IT+0xdc>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d00e      	beq.n	800bb5c <HAL_TIM_Base_Start_IT+0x80>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a1e      	ldr	r2, [pc, #120]	; (800bbbc <HAL_TIM_Base_Start_IT+0xe0>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d009      	beq.n	800bb5c <HAL_TIM_Base_Start_IT+0x80>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a1c      	ldr	r2, [pc, #112]	; (800bbc0 <HAL_TIM_Base_Start_IT+0xe4>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d004      	beq.n	800bb5c <HAL_TIM_Base_Start_IT+0x80>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a1b      	ldr	r2, [pc, #108]	; (800bbc4 <HAL_TIM_Base_Start_IT+0xe8>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d115      	bne.n	800bb88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	689a      	ldr	r2, [r3, #8]
 800bb62:	4b19      	ldr	r3, [pc, #100]	; (800bbc8 <HAL_TIM_Base_Start_IT+0xec>)
 800bb64:	4013      	ands	r3, r2
 800bb66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2b06      	cmp	r3, #6
 800bb6c:	d015      	beq.n	800bb9a <HAL_TIM_Base_Start_IT+0xbe>
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb74:	d011      	beq.n	800bb9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f042 0201 	orr.w	r2, r2, #1
 800bb84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb86:	e008      	b.n	800bb9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f042 0201 	orr.w	r2, r2, #1
 800bb96:	601a      	str	r2, [r3, #0]
 800bb98:	e000      	b.n	800bb9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	40010000 	.word	0x40010000
 800bbb0:	40000400 	.word	0x40000400
 800bbb4:	40000800 	.word	0x40000800
 800bbb8:	40000c00 	.word	0x40000c00
 800bbbc:	40010400 	.word	0x40010400
 800bbc0:	40001800 	.word	0x40001800
 800bbc4:	40014000 	.word	0x40014000
 800bbc8:	00010007 	.word	0x00010007

0800bbcc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68da      	ldr	r2, [r3, #12]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f022 0201 	bic.w	r2, r2, #1
 800bbe2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	6a1a      	ldr	r2, [r3, #32]
 800bbea:	f241 1311 	movw	r3, #4369	; 0x1111
 800bbee:	4013      	ands	r3, r2
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10f      	bne.n	800bc14 <HAL_TIM_Base_Stop_IT+0x48>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	6a1a      	ldr	r2, [r3, #32]
 800bbfa:	f240 4344 	movw	r3, #1092	; 0x444
 800bbfe:	4013      	ands	r3, r2
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d107      	bne.n	800bc14 <HAL_TIM_Base_Stop_IT+0x48>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f022 0201 	bic.w	r2, r2, #1
 800bc12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	370c      	adds	r7, #12
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b082      	sub	sp, #8
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e049      	b.n	800bcd0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d106      	bne.n	800bc56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 f841 	bl	800bcd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2202      	movs	r2, #2
 800bc5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	3304      	adds	r3, #4
 800bc66:	4619      	mov	r1, r3
 800bc68:	4610      	mov	r0, r2
 800bc6a:	f001 f99f 	bl	800cfac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2201      	movs	r2, #1
 800bc72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2201      	movs	r2, #1
 800bca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d109      	bne.n	800bd10 <HAL_TIM_PWM_Start+0x24>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	bf14      	ite	ne
 800bd08:	2301      	movne	r3, #1
 800bd0a:	2300      	moveq	r3, #0
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	e03c      	b.n	800bd8a <HAL_TIM_PWM_Start+0x9e>
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	d109      	bne.n	800bd2a <HAL_TIM_PWM_Start+0x3e>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	bf14      	ite	ne
 800bd22:	2301      	movne	r3, #1
 800bd24:	2300      	moveq	r3, #0
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	e02f      	b.n	800bd8a <HAL_TIM_PWM_Start+0x9e>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b08      	cmp	r3, #8
 800bd2e:	d109      	bne.n	800bd44 <HAL_TIM_PWM_Start+0x58>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	bf14      	ite	ne
 800bd3c:	2301      	movne	r3, #1
 800bd3e:	2300      	moveq	r3, #0
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	e022      	b.n	800bd8a <HAL_TIM_PWM_Start+0x9e>
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2b0c      	cmp	r3, #12
 800bd48:	d109      	bne.n	800bd5e <HAL_TIM_PWM_Start+0x72>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	bf14      	ite	ne
 800bd56:	2301      	movne	r3, #1
 800bd58:	2300      	moveq	r3, #0
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	e015      	b.n	800bd8a <HAL_TIM_PWM_Start+0x9e>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b10      	cmp	r3, #16
 800bd62:	d109      	bne.n	800bd78 <HAL_TIM_PWM_Start+0x8c>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	bf14      	ite	ne
 800bd70:	2301      	movne	r3, #1
 800bd72:	2300      	moveq	r3, #0
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	e008      	b.n	800bd8a <HAL_TIM_PWM_Start+0x9e>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	bf14      	ite	ne
 800bd84:	2301      	movne	r3, #1
 800bd86:	2300      	moveq	r3, #0
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e0a1      	b.n	800bed6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d104      	bne.n	800bda2 <HAL_TIM_PWM_Start+0xb6>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bda0:	e023      	b.n	800bdea <HAL_TIM_PWM_Start+0xfe>
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b04      	cmp	r3, #4
 800bda6:	d104      	bne.n	800bdb2 <HAL_TIM_PWM_Start+0xc6>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2202      	movs	r2, #2
 800bdac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bdb0:	e01b      	b.n	800bdea <HAL_TIM_PWM_Start+0xfe>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b08      	cmp	r3, #8
 800bdb6:	d104      	bne.n	800bdc2 <HAL_TIM_PWM_Start+0xd6>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bdc0:	e013      	b.n	800bdea <HAL_TIM_PWM_Start+0xfe>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b0c      	cmp	r3, #12
 800bdc6:	d104      	bne.n	800bdd2 <HAL_TIM_PWM_Start+0xe6>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2202      	movs	r2, #2
 800bdcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bdd0:	e00b      	b.n	800bdea <HAL_TIM_PWM_Start+0xfe>
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	2b10      	cmp	r3, #16
 800bdd6:	d104      	bne.n	800bde2 <HAL_TIM_PWM_Start+0xf6>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2202      	movs	r2, #2
 800bddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bde0:	e003      	b.n	800bdea <HAL_TIM_PWM_Start+0xfe>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2202      	movs	r2, #2
 800bde6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f001 fefc 	bl	800dbf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a38      	ldr	r2, [pc, #224]	; (800bee0 <HAL_TIM_PWM_Start+0x1f4>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d013      	beq.n	800be2a <HAL_TIM_PWM_Start+0x13e>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a37      	ldr	r2, [pc, #220]	; (800bee4 <HAL_TIM_PWM_Start+0x1f8>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d00e      	beq.n	800be2a <HAL_TIM_PWM_Start+0x13e>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a35      	ldr	r2, [pc, #212]	; (800bee8 <HAL_TIM_PWM_Start+0x1fc>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d009      	beq.n	800be2a <HAL_TIM_PWM_Start+0x13e>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a34      	ldr	r2, [pc, #208]	; (800beec <HAL_TIM_PWM_Start+0x200>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d004      	beq.n	800be2a <HAL_TIM_PWM_Start+0x13e>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a32      	ldr	r2, [pc, #200]	; (800bef0 <HAL_TIM_PWM_Start+0x204>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d101      	bne.n	800be2e <HAL_TIM_PWM_Start+0x142>
 800be2a:	2301      	movs	r3, #1
 800be2c:	e000      	b.n	800be30 <HAL_TIM_PWM_Start+0x144>
 800be2e:	2300      	movs	r3, #0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a25      	ldr	r2, [pc, #148]	; (800bee0 <HAL_TIM_PWM_Start+0x1f4>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d022      	beq.n	800be94 <HAL_TIM_PWM_Start+0x1a8>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be56:	d01d      	beq.n	800be94 <HAL_TIM_PWM_Start+0x1a8>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a25      	ldr	r2, [pc, #148]	; (800bef4 <HAL_TIM_PWM_Start+0x208>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d018      	beq.n	800be94 <HAL_TIM_PWM_Start+0x1a8>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a24      	ldr	r2, [pc, #144]	; (800bef8 <HAL_TIM_PWM_Start+0x20c>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d013      	beq.n	800be94 <HAL_TIM_PWM_Start+0x1a8>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a22      	ldr	r2, [pc, #136]	; (800befc <HAL_TIM_PWM_Start+0x210>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d00e      	beq.n	800be94 <HAL_TIM_PWM_Start+0x1a8>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a1a      	ldr	r2, [pc, #104]	; (800bee4 <HAL_TIM_PWM_Start+0x1f8>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d009      	beq.n	800be94 <HAL_TIM_PWM_Start+0x1a8>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a1e      	ldr	r2, [pc, #120]	; (800bf00 <HAL_TIM_PWM_Start+0x214>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d004      	beq.n	800be94 <HAL_TIM_PWM_Start+0x1a8>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a16      	ldr	r2, [pc, #88]	; (800bee8 <HAL_TIM_PWM_Start+0x1fc>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d115      	bne.n	800bec0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	689a      	ldr	r2, [r3, #8]
 800be9a:	4b1a      	ldr	r3, [pc, #104]	; (800bf04 <HAL_TIM_PWM_Start+0x218>)
 800be9c:	4013      	ands	r3, r2
 800be9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b06      	cmp	r3, #6
 800bea4:	d015      	beq.n	800bed2 <HAL_TIM_PWM_Start+0x1e6>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beac:	d011      	beq.n	800bed2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f042 0201 	orr.w	r2, r2, #1
 800bebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bebe:	e008      	b.n	800bed2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f042 0201 	orr.w	r2, r2, #1
 800bece:	601a      	str	r2, [r3, #0]
 800bed0:	e000      	b.n	800bed4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	40010000 	.word	0x40010000
 800bee4:	40010400 	.word	0x40010400
 800bee8:	40014000 	.word	0x40014000
 800beec:	40014400 	.word	0x40014400
 800bef0:	40014800 	.word	0x40014800
 800bef4:	40000400 	.word	0x40000400
 800bef8:	40000800 	.word	0x40000800
 800befc:	40000c00 	.word	0x40000c00
 800bf00:	40001800 	.word	0x40001800
 800bf04:	00010007 	.word	0x00010007

0800bf08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d101      	bne.n	800bf1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800bf16:	2301      	movs	r3, #1
 800bf18:	e049      	b.n	800bfae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d106      	bne.n	800bf34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f841 	bl	800bfb6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2202      	movs	r2, #2
 800bf38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3304      	adds	r3, #4
 800bf44:	4619      	mov	r1, r3
 800bf46:	4610      	mov	r0, r2
 800bf48:	f001 f830 	bl	800cfac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2201      	movs	r2, #1
 800bf58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b083      	sub	sp, #12
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800bfbe:	bf00      	nop
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
	...

0800bfcc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d104      	bne.n	800bfe6 <HAL_TIM_IC_Start+0x1a>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	e023      	b.n	800c02e <HAL_TIM_IC_Start+0x62>
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2b04      	cmp	r3, #4
 800bfea:	d104      	bne.n	800bff6 <HAL_TIM_IC_Start+0x2a>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	e01b      	b.n	800c02e <HAL_TIM_IC_Start+0x62>
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b08      	cmp	r3, #8
 800bffa:	d104      	bne.n	800c006 <HAL_TIM_IC_Start+0x3a>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c002:	b2db      	uxtb	r3, r3
 800c004:	e013      	b.n	800c02e <HAL_TIM_IC_Start+0x62>
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b0c      	cmp	r3, #12
 800c00a:	d104      	bne.n	800c016 <HAL_TIM_IC_Start+0x4a>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c012:	b2db      	uxtb	r3, r3
 800c014:	e00b      	b.n	800c02e <HAL_TIM_IC_Start+0x62>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	2b10      	cmp	r3, #16
 800c01a:	d104      	bne.n	800c026 <HAL_TIM_IC_Start+0x5a>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c022:	b2db      	uxtb	r3, r3
 800c024:	e003      	b.n	800c02e <HAL_TIM_IC_Start+0x62>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d104      	bne.n	800c040 <HAL_TIM_IC_Start+0x74>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	e013      	b.n	800c068 <HAL_TIM_IC_Start+0x9c>
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	2b04      	cmp	r3, #4
 800c044:	d104      	bne.n	800c050 <HAL_TIM_IC_Start+0x84>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	e00b      	b.n	800c068 <HAL_TIM_IC_Start+0x9c>
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	2b08      	cmp	r3, #8
 800c054:	d104      	bne.n	800c060 <HAL_TIM_IC_Start+0x94>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	e003      	b.n	800c068 <HAL_TIM_IC_Start+0x9c>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c066:	b2db      	uxtb	r3, r3
 800c068:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c06a:	7bfb      	ldrb	r3, [r7, #15]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d102      	bne.n	800c076 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c070:	7bbb      	ldrb	r3, [r7, #14]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d001      	beq.n	800c07a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e097      	b.n	800c1aa <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <HAL_TIM_IC_Start+0xbe>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2202      	movs	r2, #2
 800c084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c088:	e023      	b.n	800c0d2 <HAL_TIM_IC_Start+0x106>
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	d104      	bne.n	800c09a <HAL_TIM_IC_Start+0xce>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2202      	movs	r2, #2
 800c094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c098:	e01b      	b.n	800c0d2 <HAL_TIM_IC_Start+0x106>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b08      	cmp	r3, #8
 800c09e:	d104      	bne.n	800c0aa <HAL_TIM_IC_Start+0xde>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2202      	movs	r2, #2
 800c0a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0a8:	e013      	b.n	800c0d2 <HAL_TIM_IC_Start+0x106>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b0c      	cmp	r3, #12
 800c0ae:	d104      	bne.n	800c0ba <HAL_TIM_IC_Start+0xee>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0b8:	e00b      	b.n	800c0d2 <HAL_TIM_IC_Start+0x106>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2b10      	cmp	r3, #16
 800c0be:	d104      	bne.n	800c0ca <HAL_TIM_IC_Start+0xfe>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0c8:	e003      	b.n	800c0d2 <HAL_TIM_IC_Start+0x106>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d104      	bne.n	800c0e2 <HAL_TIM_IC_Start+0x116>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2202      	movs	r2, #2
 800c0dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0e0:	e013      	b.n	800c10a <HAL_TIM_IC_Start+0x13e>
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	2b04      	cmp	r3, #4
 800c0e6:	d104      	bne.n	800c0f2 <HAL_TIM_IC_Start+0x126>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0f0:	e00b      	b.n	800c10a <HAL_TIM_IC_Start+0x13e>
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	2b08      	cmp	r3, #8
 800c0f6:	d104      	bne.n	800c102 <HAL_TIM_IC_Start+0x136>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c100:	e003      	b.n	800c10a <HAL_TIM_IC_Start+0x13e>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2202      	movs	r2, #2
 800c106:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2201      	movs	r2, #1
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	4618      	mov	r0, r3
 800c114:	f001 fd6c 	bl	800dbf0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a25      	ldr	r2, [pc, #148]	; (800c1b4 <HAL_TIM_IC_Start+0x1e8>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d022      	beq.n	800c168 <HAL_TIM_IC_Start+0x19c>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c12a:	d01d      	beq.n	800c168 <HAL_TIM_IC_Start+0x19c>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a21      	ldr	r2, [pc, #132]	; (800c1b8 <HAL_TIM_IC_Start+0x1ec>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d018      	beq.n	800c168 <HAL_TIM_IC_Start+0x19c>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a20      	ldr	r2, [pc, #128]	; (800c1bc <HAL_TIM_IC_Start+0x1f0>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d013      	beq.n	800c168 <HAL_TIM_IC_Start+0x19c>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a1e      	ldr	r2, [pc, #120]	; (800c1c0 <HAL_TIM_IC_Start+0x1f4>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d00e      	beq.n	800c168 <HAL_TIM_IC_Start+0x19c>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a1d      	ldr	r2, [pc, #116]	; (800c1c4 <HAL_TIM_IC_Start+0x1f8>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d009      	beq.n	800c168 <HAL_TIM_IC_Start+0x19c>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a1b      	ldr	r2, [pc, #108]	; (800c1c8 <HAL_TIM_IC_Start+0x1fc>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d004      	beq.n	800c168 <HAL_TIM_IC_Start+0x19c>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a1a      	ldr	r2, [pc, #104]	; (800c1cc <HAL_TIM_IC_Start+0x200>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d115      	bne.n	800c194 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	689a      	ldr	r2, [r3, #8]
 800c16e:	4b18      	ldr	r3, [pc, #96]	; (800c1d0 <HAL_TIM_IC_Start+0x204>)
 800c170:	4013      	ands	r3, r2
 800c172:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2b06      	cmp	r3, #6
 800c178:	d015      	beq.n	800c1a6 <HAL_TIM_IC_Start+0x1da>
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c180:	d011      	beq.n	800c1a6 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f042 0201 	orr.w	r2, r2, #1
 800c190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c192:	e008      	b.n	800c1a6 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f042 0201 	orr.w	r2, r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	e000      	b.n	800c1a8 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	40010000 	.word	0x40010000
 800c1b8:	40000400 	.word	0x40000400
 800c1bc:	40000800 	.word	0x40000800
 800c1c0:	40000c00 	.word	0x40000c00
 800c1c4:	40010400 	.word	0x40010400
 800c1c8:	40001800 	.word	0x40001800
 800c1cc:	40014000 	.word	0x40014000
 800c1d0:	00010007 	.word	0x00010007

0800c1d4 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f001 fd02 	bl	800dbf0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6a1a      	ldr	r2, [r3, #32]
 800c1f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800c1f6:	4013      	ands	r3, r2
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10f      	bne.n	800c21c <HAL_TIM_IC_Stop+0x48>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6a1a      	ldr	r2, [r3, #32]
 800c202:	f240 4344 	movw	r3, #1092	; 0x444
 800c206:	4013      	ands	r3, r2
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d107      	bne.n	800c21c <HAL_TIM_IC_Stop+0x48>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f022 0201 	bic.w	r2, r2, #1
 800c21a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d104      	bne.n	800c22c <HAL_TIM_IC_Stop+0x58>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2201      	movs	r2, #1
 800c226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c22a:	e023      	b.n	800c274 <HAL_TIM_IC_Stop+0xa0>
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d104      	bne.n	800c23c <HAL_TIM_IC_Stop+0x68>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2201      	movs	r2, #1
 800c236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c23a:	e01b      	b.n	800c274 <HAL_TIM_IC_Stop+0xa0>
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	2b08      	cmp	r3, #8
 800c240:	d104      	bne.n	800c24c <HAL_TIM_IC_Stop+0x78>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c24a:	e013      	b.n	800c274 <HAL_TIM_IC_Stop+0xa0>
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	2b0c      	cmp	r3, #12
 800c250:	d104      	bne.n	800c25c <HAL_TIM_IC_Stop+0x88>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2201      	movs	r2, #1
 800c256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c25a:	e00b      	b.n	800c274 <HAL_TIM_IC_Stop+0xa0>
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	2b10      	cmp	r3, #16
 800c260:	d104      	bne.n	800c26c <HAL_TIM_IC_Stop+0x98>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c26a:	e003      	b.n	800c274 <HAL_TIM_IC_Stop+0xa0>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d104      	bne.n	800c284 <HAL_TIM_IC_Stop+0xb0>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c282:	e013      	b.n	800c2ac <HAL_TIM_IC_Stop+0xd8>
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	2b04      	cmp	r3, #4
 800c288:	d104      	bne.n	800c294 <HAL_TIM_IC_Stop+0xc0>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c292:	e00b      	b.n	800c2ac <HAL_TIM_IC_Stop+0xd8>
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	2b08      	cmp	r3, #8
 800c298:	d104      	bne.n	800c2a4 <HAL_TIM_IC_Stop+0xd0>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2201      	movs	r2, #1
 800c29e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2a2:	e003      	b.n	800c2ac <HAL_TIM_IC_Stop+0xd8>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800c2ac:	2300      	movs	r3, #0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
	...

0800c2b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d104      	bne.n	800c2d6 <HAL_TIM_IC_Start_IT+0x1e>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	e023      	b.n	800c31e <HAL_TIM_IC_Start_IT+0x66>
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b04      	cmp	r3, #4
 800c2da:	d104      	bne.n	800c2e6 <HAL_TIM_IC_Start_IT+0x2e>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	e01b      	b.n	800c31e <HAL_TIM_IC_Start_IT+0x66>
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2b08      	cmp	r3, #8
 800c2ea:	d104      	bne.n	800c2f6 <HAL_TIM_IC_Start_IT+0x3e>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	e013      	b.n	800c31e <HAL_TIM_IC_Start_IT+0x66>
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	2b0c      	cmp	r3, #12
 800c2fa:	d104      	bne.n	800c306 <HAL_TIM_IC_Start_IT+0x4e>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c302:	b2db      	uxtb	r3, r3
 800c304:	e00b      	b.n	800c31e <HAL_TIM_IC_Start_IT+0x66>
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b10      	cmp	r3, #16
 800c30a:	d104      	bne.n	800c316 <HAL_TIM_IC_Start_IT+0x5e>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c312:	b2db      	uxtb	r3, r3
 800c314:	e003      	b.n	800c31e <HAL_TIM_IC_Start_IT+0x66>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d104      	bne.n	800c330 <HAL_TIM_IC_Start_IT+0x78>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	e013      	b.n	800c358 <HAL_TIM_IC_Start_IT+0xa0>
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	2b04      	cmp	r3, #4
 800c334:	d104      	bne.n	800c340 <HAL_TIM_IC_Start_IT+0x88>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	e00b      	b.n	800c358 <HAL_TIM_IC_Start_IT+0xa0>
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	2b08      	cmp	r3, #8
 800c344:	d104      	bne.n	800c350 <HAL_TIM_IC_Start_IT+0x98>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	e003      	b.n	800c358 <HAL_TIM_IC_Start_IT+0xa0>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c356:	b2db      	uxtb	r3, r3
 800c358:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c35a:	7bbb      	ldrb	r3, [r7, #14]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d102      	bne.n	800c366 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c360:	7b7b      	ldrb	r3, [r7, #13]
 800c362:	2b01      	cmp	r3, #1
 800c364:	d001      	beq.n	800c36a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e0e2      	b.n	800c530 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d104      	bne.n	800c37a <HAL_TIM_IC_Start_IT+0xc2>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2202      	movs	r2, #2
 800c374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c378:	e023      	b.n	800c3c2 <HAL_TIM_IC_Start_IT+0x10a>
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b04      	cmp	r3, #4
 800c37e:	d104      	bne.n	800c38a <HAL_TIM_IC_Start_IT+0xd2>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2202      	movs	r2, #2
 800c384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c388:	e01b      	b.n	800c3c2 <HAL_TIM_IC_Start_IT+0x10a>
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	2b08      	cmp	r3, #8
 800c38e:	d104      	bne.n	800c39a <HAL_TIM_IC_Start_IT+0xe2>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2202      	movs	r2, #2
 800c394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c398:	e013      	b.n	800c3c2 <HAL_TIM_IC_Start_IT+0x10a>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2b0c      	cmp	r3, #12
 800c39e:	d104      	bne.n	800c3aa <HAL_TIM_IC_Start_IT+0xf2>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3a8:	e00b      	b.n	800c3c2 <HAL_TIM_IC_Start_IT+0x10a>
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2b10      	cmp	r3, #16
 800c3ae:	d104      	bne.n	800c3ba <HAL_TIM_IC_Start_IT+0x102>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3b8:	e003      	b.n	800c3c2 <HAL_TIM_IC_Start_IT+0x10a>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2202      	movs	r2, #2
 800c3be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d104      	bne.n	800c3d2 <HAL_TIM_IC_Start_IT+0x11a>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3d0:	e013      	b.n	800c3fa <HAL_TIM_IC_Start_IT+0x142>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	2b04      	cmp	r3, #4
 800c3d6:	d104      	bne.n	800c3e2 <HAL_TIM_IC_Start_IT+0x12a>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2202      	movs	r2, #2
 800c3dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3e0:	e00b      	b.n	800c3fa <HAL_TIM_IC_Start_IT+0x142>
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	2b08      	cmp	r3, #8
 800c3e6:	d104      	bne.n	800c3f2 <HAL_TIM_IC_Start_IT+0x13a>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c3f0:	e003      	b.n	800c3fa <HAL_TIM_IC_Start_IT+0x142>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2202      	movs	r2, #2
 800c3f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	2b0c      	cmp	r3, #12
 800c3fe:	d841      	bhi.n	800c484 <HAL_TIM_IC_Start_IT+0x1cc>
 800c400:	a201      	add	r2, pc, #4	; (adr r2, 800c408 <HAL_TIM_IC_Start_IT+0x150>)
 800c402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c406:	bf00      	nop
 800c408:	0800c43d 	.word	0x0800c43d
 800c40c:	0800c485 	.word	0x0800c485
 800c410:	0800c485 	.word	0x0800c485
 800c414:	0800c485 	.word	0x0800c485
 800c418:	0800c44f 	.word	0x0800c44f
 800c41c:	0800c485 	.word	0x0800c485
 800c420:	0800c485 	.word	0x0800c485
 800c424:	0800c485 	.word	0x0800c485
 800c428:	0800c461 	.word	0x0800c461
 800c42c:	0800c485 	.word	0x0800c485
 800c430:	0800c485 	.word	0x0800c485
 800c434:	0800c485 	.word	0x0800c485
 800c438:	0800c473 	.word	0x0800c473
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	68da      	ldr	r2, [r3, #12]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f042 0202 	orr.w	r2, r2, #2
 800c44a:	60da      	str	r2, [r3, #12]
      break;
 800c44c:	e01d      	b.n	800c48a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	68da      	ldr	r2, [r3, #12]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f042 0204 	orr.w	r2, r2, #4
 800c45c:	60da      	str	r2, [r3, #12]
      break;
 800c45e:	e014      	b.n	800c48a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68da      	ldr	r2, [r3, #12]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f042 0208 	orr.w	r2, r2, #8
 800c46e:	60da      	str	r2, [r3, #12]
      break;
 800c470:	e00b      	b.n	800c48a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f042 0210 	orr.w	r2, r2, #16
 800c480:	60da      	str	r2, [r3, #12]
      break;
 800c482:	e002      	b.n	800c48a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800c484:	2301      	movs	r3, #1
 800c486:	73fb      	strb	r3, [r7, #15]
      break;
 800c488:	bf00      	nop
  }

  if (status == HAL_OK)
 800c48a:	7bfb      	ldrb	r3, [r7, #15]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d14e      	bne.n	800c52e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2201      	movs	r2, #1
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	4618      	mov	r0, r3
 800c49a:	f001 fba9 	bl	800dbf0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a25      	ldr	r2, [pc, #148]	; (800c538 <HAL_TIM_IC_Start_IT+0x280>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d022      	beq.n	800c4ee <HAL_TIM_IC_Start_IT+0x236>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4b0:	d01d      	beq.n	800c4ee <HAL_TIM_IC_Start_IT+0x236>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a21      	ldr	r2, [pc, #132]	; (800c53c <HAL_TIM_IC_Start_IT+0x284>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d018      	beq.n	800c4ee <HAL_TIM_IC_Start_IT+0x236>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a1f      	ldr	r2, [pc, #124]	; (800c540 <HAL_TIM_IC_Start_IT+0x288>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d013      	beq.n	800c4ee <HAL_TIM_IC_Start_IT+0x236>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a1e      	ldr	r2, [pc, #120]	; (800c544 <HAL_TIM_IC_Start_IT+0x28c>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d00e      	beq.n	800c4ee <HAL_TIM_IC_Start_IT+0x236>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a1c      	ldr	r2, [pc, #112]	; (800c548 <HAL_TIM_IC_Start_IT+0x290>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d009      	beq.n	800c4ee <HAL_TIM_IC_Start_IT+0x236>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a1b      	ldr	r2, [pc, #108]	; (800c54c <HAL_TIM_IC_Start_IT+0x294>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d004      	beq.n	800c4ee <HAL_TIM_IC_Start_IT+0x236>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a19      	ldr	r2, [pc, #100]	; (800c550 <HAL_TIM_IC_Start_IT+0x298>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d115      	bne.n	800c51a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	689a      	ldr	r2, [r3, #8]
 800c4f4:	4b17      	ldr	r3, [pc, #92]	; (800c554 <HAL_TIM_IC_Start_IT+0x29c>)
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	2b06      	cmp	r3, #6
 800c4fe:	d015      	beq.n	800c52c <HAL_TIM_IC_Start_IT+0x274>
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c506:	d011      	beq.n	800c52c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f042 0201 	orr.w	r2, r2, #1
 800c516:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c518:	e008      	b.n	800c52c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f042 0201 	orr.w	r2, r2, #1
 800c528:	601a      	str	r2, [r3, #0]
 800c52a:	e000      	b.n	800c52e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c52c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	40010000 	.word	0x40010000
 800c53c:	40000400 	.word	0x40000400
 800c540:	40000800 	.word	0x40000800
 800c544:	40000c00 	.word	0x40000c00
 800c548:	40010400 	.word	0x40010400
 800c54c:	40001800 	.word	0x40001800
 800c550:	40014000 	.word	0x40014000
 800c554:	00010007 	.word	0x00010007

0800c558 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c562:	2300      	movs	r3, #0
 800c564:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	2b0c      	cmp	r3, #12
 800c56a:	d841      	bhi.n	800c5f0 <HAL_TIM_IC_Stop_IT+0x98>
 800c56c:	a201      	add	r2, pc, #4	; (adr r2, 800c574 <HAL_TIM_IC_Stop_IT+0x1c>)
 800c56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c572:	bf00      	nop
 800c574:	0800c5a9 	.word	0x0800c5a9
 800c578:	0800c5f1 	.word	0x0800c5f1
 800c57c:	0800c5f1 	.word	0x0800c5f1
 800c580:	0800c5f1 	.word	0x0800c5f1
 800c584:	0800c5bb 	.word	0x0800c5bb
 800c588:	0800c5f1 	.word	0x0800c5f1
 800c58c:	0800c5f1 	.word	0x0800c5f1
 800c590:	0800c5f1 	.word	0x0800c5f1
 800c594:	0800c5cd 	.word	0x0800c5cd
 800c598:	0800c5f1 	.word	0x0800c5f1
 800c59c:	0800c5f1 	.word	0x0800c5f1
 800c5a0:	0800c5f1 	.word	0x0800c5f1
 800c5a4:	0800c5df 	.word	0x0800c5df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68da      	ldr	r2, [r3, #12]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f022 0202 	bic.w	r2, r2, #2
 800c5b6:	60da      	str	r2, [r3, #12]
      break;
 800c5b8:	e01d      	b.n	800c5f6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68da      	ldr	r2, [r3, #12]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f022 0204 	bic.w	r2, r2, #4
 800c5c8:	60da      	str	r2, [r3, #12]
      break;
 800c5ca:	e014      	b.n	800c5f6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68da      	ldr	r2, [r3, #12]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f022 0208 	bic.w	r2, r2, #8
 800c5da:	60da      	str	r2, [r3, #12]
      break;
 800c5dc:	e00b      	b.n	800c5f6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	68da      	ldr	r2, [r3, #12]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f022 0210 	bic.w	r2, r2, #16
 800c5ec:	60da      	str	r2, [r3, #12]
      break;
 800c5ee:	e002      	b.n	800c5f6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5f4:	bf00      	nop
  }

  if (status == HAL_OK)
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d166      	bne.n	800c6ca <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2200      	movs	r2, #0
 800c602:	6839      	ldr	r1, [r7, #0]
 800c604:	4618      	mov	r0, r3
 800c606:	f001 faf3 	bl	800dbf0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	6a1a      	ldr	r2, [r3, #32]
 800c610:	f241 1311 	movw	r3, #4369	; 0x1111
 800c614:	4013      	ands	r3, r2
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10f      	bne.n	800c63a <HAL_TIM_IC_Stop_IT+0xe2>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	6a1a      	ldr	r2, [r3, #32]
 800c620:	f240 4344 	movw	r3, #1092	; 0x444
 800c624:	4013      	ands	r3, r2
 800c626:	2b00      	cmp	r3, #0
 800c628:	d107      	bne.n	800c63a <HAL_TIM_IC_Stop_IT+0xe2>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f022 0201 	bic.w	r2, r2, #1
 800c638:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d104      	bne.n	800c64a <HAL_TIM_IC_Stop_IT+0xf2>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c648:	e023      	b.n	800c692 <HAL_TIM_IC_Stop_IT+0x13a>
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b04      	cmp	r3, #4
 800c64e:	d104      	bne.n	800c65a <HAL_TIM_IC_Stop_IT+0x102>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c658:	e01b      	b.n	800c692 <HAL_TIM_IC_Stop_IT+0x13a>
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2b08      	cmp	r3, #8
 800c65e:	d104      	bne.n	800c66a <HAL_TIM_IC_Stop_IT+0x112>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c668:	e013      	b.n	800c692 <HAL_TIM_IC_Stop_IT+0x13a>
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	2b0c      	cmp	r3, #12
 800c66e:	d104      	bne.n	800c67a <HAL_TIM_IC_Stop_IT+0x122>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c678:	e00b      	b.n	800c692 <HAL_TIM_IC_Stop_IT+0x13a>
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b10      	cmp	r3, #16
 800c67e:	d104      	bne.n	800c68a <HAL_TIM_IC_Stop_IT+0x132>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c688:	e003      	b.n	800c692 <HAL_TIM_IC_Stop_IT+0x13a>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2201      	movs	r2, #1
 800c68e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d104      	bne.n	800c6a2 <HAL_TIM_IC_Stop_IT+0x14a>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6a0:	e013      	b.n	800c6ca <HAL_TIM_IC_Stop_IT+0x172>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d104      	bne.n	800c6b2 <HAL_TIM_IC_Stop_IT+0x15a>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6b0:	e00b      	b.n	800c6ca <HAL_TIM_IC_Stop_IT+0x172>
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b08      	cmp	r3, #8
 800c6b6:	d104      	bne.n	800c6c2 <HAL_TIM_IC_Stop_IT+0x16a>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6c0:	e003      	b.n	800c6ca <HAL_TIM_IC_Stop_IT+0x172>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800c6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	f003 0302 	and.w	r3, r3, #2
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d122      	bne.n	800c730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	f003 0302 	and.w	r3, r3, #2
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d11b      	bne.n	800c730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f06f 0202 	mvn.w	r2, #2
 800c700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2201      	movs	r2, #1
 800c706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	699b      	ldr	r3, [r3, #24]
 800c70e:	f003 0303 	and.w	r3, r3, #3
 800c712:	2b00      	cmp	r3, #0
 800c714:	d003      	beq.n	800c71e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7f4 ff68 	bl	80015ec <HAL_TIM_IC_CaptureCallback>
 800c71c:	e005      	b.n	800c72a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fc26 	bl	800cf70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fc2d 	bl	800cf84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	f003 0304 	and.w	r3, r3, #4
 800c73a:	2b04      	cmp	r3, #4
 800c73c:	d122      	bne.n	800c784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	f003 0304 	and.w	r3, r3, #4
 800c748:	2b04      	cmp	r3, #4
 800c74a:	d11b      	bne.n	800c784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f06f 0204 	mvn.w	r2, #4
 800c754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2202      	movs	r2, #2
 800c75a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	699b      	ldr	r3, [r3, #24]
 800c762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c766:	2b00      	cmp	r3, #0
 800c768:	d003      	beq.n	800c772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7f4 ff3e 	bl	80015ec <HAL_TIM_IC_CaptureCallback>
 800c770:	e005      	b.n	800c77e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fbfc 	bl	800cf70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fc03 	bl	800cf84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	f003 0308 	and.w	r3, r3, #8
 800c78e:	2b08      	cmp	r3, #8
 800c790:	d122      	bne.n	800c7d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	f003 0308 	and.w	r3, r3, #8
 800c79c:	2b08      	cmp	r3, #8
 800c79e:	d11b      	bne.n	800c7d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f06f 0208 	mvn.w	r2, #8
 800c7a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2204      	movs	r2, #4
 800c7ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	69db      	ldr	r3, [r3, #28]
 800c7b6:	f003 0303 	and.w	r3, r3, #3
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d003      	beq.n	800c7c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7f4 ff14 	bl	80015ec <HAL_TIM_IC_CaptureCallback>
 800c7c4:	e005      	b.n	800c7d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 fbd2 	bl	800cf70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 fbd9 	bl	800cf84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	f003 0310 	and.w	r3, r3, #16
 800c7e2:	2b10      	cmp	r3, #16
 800c7e4:	d122      	bne.n	800c82c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	f003 0310 	and.w	r3, r3, #16
 800c7f0:	2b10      	cmp	r3, #16
 800c7f2:	d11b      	bne.n	800c82c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f06f 0210 	mvn.w	r2, #16
 800c7fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2208      	movs	r2, #8
 800c802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d003      	beq.n	800c81a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f7f4 feea 	bl	80015ec <HAL_TIM_IC_CaptureCallback>
 800c818:	e005      	b.n	800c826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 fba8 	bl	800cf70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 fbaf 	bl	800cf84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	f003 0301 	and.w	r3, r3, #1
 800c836:	2b01      	cmp	r3, #1
 800c838:	d10e      	bne.n	800c858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	2b01      	cmp	r3, #1
 800c846:	d107      	bne.n	800c858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f06f 0201 	mvn.w	r2, #1
 800c850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7f4 fe9c 	bl	8001590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c862:	2b80      	cmp	r3, #128	; 0x80
 800c864:	d10e      	bne.n	800c884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c870:	2b80      	cmp	r3, #128	; 0x80
 800c872:	d107      	bne.n	800c884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c87c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f001 fa74 	bl	800dd6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c88e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c892:	d10e      	bne.n	800c8b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c89e:	2b80      	cmp	r3, #128	; 0x80
 800c8a0:	d107      	bne.n	800c8b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c8aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f001 fa67 	bl	800dd80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8bc:	2b40      	cmp	r3, #64	; 0x40
 800c8be:	d10e      	bne.n	800c8de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ca:	2b40      	cmp	r3, #64	; 0x40
 800c8cc:	d107      	bne.n	800c8de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fb5d 	bl	800cf98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	f003 0320 	and.w	r3, r3, #32
 800c8e8:	2b20      	cmp	r3, #32
 800c8ea:	d10e      	bne.n	800c90a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	f003 0320 	and.w	r3, r3, #32
 800c8f6:	2b20      	cmp	r3, #32
 800c8f8:	d107      	bne.n	800c90a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f06f 0220 	mvn.w	r2, #32
 800c902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f001 fa27 	bl	800dd58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c90a:	bf00      	nop
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b086      	sub	sp, #24
 800c916:	af00      	add	r7, sp, #0
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d101      	bne.n	800c930 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c92c:	2302      	movs	r3, #2
 800c92e:	e088      	b.n	800ca42 <HAL_TIM_IC_ConfigChannel+0x130>
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d11b      	bne.n	800c976 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800c94e:	f000 ff87 	bl	800d860 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	699a      	ldr	r2, [r3, #24]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f022 020c 	bic.w	r2, r2, #12
 800c960:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	6999      	ldr	r1, [r3, #24]
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	689a      	ldr	r2, [r3, #8]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	430a      	orrs	r2, r1
 800c972:	619a      	str	r2, [r3, #24]
 800c974:	e060      	b.n	800ca38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b04      	cmp	r3, #4
 800c97a:	d11c      	bne.n	800c9b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800c98c:	f001 f80b 	bl	800d9a6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	699a      	ldr	r2, [r3, #24]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c99e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6999      	ldr	r1, [r3, #24]
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	021a      	lsls	r2, r3, #8
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	430a      	orrs	r2, r1
 800c9b2:	619a      	str	r2, [r3, #24]
 800c9b4:	e040      	b.n	800ca38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2b08      	cmp	r3, #8
 800c9ba:	d11b      	bne.n	800c9f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800c9cc:	f001 f858 	bl	800da80 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	69da      	ldr	r2, [r3, #28]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f022 020c 	bic.w	r2, r2, #12
 800c9de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	69d9      	ldr	r1, [r3, #28]
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	689a      	ldr	r2, [r3, #8]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	430a      	orrs	r2, r1
 800c9f0:	61da      	str	r2, [r3, #28]
 800c9f2:	e021      	b.n	800ca38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b0c      	cmp	r3, #12
 800c9f8:	d11c      	bne.n	800ca34 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ca0a:	f001 f875 	bl	800daf8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	69da      	ldr	r2, [r3, #28]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ca1c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	69d9      	ldr	r1, [r3, #28]
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	021a      	lsls	r2, r3, #8
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	430a      	orrs	r2, r1
 800ca30:	61da      	str	r2, [r3, #28]
 800ca32:	e001      	b.n	800ca38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3718      	adds	r7, #24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
	...

0800ca4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d101      	bne.n	800ca6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ca66:	2302      	movs	r3, #2
 800ca68:	e0ff      	b.n	800cc6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2b14      	cmp	r3, #20
 800ca76:	f200 80f0 	bhi.w	800cc5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ca7a:	a201      	add	r2, pc, #4	; (adr r2, 800ca80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ca7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca80:	0800cad5 	.word	0x0800cad5
 800ca84:	0800cc5b 	.word	0x0800cc5b
 800ca88:	0800cc5b 	.word	0x0800cc5b
 800ca8c:	0800cc5b 	.word	0x0800cc5b
 800ca90:	0800cb15 	.word	0x0800cb15
 800ca94:	0800cc5b 	.word	0x0800cc5b
 800ca98:	0800cc5b 	.word	0x0800cc5b
 800ca9c:	0800cc5b 	.word	0x0800cc5b
 800caa0:	0800cb57 	.word	0x0800cb57
 800caa4:	0800cc5b 	.word	0x0800cc5b
 800caa8:	0800cc5b 	.word	0x0800cc5b
 800caac:	0800cc5b 	.word	0x0800cc5b
 800cab0:	0800cb97 	.word	0x0800cb97
 800cab4:	0800cc5b 	.word	0x0800cc5b
 800cab8:	0800cc5b 	.word	0x0800cc5b
 800cabc:	0800cc5b 	.word	0x0800cc5b
 800cac0:	0800cbd9 	.word	0x0800cbd9
 800cac4:	0800cc5b 	.word	0x0800cc5b
 800cac8:	0800cc5b 	.word	0x0800cc5b
 800cacc:	0800cc5b 	.word	0x0800cc5b
 800cad0:	0800cc19 	.word	0x0800cc19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68b9      	ldr	r1, [r7, #8]
 800cada:	4618      	mov	r0, r3
 800cadc:	f000 fb00 	bl	800d0e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	699a      	ldr	r2, [r3, #24]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f042 0208 	orr.w	r2, r2, #8
 800caee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	699a      	ldr	r2, [r3, #24]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f022 0204 	bic.w	r2, r2, #4
 800cafe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	6999      	ldr	r1, [r3, #24]
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	691a      	ldr	r2, [r3, #16]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	430a      	orrs	r2, r1
 800cb10:	619a      	str	r2, [r3, #24]
      break;
 800cb12:	e0a5      	b.n	800cc60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68b9      	ldr	r1, [r7, #8]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f000 fb70 	bl	800d200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	699a      	ldr	r2, [r3, #24]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	699a      	ldr	r2, [r3, #24]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	6999      	ldr	r1, [r3, #24]
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	021a      	lsls	r2, r3, #8
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	430a      	orrs	r2, r1
 800cb52:	619a      	str	r2, [r3, #24]
      break;
 800cb54:	e084      	b.n	800cc60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	68b9      	ldr	r1, [r7, #8]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f000 fbd9 	bl	800d314 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	69da      	ldr	r2, [r3, #28]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f042 0208 	orr.w	r2, r2, #8
 800cb70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	69da      	ldr	r2, [r3, #28]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f022 0204 	bic.w	r2, r2, #4
 800cb80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	69d9      	ldr	r1, [r3, #28]
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	691a      	ldr	r2, [r3, #16]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	430a      	orrs	r2, r1
 800cb92:	61da      	str	r2, [r3, #28]
      break;
 800cb94:	e064      	b.n	800cc60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	68b9      	ldr	r1, [r7, #8]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f000 fc41 	bl	800d424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	69da      	ldr	r2, [r3, #28]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	69da      	ldr	r2, [r3, #28]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	69d9      	ldr	r1, [r3, #28]
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	021a      	lsls	r2, r3, #8
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	61da      	str	r2, [r3, #28]
      break;
 800cbd6:	e043      	b.n	800cc60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68b9      	ldr	r1, [r7, #8]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 fc8a 	bl	800d4f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f042 0208 	orr.w	r2, r2, #8
 800cbf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f022 0204 	bic.w	r2, r2, #4
 800cc02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	691a      	ldr	r2, [r3, #16]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	430a      	orrs	r2, r1
 800cc14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc16:	e023      	b.n	800cc60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	68b9      	ldr	r1, [r7, #8]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 fcce 	bl	800d5c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	691b      	ldr	r3, [r3, #16]
 800cc4e:	021a      	lsls	r2, r3, #8
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	430a      	orrs	r2, r1
 800cc56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc58:	e002      	b.n	800cc60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	75fb      	strb	r3, [r7, #23]
      break;
 800cc5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc68:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3718      	adds	r7, #24
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop

0800cc74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d101      	bne.n	800cc90 <HAL_TIM_ConfigClockSource+0x1c>
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	e0dc      	b.n	800ce4a <HAL_TIM_ConfigClockSource+0x1d6>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2202      	movs	r2, #2
 800cc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	4b6a      	ldr	r3, [pc, #424]	; (800ce54 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ccac:	4013      	ands	r3, r2
 800ccae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a64      	ldr	r2, [pc, #400]	; (800ce58 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	f000 80a9 	beq.w	800ce1e <HAL_TIM_ConfigClockSource+0x1aa>
 800cccc:	4a62      	ldr	r2, [pc, #392]	; (800ce58 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	f200 80ae 	bhi.w	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccd4:	4a61      	ldr	r2, [pc, #388]	; (800ce5c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	f000 80a1 	beq.w	800ce1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ccdc:	4a5f      	ldr	r2, [pc, #380]	; (800ce5c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	f200 80a6 	bhi.w	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800cce4:	4a5e      	ldr	r2, [pc, #376]	; (800ce60 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	f000 8099 	beq.w	800ce1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ccec:	4a5c      	ldr	r2, [pc, #368]	; (800ce60 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	f200 809e 	bhi.w	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ccf8:	f000 8091 	beq.w	800ce1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ccfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cd00:	f200 8096 	bhi.w	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd08:	f000 8089 	beq.w	800ce1e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd10:	f200 808e 	bhi.w	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd18:	d03e      	beq.n	800cd98 <HAL_TIM_ConfigClockSource+0x124>
 800cd1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd1e:	f200 8087 	bhi.w	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd26:	f000 8086 	beq.w	800ce36 <HAL_TIM_ConfigClockSource+0x1c2>
 800cd2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd2e:	d87f      	bhi.n	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd30:	2b70      	cmp	r3, #112	; 0x70
 800cd32:	d01a      	beq.n	800cd6a <HAL_TIM_ConfigClockSource+0xf6>
 800cd34:	2b70      	cmp	r3, #112	; 0x70
 800cd36:	d87b      	bhi.n	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd38:	2b60      	cmp	r3, #96	; 0x60
 800cd3a:	d050      	beq.n	800cdde <HAL_TIM_ConfigClockSource+0x16a>
 800cd3c:	2b60      	cmp	r3, #96	; 0x60
 800cd3e:	d877      	bhi.n	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd40:	2b50      	cmp	r3, #80	; 0x50
 800cd42:	d03c      	beq.n	800cdbe <HAL_TIM_ConfigClockSource+0x14a>
 800cd44:	2b50      	cmp	r3, #80	; 0x50
 800cd46:	d873      	bhi.n	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd48:	2b40      	cmp	r3, #64	; 0x40
 800cd4a:	d058      	beq.n	800cdfe <HAL_TIM_ConfigClockSource+0x18a>
 800cd4c:	2b40      	cmp	r3, #64	; 0x40
 800cd4e:	d86f      	bhi.n	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd50:	2b30      	cmp	r3, #48	; 0x30
 800cd52:	d064      	beq.n	800ce1e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd54:	2b30      	cmp	r3, #48	; 0x30
 800cd56:	d86b      	bhi.n	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd58:	2b20      	cmp	r3, #32
 800cd5a:	d060      	beq.n	800ce1e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd5c:	2b20      	cmp	r3, #32
 800cd5e:	d867      	bhi.n	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d05c      	beq.n	800ce1e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd64:	2b10      	cmp	r3, #16
 800cd66:	d05a      	beq.n	800ce1e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd68:	e062      	b.n	800ce30 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd7a:	f000 ff19 	bl	800dbb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cd8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	609a      	str	r2, [r3, #8]
      break;
 800cd96:	e04f      	b.n	800ce38 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cda8:	f000 ff02 	bl	800dbb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	689a      	ldr	r2, [r3, #8]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cdba:	609a      	str	r2, [r3, #8]
      break;
 800cdbc:	e03c      	b.n	800ce38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdca:	461a      	mov	r2, r3
 800cdcc:	f000 fdbc 	bl	800d948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2150      	movs	r1, #80	; 0x50
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f000 fecc 	bl	800db74 <TIM_ITRx_SetConfig>
      break;
 800cddc:	e02c      	b.n	800ce38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdea:	461a      	mov	r2, r3
 800cdec:	f000 fe18 	bl	800da20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2160      	movs	r1, #96	; 0x60
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 febc 	bl	800db74 <TIM_ITRx_SetConfig>
      break;
 800cdfc:	e01c      	b.n	800ce38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	f000 fd9c 	bl	800d948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2140      	movs	r1, #64	; 0x40
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 feac 	bl	800db74 <TIM_ITRx_SetConfig>
      break;
 800ce1c:	e00c      	b.n	800ce38 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4619      	mov	r1, r3
 800ce28:	4610      	mov	r0, r2
 800ce2a:	f000 fea3 	bl	800db74 <TIM_ITRx_SetConfig>
      break;
 800ce2e:	e003      	b.n	800ce38 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ce30:	2301      	movs	r3, #1
 800ce32:	73fb      	strb	r3, [r7, #15]
      break;
 800ce34:	e000      	b.n	800ce38 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ce36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	ffceff88 	.word	0xffceff88
 800ce58:	00100040 	.word	0x00100040
 800ce5c:	00100030 	.word	0x00100030
 800ce60:	00100020 	.word	0x00100020

0800ce64 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d101      	bne.n	800ce7c <HAL_TIM_SlaveConfigSynchro+0x18>
 800ce78:	2302      	movs	r3, #2
 800ce7a:	e031      	b.n	800cee0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2202      	movs	r2, #2
 800ce88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 fbfc 	bl	800d68c <TIM_SlaveTimer_SetConfig>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d009      	beq.n	800ceae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e018      	b.n	800cee0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	68da      	ldr	r2, [r3, #12]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cebc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68da      	ldr	r2, [r3, #12]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cecc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800cef2:	2300      	movs	r3, #0
 800cef4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	2b0c      	cmp	r3, #12
 800cefa:	d831      	bhi.n	800cf60 <HAL_TIM_ReadCapturedValue+0x78>
 800cefc:	a201      	add	r2, pc, #4	; (adr r2, 800cf04 <HAL_TIM_ReadCapturedValue+0x1c>)
 800cefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf02:	bf00      	nop
 800cf04:	0800cf39 	.word	0x0800cf39
 800cf08:	0800cf61 	.word	0x0800cf61
 800cf0c:	0800cf61 	.word	0x0800cf61
 800cf10:	0800cf61 	.word	0x0800cf61
 800cf14:	0800cf43 	.word	0x0800cf43
 800cf18:	0800cf61 	.word	0x0800cf61
 800cf1c:	0800cf61 	.word	0x0800cf61
 800cf20:	0800cf61 	.word	0x0800cf61
 800cf24:	0800cf4d 	.word	0x0800cf4d
 800cf28:	0800cf61 	.word	0x0800cf61
 800cf2c:	0800cf61 	.word	0x0800cf61
 800cf30:	0800cf61 	.word	0x0800cf61
 800cf34:	0800cf57 	.word	0x0800cf57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3e:	60fb      	str	r3, [r7, #12]

      break;
 800cf40:	e00f      	b.n	800cf62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf48:	60fb      	str	r3, [r7, #12]

      break;
 800cf4a:	e00a      	b.n	800cf62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf52:	60fb      	str	r3, [r7, #12]

      break;
 800cf54:	e005      	b.n	800cf62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5c:	60fb      	str	r3, [r7, #12]

      break;
 800cf5e:	e000      	b.n	800cf62 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800cf60:	bf00      	nop
  }

  return tmpreg;
 800cf62:	68fb      	ldr	r3, [r7, #12]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf78:	bf00      	nop
 800cf7a:	370c      	adds	r7, #12
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf8c:	bf00      	nop
 800cf8e:	370c      	adds	r7, #12
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cfa0:	bf00      	nop
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4a40      	ldr	r2, [pc, #256]	; (800d0c0 <TIM_Base_SetConfig+0x114>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d013      	beq.n	800cfec <TIM_Base_SetConfig+0x40>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfca:	d00f      	beq.n	800cfec <TIM_Base_SetConfig+0x40>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	4a3d      	ldr	r2, [pc, #244]	; (800d0c4 <TIM_Base_SetConfig+0x118>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d00b      	beq.n	800cfec <TIM_Base_SetConfig+0x40>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	4a3c      	ldr	r2, [pc, #240]	; (800d0c8 <TIM_Base_SetConfig+0x11c>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d007      	beq.n	800cfec <TIM_Base_SetConfig+0x40>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4a3b      	ldr	r2, [pc, #236]	; (800d0cc <TIM_Base_SetConfig+0x120>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d003      	beq.n	800cfec <TIM_Base_SetConfig+0x40>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4a3a      	ldr	r2, [pc, #232]	; (800d0d0 <TIM_Base_SetConfig+0x124>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d108      	bne.n	800cffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	4313      	orrs	r3, r2
 800cffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	4a2f      	ldr	r2, [pc, #188]	; (800d0c0 <TIM_Base_SetConfig+0x114>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d01f      	beq.n	800d046 <TIM_Base_SetConfig+0x9a>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d00c:	d01b      	beq.n	800d046 <TIM_Base_SetConfig+0x9a>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4a2c      	ldr	r2, [pc, #176]	; (800d0c4 <TIM_Base_SetConfig+0x118>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d017      	beq.n	800d046 <TIM_Base_SetConfig+0x9a>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4a2b      	ldr	r2, [pc, #172]	; (800d0c8 <TIM_Base_SetConfig+0x11c>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d013      	beq.n	800d046 <TIM_Base_SetConfig+0x9a>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4a2a      	ldr	r2, [pc, #168]	; (800d0cc <TIM_Base_SetConfig+0x120>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d00f      	beq.n	800d046 <TIM_Base_SetConfig+0x9a>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	4a29      	ldr	r2, [pc, #164]	; (800d0d0 <TIM_Base_SetConfig+0x124>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d00b      	beq.n	800d046 <TIM_Base_SetConfig+0x9a>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4a28      	ldr	r2, [pc, #160]	; (800d0d4 <TIM_Base_SetConfig+0x128>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d007      	beq.n	800d046 <TIM_Base_SetConfig+0x9a>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4a27      	ldr	r2, [pc, #156]	; (800d0d8 <TIM_Base_SetConfig+0x12c>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d003      	beq.n	800d046 <TIM_Base_SetConfig+0x9a>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4a26      	ldr	r2, [pc, #152]	; (800d0dc <TIM_Base_SetConfig+0x130>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d108      	bne.n	800d058 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d04c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	4313      	orrs	r3, r2
 800d056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	695b      	ldr	r3, [r3, #20]
 800d062:	4313      	orrs	r3, r2
 800d064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	689a      	ldr	r2, [r3, #8]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4a10      	ldr	r2, [pc, #64]	; (800d0c0 <TIM_Base_SetConfig+0x114>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d00f      	beq.n	800d0a4 <TIM_Base_SetConfig+0xf8>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4a12      	ldr	r2, [pc, #72]	; (800d0d0 <TIM_Base_SetConfig+0x124>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d00b      	beq.n	800d0a4 <TIM_Base_SetConfig+0xf8>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4a11      	ldr	r2, [pc, #68]	; (800d0d4 <TIM_Base_SetConfig+0x128>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d007      	beq.n	800d0a4 <TIM_Base_SetConfig+0xf8>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a10      	ldr	r2, [pc, #64]	; (800d0d8 <TIM_Base_SetConfig+0x12c>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d003      	beq.n	800d0a4 <TIM_Base_SetConfig+0xf8>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4a0f      	ldr	r2, [pc, #60]	; (800d0dc <TIM_Base_SetConfig+0x130>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d103      	bne.n	800d0ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	691a      	ldr	r2, [r3, #16]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	615a      	str	r2, [r3, #20]
}
 800d0b2:	bf00      	nop
 800d0b4:	3714      	adds	r7, #20
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	40010000 	.word	0x40010000
 800d0c4:	40000400 	.word	0x40000400
 800d0c8:	40000800 	.word	0x40000800
 800d0cc:	40000c00 	.word	0x40000c00
 800d0d0:	40010400 	.word	0x40010400
 800d0d4:	40014000 	.word	0x40014000
 800d0d8:	40014400 	.word	0x40014400
 800d0dc:	40014800 	.word	0x40014800

0800d0e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b087      	sub	sp, #28
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6a1b      	ldr	r3, [r3, #32]
 800d0ee:	f023 0201 	bic.w	r2, r3, #1
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a1b      	ldr	r3, [r3, #32]
 800d0fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	699b      	ldr	r3, [r3, #24]
 800d106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	4b37      	ldr	r3, [pc, #220]	; (800d1e8 <TIM_OC1_SetConfig+0x108>)
 800d10c:	4013      	ands	r3, r2
 800d10e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f023 0303 	bic.w	r3, r3, #3
 800d116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	4313      	orrs	r3, r2
 800d120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	f023 0302 	bic.w	r3, r3, #2
 800d128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	697a      	ldr	r2, [r7, #20]
 800d130:	4313      	orrs	r3, r2
 800d132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	4a2d      	ldr	r2, [pc, #180]	; (800d1ec <TIM_OC1_SetConfig+0x10c>)
 800d138:	4293      	cmp	r3, r2
 800d13a:	d00f      	beq.n	800d15c <TIM_OC1_SetConfig+0x7c>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4a2c      	ldr	r2, [pc, #176]	; (800d1f0 <TIM_OC1_SetConfig+0x110>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d00b      	beq.n	800d15c <TIM_OC1_SetConfig+0x7c>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	4a2b      	ldr	r2, [pc, #172]	; (800d1f4 <TIM_OC1_SetConfig+0x114>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d007      	beq.n	800d15c <TIM_OC1_SetConfig+0x7c>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4a2a      	ldr	r2, [pc, #168]	; (800d1f8 <TIM_OC1_SetConfig+0x118>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d003      	beq.n	800d15c <TIM_OC1_SetConfig+0x7c>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4a29      	ldr	r2, [pc, #164]	; (800d1fc <TIM_OC1_SetConfig+0x11c>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d10c      	bne.n	800d176 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	f023 0308 	bic.w	r3, r3, #8
 800d162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	697a      	ldr	r2, [r7, #20]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	f023 0304 	bic.w	r3, r3, #4
 800d174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4a1c      	ldr	r2, [pc, #112]	; (800d1ec <TIM_OC1_SetConfig+0x10c>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d00f      	beq.n	800d19e <TIM_OC1_SetConfig+0xbe>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	4a1b      	ldr	r2, [pc, #108]	; (800d1f0 <TIM_OC1_SetConfig+0x110>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d00b      	beq.n	800d19e <TIM_OC1_SetConfig+0xbe>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	4a1a      	ldr	r2, [pc, #104]	; (800d1f4 <TIM_OC1_SetConfig+0x114>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d007      	beq.n	800d19e <TIM_OC1_SetConfig+0xbe>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	4a19      	ldr	r2, [pc, #100]	; (800d1f8 <TIM_OC1_SetConfig+0x118>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d003      	beq.n	800d19e <TIM_OC1_SetConfig+0xbe>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4a18      	ldr	r2, [pc, #96]	; (800d1fc <TIM_OC1_SetConfig+0x11c>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d111      	bne.n	800d1c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	695b      	ldr	r3, [r3, #20]
 800d1b2:	693a      	ldr	r2, [r7, #16]
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	699b      	ldr	r3, [r3, #24]
 800d1bc:	693a      	ldr	r2, [r7, #16]
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	693a      	ldr	r2, [r7, #16]
 800d1c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	685a      	ldr	r2, [r3, #4]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	697a      	ldr	r2, [r7, #20]
 800d1da:	621a      	str	r2, [r3, #32]
}
 800d1dc:	bf00      	nop
 800d1de:	371c      	adds	r7, #28
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr
 800d1e8:	fffeff8f 	.word	0xfffeff8f
 800d1ec:	40010000 	.word	0x40010000
 800d1f0:	40010400 	.word	0x40010400
 800d1f4:	40014000 	.word	0x40014000
 800d1f8:	40014400 	.word	0x40014400
 800d1fc:	40014800 	.word	0x40014800

0800d200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d200:	b480      	push	{r7}
 800d202:	b087      	sub	sp, #28
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	f023 0210 	bic.w	r2, r3, #16
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6a1b      	ldr	r3, [r3, #32]
 800d21a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	4b34      	ldr	r3, [pc, #208]	; (800d2fc <TIM_OC2_SetConfig+0xfc>)
 800d22c:	4013      	ands	r3, r2
 800d22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	021b      	lsls	r3, r3, #8
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	4313      	orrs	r3, r2
 800d242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	f023 0320 	bic.w	r3, r3, #32
 800d24a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	011b      	lsls	r3, r3, #4
 800d252:	697a      	ldr	r2, [r7, #20]
 800d254:	4313      	orrs	r3, r2
 800d256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a29      	ldr	r2, [pc, #164]	; (800d300 <TIM_OC2_SetConfig+0x100>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d003      	beq.n	800d268 <TIM_OC2_SetConfig+0x68>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	4a28      	ldr	r2, [pc, #160]	; (800d304 <TIM_OC2_SetConfig+0x104>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d10d      	bne.n	800d284 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d26e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	011b      	lsls	r3, r3, #4
 800d276:	697a      	ldr	r2, [r7, #20]
 800d278:	4313      	orrs	r3, r2
 800d27a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4a1e      	ldr	r2, [pc, #120]	; (800d300 <TIM_OC2_SetConfig+0x100>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d00f      	beq.n	800d2ac <TIM_OC2_SetConfig+0xac>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a1d      	ldr	r2, [pc, #116]	; (800d304 <TIM_OC2_SetConfig+0x104>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d00b      	beq.n	800d2ac <TIM_OC2_SetConfig+0xac>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4a1c      	ldr	r2, [pc, #112]	; (800d308 <TIM_OC2_SetConfig+0x108>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d007      	beq.n	800d2ac <TIM_OC2_SetConfig+0xac>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4a1b      	ldr	r2, [pc, #108]	; (800d30c <TIM_OC2_SetConfig+0x10c>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d003      	beq.n	800d2ac <TIM_OC2_SetConfig+0xac>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4a1a      	ldr	r2, [pc, #104]	; (800d310 <TIM_OC2_SetConfig+0x110>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d113      	bne.n	800d2d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	695b      	ldr	r3, [r3, #20]
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	693a      	ldr	r2, [r7, #16]
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	699b      	ldr	r3, [r3, #24]
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	693a      	ldr	r2, [r7, #16]
 800d2d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	685a      	ldr	r2, [r3, #4]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	697a      	ldr	r2, [r7, #20]
 800d2ec:	621a      	str	r2, [r3, #32]
}
 800d2ee:	bf00      	nop
 800d2f0:	371c      	adds	r7, #28
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	feff8fff 	.word	0xfeff8fff
 800d300:	40010000 	.word	0x40010000
 800d304:	40010400 	.word	0x40010400
 800d308:	40014000 	.word	0x40014000
 800d30c:	40014400 	.word	0x40014400
 800d310:	40014800 	.word	0x40014800

0800d314 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d314:	b480      	push	{r7}
 800d316:	b087      	sub	sp, #28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a1b      	ldr	r3, [r3, #32]
 800d32e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	69db      	ldr	r3, [r3, #28]
 800d33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	4b33      	ldr	r3, [pc, #204]	; (800d40c <TIM_OC3_SetConfig+0xf8>)
 800d340:	4013      	ands	r3, r2
 800d342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f023 0303 	bic.w	r3, r3, #3
 800d34a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	4313      	orrs	r3, r2
 800d354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d35c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	021b      	lsls	r3, r3, #8
 800d364:	697a      	ldr	r2, [r7, #20]
 800d366:	4313      	orrs	r3, r2
 800d368:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a28      	ldr	r2, [pc, #160]	; (800d410 <TIM_OC3_SetConfig+0xfc>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d003      	beq.n	800d37a <TIM_OC3_SetConfig+0x66>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4a27      	ldr	r2, [pc, #156]	; (800d414 <TIM_OC3_SetConfig+0x100>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d10d      	bne.n	800d396 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	021b      	lsls	r3, r3, #8
 800d388:	697a      	ldr	r2, [r7, #20]
 800d38a:	4313      	orrs	r3, r2
 800d38c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4a1d      	ldr	r2, [pc, #116]	; (800d410 <TIM_OC3_SetConfig+0xfc>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d00f      	beq.n	800d3be <TIM_OC3_SetConfig+0xaa>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4a1c      	ldr	r2, [pc, #112]	; (800d414 <TIM_OC3_SetConfig+0x100>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d00b      	beq.n	800d3be <TIM_OC3_SetConfig+0xaa>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4a1b      	ldr	r2, [pc, #108]	; (800d418 <TIM_OC3_SetConfig+0x104>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d007      	beq.n	800d3be <TIM_OC3_SetConfig+0xaa>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4a1a      	ldr	r2, [pc, #104]	; (800d41c <TIM_OC3_SetConfig+0x108>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d003      	beq.n	800d3be <TIM_OC3_SetConfig+0xaa>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4a19      	ldr	r2, [pc, #100]	; (800d420 <TIM_OC3_SetConfig+0x10c>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d113      	bne.n	800d3e6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d3cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	695b      	ldr	r3, [r3, #20]
 800d3d2:	011b      	lsls	r3, r3, #4
 800d3d4:	693a      	ldr	r2, [r7, #16]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	011b      	lsls	r3, r3, #4
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	693a      	ldr	r2, [r7, #16]
 800d3ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	685a      	ldr	r2, [r3, #4]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	697a      	ldr	r2, [r7, #20]
 800d3fe:	621a      	str	r2, [r3, #32]
}
 800d400:	bf00      	nop
 800d402:	371c      	adds	r7, #28
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr
 800d40c:	fffeff8f 	.word	0xfffeff8f
 800d410:	40010000 	.word	0x40010000
 800d414:	40010400 	.word	0x40010400
 800d418:	40014000 	.word	0x40014000
 800d41c:	40014400 	.word	0x40014400
 800d420:	40014800 	.word	0x40014800

0800d424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a1b      	ldr	r3, [r3, #32]
 800d432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	69db      	ldr	r3, [r3, #28]
 800d44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	4b24      	ldr	r3, [pc, #144]	; (800d4e0 <TIM_OC4_SetConfig+0xbc>)
 800d450:	4013      	ands	r3, r2
 800d452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d45a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	021b      	lsls	r3, r3, #8
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	4313      	orrs	r3, r2
 800d466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d46e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	031b      	lsls	r3, r3, #12
 800d476:	693a      	ldr	r2, [r7, #16]
 800d478:	4313      	orrs	r3, r2
 800d47a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4a19      	ldr	r2, [pc, #100]	; (800d4e4 <TIM_OC4_SetConfig+0xc0>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d00f      	beq.n	800d4a4 <TIM_OC4_SetConfig+0x80>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4a18      	ldr	r2, [pc, #96]	; (800d4e8 <TIM_OC4_SetConfig+0xc4>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d00b      	beq.n	800d4a4 <TIM_OC4_SetConfig+0x80>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	4a17      	ldr	r2, [pc, #92]	; (800d4ec <TIM_OC4_SetConfig+0xc8>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d007      	beq.n	800d4a4 <TIM_OC4_SetConfig+0x80>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a16      	ldr	r2, [pc, #88]	; (800d4f0 <TIM_OC4_SetConfig+0xcc>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d003      	beq.n	800d4a4 <TIM_OC4_SetConfig+0x80>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a15      	ldr	r2, [pc, #84]	; (800d4f4 <TIM_OC4_SetConfig+0xd0>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d109      	bne.n	800d4b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	695b      	ldr	r3, [r3, #20]
 800d4b0:	019b      	lsls	r3, r3, #6
 800d4b2:	697a      	ldr	r2, [r7, #20]
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	685a      	ldr	r2, [r3, #4]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	693a      	ldr	r2, [r7, #16]
 800d4d0:	621a      	str	r2, [r3, #32]
}
 800d4d2:	bf00      	nop
 800d4d4:	371c      	adds	r7, #28
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	feff8fff 	.word	0xfeff8fff
 800d4e4:	40010000 	.word	0x40010000
 800d4e8:	40010400 	.word	0x40010400
 800d4ec:	40014000 	.word	0x40014000
 800d4f0:	40014400 	.word	0x40014400
 800d4f4:	40014800 	.word	0x40014800

0800d4f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b087      	sub	sp, #28
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a1b      	ldr	r3, [r3, #32]
 800d512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	4b21      	ldr	r3, [pc, #132]	; (800d5a8 <TIM_OC5_SetConfig+0xb0>)
 800d524:	4013      	ands	r3, r2
 800d526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	4313      	orrs	r3, r2
 800d530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d538:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	041b      	lsls	r3, r3, #16
 800d540:	693a      	ldr	r2, [r7, #16]
 800d542:	4313      	orrs	r3, r2
 800d544:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4a18      	ldr	r2, [pc, #96]	; (800d5ac <TIM_OC5_SetConfig+0xb4>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d00f      	beq.n	800d56e <TIM_OC5_SetConfig+0x76>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4a17      	ldr	r2, [pc, #92]	; (800d5b0 <TIM_OC5_SetConfig+0xb8>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d00b      	beq.n	800d56e <TIM_OC5_SetConfig+0x76>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4a16      	ldr	r2, [pc, #88]	; (800d5b4 <TIM_OC5_SetConfig+0xbc>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d007      	beq.n	800d56e <TIM_OC5_SetConfig+0x76>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4a15      	ldr	r2, [pc, #84]	; (800d5b8 <TIM_OC5_SetConfig+0xc0>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d003      	beq.n	800d56e <TIM_OC5_SetConfig+0x76>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a14      	ldr	r2, [pc, #80]	; (800d5bc <TIM_OC5_SetConfig+0xc4>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d109      	bne.n	800d582 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d574:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	021b      	lsls	r3, r3, #8
 800d57c:	697a      	ldr	r2, [r7, #20]
 800d57e:	4313      	orrs	r3, r2
 800d580:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	697a      	ldr	r2, [r7, #20]
 800d586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	685a      	ldr	r2, [r3, #4]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	693a      	ldr	r2, [r7, #16]
 800d59a:	621a      	str	r2, [r3, #32]
}
 800d59c:	bf00      	nop
 800d59e:	371c      	adds	r7, #28
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr
 800d5a8:	fffeff8f 	.word	0xfffeff8f
 800d5ac:	40010000 	.word	0x40010000
 800d5b0:	40010400 	.word	0x40010400
 800d5b4:	40014000 	.word	0x40014000
 800d5b8:	40014400 	.word	0x40014400
 800d5bc:	40014800 	.word	0x40014800

0800d5c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	4b22      	ldr	r3, [pc, #136]	; (800d674 <TIM_OC6_SetConfig+0xb4>)
 800d5ec:	4013      	ands	r3, r2
 800d5ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	021b      	lsls	r3, r3, #8
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	051b      	lsls	r3, r3, #20
 800d60a:	693a      	ldr	r2, [r7, #16]
 800d60c:	4313      	orrs	r3, r2
 800d60e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a19      	ldr	r2, [pc, #100]	; (800d678 <TIM_OC6_SetConfig+0xb8>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d00f      	beq.n	800d638 <TIM_OC6_SetConfig+0x78>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a18      	ldr	r2, [pc, #96]	; (800d67c <TIM_OC6_SetConfig+0xbc>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d00b      	beq.n	800d638 <TIM_OC6_SetConfig+0x78>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a17      	ldr	r2, [pc, #92]	; (800d680 <TIM_OC6_SetConfig+0xc0>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d007      	beq.n	800d638 <TIM_OC6_SetConfig+0x78>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4a16      	ldr	r2, [pc, #88]	; (800d684 <TIM_OC6_SetConfig+0xc4>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d003      	beq.n	800d638 <TIM_OC6_SetConfig+0x78>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a15      	ldr	r2, [pc, #84]	; (800d688 <TIM_OC6_SetConfig+0xc8>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d109      	bne.n	800d64c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d63e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	695b      	ldr	r3, [r3, #20]
 800d644:	029b      	lsls	r3, r3, #10
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	4313      	orrs	r3, r2
 800d64a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	697a      	ldr	r2, [r7, #20]
 800d650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	693a      	ldr	r2, [r7, #16]
 800d664:	621a      	str	r2, [r3, #32]
}
 800d666:	bf00      	nop
 800d668:	371c      	adds	r7, #28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	feff8fff 	.word	0xfeff8fff
 800d678:	40010000 	.word	0x40010000
 800d67c:	40010400 	.word	0x40010400
 800d680:	40014000 	.word	0x40014000
 800d684:	40014400 	.word	0x40014400
 800d688:	40014800 	.word	0x40014800

0800d68c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d696:	2300      	movs	r3, #0
 800d698:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	689b      	ldr	r3, [r3, #8]
 800d6a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d6a2:	693a      	ldr	r2, [r7, #16]
 800d6a4:	4b65      	ldr	r3, [pc, #404]	; (800d83c <TIM_SlaveTimer_SetConfig+0x1b0>)
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	693a      	ldr	r2, [r7, #16]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d6b4:	693a      	ldr	r2, [r7, #16]
 800d6b6:	4b62      	ldr	r3, [pc, #392]	; (800d840 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	693a      	ldr	r2, [r7, #16]
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	693a      	ldr	r2, [r7, #16]
 800d6cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	4a5c      	ldr	r2, [pc, #368]	; (800d844 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	f000 80ab 	beq.w	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6da:	4a5a      	ldr	r2, [pc, #360]	; (800d844 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	f200 80a4 	bhi.w	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d6e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6e6:	f000 80a3 	beq.w	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6ee:	f200 809c 	bhi.w	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d6f2:	4a55      	ldr	r2, [pc, #340]	; (800d848 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	f000 809b 	beq.w	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6fa:	4a53      	ldr	r2, [pc, #332]	; (800d848 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	f200 8094 	bhi.w	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d702:	4a52      	ldr	r2, [pc, #328]	; (800d84c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d704:	4293      	cmp	r3, r2
 800d706:	f000 8093 	beq.w	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d70a:	4a50      	ldr	r2, [pc, #320]	; (800d84c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	f200 808c 	bhi.w	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d712:	4a4f      	ldr	r2, [pc, #316]	; (800d850 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d714:	4293      	cmp	r3, r2
 800d716:	f000 808b 	beq.w	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d71a:	4a4d      	ldr	r2, [pc, #308]	; (800d850 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	f200 8084 	bhi.w	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d722:	4a4c      	ldr	r2, [pc, #304]	; (800d854 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d724:	4293      	cmp	r3, r2
 800d726:	f000 8083 	beq.w	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d72a:	4a4a      	ldr	r2, [pc, #296]	; (800d854 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d87c      	bhi.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d730:	4a49      	ldr	r2, [pc, #292]	; (800d858 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d07c      	beq.n	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d736:	4a48      	ldr	r2, [pc, #288]	; (800d858 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d876      	bhi.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d73c:	4a47      	ldr	r2, [pc, #284]	; (800d85c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d076      	beq.n	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d742:	4a46      	ldr	r2, [pc, #280]	; (800d85c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d870      	bhi.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d748:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d74c:	d070      	beq.n	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d74e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d752:	d86a      	bhi.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d758:	d06a      	beq.n	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d75a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d75e:	d864      	bhi.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d760:	2b70      	cmp	r3, #112	; 0x70
 800d762:	d01a      	beq.n	800d79a <TIM_SlaveTimer_SetConfig+0x10e>
 800d764:	2b70      	cmp	r3, #112	; 0x70
 800d766:	d860      	bhi.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d768:	2b60      	cmp	r3, #96	; 0x60
 800d76a:	d054      	beq.n	800d816 <TIM_SlaveTimer_SetConfig+0x18a>
 800d76c:	2b60      	cmp	r3, #96	; 0x60
 800d76e:	d85c      	bhi.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d770:	2b50      	cmp	r3, #80	; 0x50
 800d772:	d046      	beq.n	800d802 <TIM_SlaveTimer_SetConfig+0x176>
 800d774:	2b50      	cmp	r3, #80	; 0x50
 800d776:	d858      	bhi.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d778:	2b40      	cmp	r3, #64	; 0x40
 800d77a:	d019      	beq.n	800d7b0 <TIM_SlaveTimer_SetConfig+0x124>
 800d77c:	2b40      	cmp	r3, #64	; 0x40
 800d77e:	d854      	bhi.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d780:	2b30      	cmp	r3, #48	; 0x30
 800d782:	d055      	beq.n	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d784:	2b30      	cmp	r3, #48	; 0x30
 800d786:	d850      	bhi.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d788:	2b20      	cmp	r3, #32
 800d78a:	d051      	beq.n	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d78c:	2b20      	cmp	r3, #32
 800d78e:	d84c      	bhi.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
 800d790:	2b00      	cmp	r3, #0
 800d792:	d04d      	beq.n	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d794:	2b10      	cmp	r3, #16
 800d796:	d04b      	beq.n	800d830 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d798:	e047      	b.n	800d82a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800d7aa:	f000 fa01 	bl	800dbb0 <TIM_ETR_SetConfig>
      break;
 800d7ae:	e040      	b.n	800d832 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2b05      	cmp	r3, #5
 800d7b6:	d101      	bne.n	800d7bc <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	e03b      	b.n	800d834 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6a1b      	ldr	r3, [r3, #32]
 800d7c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6a1a      	ldr	r2, [r3, #32]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f022 0201 	bic.w	r2, r2, #1
 800d7d2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d7e2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	691b      	ldr	r3, [r3, #16]
 800d7e8:	011b      	lsls	r3, r3, #4
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	621a      	str	r2, [r3, #32]
      break;
 800d800:	e017      	b.n	800d832 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d80e:	461a      	mov	r2, r3
 800d810:	f000 f89a 	bl	800d948 <TIM_TI1_ConfigInputStage>
      break;
 800d814:	e00d      	b.n	800d832 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d822:	461a      	mov	r2, r3
 800d824:	f000 f8fc 	bl	800da20 <TIM_TI2_ConfigInputStage>
      break;
 800d828:	e003      	b.n	800d832 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800d82a:	2301      	movs	r3, #1
 800d82c:	75fb      	strb	r3, [r7, #23]
      break;
 800d82e:	e000      	b.n	800d832 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800d830:	bf00      	nop
  }

  return status;
 800d832:	7dfb      	ldrb	r3, [r7, #23]
}
 800d834:	4618      	mov	r0, r3
 800d836:	3718      	adds	r7, #24
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	ffcfff8f 	.word	0xffcfff8f
 800d840:	fffefff8 	.word	0xfffefff8
 800d844:	00200010 	.word	0x00200010
 800d848:	00100070 	.word	0x00100070
 800d84c:	00100060 	.word	0x00100060
 800d850:	00100050 	.word	0x00100050
 800d854:	00100040 	.word	0x00100040
 800d858:	00100030 	.word	0x00100030
 800d85c:	00100020 	.word	0x00100020

0800d860 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d860:	b480      	push	{r7}
 800d862:	b087      	sub	sp, #28
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6a1b      	ldr	r3, [r3, #32]
 800d872:	f023 0201 	bic.w	r2, r3, #1
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	699b      	ldr	r3, [r3, #24]
 800d87e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	6a1b      	ldr	r3, [r3, #32]
 800d884:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	4a28      	ldr	r2, [pc, #160]	; (800d92c <TIM_TI1_SetConfig+0xcc>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d01b      	beq.n	800d8c6 <TIM_TI1_SetConfig+0x66>
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d894:	d017      	beq.n	800d8c6 <TIM_TI1_SetConfig+0x66>
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	4a25      	ldr	r2, [pc, #148]	; (800d930 <TIM_TI1_SetConfig+0xd0>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d013      	beq.n	800d8c6 <TIM_TI1_SetConfig+0x66>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	4a24      	ldr	r2, [pc, #144]	; (800d934 <TIM_TI1_SetConfig+0xd4>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d00f      	beq.n	800d8c6 <TIM_TI1_SetConfig+0x66>
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	4a23      	ldr	r2, [pc, #140]	; (800d938 <TIM_TI1_SetConfig+0xd8>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d00b      	beq.n	800d8c6 <TIM_TI1_SetConfig+0x66>
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	4a22      	ldr	r2, [pc, #136]	; (800d93c <TIM_TI1_SetConfig+0xdc>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d007      	beq.n	800d8c6 <TIM_TI1_SetConfig+0x66>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	4a21      	ldr	r2, [pc, #132]	; (800d940 <TIM_TI1_SetConfig+0xe0>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d003      	beq.n	800d8c6 <TIM_TI1_SetConfig+0x66>
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	4a20      	ldr	r2, [pc, #128]	; (800d944 <TIM_TI1_SetConfig+0xe4>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d101      	bne.n	800d8ca <TIM_TI1_SetConfig+0x6a>
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e000      	b.n	800d8cc <TIM_TI1_SetConfig+0x6c>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d008      	beq.n	800d8e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	f023 0303 	bic.w	r3, r3, #3
 800d8d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d8d8:	697a      	ldr	r2, [r7, #20]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	617b      	str	r3, [r7, #20]
 800d8e0:	e003      	b.n	800d8ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	f043 0301 	orr.w	r3, r3, #1
 800d8e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	011b      	lsls	r3, r3, #4
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	697a      	ldr	r2, [r7, #20]
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	f023 030a 	bic.w	r3, r3, #10
 800d904:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	f003 030a 	and.w	r3, r3, #10
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	4313      	orrs	r3, r2
 800d910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	697a      	ldr	r2, [r7, #20]
 800d916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	693a      	ldr	r2, [r7, #16]
 800d91c:	621a      	str	r2, [r3, #32]
}
 800d91e:	bf00      	nop
 800d920:	371c      	adds	r7, #28
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	40010000 	.word	0x40010000
 800d930:	40000400 	.word	0x40000400
 800d934:	40000800 	.word	0x40000800
 800d938:	40000c00 	.word	0x40000c00
 800d93c:	40010400 	.word	0x40010400
 800d940:	40001800 	.word	0x40001800
 800d944:	40014000 	.word	0x40014000

0800d948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d948:	b480      	push	{r7}
 800d94a:	b087      	sub	sp, #28
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	6a1b      	ldr	r3, [r3, #32]
 800d958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	f023 0201 	bic.w	r2, r3, #1
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	699b      	ldr	r3, [r3, #24]
 800d96a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	011b      	lsls	r3, r3, #4
 800d978:	693a      	ldr	r2, [r7, #16]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f023 030a 	bic.w	r3, r3, #10
 800d984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	693a      	ldr	r2, [r7, #16]
 800d992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	621a      	str	r2, [r3, #32]
}
 800d99a:	bf00      	nop
 800d99c:	371c      	adds	r7, #28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr

0800d9a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	b087      	sub	sp, #28
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	60f8      	str	r0, [r7, #12]
 800d9ae:	60b9      	str	r1, [r7, #8]
 800d9b0:	607a      	str	r2, [r7, #4]
 800d9b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
 800d9b8:	f023 0210 	bic.w	r2, r3, #16
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	699b      	ldr	r3, [r3, #24]
 800d9c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6a1b      	ldr	r3, [r3, #32]
 800d9ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	021b      	lsls	r3, r3, #8
 800d9d8:	697a      	ldr	r2, [r7, #20]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	031b      	lsls	r3, r3, #12
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d9f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	011b      	lsls	r3, r3, #4
 800d9fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800da02:	693a      	ldr	r2, [r7, #16]
 800da04:	4313      	orrs	r3, r2
 800da06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	697a      	ldr	r2, [r7, #20]
 800da0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	693a      	ldr	r2, [r7, #16]
 800da12:	621a      	str	r2, [r3, #32]
}
 800da14:	bf00      	nop
 800da16:	371c      	adds	r7, #28
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da20:	b480      	push	{r7}
 800da22:	b087      	sub	sp, #28
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6a1b      	ldr	r3, [r3, #32]
 800da30:	f023 0210 	bic.w	r2, r3, #16
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	699b      	ldr	r3, [r3, #24]
 800da3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6a1b      	ldr	r3, [r3, #32]
 800da42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800da4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	031b      	lsls	r3, r3, #12
 800da50:	697a      	ldr	r2, [r7, #20]
 800da52:	4313      	orrs	r3, r2
 800da54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	011b      	lsls	r3, r3, #4
 800da62:	693a      	ldr	r2, [r7, #16]
 800da64:	4313      	orrs	r3, r2
 800da66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	621a      	str	r2, [r3, #32]
}
 800da74:	bf00      	nop
 800da76:	371c      	adds	r7, #28
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800da80:	b480      	push	{r7}
 800da82:	b087      	sub	sp, #28
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
 800da8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	69db      	ldr	r3, [r3, #28]
 800da9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	6a1b      	ldr	r3, [r3, #32]
 800daa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	f023 0303 	bic.w	r3, r3, #3
 800daac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800daae:	697a      	ldr	r2, [r7, #20]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	4313      	orrs	r3, r2
 800dab4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dabc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	011b      	lsls	r3, r3, #4
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	697a      	ldr	r2, [r7, #20]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800dad0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	021b      	lsls	r3, r3, #8
 800dad6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800dada:	693a      	ldr	r2, [r7, #16]
 800dadc:	4313      	orrs	r3, r2
 800dade:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	697a      	ldr	r2, [r7, #20]
 800dae4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	693a      	ldr	r2, [r7, #16]
 800daea:	621a      	str	r2, [r3, #32]
}
 800daec:	bf00      	nop
 800daee:	371c      	adds	r7, #28
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b087      	sub	sp, #28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
 800db04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6a1b      	ldr	r3, [r3, #32]
 800db0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	69db      	ldr	r3, [r3, #28]
 800db16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6a1b      	ldr	r3, [r3, #32]
 800db1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	021b      	lsls	r3, r3, #8
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	031b      	lsls	r3, r3, #12
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	697a      	ldr	r2, [r7, #20]
 800db40:	4313      	orrs	r3, r2
 800db42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800db4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	031b      	lsls	r3, r3, #12
 800db50:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800db54:	693a      	ldr	r2, [r7, #16]
 800db56:	4313      	orrs	r3, r2
 800db58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	697a      	ldr	r2, [r7, #20]
 800db5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	693a      	ldr	r2, [r7, #16]
 800db64:	621a      	str	r2, [r3, #32]
}
 800db66:	bf00      	nop
 800db68:	371c      	adds	r7, #28
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
	...

0800db74 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800db74:	b480      	push	{r7}
 800db76:	b085      	sub	sp, #20
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800db84:	68fa      	ldr	r2, [r7, #12]
 800db86:	4b09      	ldr	r3, [pc, #36]	; (800dbac <TIM_ITRx_SetConfig+0x38>)
 800db88:	4013      	ands	r3, r2
 800db8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	4313      	orrs	r3, r2
 800db92:	f043 0307 	orr.w	r3, r3, #7
 800db96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	609a      	str	r2, [r3, #8]
}
 800db9e:	bf00      	nop
 800dba0:	3714      	adds	r7, #20
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	ffcfff8f 	.word	0xffcfff8f

0800dbb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b087      	sub	sp, #28
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]
 800dbbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dbca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	021a      	lsls	r2, r3, #8
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	431a      	orrs	r2, r3
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	697a      	ldr	r2, [r7, #20]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	697a      	ldr	r2, [r7, #20]
 800dbe2:	609a      	str	r2, [r3, #8]
}
 800dbe4:	bf00      	nop
 800dbe6:	371c      	adds	r7, #28
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	f003 031f 	and.w	r3, r3, #31
 800dc02:	2201      	movs	r2, #1
 800dc04:	fa02 f303 	lsl.w	r3, r2, r3
 800dc08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	6a1a      	ldr	r2, [r3, #32]
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	43db      	mvns	r3, r3
 800dc12:	401a      	ands	r2, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6a1a      	ldr	r2, [r3, #32]
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	f003 031f 	and.w	r3, r3, #31
 800dc22:	6879      	ldr	r1, [r7, #4]
 800dc24:	fa01 f303 	lsl.w	r3, r1, r3
 800dc28:	431a      	orrs	r2, r3
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	621a      	str	r2, [r3, #32]
}
 800dc2e:	bf00      	nop
 800dc30:	371c      	adds	r7, #28
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
	...

0800dc3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d101      	bne.n	800dc54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc50:	2302      	movs	r3, #2
 800dc52:	e06d      	b.n	800dd30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2201      	movs	r2, #1
 800dc58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2202      	movs	r2, #2
 800dc60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	689b      	ldr	r3, [r3, #8]
 800dc72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a30      	ldr	r2, [pc, #192]	; (800dd3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d004      	beq.n	800dc88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	4a2f      	ldr	r2, [pc, #188]	; (800dd40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d108      	bne.n	800dc9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dc8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	68fa      	ldr	r2, [r7, #12]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dca0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a20      	ldr	r2, [pc, #128]	; (800dd3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d022      	beq.n	800dd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcc6:	d01d      	beq.n	800dd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a1d      	ldr	r2, [pc, #116]	; (800dd44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d018      	beq.n	800dd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a1c      	ldr	r2, [pc, #112]	; (800dd48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d013      	beq.n	800dd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a1a      	ldr	r2, [pc, #104]	; (800dd4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d00e      	beq.n	800dd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a15      	ldr	r2, [pc, #84]	; (800dd40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d009      	beq.n	800dd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a16      	ldr	r2, [pc, #88]	; (800dd50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d004      	beq.n	800dd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a15      	ldr	r2, [pc, #84]	; (800dd54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d10c      	bne.n	800dd1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	68ba      	ldr	r2, [r7, #8]
 800dd12:	4313      	orrs	r3, r2
 800dd14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	68ba      	ldr	r2, [r7, #8]
 800dd1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2201      	movs	r2, #1
 800dd22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd2e:	2300      	movs	r3, #0
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3714      	adds	r7, #20
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	40010000 	.word	0x40010000
 800dd40:	40010400 	.word	0x40010400
 800dd44:	40000400 	.word	0x40000400
 800dd48:	40000800 	.word	0x40000800
 800dd4c:	40000c00 	.word	0x40000c00
 800dd50:	40001800 	.word	0x40001800
 800dd54:	40014000 	.word	0x40014000

0800dd58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd60:	bf00      	nop
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd74:	bf00      	nop
 800dd76:	370c      	adds	r7, #12
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd88:	bf00      	nop
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d101      	bne.n	800dda6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	e042      	b.n	800de2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d106      	bne.n	800ddbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7f4 fa2f 	bl	800221c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2224      	movs	r2, #36	; 0x24
 800ddc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f022 0201 	bic.w	r2, r2, #1
 800ddd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 fce0 	bl	800e79c <UART_SetConfig>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d101      	bne.n	800dde6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dde2:	2301      	movs	r3, #1
 800dde4:	e022      	b.n	800de2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d002      	beq.n	800ddf4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f001 fa3c 	bl	800f26c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	685a      	ldr	r2, [r3, #4]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	689a      	ldr	r2, [r3, #8]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f042 0201 	orr.w	r2, r2, #1
 800de22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f001 fac3 	bl	800f3b0 <UART_CheckIdleState>
 800de2a:	4603      	mov	r3, r0
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b08a      	sub	sp, #40	; 0x28
 800de38:	af02      	add	r7, sp, #8
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	603b      	str	r3, [r7, #0]
 800de40:	4613      	mov	r3, r2
 800de42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de4a:	2b20      	cmp	r3, #32
 800de4c:	d17b      	bne.n	800df46 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <HAL_UART_Transmit+0x26>
 800de54:	88fb      	ldrh	r3, [r7, #6]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d101      	bne.n	800de5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e074      	b.n	800df48 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2200      	movs	r2, #0
 800de62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2221      	movs	r2, #33	; 0x21
 800de6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de6e:	f7f4 ff3d 	bl	8002cec <HAL_GetTick>
 800de72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	88fa      	ldrh	r2, [r7, #6]
 800de78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	88fa      	ldrh	r2, [r7, #6]
 800de80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de8c:	d108      	bne.n	800dea0 <HAL_UART_Transmit+0x6c>
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	691b      	ldr	r3, [r3, #16]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d104      	bne.n	800dea0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800de96:	2300      	movs	r3, #0
 800de98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	61bb      	str	r3, [r7, #24]
 800de9e:	e003      	b.n	800dea8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dea4:	2300      	movs	r3, #0
 800dea6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dea8:	e030      	b.n	800df0c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	9300      	str	r3, [sp, #0]
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2200      	movs	r2, #0
 800deb2:	2180      	movs	r1, #128	; 0x80
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f001 fb25 	bl	800f504 <UART_WaitOnFlagUntilTimeout>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d005      	beq.n	800decc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2220      	movs	r2, #32
 800dec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800dec8:	2303      	movs	r3, #3
 800deca:	e03d      	b.n	800df48 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d10b      	bne.n	800deea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	881b      	ldrh	r3, [r3, #0]
 800ded6:	461a      	mov	r2, r3
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dee0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	3302      	adds	r3, #2
 800dee6:	61bb      	str	r3, [r7, #24]
 800dee8:	e007      	b.n	800defa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	781a      	ldrb	r2, [r3, #0]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	3301      	adds	r3, #1
 800def8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df00:	b29b      	uxth	r3, r3
 800df02:	3b01      	subs	r3, #1
 800df04:	b29a      	uxth	r2, r3
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df12:	b29b      	uxth	r3, r3
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1c8      	bne.n	800deaa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	9300      	str	r3, [sp, #0]
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	2200      	movs	r2, #0
 800df20:	2140      	movs	r1, #64	; 0x40
 800df22:	68f8      	ldr	r0, [r7, #12]
 800df24:	f001 faee 	bl	800f504 <UART_WaitOnFlagUntilTimeout>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d005      	beq.n	800df3a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2220      	movs	r2, #32
 800df32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800df36:	2303      	movs	r3, #3
 800df38:	e006      	b.n	800df48 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2220      	movs	r2, #32
 800df3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800df42:	2300      	movs	r3, #0
 800df44:	e000      	b.n	800df48 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800df46:	2302      	movs	r3, #2
  }
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3720      	adds	r7, #32
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08a      	sub	sp, #40	; 0x28
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	4613      	mov	r3, r2
 800df5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df64:	2b20      	cmp	r3, #32
 800df66:	d137      	bne.n	800dfd8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d002      	beq.n	800df74 <HAL_UART_Receive_DMA+0x24>
 800df6e:	88fb      	ldrh	r3, [r7, #6]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d101      	bne.n	800df78 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800df74:	2301      	movs	r3, #1
 800df76:	e030      	b.n	800dfda <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2200      	movs	r2, #0
 800df7c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a18      	ldr	r2, [pc, #96]	; (800dfe4 <HAL_UART_Receive_DMA+0x94>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d01f      	beq.n	800dfc8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df92:	2b00      	cmp	r3, #0
 800df94:	d018      	beq.n	800dfc8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	e853 3f00 	ldrex	r3, [r3]
 800dfa2:	613b      	str	r3, [r7, #16]
   return(result);
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dfaa:	627b      	str	r3, [r7, #36]	; 0x24
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb4:	623b      	str	r3, [r7, #32]
 800dfb6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb8:	69f9      	ldr	r1, [r7, #28]
 800dfba:	6a3a      	ldr	r2, [r7, #32]
 800dfbc:	e841 2300 	strex	r3, r2, [r1]
 800dfc0:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfc2:	69bb      	ldr	r3, [r7, #24]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d1e6      	bne.n	800df96 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800dfc8:	88fb      	ldrh	r3, [r7, #6]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	68b9      	ldr	r1, [r7, #8]
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f001 fb00 	bl	800f5d4 <UART_Start_Receive_DMA>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	e000      	b.n	800dfda <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dfd8:	2302      	movs	r3, #2
  }
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3728      	adds	r7, #40	; 0x28
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	58000c00 	.word	0x58000c00

0800dfe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b0ba      	sub	sp, #232	; 0xe8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	69db      	ldr	r3, [r3, #28]
 800dff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e00e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e012:	f640 030f 	movw	r3, #2063	; 0x80f
 800e016:	4013      	ands	r3, r2
 800e018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e01c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e020:	2b00      	cmp	r3, #0
 800e022:	d11b      	bne.n	800e05c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e028:	f003 0320 	and.w	r3, r3, #32
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d015      	beq.n	800e05c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e034:	f003 0320 	and.w	r3, r3, #32
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d105      	bne.n	800e048 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e03c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e044:	2b00      	cmp	r3, #0
 800e046:	d009      	beq.n	800e05c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	f000 8377 	beq.w	800e740 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	4798      	blx	r3
      }
      return;
 800e05a:	e371      	b.n	800e740 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e05c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e060:	2b00      	cmp	r3, #0
 800e062:	f000 8123 	beq.w	800e2ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e066:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e06a:	4b8d      	ldr	r3, [pc, #564]	; (800e2a0 <HAL_UART_IRQHandler+0x2b8>)
 800e06c:	4013      	ands	r3, r2
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d106      	bne.n	800e080 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e072:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e076:	4b8b      	ldr	r3, [pc, #556]	; (800e2a4 <HAL_UART_IRQHandler+0x2bc>)
 800e078:	4013      	ands	r3, r2
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 8116 	beq.w	800e2ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e084:	f003 0301 	and.w	r3, r3, #1
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d011      	beq.n	800e0b0 <HAL_UART_IRQHandler+0xc8>
 800e08c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e094:	2b00      	cmp	r3, #0
 800e096:	d00b      	beq.n	800e0b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2201      	movs	r2, #1
 800e09e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0a6:	f043 0201 	orr.w	r2, r3, #1
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0b4:	f003 0302 	and.w	r3, r3, #2
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d011      	beq.n	800e0e0 <HAL_UART_IRQHandler+0xf8>
 800e0bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0c0:	f003 0301 	and.w	r3, r3, #1
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00b      	beq.n	800e0e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2202      	movs	r2, #2
 800e0ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0d6:	f043 0204 	orr.w	r2, r3, #4
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0e4:	f003 0304 	and.w	r3, r3, #4
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d011      	beq.n	800e110 <HAL_UART_IRQHandler+0x128>
 800e0ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0f0:	f003 0301 	and.w	r3, r3, #1
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d00b      	beq.n	800e110 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2204      	movs	r2, #4
 800e0fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e106:	f043 0202 	orr.w	r2, r3, #2
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e114:	f003 0308 	and.w	r3, r3, #8
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d017      	beq.n	800e14c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e120:	f003 0320 	and.w	r3, r3, #32
 800e124:	2b00      	cmp	r3, #0
 800e126:	d105      	bne.n	800e134 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e128:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e12c:	4b5c      	ldr	r3, [pc, #368]	; (800e2a0 <HAL_UART_IRQHandler+0x2b8>)
 800e12e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00b      	beq.n	800e14c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2208      	movs	r2, #8
 800e13a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e142:	f043 0208 	orr.w	r2, r3, #8
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e154:	2b00      	cmp	r3, #0
 800e156:	d012      	beq.n	800e17e <HAL_UART_IRQHandler+0x196>
 800e158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e15c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00c      	beq.n	800e17e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e16c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e174:	f043 0220 	orr.w	r2, r3, #32
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e184:	2b00      	cmp	r3, #0
 800e186:	f000 82dd 	beq.w	800e744 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e18e:	f003 0320 	and.w	r3, r3, #32
 800e192:	2b00      	cmp	r3, #0
 800e194:	d013      	beq.n	800e1be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e19a:	f003 0320 	and.w	r3, r3, #32
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d105      	bne.n	800e1ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d007      	beq.n	800e1be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d003      	beq.n	800e1be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1d2:	2b40      	cmp	r3, #64	; 0x40
 800e1d4:	d005      	beq.n	800e1e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e1d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d054      	beq.n	800e28c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f001 fade 	bl	800f7a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f2:	2b40      	cmp	r3, #64	; 0x40
 800e1f4:	d146      	bne.n	800e284 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3308      	adds	r3, #8
 800e1fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e204:	e853 3f00 	ldrex	r3, [r3]
 800e208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e20c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	3308      	adds	r3, #8
 800e21e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e222:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e22a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e22e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e232:	e841 2300 	strex	r3, r2, [r1]
 800e236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e23a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1d9      	bne.n	800e1f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d017      	beq.n	800e27c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e252:	4a15      	ldr	r2, [pc, #84]	; (800e2a8 <HAL_UART_IRQHandler+0x2c0>)
 800e254:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7f7 fcf5 	bl	8005c4c <HAL_DMA_Abort_IT>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d019      	beq.n	800e29c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e26e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e276:	4610      	mov	r0, r2
 800e278:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e27a:	e00f      	b.n	800e29c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f7f3 f96f 	bl	8001560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e282:	e00b      	b.n	800e29c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7f3 f96b 	bl	8001560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e28a:	e007      	b.n	800e29c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f7f3 f967 	bl	8001560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e29a:	e253      	b.n	800e744 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e29c:	bf00      	nop
    return;
 800e29e:	e251      	b.n	800e744 <HAL_UART_IRQHandler+0x75c>
 800e2a0:	10000001 	.word	0x10000001
 800e2a4:	04000120 	.word	0x04000120
 800e2a8:	0800fa57 	.word	0x0800fa57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	f040 81e7 	bne.w	800e684 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e2b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ba:	f003 0310 	and.w	r3, r3, #16
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	f000 81e0 	beq.w	800e684 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2c8:	f003 0310 	and.w	r3, r3, #16
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f000 81d9 	beq.w	800e684 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2210      	movs	r2, #16
 800e2d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2e4:	2b40      	cmp	r3, #64	; 0x40
 800e2e6:	f040 8151 	bne.w	800e58c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4a96      	ldr	r2, [pc, #600]	; (800e54c <HAL_UART_IRQHandler+0x564>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d068      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a93      	ldr	r2, [pc, #588]	; (800e550 <HAL_UART_IRQHandler+0x568>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d061      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	4a91      	ldr	r2, [pc, #580]	; (800e554 <HAL_UART_IRQHandler+0x56c>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d05a      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a8e      	ldr	r2, [pc, #568]	; (800e558 <HAL_UART_IRQHandler+0x570>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d053      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4a8c      	ldr	r2, [pc, #560]	; (800e55c <HAL_UART_IRQHandler+0x574>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d04c      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a89      	ldr	r2, [pc, #548]	; (800e560 <HAL_UART_IRQHandler+0x578>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d045      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4a87      	ldr	r2, [pc, #540]	; (800e564 <HAL_UART_IRQHandler+0x57c>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d03e      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a84      	ldr	r2, [pc, #528]	; (800e568 <HAL_UART_IRQHandler+0x580>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d037      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4a82      	ldr	r2, [pc, #520]	; (800e56c <HAL_UART_IRQHandler+0x584>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d030      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a7f      	ldr	r2, [pc, #508]	; (800e570 <HAL_UART_IRQHandler+0x588>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d029      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a7d      	ldr	r2, [pc, #500]	; (800e574 <HAL_UART_IRQHandler+0x58c>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d022      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a7a      	ldr	r2, [pc, #488]	; (800e578 <HAL_UART_IRQHandler+0x590>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d01b      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a78      	ldr	r2, [pc, #480]	; (800e57c <HAL_UART_IRQHandler+0x594>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d014      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a75      	ldr	r2, [pc, #468]	; (800e580 <HAL_UART_IRQHandler+0x598>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d00d      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4a73      	ldr	r2, [pc, #460]	; (800e584 <HAL_UART_IRQHandler+0x59c>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d006      	beq.n	800e3ca <HAL_UART_IRQHandler+0x3e2>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4a70      	ldr	r2, [pc, #448]	; (800e588 <HAL_UART_IRQHandler+0x5a0>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d106      	bne.n	800e3d8 <HAL_UART_IRQHandler+0x3f0>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	e005      	b.n	800e3e4 <HAL_UART_IRQHandler+0x3fc>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e3e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f000 81ab 	beq.w	800e748 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e3f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	f080 81a3 	bcs.w	800e748 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e408:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e412:	69db      	ldr	r3, [r3, #28]
 800e414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e418:	f000 8087 	beq.w	800e52a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e428:	e853 3f00 	ldrex	r3, [r3]
 800e42c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e430:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e438:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	461a      	mov	r2, r3
 800e442:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e44a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e452:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e456:	e841 2300 	strex	r3, r2, [r1]
 800e45a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e45e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e462:	2b00      	cmp	r3, #0
 800e464:	d1da      	bne.n	800e41c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	3308      	adds	r3, #8
 800e46c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e46e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e470:	e853 3f00 	ldrex	r3, [r3]
 800e474:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e478:	f023 0301 	bic.w	r3, r3, #1
 800e47c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3308      	adds	r3, #8
 800e486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e48a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e48e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e490:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e492:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e496:	e841 2300 	strex	r3, r2, [r1]
 800e49a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e49c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1e1      	bne.n	800e466 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	3308      	adds	r3, #8
 800e4a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4ac:	e853 3f00 	ldrex	r3, [r3]
 800e4b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e4b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	3308      	adds	r3, #8
 800e4c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e4c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e4c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e4cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e4ce:	e841 2300 	strex	r3, r2, [r1]
 800e4d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e4d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1e3      	bne.n	800e4a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2220      	movs	r2, #32
 800e4de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4f0:	e853 3f00 	ldrex	r3, [r3]
 800e4f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e4f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4f8:	f023 0310 	bic.w	r3, r3, #16
 800e4fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	461a      	mov	r2, r3
 800e506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e50a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e50c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e510:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e512:	e841 2300 	strex	r3, r2, [r1]
 800e516:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1e4      	bne.n	800e4e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e524:	4618      	mov	r0, r3
 800e526:	f7f7 f873 	bl	8005610 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2202      	movs	r2, #2
 800e52e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	1ad3      	subs	r3, r2, r3
 800e540:	b29b      	uxth	r3, r3
 800e542:	4619      	mov	r1, r3
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 f91d 	bl	800e784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e54a:	e0fd      	b.n	800e748 <HAL_UART_IRQHandler+0x760>
 800e54c:	40020010 	.word	0x40020010
 800e550:	40020028 	.word	0x40020028
 800e554:	40020040 	.word	0x40020040
 800e558:	40020058 	.word	0x40020058
 800e55c:	40020070 	.word	0x40020070
 800e560:	40020088 	.word	0x40020088
 800e564:	400200a0 	.word	0x400200a0
 800e568:	400200b8 	.word	0x400200b8
 800e56c:	40020410 	.word	0x40020410
 800e570:	40020428 	.word	0x40020428
 800e574:	40020440 	.word	0x40020440
 800e578:	40020458 	.word	0x40020458
 800e57c:	40020470 	.word	0x40020470
 800e580:	40020488 	.word	0x40020488
 800e584:	400204a0 	.word	0x400204a0
 800e588:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e598:	b29b      	uxth	r3, r3
 800e59a:	1ad3      	subs	r3, r2, r3
 800e59c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f000 80cf 	beq.w	800e74c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e5ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f000 80ca 	beq.w	800e74c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c0:	e853 3f00 	ldrex	r3, [r3]
 800e5c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e5cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e5da:	647b      	str	r3, [r7, #68]	; 0x44
 800e5dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e5e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5e2:	e841 2300 	strex	r3, r2, [r1]
 800e5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d1e4      	bne.n	800e5b8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	3308      	adds	r3, #8
 800e5f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f8:	e853 3f00 	ldrex	r3, [r3]
 800e5fc:	623b      	str	r3, [r7, #32]
   return(result);
 800e5fe:	6a3a      	ldr	r2, [r7, #32]
 800e600:	4b55      	ldr	r3, [pc, #340]	; (800e758 <HAL_UART_IRQHandler+0x770>)
 800e602:	4013      	ands	r3, r2
 800e604:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	3308      	adds	r3, #8
 800e60e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e612:	633a      	str	r2, [r7, #48]	; 0x30
 800e614:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e61a:	e841 2300 	strex	r3, r2, [r1]
 800e61e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e622:	2b00      	cmp	r3, #0
 800e624:	d1e3      	bne.n	800e5ee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2220      	movs	r2, #32
 800e62a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	e853 3f00 	ldrex	r3, [r3]
 800e646:	60fb      	str	r3, [r7, #12]
   return(result);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f023 0310 	bic.w	r3, r3, #16
 800e64e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	461a      	mov	r2, r3
 800e658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e65c:	61fb      	str	r3, [r7, #28]
 800e65e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e660:	69b9      	ldr	r1, [r7, #24]
 800e662:	69fa      	ldr	r2, [r7, #28]
 800e664:	e841 2300 	strex	r3, r2, [r1]
 800e668:	617b      	str	r3, [r7, #20]
   return(result);
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d1e4      	bne.n	800e63a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2202      	movs	r2, #2
 800e674:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e676:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e67a:	4619      	mov	r1, r3
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 f881 	bl	800e784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e682:	e063      	b.n	800e74c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00e      	beq.n	800e6ae <HAL_UART_IRQHandler+0x6c6>
 800e690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d008      	beq.n	800e6ae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e6a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f001 fa16 	bl	800fad8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6ac:	e051      	b.n	800e752 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d014      	beq.n	800e6e4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e6ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d105      	bne.n	800e6d2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e6c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d008      	beq.n	800e6e4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d03a      	beq.n	800e750 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	4798      	blx	r3
    }
    return;
 800e6e2:	e035      	b.n	800e750 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d009      	beq.n	800e704 <HAL_UART_IRQHandler+0x71c>
 800e6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d003      	beq.n	800e704 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f001 f9c0 	bl	800fa82 <UART_EndTransmit_IT>
    return;
 800e702:	e026      	b.n	800e752 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d009      	beq.n	800e724 <HAL_UART_IRQHandler+0x73c>
 800e710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e714:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d003      	beq.n	800e724 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f001 f9ef 	bl	800fb00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e722:	e016      	b.n	800e752 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d010      	beq.n	800e752 <HAL_UART_IRQHandler+0x76a>
 800e730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e734:	2b00      	cmp	r3, #0
 800e736:	da0c      	bge.n	800e752 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f001 f9d7 	bl	800faec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e73e:	e008      	b.n	800e752 <HAL_UART_IRQHandler+0x76a>
      return;
 800e740:	bf00      	nop
 800e742:	e006      	b.n	800e752 <HAL_UART_IRQHandler+0x76a>
    return;
 800e744:	bf00      	nop
 800e746:	e004      	b.n	800e752 <HAL_UART_IRQHandler+0x76a>
      return;
 800e748:	bf00      	nop
 800e74a:	e002      	b.n	800e752 <HAL_UART_IRQHandler+0x76a>
      return;
 800e74c:	bf00      	nop
 800e74e:	e000      	b.n	800e752 <HAL_UART_IRQHandler+0x76a>
    return;
 800e750:	bf00      	nop
  }
}
 800e752:	37e8      	adds	r7, #232	; 0xe8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	effffffe 	.word	0xeffffffe

0800e75c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e764:	bf00      	nop
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	460b      	mov	r3, r1
 800e78e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e790:	bf00      	nop
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e79c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e7a0:	b092      	sub	sp, #72	; 0x48
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	689a      	ldr	r2, [r3, #8]
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	431a      	orrs	r2, r3
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	695b      	ldr	r3, [r3, #20]
 800e7ba:	431a      	orrs	r2, r3
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	69db      	ldr	r3, [r3, #28]
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	4bbe      	ldr	r3, [pc, #760]	; (800eac4 <UART_SetConfig+0x328>)
 800e7cc:	4013      	ands	r3, r2
 800e7ce:	697a      	ldr	r2, [r7, #20]
 800e7d0:	6812      	ldr	r2, [r2, #0]
 800e7d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7d4:	430b      	orrs	r3, r1
 800e7d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	68da      	ldr	r2, [r3, #12]
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	430a      	orrs	r2, r1
 800e7ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	699b      	ldr	r3, [r3, #24]
 800e7f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4ab3      	ldr	r2, [pc, #716]	; (800eac8 <UART_SetConfig+0x32c>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d004      	beq.n	800e808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	6a1b      	ldr	r3, [r3, #32]
 800e802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e804:	4313      	orrs	r3, r2
 800e806:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	689a      	ldr	r2, [r3, #8]
 800e80e:	4baf      	ldr	r3, [pc, #700]	; (800eacc <UART_SetConfig+0x330>)
 800e810:	4013      	ands	r3, r2
 800e812:	697a      	ldr	r2, [r7, #20]
 800e814:	6812      	ldr	r2, [r2, #0]
 800e816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e818:	430b      	orrs	r3, r1
 800e81a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e822:	f023 010f 	bic.w	r1, r3, #15
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	430a      	orrs	r2, r1
 800e830:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4aa6      	ldr	r2, [pc, #664]	; (800ead0 <UART_SetConfig+0x334>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d177      	bne.n	800e92c <UART_SetConfig+0x190>
 800e83c:	4ba5      	ldr	r3, [pc, #660]	; (800ead4 <UART_SetConfig+0x338>)
 800e83e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e844:	2b28      	cmp	r3, #40	; 0x28
 800e846:	d86d      	bhi.n	800e924 <UART_SetConfig+0x188>
 800e848:	a201      	add	r2, pc, #4	; (adr r2, 800e850 <UART_SetConfig+0xb4>)
 800e84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e84e:	bf00      	nop
 800e850:	0800e8f5 	.word	0x0800e8f5
 800e854:	0800e925 	.word	0x0800e925
 800e858:	0800e925 	.word	0x0800e925
 800e85c:	0800e925 	.word	0x0800e925
 800e860:	0800e925 	.word	0x0800e925
 800e864:	0800e925 	.word	0x0800e925
 800e868:	0800e925 	.word	0x0800e925
 800e86c:	0800e925 	.word	0x0800e925
 800e870:	0800e8fd 	.word	0x0800e8fd
 800e874:	0800e925 	.word	0x0800e925
 800e878:	0800e925 	.word	0x0800e925
 800e87c:	0800e925 	.word	0x0800e925
 800e880:	0800e925 	.word	0x0800e925
 800e884:	0800e925 	.word	0x0800e925
 800e888:	0800e925 	.word	0x0800e925
 800e88c:	0800e925 	.word	0x0800e925
 800e890:	0800e905 	.word	0x0800e905
 800e894:	0800e925 	.word	0x0800e925
 800e898:	0800e925 	.word	0x0800e925
 800e89c:	0800e925 	.word	0x0800e925
 800e8a0:	0800e925 	.word	0x0800e925
 800e8a4:	0800e925 	.word	0x0800e925
 800e8a8:	0800e925 	.word	0x0800e925
 800e8ac:	0800e925 	.word	0x0800e925
 800e8b0:	0800e90d 	.word	0x0800e90d
 800e8b4:	0800e925 	.word	0x0800e925
 800e8b8:	0800e925 	.word	0x0800e925
 800e8bc:	0800e925 	.word	0x0800e925
 800e8c0:	0800e925 	.word	0x0800e925
 800e8c4:	0800e925 	.word	0x0800e925
 800e8c8:	0800e925 	.word	0x0800e925
 800e8cc:	0800e925 	.word	0x0800e925
 800e8d0:	0800e915 	.word	0x0800e915
 800e8d4:	0800e925 	.word	0x0800e925
 800e8d8:	0800e925 	.word	0x0800e925
 800e8dc:	0800e925 	.word	0x0800e925
 800e8e0:	0800e925 	.word	0x0800e925
 800e8e4:	0800e925 	.word	0x0800e925
 800e8e8:	0800e925 	.word	0x0800e925
 800e8ec:	0800e925 	.word	0x0800e925
 800e8f0:	0800e91d 	.word	0x0800e91d
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8fa:	e222      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e8fc:	2304      	movs	r3, #4
 800e8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e902:	e21e      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e904:	2308      	movs	r3, #8
 800e906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e90a:	e21a      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e90c:	2310      	movs	r3, #16
 800e90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e912:	e216      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e914:	2320      	movs	r3, #32
 800e916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e91a:	e212      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e91c:	2340      	movs	r3, #64	; 0x40
 800e91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e922:	e20e      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e924:	2380      	movs	r3, #128	; 0x80
 800e926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e92a:	e20a      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a69      	ldr	r2, [pc, #420]	; (800ead8 <UART_SetConfig+0x33c>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d130      	bne.n	800e998 <UART_SetConfig+0x1fc>
 800e936:	4b67      	ldr	r3, [pc, #412]	; (800ead4 <UART_SetConfig+0x338>)
 800e938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e93a:	f003 0307 	and.w	r3, r3, #7
 800e93e:	2b05      	cmp	r3, #5
 800e940:	d826      	bhi.n	800e990 <UART_SetConfig+0x1f4>
 800e942:	a201      	add	r2, pc, #4	; (adr r2, 800e948 <UART_SetConfig+0x1ac>)
 800e944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e948:	0800e961 	.word	0x0800e961
 800e94c:	0800e969 	.word	0x0800e969
 800e950:	0800e971 	.word	0x0800e971
 800e954:	0800e979 	.word	0x0800e979
 800e958:	0800e981 	.word	0x0800e981
 800e95c:	0800e989 	.word	0x0800e989
 800e960:	2300      	movs	r3, #0
 800e962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e966:	e1ec      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e968:	2304      	movs	r3, #4
 800e96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96e:	e1e8      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e970:	2308      	movs	r3, #8
 800e972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e976:	e1e4      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e978:	2310      	movs	r3, #16
 800e97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97e:	e1e0      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e980:	2320      	movs	r3, #32
 800e982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e986:	e1dc      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e988:	2340      	movs	r3, #64	; 0x40
 800e98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e98e:	e1d8      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e990:	2380      	movs	r3, #128	; 0x80
 800e992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e996:	e1d4      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a4f      	ldr	r2, [pc, #316]	; (800eadc <UART_SetConfig+0x340>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d130      	bne.n	800ea04 <UART_SetConfig+0x268>
 800e9a2:	4b4c      	ldr	r3, [pc, #304]	; (800ead4 <UART_SetConfig+0x338>)
 800e9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9a6:	f003 0307 	and.w	r3, r3, #7
 800e9aa:	2b05      	cmp	r3, #5
 800e9ac:	d826      	bhi.n	800e9fc <UART_SetConfig+0x260>
 800e9ae:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <UART_SetConfig+0x218>)
 800e9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b4:	0800e9cd 	.word	0x0800e9cd
 800e9b8:	0800e9d5 	.word	0x0800e9d5
 800e9bc:	0800e9dd 	.word	0x0800e9dd
 800e9c0:	0800e9e5 	.word	0x0800e9e5
 800e9c4:	0800e9ed 	.word	0x0800e9ed
 800e9c8:	0800e9f5 	.word	0x0800e9f5
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d2:	e1b6      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e9d4:	2304      	movs	r3, #4
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9da:	e1b2      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e9dc:	2308      	movs	r3, #8
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e2:	e1ae      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e9e4:	2310      	movs	r3, #16
 800e9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ea:	e1aa      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e9ec:	2320      	movs	r3, #32
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9f2:	e1a6      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e9f4:	2340      	movs	r3, #64	; 0x40
 800e9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9fa:	e1a2      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800e9fc:	2380      	movs	r3, #128	; 0x80
 800e9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea02:	e19e      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a35      	ldr	r2, [pc, #212]	; (800eae0 <UART_SetConfig+0x344>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d130      	bne.n	800ea70 <UART_SetConfig+0x2d4>
 800ea0e:	4b31      	ldr	r3, [pc, #196]	; (800ead4 <UART_SetConfig+0x338>)
 800ea10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea12:	f003 0307 	and.w	r3, r3, #7
 800ea16:	2b05      	cmp	r3, #5
 800ea18:	d826      	bhi.n	800ea68 <UART_SetConfig+0x2cc>
 800ea1a:	a201      	add	r2, pc, #4	; (adr r2, 800ea20 <UART_SetConfig+0x284>)
 800ea1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea20:	0800ea39 	.word	0x0800ea39
 800ea24:	0800ea41 	.word	0x0800ea41
 800ea28:	0800ea49 	.word	0x0800ea49
 800ea2c:	0800ea51 	.word	0x0800ea51
 800ea30:	0800ea59 	.word	0x0800ea59
 800ea34:	0800ea61 	.word	0x0800ea61
 800ea38:	2300      	movs	r3, #0
 800ea3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea3e:	e180      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ea40:	2304      	movs	r3, #4
 800ea42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea46:	e17c      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ea48:	2308      	movs	r3, #8
 800ea4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4e:	e178      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ea50:	2310      	movs	r3, #16
 800ea52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea56:	e174      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ea58:	2320      	movs	r3, #32
 800ea5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5e:	e170      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ea60:	2340      	movs	r3, #64	; 0x40
 800ea62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea66:	e16c      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ea68:	2380      	movs	r3, #128	; 0x80
 800ea6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea6e:	e168      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a1b      	ldr	r2, [pc, #108]	; (800eae4 <UART_SetConfig+0x348>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d142      	bne.n	800eb00 <UART_SetConfig+0x364>
 800ea7a:	4b16      	ldr	r3, [pc, #88]	; (800ead4 <UART_SetConfig+0x338>)
 800ea7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea7e:	f003 0307 	and.w	r3, r3, #7
 800ea82:	2b05      	cmp	r3, #5
 800ea84:	d838      	bhi.n	800eaf8 <UART_SetConfig+0x35c>
 800ea86:	a201      	add	r2, pc, #4	; (adr r2, 800ea8c <UART_SetConfig+0x2f0>)
 800ea88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea8c:	0800eaa5 	.word	0x0800eaa5
 800ea90:	0800eaad 	.word	0x0800eaad
 800ea94:	0800eab5 	.word	0x0800eab5
 800ea98:	0800eabd 	.word	0x0800eabd
 800ea9c:	0800eae9 	.word	0x0800eae9
 800eaa0:	0800eaf1 	.word	0x0800eaf1
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaaa:	e14a      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800eaac:	2304      	movs	r3, #4
 800eaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab2:	e146      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800eab4:	2308      	movs	r3, #8
 800eab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaba:	e142      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800eabc:	2310      	movs	r3, #16
 800eabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eac2:	e13e      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800eac4:	cfff69f3 	.word	0xcfff69f3
 800eac8:	58000c00 	.word	0x58000c00
 800eacc:	11fff4ff 	.word	0x11fff4ff
 800ead0:	40011000 	.word	0x40011000
 800ead4:	58024400 	.word	0x58024400
 800ead8:	40004400 	.word	0x40004400
 800eadc:	40004800 	.word	0x40004800
 800eae0:	40004c00 	.word	0x40004c00
 800eae4:	40005000 	.word	0x40005000
 800eae8:	2320      	movs	r3, #32
 800eaea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaee:	e128      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800eaf0:	2340      	movs	r3, #64	; 0x40
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaf6:	e124      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800eaf8:	2380      	movs	r3, #128	; 0x80
 800eafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eafe:	e120      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4acb      	ldr	r2, [pc, #812]	; (800ee34 <UART_SetConfig+0x698>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d176      	bne.n	800ebf8 <UART_SetConfig+0x45c>
 800eb0a:	4bcb      	ldr	r3, [pc, #812]	; (800ee38 <UART_SetConfig+0x69c>)
 800eb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb12:	2b28      	cmp	r3, #40	; 0x28
 800eb14:	d86c      	bhi.n	800ebf0 <UART_SetConfig+0x454>
 800eb16:	a201      	add	r2, pc, #4	; (adr r2, 800eb1c <UART_SetConfig+0x380>)
 800eb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb1c:	0800ebc1 	.word	0x0800ebc1
 800eb20:	0800ebf1 	.word	0x0800ebf1
 800eb24:	0800ebf1 	.word	0x0800ebf1
 800eb28:	0800ebf1 	.word	0x0800ebf1
 800eb2c:	0800ebf1 	.word	0x0800ebf1
 800eb30:	0800ebf1 	.word	0x0800ebf1
 800eb34:	0800ebf1 	.word	0x0800ebf1
 800eb38:	0800ebf1 	.word	0x0800ebf1
 800eb3c:	0800ebc9 	.word	0x0800ebc9
 800eb40:	0800ebf1 	.word	0x0800ebf1
 800eb44:	0800ebf1 	.word	0x0800ebf1
 800eb48:	0800ebf1 	.word	0x0800ebf1
 800eb4c:	0800ebf1 	.word	0x0800ebf1
 800eb50:	0800ebf1 	.word	0x0800ebf1
 800eb54:	0800ebf1 	.word	0x0800ebf1
 800eb58:	0800ebf1 	.word	0x0800ebf1
 800eb5c:	0800ebd1 	.word	0x0800ebd1
 800eb60:	0800ebf1 	.word	0x0800ebf1
 800eb64:	0800ebf1 	.word	0x0800ebf1
 800eb68:	0800ebf1 	.word	0x0800ebf1
 800eb6c:	0800ebf1 	.word	0x0800ebf1
 800eb70:	0800ebf1 	.word	0x0800ebf1
 800eb74:	0800ebf1 	.word	0x0800ebf1
 800eb78:	0800ebf1 	.word	0x0800ebf1
 800eb7c:	0800ebd9 	.word	0x0800ebd9
 800eb80:	0800ebf1 	.word	0x0800ebf1
 800eb84:	0800ebf1 	.word	0x0800ebf1
 800eb88:	0800ebf1 	.word	0x0800ebf1
 800eb8c:	0800ebf1 	.word	0x0800ebf1
 800eb90:	0800ebf1 	.word	0x0800ebf1
 800eb94:	0800ebf1 	.word	0x0800ebf1
 800eb98:	0800ebf1 	.word	0x0800ebf1
 800eb9c:	0800ebe1 	.word	0x0800ebe1
 800eba0:	0800ebf1 	.word	0x0800ebf1
 800eba4:	0800ebf1 	.word	0x0800ebf1
 800eba8:	0800ebf1 	.word	0x0800ebf1
 800ebac:	0800ebf1 	.word	0x0800ebf1
 800ebb0:	0800ebf1 	.word	0x0800ebf1
 800ebb4:	0800ebf1 	.word	0x0800ebf1
 800ebb8:	0800ebf1 	.word	0x0800ebf1
 800ebbc:	0800ebe9 	.word	0x0800ebe9
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebc6:	e0bc      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ebc8:	2304      	movs	r3, #4
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebce:	e0b8      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ebd0:	2308      	movs	r3, #8
 800ebd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd6:	e0b4      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ebd8:	2310      	movs	r3, #16
 800ebda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebde:	e0b0      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ebe0:	2320      	movs	r3, #32
 800ebe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe6:	e0ac      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ebe8:	2340      	movs	r3, #64	; 0x40
 800ebea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebee:	e0a8      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ebf0:	2380      	movs	r3, #128	; 0x80
 800ebf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebf6:	e0a4      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4a8f      	ldr	r2, [pc, #572]	; (800ee3c <UART_SetConfig+0x6a0>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d130      	bne.n	800ec64 <UART_SetConfig+0x4c8>
 800ec02:	4b8d      	ldr	r3, [pc, #564]	; (800ee38 <UART_SetConfig+0x69c>)
 800ec04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec06:	f003 0307 	and.w	r3, r3, #7
 800ec0a:	2b05      	cmp	r3, #5
 800ec0c:	d826      	bhi.n	800ec5c <UART_SetConfig+0x4c0>
 800ec0e:	a201      	add	r2, pc, #4	; (adr r2, 800ec14 <UART_SetConfig+0x478>)
 800ec10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec14:	0800ec2d 	.word	0x0800ec2d
 800ec18:	0800ec35 	.word	0x0800ec35
 800ec1c:	0800ec3d 	.word	0x0800ec3d
 800ec20:	0800ec45 	.word	0x0800ec45
 800ec24:	0800ec4d 	.word	0x0800ec4d
 800ec28:	0800ec55 	.word	0x0800ec55
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec32:	e086      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ec34:	2304      	movs	r3, #4
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3a:	e082      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ec3c:	2308      	movs	r3, #8
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec42:	e07e      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ec44:	2310      	movs	r3, #16
 800ec46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4a:	e07a      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ec4c:	2320      	movs	r3, #32
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec52:	e076      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ec54:	2340      	movs	r3, #64	; 0x40
 800ec56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec5a:	e072      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ec5c:	2380      	movs	r3, #128	; 0x80
 800ec5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec62:	e06e      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a75      	ldr	r2, [pc, #468]	; (800ee40 <UART_SetConfig+0x6a4>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d130      	bne.n	800ecd0 <UART_SetConfig+0x534>
 800ec6e:	4b72      	ldr	r3, [pc, #456]	; (800ee38 <UART_SetConfig+0x69c>)
 800ec70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec72:	f003 0307 	and.w	r3, r3, #7
 800ec76:	2b05      	cmp	r3, #5
 800ec78:	d826      	bhi.n	800ecc8 <UART_SetConfig+0x52c>
 800ec7a:	a201      	add	r2, pc, #4	; (adr r2, 800ec80 <UART_SetConfig+0x4e4>)
 800ec7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec80:	0800ec99 	.word	0x0800ec99
 800ec84:	0800eca1 	.word	0x0800eca1
 800ec88:	0800eca9 	.word	0x0800eca9
 800ec8c:	0800ecb1 	.word	0x0800ecb1
 800ec90:	0800ecb9 	.word	0x0800ecb9
 800ec94:	0800ecc1 	.word	0x0800ecc1
 800ec98:	2300      	movs	r3, #0
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9e:	e050      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800eca0:	2304      	movs	r3, #4
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca6:	e04c      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800eca8:	2308      	movs	r3, #8
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecae:	e048      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ecb0:	2310      	movs	r3, #16
 800ecb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb6:	e044      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ecb8:	2320      	movs	r3, #32
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecbe:	e040      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ecc0:	2340      	movs	r3, #64	; 0x40
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecc6:	e03c      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ecc8:	2380      	movs	r3, #128	; 0x80
 800ecca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecce:	e038      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a5b      	ldr	r2, [pc, #364]	; (800ee44 <UART_SetConfig+0x6a8>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d130      	bne.n	800ed3c <UART_SetConfig+0x5a0>
 800ecda:	4b57      	ldr	r3, [pc, #348]	; (800ee38 <UART_SetConfig+0x69c>)
 800ecdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecde:	f003 0307 	and.w	r3, r3, #7
 800ece2:	2b05      	cmp	r3, #5
 800ece4:	d826      	bhi.n	800ed34 <UART_SetConfig+0x598>
 800ece6:	a201      	add	r2, pc, #4	; (adr r2, 800ecec <UART_SetConfig+0x550>)
 800ece8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecec:	0800ed05 	.word	0x0800ed05
 800ecf0:	0800ed0d 	.word	0x0800ed0d
 800ecf4:	0800ed15 	.word	0x0800ed15
 800ecf8:	0800ed1d 	.word	0x0800ed1d
 800ecfc:	0800ed25 	.word	0x0800ed25
 800ed00:	0800ed2d 	.word	0x0800ed2d
 800ed04:	2302      	movs	r3, #2
 800ed06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed0a:	e01a      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ed0c:	2304      	movs	r3, #4
 800ed0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed12:	e016      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ed14:	2308      	movs	r3, #8
 800ed16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed1a:	e012      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ed1c:	2310      	movs	r3, #16
 800ed1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed22:	e00e      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ed24:	2320      	movs	r3, #32
 800ed26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed2a:	e00a      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ed2c:	2340      	movs	r3, #64	; 0x40
 800ed2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed32:	e006      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ed34:	2380      	movs	r3, #128	; 0x80
 800ed36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed3a:	e002      	b.n	800ed42 <UART_SetConfig+0x5a6>
 800ed3c:	2380      	movs	r3, #128	; 0x80
 800ed3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4a3f      	ldr	r2, [pc, #252]	; (800ee44 <UART_SetConfig+0x6a8>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	f040 80f8 	bne.w	800ef3e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ed4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ed52:	2b20      	cmp	r3, #32
 800ed54:	dc46      	bgt.n	800ede4 <UART_SetConfig+0x648>
 800ed56:	2b02      	cmp	r3, #2
 800ed58:	f2c0 8082 	blt.w	800ee60 <UART_SetConfig+0x6c4>
 800ed5c:	3b02      	subs	r3, #2
 800ed5e:	2b1e      	cmp	r3, #30
 800ed60:	d87e      	bhi.n	800ee60 <UART_SetConfig+0x6c4>
 800ed62:	a201      	add	r2, pc, #4	; (adr r2, 800ed68 <UART_SetConfig+0x5cc>)
 800ed64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed68:	0800edeb 	.word	0x0800edeb
 800ed6c:	0800ee61 	.word	0x0800ee61
 800ed70:	0800edf3 	.word	0x0800edf3
 800ed74:	0800ee61 	.word	0x0800ee61
 800ed78:	0800ee61 	.word	0x0800ee61
 800ed7c:	0800ee61 	.word	0x0800ee61
 800ed80:	0800ee03 	.word	0x0800ee03
 800ed84:	0800ee61 	.word	0x0800ee61
 800ed88:	0800ee61 	.word	0x0800ee61
 800ed8c:	0800ee61 	.word	0x0800ee61
 800ed90:	0800ee61 	.word	0x0800ee61
 800ed94:	0800ee61 	.word	0x0800ee61
 800ed98:	0800ee61 	.word	0x0800ee61
 800ed9c:	0800ee61 	.word	0x0800ee61
 800eda0:	0800ee13 	.word	0x0800ee13
 800eda4:	0800ee61 	.word	0x0800ee61
 800eda8:	0800ee61 	.word	0x0800ee61
 800edac:	0800ee61 	.word	0x0800ee61
 800edb0:	0800ee61 	.word	0x0800ee61
 800edb4:	0800ee61 	.word	0x0800ee61
 800edb8:	0800ee61 	.word	0x0800ee61
 800edbc:	0800ee61 	.word	0x0800ee61
 800edc0:	0800ee61 	.word	0x0800ee61
 800edc4:	0800ee61 	.word	0x0800ee61
 800edc8:	0800ee61 	.word	0x0800ee61
 800edcc:	0800ee61 	.word	0x0800ee61
 800edd0:	0800ee61 	.word	0x0800ee61
 800edd4:	0800ee61 	.word	0x0800ee61
 800edd8:	0800ee61 	.word	0x0800ee61
 800eddc:	0800ee61 	.word	0x0800ee61
 800ede0:	0800ee53 	.word	0x0800ee53
 800ede4:	2b40      	cmp	r3, #64	; 0x40
 800ede6:	d037      	beq.n	800ee58 <UART_SetConfig+0x6bc>
 800ede8:	e03a      	b.n	800ee60 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800edea:	f7fc f8ab 	bl	800af44 <HAL_RCCEx_GetD3PCLK1Freq>
 800edee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800edf0:	e03c      	b.n	800ee6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800edf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fc f8ba 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800edfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee00:	e034      	b.n	800ee6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee02:	f107 0318 	add.w	r3, r7, #24
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fc fa06 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee10:	e02c      	b.n	800ee6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee12:	4b09      	ldr	r3, [pc, #36]	; (800ee38 <UART_SetConfig+0x69c>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f003 0320 	and.w	r3, r3, #32
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d016      	beq.n	800ee4c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee1e:	4b06      	ldr	r3, [pc, #24]	; (800ee38 <UART_SetConfig+0x69c>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	08db      	lsrs	r3, r3, #3
 800ee24:	f003 0303 	and.w	r3, r3, #3
 800ee28:	4a07      	ldr	r2, [pc, #28]	; (800ee48 <UART_SetConfig+0x6ac>)
 800ee2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ee2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee30:	e01c      	b.n	800ee6c <UART_SetConfig+0x6d0>
 800ee32:	bf00      	nop
 800ee34:	40011400 	.word	0x40011400
 800ee38:	58024400 	.word	0x58024400
 800ee3c:	40007800 	.word	0x40007800
 800ee40:	40007c00 	.word	0x40007c00
 800ee44:	58000c00 	.word	0x58000c00
 800ee48:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ee4c:	4b9d      	ldr	r3, [pc, #628]	; (800f0c4 <UART_SetConfig+0x928>)
 800ee4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee50:	e00c      	b.n	800ee6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee52:	4b9d      	ldr	r3, [pc, #628]	; (800f0c8 <UART_SetConfig+0x92c>)
 800ee54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee56:	e009      	b.n	800ee6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee5e:	e005      	b.n	800ee6c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ee60:	2300      	movs	r3, #0
 800ee62:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ee64:	2301      	movs	r3, #1
 800ee66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ee6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ee6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	f000 81de 	beq.w	800f230 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee78:	4a94      	ldr	r2, [pc, #592]	; (800f0cc <UART_SetConfig+0x930>)
 800ee7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee82:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee86:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	685a      	ldr	r2, [r3, #4]
 800ee8c:	4613      	mov	r3, r2
 800ee8e:	005b      	lsls	r3, r3, #1
 800ee90:	4413      	add	r3, r2
 800ee92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d305      	bcc.n	800eea4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d903      	bls.n	800eeac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800eea4:	2301      	movs	r3, #1
 800eea6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eeaa:	e1c1      	b.n	800f230 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eeac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeae:	2200      	movs	r2, #0
 800eeb0:	60bb      	str	r3, [r7, #8]
 800eeb2:	60fa      	str	r2, [r7, #12]
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb8:	4a84      	ldr	r2, [pc, #528]	; (800f0cc <UART_SetConfig+0x930>)
 800eeba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	2200      	movs	r2, #0
 800eec2:	603b      	str	r3, [r7, #0]
 800eec4:	607a      	str	r2, [r7, #4]
 800eec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eeca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eece:	f7f1 fa5f 	bl	8000390 <__aeabi_uldivmod>
 800eed2:	4602      	mov	r2, r0
 800eed4:	460b      	mov	r3, r1
 800eed6:	4610      	mov	r0, r2
 800eed8:	4619      	mov	r1, r3
 800eeda:	f04f 0200 	mov.w	r2, #0
 800eede:	f04f 0300 	mov.w	r3, #0
 800eee2:	020b      	lsls	r3, r1, #8
 800eee4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eee8:	0202      	lsls	r2, r0, #8
 800eeea:	6979      	ldr	r1, [r7, #20]
 800eeec:	6849      	ldr	r1, [r1, #4]
 800eeee:	0849      	lsrs	r1, r1, #1
 800eef0:	2000      	movs	r0, #0
 800eef2:	460c      	mov	r4, r1
 800eef4:	4605      	mov	r5, r0
 800eef6:	eb12 0804 	adds.w	r8, r2, r4
 800eefa:	eb43 0905 	adc.w	r9, r3, r5
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	469a      	mov	sl, r3
 800ef06:	4693      	mov	fp, r2
 800ef08:	4652      	mov	r2, sl
 800ef0a:	465b      	mov	r3, fp
 800ef0c:	4640      	mov	r0, r8
 800ef0e:	4649      	mov	r1, r9
 800ef10:	f7f1 fa3e 	bl	8000390 <__aeabi_uldivmod>
 800ef14:	4602      	mov	r2, r0
 800ef16:	460b      	mov	r3, r1
 800ef18:	4613      	mov	r3, r2
 800ef1a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef22:	d308      	bcc.n	800ef36 <UART_SetConfig+0x79a>
 800ef24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef2a:	d204      	bcs.n	800ef36 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef32:	60da      	str	r2, [r3, #12]
 800ef34:	e17c      	b.n	800f230 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ef36:	2301      	movs	r3, #1
 800ef38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ef3c:	e178      	b.n	800f230 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	69db      	ldr	r3, [r3, #28]
 800ef42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef46:	f040 80c5 	bne.w	800f0d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ef4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ef4e:	2b20      	cmp	r3, #32
 800ef50:	dc48      	bgt.n	800efe4 <UART_SetConfig+0x848>
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	db7b      	blt.n	800f04e <UART_SetConfig+0x8b2>
 800ef56:	2b20      	cmp	r3, #32
 800ef58:	d879      	bhi.n	800f04e <UART_SetConfig+0x8b2>
 800ef5a:	a201      	add	r2, pc, #4	; (adr r2, 800ef60 <UART_SetConfig+0x7c4>)
 800ef5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef60:	0800efeb 	.word	0x0800efeb
 800ef64:	0800eff3 	.word	0x0800eff3
 800ef68:	0800f04f 	.word	0x0800f04f
 800ef6c:	0800f04f 	.word	0x0800f04f
 800ef70:	0800effb 	.word	0x0800effb
 800ef74:	0800f04f 	.word	0x0800f04f
 800ef78:	0800f04f 	.word	0x0800f04f
 800ef7c:	0800f04f 	.word	0x0800f04f
 800ef80:	0800f00b 	.word	0x0800f00b
 800ef84:	0800f04f 	.word	0x0800f04f
 800ef88:	0800f04f 	.word	0x0800f04f
 800ef8c:	0800f04f 	.word	0x0800f04f
 800ef90:	0800f04f 	.word	0x0800f04f
 800ef94:	0800f04f 	.word	0x0800f04f
 800ef98:	0800f04f 	.word	0x0800f04f
 800ef9c:	0800f04f 	.word	0x0800f04f
 800efa0:	0800f01b 	.word	0x0800f01b
 800efa4:	0800f04f 	.word	0x0800f04f
 800efa8:	0800f04f 	.word	0x0800f04f
 800efac:	0800f04f 	.word	0x0800f04f
 800efb0:	0800f04f 	.word	0x0800f04f
 800efb4:	0800f04f 	.word	0x0800f04f
 800efb8:	0800f04f 	.word	0x0800f04f
 800efbc:	0800f04f 	.word	0x0800f04f
 800efc0:	0800f04f 	.word	0x0800f04f
 800efc4:	0800f04f 	.word	0x0800f04f
 800efc8:	0800f04f 	.word	0x0800f04f
 800efcc:	0800f04f 	.word	0x0800f04f
 800efd0:	0800f04f 	.word	0x0800f04f
 800efd4:	0800f04f 	.word	0x0800f04f
 800efd8:	0800f04f 	.word	0x0800f04f
 800efdc:	0800f04f 	.word	0x0800f04f
 800efe0:	0800f041 	.word	0x0800f041
 800efe4:	2b40      	cmp	r3, #64	; 0x40
 800efe6:	d02e      	beq.n	800f046 <UART_SetConfig+0x8aa>
 800efe8:	e031      	b.n	800f04e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800efea:	f7f9 fff5 	bl	8008fd8 <HAL_RCC_GetPCLK1Freq>
 800efee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eff0:	e033      	b.n	800f05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eff2:	f7fa f807 	bl	8009004 <HAL_RCC_GetPCLK2Freq>
 800eff6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eff8:	e02f      	b.n	800f05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800effa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800effe:	4618      	mov	r0, r3
 800f000:	f7fb ffb6 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f008:	e027      	b.n	800f05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f00a:	f107 0318 	add.w	r3, r7, #24
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fc f902 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f018:	e01f      	b.n	800f05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f01a:	4b2d      	ldr	r3, [pc, #180]	; (800f0d0 <UART_SetConfig+0x934>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f003 0320 	and.w	r3, r3, #32
 800f022:	2b00      	cmp	r3, #0
 800f024:	d009      	beq.n	800f03a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f026:	4b2a      	ldr	r3, [pc, #168]	; (800f0d0 <UART_SetConfig+0x934>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	08db      	lsrs	r3, r3, #3
 800f02c:	f003 0303 	and.w	r3, r3, #3
 800f030:	4a24      	ldr	r2, [pc, #144]	; (800f0c4 <UART_SetConfig+0x928>)
 800f032:	fa22 f303 	lsr.w	r3, r2, r3
 800f036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f038:	e00f      	b.n	800f05a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f03a:	4b22      	ldr	r3, [pc, #136]	; (800f0c4 <UART_SetConfig+0x928>)
 800f03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f03e:	e00c      	b.n	800f05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f040:	4b21      	ldr	r3, [pc, #132]	; (800f0c8 <UART_SetConfig+0x92c>)
 800f042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f044:	e009      	b.n	800f05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f04c:	e005      	b.n	800f05a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f04e:	2300      	movs	r3, #0
 800f050:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f052:	2301      	movs	r3, #1
 800f054:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	f000 80e7 	beq.w	800f230 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f066:	4a19      	ldr	r2, [pc, #100]	; (800f0cc <UART_SetConfig+0x930>)
 800f068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f06c:	461a      	mov	r2, r3
 800f06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f070:	fbb3 f3f2 	udiv	r3, r3, r2
 800f074:	005a      	lsls	r2, r3, #1
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	085b      	lsrs	r3, r3, #1
 800f07c:	441a      	add	r2, r3
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	fbb2 f3f3 	udiv	r3, r2, r3
 800f086:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08a:	2b0f      	cmp	r3, #15
 800f08c:	d916      	bls.n	800f0bc <UART_SetConfig+0x920>
 800f08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f094:	d212      	bcs.n	800f0bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f098:	b29b      	uxth	r3, r3
 800f09a:	f023 030f 	bic.w	r3, r3, #15
 800f09e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a2:	085b      	lsrs	r3, r3, #1
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	f003 0307 	and.w	r3, r3, #7
 800f0aa:	b29a      	uxth	r2, r3
 800f0ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f0b8:	60da      	str	r2, [r3, #12]
 800f0ba:	e0b9      	b.n	800f230 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f0bc:	2301      	movs	r3, #1
 800f0be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f0c2:	e0b5      	b.n	800f230 <UART_SetConfig+0xa94>
 800f0c4:	03d09000 	.word	0x03d09000
 800f0c8:	003d0900 	.word	0x003d0900
 800f0cc:	08012aa4 	.word	0x08012aa4
 800f0d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f0d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f0d8:	2b20      	cmp	r3, #32
 800f0da:	dc49      	bgt.n	800f170 <UART_SetConfig+0x9d4>
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	db7c      	blt.n	800f1da <UART_SetConfig+0xa3e>
 800f0e0:	2b20      	cmp	r3, #32
 800f0e2:	d87a      	bhi.n	800f1da <UART_SetConfig+0xa3e>
 800f0e4:	a201      	add	r2, pc, #4	; (adr r2, 800f0ec <UART_SetConfig+0x950>)
 800f0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ea:	bf00      	nop
 800f0ec:	0800f177 	.word	0x0800f177
 800f0f0:	0800f17f 	.word	0x0800f17f
 800f0f4:	0800f1db 	.word	0x0800f1db
 800f0f8:	0800f1db 	.word	0x0800f1db
 800f0fc:	0800f187 	.word	0x0800f187
 800f100:	0800f1db 	.word	0x0800f1db
 800f104:	0800f1db 	.word	0x0800f1db
 800f108:	0800f1db 	.word	0x0800f1db
 800f10c:	0800f197 	.word	0x0800f197
 800f110:	0800f1db 	.word	0x0800f1db
 800f114:	0800f1db 	.word	0x0800f1db
 800f118:	0800f1db 	.word	0x0800f1db
 800f11c:	0800f1db 	.word	0x0800f1db
 800f120:	0800f1db 	.word	0x0800f1db
 800f124:	0800f1db 	.word	0x0800f1db
 800f128:	0800f1db 	.word	0x0800f1db
 800f12c:	0800f1a7 	.word	0x0800f1a7
 800f130:	0800f1db 	.word	0x0800f1db
 800f134:	0800f1db 	.word	0x0800f1db
 800f138:	0800f1db 	.word	0x0800f1db
 800f13c:	0800f1db 	.word	0x0800f1db
 800f140:	0800f1db 	.word	0x0800f1db
 800f144:	0800f1db 	.word	0x0800f1db
 800f148:	0800f1db 	.word	0x0800f1db
 800f14c:	0800f1db 	.word	0x0800f1db
 800f150:	0800f1db 	.word	0x0800f1db
 800f154:	0800f1db 	.word	0x0800f1db
 800f158:	0800f1db 	.word	0x0800f1db
 800f15c:	0800f1db 	.word	0x0800f1db
 800f160:	0800f1db 	.word	0x0800f1db
 800f164:	0800f1db 	.word	0x0800f1db
 800f168:	0800f1db 	.word	0x0800f1db
 800f16c:	0800f1cd 	.word	0x0800f1cd
 800f170:	2b40      	cmp	r3, #64	; 0x40
 800f172:	d02e      	beq.n	800f1d2 <UART_SetConfig+0xa36>
 800f174:	e031      	b.n	800f1da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f176:	f7f9 ff2f 	bl	8008fd8 <HAL_RCC_GetPCLK1Freq>
 800f17a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f17c:	e033      	b.n	800f1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f17e:	f7f9 ff41 	bl	8009004 <HAL_RCC_GetPCLK2Freq>
 800f182:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f184:	e02f      	b.n	800f1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fb fef0 	bl	800af70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f194:	e027      	b.n	800f1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f196:	f107 0318 	add.w	r3, r7, #24
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fc f83c 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1a4:	e01f      	b.n	800f1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1a6:	4b2d      	ldr	r3, [pc, #180]	; (800f25c <UART_SetConfig+0xac0>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f003 0320 	and.w	r3, r3, #32
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d009      	beq.n	800f1c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1b2:	4b2a      	ldr	r3, [pc, #168]	; (800f25c <UART_SetConfig+0xac0>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	08db      	lsrs	r3, r3, #3
 800f1b8:	f003 0303 	and.w	r3, r3, #3
 800f1bc:	4a28      	ldr	r2, [pc, #160]	; (800f260 <UART_SetConfig+0xac4>)
 800f1be:	fa22 f303 	lsr.w	r3, r2, r3
 800f1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1c4:	e00f      	b.n	800f1e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f1c6:	4b26      	ldr	r3, [pc, #152]	; (800f260 <UART_SetConfig+0xac4>)
 800f1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1ca:	e00c      	b.n	800f1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1cc:	4b25      	ldr	r3, [pc, #148]	; (800f264 <UART_SetConfig+0xac8>)
 800f1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1d0:	e009      	b.n	800f1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1d8:	e005      	b.n	800f1e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f1e4:	bf00      	nop
    }

    if (pclk != 0U)
 800f1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d021      	beq.n	800f230 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f0:	4a1d      	ldr	r2, [pc, #116]	; (800f268 <UART_SetConfig+0xacc>)
 800f1f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	085b      	lsrs	r3, r3, #1
 800f204:	441a      	add	r2, r3
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f20e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f212:	2b0f      	cmp	r3, #15
 800f214:	d909      	bls.n	800f22a <UART_SetConfig+0xa8e>
 800f216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f21c:	d205      	bcs.n	800f22a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f220:	b29a      	uxth	r2, r3
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	60da      	str	r2, [r3, #12]
 800f228:	e002      	b.n	800f230 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f22a:	2301      	movs	r3, #1
 800f22c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	2201      	movs	r2, #1
 800f234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	2201      	movs	r2, #1
 800f23c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	2200      	movs	r2, #0
 800f244:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	2200      	movs	r2, #0
 800f24a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f24c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f250:	4618      	mov	r0, r3
 800f252:	3748      	adds	r7, #72	; 0x48
 800f254:	46bd      	mov	sp, r7
 800f256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f25a:	bf00      	nop
 800f25c:	58024400 	.word	0x58024400
 800f260:	03d09000 	.word	0x03d09000
 800f264:	003d0900 	.word	0x003d0900
 800f268:	08012aa4 	.word	0x08012aa4

0800f26c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f278:	f003 0301 	and.w	r3, r3, #1
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00a      	beq.n	800f296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	430a      	orrs	r2, r1
 800f294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f29a:	f003 0302 	and.w	r3, r3, #2
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d00a      	beq.n	800f2b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	430a      	orrs	r2, r1
 800f2b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2bc:	f003 0304 	and.w	r3, r3, #4
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d00a      	beq.n	800f2da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	430a      	orrs	r2, r1
 800f2d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2de:	f003 0308 	and.w	r3, r3, #8
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d00a      	beq.n	800f2fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	430a      	orrs	r2, r1
 800f2fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f300:	f003 0310 	and.w	r3, r3, #16
 800f304:	2b00      	cmp	r3, #0
 800f306:	d00a      	beq.n	800f31e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	430a      	orrs	r2, r1
 800f31c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f322:	f003 0320 	and.w	r3, r3, #32
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00a      	beq.n	800f340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	430a      	orrs	r2, r1
 800f33e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d01a      	beq.n	800f382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	430a      	orrs	r2, r1
 800f360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f36a:	d10a      	bne.n	800f382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	430a      	orrs	r2, r1
 800f380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d00a      	beq.n	800f3a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	430a      	orrs	r2, r1
 800f3a2:	605a      	str	r2, [r3, #4]
  }
}
 800f3a4:	bf00      	nop
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b098      	sub	sp, #96	; 0x60
 800f3b4:	af02      	add	r7, sp, #8
 800f3b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f3c0:	f7f3 fc94 	bl	8002cec <HAL_GetTick>
 800f3c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f003 0308 	and.w	r3, r3, #8
 800f3d0:	2b08      	cmp	r3, #8
 800f3d2:	d12f      	bne.n	800f434 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3d8:	9300      	str	r3, [sp, #0]
 800f3da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 f88e 	bl	800f504 <UART_WaitOnFlagUntilTimeout>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d022      	beq.n	800f434 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f6:	e853 3f00 	ldrex	r3, [r3]
 800f3fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f402:	653b      	str	r3, [r7, #80]	; 0x50
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	461a      	mov	r2, r3
 800f40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f40c:	647b      	str	r3, [r7, #68]	; 0x44
 800f40e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f410:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f414:	e841 2300 	strex	r3, r2, [r1]
 800f418:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d1e6      	bne.n	800f3ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2220      	movs	r2, #32
 800f424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f430:	2303      	movs	r3, #3
 800f432:	e063      	b.n	800f4fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f003 0304 	and.w	r3, r3, #4
 800f43e:	2b04      	cmp	r3, #4
 800f440:	d149      	bne.n	800f4d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f442:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f44a:	2200      	movs	r2, #0
 800f44c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f000 f857 	bl	800f504 <UART_WaitOnFlagUntilTimeout>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d03c      	beq.n	800f4d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f464:	e853 3f00 	ldrex	r3, [r3]
 800f468:	623b      	str	r3, [r7, #32]
   return(result);
 800f46a:	6a3b      	ldr	r3, [r7, #32]
 800f46c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f470:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	461a      	mov	r2, r3
 800f478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f47a:	633b      	str	r3, [r7, #48]	; 0x30
 800f47c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f47e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f482:	e841 2300 	strex	r3, r2, [r1]
 800f486:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d1e6      	bne.n	800f45c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	3308      	adds	r3, #8
 800f494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	e853 3f00 	ldrex	r3, [r3]
 800f49c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	f023 0301 	bic.w	r3, r3, #1
 800f4a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	3308      	adds	r3, #8
 800f4ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4ae:	61fa      	str	r2, [r7, #28]
 800f4b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b2:	69b9      	ldr	r1, [r7, #24]
 800f4b4:	69fa      	ldr	r2, [r7, #28]
 800f4b6:	e841 2300 	strex	r3, r2, [r1]
 800f4ba:	617b      	str	r3, [r7, #20]
   return(result);
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d1e5      	bne.n	800f48e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2220      	movs	r2, #32
 800f4c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4d2:	2303      	movs	r3, #3
 800f4d4:	e012      	b.n	800f4fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2220      	movs	r2, #32
 800f4da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2220      	movs	r2, #32
 800f4e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f4fa:	2300      	movs	r3, #0
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3758      	adds	r7, #88	; 0x58
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	603b      	str	r3, [r7, #0]
 800f510:	4613      	mov	r3, r2
 800f512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f514:	e049      	b.n	800f5aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f51c:	d045      	beq.n	800f5aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f51e:	f7f3 fbe5 	bl	8002cec <HAL_GetTick>
 800f522:	4602      	mov	r2, r0
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	1ad3      	subs	r3, r2, r3
 800f528:	69ba      	ldr	r2, [r7, #24]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d302      	bcc.n	800f534 <UART_WaitOnFlagUntilTimeout+0x30>
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d101      	bne.n	800f538 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f534:	2303      	movs	r3, #3
 800f536:	e048      	b.n	800f5ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f003 0304 	and.w	r3, r3, #4
 800f542:	2b00      	cmp	r3, #0
 800f544:	d031      	beq.n	800f5aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	69db      	ldr	r3, [r3, #28]
 800f54c:	f003 0308 	and.w	r3, r3, #8
 800f550:	2b08      	cmp	r3, #8
 800f552:	d110      	bne.n	800f576 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	2208      	movs	r2, #8
 800f55a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f000 f921 	bl	800f7a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2208      	movs	r2, #8
 800f566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2200      	movs	r2, #0
 800f56e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f572:	2301      	movs	r3, #1
 800f574:	e029      	b.n	800f5ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	69db      	ldr	r3, [r3, #28]
 800f57c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f584:	d111      	bne.n	800f5aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f58e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f000 f907 	bl	800f7a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2220      	movs	r2, #32
 800f59a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f5a6:	2303      	movs	r3, #3
 800f5a8:	e00f      	b.n	800f5ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	69da      	ldr	r2, [r3, #28]
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	4013      	ands	r3, r2
 800f5b4:	68ba      	ldr	r2, [r7, #8]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	bf0c      	ite	eq
 800f5ba:	2301      	moveq	r3, #1
 800f5bc:	2300      	movne	r3, #0
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	79fb      	ldrb	r3, [r7, #7]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d0a6      	beq.n	800f516 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
	...

0800f5d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b096      	sub	sp, #88	; 0x58
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	4613      	mov	r3, r2
 800f5e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	88fa      	ldrh	r2, [r7, #6]
 800f5ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2222      	movs	r2, #34	; 0x22
 800f5fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f606:	2b00      	cmp	r3, #0
 800f608:	d02d      	beq.n	800f666 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f610:	4a40      	ldr	r2, [pc, #256]	; (800f714 <UART_Start_Receive_DMA+0x140>)
 800f612:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f61a:	4a3f      	ldr	r2, [pc, #252]	; (800f718 <UART_Start_Receive_DMA+0x144>)
 800f61c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f624:	4a3d      	ldr	r2, [pc, #244]	; (800f71c <UART_Start_Receive_DMA+0x148>)
 800f626:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f62e:	2200      	movs	r2, #0
 800f630:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	3324      	adds	r3, #36	; 0x24
 800f63e:	4619      	mov	r1, r3
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f644:	461a      	mov	r2, r3
 800f646:	88fb      	ldrh	r3, [r7, #6]
 800f648:	f7f5 fd78 	bl	800513c <HAL_DMA_Start_IT>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d009      	beq.n	800f666 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2210      	movs	r2, #16
 800f656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2220      	movs	r2, #32
 800f65e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800f662:	2301      	movs	r3, #1
 800f664:	e051      	b.n	800f70a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	691b      	ldr	r3, [r3, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d018      	beq.n	800f6a0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f676:	e853 3f00 	ldrex	r3, [r3]
 800f67a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f682:	657b      	str	r3, [r7, #84]	; 0x54
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	461a      	mov	r2, r3
 800f68a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f68c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f68e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f690:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f694:	e841 2300 	strex	r3, r2, [r1]
 800f698:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f69a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1e6      	bne.n	800f66e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	3308      	adds	r3, #8
 800f6a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6aa:	e853 3f00 	ldrex	r3, [r3]
 800f6ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b2:	f043 0301 	orr.w	r3, r3, #1
 800f6b6:	653b      	str	r3, [r7, #80]	; 0x50
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	3308      	adds	r3, #8
 800f6be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f6c0:	637a      	str	r2, [r7, #52]	; 0x34
 800f6c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f6c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6c8:	e841 2300 	strex	r3, r2, [r1]
 800f6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1e5      	bne.n	800f6a0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	3308      	adds	r3, #8
 800f6da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	e853 3f00 	ldrex	r3, [r3]
 800f6e2:	613b      	str	r3, [r7, #16]
   return(result);
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	3308      	adds	r3, #8
 800f6f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6f4:	623a      	str	r2, [r7, #32]
 800f6f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6f8:	69f9      	ldr	r1, [r7, #28]
 800f6fa:	6a3a      	ldr	r2, [r7, #32]
 800f6fc:	e841 2300 	strex	r3, r2, [r1]
 800f700:	61bb      	str	r3, [r7, #24]
   return(result);
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1e5      	bne.n	800f6d4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f708:	2300      	movs	r3, #0
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3758      	adds	r7, #88	; 0x58
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	0800f871 	.word	0x0800f871
 800f718:	0800f999 	.word	0x0800f999
 800f71c:	0800f9d7 	.word	0x0800f9d7

0800f720 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f720:	b480      	push	{r7}
 800f722:	b08f      	sub	sp, #60	; 0x3c
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f72e:	6a3b      	ldr	r3, [r7, #32]
 800f730:	e853 3f00 	ldrex	r3, [r3]
 800f734:	61fb      	str	r3, [r7, #28]
   return(result);
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f73c:	637b      	str	r3, [r7, #52]	; 0x34
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	461a      	mov	r2, r3
 800f744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f746:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f748:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f74a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f74c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f74e:	e841 2300 	strex	r3, r2, [r1]
 800f752:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f756:	2b00      	cmp	r3, #0
 800f758:	d1e6      	bne.n	800f728 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	3308      	adds	r3, #8
 800f760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	e853 3f00 	ldrex	r3, [r3]
 800f768:	60bb      	str	r3, [r7, #8]
   return(result);
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f770:	633b      	str	r3, [r7, #48]	; 0x30
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	3308      	adds	r3, #8
 800f778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f77a:	61ba      	str	r2, [r7, #24]
 800f77c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f77e:	6979      	ldr	r1, [r7, #20]
 800f780:	69ba      	ldr	r2, [r7, #24]
 800f782:	e841 2300 	strex	r3, r2, [r1]
 800f786:	613b      	str	r3, [r7, #16]
   return(result);
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d1e5      	bne.n	800f75a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2220      	movs	r2, #32
 800f792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f796:	bf00      	nop
 800f798:	373c      	adds	r7, #60	; 0x3c
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
	...

0800f7a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b095      	sub	sp, #84	; 0x54
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7b4:	e853 3f00 	ldrex	r3, [r3]
 800f7b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f7c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ca:	643b      	str	r3, [r7, #64]	; 0x40
 800f7cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f7d2:	e841 2300 	strex	r3, r2, [r1]
 800f7d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d1e6      	bne.n	800f7ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	3308      	adds	r3, #8
 800f7e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e6:	6a3b      	ldr	r3, [r7, #32]
 800f7e8:	e853 3f00 	ldrex	r3, [r3]
 800f7ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7ee:	69fa      	ldr	r2, [r7, #28]
 800f7f0:	4b1e      	ldr	r3, [pc, #120]	; (800f86c <UART_EndRxTransfer+0xc8>)
 800f7f2:	4013      	ands	r3, r2
 800f7f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	3308      	adds	r3, #8
 800f7fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f806:	e841 2300 	strex	r3, r2, [r1]
 800f80a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1e5      	bne.n	800f7de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f816:	2b01      	cmp	r3, #1
 800f818:	d118      	bne.n	800f84c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	e853 3f00 	ldrex	r3, [r3]
 800f826:	60bb      	str	r3, [r7, #8]
   return(result);
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	f023 0310 	bic.w	r3, r3, #16
 800f82e:	647b      	str	r3, [r7, #68]	; 0x44
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	461a      	mov	r2, r3
 800f836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f838:	61bb      	str	r3, [r7, #24]
 800f83a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f83c:	6979      	ldr	r1, [r7, #20]
 800f83e:	69ba      	ldr	r2, [r7, #24]
 800f840:	e841 2300 	strex	r3, r2, [r1]
 800f844:	613b      	str	r3, [r7, #16]
   return(result);
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d1e6      	bne.n	800f81a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2220      	movs	r2, #32
 800f850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2200      	movs	r2, #0
 800f85e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f860:	bf00      	nop
 800f862:	3754      	adds	r7, #84	; 0x54
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr
 800f86c:	effffffe 	.word	0xeffffffe

0800f870 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b09c      	sub	sp, #112	; 0x70
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f87c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	69db      	ldr	r3, [r3, #28]
 800f882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f886:	d071      	beq.n	800f96c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f88a:	2200      	movs	r2, #0
 800f88c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f898:	e853 3f00 	ldrex	r3, [r3]
 800f89c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f89e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800f8a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f8ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800f8b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f8b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8b6:	e841 2300 	strex	r3, r2, [r1]
 800f8ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1e6      	bne.n	800f890 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	3308      	adds	r3, #8
 800f8c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8cc:	e853 3f00 	ldrex	r3, [r3]
 800f8d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8d4:	f023 0301 	bic.w	r3, r3, #1
 800f8d8:	667b      	str	r3, [r7, #100]	; 0x64
 800f8da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	3308      	adds	r3, #8
 800f8e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f8e2:	647a      	str	r2, [r7, #68]	; 0x44
 800f8e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8ea:	e841 2300 	strex	r3, r2, [r1]
 800f8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1e5      	bne.n	800f8c2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	3308      	adds	r3, #8
 800f8fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f900:	e853 3f00 	ldrex	r3, [r3]
 800f904:	623b      	str	r3, [r7, #32]
   return(result);
 800f906:	6a3b      	ldr	r3, [r7, #32]
 800f908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f90c:	663b      	str	r3, [r7, #96]	; 0x60
 800f90e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3308      	adds	r3, #8
 800f914:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f916:	633a      	str	r2, [r7, #48]	; 0x30
 800f918:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f91a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f91e:	e841 2300 	strex	r3, r2, [r1]
 800f922:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f926:	2b00      	cmp	r3, #0
 800f928:	d1e5      	bne.n	800f8f6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f92a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f92c:	2220      	movs	r2, #32
 800f92e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f936:	2b01      	cmp	r3, #1
 800f938:	d118      	bne.n	800f96c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f93a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	e853 3f00 	ldrex	r3, [r3]
 800f946:	60fb      	str	r3, [r7, #12]
   return(result);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f023 0310 	bic.w	r3, r3, #16
 800f94e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	461a      	mov	r2, r3
 800f956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f958:	61fb      	str	r3, [r7, #28]
 800f95a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f95c:	69b9      	ldr	r1, [r7, #24]
 800f95e:	69fa      	ldr	r2, [r7, #28]
 800f960:	e841 2300 	strex	r3, r2, [r1]
 800f964:	617b      	str	r3, [r7, #20]
   return(result);
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d1e6      	bne.n	800f93a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f96c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f96e:	2200      	movs	r2, #0
 800f970:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f976:	2b01      	cmp	r3, #1
 800f978:	d107      	bne.n	800f98a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f97a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f97c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f980:	4619      	mov	r1, r3
 800f982:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f984:	f7fe fefe 	bl	800e784 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f988:	e002      	b.n	800f990 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f98a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f98c:	f7f1 fd4a 	bl	8001424 <HAL_UART_RxCpltCallback>
}
 800f990:	bf00      	nop
 800f992:	3770      	adds	r7, #112	; 0x70
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	d109      	bne.n	800f9c8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9ba:	085b      	lsrs	r3, r3, #1
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	4619      	mov	r1, r3
 800f9c0:	68f8      	ldr	r0, [r7, #12]
 800f9c2:	f7fe fedf 	bl	800e784 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f9c6:	e002      	b.n	800f9ce <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f7fe fed1 	bl	800e770 <HAL_UART_RxHalfCpltCallback>
}
 800f9ce:	bf00      	nop
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b086      	sub	sp, #24
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9fe:	2b80      	cmp	r3, #128	; 0x80
 800fa00:	d109      	bne.n	800fa16 <UART_DMAError+0x40>
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	2b21      	cmp	r3, #33	; 0x21
 800fa06:	d106      	bne.n	800fa16 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fa10:	6978      	ldr	r0, [r7, #20]
 800fa12:	f7ff fe85 	bl	800f720 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	689b      	ldr	r3, [r3, #8]
 800fa1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa20:	2b40      	cmp	r3, #64	; 0x40
 800fa22:	d109      	bne.n	800fa38 <UART_DMAError+0x62>
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2b22      	cmp	r3, #34	; 0x22
 800fa28:	d106      	bne.n	800fa38 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fa32:	6978      	ldr	r0, [r7, #20]
 800fa34:	f7ff feb6 	bl	800f7a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa3e:	f043 0210 	orr.w	r2, r3, #16
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa48:	6978      	ldr	r0, [r7, #20]
 800fa4a:	f7f1 fd89 	bl	8001560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa4e:	bf00      	nop
 800fa50:	3718      	adds	r7, #24
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b084      	sub	sp, #16
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2200      	movs	r2, #0
 800fa68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f7f1 fd73 	bl	8001560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa7a:	bf00      	nop
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b088      	sub	sp, #32
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	e853 3f00 	ldrex	r3, [r3]
 800fa96:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa9e:	61fb      	str	r3, [r7, #28]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	461a      	mov	r2, r3
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	61bb      	str	r3, [r7, #24]
 800faaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faac:	6979      	ldr	r1, [r7, #20]
 800faae:	69ba      	ldr	r2, [r7, #24]
 800fab0:	e841 2300 	strex	r3, r2, [r1]
 800fab4:	613b      	str	r3, [r7, #16]
   return(result);
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d1e6      	bne.n	800fa8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2220      	movs	r2, #32
 800fac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f7fe fe46 	bl	800e75c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fad0:	bf00      	nop
 800fad2:	3720      	adds	r7, #32
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fad8:	b480      	push	{r7}
 800fada:	b083      	sub	sp, #12
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fae0:	bf00      	nop
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800faf4:	bf00      	nop
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb08:	bf00      	nop
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr

0800fb14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b085      	sub	sp, #20
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d101      	bne.n	800fb2a <HAL_UARTEx_DisableFifoMode+0x16>
 800fb26:	2302      	movs	r3, #2
 800fb28:	e027      	b.n	800fb7a <HAL_UARTEx_DisableFifoMode+0x66>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2224      	movs	r2, #36	; 0x24
 800fb36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f022 0201 	bic.w	r2, r2, #1
 800fb50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fb58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2220      	movs	r2, #32
 800fb6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fb78:	2300      	movs	r3, #0
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3714      	adds	r7, #20
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr

0800fb86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b084      	sub	sp, #16
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
 800fb8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	d101      	bne.n	800fb9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fb9a:	2302      	movs	r3, #2
 800fb9c:	e02d      	b.n	800fbfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2201      	movs	r2, #1
 800fba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2224      	movs	r2, #36	; 0x24
 800fbaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f022 0201 	bic.w	r2, r2, #1
 800fbc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	689b      	ldr	r3, [r3, #8]
 800fbcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	683a      	ldr	r2, [r7, #0]
 800fbd6:	430a      	orrs	r2, r1
 800fbd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f000 f850 	bl	800fc80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2220      	movs	r2, #32
 800fbec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3710      	adds	r7, #16
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b084      	sub	sp, #16
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
 800fc0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d101      	bne.n	800fc1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc16:	2302      	movs	r3, #2
 800fc18:	e02d      	b.n	800fc76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2224      	movs	r2, #36	; 0x24
 800fc26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f022 0201 	bic.w	r2, r2, #1
 800fc40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	683a      	ldr	r2, [r7, #0]
 800fc52:	430a      	orrs	r2, r1
 800fc54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 f812 	bl	800fc80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	68fa      	ldr	r2, [r7, #12]
 800fc62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2220      	movs	r2, #32
 800fc68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fc74:	2300      	movs	r3, #0
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
	...

0800fc80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b085      	sub	sp, #20
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d108      	bne.n	800fca2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2201      	movs	r2, #1
 800fc94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fca0:	e031      	b.n	800fd06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fca2:	2310      	movs	r3, #16
 800fca4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fca6:	2310      	movs	r3, #16
 800fca8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	0e5b      	lsrs	r3, r3, #25
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	f003 0307 	and.w	r3, r3, #7
 800fcb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	0f5b      	lsrs	r3, r3, #29
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	f003 0307 	and.w	r3, r3, #7
 800fcc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fcca:	7bbb      	ldrb	r3, [r7, #14]
 800fccc:	7b3a      	ldrb	r2, [r7, #12]
 800fcce:	4911      	ldr	r1, [pc, #68]	; (800fd14 <UARTEx_SetNbDataToProcess+0x94>)
 800fcd0:	5c8a      	ldrb	r2, [r1, r2]
 800fcd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fcd6:	7b3a      	ldrb	r2, [r7, #12]
 800fcd8:	490f      	ldr	r1, [pc, #60]	; (800fd18 <UARTEx_SetNbDataToProcess+0x98>)
 800fcda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fcdc:	fb93 f3f2 	sdiv	r3, r3, r2
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fce8:	7bfb      	ldrb	r3, [r7, #15]
 800fcea:	7b7a      	ldrb	r2, [r7, #13]
 800fcec:	4909      	ldr	r1, [pc, #36]	; (800fd14 <UARTEx_SetNbDataToProcess+0x94>)
 800fcee:	5c8a      	ldrb	r2, [r1, r2]
 800fcf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fcf4:	7b7a      	ldrb	r2, [r7, #13]
 800fcf6:	4908      	ldr	r1, [pc, #32]	; (800fd18 <UARTEx_SetNbDataToProcess+0x98>)
 800fcf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fcfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fd06:	bf00      	nop
 800fd08:	3714      	adds	r7, #20
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr
 800fd12:	bf00      	nop
 800fd14:	08012abc 	.word	0x08012abc
 800fd18:	08012ac4 	.word	0x08012ac4

0800fd1c <__cvt>:
 800fd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd1e:	ed2d 8b02 	vpush	{d8}
 800fd22:	eeb0 8b40 	vmov.f64	d8, d0
 800fd26:	b085      	sub	sp, #20
 800fd28:	4617      	mov	r7, r2
 800fd2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fd2c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fd2e:	ee18 2a90 	vmov	r2, s17
 800fd32:	f025 0520 	bic.w	r5, r5, #32
 800fd36:	2a00      	cmp	r2, #0
 800fd38:	bfb6      	itet	lt
 800fd3a:	222d      	movlt	r2, #45	; 0x2d
 800fd3c:	2200      	movge	r2, #0
 800fd3e:	eeb1 8b40 	vneglt.f64	d8, d0
 800fd42:	2d46      	cmp	r5, #70	; 0x46
 800fd44:	460c      	mov	r4, r1
 800fd46:	701a      	strb	r2, [r3, #0]
 800fd48:	d004      	beq.n	800fd54 <__cvt+0x38>
 800fd4a:	2d45      	cmp	r5, #69	; 0x45
 800fd4c:	d100      	bne.n	800fd50 <__cvt+0x34>
 800fd4e:	3401      	adds	r4, #1
 800fd50:	2102      	movs	r1, #2
 800fd52:	e000      	b.n	800fd56 <__cvt+0x3a>
 800fd54:	2103      	movs	r1, #3
 800fd56:	ab03      	add	r3, sp, #12
 800fd58:	9301      	str	r3, [sp, #4]
 800fd5a:	ab02      	add	r3, sp, #8
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	4622      	mov	r2, r4
 800fd60:	4633      	mov	r3, r6
 800fd62:	eeb0 0b48 	vmov.f64	d0, d8
 800fd66:	f000 fe53 	bl	8010a10 <_dtoa_r>
 800fd6a:	2d47      	cmp	r5, #71	; 0x47
 800fd6c:	d101      	bne.n	800fd72 <__cvt+0x56>
 800fd6e:	07fb      	lsls	r3, r7, #31
 800fd70:	d51a      	bpl.n	800fda8 <__cvt+0x8c>
 800fd72:	2d46      	cmp	r5, #70	; 0x46
 800fd74:	eb00 0204 	add.w	r2, r0, r4
 800fd78:	d10c      	bne.n	800fd94 <__cvt+0x78>
 800fd7a:	7803      	ldrb	r3, [r0, #0]
 800fd7c:	2b30      	cmp	r3, #48	; 0x30
 800fd7e:	d107      	bne.n	800fd90 <__cvt+0x74>
 800fd80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd88:	bf1c      	itt	ne
 800fd8a:	f1c4 0401 	rsbne	r4, r4, #1
 800fd8e:	6034      	strne	r4, [r6, #0]
 800fd90:	6833      	ldr	r3, [r6, #0]
 800fd92:	441a      	add	r2, r3
 800fd94:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9c:	bf08      	it	eq
 800fd9e:	9203      	streq	r2, [sp, #12]
 800fda0:	2130      	movs	r1, #48	; 0x30
 800fda2:	9b03      	ldr	r3, [sp, #12]
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d307      	bcc.n	800fdb8 <__cvt+0x9c>
 800fda8:	9b03      	ldr	r3, [sp, #12]
 800fdaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fdac:	1a1b      	subs	r3, r3, r0
 800fdae:	6013      	str	r3, [r2, #0]
 800fdb0:	b005      	add	sp, #20
 800fdb2:	ecbd 8b02 	vpop	{d8}
 800fdb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdb8:	1c5c      	adds	r4, r3, #1
 800fdba:	9403      	str	r4, [sp, #12]
 800fdbc:	7019      	strb	r1, [r3, #0]
 800fdbe:	e7f0      	b.n	800fda2 <__cvt+0x86>

0800fdc0 <__exponent>:
 800fdc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	2900      	cmp	r1, #0
 800fdc6:	bfb8      	it	lt
 800fdc8:	4249      	neglt	r1, r1
 800fdca:	f803 2b02 	strb.w	r2, [r3], #2
 800fdce:	bfb4      	ite	lt
 800fdd0:	222d      	movlt	r2, #45	; 0x2d
 800fdd2:	222b      	movge	r2, #43	; 0x2b
 800fdd4:	2909      	cmp	r1, #9
 800fdd6:	7042      	strb	r2, [r0, #1]
 800fdd8:	dd2a      	ble.n	800fe30 <__exponent+0x70>
 800fdda:	f10d 0207 	add.w	r2, sp, #7
 800fdde:	4617      	mov	r7, r2
 800fde0:	260a      	movs	r6, #10
 800fde2:	4694      	mov	ip, r2
 800fde4:	fb91 f5f6 	sdiv	r5, r1, r6
 800fde8:	fb06 1415 	mls	r4, r6, r5, r1
 800fdec:	3430      	adds	r4, #48	; 0x30
 800fdee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800fdf2:	460c      	mov	r4, r1
 800fdf4:	2c63      	cmp	r4, #99	; 0x63
 800fdf6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800fdfa:	4629      	mov	r1, r5
 800fdfc:	dcf1      	bgt.n	800fde2 <__exponent+0x22>
 800fdfe:	3130      	adds	r1, #48	; 0x30
 800fe00:	f1ac 0402 	sub.w	r4, ip, #2
 800fe04:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fe08:	1c41      	adds	r1, r0, #1
 800fe0a:	4622      	mov	r2, r4
 800fe0c:	42ba      	cmp	r2, r7
 800fe0e:	d30a      	bcc.n	800fe26 <__exponent+0x66>
 800fe10:	f10d 0209 	add.w	r2, sp, #9
 800fe14:	eba2 020c 	sub.w	r2, r2, ip
 800fe18:	42bc      	cmp	r4, r7
 800fe1a:	bf88      	it	hi
 800fe1c:	2200      	movhi	r2, #0
 800fe1e:	4413      	add	r3, r2
 800fe20:	1a18      	subs	r0, r3, r0
 800fe22:	b003      	add	sp, #12
 800fe24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe26:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fe2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800fe2e:	e7ed      	b.n	800fe0c <__exponent+0x4c>
 800fe30:	2330      	movs	r3, #48	; 0x30
 800fe32:	3130      	adds	r1, #48	; 0x30
 800fe34:	7083      	strb	r3, [r0, #2]
 800fe36:	70c1      	strb	r1, [r0, #3]
 800fe38:	1d03      	adds	r3, r0, #4
 800fe3a:	e7f1      	b.n	800fe20 <__exponent+0x60>
 800fe3c:	0000      	movs	r0, r0
	...

0800fe40 <_printf_float>:
 800fe40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe44:	b08b      	sub	sp, #44	; 0x2c
 800fe46:	460c      	mov	r4, r1
 800fe48:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fe4c:	4616      	mov	r6, r2
 800fe4e:	461f      	mov	r7, r3
 800fe50:	4605      	mov	r5, r0
 800fe52:	f000 fccd 	bl	80107f0 <_localeconv_r>
 800fe56:	f8d0 b000 	ldr.w	fp, [r0]
 800fe5a:	4658      	mov	r0, fp
 800fe5c:	f7f0 fa90 	bl	8000380 <strlen>
 800fe60:	2300      	movs	r3, #0
 800fe62:	9308      	str	r3, [sp, #32]
 800fe64:	f8d8 3000 	ldr.w	r3, [r8]
 800fe68:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fe6c:	6822      	ldr	r2, [r4, #0]
 800fe6e:	3307      	adds	r3, #7
 800fe70:	f023 0307 	bic.w	r3, r3, #7
 800fe74:	f103 0108 	add.w	r1, r3, #8
 800fe78:	f8c8 1000 	str.w	r1, [r8]
 800fe7c:	ed93 0b00 	vldr	d0, [r3]
 800fe80:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80100e0 <_printf_float+0x2a0>
 800fe84:	eeb0 7bc0 	vabs.f64	d7, d0
 800fe88:	eeb4 7b46 	vcmp.f64	d7, d6
 800fe8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe90:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800fe94:	4682      	mov	sl, r0
 800fe96:	dd24      	ble.n	800fee2 <_printf_float+0xa2>
 800fe98:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fe9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea0:	d502      	bpl.n	800fea8 <_printf_float+0x68>
 800fea2:	232d      	movs	r3, #45	; 0x2d
 800fea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fea8:	498f      	ldr	r1, [pc, #572]	; (80100e8 <_printf_float+0x2a8>)
 800feaa:	4b90      	ldr	r3, [pc, #576]	; (80100ec <_printf_float+0x2ac>)
 800feac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800feb0:	bf94      	ite	ls
 800feb2:	4688      	movls	r8, r1
 800feb4:	4698      	movhi	r8, r3
 800feb6:	2303      	movs	r3, #3
 800feb8:	6123      	str	r3, [r4, #16]
 800feba:	f022 0204 	bic.w	r2, r2, #4
 800febe:	2300      	movs	r3, #0
 800fec0:	6022      	str	r2, [r4, #0]
 800fec2:	9304      	str	r3, [sp, #16]
 800fec4:	9700      	str	r7, [sp, #0]
 800fec6:	4633      	mov	r3, r6
 800fec8:	aa09      	add	r2, sp, #36	; 0x24
 800feca:	4621      	mov	r1, r4
 800fecc:	4628      	mov	r0, r5
 800fece:	f000 f9d1 	bl	8010274 <_printf_common>
 800fed2:	3001      	adds	r0, #1
 800fed4:	f040 808a 	bne.w	800ffec <_printf_float+0x1ac>
 800fed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fedc:	b00b      	add	sp, #44	; 0x2c
 800fede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee2:	eeb4 0b40 	vcmp.f64	d0, d0
 800fee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feea:	d709      	bvc.n	800ff00 <_printf_float+0xc0>
 800feec:	ee10 3a90 	vmov	r3, s1
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	bfbc      	itt	lt
 800fef4:	232d      	movlt	r3, #45	; 0x2d
 800fef6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fefa:	497d      	ldr	r1, [pc, #500]	; (80100f0 <_printf_float+0x2b0>)
 800fefc:	4b7d      	ldr	r3, [pc, #500]	; (80100f4 <_printf_float+0x2b4>)
 800fefe:	e7d5      	b.n	800feac <_printf_float+0x6c>
 800ff00:	6863      	ldr	r3, [r4, #4]
 800ff02:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ff06:	9104      	str	r1, [sp, #16]
 800ff08:	1c59      	adds	r1, r3, #1
 800ff0a:	d13c      	bne.n	800ff86 <_printf_float+0x146>
 800ff0c:	2306      	movs	r3, #6
 800ff0e:	6063      	str	r3, [r4, #4]
 800ff10:	2300      	movs	r3, #0
 800ff12:	9303      	str	r3, [sp, #12]
 800ff14:	ab08      	add	r3, sp, #32
 800ff16:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ff1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ff1e:	ab07      	add	r3, sp, #28
 800ff20:	6861      	ldr	r1, [r4, #4]
 800ff22:	9300      	str	r3, [sp, #0]
 800ff24:	6022      	str	r2, [r4, #0]
 800ff26:	f10d 031b 	add.w	r3, sp, #27
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	f7ff fef6 	bl	800fd1c <__cvt>
 800ff30:	9b04      	ldr	r3, [sp, #16]
 800ff32:	9907      	ldr	r1, [sp, #28]
 800ff34:	2b47      	cmp	r3, #71	; 0x47
 800ff36:	4680      	mov	r8, r0
 800ff38:	d108      	bne.n	800ff4c <_printf_float+0x10c>
 800ff3a:	1cc8      	adds	r0, r1, #3
 800ff3c:	db02      	blt.n	800ff44 <_printf_float+0x104>
 800ff3e:	6863      	ldr	r3, [r4, #4]
 800ff40:	4299      	cmp	r1, r3
 800ff42:	dd41      	ble.n	800ffc8 <_printf_float+0x188>
 800ff44:	f1a9 0902 	sub.w	r9, r9, #2
 800ff48:	fa5f f989 	uxtb.w	r9, r9
 800ff4c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ff50:	d820      	bhi.n	800ff94 <_printf_float+0x154>
 800ff52:	3901      	subs	r1, #1
 800ff54:	464a      	mov	r2, r9
 800ff56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ff5a:	9107      	str	r1, [sp, #28]
 800ff5c:	f7ff ff30 	bl	800fdc0 <__exponent>
 800ff60:	9a08      	ldr	r2, [sp, #32]
 800ff62:	9004      	str	r0, [sp, #16]
 800ff64:	1813      	adds	r3, r2, r0
 800ff66:	2a01      	cmp	r2, #1
 800ff68:	6123      	str	r3, [r4, #16]
 800ff6a:	dc02      	bgt.n	800ff72 <_printf_float+0x132>
 800ff6c:	6822      	ldr	r2, [r4, #0]
 800ff6e:	07d2      	lsls	r2, r2, #31
 800ff70:	d501      	bpl.n	800ff76 <_printf_float+0x136>
 800ff72:	3301      	adds	r3, #1
 800ff74:	6123      	str	r3, [r4, #16]
 800ff76:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d0a2      	beq.n	800fec4 <_printf_float+0x84>
 800ff7e:	232d      	movs	r3, #45	; 0x2d
 800ff80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff84:	e79e      	b.n	800fec4 <_printf_float+0x84>
 800ff86:	9904      	ldr	r1, [sp, #16]
 800ff88:	2947      	cmp	r1, #71	; 0x47
 800ff8a:	d1c1      	bne.n	800ff10 <_printf_float+0xd0>
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1bf      	bne.n	800ff10 <_printf_float+0xd0>
 800ff90:	2301      	movs	r3, #1
 800ff92:	e7bc      	b.n	800ff0e <_printf_float+0xce>
 800ff94:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ff98:	d118      	bne.n	800ffcc <_printf_float+0x18c>
 800ff9a:	2900      	cmp	r1, #0
 800ff9c:	6863      	ldr	r3, [r4, #4]
 800ff9e:	dd0b      	ble.n	800ffb8 <_printf_float+0x178>
 800ffa0:	6121      	str	r1, [r4, #16]
 800ffa2:	b913      	cbnz	r3, 800ffaa <_printf_float+0x16a>
 800ffa4:	6822      	ldr	r2, [r4, #0]
 800ffa6:	07d0      	lsls	r0, r2, #31
 800ffa8:	d502      	bpl.n	800ffb0 <_printf_float+0x170>
 800ffaa:	3301      	adds	r3, #1
 800ffac:	440b      	add	r3, r1
 800ffae:	6123      	str	r3, [r4, #16]
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	65a1      	str	r1, [r4, #88]	; 0x58
 800ffb4:	9304      	str	r3, [sp, #16]
 800ffb6:	e7de      	b.n	800ff76 <_printf_float+0x136>
 800ffb8:	b913      	cbnz	r3, 800ffc0 <_printf_float+0x180>
 800ffba:	6822      	ldr	r2, [r4, #0]
 800ffbc:	07d2      	lsls	r2, r2, #31
 800ffbe:	d501      	bpl.n	800ffc4 <_printf_float+0x184>
 800ffc0:	3302      	adds	r3, #2
 800ffc2:	e7f4      	b.n	800ffae <_printf_float+0x16e>
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	e7f2      	b.n	800ffae <_printf_float+0x16e>
 800ffc8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ffcc:	9b08      	ldr	r3, [sp, #32]
 800ffce:	4299      	cmp	r1, r3
 800ffd0:	db05      	blt.n	800ffde <_printf_float+0x19e>
 800ffd2:	6823      	ldr	r3, [r4, #0]
 800ffd4:	6121      	str	r1, [r4, #16]
 800ffd6:	07d8      	lsls	r0, r3, #31
 800ffd8:	d5ea      	bpl.n	800ffb0 <_printf_float+0x170>
 800ffda:	1c4b      	adds	r3, r1, #1
 800ffdc:	e7e7      	b.n	800ffae <_printf_float+0x16e>
 800ffde:	2900      	cmp	r1, #0
 800ffe0:	bfd4      	ite	le
 800ffe2:	f1c1 0202 	rsble	r2, r1, #2
 800ffe6:	2201      	movgt	r2, #1
 800ffe8:	4413      	add	r3, r2
 800ffea:	e7e0      	b.n	800ffae <_printf_float+0x16e>
 800ffec:	6823      	ldr	r3, [r4, #0]
 800ffee:	055a      	lsls	r2, r3, #21
 800fff0:	d407      	bmi.n	8010002 <_printf_float+0x1c2>
 800fff2:	6923      	ldr	r3, [r4, #16]
 800fff4:	4642      	mov	r2, r8
 800fff6:	4631      	mov	r1, r6
 800fff8:	4628      	mov	r0, r5
 800fffa:	47b8      	blx	r7
 800fffc:	3001      	adds	r0, #1
 800fffe:	d12a      	bne.n	8010056 <_printf_float+0x216>
 8010000:	e76a      	b.n	800fed8 <_printf_float+0x98>
 8010002:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010006:	f240 80e0 	bls.w	80101ca <_printf_float+0x38a>
 801000a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801000e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010016:	d133      	bne.n	8010080 <_printf_float+0x240>
 8010018:	4a37      	ldr	r2, [pc, #220]	; (80100f8 <_printf_float+0x2b8>)
 801001a:	2301      	movs	r3, #1
 801001c:	4631      	mov	r1, r6
 801001e:	4628      	mov	r0, r5
 8010020:	47b8      	blx	r7
 8010022:	3001      	adds	r0, #1
 8010024:	f43f af58 	beq.w	800fed8 <_printf_float+0x98>
 8010028:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801002c:	429a      	cmp	r2, r3
 801002e:	db02      	blt.n	8010036 <_printf_float+0x1f6>
 8010030:	6823      	ldr	r3, [r4, #0]
 8010032:	07d8      	lsls	r0, r3, #31
 8010034:	d50f      	bpl.n	8010056 <_printf_float+0x216>
 8010036:	4653      	mov	r3, sl
 8010038:	465a      	mov	r2, fp
 801003a:	4631      	mov	r1, r6
 801003c:	4628      	mov	r0, r5
 801003e:	47b8      	blx	r7
 8010040:	3001      	adds	r0, #1
 8010042:	f43f af49 	beq.w	800fed8 <_printf_float+0x98>
 8010046:	f04f 0800 	mov.w	r8, #0
 801004a:	f104 091a 	add.w	r9, r4, #26
 801004e:	9b08      	ldr	r3, [sp, #32]
 8010050:	3b01      	subs	r3, #1
 8010052:	4543      	cmp	r3, r8
 8010054:	dc09      	bgt.n	801006a <_printf_float+0x22a>
 8010056:	6823      	ldr	r3, [r4, #0]
 8010058:	079b      	lsls	r3, r3, #30
 801005a:	f100 8106 	bmi.w	801026a <_printf_float+0x42a>
 801005e:	68e0      	ldr	r0, [r4, #12]
 8010060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010062:	4298      	cmp	r0, r3
 8010064:	bfb8      	it	lt
 8010066:	4618      	movlt	r0, r3
 8010068:	e738      	b.n	800fedc <_printf_float+0x9c>
 801006a:	2301      	movs	r3, #1
 801006c:	464a      	mov	r2, r9
 801006e:	4631      	mov	r1, r6
 8010070:	4628      	mov	r0, r5
 8010072:	47b8      	blx	r7
 8010074:	3001      	adds	r0, #1
 8010076:	f43f af2f 	beq.w	800fed8 <_printf_float+0x98>
 801007a:	f108 0801 	add.w	r8, r8, #1
 801007e:	e7e6      	b.n	801004e <_printf_float+0x20e>
 8010080:	9b07      	ldr	r3, [sp, #28]
 8010082:	2b00      	cmp	r3, #0
 8010084:	dc3a      	bgt.n	80100fc <_printf_float+0x2bc>
 8010086:	4a1c      	ldr	r2, [pc, #112]	; (80100f8 <_printf_float+0x2b8>)
 8010088:	2301      	movs	r3, #1
 801008a:	4631      	mov	r1, r6
 801008c:	4628      	mov	r0, r5
 801008e:	47b8      	blx	r7
 8010090:	3001      	adds	r0, #1
 8010092:	f43f af21 	beq.w	800fed8 <_printf_float+0x98>
 8010096:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801009a:	4313      	orrs	r3, r2
 801009c:	d102      	bne.n	80100a4 <_printf_float+0x264>
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	07d9      	lsls	r1, r3, #31
 80100a2:	d5d8      	bpl.n	8010056 <_printf_float+0x216>
 80100a4:	4653      	mov	r3, sl
 80100a6:	465a      	mov	r2, fp
 80100a8:	4631      	mov	r1, r6
 80100aa:	4628      	mov	r0, r5
 80100ac:	47b8      	blx	r7
 80100ae:	3001      	adds	r0, #1
 80100b0:	f43f af12 	beq.w	800fed8 <_printf_float+0x98>
 80100b4:	f04f 0900 	mov.w	r9, #0
 80100b8:	f104 0a1a 	add.w	sl, r4, #26
 80100bc:	9b07      	ldr	r3, [sp, #28]
 80100be:	425b      	negs	r3, r3
 80100c0:	454b      	cmp	r3, r9
 80100c2:	dc01      	bgt.n	80100c8 <_printf_float+0x288>
 80100c4:	9b08      	ldr	r3, [sp, #32]
 80100c6:	e795      	b.n	800fff4 <_printf_float+0x1b4>
 80100c8:	2301      	movs	r3, #1
 80100ca:	4652      	mov	r2, sl
 80100cc:	4631      	mov	r1, r6
 80100ce:	4628      	mov	r0, r5
 80100d0:	47b8      	blx	r7
 80100d2:	3001      	adds	r0, #1
 80100d4:	f43f af00 	beq.w	800fed8 <_printf_float+0x98>
 80100d8:	f109 0901 	add.w	r9, r9, #1
 80100dc:	e7ee      	b.n	80100bc <_printf_float+0x27c>
 80100de:	bf00      	nop
 80100e0:	ffffffff 	.word	0xffffffff
 80100e4:	7fefffff 	.word	0x7fefffff
 80100e8:	08012acc 	.word	0x08012acc
 80100ec:	08012ad0 	.word	0x08012ad0
 80100f0:	08012ad4 	.word	0x08012ad4
 80100f4:	08012ad8 	.word	0x08012ad8
 80100f8:	08012adc 	.word	0x08012adc
 80100fc:	9a08      	ldr	r2, [sp, #32]
 80100fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010100:	429a      	cmp	r2, r3
 8010102:	bfa8      	it	ge
 8010104:	461a      	movge	r2, r3
 8010106:	2a00      	cmp	r2, #0
 8010108:	4691      	mov	r9, r2
 801010a:	dc38      	bgt.n	801017e <_printf_float+0x33e>
 801010c:	2300      	movs	r3, #0
 801010e:	9305      	str	r3, [sp, #20]
 8010110:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010114:	f104 021a 	add.w	r2, r4, #26
 8010118:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801011a:	9905      	ldr	r1, [sp, #20]
 801011c:	9304      	str	r3, [sp, #16]
 801011e:	eba3 0309 	sub.w	r3, r3, r9
 8010122:	428b      	cmp	r3, r1
 8010124:	dc33      	bgt.n	801018e <_printf_float+0x34e>
 8010126:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801012a:	429a      	cmp	r2, r3
 801012c:	db3c      	blt.n	80101a8 <_printf_float+0x368>
 801012e:	6823      	ldr	r3, [r4, #0]
 8010130:	07da      	lsls	r2, r3, #31
 8010132:	d439      	bmi.n	80101a8 <_printf_float+0x368>
 8010134:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010138:	eba2 0903 	sub.w	r9, r2, r3
 801013c:	9b04      	ldr	r3, [sp, #16]
 801013e:	1ad2      	subs	r2, r2, r3
 8010140:	4591      	cmp	r9, r2
 8010142:	bfa8      	it	ge
 8010144:	4691      	movge	r9, r2
 8010146:	f1b9 0f00 	cmp.w	r9, #0
 801014a:	dc35      	bgt.n	80101b8 <_printf_float+0x378>
 801014c:	f04f 0800 	mov.w	r8, #0
 8010150:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010154:	f104 0a1a 	add.w	sl, r4, #26
 8010158:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801015c:	1a9b      	subs	r3, r3, r2
 801015e:	eba3 0309 	sub.w	r3, r3, r9
 8010162:	4543      	cmp	r3, r8
 8010164:	f77f af77 	ble.w	8010056 <_printf_float+0x216>
 8010168:	2301      	movs	r3, #1
 801016a:	4652      	mov	r2, sl
 801016c:	4631      	mov	r1, r6
 801016e:	4628      	mov	r0, r5
 8010170:	47b8      	blx	r7
 8010172:	3001      	adds	r0, #1
 8010174:	f43f aeb0 	beq.w	800fed8 <_printf_float+0x98>
 8010178:	f108 0801 	add.w	r8, r8, #1
 801017c:	e7ec      	b.n	8010158 <_printf_float+0x318>
 801017e:	4613      	mov	r3, r2
 8010180:	4631      	mov	r1, r6
 8010182:	4642      	mov	r2, r8
 8010184:	4628      	mov	r0, r5
 8010186:	47b8      	blx	r7
 8010188:	3001      	adds	r0, #1
 801018a:	d1bf      	bne.n	801010c <_printf_float+0x2cc>
 801018c:	e6a4      	b.n	800fed8 <_printf_float+0x98>
 801018e:	2301      	movs	r3, #1
 8010190:	4631      	mov	r1, r6
 8010192:	4628      	mov	r0, r5
 8010194:	9204      	str	r2, [sp, #16]
 8010196:	47b8      	blx	r7
 8010198:	3001      	adds	r0, #1
 801019a:	f43f ae9d 	beq.w	800fed8 <_printf_float+0x98>
 801019e:	9b05      	ldr	r3, [sp, #20]
 80101a0:	9a04      	ldr	r2, [sp, #16]
 80101a2:	3301      	adds	r3, #1
 80101a4:	9305      	str	r3, [sp, #20]
 80101a6:	e7b7      	b.n	8010118 <_printf_float+0x2d8>
 80101a8:	4653      	mov	r3, sl
 80101aa:	465a      	mov	r2, fp
 80101ac:	4631      	mov	r1, r6
 80101ae:	4628      	mov	r0, r5
 80101b0:	47b8      	blx	r7
 80101b2:	3001      	adds	r0, #1
 80101b4:	d1be      	bne.n	8010134 <_printf_float+0x2f4>
 80101b6:	e68f      	b.n	800fed8 <_printf_float+0x98>
 80101b8:	9a04      	ldr	r2, [sp, #16]
 80101ba:	464b      	mov	r3, r9
 80101bc:	4442      	add	r2, r8
 80101be:	4631      	mov	r1, r6
 80101c0:	4628      	mov	r0, r5
 80101c2:	47b8      	blx	r7
 80101c4:	3001      	adds	r0, #1
 80101c6:	d1c1      	bne.n	801014c <_printf_float+0x30c>
 80101c8:	e686      	b.n	800fed8 <_printf_float+0x98>
 80101ca:	9a08      	ldr	r2, [sp, #32]
 80101cc:	2a01      	cmp	r2, #1
 80101ce:	dc01      	bgt.n	80101d4 <_printf_float+0x394>
 80101d0:	07db      	lsls	r3, r3, #31
 80101d2:	d537      	bpl.n	8010244 <_printf_float+0x404>
 80101d4:	2301      	movs	r3, #1
 80101d6:	4642      	mov	r2, r8
 80101d8:	4631      	mov	r1, r6
 80101da:	4628      	mov	r0, r5
 80101dc:	47b8      	blx	r7
 80101de:	3001      	adds	r0, #1
 80101e0:	f43f ae7a 	beq.w	800fed8 <_printf_float+0x98>
 80101e4:	4653      	mov	r3, sl
 80101e6:	465a      	mov	r2, fp
 80101e8:	4631      	mov	r1, r6
 80101ea:	4628      	mov	r0, r5
 80101ec:	47b8      	blx	r7
 80101ee:	3001      	adds	r0, #1
 80101f0:	f43f ae72 	beq.w	800fed8 <_printf_float+0x98>
 80101f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80101f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80101fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010200:	9b08      	ldr	r3, [sp, #32]
 8010202:	d01a      	beq.n	801023a <_printf_float+0x3fa>
 8010204:	3b01      	subs	r3, #1
 8010206:	f108 0201 	add.w	r2, r8, #1
 801020a:	4631      	mov	r1, r6
 801020c:	4628      	mov	r0, r5
 801020e:	47b8      	blx	r7
 8010210:	3001      	adds	r0, #1
 8010212:	d10e      	bne.n	8010232 <_printf_float+0x3f2>
 8010214:	e660      	b.n	800fed8 <_printf_float+0x98>
 8010216:	2301      	movs	r3, #1
 8010218:	464a      	mov	r2, r9
 801021a:	4631      	mov	r1, r6
 801021c:	4628      	mov	r0, r5
 801021e:	47b8      	blx	r7
 8010220:	3001      	adds	r0, #1
 8010222:	f43f ae59 	beq.w	800fed8 <_printf_float+0x98>
 8010226:	f108 0801 	add.w	r8, r8, #1
 801022a:	9b08      	ldr	r3, [sp, #32]
 801022c:	3b01      	subs	r3, #1
 801022e:	4543      	cmp	r3, r8
 8010230:	dcf1      	bgt.n	8010216 <_printf_float+0x3d6>
 8010232:	9b04      	ldr	r3, [sp, #16]
 8010234:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010238:	e6dd      	b.n	800fff6 <_printf_float+0x1b6>
 801023a:	f04f 0800 	mov.w	r8, #0
 801023e:	f104 091a 	add.w	r9, r4, #26
 8010242:	e7f2      	b.n	801022a <_printf_float+0x3ea>
 8010244:	2301      	movs	r3, #1
 8010246:	4642      	mov	r2, r8
 8010248:	e7df      	b.n	801020a <_printf_float+0x3ca>
 801024a:	2301      	movs	r3, #1
 801024c:	464a      	mov	r2, r9
 801024e:	4631      	mov	r1, r6
 8010250:	4628      	mov	r0, r5
 8010252:	47b8      	blx	r7
 8010254:	3001      	adds	r0, #1
 8010256:	f43f ae3f 	beq.w	800fed8 <_printf_float+0x98>
 801025a:	f108 0801 	add.w	r8, r8, #1
 801025e:	68e3      	ldr	r3, [r4, #12]
 8010260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010262:	1a5b      	subs	r3, r3, r1
 8010264:	4543      	cmp	r3, r8
 8010266:	dcf0      	bgt.n	801024a <_printf_float+0x40a>
 8010268:	e6f9      	b.n	801005e <_printf_float+0x21e>
 801026a:	f04f 0800 	mov.w	r8, #0
 801026e:	f104 0919 	add.w	r9, r4, #25
 8010272:	e7f4      	b.n	801025e <_printf_float+0x41e>

08010274 <_printf_common>:
 8010274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010278:	4616      	mov	r6, r2
 801027a:	4699      	mov	r9, r3
 801027c:	688a      	ldr	r2, [r1, #8]
 801027e:	690b      	ldr	r3, [r1, #16]
 8010280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010284:	4293      	cmp	r3, r2
 8010286:	bfb8      	it	lt
 8010288:	4613      	movlt	r3, r2
 801028a:	6033      	str	r3, [r6, #0]
 801028c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010290:	4607      	mov	r7, r0
 8010292:	460c      	mov	r4, r1
 8010294:	b10a      	cbz	r2, 801029a <_printf_common+0x26>
 8010296:	3301      	adds	r3, #1
 8010298:	6033      	str	r3, [r6, #0]
 801029a:	6823      	ldr	r3, [r4, #0]
 801029c:	0699      	lsls	r1, r3, #26
 801029e:	bf42      	ittt	mi
 80102a0:	6833      	ldrmi	r3, [r6, #0]
 80102a2:	3302      	addmi	r3, #2
 80102a4:	6033      	strmi	r3, [r6, #0]
 80102a6:	6825      	ldr	r5, [r4, #0]
 80102a8:	f015 0506 	ands.w	r5, r5, #6
 80102ac:	d106      	bne.n	80102bc <_printf_common+0x48>
 80102ae:	f104 0a19 	add.w	sl, r4, #25
 80102b2:	68e3      	ldr	r3, [r4, #12]
 80102b4:	6832      	ldr	r2, [r6, #0]
 80102b6:	1a9b      	subs	r3, r3, r2
 80102b8:	42ab      	cmp	r3, r5
 80102ba:	dc26      	bgt.n	801030a <_printf_common+0x96>
 80102bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80102c0:	1e13      	subs	r3, r2, #0
 80102c2:	6822      	ldr	r2, [r4, #0]
 80102c4:	bf18      	it	ne
 80102c6:	2301      	movne	r3, #1
 80102c8:	0692      	lsls	r2, r2, #26
 80102ca:	d42b      	bmi.n	8010324 <_printf_common+0xb0>
 80102cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102d0:	4649      	mov	r1, r9
 80102d2:	4638      	mov	r0, r7
 80102d4:	47c0      	blx	r8
 80102d6:	3001      	adds	r0, #1
 80102d8:	d01e      	beq.n	8010318 <_printf_common+0xa4>
 80102da:	6823      	ldr	r3, [r4, #0]
 80102dc:	6922      	ldr	r2, [r4, #16]
 80102de:	f003 0306 	and.w	r3, r3, #6
 80102e2:	2b04      	cmp	r3, #4
 80102e4:	bf02      	ittt	eq
 80102e6:	68e5      	ldreq	r5, [r4, #12]
 80102e8:	6833      	ldreq	r3, [r6, #0]
 80102ea:	1aed      	subeq	r5, r5, r3
 80102ec:	68a3      	ldr	r3, [r4, #8]
 80102ee:	bf0c      	ite	eq
 80102f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102f4:	2500      	movne	r5, #0
 80102f6:	4293      	cmp	r3, r2
 80102f8:	bfc4      	itt	gt
 80102fa:	1a9b      	subgt	r3, r3, r2
 80102fc:	18ed      	addgt	r5, r5, r3
 80102fe:	2600      	movs	r6, #0
 8010300:	341a      	adds	r4, #26
 8010302:	42b5      	cmp	r5, r6
 8010304:	d11a      	bne.n	801033c <_printf_common+0xc8>
 8010306:	2000      	movs	r0, #0
 8010308:	e008      	b.n	801031c <_printf_common+0xa8>
 801030a:	2301      	movs	r3, #1
 801030c:	4652      	mov	r2, sl
 801030e:	4649      	mov	r1, r9
 8010310:	4638      	mov	r0, r7
 8010312:	47c0      	blx	r8
 8010314:	3001      	adds	r0, #1
 8010316:	d103      	bne.n	8010320 <_printf_common+0xac>
 8010318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010320:	3501      	adds	r5, #1
 8010322:	e7c6      	b.n	80102b2 <_printf_common+0x3e>
 8010324:	18e1      	adds	r1, r4, r3
 8010326:	1c5a      	adds	r2, r3, #1
 8010328:	2030      	movs	r0, #48	; 0x30
 801032a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801032e:	4422      	add	r2, r4
 8010330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010338:	3302      	adds	r3, #2
 801033a:	e7c7      	b.n	80102cc <_printf_common+0x58>
 801033c:	2301      	movs	r3, #1
 801033e:	4622      	mov	r2, r4
 8010340:	4649      	mov	r1, r9
 8010342:	4638      	mov	r0, r7
 8010344:	47c0      	blx	r8
 8010346:	3001      	adds	r0, #1
 8010348:	d0e6      	beq.n	8010318 <_printf_common+0xa4>
 801034a:	3601      	adds	r6, #1
 801034c:	e7d9      	b.n	8010302 <_printf_common+0x8e>
	...

08010350 <_printf_i>:
 8010350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010354:	7e0f      	ldrb	r7, [r1, #24]
 8010356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010358:	2f78      	cmp	r7, #120	; 0x78
 801035a:	4691      	mov	r9, r2
 801035c:	4680      	mov	r8, r0
 801035e:	460c      	mov	r4, r1
 8010360:	469a      	mov	sl, r3
 8010362:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010366:	d807      	bhi.n	8010378 <_printf_i+0x28>
 8010368:	2f62      	cmp	r7, #98	; 0x62
 801036a:	d80a      	bhi.n	8010382 <_printf_i+0x32>
 801036c:	2f00      	cmp	r7, #0
 801036e:	f000 80d4 	beq.w	801051a <_printf_i+0x1ca>
 8010372:	2f58      	cmp	r7, #88	; 0x58
 8010374:	f000 80c0 	beq.w	80104f8 <_printf_i+0x1a8>
 8010378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801037c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010380:	e03a      	b.n	80103f8 <_printf_i+0xa8>
 8010382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010386:	2b15      	cmp	r3, #21
 8010388:	d8f6      	bhi.n	8010378 <_printf_i+0x28>
 801038a:	a101      	add	r1, pc, #4	; (adr r1, 8010390 <_printf_i+0x40>)
 801038c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010390:	080103e9 	.word	0x080103e9
 8010394:	080103fd 	.word	0x080103fd
 8010398:	08010379 	.word	0x08010379
 801039c:	08010379 	.word	0x08010379
 80103a0:	08010379 	.word	0x08010379
 80103a4:	08010379 	.word	0x08010379
 80103a8:	080103fd 	.word	0x080103fd
 80103ac:	08010379 	.word	0x08010379
 80103b0:	08010379 	.word	0x08010379
 80103b4:	08010379 	.word	0x08010379
 80103b8:	08010379 	.word	0x08010379
 80103bc:	08010501 	.word	0x08010501
 80103c0:	08010429 	.word	0x08010429
 80103c4:	080104bb 	.word	0x080104bb
 80103c8:	08010379 	.word	0x08010379
 80103cc:	08010379 	.word	0x08010379
 80103d0:	08010523 	.word	0x08010523
 80103d4:	08010379 	.word	0x08010379
 80103d8:	08010429 	.word	0x08010429
 80103dc:	08010379 	.word	0x08010379
 80103e0:	08010379 	.word	0x08010379
 80103e4:	080104c3 	.word	0x080104c3
 80103e8:	682b      	ldr	r3, [r5, #0]
 80103ea:	1d1a      	adds	r2, r3, #4
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	602a      	str	r2, [r5, #0]
 80103f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103f8:	2301      	movs	r3, #1
 80103fa:	e09f      	b.n	801053c <_printf_i+0x1ec>
 80103fc:	6820      	ldr	r0, [r4, #0]
 80103fe:	682b      	ldr	r3, [r5, #0]
 8010400:	0607      	lsls	r7, r0, #24
 8010402:	f103 0104 	add.w	r1, r3, #4
 8010406:	6029      	str	r1, [r5, #0]
 8010408:	d501      	bpl.n	801040e <_printf_i+0xbe>
 801040a:	681e      	ldr	r6, [r3, #0]
 801040c:	e003      	b.n	8010416 <_printf_i+0xc6>
 801040e:	0646      	lsls	r6, r0, #25
 8010410:	d5fb      	bpl.n	801040a <_printf_i+0xba>
 8010412:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010416:	2e00      	cmp	r6, #0
 8010418:	da03      	bge.n	8010422 <_printf_i+0xd2>
 801041a:	232d      	movs	r3, #45	; 0x2d
 801041c:	4276      	negs	r6, r6
 801041e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010422:	485a      	ldr	r0, [pc, #360]	; (801058c <_printf_i+0x23c>)
 8010424:	230a      	movs	r3, #10
 8010426:	e012      	b.n	801044e <_printf_i+0xfe>
 8010428:	682b      	ldr	r3, [r5, #0]
 801042a:	6820      	ldr	r0, [r4, #0]
 801042c:	1d19      	adds	r1, r3, #4
 801042e:	6029      	str	r1, [r5, #0]
 8010430:	0605      	lsls	r5, r0, #24
 8010432:	d501      	bpl.n	8010438 <_printf_i+0xe8>
 8010434:	681e      	ldr	r6, [r3, #0]
 8010436:	e002      	b.n	801043e <_printf_i+0xee>
 8010438:	0641      	lsls	r1, r0, #25
 801043a:	d5fb      	bpl.n	8010434 <_printf_i+0xe4>
 801043c:	881e      	ldrh	r6, [r3, #0]
 801043e:	4853      	ldr	r0, [pc, #332]	; (801058c <_printf_i+0x23c>)
 8010440:	2f6f      	cmp	r7, #111	; 0x6f
 8010442:	bf0c      	ite	eq
 8010444:	2308      	moveq	r3, #8
 8010446:	230a      	movne	r3, #10
 8010448:	2100      	movs	r1, #0
 801044a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801044e:	6865      	ldr	r5, [r4, #4]
 8010450:	60a5      	str	r5, [r4, #8]
 8010452:	2d00      	cmp	r5, #0
 8010454:	bfa2      	ittt	ge
 8010456:	6821      	ldrge	r1, [r4, #0]
 8010458:	f021 0104 	bicge.w	r1, r1, #4
 801045c:	6021      	strge	r1, [r4, #0]
 801045e:	b90e      	cbnz	r6, 8010464 <_printf_i+0x114>
 8010460:	2d00      	cmp	r5, #0
 8010462:	d04b      	beq.n	80104fc <_printf_i+0x1ac>
 8010464:	4615      	mov	r5, r2
 8010466:	fbb6 f1f3 	udiv	r1, r6, r3
 801046a:	fb03 6711 	mls	r7, r3, r1, r6
 801046e:	5dc7      	ldrb	r7, [r0, r7]
 8010470:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010474:	4637      	mov	r7, r6
 8010476:	42bb      	cmp	r3, r7
 8010478:	460e      	mov	r6, r1
 801047a:	d9f4      	bls.n	8010466 <_printf_i+0x116>
 801047c:	2b08      	cmp	r3, #8
 801047e:	d10b      	bne.n	8010498 <_printf_i+0x148>
 8010480:	6823      	ldr	r3, [r4, #0]
 8010482:	07de      	lsls	r6, r3, #31
 8010484:	d508      	bpl.n	8010498 <_printf_i+0x148>
 8010486:	6923      	ldr	r3, [r4, #16]
 8010488:	6861      	ldr	r1, [r4, #4]
 801048a:	4299      	cmp	r1, r3
 801048c:	bfde      	ittt	le
 801048e:	2330      	movle	r3, #48	; 0x30
 8010490:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010494:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010498:	1b52      	subs	r2, r2, r5
 801049a:	6122      	str	r2, [r4, #16]
 801049c:	f8cd a000 	str.w	sl, [sp]
 80104a0:	464b      	mov	r3, r9
 80104a2:	aa03      	add	r2, sp, #12
 80104a4:	4621      	mov	r1, r4
 80104a6:	4640      	mov	r0, r8
 80104a8:	f7ff fee4 	bl	8010274 <_printf_common>
 80104ac:	3001      	adds	r0, #1
 80104ae:	d14a      	bne.n	8010546 <_printf_i+0x1f6>
 80104b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104b4:	b004      	add	sp, #16
 80104b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	f043 0320 	orr.w	r3, r3, #32
 80104c0:	6023      	str	r3, [r4, #0]
 80104c2:	4833      	ldr	r0, [pc, #204]	; (8010590 <_printf_i+0x240>)
 80104c4:	2778      	movs	r7, #120	; 0x78
 80104c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80104ca:	6823      	ldr	r3, [r4, #0]
 80104cc:	6829      	ldr	r1, [r5, #0]
 80104ce:	061f      	lsls	r7, r3, #24
 80104d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80104d4:	d402      	bmi.n	80104dc <_printf_i+0x18c>
 80104d6:	065f      	lsls	r7, r3, #25
 80104d8:	bf48      	it	mi
 80104da:	b2b6      	uxthmi	r6, r6
 80104dc:	07df      	lsls	r7, r3, #31
 80104de:	bf48      	it	mi
 80104e0:	f043 0320 	orrmi.w	r3, r3, #32
 80104e4:	6029      	str	r1, [r5, #0]
 80104e6:	bf48      	it	mi
 80104e8:	6023      	strmi	r3, [r4, #0]
 80104ea:	b91e      	cbnz	r6, 80104f4 <_printf_i+0x1a4>
 80104ec:	6823      	ldr	r3, [r4, #0]
 80104ee:	f023 0320 	bic.w	r3, r3, #32
 80104f2:	6023      	str	r3, [r4, #0]
 80104f4:	2310      	movs	r3, #16
 80104f6:	e7a7      	b.n	8010448 <_printf_i+0xf8>
 80104f8:	4824      	ldr	r0, [pc, #144]	; (801058c <_printf_i+0x23c>)
 80104fa:	e7e4      	b.n	80104c6 <_printf_i+0x176>
 80104fc:	4615      	mov	r5, r2
 80104fe:	e7bd      	b.n	801047c <_printf_i+0x12c>
 8010500:	682b      	ldr	r3, [r5, #0]
 8010502:	6826      	ldr	r6, [r4, #0]
 8010504:	6961      	ldr	r1, [r4, #20]
 8010506:	1d18      	adds	r0, r3, #4
 8010508:	6028      	str	r0, [r5, #0]
 801050a:	0635      	lsls	r5, r6, #24
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	d501      	bpl.n	8010514 <_printf_i+0x1c4>
 8010510:	6019      	str	r1, [r3, #0]
 8010512:	e002      	b.n	801051a <_printf_i+0x1ca>
 8010514:	0670      	lsls	r0, r6, #25
 8010516:	d5fb      	bpl.n	8010510 <_printf_i+0x1c0>
 8010518:	8019      	strh	r1, [r3, #0]
 801051a:	2300      	movs	r3, #0
 801051c:	6123      	str	r3, [r4, #16]
 801051e:	4615      	mov	r5, r2
 8010520:	e7bc      	b.n	801049c <_printf_i+0x14c>
 8010522:	682b      	ldr	r3, [r5, #0]
 8010524:	1d1a      	adds	r2, r3, #4
 8010526:	602a      	str	r2, [r5, #0]
 8010528:	681d      	ldr	r5, [r3, #0]
 801052a:	6862      	ldr	r2, [r4, #4]
 801052c:	2100      	movs	r1, #0
 801052e:	4628      	mov	r0, r5
 8010530:	f7ef fed6 	bl	80002e0 <memchr>
 8010534:	b108      	cbz	r0, 801053a <_printf_i+0x1ea>
 8010536:	1b40      	subs	r0, r0, r5
 8010538:	6060      	str	r0, [r4, #4]
 801053a:	6863      	ldr	r3, [r4, #4]
 801053c:	6123      	str	r3, [r4, #16]
 801053e:	2300      	movs	r3, #0
 8010540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010544:	e7aa      	b.n	801049c <_printf_i+0x14c>
 8010546:	6923      	ldr	r3, [r4, #16]
 8010548:	462a      	mov	r2, r5
 801054a:	4649      	mov	r1, r9
 801054c:	4640      	mov	r0, r8
 801054e:	47d0      	blx	sl
 8010550:	3001      	adds	r0, #1
 8010552:	d0ad      	beq.n	80104b0 <_printf_i+0x160>
 8010554:	6823      	ldr	r3, [r4, #0]
 8010556:	079b      	lsls	r3, r3, #30
 8010558:	d413      	bmi.n	8010582 <_printf_i+0x232>
 801055a:	68e0      	ldr	r0, [r4, #12]
 801055c:	9b03      	ldr	r3, [sp, #12]
 801055e:	4298      	cmp	r0, r3
 8010560:	bfb8      	it	lt
 8010562:	4618      	movlt	r0, r3
 8010564:	e7a6      	b.n	80104b4 <_printf_i+0x164>
 8010566:	2301      	movs	r3, #1
 8010568:	4632      	mov	r2, r6
 801056a:	4649      	mov	r1, r9
 801056c:	4640      	mov	r0, r8
 801056e:	47d0      	blx	sl
 8010570:	3001      	adds	r0, #1
 8010572:	d09d      	beq.n	80104b0 <_printf_i+0x160>
 8010574:	3501      	adds	r5, #1
 8010576:	68e3      	ldr	r3, [r4, #12]
 8010578:	9903      	ldr	r1, [sp, #12]
 801057a:	1a5b      	subs	r3, r3, r1
 801057c:	42ab      	cmp	r3, r5
 801057e:	dcf2      	bgt.n	8010566 <_printf_i+0x216>
 8010580:	e7eb      	b.n	801055a <_printf_i+0x20a>
 8010582:	2500      	movs	r5, #0
 8010584:	f104 0619 	add.w	r6, r4, #25
 8010588:	e7f5      	b.n	8010576 <_printf_i+0x226>
 801058a:	bf00      	nop
 801058c:	08012ade 	.word	0x08012ade
 8010590:	08012aef 	.word	0x08012aef

08010594 <std>:
 8010594:	2300      	movs	r3, #0
 8010596:	b510      	push	{r4, lr}
 8010598:	4604      	mov	r4, r0
 801059a:	e9c0 3300 	strd	r3, r3, [r0]
 801059e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105a2:	6083      	str	r3, [r0, #8]
 80105a4:	8181      	strh	r1, [r0, #12]
 80105a6:	6643      	str	r3, [r0, #100]	; 0x64
 80105a8:	81c2      	strh	r2, [r0, #14]
 80105aa:	6183      	str	r3, [r0, #24]
 80105ac:	4619      	mov	r1, r3
 80105ae:	2208      	movs	r2, #8
 80105b0:	305c      	adds	r0, #92	; 0x5c
 80105b2:	f000 f914 	bl	80107de <memset>
 80105b6:	4b0d      	ldr	r3, [pc, #52]	; (80105ec <std+0x58>)
 80105b8:	6263      	str	r3, [r4, #36]	; 0x24
 80105ba:	4b0d      	ldr	r3, [pc, #52]	; (80105f0 <std+0x5c>)
 80105bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80105be:	4b0d      	ldr	r3, [pc, #52]	; (80105f4 <std+0x60>)
 80105c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80105c2:	4b0d      	ldr	r3, [pc, #52]	; (80105f8 <std+0x64>)
 80105c4:	6323      	str	r3, [r4, #48]	; 0x30
 80105c6:	4b0d      	ldr	r3, [pc, #52]	; (80105fc <std+0x68>)
 80105c8:	6224      	str	r4, [r4, #32]
 80105ca:	429c      	cmp	r4, r3
 80105cc:	d006      	beq.n	80105dc <std+0x48>
 80105ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80105d2:	4294      	cmp	r4, r2
 80105d4:	d002      	beq.n	80105dc <std+0x48>
 80105d6:	33d0      	adds	r3, #208	; 0xd0
 80105d8:	429c      	cmp	r4, r3
 80105da:	d105      	bne.n	80105e8 <std+0x54>
 80105dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80105e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105e4:	f000 b978 	b.w	80108d8 <__retarget_lock_init_recursive>
 80105e8:	bd10      	pop	{r4, pc}
 80105ea:	bf00      	nop
 80105ec:	08010759 	.word	0x08010759
 80105f0:	0801077b 	.word	0x0801077b
 80105f4:	080107b3 	.word	0x080107b3
 80105f8:	080107d7 	.word	0x080107d7
 80105fc:	24000864 	.word	0x24000864

08010600 <stdio_exit_handler>:
 8010600:	4a02      	ldr	r2, [pc, #8]	; (801060c <stdio_exit_handler+0xc>)
 8010602:	4903      	ldr	r1, [pc, #12]	; (8010610 <stdio_exit_handler+0x10>)
 8010604:	4803      	ldr	r0, [pc, #12]	; (8010614 <stdio_exit_handler+0x14>)
 8010606:	f000 b869 	b.w	80106dc <_fwalk_sglue>
 801060a:	bf00      	nop
 801060c:	24000014 	.word	0x24000014
 8010610:	0801219d 	.word	0x0801219d
 8010614:	24000020 	.word	0x24000020

08010618 <cleanup_stdio>:
 8010618:	6841      	ldr	r1, [r0, #4]
 801061a:	4b0c      	ldr	r3, [pc, #48]	; (801064c <cleanup_stdio+0x34>)
 801061c:	4299      	cmp	r1, r3
 801061e:	b510      	push	{r4, lr}
 8010620:	4604      	mov	r4, r0
 8010622:	d001      	beq.n	8010628 <cleanup_stdio+0x10>
 8010624:	f001 fdba 	bl	801219c <_fflush_r>
 8010628:	68a1      	ldr	r1, [r4, #8]
 801062a:	4b09      	ldr	r3, [pc, #36]	; (8010650 <cleanup_stdio+0x38>)
 801062c:	4299      	cmp	r1, r3
 801062e:	d002      	beq.n	8010636 <cleanup_stdio+0x1e>
 8010630:	4620      	mov	r0, r4
 8010632:	f001 fdb3 	bl	801219c <_fflush_r>
 8010636:	68e1      	ldr	r1, [r4, #12]
 8010638:	4b06      	ldr	r3, [pc, #24]	; (8010654 <cleanup_stdio+0x3c>)
 801063a:	4299      	cmp	r1, r3
 801063c:	d004      	beq.n	8010648 <cleanup_stdio+0x30>
 801063e:	4620      	mov	r0, r4
 8010640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010644:	f001 bdaa 	b.w	801219c <_fflush_r>
 8010648:	bd10      	pop	{r4, pc}
 801064a:	bf00      	nop
 801064c:	24000864 	.word	0x24000864
 8010650:	240008cc 	.word	0x240008cc
 8010654:	24000934 	.word	0x24000934

08010658 <global_stdio_init.part.0>:
 8010658:	b510      	push	{r4, lr}
 801065a:	4b0b      	ldr	r3, [pc, #44]	; (8010688 <global_stdio_init.part.0+0x30>)
 801065c:	4c0b      	ldr	r4, [pc, #44]	; (801068c <global_stdio_init.part.0+0x34>)
 801065e:	4a0c      	ldr	r2, [pc, #48]	; (8010690 <global_stdio_init.part.0+0x38>)
 8010660:	601a      	str	r2, [r3, #0]
 8010662:	4620      	mov	r0, r4
 8010664:	2200      	movs	r2, #0
 8010666:	2104      	movs	r1, #4
 8010668:	f7ff ff94 	bl	8010594 <std>
 801066c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010670:	2201      	movs	r2, #1
 8010672:	2109      	movs	r1, #9
 8010674:	f7ff ff8e 	bl	8010594 <std>
 8010678:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801067c:	2202      	movs	r2, #2
 801067e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010682:	2112      	movs	r1, #18
 8010684:	f7ff bf86 	b.w	8010594 <std>
 8010688:	2400099c 	.word	0x2400099c
 801068c:	24000864 	.word	0x24000864
 8010690:	08010601 	.word	0x08010601

08010694 <__sfp_lock_acquire>:
 8010694:	4801      	ldr	r0, [pc, #4]	; (801069c <__sfp_lock_acquire+0x8>)
 8010696:	f000 b920 	b.w	80108da <__retarget_lock_acquire_recursive>
 801069a:	bf00      	nop
 801069c:	240009a5 	.word	0x240009a5

080106a0 <__sfp_lock_release>:
 80106a0:	4801      	ldr	r0, [pc, #4]	; (80106a8 <__sfp_lock_release+0x8>)
 80106a2:	f000 b91b 	b.w	80108dc <__retarget_lock_release_recursive>
 80106a6:	bf00      	nop
 80106a8:	240009a5 	.word	0x240009a5

080106ac <__sinit>:
 80106ac:	b510      	push	{r4, lr}
 80106ae:	4604      	mov	r4, r0
 80106b0:	f7ff fff0 	bl	8010694 <__sfp_lock_acquire>
 80106b4:	6a23      	ldr	r3, [r4, #32]
 80106b6:	b11b      	cbz	r3, 80106c0 <__sinit+0x14>
 80106b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106bc:	f7ff bff0 	b.w	80106a0 <__sfp_lock_release>
 80106c0:	4b04      	ldr	r3, [pc, #16]	; (80106d4 <__sinit+0x28>)
 80106c2:	6223      	str	r3, [r4, #32]
 80106c4:	4b04      	ldr	r3, [pc, #16]	; (80106d8 <__sinit+0x2c>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1f5      	bne.n	80106b8 <__sinit+0xc>
 80106cc:	f7ff ffc4 	bl	8010658 <global_stdio_init.part.0>
 80106d0:	e7f2      	b.n	80106b8 <__sinit+0xc>
 80106d2:	bf00      	nop
 80106d4:	08010619 	.word	0x08010619
 80106d8:	2400099c 	.word	0x2400099c

080106dc <_fwalk_sglue>:
 80106dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106e0:	4607      	mov	r7, r0
 80106e2:	4688      	mov	r8, r1
 80106e4:	4614      	mov	r4, r2
 80106e6:	2600      	movs	r6, #0
 80106e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80106ec:	f1b9 0901 	subs.w	r9, r9, #1
 80106f0:	d505      	bpl.n	80106fe <_fwalk_sglue+0x22>
 80106f2:	6824      	ldr	r4, [r4, #0]
 80106f4:	2c00      	cmp	r4, #0
 80106f6:	d1f7      	bne.n	80106e8 <_fwalk_sglue+0xc>
 80106f8:	4630      	mov	r0, r6
 80106fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106fe:	89ab      	ldrh	r3, [r5, #12]
 8010700:	2b01      	cmp	r3, #1
 8010702:	d907      	bls.n	8010714 <_fwalk_sglue+0x38>
 8010704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010708:	3301      	adds	r3, #1
 801070a:	d003      	beq.n	8010714 <_fwalk_sglue+0x38>
 801070c:	4629      	mov	r1, r5
 801070e:	4638      	mov	r0, r7
 8010710:	47c0      	blx	r8
 8010712:	4306      	orrs	r6, r0
 8010714:	3568      	adds	r5, #104	; 0x68
 8010716:	e7e9      	b.n	80106ec <_fwalk_sglue+0x10>

08010718 <siprintf>:
 8010718:	b40e      	push	{r1, r2, r3}
 801071a:	b500      	push	{lr}
 801071c:	b09c      	sub	sp, #112	; 0x70
 801071e:	ab1d      	add	r3, sp, #116	; 0x74
 8010720:	9002      	str	r0, [sp, #8]
 8010722:	9006      	str	r0, [sp, #24]
 8010724:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010728:	4809      	ldr	r0, [pc, #36]	; (8010750 <siprintf+0x38>)
 801072a:	9107      	str	r1, [sp, #28]
 801072c:	9104      	str	r1, [sp, #16]
 801072e:	4909      	ldr	r1, [pc, #36]	; (8010754 <siprintf+0x3c>)
 8010730:	f853 2b04 	ldr.w	r2, [r3], #4
 8010734:	9105      	str	r1, [sp, #20]
 8010736:	6800      	ldr	r0, [r0, #0]
 8010738:	9301      	str	r3, [sp, #4]
 801073a:	a902      	add	r1, sp, #8
 801073c:	f001 fbaa 	bl	8011e94 <_svfiprintf_r>
 8010740:	9b02      	ldr	r3, [sp, #8]
 8010742:	2200      	movs	r2, #0
 8010744:	701a      	strb	r2, [r3, #0]
 8010746:	b01c      	add	sp, #112	; 0x70
 8010748:	f85d eb04 	ldr.w	lr, [sp], #4
 801074c:	b003      	add	sp, #12
 801074e:	4770      	bx	lr
 8010750:	2400006c 	.word	0x2400006c
 8010754:	ffff0208 	.word	0xffff0208

08010758 <__sread>:
 8010758:	b510      	push	{r4, lr}
 801075a:	460c      	mov	r4, r1
 801075c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010760:	f000 f86c 	bl	801083c <_read_r>
 8010764:	2800      	cmp	r0, #0
 8010766:	bfab      	itete	ge
 8010768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801076a:	89a3      	ldrhlt	r3, [r4, #12]
 801076c:	181b      	addge	r3, r3, r0
 801076e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010772:	bfac      	ite	ge
 8010774:	6563      	strge	r3, [r4, #84]	; 0x54
 8010776:	81a3      	strhlt	r3, [r4, #12]
 8010778:	bd10      	pop	{r4, pc}

0801077a <__swrite>:
 801077a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801077e:	461f      	mov	r7, r3
 8010780:	898b      	ldrh	r3, [r1, #12]
 8010782:	05db      	lsls	r3, r3, #23
 8010784:	4605      	mov	r5, r0
 8010786:	460c      	mov	r4, r1
 8010788:	4616      	mov	r6, r2
 801078a:	d505      	bpl.n	8010798 <__swrite+0x1e>
 801078c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010790:	2302      	movs	r3, #2
 8010792:	2200      	movs	r2, #0
 8010794:	f000 f840 	bl	8010818 <_lseek_r>
 8010798:	89a3      	ldrh	r3, [r4, #12]
 801079a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801079e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107a2:	81a3      	strh	r3, [r4, #12]
 80107a4:	4632      	mov	r2, r6
 80107a6:	463b      	mov	r3, r7
 80107a8:	4628      	mov	r0, r5
 80107aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107ae:	f000 b857 	b.w	8010860 <_write_r>

080107b2 <__sseek>:
 80107b2:	b510      	push	{r4, lr}
 80107b4:	460c      	mov	r4, r1
 80107b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ba:	f000 f82d 	bl	8010818 <_lseek_r>
 80107be:	1c43      	adds	r3, r0, #1
 80107c0:	89a3      	ldrh	r3, [r4, #12]
 80107c2:	bf15      	itete	ne
 80107c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80107c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107ce:	81a3      	strheq	r3, [r4, #12]
 80107d0:	bf18      	it	ne
 80107d2:	81a3      	strhne	r3, [r4, #12]
 80107d4:	bd10      	pop	{r4, pc}

080107d6 <__sclose>:
 80107d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107da:	f000 b80d 	b.w	80107f8 <_close_r>

080107de <memset>:
 80107de:	4402      	add	r2, r0
 80107e0:	4603      	mov	r3, r0
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d100      	bne.n	80107e8 <memset+0xa>
 80107e6:	4770      	bx	lr
 80107e8:	f803 1b01 	strb.w	r1, [r3], #1
 80107ec:	e7f9      	b.n	80107e2 <memset+0x4>
	...

080107f0 <_localeconv_r>:
 80107f0:	4800      	ldr	r0, [pc, #0]	; (80107f4 <_localeconv_r+0x4>)
 80107f2:	4770      	bx	lr
 80107f4:	24000160 	.word	0x24000160

080107f8 <_close_r>:
 80107f8:	b538      	push	{r3, r4, r5, lr}
 80107fa:	4d06      	ldr	r5, [pc, #24]	; (8010814 <_close_r+0x1c>)
 80107fc:	2300      	movs	r3, #0
 80107fe:	4604      	mov	r4, r0
 8010800:	4608      	mov	r0, r1
 8010802:	602b      	str	r3, [r5, #0]
 8010804:	f7f2 f8cf 	bl	80029a6 <_close>
 8010808:	1c43      	adds	r3, r0, #1
 801080a:	d102      	bne.n	8010812 <_close_r+0x1a>
 801080c:	682b      	ldr	r3, [r5, #0]
 801080e:	b103      	cbz	r3, 8010812 <_close_r+0x1a>
 8010810:	6023      	str	r3, [r4, #0]
 8010812:	bd38      	pop	{r3, r4, r5, pc}
 8010814:	240009a0 	.word	0x240009a0

08010818 <_lseek_r>:
 8010818:	b538      	push	{r3, r4, r5, lr}
 801081a:	4d07      	ldr	r5, [pc, #28]	; (8010838 <_lseek_r+0x20>)
 801081c:	4604      	mov	r4, r0
 801081e:	4608      	mov	r0, r1
 8010820:	4611      	mov	r1, r2
 8010822:	2200      	movs	r2, #0
 8010824:	602a      	str	r2, [r5, #0]
 8010826:	461a      	mov	r2, r3
 8010828:	f7f2 f8e4 	bl	80029f4 <_lseek>
 801082c:	1c43      	adds	r3, r0, #1
 801082e:	d102      	bne.n	8010836 <_lseek_r+0x1e>
 8010830:	682b      	ldr	r3, [r5, #0]
 8010832:	b103      	cbz	r3, 8010836 <_lseek_r+0x1e>
 8010834:	6023      	str	r3, [r4, #0]
 8010836:	bd38      	pop	{r3, r4, r5, pc}
 8010838:	240009a0 	.word	0x240009a0

0801083c <_read_r>:
 801083c:	b538      	push	{r3, r4, r5, lr}
 801083e:	4d07      	ldr	r5, [pc, #28]	; (801085c <_read_r+0x20>)
 8010840:	4604      	mov	r4, r0
 8010842:	4608      	mov	r0, r1
 8010844:	4611      	mov	r1, r2
 8010846:	2200      	movs	r2, #0
 8010848:	602a      	str	r2, [r5, #0]
 801084a:	461a      	mov	r2, r3
 801084c:	f7f2 f872 	bl	8002934 <_read>
 8010850:	1c43      	adds	r3, r0, #1
 8010852:	d102      	bne.n	801085a <_read_r+0x1e>
 8010854:	682b      	ldr	r3, [r5, #0]
 8010856:	b103      	cbz	r3, 801085a <_read_r+0x1e>
 8010858:	6023      	str	r3, [r4, #0]
 801085a:	bd38      	pop	{r3, r4, r5, pc}
 801085c:	240009a0 	.word	0x240009a0

08010860 <_write_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4d07      	ldr	r5, [pc, #28]	; (8010880 <_write_r+0x20>)
 8010864:	4604      	mov	r4, r0
 8010866:	4608      	mov	r0, r1
 8010868:	4611      	mov	r1, r2
 801086a:	2200      	movs	r2, #0
 801086c:	602a      	str	r2, [r5, #0]
 801086e:	461a      	mov	r2, r3
 8010870:	f7f2 f87d 	bl	800296e <_write>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_write_r+0x1e>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_write_r+0x1e>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	240009a0 	.word	0x240009a0

08010884 <__errno>:
 8010884:	4b01      	ldr	r3, [pc, #4]	; (801088c <__errno+0x8>)
 8010886:	6818      	ldr	r0, [r3, #0]
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	2400006c 	.word	0x2400006c

08010890 <__libc_init_array>:
 8010890:	b570      	push	{r4, r5, r6, lr}
 8010892:	4d0d      	ldr	r5, [pc, #52]	; (80108c8 <__libc_init_array+0x38>)
 8010894:	4c0d      	ldr	r4, [pc, #52]	; (80108cc <__libc_init_array+0x3c>)
 8010896:	1b64      	subs	r4, r4, r5
 8010898:	10a4      	asrs	r4, r4, #2
 801089a:	2600      	movs	r6, #0
 801089c:	42a6      	cmp	r6, r4
 801089e:	d109      	bne.n	80108b4 <__libc_init_array+0x24>
 80108a0:	4d0b      	ldr	r5, [pc, #44]	; (80108d0 <__libc_init_array+0x40>)
 80108a2:	4c0c      	ldr	r4, [pc, #48]	; (80108d4 <__libc_init_array+0x44>)
 80108a4:	f002 f810 	bl	80128c8 <_init>
 80108a8:	1b64      	subs	r4, r4, r5
 80108aa:	10a4      	asrs	r4, r4, #2
 80108ac:	2600      	movs	r6, #0
 80108ae:	42a6      	cmp	r6, r4
 80108b0:	d105      	bne.n	80108be <__libc_init_array+0x2e>
 80108b2:	bd70      	pop	{r4, r5, r6, pc}
 80108b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80108b8:	4798      	blx	r3
 80108ba:	3601      	adds	r6, #1
 80108bc:	e7ee      	b.n	801089c <__libc_init_array+0xc>
 80108be:	f855 3b04 	ldr.w	r3, [r5], #4
 80108c2:	4798      	blx	r3
 80108c4:	3601      	adds	r6, #1
 80108c6:	e7f2      	b.n	80108ae <__libc_init_array+0x1e>
 80108c8:	08012e44 	.word	0x08012e44
 80108cc:	08012e44 	.word	0x08012e44
 80108d0:	08012e44 	.word	0x08012e44
 80108d4:	08012e48 	.word	0x08012e48

080108d8 <__retarget_lock_init_recursive>:
 80108d8:	4770      	bx	lr

080108da <__retarget_lock_acquire_recursive>:
 80108da:	4770      	bx	lr

080108dc <__retarget_lock_release_recursive>:
 80108dc:	4770      	bx	lr

080108de <memcpy>:
 80108de:	440a      	add	r2, r1
 80108e0:	4291      	cmp	r1, r2
 80108e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80108e6:	d100      	bne.n	80108ea <memcpy+0xc>
 80108e8:	4770      	bx	lr
 80108ea:	b510      	push	{r4, lr}
 80108ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108f4:	4291      	cmp	r1, r2
 80108f6:	d1f9      	bne.n	80108ec <memcpy+0xe>
 80108f8:	bd10      	pop	{r4, pc}

080108fa <quorem>:
 80108fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108fe:	6903      	ldr	r3, [r0, #16]
 8010900:	690c      	ldr	r4, [r1, #16]
 8010902:	42a3      	cmp	r3, r4
 8010904:	4607      	mov	r7, r0
 8010906:	db7e      	blt.n	8010a06 <quorem+0x10c>
 8010908:	3c01      	subs	r4, #1
 801090a:	f101 0814 	add.w	r8, r1, #20
 801090e:	f100 0514 	add.w	r5, r0, #20
 8010912:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010916:	9301      	str	r3, [sp, #4]
 8010918:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801091c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010920:	3301      	adds	r3, #1
 8010922:	429a      	cmp	r2, r3
 8010924:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010928:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801092c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010930:	d331      	bcc.n	8010996 <quorem+0x9c>
 8010932:	f04f 0e00 	mov.w	lr, #0
 8010936:	4640      	mov	r0, r8
 8010938:	46ac      	mov	ip, r5
 801093a:	46f2      	mov	sl, lr
 801093c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010940:	b293      	uxth	r3, r2
 8010942:	fb06 e303 	mla	r3, r6, r3, lr
 8010946:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801094a:	0c1a      	lsrs	r2, r3, #16
 801094c:	b29b      	uxth	r3, r3
 801094e:	ebaa 0303 	sub.w	r3, sl, r3
 8010952:	f8dc a000 	ldr.w	sl, [ip]
 8010956:	fa13 f38a 	uxtah	r3, r3, sl
 801095a:	fb06 220e 	mla	r2, r6, lr, r2
 801095e:	9300      	str	r3, [sp, #0]
 8010960:	9b00      	ldr	r3, [sp, #0]
 8010962:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010966:	b292      	uxth	r2, r2
 8010968:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801096c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010970:	f8bd 3000 	ldrh.w	r3, [sp]
 8010974:	4581      	cmp	r9, r0
 8010976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801097a:	f84c 3b04 	str.w	r3, [ip], #4
 801097e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010982:	d2db      	bcs.n	801093c <quorem+0x42>
 8010984:	f855 300b 	ldr.w	r3, [r5, fp]
 8010988:	b92b      	cbnz	r3, 8010996 <quorem+0x9c>
 801098a:	9b01      	ldr	r3, [sp, #4]
 801098c:	3b04      	subs	r3, #4
 801098e:	429d      	cmp	r5, r3
 8010990:	461a      	mov	r2, r3
 8010992:	d32c      	bcc.n	80109ee <quorem+0xf4>
 8010994:	613c      	str	r4, [r7, #16]
 8010996:	4638      	mov	r0, r7
 8010998:	f001 f922 	bl	8011be0 <__mcmp>
 801099c:	2800      	cmp	r0, #0
 801099e:	db22      	blt.n	80109e6 <quorem+0xec>
 80109a0:	3601      	adds	r6, #1
 80109a2:	4629      	mov	r1, r5
 80109a4:	2000      	movs	r0, #0
 80109a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80109aa:	f8d1 c000 	ldr.w	ip, [r1]
 80109ae:	b293      	uxth	r3, r2
 80109b0:	1ac3      	subs	r3, r0, r3
 80109b2:	0c12      	lsrs	r2, r2, #16
 80109b4:	fa13 f38c 	uxtah	r3, r3, ip
 80109b8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80109bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109c6:	45c1      	cmp	r9, r8
 80109c8:	f841 3b04 	str.w	r3, [r1], #4
 80109cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80109d0:	d2e9      	bcs.n	80109a6 <quorem+0xac>
 80109d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109da:	b922      	cbnz	r2, 80109e6 <quorem+0xec>
 80109dc:	3b04      	subs	r3, #4
 80109de:	429d      	cmp	r5, r3
 80109e0:	461a      	mov	r2, r3
 80109e2:	d30a      	bcc.n	80109fa <quorem+0x100>
 80109e4:	613c      	str	r4, [r7, #16]
 80109e6:	4630      	mov	r0, r6
 80109e8:	b003      	add	sp, #12
 80109ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ee:	6812      	ldr	r2, [r2, #0]
 80109f0:	3b04      	subs	r3, #4
 80109f2:	2a00      	cmp	r2, #0
 80109f4:	d1ce      	bne.n	8010994 <quorem+0x9a>
 80109f6:	3c01      	subs	r4, #1
 80109f8:	e7c9      	b.n	801098e <quorem+0x94>
 80109fa:	6812      	ldr	r2, [r2, #0]
 80109fc:	3b04      	subs	r3, #4
 80109fe:	2a00      	cmp	r2, #0
 8010a00:	d1f0      	bne.n	80109e4 <quorem+0xea>
 8010a02:	3c01      	subs	r4, #1
 8010a04:	e7eb      	b.n	80109de <quorem+0xe4>
 8010a06:	2000      	movs	r0, #0
 8010a08:	e7ee      	b.n	80109e8 <quorem+0xee>
 8010a0a:	0000      	movs	r0, r0
 8010a0c:	0000      	movs	r0, r0
	...

08010a10 <_dtoa_r>:
 8010a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a14:	ed2d 8b02 	vpush	{d8}
 8010a18:	69c5      	ldr	r5, [r0, #28]
 8010a1a:	b091      	sub	sp, #68	; 0x44
 8010a1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010a20:	ec59 8b10 	vmov	r8, r9, d0
 8010a24:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8010a26:	9106      	str	r1, [sp, #24]
 8010a28:	4606      	mov	r6, r0
 8010a2a:	9208      	str	r2, [sp, #32]
 8010a2c:	930c      	str	r3, [sp, #48]	; 0x30
 8010a2e:	b975      	cbnz	r5, 8010a4e <_dtoa_r+0x3e>
 8010a30:	2010      	movs	r0, #16
 8010a32:	f000 fda5 	bl	8011580 <malloc>
 8010a36:	4602      	mov	r2, r0
 8010a38:	61f0      	str	r0, [r6, #28]
 8010a3a:	b920      	cbnz	r0, 8010a46 <_dtoa_r+0x36>
 8010a3c:	4ba6      	ldr	r3, [pc, #664]	; (8010cd8 <_dtoa_r+0x2c8>)
 8010a3e:	21ef      	movs	r1, #239	; 0xef
 8010a40:	48a6      	ldr	r0, [pc, #664]	; (8010cdc <_dtoa_r+0x2cc>)
 8010a42:	f001 fbfd 	bl	8012240 <__assert_func>
 8010a46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010a4a:	6005      	str	r5, [r0, #0]
 8010a4c:	60c5      	str	r5, [r0, #12]
 8010a4e:	69f3      	ldr	r3, [r6, #28]
 8010a50:	6819      	ldr	r1, [r3, #0]
 8010a52:	b151      	cbz	r1, 8010a6a <_dtoa_r+0x5a>
 8010a54:	685a      	ldr	r2, [r3, #4]
 8010a56:	604a      	str	r2, [r1, #4]
 8010a58:	2301      	movs	r3, #1
 8010a5a:	4093      	lsls	r3, r2
 8010a5c:	608b      	str	r3, [r1, #8]
 8010a5e:	4630      	mov	r0, r6
 8010a60:	f000 fe82 	bl	8011768 <_Bfree>
 8010a64:	69f3      	ldr	r3, [r6, #28]
 8010a66:	2200      	movs	r2, #0
 8010a68:	601a      	str	r2, [r3, #0]
 8010a6a:	f1b9 0300 	subs.w	r3, r9, #0
 8010a6e:	bfbb      	ittet	lt
 8010a70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010a74:	9303      	strlt	r3, [sp, #12]
 8010a76:	2300      	movge	r3, #0
 8010a78:	2201      	movlt	r2, #1
 8010a7a:	bfac      	ite	ge
 8010a7c:	6023      	strge	r3, [r4, #0]
 8010a7e:	6022      	strlt	r2, [r4, #0]
 8010a80:	4b97      	ldr	r3, [pc, #604]	; (8010ce0 <_dtoa_r+0x2d0>)
 8010a82:	9c03      	ldr	r4, [sp, #12]
 8010a84:	43a3      	bics	r3, r4
 8010a86:	d11c      	bne.n	8010ac2 <_dtoa_r+0xb2>
 8010a88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a8e:	6013      	str	r3, [r2, #0]
 8010a90:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010a94:	ea53 0308 	orrs.w	r3, r3, r8
 8010a98:	f000 84fb 	beq.w	8011492 <_dtoa_r+0xa82>
 8010a9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a9e:	b963      	cbnz	r3, 8010aba <_dtoa_r+0xaa>
 8010aa0:	4b90      	ldr	r3, [pc, #576]	; (8010ce4 <_dtoa_r+0x2d4>)
 8010aa2:	e020      	b.n	8010ae6 <_dtoa_r+0xd6>
 8010aa4:	4b90      	ldr	r3, [pc, #576]	; (8010ce8 <_dtoa_r+0x2d8>)
 8010aa6:	9301      	str	r3, [sp, #4]
 8010aa8:	3308      	adds	r3, #8
 8010aaa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010aac:	6013      	str	r3, [r2, #0]
 8010aae:	9801      	ldr	r0, [sp, #4]
 8010ab0:	b011      	add	sp, #68	; 0x44
 8010ab2:	ecbd 8b02 	vpop	{d8}
 8010ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aba:	4b8a      	ldr	r3, [pc, #552]	; (8010ce4 <_dtoa_r+0x2d4>)
 8010abc:	9301      	str	r3, [sp, #4]
 8010abe:	3303      	adds	r3, #3
 8010ac0:	e7f3      	b.n	8010aaa <_dtoa_r+0x9a>
 8010ac2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010ac6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ace:	d10c      	bne.n	8010aea <_dtoa_r+0xda>
 8010ad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	6013      	str	r3, [r2, #0]
 8010ad6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	f000 84d7 	beq.w	801148c <_dtoa_r+0xa7c>
 8010ade:	4b83      	ldr	r3, [pc, #524]	; (8010cec <_dtoa_r+0x2dc>)
 8010ae0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010ae2:	6013      	str	r3, [r2, #0]
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	9301      	str	r3, [sp, #4]
 8010ae8:	e7e1      	b.n	8010aae <_dtoa_r+0x9e>
 8010aea:	aa0e      	add	r2, sp, #56	; 0x38
 8010aec:	a90f      	add	r1, sp, #60	; 0x3c
 8010aee:	4630      	mov	r0, r6
 8010af0:	eeb0 0b48 	vmov.f64	d0, d8
 8010af4:	f001 f91a 	bl	8011d2c <__d2b>
 8010af8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8010afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010afe:	4605      	mov	r5, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d046      	beq.n	8010b92 <_dtoa_r+0x182>
 8010b04:	eeb0 7b48 	vmov.f64	d7, d8
 8010b08:	ee18 1a90 	vmov	r1, s17
 8010b0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010b10:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010b14:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010b18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	ee07 1a90 	vmov	s15, r1
 8010b22:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8010b26:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010cc0 <_dtoa_r+0x2b0>
 8010b2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010b2e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010cc8 <_dtoa_r+0x2b8>
 8010b32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010b36:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010cd0 <_dtoa_r+0x2c0>
 8010b3a:	ee07 3a90 	vmov	s15, r3
 8010b3e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010b42:	eeb0 7b46 	vmov.f64	d7, d6
 8010b46:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010b4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010b4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b56:	ee16 ba90 	vmov	fp, s13
 8010b5a:	9009      	str	r0, [sp, #36]	; 0x24
 8010b5c:	d508      	bpl.n	8010b70 <_dtoa_r+0x160>
 8010b5e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010b62:	eeb4 6b47 	vcmp.f64	d6, d7
 8010b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b6a:	bf18      	it	ne
 8010b6c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8010b70:	f1bb 0f16 	cmp.w	fp, #22
 8010b74:	d82b      	bhi.n	8010bce <_dtoa_r+0x1be>
 8010b76:	495e      	ldr	r1, [pc, #376]	; (8010cf0 <_dtoa_r+0x2e0>)
 8010b78:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8010b7c:	ed91 7b00 	vldr	d7, [r1]
 8010b80:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b88:	d501      	bpl.n	8010b8e <_dtoa_r+0x17e>
 8010b8a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010b8e:	2100      	movs	r1, #0
 8010b90:	e01e      	b.n	8010bd0 <_dtoa_r+0x1c0>
 8010b92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b94:	4413      	add	r3, r2
 8010b96:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8010b9a:	2920      	cmp	r1, #32
 8010b9c:	bfc1      	itttt	gt
 8010b9e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8010ba2:	408c      	lslgt	r4, r1
 8010ba4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8010ba8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8010bac:	bfd6      	itet	le
 8010bae:	f1c1 0120 	rsble	r1, r1, #32
 8010bb2:	4321      	orrgt	r1, r4
 8010bb4:	fa08 f101 	lslle.w	r1, r8, r1
 8010bb8:	ee07 1a90 	vmov	s15, r1
 8010bbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010bc0:	3b01      	subs	r3, #1
 8010bc2:	ee17 1a90 	vmov	r1, s15
 8010bc6:	2001      	movs	r0, #1
 8010bc8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010bcc:	e7a7      	b.n	8010b1e <_dtoa_r+0x10e>
 8010bce:	2101      	movs	r1, #1
 8010bd0:	1ad2      	subs	r2, r2, r3
 8010bd2:	1e53      	subs	r3, r2, #1
 8010bd4:	9305      	str	r3, [sp, #20]
 8010bd6:	bf45      	ittet	mi
 8010bd8:	f1c2 0301 	rsbmi	r3, r2, #1
 8010bdc:	9304      	strmi	r3, [sp, #16]
 8010bde:	2300      	movpl	r3, #0
 8010be0:	2300      	movmi	r3, #0
 8010be2:	bf4c      	ite	mi
 8010be4:	9305      	strmi	r3, [sp, #20]
 8010be6:	9304      	strpl	r3, [sp, #16]
 8010be8:	f1bb 0f00 	cmp.w	fp, #0
 8010bec:	910b      	str	r1, [sp, #44]	; 0x2c
 8010bee:	db18      	blt.n	8010c22 <_dtoa_r+0x212>
 8010bf0:	9b05      	ldr	r3, [sp, #20]
 8010bf2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010bf6:	445b      	add	r3, fp
 8010bf8:	9305      	str	r3, [sp, #20]
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	9a06      	ldr	r2, [sp, #24]
 8010bfe:	2a09      	cmp	r2, #9
 8010c00:	d848      	bhi.n	8010c94 <_dtoa_r+0x284>
 8010c02:	2a05      	cmp	r2, #5
 8010c04:	bfc4      	itt	gt
 8010c06:	3a04      	subgt	r2, #4
 8010c08:	9206      	strgt	r2, [sp, #24]
 8010c0a:	9a06      	ldr	r2, [sp, #24]
 8010c0c:	f1a2 0202 	sub.w	r2, r2, #2
 8010c10:	bfcc      	ite	gt
 8010c12:	2400      	movgt	r4, #0
 8010c14:	2401      	movle	r4, #1
 8010c16:	2a03      	cmp	r2, #3
 8010c18:	d847      	bhi.n	8010caa <_dtoa_r+0x29a>
 8010c1a:	e8df f002 	tbb	[pc, r2]
 8010c1e:	2d0b      	.short	0x2d0b
 8010c20:	392b      	.short	0x392b
 8010c22:	9b04      	ldr	r3, [sp, #16]
 8010c24:	2200      	movs	r2, #0
 8010c26:	eba3 030b 	sub.w	r3, r3, fp
 8010c2a:	9304      	str	r3, [sp, #16]
 8010c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8010c2e:	f1cb 0300 	rsb	r3, fp, #0
 8010c32:	e7e3      	b.n	8010bfc <_dtoa_r+0x1ec>
 8010c34:	2200      	movs	r2, #0
 8010c36:	9207      	str	r2, [sp, #28]
 8010c38:	9a08      	ldr	r2, [sp, #32]
 8010c3a:	2a00      	cmp	r2, #0
 8010c3c:	dc38      	bgt.n	8010cb0 <_dtoa_r+0x2a0>
 8010c3e:	f04f 0a01 	mov.w	sl, #1
 8010c42:	46d1      	mov	r9, sl
 8010c44:	4652      	mov	r2, sl
 8010c46:	f8cd a020 	str.w	sl, [sp, #32]
 8010c4a:	69f7      	ldr	r7, [r6, #28]
 8010c4c:	2100      	movs	r1, #0
 8010c4e:	2004      	movs	r0, #4
 8010c50:	f100 0c14 	add.w	ip, r0, #20
 8010c54:	4594      	cmp	ip, r2
 8010c56:	d930      	bls.n	8010cba <_dtoa_r+0x2aa>
 8010c58:	6079      	str	r1, [r7, #4]
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	930d      	str	r3, [sp, #52]	; 0x34
 8010c5e:	f000 fd43 	bl	80116e8 <_Balloc>
 8010c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c64:	9001      	str	r0, [sp, #4]
 8010c66:	4602      	mov	r2, r0
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	d145      	bne.n	8010cf8 <_dtoa_r+0x2e8>
 8010c6c:	4b21      	ldr	r3, [pc, #132]	; (8010cf4 <_dtoa_r+0x2e4>)
 8010c6e:	f240 11af 	movw	r1, #431	; 0x1af
 8010c72:	e6e5      	b.n	8010a40 <_dtoa_r+0x30>
 8010c74:	2201      	movs	r2, #1
 8010c76:	e7de      	b.n	8010c36 <_dtoa_r+0x226>
 8010c78:	2200      	movs	r2, #0
 8010c7a:	9207      	str	r2, [sp, #28]
 8010c7c:	9a08      	ldr	r2, [sp, #32]
 8010c7e:	eb0b 0a02 	add.w	sl, fp, r2
 8010c82:	f10a 0901 	add.w	r9, sl, #1
 8010c86:	464a      	mov	r2, r9
 8010c88:	2a01      	cmp	r2, #1
 8010c8a:	bfb8      	it	lt
 8010c8c:	2201      	movlt	r2, #1
 8010c8e:	e7dc      	b.n	8010c4a <_dtoa_r+0x23a>
 8010c90:	2201      	movs	r2, #1
 8010c92:	e7f2      	b.n	8010c7a <_dtoa_r+0x26a>
 8010c94:	2401      	movs	r4, #1
 8010c96:	2200      	movs	r2, #0
 8010c98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8010c9c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	46d1      	mov	r9, sl
 8010ca4:	2212      	movs	r2, #18
 8010ca6:	9108      	str	r1, [sp, #32]
 8010ca8:	e7cf      	b.n	8010c4a <_dtoa_r+0x23a>
 8010caa:	2201      	movs	r2, #1
 8010cac:	9207      	str	r2, [sp, #28]
 8010cae:	e7f5      	b.n	8010c9c <_dtoa_r+0x28c>
 8010cb0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010cb4:	46d1      	mov	r9, sl
 8010cb6:	4652      	mov	r2, sl
 8010cb8:	e7c7      	b.n	8010c4a <_dtoa_r+0x23a>
 8010cba:	3101      	adds	r1, #1
 8010cbc:	0040      	lsls	r0, r0, #1
 8010cbe:	e7c7      	b.n	8010c50 <_dtoa_r+0x240>
 8010cc0:	636f4361 	.word	0x636f4361
 8010cc4:	3fd287a7 	.word	0x3fd287a7
 8010cc8:	8b60c8b3 	.word	0x8b60c8b3
 8010ccc:	3fc68a28 	.word	0x3fc68a28
 8010cd0:	509f79fb 	.word	0x509f79fb
 8010cd4:	3fd34413 	.word	0x3fd34413
 8010cd8:	08012b0d 	.word	0x08012b0d
 8010cdc:	08012b24 	.word	0x08012b24
 8010ce0:	7ff00000 	.word	0x7ff00000
 8010ce4:	08012b09 	.word	0x08012b09
 8010ce8:	08012b00 	.word	0x08012b00
 8010cec:	08012add 	.word	0x08012add
 8010cf0:	08012c10 	.word	0x08012c10
 8010cf4:	08012b7c 	.word	0x08012b7c
 8010cf8:	69f2      	ldr	r2, [r6, #28]
 8010cfa:	9901      	ldr	r1, [sp, #4]
 8010cfc:	6011      	str	r1, [r2, #0]
 8010cfe:	f1b9 0f0e 	cmp.w	r9, #14
 8010d02:	d86c      	bhi.n	8010dde <_dtoa_r+0x3ce>
 8010d04:	2c00      	cmp	r4, #0
 8010d06:	d06a      	beq.n	8010dde <_dtoa_r+0x3ce>
 8010d08:	f1bb 0f00 	cmp.w	fp, #0
 8010d0c:	f340 80a0 	ble.w	8010e50 <_dtoa_r+0x440>
 8010d10:	4ac1      	ldr	r2, [pc, #772]	; (8011018 <_dtoa_r+0x608>)
 8010d12:	f00b 010f 	and.w	r1, fp, #15
 8010d16:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010d1a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010d1e:	ed92 7b00 	vldr	d7, [r2]
 8010d22:	ea4f 122b 	mov.w	r2, fp, asr #4
 8010d26:	f000 8087 	beq.w	8010e38 <_dtoa_r+0x428>
 8010d2a:	49bc      	ldr	r1, [pc, #752]	; (801101c <_dtoa_r+0x60c>)
 8010d2c:	ed91 6b08 	vldr	d6, [r1, #32]
 8010d30:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010d34:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010d38:	f002 020f 	and.w	r2, r2, #15
 8010d3c:	2103      	movs	r1, #3
 8010d3e:	48b7      	ldr	r0, [pc, #732]	; (801101c <_dtoa_r+0x60c>)
 8010d40:	2a00      	cmp	r2, #0
 8010d42:	d17b      	bne.n	8010e3c <_dtoa_r+0x42c>
 8010d44:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d48:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010d4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d56:	2a00      	cmp	r2, #0
 8010d58:	f000 80a0 	beq.w	8010e9c <_dtoa_r+0x48c>
 8010d5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010d60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d68:	f140 8098 	bpl.w	8010e9c <_dtoa_r+0x48c>
 8010d6c:	f1b9 0f00 	cmp.w	r9, #0
 8010d70:	f000 8094 	beq.w	8010e9c <_dtoa_r+0x48c>
 8010d74:	f1ba 0f00 	cmp.w	sl, #0
 8010d78:	dd2f      	ble.n	8010dda <_dtoa_r+0x3ca>
 8010d7a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010d7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d82:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d86:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8010d8a:	3101      	adds	r1, #1
 8010d8c:	4654      	mov	r4, sl
 8010d8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d92:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010d96:	ee07 1a90 	vmov	s15, r1
 8010d9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010d9e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010da2:	ee15 7a90 	vmov	r7, s11
 8010da6:	ec51 0b15 	vmov	r0, r1, d5
 8010daa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8010dae:	2c00      	cmp	r4, #0
 8010db0:	d177      	bne.n	8010ea2 <_dtoa_r+0x492>
 8010db2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010db6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010dba:	ec41 0b17 	vmov	d7, r0, r1
 8010dbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc6:	f300 826a 	bgt.w	801129e <_dtoa_r+0x88e>
 8010dca:	eeb1 7b47 	vneg.f64	d7, d7
 8010dce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd6:	f100 8260 	bmi.w	801129a <_dtoa_r+0x88a>
 8010dda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010dde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010de0:	2a00      	cmp	r2, #0
 8010de2:	f2c0 811d 	blt.w	8011020 <_dtoa_r+0x610>
 8010de6:	f1bb 0f0e 	cmp.w	fp, #14
 8010dea:	f300 8119 	bgt.w	8011020 <_dtoa_r+0x610>
 8010dee:	4b8a      	ldr	r3, [pc, #552]	; (8011018 <_dtoa_r+0x608>)
 8010df0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010df4:	ed93 6b00 	vldr	d6, [r3]
 8010df8:	9b08      	ldr	r3, [sp, #32]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f280 80b7 	bge.w	8010f6e <_dtoa_r+0x55e>
 8010e00:	f1b9 0f00 	cmp.w	r9, #0
 8010e04:	f300 80b3 	bgt.w	8010f6e <_dtoa_r+0x55e>
 8010e08:	f040 8246 	bne.w	8011298 <_dtoa_r+0x888>
 8010e0c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010e10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010e14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e20:	464c      	mov	r4, r9
 8010e22:	464f      	mov	r7, r9
 8010e24:	f280 821c 	bge.w	8011260 <_dtoa_r+0x850>
 8010e28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010e2c:	2331      	movs	r3, #49	; 0x31
 8010e2e:	f808 3b01 	strb.w	r3, [r8], #1
 8010e32:	f10b 0b01 	add.w	fp, fp, #1
 8010e36:	e218      	b.n	801126a <_dtoa_r+0x85a>
 8010e38:	2102      	movs	r1, #2
 8010e3a:	e780      	b.n	8010d3e <_dtoa_r+0x32e>
 8010e3c:	07d4      	lsls	r4, r2, #31
 8010e3e:	d504      	bpl.n	8010e4a <_dtoa_r+0x43a>
 8010e40:	ed90 6b00 	vldr	d6, [r0]
 8010e44:	3101      	adds	r1, #1
 8010e46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e4a:	1052      	asrs	r2, r2, #1
 8010e4c:	3008      	adds	r0, #8
 8010e4e:	e777      	b.n	8010d40 <_dtoa_r+0x330>
 8010e50:	d022      	beq.n	8010e98 <_dtoa_r+0x488>
 8010e52:	f1cb 0200 	rsb	r2, fp, #0
 8010e56:	4970      	ldr	r1, [pc, #448]	; (8011018 <_dtoa_r+0x608>)
 8010e58:	f002 000f 	and.w	r0, r2, #15
 8010e5c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010e60:	ed91 7b00 	vldr	d7, [r1]
 8010e64:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010e68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e6c:	486b      	ldr	r0, [pc, #428]	; (801101c <_dtoa_r+0x60c>)
 8010e6e:	1112      	asrs	r2, r2, #4
 8010e70:	2400      	movs	r4, #0
 8010e72:	2102      	movs	r1, #2
 8010e74:	b92a      	cbnz	r2, 8010e82 <_dtoa_r+0x472>
 8010e76:	2c00      	cmp	r4, #0
 8010e78:	f43f af6a 	beq.w	8010d50 <_dtoa_r+0x340>
 8010e7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e80:	e766      	b.n	8010d50 <_dtoa_r+0x340>
 8010e82:	07d7      	lsls	r7, r2, #31
 8010e84:	d505      	bpl.n	8010e92 <_dtoa_r+0x482>
 8010e86:	ed90 6b00 	vldr	d6, [r0]
 8010e8a:	3101      	adds	r1, #1
 8010e8c:	2401      	movs	r4, #1
 8010e8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e92:	1052      	asrs	r2, r2, #1
 8010e94:	3008      	adds	r0, #8
 8010e96:	e7ed      	b.n	8010e74 <_dtoa_r+0x464>
 8010e98:	2102      	movs	r1, #2
 8010e9a:	e759      	b.n	8010d50 <_dtoa_r+0x340>
 8010e9c:	465a      	mov	r2, fp
 8010e9e:	464c      	mov	r4, r9
 8010ea0:	e775      	b.n	8010d8e <_dtoa_r+0x37e>
 8010ea2:	ec41 0b17 	vmov	d7, r0, r1
 8010ea6:	495c      	ldr	r1, [pc, #368]	; (8011018 <_dtoa_r+0x608>)
 8010ea8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8010eac:	ed11 4b02 	vldr	d4, [r1, #-8]
 8010eb0:	9901      	ldr	r1, [sp, #4]
 8010eb2:	440c      	add	r4, r1
 8010eb4:	9907      	ldr	r1, [sp, #28]
 8010eb6:	b351      	cbz	r1, 8010f0e <_dtoa_r+0x4fe>
 8010eb8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010ebc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010ec0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010ec4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010ec8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010ecc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010ed0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010ed4:	ee14 1a90 	vmov	r1, s9
 8010ed8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010edc:	3130      	adds	r1, #48	; 0x30
 8010ede:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010ee2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eea:	f808 1b01 	strb.w	r1, [r8], #1
 8010eee:	d439      	bmi.n	8010f64 <_dtoa_r+0x554>
 8010ef0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010ef4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efc:	d472      	bmi.n	8010fe4 <_dtoa_r+0x5d4>
 8010efe:	45a0      	cmp	r8, r4
 8010f00:	f43f af6b 	beq.w	8010dda <_dtoa_r+0x3ca>
 8010f04:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010f08:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010f0c:	e7e0      	b.n	8010ed0 <_dtoa_r+0x4c0>
 8010f0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010f12:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010f16:	4620      	mov	r0, r4
 8010f18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010f1c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010f20:	ee14 1a90 	vmov	r1, s9
 8010f24:	3130      	adds	r1, #48	; 0x30
 8010f26:	f808 1b01 	strb.w	r1, [r8], #1
 8010f2a:	45a0      	cmp	r8, r4
 8010f2c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010f30:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010f34:	d118      	bne.n	8010f68 <_dtoa_r+0x558>
 8010f36:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010f3a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010f3e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f46:	dc4d      	bgt.n	8010fe4 <_dtoa_r+0x5d4>
 8010f48:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010f4c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f54:	f57f af41 	bpl.w	8010dda <_dtoa_r+0x3ca>
 8010f58:	4680      	mov	r8, r0
 8010f5a:	3801      	subs	r0, #1
 8010f5c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010f60:	2b30      	cmp	r3, #48	; 0x30
 8010f62:	d0f9      	beq.n	8010f58 <_dtoa_r+0x548>
 8010f64:	4693      	mov	fp, r2
 8010f66:	e02a      	b.n	8010fbe <_dtoa_r+0x5ae>
 8010f68:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010f6c:	e7d6      	b.n	8010f1c <_dtoa_r+0x50c>
 8010f6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f72:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010f76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010f7a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010f7e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010f82:	ee15 3a10 	vmov	r3, s10
 8010f86:	3330      	adds	r3, #48	; 0x30
 8010f88:	f808 3b01 	strb.w	r3, [r8], #1
 8010f8c:	9b01      	ldr	r3, [sp, #4]
 8010f8e:	eba8 0303 	sub.w	r3, r8, r3
 8010f92:	4599      	cmp	r9, r3
 8010f94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010f98:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010f9c:	d133      	bne.n	8011006 <_dtoa_r+0x5f6>
 8010f9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010fa2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010faa:	dc1a      	bgt.n	8010fe2 <_dtoa_r+0x5d2>
 8010fac:	eeb4 7b46 	vcmp.f64	d7, d6
 8010fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb4:	d103      	bne.n	8010fbe <_dtoa_r+0x5ae>
 8010fb6:	ee15 3a10 	vmov	r3, s10
 8010fba:	07d9      	lsls	r1, r3, #31
 8010fbc:	d411      	bmi.n	8010fe2 <_dtoa_r+0x5d2>
 8010fbe:	4629      	mov	r1, r5
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f000 fbd1 	bl	8011768 <_Bfree>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fca:	f888 3000 	strb.w	r3, [r8]
 8010fce:	f10b 0301 	add.w	r3, fp, #1
 8010fd2:	6013      	str	r3, [r2, #0]
 8010fd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	f43f ad69 	beq.w	8010aae <_dtoa_r+0x9e>
 8010fdc:	f8c3 8000 	str.w	r8, [r3]
 8010fe0:	e565      	b.n	8010aae <_dtoa_r+0x9e>
 8010fe2:	465a      	mov	r2, fp
 8010fe4:	4643      	mov	r3, r8
 8010fe6:	4698      	mov	r8, r3
 8010fe8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8010fec:	2939      	cmp	r1, #57	; 0x39
 8010fee:	d106      	bne.n	8010ffe <_dtoa_r+0x5ee>
 8010ff0:	9901      	ldr	r1, [sp, #4]
 8010ff2:	4299      	cmp	r1, r3
 8010ff4:	d1f7      	bne.n	8010fe6 <_dtoa_r+0x5d6>
 8010ff6:	9801      	ldr	r0, [sp, #4]
 8010ff8:	2130      	movs	r1, #48	; 0x30
 8010ffa:	3201      	adds	r2, #1
 8010ffc:	7001      	strb	r1, [r0, #0]
 8010ffe:	7819      	ldrb	r1, [r3, #0]
 8011000:	3101      	adds	r1, #1
 8011002:	7019      	strb	r1, [r3, #0]
 8011004:	e7ae      	b.n	8010f64 <_dtoa_r+0x554>
 8011006:	ee27 7b04 	vmul.f64	d7, d7, d4
 801100a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011012:	d1b2      	bne.n	8010f7a <_dtoa_r+0x56a>
 8011014:	e7d3      	b.n	8010fbe <_dtoa_r+0x5ae>
 8011016:	bf00      	nop
 8011018:	08012c10 	.word	0x08012c10
 801101c:	08012be8 	.word	0x08012be8
 8011020:	9907      	ldr	r1, [sp, #28]
 8011022:	2900      	cmp	r1, #0
 8011024:	f000 80d0 	beq.w	80111c8 <_dtoa_r+0x7b8>
 8011028:	9906      	ldr	r1, [sp, #24]
 801102a:	2901      	cmp	r1, #1
 801102c:	f300 80b4 	bgt.w	8011198 <_dtoa_r+0x788>
 8011030:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011032:	2900      	cmp	r1, #0
 8011034:	f000 80ac 	beq.w	8011190 <_dtoa_r+0x780>
 8011038:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801103c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011040:	461c      	mov	r4, r3
 8011042:	9309      	str	r3, [sp, #36]	; 0x24
 8011044:	9b04      	ldr	r3, [sp, #16]
 8011046:	4413      	add	r3, r2
 8011048:	9304      	str	r3, [sp, #16]
 801104a:	9b05      	ldr	r3, [sp, #20]
 801104c:	2101      	movs	r1, #1
 801104e:	4413      	add	r3, r2
 8011050:	4630      	mov	r0, r6
 8011052:	9305      	str	r3, [sp, #20]
 8011054:	f000 fc3e 	bl	80118d4 <__i2b>
 8011058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801105a:	4607      	mov	r7, r0
 801105c:	f1b8 0f00 	cmp.w	r8, #0
 8011060:	d00d      	beq.n	801107e <_dtoa_r+0x66e>
 8011062:	9a05      	ldr	r2, [sp, #20]
 8011064:	2a00      	cmp	r2, #0
 8011066:	dd0a      	ble.n	801107e <_dtoa_r+0x66e>
 8011068:	4542      	cmp	r2, r8
 801106a:	9904      	ldr	r1, [sp, #16]
 801106c:	bfa8      	it	ge
 801106e:	4642      	movge	r2, r8
 8011070:	1a89      	subs	r1, r1, r2
 8011072:	9104      	str	r1, [sp, #16]
 8011074:	9905      	ldr	r1, [sp, #20]
 8011076:	eba8 0802 	sub.w	r8, r8, r2
 801107a:	1a8a      	subs	r2, r1, r2
 801107c:	9205      	str	r2, [sp, #20]
 801107e:	b303      	cbz	r3, 80110c2 <_dtoa_r+0x6b2>
 8011080:	9a07      	ldr	r2, [sp, #28]
 8011082:	2a00      	cmp	r2, #0
 8011084:	f000 80a5 	beq.w	80111d2 <_dtoa_r+0x7c2>
 8011088:	2c00      	cmp	r4, #0
 801108a:	dd13      	ble.n	80110b4 <_dtoa_r+0x6a4>
 801108c:	4639      	mov	r1, r7
 801108e:	4622      	mov	r2, r4
 8011090:	4630      	mov	r0, r6
 8011092:	930d      	str	r3, [sp, #52]	; 0x34
 8011094:	f000 fcde 	bl	8011a54 <__pow5mult>
 8011098:	462a      	mov	r2, r5
 801109a:	4601      	mov	r1, r0
 801109c:	4607      	mov	r7, r0
 801109e:	4630      	mov	r0, r6
 80110a0:	f000 fc2e 	bl	8011900 <__multiply>
 80110a4:	4629      	mov	r1, r5
 80110a6:	9009      	str	r0, [sp, #36]	; 0x24
 80110a8:	4630      	mov	r0, r6
 80110aa:	f000 fb5d 	bl	8011768 <_Bfree>
 80110ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110b2:	4615      	mov	r5, r2
 80110b4:	1b1a      	subs	r2, r3, r4
 80110b6:	d004      	beq.n	80110c2 <_dtoa_r+0x6b2>
 80110b8:	4629      	mov	r1, r5
 80110ba:	4630      	mov	r0, r6
 80110bc:	f000 fcca 	bl	8011a54 <__pow5mult>
 80110c0:	4605      	mov	r5, r0
 80110c2:	2101      	movs	r1, #1
 80110c4:	4630      	mov	r0, r6
 80110c6:	f000 fc05 	bl	80118d4 <__i2b>
 80110ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	4604      	mov	r4, r0
 80110d0:	f340 8081 	ble.w	80111d6 <_dtoa_r+0x7c6>
 80110d4:	461a      	mov	r2, r3
 80110d6:	4601      	mov	r1, r0
 80110d8:	4630      	mov	r0, r6
 80110da:	f000 fcbb 	bl	8011a54 <__pow5mult>
 80110de:	9b06      	ldr	r3, [sp, #24]
 80110e0:	2b01      	cmp	r3, #1
 80110e2:	4604      	mov	r4, r0
 80110e4:	dd7a      	ble.n	80111dc <_dtoa_r+0x7cc>
 80110e6:	2300      	movs	r3, #0
 80110e8:	9309      	str	r3, [sp, #36]	; 0x24
 80110ea:	6922      	ldr	r2, [r4, #16]
 80110ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80110f0:	6910      	ldr	r0, [r2, #16]
 80110f2:	f000 fba1 	bl	8011838 <__hi0bits>
 80110f6:	f1c0 0020 	rsb	r0, r0, #32
 80110fa:	9b05      	ldr	r3, [sp, #20]
 80110fc:	4418      	add	r0, r3
 80110fe:	f010 001f 	ands.w	r0, r0, #31
 8011102:	f000 8093 	beq.w	801122c <_dtoa_r+0x81c>
 8011106:	f1c0 0220 	rsb	r2, r0, #32
 801110a:	2a04      	cmp	r2, #4
 801110c:	f340 8085 	ble.w	801121a <_dtoa_r+0x80a>
 8011110:	9b04      	ldr	r3, [sp, #16]
 8011112:	f1c0 001c 	rsb	r0, r0, #28
 8011116:	4403      	add	r3, r0
 8011118:	9304      	str	r3, [sp, #16]
 801111a:	9b05      	ldr	r3, [sp, #20]
 801111c:	4480      	add	r8, r0
 801111e:	4403      	add	r3, r0
 8011120:	9305      	str	r3, [sp, #20]
 8011122:	9b04      	ldr	r3, [sp, #16]
 8011124:	2b00      	cmp	r3, #0
 8011126:	dd05      	ble.n	8011134 <_dtoa_r+0x724>
 8011128:	4629      	mov	r1, r5
 801112a:	461a      	mov	r2, r3
 801112c:	4630      	mov	r0, r6
 801112e:	f000 fceb 	bl	8011b08 <__lshift>
 8011132:	4605      	mov	r5, r0
 8011134:	9b05      	ldr	r3, [sp, #20]
 8011136:	2b00      	cmp	r3, #0
 8011138:	dd05      	ble.n	8011146 <_dtoa_r+0x736>
 801113a:	4621      	mov	r1, r4
 801113c:	461a      	mov	r2, r3
 801113e:	4630      	mov	r0, r6
 8011140:	f000 fce2 	bl	8011b08 <__lshift>
 8011144:	4604      	mov	r4, r0
 8011146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011148:	2b00      	cmp	r3, #0
 801114a:	d071      	beq.n	8011230 <_dtoa_r+0x820>
 801114c:	4621      	mov	r1, r4
 801114e:	4628      	mov	r0, r5
 8011150:	f000 fd46 	bl	8011be0 <__mcmp>
 8011154:	2800      	cmp	r0, #0
 8011156:	da6b      	bge.n	8011230 <_dtoa_r+0x820>
 8011158:	2300      	movs	r3, #0
 801115a:	4629      	mov	r1, r5
 801115c:	220a      	movs	r2, #10
 801115e:	4630      	mov	r0, r6
 8011160:	f000 fb24 	bl	80117ac <__multadd>
 8011164:	9b07      	ldr	r3, [sp, #28]
 8011166:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801116a:	4605      	mov	r5, r0
 801116c:	2b00      	cmp	r3, #0
 801116e:	f000 8197 	beq.w	80114a0 <_dtoa_r+0xa90>
 8011172:	4639      	mov	r1, r7
 8011174:	2300      	movs	r3, #0
 8011176:	220a      	movs	r2, #10
 8011178:	4630      	mov	r0, r6
 801117a:	f000 fb17 	bl	80117ac <__multadd>
 801117e:	f1ba 0f00 	cmp.w	sl, #0
 8011182:	4607      	mov	r7, r0
 8011184:	f300 8093 	bgt.w	80112ae <_dtoa_r+0x89e>
 8011188:	9b06      	ldr	r3, [sp, #24]
 801118a:	2b02      	cmp	r3, #2
 801118c:	dc57      	bgt.n	801123e <_dtoa_r+0x82e>
 801118e:	e08e      	b.n	80112ae <_dtoa_r+0x89e>
 8011190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011192:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011196:	e751      	b.n	801103c <_dtoa_r+0x62c>
 8011198:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801119c:	42a3      	cmp	r3, r4
 801119e:	bfbf      	itttt	lt
 80111a0:	1ae2      	sublt	r2, r4, r3
 80111a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80111a4:	189b      	addlt	r3, r3, r2
 80111a6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80111a8:	bfae      	itee	ge
 80111aa:	1b1c      	subge	r4, r3, r4
 80111ac:	4623      	movlt	r3, r4
 80111ae:	2400      	movlt	r4, #0
 80111b0:	f1b9 0f00 	cmp.w	r9, #0
 80111b4:	bfb5      	itete	lt
 80111b6:	9a04      	ldrlt	r2, [sp, #16]
 80111b8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80111bc:	eba2 0809 	sublt.w	r8, r2, r9
 80111c0:	464a      	movge	r2, r9
 80111c2:	bfb8      	it	lt
 80111c4:	2200      	movlt	r2, #0
 80111c6:	e73c      	b.n	8011042 <_dtoa_r+0x632>
 80111c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80111cc:	9f07      	ldr	r7, [sp, #28]
 80111ce:	461c      	mov	r4, r3
 80111d0:	e744      	b.n	801105c <_dtoa_r+0x64c>
 80111d2:	461a      	mov	r2, r3
 80111d4:	e770      	b.n	80110b8 <_dtoa_r+0x6a8>
 80111d6:	9b06      	ldr	r3, [sp, #24]
 80111d8:	2b01      	cmp	r3, #1
 80111da:	dc18      	bgt.n	801120e <_dtoa_r+0x7fe>
 80111dc:	9b02      	ldr	r3, [sp, #8]
 80111de:	b9b3      	cbnz	r3, 801120e <_dtoa_r+0x7fe>
 80111e0:	9b03      	ldr	r3, [sp, #12]
 80111e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80111e6:	b9a2      	cbnz	r2, 8011212 <_dtoa_r+0x802>
 80111e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80111ec:	0d12      	lsrs	r2, r2, #20
 80111ee:	0512      	lsls	r2, r2, #20
 80111f0:	b18a      	cbz	r2, 8011216 <_dtoa_r+0x806>
 80111f2:	9b04      	ldr	r3, [sp, #16]
 80111f4:	3301      	adds	r3, #1
 80111f6:	9304      	str	r3, [sp, #16]
 80111f8:	9b05      	ldr	r3, [sp, #20]
 80111fa:	3301      	adds	r3, #1
 80111fc:	9305      	str	r3, [sp, #20]
 80111fe:	2301      	movs	r3, #1
 8011200:	9309      	str	r3, [sp, #36]	; 0x24
 8011202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011204:	2b00      	cmp	r3, #0
 8011206:	f47f af70 	bne.w	80110ea <_dtoa_r+0x6da>
 801120a:	2001      	movs	r0, #1
 801120c:	e775      	b.n	80110fa <_dtoa_r+0x6ea>
 801120e:	2300      	movs	r3, #0
 8011210:	e7f6      	b.n	8011200 <_dtoa_r+0x7f0>
 8011212:	9b02      	ldr	r3, [sp, #8]
 8011214:	e7f4      	b.n	8011200 <_dtoa_r+0x7f0>
 8011216:	9209      	str	r2, [sp, #36]	; 0x24
 8011218:	e7f3      	b.n	8011202 <_dtoa_r+0x7f2>
 801121a:	d082      	beq.n	8011122 <_dtoa_r+0x712>
 801121c:	9b04      	ldr	r3, [sp, #16]
 801121e:	321c      	adds	r2, #28
 8011220:	4413      	add	r3, r2
 8011222:	9304      	str	r3, [sp, #16]
 8011224:	9b05      	ldr	r3, [sp, #20]
 8011226:	4490      	add	r8, r2
 8011228:	4413      	add	r3, r2
 801122a:	e779      	b.n	8011120 <_dtoa_r+0x710>
 801122c:	4602      	mov	r2, r0
 801122e:	e7f5      	b.n	801121c <_dtoa_r+0x80c>
 8011230:	f1b9 0f00 	cmp.w	r9, #0
 8011234:	dc36      	bgt.n	80112a4 <_dtoa_r+0x894>
 8011236:	9b06      	ldr	r3, [sp, #24]
 8011238:	2b02      	cmp	r3, #2
 801123a:	dd33      	ble.n	80112a4 <_dtoa_r+0x894>
 801123c:	46ca      	mov	sl, r9
 801123e:	f1ba 0f00 	cmp.w	sl, #0
 8011242:	d10d      	bne.n	8011260 <_dtoa_r+0x850>
 8011244:	4621      	mov	r1, r4
 8011246:	4653      	mov	r3, sl
 8011248:	2205      	movs	r2, #5
 801124a:	4630      	mov	r0, r6
 801124c:	f000 faae 	bl	80117ac <__multadd>
 8011250:	4601      	mov	r1, r0
 8011252:	4604      	mov	r4, r0
 8011254:	4628      	mov	r0, r5
 8011256:	f000 fcc3 	bl	8011be0 <__mcmp>
 801125a:	2800      	cmp	r0, #0
 801125c:	f73f ade4 	bgt.w	8010e28 <_dtoa_r+0x418>
 8011260:	9b08      	ldr	r3, [sp, #32]
 8011262:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011266:	ea6f 0b03 	mvn.w	fp, r3
 801126a:	f04f 0900 	mov.w	r9, #0
 801126e:	4621      	mov	r1, r4
 8011270:	4630      	mov	r0, r6
 8011272:	f000 fa79 	bl	8011768 <_Bfree>
 8011276:	2f00      	cmp	r7, #0
 8011278:	f43f aea1 	beq.w	8010fbe <_dtoa_r+0x5ae>
 801127c:	f1b9 0f00 	cmp.w	r9, #0
 8011280:	d005      	beq.n	801128e <_dtoa_r+0x87e>
 8011282:	45b9      	cmp	r9, r7
 8011284:	d003      	beq.n	801128e <_dtoa_r+0x87e>
 8011286:	4649      	mov	r1, r9
 8011288:	4630      	mov	r0, r6
 801128a:	f000 fa6d 	bl	8011768 <_Bfree>
 801128e:	4639      	mov	r1, r7
 8011290:	4630      	mov	r0, r6
 8011292:	f000 fa69 	bl	8011768 <_Bfree>
 8011296:	e692      	b.n	8010fbe <_dtoa_r+0x5ae>
 8011298:	2400      	movs	r4, #0
 801129a:	4627      	mov	r7, r4
 801129c:	e7e0      	b.n	8011260 <_dtoa_r+0x850>
 801129e:	4693      	mov	fp, r2
 80112a0:	4627      	mov	r7, r4
 80112a2:	e5c1      	b.n	8010e28 <_dtoa_r+0x418>
 80112a4:	9b07      	ldr	r3, [sp, #28]
 80112a6:	46ca      	mov	sl, r9
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f000 8100 	beq.w	80114ae <_dtoa_r+0xa9e>
 80112ae:	f1b8 0f00 	cmp.w	r8, #0
 80112b2:	dd05      	ble.n	80112c0 <_dtoa_r+0x8b0>
 80112b4:	4639      	mov	r1, r7
 80112b6:	4642      	mov	r2, r8
 80112b8:	4630      	mov	r0, r6
 80112ba:	f000 fc25 	bl	8011b08 <__lshift>
 80112be:	4607      	mov	r7, r0
 80112c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d05d      	beq.n	8011382 <_dtoa_r+0x972>
 80112c6:	6879      	ldr	r1, [r7, #4]
 80112c8:	4630      	mov	r0, r6
 80112ca:	f000 fa0d 	bl	80116e8 <_Balloc>
 80112ce:	4680      	mov	r8, r0
 80112d0:	b928      	cbnz	r0, 80112de <_dtoa_r+0x8ce>
 80112d2:	4b82      	ldr	r3, [pc, #520]	; (80114dc <_dtoa_r+0xacc>)
 80112d4:	4602      	mov	r2, r0
 80112d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80112da:	f7ff bbb1 	b.w	8010a40 <_dtoa_r+0x30>
 80112de:	693a      	ldr	r2, [r7, #16]
 80112e0:	3202      	adds	r2, #2
 80112e2:	0092      	lsls	r2, r2, #2
 80112e4:	f107 010c 	add.w	r1, r7, #12
 80112e8:	300c      	adds	r0, #12
 80112ea:	f7ff faf8 	bl	80108de <memcpy>
 80112ee:	2201      	movs	r2, #1
 80112f0:	4641      	mov	r1, r8
 80112f2:	4630      	mov	r0, r6
 80112f4:	f000 fc08 	bl	8011b08 <__lshift>
 80112f8:	9b01      	ldr	r3, [sp, #4]
 80112fa:	3301      	adds	r3, #1
 80112fc:	9304      	str	r3, [sp, #16]
 80112fe:	9b01      	ldr	r3, [sp, #4]
 8011300:	4453      	add	r3, sl
 8011302:	9308      	str	r3, [sp, #32]
 8011304:	9b02      	ldr	r3, [sp, #8]
 8011306:	f003 0301 	and.w	r3, r3, #1
 801130a:	46b9      	mov	r9, r7
 801130c:	9307      	str	r3, [sp, #28]
 801130e:	4607      	mov	r7, r0
 8011310:	9b04      	ldr	r3, [sp, #16]
 8011312:	4621      	mov	r1, r4
 8011314:	3b01      	subs	r3, #1
 8011316:	4628      	mov	r0, r5
 8011318:	9302      	str	r3, [sp, #8]
 801131a:	f7ff faee 	bl	80108fa <quorem>
 801131e:	4603      	mov	r3, r0
 8011320:	3330      	adds	r3, #48	; 0x30
 8011322:	9005      	str	r0, [sp, #20]
 8011324:	4649      	mov	r1, r9
 8011326:	4628      	mov	r0, r5
 8011328:	9309      	str	r3, [sp, #36]	; 0x24
 801132a:	f000 fc59 	bl	8011be0 <__mcmp>
 801132e:	463a      	mov	r2, r7
 8011330:	4682      	mov	sl, r0
 8011332:	4621      	mov	r1, r4
 8011334:	4630      	mov	r0, r6
 8011336:	f000 fc6f 	bl	8011c18 <__mdiff>
 801133a:	68c2      	ldr	r2, [r0, #12]
 801133c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801133e:	4680      	mov	r8, r0
 8011340:	bb0a      	cbnz	r2, 8011386 <_dtoa_r+0x976>
 8011342:	4601      	mov	r1, r0
 8011344:	4628      	mov	r0, r5
 8011346:	f000 fc4b 	bl	8011be0 <__mcmp>
 801134a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801134c:	4602      	mov	r2, r0
 801134e:	4641      	mov	r1, r8
 8011350:	4630      	mov	r0, r6
 8011352:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8011356:	f000 fa07 	bl	8011768 <_Bfree>
 801135a:	9b06      	ldr	r3, [sp, #24]
 801135c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801135e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011362:	ea43 0102 	orr.w	r1, r3, r2
 8011366:	9b07      	ldr	r3, [sp, #28]
 8011368:	4319      	orrs	r1, r3
 801136a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801136c:	d10d      	bne.n	801138a <_dtoa_r+0x97a>
 801136e:	2b39      	cmp	r3, #57	; 0x39
 8011370:	d029      	beq.n	80113c6 <_dtoa_r+0x9b6>
 8011372:	f1ba 0f00 	cmp.w	sl, #0
 8011376:	dd01      	ble.n	801137c <_dtoa_r+0x96c>
 8011378:	9b05      	ldr	r3, [sp, #20]
 801137a:	3331      	adds	r3, #49	; 0x31
 801137c:	9a02      	ldr	r2, [sp, #8]
 801137e:	7013      	strb	r3, [r2, #0]
 8011380:	e775      	b.n	801126e <_dtoa_r+0x85e>
 8011382:	4638      	mov	r0, r7
 8011384:	e7b8      	b.n	80112f8 <_dtoa_r+0x8e8>
 8011386:	2201      	movs	r2, #1
 8011388:	e7e1      	b.n	801134e <_dtoa_r+0x93e>
 801138a:	f1ba 0f00 	cmp.w	sl, #0
 801138e:	db06      	blt.n	801139e <_dtoa_r+0x98e>
 8011390:	9906      	ldr	r1, [sp, #24]
 8011392:	ea41 0a0a 	orr.w	sl, r1, sl
 8011396:	9907      	ldr	r1, [sp, #28]
 8011398:	ea5a 0a01 	orrs.w	sl, sl, r1
 801139c:	d120      	bne.n	80113e0 <_dtoa_r+0x9d0>
 801139e:	2a00      	cmp	r2, #0
 80113a0:	ddec      	ble.n	801137c <_dtoa_r+0x96c>
 80113a2:	4629      	mov	r1, r5
 80113a4:	2201      	movs	r2, #1
 80113a6:	4630      	mov	r0, r6
 80113a8:	9304      	str	r3, [sp, #16]
 80113aa:	f000 fbad 	bl	8011b08 <__lshift>
 80113ae:	4621      	mov	r1, r4
 80113b0:	4605      	mov	r5, r0
 80113b2:	f000 fc15 	bl	8011be0 <__mcmp>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	9b04      	ldr	r3, [sp, #16]
 80113ba:	dc02      	bgt.n	80113c2 <_dtoa_r+0x9b2>
 80113bc:	d1de      	bne.n	801137c <_dtoa_r+0x96c>
 80113be:	07da      	lsls	r2, r3, #31
 80113c0:	d5dc      	bpl.n	801137c <_dtoa_r+0x96c>
 80113c2:	2b39      	cmp	r3, #57	; 0x39
 80113c4:	d1d8      	bne.n	8011378 <_dtoa_r+0x968>
 80113c6:	9a02      	ldr	r2, [sp, #8]
 80113c8:	2339      	movs	r3, #57	; 0x39
 80113ca:	7013      	strb	r3, [r2, #0]
 80113cc:	4643      	mov	r3, r8
 80113ce:	4698      	mov	r8, r3
 80113d0:	3b01      	subs	r3, #1
 80113d2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80113d6:	2a39      	cmp	r2, #57	; 0x39
 80113d8:	d051      	beq.n	801147e <_dtoa_r+0xa6e>
 80113da:	3201      	adds	r2, #1
 80113dc:	701a      	strb	r2, [r3, #0]
 80113de:	e746      	b.n	801126e <_dtoa_r+0x85e>
 80113e0:	2a00      	cmp	r2, #0
 80113e2:	dd03      	ble.n	80113ec <_dtoa_r+0x9dc>
 80113e4:	2b39      	cmp	r3, #57	; 0x39
 80113e6:	d0ee      	beq.n	80113c6 <_dtoa_r+0x9b6>
 80113e8:	3301      	adds	r3, #1
 80113ea:	e7c7      	b.n	801137c <_dtoa_r+0x96c>
 80113ec:	9a04      	ldr	r2, [sp, #16]
 80113ee:	9908      	ldr	r1, [sp, #32]
 80113f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80113f4:	428a      	cmp	r2, r1
 80113f6:	d02b      	beq.n	8011450 <_dtoa_r+0xa40>
 80113f8:	4629      	mov	r1, r5
 80113fa:	2300      	movs	r3, #0
 80113fc:	220a      	movs	r2, #10
 80113fe:	4630      	mov	r0, r6
 8011400:	f000 f9d4 	bl	80117ac <__multadd>
 8011404:	45b9      	cmp	r9, r7
 8011406:	4605      	mov	r5, r0
 8011408:	f04f 0300 	mov.w	r3, #0
 801140c:	f04f 020a 	mov.w	r2, #10
 8011410:	4649      	mov	r1, r9
 8011412:	4630      	mov	r0, r6
 8011414:	d107      	bne.n	8011426 <_dtoa_r+0xa16>
 8011416:	f000 f9c9 	bl	80117ac <__multadd>
 801141a:	4681      	mov	r9, r0
 801141c:	4607      	mov	r7, r0
 801141e:	9b04      	ldr	r3, [sp, #16]
 8011420:	3301      	adds	r3, #1
 8011422:	9304      	str	r3, [sp, #16]
 8011424:	e774      	b.n	8011310 <_dtoa_r+0x900>
 8011426:	f000 f9c1 	bl	80117ac <__multadd>
 801142a:	4639      	mov	r1, r7
 801142c:	4681      	mov	r9, r0
 801142e:	2300      	movs	r3, #0
 8011430:	220a      	movs	r2, #10
 8011432:	4630      	mov	r0, r6
 8011434:	f000 f9ba 	bl	80117ac <__multadd>
 8011438:	4607      	mov	r7, r0
 801143a:	e7f0      	b.n	801141e <_dtoa_r+0xa0e>
 801143c:	f1ba 0f00 	cmp.w	sl, #0
 8011440:	9a01      	ldr	r2, [sp, #4]
 8011442:	bfcc      	ite	gt
 8011444:	46d0      	movgt	r8, sl
 8011446:	f04f 0801 	movle.w	r8, #1
 801144a:	4490      	add	r8, r2
 801144c:	f04f 0900 	mov.w	r9, #0
 8011450:	4629      	mov	r1, r5
 8011452:	2201      	movs	r2, #1
 8011454:	4630      	mov	r0, r6
 8011456:	9302      	str	r3, [sp, #8]
 8011458:	f000 fb56 	bl	8011b08 <__lshift>
 801145c:	4621      	mov	r1, r4
 801145e:	4605      	mov	r5, r0
 8011460:	f000 fbbe 	bl	8011be0 <__mcmp>
 8011464:	2800      	cmp	r0, #0
 8011466:	dcb1      	bgt.n	80113cc <_dtoa_r+0x9bc>
 8011468:	d102      	bne.n	8011470 <_dtoa_r+0xa60>
 801146a:	9b02      	ldr	r3, [sp, #8]
 801146c:	07db      	lsls	r3, r3, #31
 801146e:	d4ad      	bmi.n	80113cc <_dtoa_r+0x9bc>
 8011470:	4643      	mov	r3, r8
 8011472:	4698      	mov	r8, r3
 8011474:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011478:	2a30      	cmp	r2, #48	; 0x30
 801147a:	d0fa      	beq.n	8011472 <_dtoa_r+0xa62>
 801147c:	e6f7      	b.n	801126e <_dtoa_r+0x85e>
 801147e:	9a01      	ldr	r2, [sp, #4]
 8011480:	429a      	cmp	r2, r3
 8011482:	d1a4      	bne.n	80113ce <_dtoa_r+0x9be>
 8011484:	f10b 0b01 	add.w	fp, fp, #1
 8011488:	2331      	movs	r3, #49	; 0x31
 801148a:	e778      	b.n	801137e <_dtoa_r+0x96e>
 801148c:	4b14      	ldr	r3, [pc, #80]	; (80114e0 <_dtoa_r+0xad0>)
 801148e:	f7ff bb2a 	b.w	8010ae6 <_dtoa_r+0xd6>
 8011492:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011494:	2b00      	cmp	r3, #0
 8011496:	f47f ab05 	bne.w	8010aa4 <_dtoa_r+0x94>
 801149a:	4b12      	ldr	r3, [pc, #72]	; (80114e4 <_dtoa_r+0xad4>)
 801149c:	f7ff bb23 	b.w	8010ae6 <_dtoa_r+0xd6>
 80114a0:	f1ba 0f00 	cmp.w	sl, #0
 80114a4:	dc03      	bgt.n	80114ae <_dtoa_r+0xa9e>
 80114a6:	9b06      	ldr	r3, [sp, #24]
 80114a8:	2b02      	cmp	r3, #2
 80114aa:	f73f aec8 	bgt.w	801123e <_dtoa_r+0x82e>
 80114ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80114b2:	4621      	mov	r1, r4
 80114b4:	4628      	mov	r0, r5
 80114b6:	f7ff fa20 	bl	80108fa <quorem>
 80114ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80114be:	f808 3b01 	strb.w	r3, [r8], #1
 80114c2:	9a01      	ldr	r2, [sp, #4]
 80114c4:	eba8 0202 	sub.w	r2, r8, r2
 80114c8:	4592      	cmp	sl, r2
 80114ca:	ddb7      	ble.n	801143c <_dtoa_r+0xa2c>
 80114cc:	4629      	mov	r1, r5
 80114ce:	2300      	movs	r3, #0
 80114d0:	220a      	movs	r2, #10
 80114d2:	4630      	mov	r0, r6
 80114d4:	f000 f96a 	bl	80117ac <__multadd>
 80114d8:	4605      	mov	r5, r0
 80114da:	e7ea      	b.n	80114b2 <_dtoa_r+0xaa2>
 80114dc:	08012b7c 	.word	0x08012b7c
 80114e0:	08012adc 	.word	0x08012adc
 80114e4:	08012b00 	.word	0x08012b00

080114e8 <_free_r>:
 80114e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114ea:	2900      	cmp	r1, #0
 80114ec:	d044      	beq.n	8011578 <_free_r+0x90>
 80114ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114f2:	9001      	str	r0, [sp, #4]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	f1a1 0404 	sub.w	r4, r1, #4
 80114fa:	bfb8      	it	lt
 80114fc:	18e4      	addlt	r4, r4, r3
 80114fe:	f000 f8e7 	bl	80116d0 <__malloc_lock>
 8011502:	4a1e      	ldr	r2, [pc, #120]	; (801157c <_free_r+0x94>)
 8011504:	9801      	ldr	r0, [sp, #4]
 8011506:	6813      	ldr	r3, [r2, #0]
 8011508:	b933      	cbnz	r3, 8011518 <_free_r+0x30>
 801150a:	6063      	str	r3, [r4, #4]
 801150c:	6014      	str	r4, [r2, #0]
 801150e:	b003      	add	sp, #12
 8011510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011514:	f000 b8e2 	b.w	80116dc <__malloc_unlock>
 8011518:	42a3      	cmp	r3, r4
 801151a:	d908      	bls.n	801152e <_free_r+0x46>
 801151c:	6825      	ldr	r5, [r4, #0]
 801151e:	1961      	adds	r1, r4, r5
 8011520:	428b      	cmp	r3, r1
 8011522:	bf01      	itttt	eq
 8011524:	6819      	ldreq	r1, [r3, #0]
 8011526:	685b      	ldreq	r3, [r3, #4]
 8011528:	1949      	addeq	r1, r1, r5
 801152a:	6021      	streq	r1, [r4, #0]
 801152c:	e7ed      	b.n	801150a <_free_r+0x22>
 801152e:	461a      	mov	r2, r3
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	b10b      	cbz	r3, 8011538 <_free_r+0x50>
 8011534:	42a3      	cmp	r3, r4
 8011536:	d9fa      	bls.n	801152e <_free_r+0x46>
 8011538:	6811      	ldr	r1, [r2, #0]
 801153a:	1855      	adds	r5, r2, r1
 801153c:	42a5      	cmp	r5, r4
 801153e:	d10b      	bne.n	8011558 <_free_r+0x70>
 8011540:	6824      	ldr	r4, [r4, #0]
 8011542:	4421      	add	r1, r4
 8011544:	1854      	adds	r4, r2, r1
 8011546:	42a3      	cmp	r3, r4
 8011548:	6011      	str	r1, [r2, #0]
 801154a:	d1e0      	bne.n	801150e <_free_r+0x26>
 801154c:	681c      	ldr	r4, [r3, #0]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	6053      	str	r3, [r2, #4]
 8011552:	440c      	add	r4, r1
 8011554:	6014      	str	r4, [r2, #0]
 8011556:	e7da      	b.n	801150e <_free_r+0x26>
 8011558:	d902      	bls.n	8011560 <_free_r+0x78>
 801155a:	230c      	movs	r3, #12
 801155c:	6003      	str	r3, [r0, #0]
 801155e:	e7d6      	b.n	801150e <_free_r+0x26>
 8011560:	6825      	ldr	r5, [r4, #0]
 8011562:	1961      	adds	r1, r4, r5
 8011564:	428b      	cmp	r3, r1
 8011566:	bf04      	itt	eq
 8011568:	6819      	ldreq	r1, [r3, #0]
 801156a:	685b      	ldreq	r3, [r3, #4]
 801156c:	6063      	str	r3, [r4, #4]
 801156e:	bf04      	itt	eq
 8011570:	1949      	addeq	r1, r1, r5
 8011572:	6021      	streq	r1, [r4, #0]
 8011574:	6054      	str	r4, [r2, #4]
 8011576:	e7ca      	b.n	801150e <_free_r+0x26>
 8011578:	b003      	add	sp, #12
 801157a:	bd30      	pop	{r4, r5, pc}
 801157c:	240009a8 	.word	0x240009a8

08011580 <malloc>:
 8011580:	4b02      	ldr	r3, [pc, #8]	; (801158c <malloc+0xc>)
 8011582:	4601      	mov	r1, r0
 8011584:	6818      	ldr	r0, [r3, #0]
 8011586:	f000 b823 	b.w	80115d0 <_malloc_r>
 801158a:	bf00      	nop
 801158c:	2400006c 	.word	0x2400006c

08011590 <sbrk_aligned>:
 8011590:	b570      	push	{r4, r5, r6, lr}
 8011592:	4e0e      	ldr	r6, [pc, #56]	; (80115cc <sbrk_aligned+0x3c>)
 8011594:	460c      	mov	r4, r1
 8011596:	6831      	ldr	r1, [r6, #0]
 8011598:	4605      	mov	r5, r0
 801159a:	b911      	cbnz	r1, 80115a2 <sbrk_aligned+0x12>
 801159c:	f000 fe40 	bl	8012220 <_sbrk_r>
 80115a0:	6030      	str	r0, [r6, #0]
 80115a2:	4621      	mov	r1, r4
 80115a4:	4628      	mov	r0, r5
 80115a6:	f000 fe3b 	bl	8012220 <_sbrk_r>
 80115aa:	1c43      	adds	r3, r0, #1
 80115ac:	d00a      	beq.n	80115c4 <sbrk_aligned+0x34>
 80115ae:	1cc4      	adds	r4, r0, #3
 80115b0:	f024 0403 	bic.w	r4, r4, #3
 80115b4:	42a0      	cmp	r0, r4
 80115b6:	d007      	beq.n	80115c8 <sbrk_aligned+0x38>
 80115b8:	1a21      	subs	r1, r4, r0
 80115ba:	4628      	mov	r0, r5
 80115bc:	f000 fe30 	bl	8012220 <_sbrk_r>
 80115c0:	3001      	adds	r0, #1
 80115c2:	d101      	bne.n	80115c8 <sbrk_aligned+0x38>
 80115c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80115c8:	4620      	mov	r0, r4
 80115ca:	bd70      	pop	{r4, r5, r6, pc}
 80115cc:	240009ac 	.word	0x240009ac

080115d0 <_malloc_r>:
 80115d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115d4:	1ccd      	adds	r5, r1, #3
 80115d6:	f025 0503 	bic.w	r5, r5, #3
 80115da:	3508      	adds	r5, #8
 80115dc:	2d0c      	cmp	r5, #12
 80115de:	bf38      	it	cc
 80115e0:	250c      	movcc	r5, #12
 80115e2:	2d00      	cmp	r5, #0
 80115e4:	4607      	mov	r7, r0
 80115e6:	db01      	blt.n	80115ec <_malloc_r+0x1c>
 80115e8:	42a9      	cmp	r1, r5
 80115ea:	d905      	bls.n	80115f8 <_malloc_r+0x28>
 80115ec:	230c      	movs	r3, #12
 80115ee:	603b      	str	r3, [r7, #0]
 80115f0:	2600      	movs	r6, #0
 80115f2:	4630      	mov	r0, r6
 80115f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80116cc <_malloc_r+0xfc>
 80115fc:	f000 f868 	bl	80116d0 <__malloc_lock>
 8011600:	f8d8 3000 	ldr.w	r3, [r8]
 8011604:	461c      	mov	r4, r3
 8011606:	bb5c      	cbnz	r4, 8011660 <_malloc_r+0x90>
 8011608:	4629      	mov	r1, r5
 801160a:	4638      	mov	r0, r7
 801160c:	f7ff ffc0 	bl	8011590 <sbrk_aligned>
 8011610:	1c43      	adds	r3, r0, #1
 8011612:	4604      	mov	r4, r0
 8011614:	d155      	bne.n	80116c2 <_malloc_r+0xf2>
 8011616:	f8d8 4000 	ldr.w	r4, [r8]
 801161a:	4626      	mov	r6, r4
 801161c:	2e00      	cmp	r6, #0
 801161e:	d145      	bne.n	80116ac <_malloc_r+0xdc>
 8011620:	2c00      	cmp	r4, #0
 8011622:	d048      	beq.n	80116b6 <_malloc_r+0xe6>
 8011624:	6823      	ldr	r3, [r4, #0]
 8011626:	4631      	mov	r1, r6
 8011628:	4638      	mov	r0, r7
 801162a:	eb04 0903 	add.w	r9, r4, r3
 801162e:	f000 fdf7 	bl	8012220 <_sbrk_r>
 8011632:	4581      	cmp	r9, r0
 8011634:	d13f      	bne.n	80116b6 <_malloc_r+0xe6>
 8011636:	6821      	ldr	r1, [r4, #0]
 8011638:	1a6d      	subs	r5, r5, r1
 801163a:	4629      	mov	r1, r5
 801163c:	4638      	mov	r0, r7
 801163e:	f7ff ffa7 	bl	8011590 <sbrk_aligned>
 8011642:	3001      	adds	r0, #1
 8011644:	d037      	beq.n	80116b6 <_malloc_r+0xe6>
 8011646:	6823      	ldr	r3, [r4, #0]
 8011648:	442b      	add	r3, r5
 801164a:	6023      	str	r3, [r4, #0]
 801164c:	f8d8 3000 	ldr.w	r3, [r8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d038      	beq.n	80116c6 <_malloc_r+0xf6>
 8011654:	685a      	ldr	r2, [r3, #4]
 8011656:	42a2      	cmp	r2, r4
 8011658:	d12b      	bne.n	80116b2 <_malloc_r+0xe2>
 801165a:	2200      	movs	r2, #0
 801165c:	605a      	str	r2, [r3, #4]
 801165e:	e00f      	b.n	8011680 <_malloc_r+0xb0>
 8011660:	6822      	ldr	r2, [r4, #0]
 8011662:	1b52      	subs	r2, r2, r5
 8011664:	d41f      	bmi.n	80116a6 <_malloc_r+0xd6>
 8011666:	2a0b      	cmp	r2, #11
 8011668:	d917      	bls.n	801169a <_malloc_r+0xca>
 801166a:	1961      	adds	r1, r4, r5
 801166c:	42a3      	cmp	r3, r4
 801166e:	6025      	str	r5, [r4, #0]
 8011670:	bf18      	it	ne
 8011672:	6059      	strne	r1, [r3, #4]
 8011674:	6863      	ldr	r3, [r4, #4]
 8011676:	bf08      	it	eq
 8011678:	f8c8 1000 	streq.w	r1, [r8]
 801167c:	5162      	str	r2, [r4, r5]
 801167e:	604b      	str	r3, [r1, #4]
 8011680:	4638      	mov	r0, r7
 8011682:	f104 060b 	add.w	r6, r4, #11
 8011686:	f000 f829 	bl	80116dc <__malloc_unlock>
 801168a:	f026 0607 	bic.w	r6, r6, #7
 801168e:	1d23      	adds	r3, r4, #4
 8011690:	1af2      	subs	r2, r6, r3
 8011692:	d0ae      	beq.n	80115f2 <_malloc_r+0x22>
 8011694:	1b9b      	subs	r3, r3, r6
 8011696:	50a3      	str	r3, [r4, r2]
 8011698:	e7ab      	b.n	80115f2 <_malloc_r+0x22>
 801169a:	42a3      	cmp	r3, r4
 801169c:	6862      	ldr	r2, [r4, #4]
 801169e:	d1dd      	bne.n	801165c <_malloc_r+0x8c>
 80116a0:	f8c8 2000 	str.w	r2, [r8]
 80116a4:	e7ec      	b.n	8011680 <_malloc_r+0xb0>
 80116a6:	4623      	mov	r3, r4
 80116a8:	6864      	ldr	r4, [r4, #4]
 80116aa:	e7ac      	b.n	8011606 <_malloc_r+0x36>
 80116ac:	4634      	mov	r4, r6
 80116ae:	6876      	ldr	r6, [r6, #4]
 80116b0:	e7b4      	b.n	801161c <_malloc_r+0x4c>
 80116b2:	4613      	mov	r3, r2
 80116b4:	e7cc      	b.n	8011650 <_malloc_r+0x80>
 80116b6:	230c      	movs	r3, #12
 80116b8:	603b      	str	r3, [r7, #0]
 80116ba:	4638      	mov	r0, r7
 80116bc:	f000 f80e 	bl	80116dc <__malloc_unlock>
 80116c0:	e797      	b.n	80115f2 <_malloc_r+0x22>
 80116c2:	6025      	str	r5, [r4, #0]
 80116c4:	e7dc      	b.n	8011680 <_malloc_r+0xb0>
 80116c6:	605b      	str	r3, [r3, #4]
 80116c8:	deff      	udf	#255	; 0xff
 80116ca:	bf00      	nop
 80116cc:	240009a8 	.word	0x240009a8

080116d0 <__malloc_lock>:
 80116d0:	4801      	ldr	r0, [pc, #4]	; (80116d8 <__malloc_lock+0x8>)
 80116d2:	f7ff b902 	b.w	80108da <__retarget_lock_acquire_recursive>
 80116d6:	bf00      	nop
 80116d8:	240009a4 	.word	0x240009a4

080116dc <__malloc_unlock>:
 80116dc:	4801      	ldr	r0, [pc, #4]	; (80116e4 <__malloc_unlock+0x8>)
 80116de:	f7ff b8fd 	b.w	80108dc <__retarget_lock_release_recursive>
 80116e2:	bf00      	nop
 80116e4:	240009a4 	.word	0x240009a4

080116e8 <_Balloc>:
 80116e8:	b570      	push	{r4, r5, r6, lr}
 80116ea:	69c6      	ldr	r6, [r0, #28]
 80116ec:	4604      	mov	r4, r0
 80116ee:	460d      	mov	r5, r1
 80116f0:	b976      	cbnz	r6, 8011710 <_Balloc+0x28>
 80116f2:	2010      	movs	r0, #16
 80116f4:	f7ff ff44 	bl	8011580 <malloc>
 80116f8:	4602      	mov	r2, r0
 80116fa:	61e0      	str	r0, [r4, #28]
 80116fc:	b920      	cbnz	r0, 8011708 <_Balloc+0x20>
 80116fe:	4b18      	ldr	r3, [pc, #96]	; (8011760 <_Balloc+0x78>)
 8011700:	4818      	ldr	r0, [pc, #96]	; (8011764 <_Balloc+0x7c>)
 8011702:	216b      	movs	r1, #107	; 0x6b
 8011704:	f000 fd9c 	bl	8012240 <__assert_func>
 8011708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801170c:	6006      	str	r6, [r0, #0]
 801170e:	60c6      	str	r6, [r0, #12]
 8011710:	69e6      	ldr	r6, [r4, #28]
 8011712:	68f3      	ldr	r3, [r6, #12]
 8011714:	b183      	cbz	r3, 8011738 <_Balloc+0x50>
 8011716:	69e3      	ldr	r3, [r4, #28]
 8011718:	68db      	ldr	r3, [r3, #12]
 801171a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801171e:	b9b8      	cbnz	r0, 8011750 <_Balloc+0x68>
 8011720:	2101      	movs	r1, #1
 8011722:	fa01 f605 	lsl.w	r6, r1, r5
 8011726:	1d72      	adds	r2, r6, #5
 8011728:	0092      	lsls	r2, r2, #2
 801172a:	4620      	mov	r0, r4
 801172c:	f000 fda6 	bl	801227c <_calloc_r>
 8011730:	b160      	cbz	r0, 801174c <_Balloc+0x64>
 8011732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011736:	e00e      	b.n	8011756 <_Balloc+0x6e>
 8011738:	2221      	movs	r2, #33	; 0x21
 801173a:	2104      	movs	r1, #4
 801173c:	4620      	mov	r0, r4
 801173e:	f000 fd9d 	bl	801227c <_calloc_r>
 8011742:	69e3      	ldr	r3, [r4, #28]
 8011744:	60f0      	str	r0, [r6, #12]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d1e4      	bne.n	8011716 <_Balloc+0x2e>
 801174c:	2000      	movs	r0, #0
 801174e:	bd70      	pop	{r4, r5, r6, pc}
 8011750:	6802      	ldr	r2, [r0, #0]
 8011752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011756:	2300      	movs	r3, #0
 8011758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801175c:	e7f7      	b.n	801174e <_Balloc+0x66>
 801175e:	bf00      	nop
 8011760:	08012b0d 	.word	0x08012b0d
 8011764:	08012b8d 	.word	0x08012b8d

08011768 <_Bfree>:
 8011768:	b570      	push	{r4, r5, r6, lr}
 801176a:	69c6      	ldr	r6, [r0, #28]
 801176c:	4605      	mov	r5, r0
 801176e:	460c      	mov	r4, r1
 8011770:	b976      	cbnz	r6, 8011790 <_Bfree+0x28>
 8011772:	2010      	movs	r0, #16
 8011774:	f7ff ff04 	bl	8011580 <malloc>
 8011778:	4602      	mov	r2, r0
 801177a:	61e8      	str	r0, [r5, #28]
 801177c:	b920      	cbnz	r0, 8011788 <_Bfree+0x20>
 801177e:	4b09      	ldr	r3, [pc, #36]	; (80117a4 <_Bfree+0x3c>)
 8011780:	4809      	ldr	r0, [pc, #36]	; (80117a8 <_Bfree+0x40>)
 8011782:	218f      	movs	r1, #143	; 0x8f
 8011784:	f000 fd5c 	bl	8012240 <__assert_func>
 8011788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801178c:	6006      	str	r6, [r0, #0]
 801178e:	60c6      	str	r6, [r0, #12]
 8011790:	b13c      	cbz	r4, 80117a2 <_Bfree+0x3a>
 8011792:	69eb      	ldr	r3, [r5, #28]
 8011794:	6862      	ldr	r2, [r4, #4]
 8011796:	68db      	ldr	r3, [r3, #12]
 8011798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801179c:	6021      	str	r1, [r4, #0]
 801179e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80117a2:	bd70      	pop	{r4, r5, r6, pc}
 80117a4:	08012b0d 	.word	0x08012b0d
 80117a8:	08012b8d 	.word	0x08012b8d

080117ac <__multadd>:
 80117ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117b0:	690d      	ldr	r5, [r1, #16]
 80117b2:	4607      	mov	r7, r0
 80117b4:	460c      	mov	r4, r1
 80117b6:	461e      	mov	r6, r3
 80117b8:	f101 0c14 	add.w	ip, r1, #20
 80117bc:	2000      	movs	r0, #0
 80117be:	f8dc 3000 	ldr.w	r3, [ip]
 80117c2:	b299      	uxth	r1, r3
 80117c4:	fb02 6101 	mla	r1, r2, r1, r6
 80117c8:	0c1e      	lsrs	r6, r3, #16
 80117ca:	0c0b      	lsrs	r3, r1, #16
 80117cc:	fb02 3306 	mla	r3, r2, r6, r3
 80117d0:	b289      	uxth	r1, r1
 80117d2:	3001      	adds	r0, #1
 80117d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80117d8:	4285      	cmp	r5, r0
 80117da:	f84c 1b04 	str.w	r1, [ip], #4
 80117de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80117e2:	dcec      	bgt.n	80117be <__multadd+0x12>
 80117e4:	b30e      	cbz	r6, 801182a <__multadd+0x7e>
 80117e6:	68a3      	ldr	r3, [r4, #8]
 80117e8:	42ab      	cmp	r3, r5
 80117ea:	dc19      	bgt.n	8011820 <__multadd+0x74>
 80117ec:	6861      	ldr	r1, [r4, #4]
 80117ee:	4638      	mov	r0, r7
 80117f0:	3101      	adds	r1, #1
 80117f2:	f7ff ff79 	bl	80116e8 <_Balloc>
 80117f6:	4680      	mov	r8, r0
 80117f8:	b928      	cbnz	r0, 8011806 <__multadd+0x5a>
 80117fa:	4602      	mov	r2, r0
 80117fc:	4b0c      	ldr	r3, [pc, #48]	; (8011830 <__multadd+0x84>)
 80117fe:	480d      	ldr	r0, [pc, #52]	; (8011834 <__multadd+0x88>)
 8011800:	21ba      	movs	r1, #186	; 0xba
 8011802:	f000 fd1d 	bl	8012240 <__assert_func>
 8011806:	6922      	ldr	r2, [r4, #16]
 8011808:	3202      	adds	r2, #2
 801180a:	f104 010c 	add.w	r1, r4, #12
 801180e:	0092      	lsls	r2, r2, #2
 8011810:	300c      	adds	r0, #12
 8011812:	f7ff f864 	bl	80108de <memcpy>
 8011816:	4621      	mov	r1, r4
 8011818:	4638      	mov	r0, r7
 801181a:	f7ff ffa5 	bl	8011768 <_Bfree>
 801181e:	4644      	mov	r4, r8
 8011820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011824:	3501      	adds	r5, #1
 8011826:	615e      	str	r6, [r3, #20]
 8011828:	6125      	str	r5, [r4, #16]
 801182a:	4620      	mov	r0, r4
 801182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011830:	08012b7c 	.word	0x08012b7c
 8011834:	08012b8d 	.word	0x08012b8d

08011838 <__hi0bits>:
 8011838:	0c03      	lsrs	r3, r0, #16
 801183a:	041b      	lsls	r3, r3, #16
 801183c:	b9d3      	cbnz	r3, 8011874 <__hi0bits+0x3c>
 801183e:	0400      	lsls	r0, r0, #16
 8011840:	2310      	movs	r3, #16
 8011842:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011846:	bf04      	itt	eq
 8011848:	0200      	lsleq	r0, r0, #8
 801184a:	3308      	addeq	r3, #8
 801184c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011850:	bf04      	itt	eq
 8011852:	0100      	lsleq	r0, r0, #4
 8011854:	3304      	addeq	r3, #4
 8011856:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801185a:	bf04      	itt	eq
 801185c:	0080      	lsleq	r0, r0, #2
 801185e:	3302      	addeq	r3, #2
 8011860:	2800      	cmp	r0, #0
 8011862:	db05      	blt.n	8011870 <__hi0bits+0x38>
 8011864:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011868:	f103 0301 	add.w	r3, r3, #1
 801186c:	bf08      	it	eq
 801186e:	2320      	moveq	r3, #32
 8011870:	4618      	mov	r0, r3
 8011872:	4770      	bx	lr
 8011874:	2300      	movs	r3, #0
 8011876:	e7e4      	b.n	8011842 <__hi0bits+0xa>

08011878 <__lo0bits>:
 8011878:	6803      	ldr	r3, [r0, #0]
 801187a:	f013 0207 	ands.w	r2, r3, #7
 801187e:	d00c      	beq.n	801189a <__lo0bits+0x22>
 8011880:	07d9      	lsls	r1, r3, #31
 8011882:	d422      	bmi.n	80118ca <__lo0bits+0x52>
 8011884:	079a      	lsls	r2, r3, #30
 8011886:	bf49      	itett	mi
 8011888:	085b      	lsrmi	r3, r3, #1
 801188a:	089b      	lsrpl	r3, r3, #2
 801188c:	6003      	strmi	r3, [r0, #0]
 801188e:	2201      	movmi	r2, #1
 8011890:	bf5c      	itt	pl
 8011892:	6003      	strpl	r3, [r0, #0]
 8011894:	2202      	movpl	r2, #2
 8011896:	4610      	mov	r0, r2
 8011898:	4770      	bx	lr
 801189a:	b299      	uxth	r1, r3
 801189c:	b909      	cbnz	r1, 80118a2 <__lo0bits+0x2a>
 801189e:	0c1b      	lsrs	r3, r3, #16
 80118a0:	2210      	movs	r2, #16
 80118a2:	b2d9      	uxtb	r1, r3
 80118a4:	b909      	cbnz	r1, 80118aa <__lo0bits+0x32>
 80118a6:	3208      	adds	r2, #8
 80118a8:	0a1b      	lsrs	r3, r3, #8
 80118aa:	0719      	lsls	r1, r3, #28
 80118ac:	bf04      	itt	eq
 80118ae:	091b      	lsreq	r3, r3, #4
 80118b0:	3204      	addeq	r2, #4
 80118b2:	0799      	lsls	r1, r3, #30
 80118b4:	bf04      	itt	eq
 80118b6:	089b      	lsreq	r3, r3, #2
 80118b8:	3202      	addeq	r2, #2
 80118ba:	07d9      	lsls	r1, r3, #31
 80118bc:	d403      	bmi.n	80118c6 <__lo0bits+0x4e>
 80118be:	085b      	lsrs	r3, r3, #1
 80118c0:	f102 0201 	add.w	r2, r2, #1
 80118c4:	d003      	beq.n	80118ce <__lo0bits+0x56>
 80118c6:	6003      	str	r3, [r0, #0]
 80118c8:	e7e5      	b.n	8011896 <__lo0bits+0x1e>
 80118ca:	2200      	movs	r2, #0
 80118cc:	e7e3      	b.n	8011896 <__lo0bits+0x1e>
 80118ce:	2220      	movs	r2, #32
 80118d0:	e7e1      	b.n	8011896 <__lo0bits+0x1e>
	...

080118d4 <__i2b>:
 80118d4:	b510      	push	{r4, lr}
 80118d6:	460c      	mov	r4, r1
 80118d8:	2101      	movs	r1, #1
 80118da:	f7ff ff05 	bl	80116e8 <_Balloc>
 80118de:	4602      	mov	r2, r0
 80118e0:	b928      	cbnz	r0, 80118ee <__i2b+0x1a>
 80118e2:	4b05      	ldr	r3, [pc, #20]	; (80118f8 <__i2b+0x24>)
 80118e4:	4805      	ldr	r0, [pc, #20]	; (80118fc <__i2b+0x28>)
 80118e6:	f240 1145 	movw	r1, #325	; 0x145
 80118ea:	f000 fca9 	bl	8012240 <__assert_func>
 80118ee:	2301      	movs	r3, #1
 80118f0:	6144      	str	r4, [r0, #20]
 80118f2:	6103      	str	r3, [r0, #16]
 80118f4:	bd10      	pop	{r4, pc}
 80118f6:	bf00      	nop
 80118f8:	08012b7c 	.word	0x08012b7c
 80118fc:	08012b8d 	.word	0x08012b8d

08011900 <__multiply>:
 8011900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011904:	4691      	mov	r9, r2
 8011906:	690a      	ldr	r2, [r1, #16]
 8011908:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801190c:	429a      	cmp	r2, r3
 801190e:	bfb8      	it	lt
 8011910:	460b      	movlt	r3, r1
 8011912:	460c      	mov	r4, r1
 8011914:	bfbc      	itt	lt
 8011916:	464c      	movlt	r4, r9
 8011918:	4699      	movlt	r9, r3
 801191a:	6927      	ldr	r7, [r4, #16]
 801191c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011920:	68a3      	ldr	r3, [r4, #8]
 8011922:	6861      	ldr	r1, [r4, #4]
 8011924:	eb07 060a 	add.w	r6, r7, sl
 8011928:	42b3      	cmp	r3, r6
 801192a:	b085      	sub	sp, #20
 801192c:	bfb8      	it	lt
 801192e:	3101      	addlt	r1, #1
 8011930:	f7ff feda 	bl	80116e8 <_Balloc>
 8011934:	b930      	cbnz	r0, 8011944 <__multiply+0x44>
 8011936:	4602      	mov	r2, r0
 8011938:	4b44      	ldr	r3, [pc, #272]	; (8011a4c <__multiply+0x14c>)
 801193a:	4845      	ldr	r0, [pc, #276]	; (8011a50 <__multiply+0x150>)
 801193c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011940:	f000 fc7e 	bl	8012240 <__assert_func>
 8011944:	f100 0514 	add.w	r5, r0, #20
 8011948:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801194c:	462b      	mov	r3, r5
 801194e:	2200      	movs	r2, #0
 8011950:	4543      	cmp	r3, r8
 8011952:	d321      	bcc.n	8011998 <__multiply+0x98>
 8011954:	f104 0314 	add.w	r3, r4, #20
 8011958:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801195c:	f109 0314 	add.w	r3, r9, #20
 8011960:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011964:	9202      	str	r2, [sp, #8]
 8011966:	1b3a      	subs	r2, r7, r4
 8011968:	3a15      	subs	r2, #21
 801196a:	f022 0203 	bic.w	r2, r2, #3
 801196e:	3204      	adds	r2, #4
 8011970:	f104 0115 	add.w	r1, r4, #21
 8011974:	428f      	cmp	r7, r1
 8011976:	bf38      	it	cc
 8011978:	2204      	movcc	r2, #4
 801197a:	9201      	str	r2, [sp, #4]
 801197c:	9a02      	ldr	r2, [sp, #8]
 801197e:	9303      	str	r3, [sp, #12]
 8011980:	429a      	cmp	r2, r3
 8011982:	d80c      	bhi.n	801199e <__multiply+0x9e>
 8011984:	2e00      	cmp	r6, #0
 8011986:	dd03      	ble.n	8011990 <__multiply+0x90>
 8011988:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801198c:	2b00      	cmp	r3, #0
 801198e:	d05b      	beq.n	8011a48 <__multiply+0x148>
 8011990:	6106      	str	r6, [r0, #16]
 8011992:	b005      	add	sp, #20
 8011994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011998:	f843 2b04 	str.w	r2, [r3], #4
 801199c:	e7d8      	b.n	8011950 <__multiply+0x50>
 801199e:	f8b3 a000 	ldrh.w	sl, [r3]
 80119a2:	f1ba 0f00 	cmp.w	sl, #0
 80119a6:	d024      	beq.n	80119f2 <__multiply+0xf2>
 80119a8:	f104 0e14 	add.w	lr, r4, #20
 80119ac:	46a9      	mov	r9, r5
 80119ae:	f04f 0c00 	mov.w	ip, #0
 80119b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80119b6:	f8d9 1000 	ldr.w	r1, [r9]
 80119ba:	fa1f fb82 	uxth.w	fp, r2
 80119be:	b289      	uxth	r1, r1
 80119c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80119c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80119c8:	f8d9 2000 	ldr.w	r2, [r9]
 80119cc:	4461      	add	r1, ip
 80119ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80119d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80119da:	b289      	uxth	r1, r1
 80119dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80119e0:	4577      	cmp	r7, lr
 80119e2:	f849 1b04 	str.w	r1, [r9], #4
 80119e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119ea:	d8e2      	bhi.n	80119b2 <__multiply+0xb2>
 80119ec:	9a01      	ldr	r2, [sp, #4]
 80119ee:	f845 c002 	str.w	ip, [r5, r2]
 80119f2:	9a03      	ldr	r2, [sp, #12]
 80119f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80119f8:	3304      	adds	r3, #4
 80119fa:	f1b9 0f00 	cmp.w	r9, #0
 80119fe:	d021      	beq.n	8011a44 <__multiply+0x144>
 8011a00:	6829      	ldr	r1, [r5, #0]
 8011a02:	f104 0c14 	add.w	ip, r4, #20
 8011a06:	46ae      	mov	lr, r5
 8011a08:	f04f 0a00 	mov.w	sl, #0
 8011a0c:	f8bc b000 	ldrh.w	fp, [ip]
 8011a10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011a14:	fb09 220b 	mla	r2, r9, fp, r2
 8011a18:	4452      	add	r2, sl
 8011a1a:	b289      	uxth	r1, r1
 8011a1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011a20:	f84e 1b04 	str.w	r1, [lr], #4
 8011a24:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011a28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a2c:	f8be 1000 	ldrh.w	r1, [lr]
 8011a30:	fb09 110a 	mla	r1, r9, sl, r1
 8011a34:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011a38:	4567      	cmp	r7, ip
 8011a3a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a3e:	d8e5      	bhi.n	8011a0c <__multiply+0x10c>
 8011a40:	9a01      	ldr	r2, [sp, #4]
 8011a42:	50a9      	str	r1, [r5, r2]
 8011a44:	3504      	adds	r5, #4
 8011a46:	e799      	b.n	801197c <__multiply+0x7c>
 8011a48:	3e01      	subs	r6, #1
 8011a4a:	e79b      	b.n	8011984 <__multiply+0x84>
 8011a4c:	08012b7c 	.word	0x08012b7c
 8011a50:	08012b8d 	.word	0x08012b8d

08011a54 <__pow5mult>:
 8011a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a58:	4615      	mov	r5, r2
 8011a5a:	f012 0203 	ands.w	r2, r2, #3
 8011a5e:	4606      	mov	r6, r0
 8011a60:	460f      	mov	r7, r1
 8011a62:	d007      	beq.n	8011a74 <__pow5mult+0x20>
 8011a64:	4c25      	ldr	r4, [pc, #148]	; (8011afc <__pow5mult+0xa8>)
 8011a66:	3a01      	subs	r2, #1
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a6e:	f7ff fe9d 	bl	80117ac <__multadd>
 8011a72:	4607      	mov	r7, r0
 8011a74:	10ad      	asrs	r5, r5, #2
 8011a76:	d03d      	beq.n	8011af4 <__pow5mult+0xa0>
 8011a78:	69f4      	ldr	r4, [r6, #28]
 8011a7a:	b97c      	cbnz	r4, 8011a9c <__pow5mult+0x48>
 8011a7c:	2010      	movs	r0, #16
 8011a7e:	f7ff fd7f 	bl	8011580 <malloc>
 8011a82:	4602      	mov	r2, r0
 8011a84:	61f0      	str	r0, [r6, #28]
 8011a86:	b928      	cbnz	r0, 8011a94 <__pow5mult+0x40>
 8011a88:	4b1d      	ldr	r3, [pc, #116]	; (8011b00 <__pow5mult+0xac>)
 8011a8a:	481e      	ldr	r0, [pc, #120]	; (8011b04 <__pow5mult+0xb0>)
 8011a8c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011a90:	f000 fbd6 	bl	8012240 <__assert_func>
 8011a94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a98:	6004      	str	r4, [r0, #0]
 8011a9a:	60c4      	str	r4, [r0, #12]
 8011a9c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011aa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011aa4:	b94c      	cbnz	r4, 8011aba <__pow5mult+0x66>
 8011aa6:	f240 2171 	movw	r1, #625	; 0x271
 8011aaa:	4630      	mov	r0, r6
 8011aac:	f7ff ff12 	bl	80118d4 <__i2b>
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	f8c8 0008 	str.w	r0, [r8, #8]
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	6003      	str	r3, [r0, #0]
 8011aba:	f04f 0900 	mov.w	r9, #0
 8011abe:	07eb      	lsls	r3, r5, #31
 8011ac0:	d50a      	bpl.n	8011ad8 <__pow5mult+0x84>
 8011ac2:	4639      	mov	r1, r7
 8011ac4:	4622      	mov	r2, r4
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	f7ff ff1a 	bl	8011900 <__multiply>
 8011acc:	4639      	mov	r1, r7
 8011ace:	4680      	mov	r8, r0
 8011ad0:	4630      	mov	r0, r6
 8011ad2:	f7ff fe49 	bl	8011768 <_Bfree>
 8011ad6:	4647      	mov	r7, r8
 8011ad8:	106d      	asrs	r5, r5, #1
 8011ada:	d00b      	beq.n	8011af4 <__pow5mult+0xa0>
 8011adc:	6820      	ldr	r0, [r4, #0]
 8011ade:	b938      	cbnz	r0, 8011af0 <__pow5mult+0x9c>
 8011ae0:	4622      	mov	r2, r4
 8011ae2:	4621      	mov	r1, r4
 8011ae4:	4630      	mov	r0, r6
 8011ae6:	f7ff ff0b 	bl	8011900 <__multiply>
 8011aea:	6020      	str	r0, [r4, #0]
 8011aec:	f8c0 9000 	str.w	r9, [r0]
 8011af0:	4604      	mov	r4, r0
 8011af2:	e7e4      	b.n	8011abe <__pow5mult+0x6a>
 8011af4:	4638      	mov	r0, r7
 8011af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011afa:	bf00      	nop
 8011afc:	08012cd8 	.word	0x08012cd8
 8011b00:	08012b0d 	.word	0x08012b0d
 8011b04:	08012b8d 	.word	0x08012b8d

08011b08 <__lshift>:
 8011b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b0c:	460c      	mov	r4, r1
 8011b0e:	6849      	ldr	r1, [r1, #4]
 8011b10:	6923      	ldr	r3, [r4, #16]
 8011b12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b16:	68a3      	ldr	r3, [r4, #8]
 8011b18:	4607      	mov	r7, r0
 8011b1a:	4691      	mov	r9, r2
 8011b1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b20:	f108 0601 	add.w	r6, r8, #1
 8011b24:	42b3      	cmp	r3, r6
 8011b26:	db0b      	blt.n	8011b40 <__lshift+0x38>
 8011b28:	4638      	mov	r0, r7
 8011b2a:	f7ff fddd 	bl	80116e8 <_Balloc>
 8011b2e:	4605      	mov	r5, r0
 8011b30:	b948      	cbnz	r0, 8011b46 <__lshift+0x3e>
 8011b32:	4602      	mov	r2, r0
 8011b34:	4b28      	ldr	r3, [pc, #160]	; (8011bd8 <__lshift+0xd0>)
 8011b36:	4829      	ldr	r0, [pc, #164]	; (8011bdc <__lshift+0xd4>)
 8011b38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011b3c:	f000 fb80 	bl	8012240 <__assert_func>
 8011b40:	3101      	adds	r1, #1
 8011b42:	005b      	lsls	r3, r3, #1
 8011b44:	e7ee      	b.n	8011b24 <__lshift+0x1c>
 8011b46:	2300      	movs	r3, #0
 8011b48:	f100 0114 	add.w	r1, r0, #20
 8011b4c:	f100 0210 	add.w	r2, r0, #16
 8011b50:	4618      	mov	r0, r3
 8011b52:	4553      	cmp	r3, sl
 8011b54:	db33      	blt.n	8011bbe <__lshift+0xb6>
 8011b56:	6920      	ldr	r0, [r4, #16]
 8011b58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b5c:	f104 0314 	add.w	r3, r4, #20
 8011b60:	f019 091f 	ands.w	r9, r9, #31
 8011b64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b6c:	d02b      	beq.n	8011bc6 <__lshift+0xbe>
 8011b6e:	f1c9 0e20 	rsb	lr, r9, #32
 8011b72:	468a      	mov	sl, r1
 8011b74:	2200      	movs	r2, #0
 8011b76:	6818      	ldr	r0, [r3, #0]
 8011b78:	fa00 f009 	lsl.w	r0, r0, r9
 8011b7c:	4310      	orrs	r0, r2
 8011b7e:	f84a 0b04 	str.w	r0, [sl], #4
 8011b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b86:	459c      	cmp	ip, r3
 8011b88:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b8c:	d8f3      	bhi.n	8011b76 <__lshift+0x6e>
 8011b8e:	ebac 0304 	sub.w	r3, ip, r4
 8011b92:	3b15      	subs	r3, #21
 8011b94:	f023 0303 	bic.w	r3, r3, #3
 8011b98:	3304      	adds	r3, #4
 8011b9a:	f104 0015 	add.w	r0, r4, #21
 8011b9e:	4584      	cmp	ip, r0
 8011ba0:	bf38      	it	cc
 8011ba2:	2304      	movcc	r3, #4
 8011ba4:	50ca      	str	r2, [r1, r3]
 8011ba6:	b10a      	cbz	r2, 8011bac <__lshift+0xa4>
 8011ba8:	f108 0602 	add.w	r6, r8, #2
 8011bac:	3e01      	subs	r6, #1
 8011bae:	4638      	mov	r0, r7
 8011bb0:	612e      	str	r6, [r5, #16]
 8011bb2:	4621      	mov	r1, r4
 8011bb4:	f7ff fdd8 	bl	8011768 <_Bfree>
 8011bb8:	4628      	mov	r0, r5
 8011bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	e7c5      	b.n	8011b52 <__lshift+0x4a>
 8011bc6:	3904      	subs	r1, #4
 8011bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8011bd0:	459c      	cmp	ip, r3
 8011bd2:	d8f9      	bhi.n	8011bc8 <__lshift+0xc0>
 8011bd4:	e7ea      	b.n	8011bac <__lshift+0xa4>
 8011bd6:	bf00      	nop
 8011bd8:	08012b7c 	.word	0x08012b7c
 8011bdc:	08012b8d 	.word	0x08012b8d

08011be0 <__mcmp>:
 8011be0:	b530      	push	{r4, r5, lr}
 8011be2:	6902      	ldr	r2, [r0, #16]
 8011be4:	690c      	ldr	r4, [r1, #16]
 8011be6:	1b12      	subs	r2, r2, r4
 8011be8:	d10e      	bne.n	8011c08 <__mcmp+0x28>
 8011bea:	f100 0314 	add.w	r3, r0, #20
 8011bee:	3114      	adds	r1, #20
 8011bf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011bf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011bf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011bfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011c00:	42a5      	cmp	r5, r4
 8011c02:	d003      	beq.n	8011c0c <__mcmp+0x2c>
 8011c04:	d305      	bcc.n	8011c12 <__mcmp+0x32>
 8011c06:	2201      	movs	r2, #1
 8011c08:	4610      	mov	r0, r2
 8011c0a:	bd30      	pop	{r4, r5, pc}
 8011c0c:	4283      	cmp	r3, r0
 8011c0e:	d3f3      	bcc.n	8011bf8 <__mcmp+0x18>
 8011c10:	e7fa      	b.n	8011c08 <__mcmp+0x28>
 8011c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c16:	e7f7      	b.n	8011c08 <__mcmp+0x28>

08011c18 <__mdiff>:
 8011c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c1c:	460c      	mov	r4, r1
 8011c1e:	4606      	mov	r6, r0
 8011c20:	4611      	mov	r1, r2
 8011c22:	4620      	mov	r0, r4
 8011c24:	4690      	mov	r8, r2
 8011c26:	f7ff ffdb 	bl	8011be0 <__mcmp>
 8011c2a:	1e05      	subs	r5, r0, #0
 8011c2c:	d110      	bne.n	8011c50 <__mdiff+0x38>
 8011c2e:	4629      	mov	r1, r5
 8011c30:	4630      	mov	r0, r6
 8011c32:	f7ff fd59 	bl	80116e8 <_Balloc>
 8011c36:	b930      	cbnz	r0, 8011c46 <__mdiff+0x2e>
 8011c38:	4b3a      	ldr	r3, [pc, #232]	; (8011d24 <__mdiff+0x10c>)
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	f240 2137 	movw	r1, #567	; 0x237
 8011c40:	4839      	ldr	r0, [pc, #228]	; (8011d28 <__mdiff+0x110>)
 8011c42:	f000 fafd 	bl	8012240 <__assert_func>
 8011c46:	2301      	movs	r3, #1
 8011c48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c50:	bfa4      	itt	ge
 8011c52:	4643      	movge	r3, r8
 8011c54:	46a0      	movge	r8, r4
 8011c56:	4630      	mov	r0, r6
 8011c58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011c5c:	bfa6      	itte	ge
 8011c5e:	461c      	movge	r4, r3
 8011c60:	2500      	movge	r5, #0
 8011c62:	2501      	movlt	r5, #1
 8011c64:	f7ff fd40 	bl	80116e8 <_Balloc>
 8011c68:	b920      	cbnz	r0, 8011c74 <__mdiff+0x5c>
 8011c6a:	4b2e      	ldr	r3, [pc, #184]	; (8011d24 <__mdiff+0x10c>)
 8011c6c:	4602      	mov	r2, r0
 8011c6e:	f240 2145 	movw	r1, #581	; 0x245
 8011c72:	e7e5      	b.n	8011c40 <__mdiff+0x28>
 8011c74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011c78:	6926      	ldr	r6, [r4, #16]
 8011c7a:	60c5      	str	r5, [r0, #12]
 8011c7c:	f104 0914 	add.w	r9, r4, #20
 8011c80:	f108 0514 	add.w	r5, r8, #20
 8011c84:	f100 0e14 	add.w	lr, r0, #20
 8011c88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011c8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011c90:	f108 0210 	add.w	r2, r8, #16
 8011c94:	46f2      	mov	sl, lr
 8011c96:	2100      	movs	r1, #0
 8011c98:	f859 3b04 	ldr.w	r3, [r9], #4
 8011c9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ca0:	fa11 f88b 	uxtah	r8, r1, fp
 8011ca4:	b299      	uxth	r1, r3
 8011ca6:	0c1b      	lsrs	r3, r3, #16
 8011ca8:	eba8 0801 	sub.w	r8, r8, r1
 8011cac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011cb0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011cb4:	fa1f f888 	uxth.w	r8, r8
 8011cb8:	1419      	asrs	r1, r3, #16
 8011cba:	454e      	cmp	r6, r9
 8011cbc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011cc0:	f84a 3b04 	str.w	r3, [sl], #4
 8011cc4:	d8e8      	bhi.n	8011c98 <__mdiff+0x80>
 8011cc6:	1b33      	subs	r3, r6, r4
 8011cc8:	3b15      	subs	r3, #21
 8011cca:	f023 0303 	bic.w	r3, r3, #3
 8011cce:	3304      	adds	r3, #4
 8011cd0:	3415      	adds	r4, #21
 8011cd2:	42a6      	cmp	r6, r4
 8011cd4:	bf38      	it	cc
 8011cd6:	2304      	movcc	r3, #4
 8011cd8:	441d      	add	r5, r3
 8011cda:	4473      	add	r3, lr
 8011cdc:	469e      	mov	lr, r3
 8011cde:	462e      	mov	r6, r5
 8011ce0:	4566      	cmp	r6, ip
 8011ce2:	d30e      	bcc.n	8011d02 <__mdiff+0xea>
 8011ce4:	f10c 0203 	add.w	r2, ip, #3
 8011ce8:	1b52      	subs	r2, r2, r5
 8011cea:	f022 0203 	bic.w	r2, r2, #3
 8011cee:	3d03      	subs	r5, #3
 8011cf0:	45ac      	cmp	ip, r5
 8011cf2:	bf38      	it	cc
 8011cf4:	2200      	movcc	r2, #0
 8011cf6:	4413      	add	r3, r2
 8011cf8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011cfc:	b17a      	cbz	r2, 8011d1e <__mdiff+0x106>
 8011cfe:	6107      	str	r7, [r0, #16]
 8011d00:	e7a4      	b.n	8011c4c <__mdiff+0x34>
 8011d02:	f856 8b04 	ldr.w	r8, [r6], #4
 8011d06:	fa11 f288 	uxtah	r2, r1, r8
 8011d0a:	1414      	asrs	r4, r2, #16
 8011d0c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011d10:	b292      	uxth	r2, r2
 8011d12:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011d16:	f84e 2b04 	str.w	r2, [lr], #4
 8011d1a:	1421      	asrs	r1, r4, #16
 8011d1c:	e7e0      	b.n	8011ce0 <__mdiff+0xc8>
 8011d1e:	3f01      	subs	r7, #1
 8011d20:	e7ea      	b.n	8011cf8 <__mdiff+0xe0>
 8011d22:	bf00      	nop
 8011d24:	08012b7c 	.word	0x08012b7c
 8011d28:	08012b8d 	.word	0x08012b8d

08011d2c <__d2b>:
 8011d2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d30:	460f      	mov	r7, r1
 8011d32:	2101      	movs	r1, #1
 8011d34:	ec59 8b10 	vmov	r8, r9, d0
 8011d38:	4616      	mov	r6, r2
 8011d3a:	f7ff fcd5 	bl	80116e8 <_Balloc>
 8011d3e:	4604      	mov	r4, r0
 8011d40:	b930      	cbnz	r0, 8011d50 <__d2b+0x24>
 8011d42:	4602      	mov	r2, r0
 8011d44:	4b24      	ldr	r3, [pc, #144]	; (8011dd8 <__d2b+0xac>)
 8011d46:	4825      	ldr	r0, [pc, #148]	; (8011ddc <__d2b+0xb0>)
 8011d48:	f240 310f 	movw	r1, #783	; 0x30f
 8011d4c:	f000 fa78 	bl	8012240 <__assert_func>
 8011d50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011d54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d58:	bb2d      	cbnz	r5, 8011da6 <__d2b+0x7a>
 8011d5a:	9301      	str	r3, [sp, #4]
 8011d5c:	f1b8 0300 	subs.w	r3, r8, #0
 8011d60:	d026      	beq.n	8011db0 <__d2b+0x84>
 8011d62:	4668      	mov	r0, sp
 8011d64:	9300      	str	r3, [sp, #0]
 8011d66:	f7ff fd87 	bl	8011878 <__lo0bits>
 8011d6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011d6e:	b1e8      	cbz	r0, 8011dac <__d2b+0x80>
 8011d70:	f1c0 0320 	rsb	r3, r0, #32
 8011d74:	fa02 f303 	lsl.w	r3, r2, r3
 8011d78:	430b      	orrs	r3, r1
 8011d7a:	40c2      	lsrs	r2, r0
 8011d7c:	6163      	str	r3, [r4, #20]
 8011d7e:	9201      	str	r2, [sp, #4]
 8011d80:	9b01      	ldr	r3, [sp, #4]
 8011d82:	61a3      	str	r3, [r4, #24]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	bf14      	ite	ne
 8011d88:	2202      	movne	r2, #2
 8011d8a:	2201      	moveq	r2, #1
 8011d8c:	6122      	str	r2, [r4, #16]
 8011d8e:	b1bd      	cbz	r5, 8011dc0 <__d2b+0x94>
 8011d90:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011d94:	4405      	add	r5, r0
 8011d96:	603d      	str	r5, [r7, #0]
 8011d98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d9c:	6030      	str	r0, [r6, #0]
 8011d9e:	4620      	mov	r0, r4
 8011da0:	b003      	add	sp, #12
 8011da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011daa:	e7d6      	b.n	8011d5a <__d2b+0x2e>
 8011dac:	6161      	str	r1, [r4, #20]
 8011dae:	e7e7      	b.n	8011d80 <__d2b+0x54>
 8011db0:	a801      	add	r0, sp, #4
 8011db2:	f7ff fd61 	bl	8011878 <__lo0bits>
 8011db6:	9b01      	ldr	r3, [sp, #4]
 8011db8:	6163      	str	r3, [r4, #20]
 8011dba:	3020      	adds	r0, #32
 8011dbc:	2201      	movs	r2, #1
 8011dbe:	e7e5      	b.n	8011d8c <__d2b+0x60>
 8011dc0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011dc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011dc8:	6038      	str	r0, [r7, #0]
 8011dca:	6918      	ldr	r0, [r3, #16]
 8011dcc:	f7ff fd34 	bl	8011838 <__hi0bits>
 8011dd0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011dd4:	e7e2      	b.n	8011d9c <__d2b+0x70>
 8011dd6:	bf00      	nop
 8011dd8:	08012b7c 	.word	0x08012b7c
 8011ddc:	08012b8d 	.word	0x08012b8d

08011de0 <__ssputs_r>:
 8011de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011de4:	688e      	ldr	r6, [r1, #8]
 8011de6:	461f      	mov	r7, r3
 8011de8:	42be      	cmp	r6, r7
 8011dea:	680b      	ldr	r3, [r1, #0]
 8011dec:	4682      	mov	sl, r0
 8011dee:	460c      	mov	r4, r1
 8011df0:	4690      	mov	r8, r2
 8011df2:	d82c      	bhi.n	8011e4e <__ssputs_r+0x6e>
 8011df4:	898a      	ldrh	r2, [r1, #12]
 8011df6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011dfa:	d026      	beq.n	8011e4a <__ssputs_r+0x6a>
 8011dfc:	6965      	ldr	r5, [r4, #20]
 8011dfe:	6909      	ldr	r1, [r1, #16]
 8011e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e04:	eba3 0901 	sub.w	r9, r3, r1
 8011e08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e0c:	1c7b      	adds	r3, r7, #1
 8011e0e:	444b      	add	r3, r9
 8011e10:	106d      	asrs	r5, r5, #1
 8011e12:	429d      	cmp	r5, r3
 8011e14:	bf38      	it	cc
 8011e16:	461d      	movcc	r5, r3
 8011e18:	0553      	lsls	r3, r2, #21
 8011e1a:	d527      	bpl.n	8011e6c <__ssputs_r+0x8c>
 8011e1c:	4629      	mov	r1, r5
 8011e1e:	f7ff fbd7 	bl	80115d0 <_malloc_r>
 8011e22:	4606      	mov	r6, r0
 8011e24:	b360      	cbz	r0, 8011e80 <__ssputs_r+0xa0>
 8011e26:	6921      	ldr	r1, [r4, #16]
 8011e28:	464a      	mov	r2, r9
 8011e2a:	f7fe fd58 	bl	80108de <memcpy>
 8011e2e:	89a3      	ldrh	r3, [r4, #12]
 8011e30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e38:	81a3      	strh	r3, [r4, #12]
 8011e3a:	6126      	str	r6, [r4, #16]
 8011e3c:	6165      	str	r5, [r4, #20]
 8011e3e:	444e      	add	r6, r9
 8011e40:	eba5 0509 	sub.w	r5, r5, r9
 8011e44:	6026      	str	r6, [r4, #0]
 8011e46:	60a5      	str	r5, [r4, #8]
 8011e48:	463e      	mov	r6, r7
 8011e4a:	42be      	cmp	r6, r7
 8011e4c:	d900      	bls.n	8011e50 <__ssputs_r+0x70>
 8011e4e:	463e      	mov	r6, r7
 8011e50:	6820      	ldr	r0, [r4, #0]
 8011e52:	4632      	mov	r2, r6
 8011e54:	4641      	mov	r1, r8
 8011e56:	f000 f9c9 	bl	80121ec <memmove>
 8011e5a:	68a3      	ldr	r3, [r4, #8]
 8011e5c:	1b9b      	subs	r3, r3, r6
 8011e5e:	60a3      	str	r3, [r4, #8]
 8011e60:	6823      	ldr	r3, [r4, #0]
 8011e62:	4433      	add	r3, r6
 8011e64:	6023      	str	r3, [r4, #0]
 8011e66:	2000      	movs	r0, #0
 8011e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6c:	462a      	mov	r2, r5
 8011e6e:	f000 fa2d 	bl	80122cc <_realloc_r>
 8011e72:	4606      	mov	r6, r0
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d1e0      	bne.n	8011e3a <__ssputs_r+0x5a>
 8011e78:	6921      	ldr	r1, [r4, #16]
 8011e7a:	4650      	mov	r0, sl
 8011e7c:	f7ff fb34 	bl	80114e8 <_free_r>
 8011e80:	230c      	movs	r3, #12
 8011e82:	f8ca 3000 	str.w	r3, [sl]
 8011e86:	89a3      	ldrh	r3, [r4, #12]
 8011e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e8c:	81a3      	strh	r3, [r4, #12]
 8011e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e92:	e7e9      	b.n	8011e68 <__ssputs_r+0x88>

08011e94 <_svfiprintf_r>:
 8011e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e98:	4698      	mov	r8, r3
 8011e9a:	898b      	ldrh	r3, [r1, #12]
 8011e9c:	061b      	lsls	r3, r3, #24
 8011e9e:	b09d      	sub	sp, #116	; 0x74
 8011ea0:	4607      	mov	r7, r0
 8011ea2:	460d      	mov	r5, r1
 8011ea4:	4614      	mov	r4, r2
 8011ea6:	d50e      	bpl.n	8011ec6 <_svfiprintf_r+0x32>
 8011ea8:	690b      	ldr	r3, [r1, #16]
 8011eaa:	b963      	cbnz	r3, 8011ec6 <_svfiprintf_r+0x32>
 8011eac:	2140      	movs	r1, #64	; 0x40
 8011eae:	f7ff fb8f 	bl	80115d0 <_malloc_r>
 8011eb2:	6028      	str	r0, [r5, #0]
 8011eb4:	6128      	str	r0, [r5, #16]
 8011eb6:	b920      	cbnz	r0, 8011ec2 <_svfiprintf_r+0x2e>
 8011eb8:	230c      	movs	r3, #12
 8011eba:	603b      	str	r3, [r7, #0]
 8011ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ec0:	e0d0      	b.n	8012064 <_svfiprintf_r+0x1d0>
 8011ec2:	2340      	movs	r3, #64	; 0x40
 8011ec4:	616b      	str	r3, [r5, #20]
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8011eca:	2320      	movs	r3, #32
 8011ecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ed4:	2330      	movs	r3, #48	; 0x30
 8011ed6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801207c <_svfiprintf_r+0x1e8>
 8011eda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ede:	f04f 0901 	mov.w	r9, #1
 8011ee2:	4623      	mov	r3, r4
 8011ee4:	469a      	mov	sl, r3
 8011ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eea:	b10a      	cbz	r2, 8011ef0 <_svfiprintf_r+0x5c>
 8011eec:	2a25      	cmp	r2, #37	; 0x25
 8011eee:	d1f9      	bne.n	8011ee4 <_svfiprintf_r+0x50>
 8011ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8011ef4:	d00b      	beq.n	8011f0e <_svfiprintf_r+0x7a>
 8011ef6:	465b      	mov	r3, fp
 8011ef8:	4622      	mov	r2, r4
 8011efa:	4629      	mov	r1, r5
 8011efc:	4638      	mov	r0, r7
 8011efe:	f7ff ff6f 	bl	8011de0 <__ssputs_r>
 8011f02:	3001      	adds	r0, #1
 8011f04:	f000 80a9 	beq.w	801205a <_svfiprintf_r+0x1c6>
 8011f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f0a:	445a      	add	r2, fp
 8011f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8011f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	f000 80a1 	beq.w	801205a <_svfiprintf_r+0x1c6>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f22:	f10a 0a01 	add.w	sl, sl, #1
 8011f26:	9304      	str	r3, [sp, #16]
 8011f28:	9307      	str	r3, [sp, #28]
 8011f2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f2e:	931a      	str	r3, [sp, #104]	; 0x68
 8011f30:	4654      	mov	r4, sl
 8011f32:	2205      	movs	r2, #5
 8011f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f38:	4850      	ldr	r0, [pc, #320]	; (801207c <_svfiprintf_r+0x1e8>)
 8011f3a:	f7ee f9d1 	bl	80002e0 <memchr>
 8011f3e:	9a04      	ldr	r2, [sp, #16]
 8011f40:	b9d8      	cbnz	r0, 8011f7a <_svfiprintf_r+0xe6>
 8011f42:	06d0      	lsls	r0, r2, #27
 8011f44:	bf44      	itt	mi
 8011f46:	2320      	movmi	r3, #32
 8011f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f4c:	0711      	lsls	r1, r2, #28
 8011f4e:	bf44      	itt	mi
 8011f50:	232b      	movmi	r3, #43	; 0x2b
 8011f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f56:	f89a 3000 	ldrb.w	r3, [sl]
 8011f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8011f5c:	d015      	beq.n	8011f8a <_svfiprintf_r+0xf6>
 8011f5e:	9a07      	ldr	r2, [sp, #28]
 8011f60:	4654      	mov	r4, sl
 8011f62:	2000      	movs	r0, #0
 8011f64:	f04f 0c0a 	mov.w	ip, #10
 8011f68:	4621      	mov	r1, r4
 8011f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f6e:	3b30      	subs	r3, #48	; 0x30
 8011f70:	2b09      	cmp	r3, #9
 8011f72:	d94d      	bls.n	8012010 <_svfiprintf_r+0x17c>
 8011f74:	b1b0      	cbz	r0, 8011fa4 <_svfiprintf_r+0x110>
 8011f76:	9207      	str	r2, [sp, #28]
 8011f78:	e014      	b.n	8011fa4 <_svfiprintf_r+0x110>
 8011f7a:	eba0 0308 	sub.w	r3, r0, r8
 8011f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8011f82:	4313      	orrs	r3, r2
 8011f84:	9304      	str	r3, [sp, #16]
 8011f86:	46a2      	mov	sl, r4
 8011f88:	e7d2      	b.n	8011f30 <_svfiprintf_r+0x9c>
 8011f8a:	9b03      	ldr	r3, [sp, #12]
 8011f8c:	1d19      	adds	r1, r3, #4
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	9103      	str	r1, [sp, #12]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	bfbb      	ittet	lt
 8011f96:	425b      	neglt	r3, r3
 8011f98:	f042 0202 	orrlt.w	r2, r2, #2
 8011f9c:	9307      	strge	r3, [sp, #28]
 8011f9e:	9307      	strlt	r3, [sp, #28]
 8011fa0:	bfb8      	it	lt
 8011fa2:	9204      	strlt	r2, [sp, #16]
 8011fa4:	7823      	ldrb	r3, [r4, #0]
 8011fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8011fa8:	d10c      	bne.n	8011fc4 <_svfiprintf_r+0x130>
 8011faa:	7863      	ldrb	r3, [r4, #1]
 8011fac:	2b2a      	cmp	r3, #42	; 0x2a
 8011fae:	d134      	bne.n	801201a <_svfiprintf_r+0x186>
 8011fb0:	9b03      	ldr	r3, [sp, #12]
 8011fb2:	1d1a      	adds	r2, r3, #4
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	9203      	str	r2, [sp, #12]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	bfb8      	it	lt
 8011fbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011fc0:	3402      	adds	r4, #2
 8011fc2:	9305      	str	r3, [sp, #20]
 8011fc4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801208c <_svfiprintf_r+0x1f8>
 8011fc8:	7821      	ldrb	r1, [r4, #0]
 8011fca:	2203      	movs	r2, #3
 8011fcc:	4650      	mov	r0, sl
 8011fce:	f7ee f987 	bl	80002e0 <memchr>
 8011fd2:	b138      	cbz	r0, 8011fe4 <_svfiprintf_r+0x150>
 8011fd4:	9b04      	ldr	r3, [sp, #16]
 8011fd6:	eba0 000a 	sub.w	r0, r0, sl
 8011fda:	2240      	movs	r2, #64	; 0x40
 8011fdc:	4082      	lsls	r2, r0
 8011fde:	4313      	orrs	r3, r2
 8011fe0:	3401      	adds	r4, #1
 8011fe2:	9304      	str	r3, [sp, #16]
 8011fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fe8:	4825      	ldr	r0, [pc, #148]	; (8012080 <_svfiprintf_r+0x1ec>)
 8011fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fee:	2206      	movs	r2, #6
 8011ff0:	f7ee f976 	bl	80002e0 <memchr>
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	d038      	beq.n	801206a <_svfiprintf_r+0x1d6>
 8011ff8:	4b22      	ldr	r3, [pc, #136]	; (8012084 <_svfiprintf_r+0x1f0>)
 8011ffa:	bb1b      	cbnz	r3, 8012044 <_svfiprintf_r+0x1b0>
 8011ffc:	9b03      	ldr	r3, [sp, #12]
 8011ffe:	3307      	adds	r3, #7
 8012000:	f023 0307 	bic.w	r3, r3, #7
 8012004:	3308      	adds	r3, #8
 8012006:	9303      	str	r3, [sp, #12]
 8012008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801200a:	4433      	add	r3, r6
 801200c:	9309      	str	r3, [sp, #36]	; 0x24
 801200e:	e768      	b.n	8011ee2 <_svfiprintf_r+0x4e>
 8012010:	fb0c 3202 	mla	r2, ip, r2, r3
 8012014:	460c      	mov	r4, r1
 8012016:	2001      	movs	r0, #1
 8012018:	e7a6      	b.n	8011f68 <_svfiprintf_r+0xd4>
 801201a:	2300      	movs	r3, #0
 801201c:	3401      	adds	r4, #1
 801201e:	9305      	str	r3, [sp, #20]
 8012020:	4619      	mov	r1, r3
 8012022:	f04f 0c0a 	mov.w	ip, #10
 8012026:	4620      	mov	r0, r4
 8012028:	f810 2b01 	ldrb.w	r2, [r0], #1
 801202c:	3a30      	subs	r2, #48	; 0x30
 801202e:	2a09      	cmp	r2, #9
 8012030:	d903      	bls.n	801203a <_svfiprintf_r+0x1a6>
 8012032:	2b00      	cmp	r3, #0
 8012034:	d0c6      	beq.n	8011fc4 <_svfiprintf_r+0x130>
 8012036:	9105      	str	r1, [sp, #20]
 8012038:	e7c4      	b.n	8011fc4 <_svfiprintf_r+0x130>
 801203a:	fb0c 2101 	mla	r1, ip, r1, r2
 801203e:	4604      	mov	r4, r0
 8012040:	2301      	movs	r3, #1
 8012042:	e7f0      	b.n	8012026 <_svfiprintf_r+0x192>
 8012044:	ab03      	add	r3, sp, #12
 8012046:	9300      	str	r3, [sp, #0]
 8012048:	462a      	mov	r2, r5
 801204a:	4b0f      	ldr	r3, [pc, #60]	; (8012088 <_svfiprintf_r+0x1f4>)
 801204c:	a904      	add	r1, sp, #16
 801204e:	4638      	mov	r0, r7
 8012050:	f7fd fef6 	bl	800fe40 <_printf_float>
 8012054:	1c42      	adds	r2, r0, #1
 8012056:	4606      	mov	r6, r0
 8012058:	d1d6      	bne.n	8012008 <_svfiprintf_r+0x174>
 801205a:	89ab      	ldrh	r3, [r5, #12]
 801205c:	065b      	lsls	r3, r3, #25
 801205e:	f53f af2d 	bmi.w	8011ebc <_svfiprintf_r+0x28>
 8012062:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012064:	b01d      	add	sp, #116	; 0x74
 8012066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206a:	ab03      	add	r3, sp, #12
 801206c:	9300      	str	r3, [sp, #0]
 801206e:	462a      	mov	r2, r5
 8012070:	4b05      	ldr	r3, [pc, #20]	; (8012088 <_svfiprintf_r+0x1f4>)
 8012072:	a904      	add	r1, sp, #16
 8012074:	4638      	mov	r0, r7
 8012076:	f7fe f96b 	bl	8010350 <_printf_i>
 801207a:	e7eb      	b.n	8012054 <_svfiprintf_r+0x1c0>
 801207c:	08012ce4 	.word	0x08012ce4
 8012080:	08012cee 	.word	0x08012cee
 8012084:	0800fe41 	.word	0x0800fe41
 8012088:	08011de1 	.word	0x08011de1
 801208c:	08012cea 	.word	0x08012cea

08012090 <__sflush_r>:
 8012090:	898a      	ldrh	r2, [r1, #12]
 8012092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012096:	4605      	mov	r5, r0
 8012098:	0710      	lsls	r0, r2, #28
 801209a:	460c      	mov	r4, r1
 801209c:	d458      	bmi.n	8012150 <__sflush_r+0xc0>
 801209e:	684b      	ldr	r3, [r1, #4]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	dc05      	bgt.n	80120b0 <__sflush_r+0x20>
 80120a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	dc02      	bgt.n	80120b0 <__sflush_r+0x20>
 80120aa:	2000      	movs	r0, #0
 80120ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120b2:	2e00      	cmp	r6, #0
 80120b4:	d0f9      	beq.n	80120aa <__sflush_r+0x1a>
 80120b6:	2300      	movs	r3, #0
 80120b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80120bc:	682f      	ldr	r7, [r5, #0]
 80120be:	6a21      	ldr	r1, [r4, #32]
 80120c0:	602b      	str	r3, [r5, #0]
 80120c2:	d032      	beq.n	801212a <__sflush_r+0x9a>
 80120c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80120c6:	89a3      	ldrh	r3, [r4, #12]
 80120c8:	075a      	lsls	r2, r3, #29
 80120ca:	d505      	bpl.n	80120d8 <__sflush_r+0x48>
 80120cc:	6863      	ldr	r3, [r4, #4]
 80120ce:	1ac0      	subs	r0, r0, r3
 80120d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80120d2:	b10b      	cbz	r3, 80120d8 <__sflush_r+0x48>
 80120d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80120d6:	1ac0      	subs	r0, r0, r3
 80120d8:	2300      	movs	r3, #0
 80120da:	4602      	mov	r2, r0
 80120dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120de:	6a21      	ldr	r1, [r4, #32]
 80120e0:	4628      	mov	r0, r5
 80120e2:	47b0      	blx	r6
 80120e4:	1c43      	adds	r3, r0, #1
 80120e6:	89a3      	ldrh	r3, [r4, #12]
 80120e8:	d106      	bne.n	80120f8 <__sflush_r+0x68>
 80120ea:	6829      	ldr	r1, [r5, #0]
 80120ec:	291d      	cmp	r1, #29
 80120ee:	d82b      	bhi.n	8012148 <__sflush_r+0xb8>
 80120f0:	4a29      	ldr	r2, [pc, #164]	; (8012198 <__sflush_r+0x108>)
 80120f2:	410a      	asrs	r2, r1
 80120f4:	07d6      	lsls	r6, r2, #31
 80120f6:	d427      	bmi.n	8012148 <__sflush_r+0xb8>
 80120f8:	2200      	movs	r2, #0
 80120fa:	6062      	str	r2, [r4, #4]
 80120fc:	04d9      	lsls	r1, r3, #19
 80120fe:	6922      	ldr	r2, [r4, #16]
 8012100:	6022      	str	r2, [r4, #0]
 8012102:	d504      	bpl.n	801210e <__sflush_r+0x7e>
 8012104:	1c42      	adds	r2, r0, #1
 8012106:	d101      	bne.n	801210c <__sflush_r+0x7c>
 8012108:	682b      	ldr	r3, [r5, #0]
 801210a:	b903      	cbnz	r3, 801210e <__sflush_r+0x7e>
 801210c:	6560      	str	r0, [r4, #84]	; 0x54
 801210e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012110:	602f      	str	r7, [r5, #0]
 8012112:	2900      	cmp	r1, #0
 8012114:	d0c9      	beq.n	80120aa <__sflush_r+0x1a>
 8012116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801211a:	4299      	cmp	r1, r3
 801211c:	d002      	beq.n	8012124 <__sflush_r+0x94>
 801211e:	4628      	mov	r0, r5
 8012120:	f7ff f9e2 	bl	80114e8 <_free_r>
 8012124:	2000      	movs	r0, #0
 8012126:	6360      	str	r0, [r4, #52]	; 0x34
 8012128:	e7c0      	b.n	80120ac <__sflush_r+0x1c>
 801212a:	2301      	movs	r3, #1
 801212c:	4628      	mov	r0, r5
 801212e:	47b0      	blx	r6
 8012130:	1c41      	adds	r1, r0, #1
 8012132:	d1c8      	bne.n	80120c6 <__sflush_r+0x36>
 8012134:	682b      	ldr	r3, [r5, #0]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d0c5      	beq.n	80120c6 <__sflush_r+0x36>
 801213a:	2b1d      	cmp	r3, #29
 801213c:	d001      	beq.n	8012142 <__sflush_r+0xb2>
 801213e:	2b16      	cmp	r3, #22
 8012140:	d101      	bne.n	8012146 <__sflush_r+0xb6>
 8012142:	602f      	str	r7, [r5, #0]
 8012144:	e7b1      	b.n	80120aa <__sflush_r+0x1a>
 8012146:	89a3      	ldrh	r3, [r4, #12]
 8012148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801214c:	81a3      	strh	r3, [r4, #12]
 801214e:	e7ad      	b.n	80120ac <__sflush_r+0x1c>
 8012150:	690f      	ldr	r7, [r1, #16]
 8012152:	2f00      	cmp	r7, #0
 8012154:	d0a9      	beq.n	80120aa <__sflush_r+0x1a>
 8012156:	0793      	lsls	r3, r2, #30
 8012158:	680e      	ldr	r6, [r1, #0]
 801215a:	bf08      	it	eq
 801215c:	694b      	ldreq	r3, [r1, #20]
 801215e:	600f      	str	r7, [r1, #0]
 8012160:	bf18      	it	ne
 8012162:	2300      	movne	r3, #0
 8012164:	eba6 0807 	sub.w	r8, r6, r7
 8012168:	608b      	str	r3, [r1, #8]
 801216a:	f1b8 0f00 	cmp.w	r8, #0
 801216e:	dd9c      	ble.n	80120aa <__sflush_r+0x1a>
 8012170:	6a21      	ldr	r1, [r4, #32]
 8012172:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012174:	4643      	mov	r3, r8
 8012176:	463a      	mov	r2, r7
 8012178:	4628      	mov	r0, r5
 801217a:	47b0      	blx	r6
 801217c:	2800      	cmp	r0, #0
 801217e:	dc06      	bgt.n	801218e <__sflush_r+0xfe>
 8012180:	89a3      	ldrh	r3, [r4, #12]
 8012182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012186:	81a3      	strh	r3, [r4, #12]
 8012188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801218c:	e78e      	b.n	80120ac <__sflush_r+0x1c>
 801218e:	4407      	add	r7, r0
 8012190:	eba8 0800 	sub.w	r8, r8, r0
 8012194:	e7e9      	b.n	801216a <__sflush_r+0xda>
 8012196:	bf00      	nop
 8012198:	dfbffffe 	.word	0xdfbffffe

0801219c <_fflush_r>:
 801219c:	b538      	push	{r3, r4, r5, lr}
 801219e:	690b      	ldr	r3, [r1, #16]
 80121a0:	4605      	mov	r5, r0
 80121a2:	460c      	mov	r4, r1
 80121a4:	b913      	cbnz	r3, 80121ac <_fflush_r+0x10>
 80121a6:	2500      	movs	r5, #0
 80121a8:	4628      	mov	r0, r5
 80121aa:	bd38      	pop	{r3, r4, r5, pc}
 80121ac:	b118      	cbz	r0, 80121b6 <_fflush_r+0x1a>
 80121ae:	6a03      	ldr	r3, [r0, #32]
 80121b0:	b90b      	cbnz	r3, 80121b6 <_fflush_r+0x1a>
 80121b2:	f7fe fa7b 	bl	80106ac <__sinit>
 80121b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d0f3      	beq.n	80121a6 <_fflush_r+0xa>
 80121be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80121c0:	07d0      	lsls	r0, r2, #31
 80121c2:	d404      	bmi.n	80121ce <_fflush_r+0x32>
 80121c4:	0599      	lsls	r1, r3, #22
 80121c6:	d402      	bmi.n	80121ce <_fflush_r+0x32>
 80121c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121ca:	f7fe fb86 	bl	80108da <__retarget_lock_acquire_recursive>
 80121ce:	4628      	mov	r0, r5
 80121d0:	4621      	mov	r1, r4
 80121d2:	f7ff ff5d 	bl	8012090 <__sflush_r>
 80121d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121d8:	07da      	lsls	r2, r3, #31
 80121da:	4605      	mov	r5, r0
 80121dc:	d4e4      	bmi.n	80121a8 <_fflush_r+0xc>
 80121de:	89a3      	ldrh	r3, [r4, #12]
 80121e0:	059b      	lsls	r3, r3, #22
 80121e2:	d4e1      	bmi.n	80121a8 <_fflush_r+0xc>
 80121e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121e6:	f7fe fb79 	bl	80108dc <__retarget_lock_release_recursive>
 80121ea:	e7dd      	b.n	80121a8 <_fflush_r+0xc>

080121ec <memmove>:
 80121ec:	4288      	cmp	r0, r1
 80121ee:	b510      	push	{r4, lr}
 80121f0:	eb01 0402 	add.w	r4, r1, r2
 80121f4:	d902      	bls.n	80121fc <memmove+0x10>
 80121f6:	4284      	cmp	r4, r0
 80121f8:	4623      	mov	r3, r4
 80121fa:	d807      	bhi.n	801220c <memmove+0x20>
 80121fc:	1e43      	subs	r3, r0, #1
 80121fe:	42a1      	cmp	r1, r4
 8012200:	d008      	beq.n	8012214 <memmove+0x28>
 8012202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012206:	f803 2f01 	strb.w	r2, [r3, #1]!
 801220a:	e7f8      	b.n	80121fe <memmove+0x12>
 801220c:	4402      	add	r2, r0
 801220e:	4601      	mov	r1, r0
 8012210:	428a      	cmp	r2, r1
 8012212:	d100      	bne.n	8012216 <memmove+0x2a>
 8012214:	bd10      	pop	{r4, pc}
 8012216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801221a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801221e:	e7f7      	b.n	8012210 <memmove+0x24>

08012220 <_sbrk_r>:
 8012220:	b538      	push	{r3, r4, r5, lr}
 8012222:	4d06      	ldr	r5, [pc, #24]	; (801223c <_sbrk_r+0x1c>)
 8012224:	2300      	movs	r3, #0
 8012226:	4604      	mov	r4, r0
 8012228:	4608      	mov	r0, r1
 801222a:	602b      	str	r3, [r5, #0]
 801222c:	f7f0 fbf0 	bl	8002a10 <_sbrk>
 8012230:	1c43      	adds	r3, r0, #1
 8012232:	d102      	bne.n	801223a <_sbrk_r+0x1a>
 8012234:	682b      	ldr	r3, [r5, #0]
 8012236:	b103      	cbz	r3, 801223a <_sbrk_r+0x1a>
 8012238:	6023      	str	r3, [r4, #0]
 801223a:	bd38      	pop	{r3, r4, r5, pc}
 801223c:	240009a0 	.word	0x240009a0

08012240 <__assert_func>:
 8012240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012242:	4614      	mov	r4, r2
 8012244:	461a      	mov	r2, r3
 8012246:	4b09      	ldr	r3, [pc, #36]	; (801226c <__assert_func+0x2c>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4605      	mov	r5, r0
 801224c:	68d8      	ldr	r0, [r3, #12]
 801224e:	b14c      	cbz	r4, 8012264 <__assert_func+0x24>
 8012250:	4b07      	ldr	r3, [pc, #28]	; (8012270 <__assert_func+0x30>)
 8012252:	9100      	str	r1, [sp, #0]
 8012254:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012258:	4906      	ldr	r1, [pc, #24]	; (8012274 <__assert_func+0x34>)
 801225a:	462b      	mov	r3, r5
 801225c:	f000 f872 	bl	8012344 <fiprintf>
 8012260:	f000 f882 	bl	8012368 <abort>
 8012264:	4b04      	ldr	r3, [pc, #16]	; (8012278 <__assert_func+0x38>)
 8012266:	461c      	mov	r4, r3
 8012268:	e7f3      	b.n	8012252 <__assert_func+0x12>
 801226a:	bf00      	nop
 801226c:	2400006c 	.word	0x2400006c
 8012270:	08012cff 	.word	0x08012cff
 8012274:	08012d0c 	.word	0x08012d0c
 8012278:	08012d3a 	.word	0x08012d3a

0801227c <_calloc_r>:
 801227c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801227e:	fba1 2402 	umull	r2, r4, r1, r2
 8012282:	b94c      	cbnz	r4, 8012298 <_calloc_r+0x1c>
 8012284:	4611      	mov	r1, r2
 8012286:	9201      	str	r2, [sp, #4]
 8012288:	f7ff f9a2 	bl	80115d0 <_malloc_r>
 801228c:	9a01      	ldr	r2, [sp, #4]
 801228e:	4605      	mov	r5, r0
 8012290:	b930      	cbnz	r0, 80122a0 <_calloc_r+0x24>
 8012292:	4628      	mov	r0, r5
 8012294:	b003      	add	sp, #12
 8012296:	bd30      	pop	{r4, r5, pc}
 8012298:	220c      	movs	r2, #12
 801229a:	6002      	str	r2, [r0, #0]
 801229c:	2500      	movs	r5, #0
 801229e:	e7f8      	b.n	8012292 <_calloc_r+0x16>
 80122a0:	4621      	mov	r1, r4
 80122a2:	f7fe fa9c 	bl	80107de <memset>
 80122a6:	e7f4      	b.n	8012292 <_calloc_r+0x16>

080122a8 <__ascii_mbtowc>:
 80122a8:	b082      	sub	sp, #8
 80122aa:	b901      	cbnz	r1, 80122ae <__ascii_mbtowc+0x6>
 80122ac:	a901      	add	r1, sp, #4
 80122ae:	b142      	cbz	r2, 80122c2 <__ascii_mbtowc+0x1a>
 80122b0:	b14b      	cbz	r3, 80122c6 <__ascii_mbtowc+0x1e>
 80122b2:	7813      	ldrb	r3, [r2, #0]
 80122b4:	600b      	str	r3, [r1, #0]
 80122b6:	7812      	ldrb	r2, [r2, #0]
 80122b8:	1e10      	subs	r0, r2, #0
 80122ba:	bf18      	it	ne
 80122bc:	2001      	movne	r0, #1
 80122be:	b002      	add	sp, #8
 80122c0:	4770      	bx	lr
 80122c2:	4610      	mov	r0, r2
 80122c4:	e7fb      	b.n	80122be <__ascii_mbtowc+0x16>
 80122c6:	f06f 0001 	mvn.w	r0, #1
 80122ca:	e7f8      	b.n	80122be <__ascii_mbtowc+0x16>

080122cc <_realloc_r>:
 80122cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122d0:	4680      	mov	r8, r0
 80122d2:	4614      	mov	r4, r2
 80122d4:	460e      	mov	r6, r1
 80122d6:	b921      	cbnz	r1, 80122e2 <_realloc_r+0x16>
 80122d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122dc:	4611      	mov	r1, r2
 80122de:	f7ff b977 	b.w	80115d0 <_malloc_r>
 80122e2:	b92a      	cbnz	r2, 80122f0 <_realloc_r+0x24>
 80122e4:	f7ff f900 	bl	80114e8 <_free_r>
 80122e8:	4625      	mov	r5, r4
 80122ea:	4628      	mov	r0, r5
 80122ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122f0:	f000 f841 	bl	8012376 <_malloc_usable_size_r>
 80122f4:	4284      	cmp	r4, r0
 80122f6:	4607      	mov	r7, r0
 80122f8:	d802      	bhi.n	8012300 <_realloc_r+0x34>
 80122fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80122fe:	d812      	bhi.n	8012326 <_realloc_r+0x5a>
 8012300:	4621      	mov	r1, r4
 8012302:	4640      	mov	r0, r8
 8012304:	f7ff f964 	bl	80115d0 <_malloc_r>
 8012308:	4605      	mov	r5, r0
 801230a:	2800      	cmp	r0, #0
 801230c:	d0ed      	beq.n	80122ea <_realloc_r+0x1e>
 801230e:	42bc      	cmp	r4, r7
 8012310:	4622      	mov	r2, r4
 8012312:	4631      	mov	r1, r6
 8012314:	bf28      	it	cs
 8012316:	463a      	movcs	r2, r7
 8012318:	f7fe fae1 	bl	80108de <memcpy>
 801231c:	4631      	mov	r1, r6
 801231e:	4640      	mov	r0, r8
 8012320:	f7ff f8e2 	bl	80114e8 <_free_r>
 8012324:	e7e1      	b.n	80122ea <_realloc_r+0x1e>
 8012326:	4635      	mov	r5, r6
 8012328:	e7df      	b.n	80122ea <_realloc_r+0x1e>

0801232a <__ascii_wctomb>:
 801232a:	b149      	cbz	r1, 8012340 <__ascii_wctomb+0x16>
 801232c:	2aff      	cmp	r2, #255	; 0xff
 801232e:	bf85      	ittet	hi
 8012330:	238a      	movhi	r3, #138	; 0x8a
 8012332:	6003      	strhi	r3, [r0, #0]
 8012334:	700a      	strbls	r2, [r1, #0]
 8012336:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801233a:	bf98      	it	ls
 801233c:	2001      	movls	r0, #1
 801233e:	4770      	bx	lr
 8012340:	4608      	mov	r0, r1
 8012342:	4770      	bx	lr

08012344 <fiprintf>:
 8012344:	b40e      	push	{r1, r2, r3}
 8012346:	b503      	push	{r0, r1, lr}
 8012348:	4601      	mov	r1, r0
 801234a:	ab03      	add	r3, sp, #12
 801234c:	4805      	ldr	r0, [pc, #20]	; (8012364 <fiprintf+0x20>)
 801234e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012352:	6800      	ldr	r0, [r0, #0]
 8012354:	9301      	str	r3, [sp, #4]
 8012356:	f000 f83f 	bl	80123d8 <_vfiprintf_r>
 801235a:	b002      	add	sp, #8
 801235c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012360:	b003      	add	sp, #12
 8012362:	4770      	bx	lr
 8012364:	2400006c 	.word	0x2400006c

08012368 <abort>:
 8012368:	b508      	push	{r3, lr}
 801236a:	2006      	movs	r0, #6
 801236c:	f000 fa0c 	bl	8012788 <raise>
 8012370:	2001      	movs	r0, #1
 8012372:	f7f0 fad5 	bl	8002920 <_exit>

08012376 <_malloc_usable_size_r>:
 8012376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801237a:	1f18      	subs	r0, r3, #4
 801237c:	2b00      	cmp	r3, #0
 801237e:	bfbc      	itt	lt
 8012380:	580b      	ldrlt	r3, [r1, r0]
 8012382:	18c0      	addlt	r0, r0, r3
 8012384:	4770      	bx	lr

08012386 <__sfputc_r>:
 8012386:	6893      	ldr	r3, [r2, #8]
 8012388:	3b01      	subs	r3, #1
 801238a:	2b00      	cmp	r3, #0
 801238c:	b410      	push	{r4}
 801238e:	6093      	str	r3, [r2, #8]
 8012390:	da08      	bge.n	80123a4 <__sfputc_r+0x1e>
 8012392:	6994      	ldr	r4, [r2, #24]
 8012394:	42a3      	cmp	r3, r4
 8012396:	db01      	blt.n	801239c <__sfputc_r+0x16>
 8012398:	290a      	cmp	r1, #10
 801239a:	d103      	bne.n	80123a4 <__sfputc_r+0x1e>
 801239c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123a0:	f000 b934 	b.w	801260c <__swbuf_r>
 80123a4:	6813      	ldr	r3, [r2, #0]
 80123a6:	1c58      	adds	r0, r3, #1
 80123a8:	6010      	str	r0, [r2, #0]
 80123aa:	7019      	strb	r1, [r3, #0]
 80123ac:	4608      	mov	r0, r1
 80123ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123b2:	4770      	bx	lr

080123b4 <__sfputs_r>:
 80123b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123b6:	4606      	mov	r6, r0
 80123b8:	460f      	mov	r7, r1
 80123ba:	4614      	mov	r4, r2
 80123bc:	18d5      	adds	r5, r2, r3
 80123be:	42ac      	cmp	r4, r5
 80123c0:	d101      	bne.n	80123c6 <__sfputs_r+0x12>
 80123c2:	2000      	movs	r0, #0
 80123c4:	e007      	b.n	80123d6 <__sfputs_r+0x22>
 80123c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123ca:	463a      	mov	r2, r7
 80123cc:	4630      	mov	r0, r6
 80123ce:	f7ff ffda 	bl	8012386 <__sfputc_r>
 80123d2:	1c43      	adds	r3, r0, #1
 80123d4:	d1f3      	bne.n	80123be <__sfputs_r+0xa>
 80123d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080123d8 <_vfiprintf_r>:
 80123d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123dc:	460d      	mov	r5, r1
 80123de:	b09d      	sub	sp, #116	; 0x74
 80123e0:	4614      	mov	r4, r2
 80123e2:	4698      	mov	r8, r3
 80123e4:	4606      	mov	r6, r0
 80123e6:	b118      	cbz	r0, 80123f0 <_vfiprintf_r+0x18>
 80123e8:	6a03      	ldr	r3, [r0, #32]
 80123ea:	b90b      	cbnz	r3, 80123f0 <_vfiprintf_r+0x18>
 80123ec:	f7fe f95e 	bl	80106ac <__sinit>
 80123f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123f2:	07d9      	lsls	r1, r3, #31
 80123f4:	d405      	bmi.n	8012402 <_vfiprintf_r+0x2a>
 80123f6:	89ab      	ldrh	r3, [r5, #12]
 80123f8:	059a      	lsls	r2, r3, #22
 80123fa:	d402      	bmi.n	8012402 <_vfiprintf_r+0x2a>
 80123fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123fe:	f7fe fa6c 	bl	80108da <__retarget_lock_acquire_recursive>
 8012402:	89ab      	ldrh	r3, [r5, #12]
 8012404:	071b      	lsls	r3, r3, #28
 8012406:	d501      	bpl.n	801240c <_vfiprintf_r+0x34>
 8012408:	692b      	ldr	r3, [r5, #16]
 801240a:	b99b      	cbnz	r3, 8012434 <_vfiprintf_r+0x5c>
 801240c:	4629      	mov	r1, r5
 801240e:	4630      	mov	r0, r6
 8012410:	f000 f93a 	bl	8012688 <__swsetup_r>
 8012414:	b170      	cbz	r0, 8012434 <_vfiprintf_r+0x5c>
 8012416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012418:	07dc      	lsls	r4, r3, #31
 801241a:	d504      	bpl.n	8012426 <_vfiprintf_r+0x4e>
 801241c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012420:	b01d      	add	sp, #116	; 0x74
 8012422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012426:	89ab      	ldrh	r3, [r5, #12]
 8012428:	0598      	lsls	r0, r3, #22
 801242a:	d4f7      	bmi.n	801241c <_vfiprintf_r+0x44>
 801242c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801242e:	f7fe fa55 	bl	80108dc <__retarget_lock_release_recursive>
 8012432:	e7f3      	b.n	801241c <_vfiprintf_r+0x44>
 8012434:	2300      	movs	r3, #0
 8012436:	9309      	str	r3, [sp, #36]	; 0x24
 8012438:	2320      	movs	r3, #32
 801243a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801243e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012442:	2330      	movs	r3, #48	; 0x30
 8012444:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80125f8 <_vfiprintf_r+0x220>
 8012448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801244c:	f04f 0901 	mov.w	r9, #1
 8012450:	4623      	mov	r3, r4
 8012452:	469a      	mov	sl, r3
 8012454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012458:	b10a      	cbz	r2, 801245e <_vfiprintf_r+0x86>
 801245a:	2a25      	cmp	r2, #37	; 0x25
 801245c:	d1f9      	bne.n	8012452 <_vfiprintf_r+0x7a>
 801245e:	ebba 0b04 	subs.w	fp, sl, r4
 8012462:	d00b      	beq.n	801247c <_vfiprintf_r+0xa4>
 8012464:	465b      	mov	r3, fp
 8012466:	4622      	mov	r2, r4
 8012468:	4629      	mov	r1, r5
 801246a:	4630      	mov	r0, r6
 801246c:	f7ff ffa2 	bl	80123b4 <__sfputs_r>
 8012470:	3001      	adds	r0, #1
 8012472:	f000 80a9 	beq.w	80125c8 <_vfiprintf_r+0x1f0>
 8012476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012478:	445a      	add	r2, fp
 801247a:	9209      	str	r2, [sp, #36]	; 0x24
 801247c:	f89a 3000 	ldrb.w	r3, [sl]
 8012480:	2b00      	cmp	r3, #0
 8012482:	f000 80a1 	beq.w	80125c8 <_vfiprintf_r+0x1f0>
 8012486:	2300      	movs	r3, #0
 8012488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801248c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012490:	f10a 0a01 	add.w	sl, sl, #1
 8012494:	9304      	str	r3, [sp, #16]
 8012496:	9307      	str	r3, [sp, #28]
 8012498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801249c:	931a      	str	r3, [sp, #104]	; 0x68
 801249e:	4654      	mov	r4, sl
 80124a0:	2205      	movs	r2, #5
 80124a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124a6:	4854      	ldr	r0, [pc, #336]	; (80125f8 <_vfiprintf_r+0x220>)
 80124a8:	f7ed ff1a 	bl	80002e0 <memchr>
 80124ac:	9a04      	ldr	r2, [sp, #16]
 80124ae:	b9d8      	cbnz	r0, 80124e8 <_vfiprintf_r+0x110>
 80124b0:	06d1      	lsls	r1, r2, #27
 80124b2:	bf44      	itt	mi
 80124b4:	2320      	movmi	r3, #32
 80124b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124ba:	0713      	lsls	r3, r2, #28
 80124bc:	bf44      	itt	mi
 80124be:	232b      	movmi	r3, #43	; 0x2b
 80124c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124c4:	f89a 3000 	ldrb.w	r3, [sl]
 80124c8:	2b2a      	cmp	r3, #42	; 0x2a
 80124ca:	d015      	beq.n	80124f8 <_vfiprintf_r+0x120>
 80124cc:	9a07      	ldr	r2, [sp, #28]
 80124ce:	4654      	mov	r4, sl
 80124d0:	2000      	movs	r0, #0
 80124d2:	f04f 0c0a 	mov.w	ip, #10
 80124d6:	4621      	mov	r1, r4
 80124d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124dc:	3b30      	subs	r3, #48	; 0x30
 80124de:	2b09      	cmp	r3, #9
 80124e0:	d94d      	bls.n	801257e <_vfiprintf_r+0x1a6>
 80124e2:	b1b0      	cbz	r0, 8012512 <_vfiprintf_r+0x13a>
 80124e4:	9207      	str	r2, [sp, #28]
 80124e6:	e014      	b.n	8012512 <_vfiprintf_r+0x13a>
 80124e8:	eba0 0308 	sub.w	r3, r0, r8
 80124ec:	fa09 f303 	lsl.w	r3, r9, r3
 80124f0:	4313      	orrs	r3, r2
 80124f2:	9304      	str	r3, [sp, #16]
 80124f4:	46a2      	mov	sl, r4
 80124f6:	e7d2      	b.n	801249e <_vfiprintf_r+0xc6>
 80124f8:	9b03      	ldr	r3, [sp, #12]
 80124fa:	1d19      	adds	r1, r3, #4
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	9103      	str	r1, [sp, #12]
 8012500:	2b00      	cmp	r3, #0
 8012502:	bfbb      	ittet	lt
 8012504:	425b      	neglt	r3, r3
 8012506:	f042 0202 	orrlt.w	r2, r2, #2
 801250a:	9307      	strge	r3, [sp, #28]
 801250c:	9307      	strlt	r3, [sp, #28]
 801250e:	bfb8      	it	lt
 8012510:	9204      	strlt	r2, [sp, #16]
 8012512:	7823      	ldrb	r3, [r4, #0]
 8012514:	2b2e      	cmp	r3, #46	; 0x2e
 8012516:	d10c      	bne.n	8012532 <_vfiprintf_r+0x15a>
 8012518:	7863      	ldrb	r3, [r4, #1]
 801251a:	2b2a      	cmp	r3, #42	; 0x2a
 801251c:	d134      	bne.n	8012588 <_vfiprintf_r+0x1b0>
 801251e:	9b03      	ldr	r3, [sp, #12]
 8012520:	1d1a      	adds	r2, r3, #4
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	9203      	str	r2, [sp, #12]
 8012526:	2b00      	cmp	r3, #0
 8012528:	bfb8      	it	lt
 801252a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801252e:	3402      	adds	r4, #2
 8012530:	9305      	str	r3, [sp, #20]
 8012532:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012608 <_vfiprintf_r+0x230>
 8012536:	7821      	ldrb	r1, [r4, #0]
 8012538:	2203      	movs	r2, #3
 801253a:	4650      	mov	r0, sl
 801253c:	f7ed fed0 	bl	80002e0 <memchr>
 8012540:	b138      	cbz	r0, 8012552 <_vfiprintf_r+0x17a>
 8012542:	9b04      	ldr	r3, [sp, #16]
 8012544:	eba0 000a 	sub.w	r0, r0, sl
 8012548:	2240      	movs	r2, #64	; 0x40
 801254a:	4082      	lsls	r2, r0
 801254c:	4313      	orrs	r3, r2
 801254e:	3401      	adds	r4, #1
 8012550:	9304      	str	r3, [sp, #16]
 8012552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012556:	4829      	ldr	r0, [pc, #164]	; (80125fc <_vfiprintf_r+0x224>)
 8012558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801255c:	2206      	movs	r2, #6
 801255e:	f7ed febf 	bl	80002e0 <memchr>
 8012562:	2800      	cmp	r0, #0
 8012564:	d03f      	beq.n	80125e6 <_vfiprintf_r+0x20e>
 8012566:	4b26      	ldr	r3, [pc, #152]	; (8012600 <_vfiprintf_r+0x228>)
 8012568:	bb1b      	cbnz	r3, 80125b2 <_vfiprintf_r+0x1da>
 801256a:	9b03      	ldr	r3, [sp, #12]
 801256c:	3307      	adds	r3, #7
 801256e:	f023 0307 	bic.w	r3, r3, #7
 8012572:	3308      	adds	r3, #8
 8012574:	9303      	str	r3, [sp, #12]
 8012576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012578:	443b      	add	r3, r7
 801257a:	9309      	str	r3, [sp, #36]	; 0x24
 801257c:	e768      	b.n	8012450 <_vfiprintf_r+0x78>
 801257e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012582:	460c      	mov	r4, r1
 8012584:	2001      	movs	r0, #1
 8012586:	e7a6      	b.n	80124d6 <_vfiprintf_r+0xfe>
 8012588:	2300      	movs	r3, #0
 801258a:	3401      	adds	r4, #1
 801258c:	9305      	str	r3, [sp, #20]
 801258e:	4619      	mov	r1, r3
 8012590:	f04f 0c0a 	mov.w	ip, #10
 8012594:	4620      	mov	r0, r4
 8012596:	f810 2b01 	ldrb.w	r2, [r0], #1
 801259a:	3a30      	subs	r2, #48	; 0x30
 801259c:	2a09      	cmp	r2, #9
 801259e:	d903      	bls.n	80125a8 <_vfiprintf_r+0x1d0>
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d0c6      	beq.n	8012532 <_vfiprintf_r+0x15a>
 80125a4:	9105      	str	r1, [sp, #20]
 80125a6:	e7c4      	b.n	8012532 <_vfiprintf_r+0x15a>
 80125a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80125ac:	4604      	mov	r4, r0
 80125ae:	2301      	movs	r3, #1
 80125b0:	e7f0      	b.n	8012594 <_vfiprintf_r+0x1bc>
 80125b2:	ab03      	add	r3, sp, #12
 80125b4:	9300      	str	r3, [sp, #0]
 80125b6:	462a      	mov	r2, r5
 80125b8:	4b12      	ldr	r3, [pc, #72]	; (8012604 <_vfiprintf_r+0x22c>)
 80125ba:	a904      	add	r1, sp, #16
 80125bc:	4630      	mov	r0, r6
 80125be:	f7fd fc3f 	bl	800fe40 <_printf_float>
 80125c2:	4607      	mov	r7, r0
 80125c4:	1c78      	adds	r0, r7, #1
 80125c6:	d1d6      	bne.n	8012576 <_vfiprintf_r+0x19e>
 80125c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125ca:	07d9      	lsls	r1, r3, #31
 80125cc:	d405      	bmi.n	80125da <_vfiprintf_r+0x202>
 80125ce:	89ab      	ldrh	r3, [r5, #12]
 80125d0:	059a      	lsls	r2, r3, #22
 80125d2:	d402      	bmi.n	80125da <_vfiprintf_r+0x202>
 80125d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125d6:	f7fe f981 	bl	80108dc <__retarget_lock_release_recursive>
 80125da:	89ab      	ldrh	r3, [r5, #12]
 80125dc:	065b      	lsls	r3, r3, #25
 80125de:	f53f af1d 	bmi.w	801241c <_vfiprintf_r+0x44>
 80125e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125e4:	e71c      	b.n	8012420 <_vfiprintf_r+0x48>
 80125e6:	ab03      	add	r3, sp, #12
 80125e8:	9300      	str	r3, [sp, #0]
 80125ea:	462a      	mov	r2, r5
 80125ec:	4b05      	ldr	r3, [pc, #20]	; (8012604 <_vfiprintf_r+0x22c>)
 80125ee:	a904      	add	r1, sp, #16
 80125f0:	4630      	mov	r0, r6
 80125f2:	f7fd fead 	bl	8010350 <_printf_i>
 80125f6:	e7e4      	b.n	80125c2 <_vfiprintf_r+0x1ea>
 80125f8:	08012ce4 	.word	0x08012ce4
 80125fc:	08012cee 	.word	0x08012cee
 8012600:	0800fe41 	.word	0x0800fe41
 8012604:	080123b5 	.word	0x080123b5
 8012608:	08012cea 	.word	0x08012cea

0801260c <__swbuf_r>:
 801260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801260e:	460e      	mov	r6, r1
 8012610:	4614      	mov	r4, r2
 8012612:	4605      	mov	r5, r0
 8012614:	b118      	cbz	r0, 801261e <__swbuf_r+0x12>
 8012616:	6a03      	ldr	r3, [r0, #32]
 8012618:	b90b      	cbnz	r3, 801261e <__swbuf_r+0x12>
 801261a:	f7fe f847 	bl	80106ac <__sinit>
 801261e:	69a3      	ldr	r3, [r4, #24]
 8012620:	60a3      	str	r3, [r4, #8]
 8012622:	89a3      	ldrh	r3, [r4, #12]
 8012624:	071a      	lsls	r2, r3, #28
 8012626:	d525      	bpl.n	8012674 <__swbuf_r+0x68>
 8012628:	6923      	ldr	r3, [r4, #16]
 801262a:	b31b      	cbz	r3, 8012674 <__swbuf_r+0x68>
 801262c:	6823      	ldr	r3, [r4, #0]
 801262e:	6922      	ldr	r2, [r4, #16]
 8012630:	1a98      	subs	r0, r3, r2
 8012632:	6963      	ldr	r3, [r4, #20]
 8012634:	b2f6      	uxtb	r6, r6
 8012636:	4283      	cmp	r3, r0
 8012638:	4637      	mov	r7, r6
 801263a:	dc04      	bgt.n	8012646 <__swbuf_r+0x3a>
 801263c:	4621      	mov	r1, r4
 801263e:	4628      	mov	r0, r5
 8012640:	f7ff fdac 	bl	801219c <_fflush_r>
 8012644:	b9e0      	cbnz	r0, 8012680 <__swbuf_r+0x74>
 8012646:	68a3      	ldr	r3, [r4, #8]
 8012648:	3b01      	subs	r3, #1
 801264a:	60a3      	str	r3, [r4, #8]
 801264c:	6823      	ldr	r3, [r4, #0]
 801264e:	1c5a      	adds	r2, r3, #1
 8012650:	6022      	str	r2, [r4, #0]
 8012652:	701e      	strb	r6, [r3, #0]
 8012654:	6962      	ldr	r2, [r4, #20]
 8012656:	1c43      	adds	r3, r0, #1
 8012658:	429a      	cmp	r2, r3
 801265a:	d004      	beq.n	8012666 <__swbuf_r+0x5a>
 801265c:	89a3      	ldrh	r3, [r4, #12]
 801265e:	07db      	lsls	r3, r3, #31
 8012660:	d506      	bpl.n	8012670 <__swbuf_r+0x64>
 8012662:	2e0a      	cmp	r6, #10
 8012664:	d104      	bne.n	8012670 <__swbuf_r+0x64>
 8012666:	4621      	mov	r1, r4
 8012668:	4628      	mov	r0, r5
 801266a:	f7ff fd97 	bl	801219c <_fflush_r>
 801266e:	b938      	cbnz	r0, 8012680 <__swbuf_r+0x74>
 8012670:	4638      	mov	r0, r7
 8012672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012674:	4621      	mov	r1, r4
 8012676:	4628      	mov	r0, r5
 8012678:	f000 f806 	bl	8012688 <__swsetup_r>
 801267c:	2800      	cmp	r0, #0
 801267e:	d0d5      	beq.n	801262c <__swbuf_r+0x20>
 8012680:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012684:	e7f4      	b.n	8012670 <__swbuf_r+0x64>
	...

08012688 <__swsetup_r>:
 8012688:	b538      	push	{r3, r4, r5, lr}
 801268a:	4b2a      	ldr	r3, [pc, #168]	; (8012734 <__swsetup_r+0xac>)
 801268c:	4605      	mov	r5, r0
 801268e:	6818      	ldr	r0, [r3, #0]
 8012690:	460c      	mov	r4, r1
 8012692:	b118      	cbz	r0, 801269c <__swsetup_r+0x14>
 8012694:	6a03      	ldr	r3, [r0, #32]
 8012696:	b90b      	cbnz	r3, 801269c <__swsetup_r+0x14>
 8012698:	f7fe f808 	bl	80106ac <__sinit>
 801269c:	89a3      	ldrh	r3, [r4, #12]
 801269e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126a2:	0718      	lsls	r0, r3, #28
 80126a4:	d422      	bmi.n	80126ec <__swsetup_r+0x64>
 80126a6:	06d9      	lsls	r1, r3, #27
 80126a8:	d407      	bmi.n	80126ba <__swsetup_r+0x32>
 80126aa:	2309      	movs	r3, #9
 80126ac:	602b      	str	r3, [r5, #0]
 80126ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80126b2:	81a3      	strh	r3, [r4, #12]
 80126b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126b8:	e034      	b.n	8012724 <__swsetup_r+0x9c>
 80126ba:	0758      	lsls	r0, r3, #29
 80126bc:	d512      	bpl.n	80126e4 <__swsetup_r+0x5c>
 80126be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126c0:	b141      	cbz	r1, 80126d4 <__swsetup_r+0x4c>
 80126c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126c6:	4299      	cmp	r1, r3
 80126c8:	d002      	beq.n	80126d0 <__swsetup_r+0x48>
 80126ca:	4628      	mov	r0, r5
 80126cc:	f7fe ff0c 	bl	80114e8 <_free_r>
 80126d0:	2300      	movs	r3, #0
 80126d2:	6363      	str	r3, [r4, #52]	; 0x34
 80126d4:	89a3      	ldrh	r3, [r4, #12]
 80126d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80126da:	81a3      	strh	r3, [r4, #12]
 80126dc:	2300      	movs	r3, #0
 80126de:	6063      	str	r3, [r4, #4]
 80126e0:	6923      	ldr	r3, [r4, #16]
 80126e2:	6023      	str	r3, [r4, #0]
 80126e4:	89a3      	ldrh	r3, [r4, #12]
 80126e6:	f043 0308 	orr.w	r3, r3, #8
 80126ea:	81a3      	strh	r3, [r4, #12]
 80126ec:	6923      	ldr	r3, [r4, #16]
 80126ee:	b94b      	cbnz	r3, 8012704 <__swsetup_r+0x7c>
 80126f0:	89a3      	ldrh	r3, [r4, #12]
 80126f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80126f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126fa:	d003      	beq.n	8012704 <__swsetup_r+0x7c>
 80126fc:	4621      	mov	r1, r4
 80126fe:	4628      	mov	r0, r5
 8012700:	f000 f884 	bl	801280c <__smakebuf_r>
 8012704:	89a0      	ldrh	r0, [r4, #12]
 8012706:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801270a:	f010 0301 	ands.w	r3, r0, #1
 801270e:	d00a      	beq.n	8012726 <__swsetup_r+0x9e>
 8012710:	2300      	movs	r3, #0
 8012712:	60a3      	str	r3, [r4, #8]
 8012714:	6963      	ldr	r3, [r4, #20]
 8012716:	425b      	negs	r3, r3
 8012718:	61a3      	str	r3, [r4, #24]
 801271a:	6923      	ldr	r3, [r4, #16]
 801271c:	b943      	cbnz	r3, 8012730 <__swsetup_r+0xa8>
 801271e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012722:	d1c4      	bne.n	80126ae <__swsetup_r+0x26>
 8012724:	bd38      	pop	{r3, r4, r5, pc}
 8012726:	0781      	lsls	r1, r0, #30
 8012728:	bf58      	it	pl
 801272a:	6963      	ldrpl	r3, [r4, #20]
 801272c:	60a3      	str	r3, [r4, #8]
 801272e:	e7f4      	b.n	801271a <__swsetup_r+0x92>
 8012730:	2000      	movs	r0, #0
 8012732:	e7f7      	b.n	8012724 <__swsetup_r+0x9c>
 8012734:	2400006c 	.word	0x2400006c

08012738 <_raise_r>:
 8012738:	291f      	cmp	r1, #31
 801273a:	b538      	push	{r3, r4, r5, lr}
 801273c:	4604      	mov	r4, r0
 801273e:	460d      	mov	r5, r1
 8012740:	d904      	bls.n	801274c <_raise_r+0x14>
 8012742:	2316      	movs	r3, #22
 8012744:	6003      	str	r3, [r0, #0]
 8012746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801274a:	bd38      	pop	{r3, r4, r5, pc}
 801274c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801274e:	b112      	cbz	r2, 8012756 <_raise_r+0x1e>
 8012750:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012754:	b94b      	cbnz	r3, 801276a <_raise_r+0x32>
 8012756:	4620      	mov	r0, r4
 8012758:	f000 f830 	bl	80127bc <_getpid_r>
 801275c:	462a      	mov	r2, r5
 801275e:	4601      	mov	r1, r0
 8012760:	4620      	mov	r0, r4
 8012762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012766:	f000 b817 	b.w	8012798 <_kill_r>
 801276a:	2b01      	cmp	r3, #1
 801276c:	d00a      	beq.n	8012784 <_raise_r+0x4c>
 801276e:	1c59      	adds	r1, r3, #1
 8012770:	d103      	bne.n	801277a <_raise_r+0x42>
 8012772:	2316      	movs	r3, #22
 8012774:	6003      	str	r3, [r0, #0]
 8012776:	2001      	movs	r0, #1
 8012778:	e7e7      	b.n	801274a <_raise_r+0x12>
 801277a:	2400      	movs	r4, #0
 801277c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012780:	4628      	mov	r0, r5
 8012782:	4798      	blx	r3
 8012784:	2000      	movs	r0, #0
 8012786:	e7e0      	b.n	801274a <_raise_r+0x12>

08012788 <raise>:
 8012788:	4b02      	ldr	r3, [pc, #8]	; (8012794 <raise+0xc>)
 801278a:	4601      	mov	r1, r0
 801278c:	6818      	ldr	r0, [r3, #0]
 801278e:	f7ff bfd3 	b.w	8012738 <_raise_r>
 8012792:	bf00      	nop
 8012794:	2400006c 	.word	0x2400006c

08012798 <_kill_r>:
 8012798:	b538      	push	{r3, r4, r5, lr}
 801279a:	4d07      	ldr	r5, [pc, #28]	; (80127b8 <_kill_r+0x20>)
 801279c:	2300      	movs	r3, #0
 801279e:	4604      	mov	r4, r0
 80127a0:	4608      	mov	r0, r1
 80127a2:	4611      	mov	r1, r2
 80127a4:	602b      	str	r3, [r5, #0]
 80127a6:	f7f0 f8ab 	bl	8002900 <_kill>
 80127aa:	1c43      	adds	r3, r0, #1
 80127ac:	d102      	bne.n	80127b4 <_kill_r+0x1c>
 80127ae:	682b      	ldr	r3, [r5, #0]
 80127b0:	b103      	cbz	r3, 80127b4 <_kill_r+0x1c>
 80127b2:	6023      	str	r3, [r4, #0]
 80127b4:	bd38      	pop	{r3, r4, r5, pc}
 80127b6:	bf00      	nop
 80127b8:	240009a0 	.word	0x240009a0

080127bc <_getpid_r>:
 80127bc:	f7f0 b898 	b.w	80028f0 <_getpid>

080127c0 <__swhatbuf_r>:
 80127c0:	b570      	push	{r4, r5, r6, lr}
 80127c2:	460c      	mov	r4, r1
 80127c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127c8:	2900      	cmp	r1, #0
 80127ca:	b096      	sub	sp, #88	; 0x58
 80127cc:	4615      	mov	r5, r2
 80127ce:	461e      	mov	r6, r3
 80127d0:	da0d      	bge.n	80127ee <__swhatbuf_r+0x2e>
 80127d2:	89a3      	ldrh	r3, [r4, #12]
 80127d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80127d8:	f04f 0100 	mov.w	r1, #0
 80127dc:	bf0c      	ite	eq
 80127de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80127e2:	2340      	movne	r3, #64	; 0x40
 80127e4:	2000      	movs	r0, #0
 80127e6:	6031      	str	r1, [r6, #0]
 80127e8:	602b      	str	r3, [r5, #0]
 80127ea:	b016      	add	sp, #88	; 0x58
 80127ec:	bd70      	pop	{r4, r5, r6, pc}
 80127ee:	466a      	mov	r2, sp
 80127f0:	f000 f848 	bl	8012884 <_fstat_r>
 80127f4:	2800      	cmp	r0, #0
 80127f6:	dbec      	blt.n	80127d2 <__swhatbuf_r+0x12>
 80127f8:	9901      	ldr	r1, [sp, #4]
 80127fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80127fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012802:	4259      	negs	r1, r3
 8012804:	4159      	adcs	r1, r3
 8012806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801280a:	e7eb      	b.n	80127e4 <__swhatbuf_r+0x24>

0801280c <__smakebuf_r>:
 801280c:	898b      	ldrh	r3, [r1, #12]
 801280e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012810:	079d      	lsls	r5, r3, #30
 8012812:	4606      	mov	r6, r0
 8012814:	460c      	mov	r4, r1
 8012816:	d507      	bpl.n	8012828 <__smakebuf_r+0x1c>
 8012818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801281c:	6023      	str	r3, [r4, #0]
 801281e:	6123      	str	r3, [r4, #16]
 8012820:	2301      	movs	r3, #1
 8012822:	6163      	str	r3, [r4, #20]
 8012824:	b002      	add	sp, #8
 8012826:	bd70      	pop	{r4, r5, r6, pc}
 8012828:	ab01      	add	r3, sp, #4
 801282a:	466a      	mov	r2, sp
 801282c:	f7ff ffc8 	bl	80127c0 <__swhatbuf_r>
 8012830:	9900      	ldr	r1, [sp, #0]
 8012832:	4605      	mov	r5, r0
 8012834:	4630      	mov	r0, r6
 8012836:	f7fe fecb 	bl	80115d0 <_malloc_r>
 801283a:	b948      	cbnz	r0, 8012850 <__smakebuf_r+0x44>
 801283c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012840:	059a      	lsls	r2, r3, #22
 8012842:	d4ef      	bmi.n	8012824 <__smakebuf_r+0x18>
 8012844:	f023 0303 	bic.w	r3, r3, #3
 8012848:	f043 0302 	orr.w	r3, r3, #2
 801284c:	81a3      	strh	r3, [r4, #12]
 801284e:	e7e3      	b.n	8012818 <__smakebuf_r+0xc>
 8012850:	89a3      	ldrh	r3, [r4, #12]
 8012852:	6020      	str	r0, [r4, #0]
 8012854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012858:	81a3      	strh	r3, [r4, #12]
 801285a:	9b00      	ldr	r3, [sp, #0]
 801285c:	6163      	str	r3, [r4, #20]
 801285e:	9b01      	ldr	r3, [sp, #4]
 8012860:	6120      	str	r0, [r4, #16]
 8012862:	b15b      	cbz	r3, 801287c <__smakebuf_r+0x70>
 8012864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012868:	4630      	mov	r0, r6
 801286a:	f000 f81d 	bl	80128a8 <_isatty_r>
 801286e:	b128      	cbz	r0, 801287c <__smakebuf_r+0x70>
 8012870:	89a3      	ldrh	r3, [r4, #12]
 8012872:	f023 0303 	bic.w	r3, r3, #3
 8012876:	f043 0301 	orr.w	r3, r3, #1
 801287a:	81a3      	strh	r3, [r4, #12]
 801287c:	89a3      	ldrh	r3, [r4, #12]
 801287e:	431d      	orrs	r5, r3
 8012880:	81a5      	strh	r5, [r4, #12]
 8012882:	e7cf      	b.n	8012824 <__smakebuf_r+0x18>

08012884 <_fstat_r>:
 8012884:	b538      	push	{r3, r4, r5, lr}
 8012886:	4d07      	ldr	r5, [pc, #28]	; (80128a4 <_fstat_r+0x20>)
 8012888:	2300      	movs	r3, #0
 801288a:	4604      	mov	r4, r0
 801288c:	4608      	mov	r0, r1
 801288e:	4611      	mov	r1, r2
 8012890:	602b      	str	r3, [r5, #0]
 8012892:	f7f0 f894 	bl	80029be <_fstat>
 8012896:	1c43      	adds	r3, r0, #1
 8012898:	d102      	bne.n	80128a0 <_fstat_r+0x1c>
 801289a:	682b      	ldr	r3, [r5, #0]
 801289c:	b103      	cbz	r3, 80128a0 <_fstat_r+0x1c>
 801289e:	6023      	str	r3, [r4, #0]
 80128a0:	bd38      	pop	{r3, r4, r5, pc}
 80128a2:	bf00      	nop
 80128a4:	240009a0 	.word	0x240009a0

080128a8 <_isatty_r>:
 80128a8:	b538      	push	{r3, r4, r5, lr}
 80128aa:	4d06      	ldr	r5, [pc, #24]	; (80128c4 <_isatty_r+0x1c>)
 80128ac:	2300      	movs	r3, #0
 80128ae:	4604      	mov	r4, r0
 80128b0:	4608      	mov	r0, r1
 80128b2:	602b      	str	r3, [r5, #0]
 80128b4:	f7f0 f893 	bl	80029de <_isatty>
 80128b8:	1c43      	adds	r3, r0, #1
 80128ba:	d102      	bne.n	80128c2 <_isatty_r+0x1a>
 80128bc:	682b      	ldr	r3, [r5, #0]
 80128be:	b103      	cbz	r3, 80128c2 <_isatty_r+0x1a>
 80128c0:	6023      	str	r3, [r4, #0]
 80128c2:	bd38      	pop	{r3, r4, r5, pc}
 80128c4:	240009a0 	.word	0x240009a0

080128c8 <_init>:
 80128c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ca:	bf00      	nop
 80128cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128ce:	bc08      	pop	{r3}
 80128d0:	469e      	mov	lr, r3
 80128d2:	4770      	bx	lr

080128d4 <_fini>:
 80128d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128d6:	bf00      	nop
 80128d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128da:	bc08      	pop	{r3}
 80128dc:	469e      	mov	lr, r3
 80128de:	4770      	bx	lr
