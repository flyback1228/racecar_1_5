
racecar_pcb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08012860  08012860  00022860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012dbc  08012dbc  00022dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012dc4  08012dc4  00022dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012dc8  08012dc8  00022dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  08012dcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007d4  240001dc  08012fa8  000301dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009b0  08012fa8  000309b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 11 .debug_info   000224f0  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003659  00000000  00000000  0005273d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001918  00000000  00000000  00055d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000013b8  00000000  00000000  000576b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e167  00000000  00000000  00058a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00020f59  00000000  00000000  00096bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017f04f  00000000  00000000  000b7b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007c14  00000000  00000000  00236b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0023e78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012848 	.word	0x08012848

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	08012848 	.word	0x08012848

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f002 fa68 	bl	8002b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f822 	bl	80006dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000698:	f000 f89e 	bl	80007d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 fdbc 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a0:	f000 fd8a 	bl	80011b8 <MX_DMA_Init>
  MX_UART5_Init();
 80006a4:	f000 fa70 	bl	8000b88 <MX_UART5_Init>
  MX_LPUART1_UART_Init();
 80006a8:	f000 fa22 	bl	8000af0 <MX_LPUART1_UART_Init>
  MX_UART7_Init();
 80006ac:	f000 fab8 	bl	8000c20 <MX_UART7_Init>
  MX_I2C1_Init();
 80006b0:	f000 f99e 	bl	80009f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006b4:	f000 f9dc 	bl	8000a70 <MX_I2C2_Init>
  MX_TIM2_Init();
 80006b8:	f000 fafe 	bl	8000cb8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006bc:	f000 fb94 	bl	8000de8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006c0:	f000 fc14 	bl	8000eec <MX_TIM5_Init>
  MX_TIM15_Init();
 80006c4:	f000 fcb0 	bl	8001028 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006c8:	f000 fd50 	bl	800116c <MX_TIM16_Init>
  MX_ADC1_Init();
 80006cc:	f000 f8a2 	bl	8000814 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  setup();
 80006d0:	f001 fb00 	bl	8001cd4 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80006d4:	f001 fbbc 	bl	8001e50 <loop>
  {
 80006d8:	e7fc      	b.n	80006d4 <main+0x48>
	...

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09c      	sub	sp, #112	; 0x70
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	224c      	movs	r2, #76	; 0x4c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f010 f837 	bl	801075e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2220      	movs	r2, #32
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f010 f831 	bl	801075e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006fc:	2002      	movs	r0, #2
 80006fe:	f007 fc39 	bl	8007f74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <SystemClock_Config+0xf4>)
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	4a31      	ldr	r2, [pc, #196]	; (80007d0 <SystemClock_Config+0xf4>)
 800070c:	f023 0301 	bic.w	r3, r3, #1
 8000710:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000712:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <SystemClock_Config+0xf4>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <SystemClock_Config+0xf8>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <SystemClock_Config+0xf8>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <SystemClock_Config+0xf8>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000734:	bf00      	nop
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <SystemClock_Config+0xf8>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000742:	d1f8      	bne.n	8000736 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000744:	2303      	movs	r3, #3
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800074e:	2301      	movs	r3, #1
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	2302      	movs	r3, #2
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800075e:	2305      	movs	r3, #5
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000762:	23a0      	movs	r3, #160	; 0xa0
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 800076e:	2308      	movs	r3, #8
 8000770:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000772:	2308      	movs	r3, #8
 8000774:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000776:	2300      	movs	r3, #0
 8000778:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4618      	mov	r0, r3
 8000784:	f007 fc30 	bl	8007fe8 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800078e:	f000 fdfb 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	233f      	movs	r3, #63	; 0x3f
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2303      	movs	r3, #3
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800079e:	2309      	movs	r3, #9
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f008 f870 	bl	800889c <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80007c2:	f000 fde1 	bl	8001388 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3770      	adds	r7, #112	; 0x70
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800

080007d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0b0      	sub	sp, #192	; 0xc0
 80007dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	22c0      	movs	r2, #192	; 0xc0
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00f ffba 	bl	801075e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80007ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80007ee:	f04f 0300 	mov.w	r3, #0
 80007f2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80007f6:	2300      	movs	r3, #0
 80007f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4618      	mov	r0, r3
 80007fe:	f008 fbd9 	bl	8008fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000808:	f000 fdbe 	bl	8001388 <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	37c0      	adds	r7, #192	; 0xc0
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]
 8000836:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000838:	4b63      	ldr	r3, [pc, #396]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800083a:	4a64      	ldr	r2, [pc, #400]	; (80009cc <MX_ADC1_Init+0x1b8>)
 800083c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800083e:	4b62      	ldr	r3, [pc, #392]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000840:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000846:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b5e      	ldr	r3, [pc, #376]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b5d      	ldr	r3, [pc, #372]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b5b      	ldr	r3, [pc, #364]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800085e:	4b5a      	ldr	r3, [pc, #360]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 8000864:	4b58      	ldr	r3, [pc, #352]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000866:	2208      	movs	r2, #8
 8000868:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b57      	ldr	r3, [pc, #348]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b55      	ldr	r3, [pc, #340]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b54      	ldr	r3, [pc, #336]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b52      	ldr	r3, [pc, #328]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000882:	4b51      	ldr	r3, [pc, #324]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000884:	2200      	movs	r2, #0
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000888:	4b4f      	ldr	r3, [pc, #316]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800088a:	2200      	movs	r2, #0
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800088e:	4b4e      	ldr	r3, [pc, #312]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000896:	484c      	ldr	r0, [pc, #304]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000898:	f002 fc2e 	bl	80030f8 <HAL_ADC_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008a2:	f000 fd71 	bl	8001388 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4845      	ldr	r0, [pc, #276]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80008b2:	f003 febb 	bl	800462c <HAL_ADCEx_MultiModeConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008bc:	f000 fd64 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008c0:	4b43      	ldr	r3, [pc, #268]	; (80009d0 <MX_ADC1_Init+0x1bc>)
 80008c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c4:	2306      	movs	r3, #6
 80008c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80008c8:	2304      	movs	r3, #4
 80008ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d2:	2304      	movs	r3, #4
 80008d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4839      	ldr	r0, [pc, #228]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80008e4:	f003 f8d0 	bl	8003a88 <HAL_ADC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008ee:	f000 fd4b 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <MX_ADC1_Init+0x1c0>)
 80008f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008f6:	230c      	movs	r3, #12
 80008f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4832      	ldr	r0, [pc, #200]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000900:	f003 f8c2 	bl	8003a88 <HAL_ADC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800090a:	f000 fd3d 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800090e:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MX_ADC1_Init+0x1c4>)
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000912:	2312      	movs	r3, #18
 8000914:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	4619      	mov	r1, r3
 800091a:	482b      	ldr	r0, [pc, #172]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800091c:	f003 f8b4 	bl	8003a88 <HAL_ADC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000926:	f000 fd2f 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_ADC1_Init+0x1c8>)
 800092c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800092e:	2318      	movs	r3, #24
 8000930:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4824      	ldr	r0, [pc, #144]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000938:	f003 f8a6 	bl	8003a88 <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000942:	f000 fd21 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_ADC1_Init+0x1cc>)
 8000948:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800094a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	481c      	ldr	r0, [pc, #112]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000956:	f003 f897 	bl	8003a88 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000960:	f000 fd12 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_ADC1_Init+0x1d0>)
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000968:	f44f 7383 	mov.w	r3, #262	; 0x106
 800096c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4815      	ldr	r0, [pc, #84]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000974:	f003 f888 	bl	8003a88 <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800097e:	f000 fd03 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_ADC1_Init+0x1d4>)
 8000984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000986:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000992:	f003 f879 	bl	8003a88 <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800099c:	f000 fcf4 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_ADC1_Init+0x1d8>)
 80009a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009a4:	f44f 7389 	mov.w	r3, #274	; 0x112
 80009a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80009b0:	f003 f86a 	bl	8003a88 <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80009ba:	f000 fce5 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	240001f8 	.word	0x240001f8
 80009cc:	40022000 	.word	0x40022000
 80009d0:	0c900008 	.word	0x0c900008
 80009d4:	10c00010 	.word	0x10c00010
 80009d8:	14f00020 	.word	0x14f00020
 80009dc:	21800100 	.word	0x21800100
 80009e0:	25b00200 	.word	0x25b00200
 80009e4:	2a000400 	.word	0x2a000400
 80009e8:	2e300800 	.word	0x2e300800
 80009ec:	4b840000 	.word	0x4b840000

080009f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f007 f824 	bl	8007a78 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 fca7 	bl	8001388 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f007 fa02 	bl	8007e46 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fc9e 	bl	8001388 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f007 fa44 	bl	8007edc <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fc95 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	240002d4 	.word	0x240002d4
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	10c0ecff 	.word	0x10c0ecff

08000a70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_I2C2_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <MX_I2C2_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aac:	f006 ffe4 	bl	8007a78 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 fc67 	bl	8001388 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000abe:	f007 f9c2 	bl	8007e46 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fc5e 	bl	8001388 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000ad0:	f007 fa04 	bl	8007edc <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fc55 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000328 	.word	0x24000328
 8000ae8:	40005800 	.word	0x40005800
 8000aec:	10c0ecff 	.word	0x10c0ecff

08000af0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <MX_LPUART1_UART_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b3a:	f00d f8ed 	bl	800dd18 <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 fc20 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b4c:	f00e ffdd 	bl	800fb0a <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 fc17 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b5e:	f00f f812 	bl	800fb86 <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 fc0e 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b6e:	f00e ff93 	bl	800fa98 <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 fc06 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2400037c 	.word	0x2400037c
 8000b84:	58000c00 	.word	0x58000c00

08000b88 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_UART5_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_UART5_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_UART5_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bd2:	f00d f8a1 	bl	800dd18 <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 fbd4 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_UART5_Init+0x90>)
 8000be4:	f00e ff91 	bl	800fb0a <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 fbcb 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bf6:	f00e ffc6 	bl	800fb86 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 fbc2 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_UART5_Init+0x90>)
 8000c06:	f00e ff47 	bl	800fa98 <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 fbba 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000410 	.word	0x24000410
 8000c1c:	40005000 	.word	0x40005000

08000c20 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <MX_UART7_Init+0x94>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c6a:	f00d f855 	bl	800dd18 <HAL_UART_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000c74:	f000 fb88 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c7c:	f00e ff45 	bl	800fb0a <HAL_UARTEx_SetTxFifoThreshold>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000c86:	f000 fb7f 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c8e:	f00e ff7a 	bl	800fb86 <HAL_UARTEx_SetRxFifoThreshold>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000c98:	f000 fb76 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c9e:	f00e fefb 	bl	800fa98 <HAL_UARTEx_DisableFifoMode>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000ca8:	f000 fb6e 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240004a4 	.word	0x240004a4
 8000cb4:	40007800 	.word	0x40007800

08000cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
 8000ce6:	615a      	str	r2, [r3, #20]
 8000ce8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cea:	4b3e      	ldr	r3, [pc, #248]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000d00:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d02:	2263      	movs	r2, #99	; 0x63
 8000d04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d12:	4834      	ldr	r0, [pc, #208]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d14:	f00a fe4c 	bl	800b9b0 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d1e:	f000 fb33 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482d      	ldr	r0, [pc, #180]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d30:	f00b ff62 	bl	800cbf8 <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d3a:	f000 fb25 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d3e:	4829      	ldr	r0, [pc, #164]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d40:	f00a ff35 	bl	800bbae <HAL_TIM_PWM_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d4a:	f000 fb1d 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4821      	ldr	r0, [pc, #132]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d5e:	f00c ff2f 	bl	800dbc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d68:	f000 fb0e 	bl	8001388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d84:	f00b fe24 	bl	800c9d0 <HAL_TIM_PWM_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d8e:	f000 fafb 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	2204      	movs	r2, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4812      	ldr	r0, [pc, #72]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d9a:	f00b fe19 	bl	800c9d0 <HAL_TIM_PWM_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000da4:	f000 faf0 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	2208      	movs	r2, #8
 8000dac:	4619      	mov	r1, r3
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000db0:	f00b fe0e 	bl	800c9d0 <HAL_TIM_PWM_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000dba:	f000 fae5 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000dc6:	f00b fe03 	bl	800c9d0 <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000dd0:	f000 fada 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000dd6:	f001 fc67 	bl	80026a8 <HAL_TIM_MspPostInit>

}
 8000dda:	bf00      	nop
 8000ddc:	3738      	adds	r7, #56	; 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	24000628 	.word	0x24000628

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1a:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e1c:	4a32      	ldr	r2, [pc, #200]	; (8000ee8 <MX_TIM3_Init+0x100>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000e20:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e22:	2263      	movs	r2, #99	; 0x63
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e2e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e40:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e42:	f00a fdb5 	bl	800b9b0 <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e4c:	f000 fa9c 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4821      	ldr	r0, [pc, #132]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e5e:	f00b fecb 	bl	800cbf8 <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e68:	f000 fa8e 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6c:	481d      	ldr	r0, [pc, #116]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e6e:	f00a fe9e 	bl	800bbae <HAL_TIM_PWM_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e78:	f000 fa86 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e8c:	f00c fe98 	bl	800dbc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e96:	f000 fa77 	bl	8001388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9a:	2360      	movs	r3, #96	; 0x60
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000eb2:	f00b fd8d 	bl	800c9d0 <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ebc:	f000 fa64 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000ec8:	f00b fd82 	bl	800c9d0 <HAL_TIM_PWM_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000ed2:	f000 fa59 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000ed8:	f001 fbe6 	bl	80026a8 <HAL_TIM_MspPostInit>

}
 8000edc:	bf00      	nop
 8000ede:	3738      	adds	r7, #56	; 0x38
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	24000674 	.word	0x24000674
 8000ee8:	40000400 	.word	0x40000400

08000eec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b090      	sub	sp, #64	; 0x40
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f28:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f2a:	4a3e      	ldr	r2, [pc, #248]	; (8001024 <MX_TIM5_Init+0x138>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f30:	2263      	movs	r2, #99	; 0x63
 8000f32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b37      	ldr	r3, [pc, #220]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f4e:	4834      	ldr	r0, [pc, #208]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f50:	f00a fd2e 	bl	800b9b0 <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000f5a:	f000 fa15 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f68:	4619      	mov	r1, r3
 8000f6a:	482d      	ldr	r0, [pc, #180]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f6c:	f00b fe44 	bl	800cbf8 <HAL_TIM_ConfigClockSource>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000f76:	f000 fa07 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000f7a:	4829      	ldr	r0, [pc, #164]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f7c:	f00a ff86 	bl	800be8c <HAL_TIM_IC_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000f86:	f000 f9ff 	bl	8001388 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f8e:	2350      	movs	r3, #80	; 0x50
 8000f90:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481e      	ldr	r0, [pc, #120]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fa6:	f00b ff1f 	bl	800cde8 <HAL_TIM_SlaveConfigSynchro>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000fb0:	f000 f9ea 	bl	8001388 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fce:	f00b fc62 	bl	800c896 <HAL_TIM_IC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8000fd8:	f000 f9d6 	bl	8001388 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fee:	f00b fc52 	bl	800c896 <HAL_TIM_IC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8000ff8:	f000 f9c6 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_TIM5_Init+0x134>)
 800100a:	f00c fdd9 	bl	800dbc0 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8001014:	f000 f9b8 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3740      	adds	r7, #64	; 0x40
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	240006c0 	.word	0x240006c0
 8001024:	40000c00 	.word	0x40000c00

08001028 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	; 0x40
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001064:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001066:	4a40      	ldr	r2, [pc, #256]	; (8001168 <MX_TIM15_Init+0x140>)
 8001068:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 800106a:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <MX_TIM15_Init+0x13c>)
 800106c:	2263      	movs	r2, #99	; 0x63
 800106e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001084:	4b37      	ldr	r3, [pc, #220]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <MX_TIM15_Init+0x13c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001090:	4834      	ldr	r0, [pc, #208]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001092:	f00a fc8d 	bl	800b9b0 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800109c:	f000 f974 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010aa:	4619      	mov	r1, r3
 80010ac:	482d      	ldr	r0, [pc, #180]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010ae:	f00b fda3 	bl	800cbf8 <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80010b8:	f000 f966 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80010bc:	4829      	ldr	r0, [pc, #164]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010be:	f00a fee5 	bl	800be8c <HAL_TIM_IC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 80010c8:	f000 f95e 	bl	8001388 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010cc:	2304      	movs	r3, #4
 80010ce:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80010d0:	2350      	movs	r3, #80	; 0x50
 80010d2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	481f      	ldr	r0, [pc, #124]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010e8:	f00b fe7e 	bl	800cde8 <HAL_TIM_SlaveConfigSynchro>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80010f2:	f000 f949 	bl	8001388 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010fa:	2301      	movs	r3, #1
 80010fc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4815      	ldr	r0, [pc, #84]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001110:	f00b fbc1 	bl	800c896 <HAL_TIM_IC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800111a:	f000 f935 	bl	8001388 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800111e:	2302      	movs	r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2204      	movs	r2, #4
 800112c:	4619      	mov	r1, r3
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001130:	f00b fbb1 	bl	800c896 <HAL_TIM_IC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 800113a:	f000 f925 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_TIM15_Init+0x13c>)
 800114c:	f00c fd38 	bl	800dbc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001156:	f000 f917 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3740      	adds	r7, #64	; 0x40
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2400070c 	.word	0x2400070c
 8001168:	40014000 	.word	0x40014000

0800116c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <MX_TIM16_Init+0x48>)
 8001174:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 99;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001178:	2263      	movs	r2, #99	; 0x63
 800117a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_TIM16_Init+0x44>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001188:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_TIM16_Init+0x44>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_TIM16_Init+0x44>)
 800119e:	f00a fc07 	bl	800b9b0 <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80011a8:	f000 f8ee 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	24000758 	.word	0x24000758
 80011b4:	40014400 	.word	0x40014400

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_DMA_Init+0x5c>)
 80011c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011c4:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_DMA_Init+0x5c>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_DMA_Init+0x5c>)
 80011d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	200b      	movs	r0, #11
 80011e2:	f003 fbdc 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011e6:	200b      	movs	r0, #11
 80011e8:	f003 fbf3 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	200c      	movs	r0, #12
 80011f2:	f003 fbd4 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011f6:	200c      	movs	r0, #12
 80011f8:	f003 fbeb 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	200d      	movs	r0, #13
 8001202:	f003 fbcc 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001206:	200d      	movs	r0, #13
 8001208:	f003 fbe3 	bl	80049d2 <HAL_NVIC_EnableIRQ>

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58024400 	.word	0x58024400

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b52      	ldr	r3, [pc, #328]	; (8001378 <MX_GPIO_Init+0x160>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a50      	ldr	r2, [pc, #320]	; (8001378 <MX_GPIO_Init+0x160>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <MX_GPIO_Init+0x160>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <MX_GPIO_Init+0x160>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a49      	ldr	r2, [pc, #292]	; (8001378 <MX_GPIO_Init+0x160>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b46      	ldr	r3, [pc, #280]	; (8001378 <MX_GPIO_Init+0x160>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	4b43      	ldr	r3, [pc, #268]	; (8001378 <MX_GPIO_Init+0x160>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a41      	ldr	r2, [pc, #260]	; (8001378 <MX_GPIO_Init+0x160>)
 8001272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <MX_GPIO_Init+0x160>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <MX_GPIO_Init+0x160>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	4a3a      	ldr	r2, [pc, #232]	; (8001378 <MX_GPIO_Init+0x160>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001298:	4b37      	ldr	r3, [pc, #220]	; (8001378 <MX_GPIO_Init+0x160>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b34      	ldr	r3, [pc, #208]	; (8001378 <MX_GPIO_Init+0x160>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a32      	ldr	r2, [pc, #200]	; (8001378 <MX_GPIO_Init+0x160>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <MX_GPIO_Init+0x160>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <MX_GPIO_Init+0x160>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <MX_GPIO_Init+0x160>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <MX_GPIO_Init+0x160>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e8:	4824      	ldr	r0, [pc, #144]	; (800137c <MX_GPIO_Init+0x164>)
 80012ea:	f006 fb91 	bl	8007a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2128      	movs	r1, #40	; 0x28
 80012f2:	4823      	ldr	r0, [pc, #140]	; (8001380 <MX_GPIO_Init+0x168>)
 80012f4:	f006 fb8c 	bl	8007a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2120      	movs	r1, #32
 80012fc:	4821      	ldr	r0, [pc, #132]	; (8001384 <MX_GPIO_Init+0x16c>)
 80012fe:	f006 fb87 	bl	8007a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4818      	ldr	r0, [pc, #96]	; (800137c <MX_GPIO_Init+0x164>)
 800131c:	f006 f9b0 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_YELLOW_Pin;
 8001320:	2328      	movs	r3, #40	; 0x28
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4812      	ldr	r0, [pc, #72]	; (8001380 <MX_GPIO_Init+0x168>)
 8001338:	f006 f9a2 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Output_Pin */
  GPIO_InitStruct.Pin = Manual_Output_Pin;
 800133c:	2320      	movs	r3, #32
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Manual_Output_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <MX_GPIO_Init+0x16c>)
 8001354:	f006 f994 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_GPIO_Init+0x16c>)
 800136c:	f006 f988 	bl	8007680 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	58024400 	.word	0x58024400
 800137c:	58021000 	.word	0x58021000
 8001380:	58020c00 	.word	0x58020c00
 8001384:	58020400 	.word	0x58020400

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>
	...

08001394 <_ZL8DWT_Initv>:
#define INC_UTILITY_H_

#include "main.h"

static inline void DWT_Init(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <_ZL8DWT_Initv+0x28>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <_ZL8DWT_Initv+0x28>)
 800139e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013a2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <_ZL8DWT_Initv+0x2c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <_ZL8DWT_Initv+0x2c>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000edf0 	.word	0xe000edf0
 80013c0:	e0001000 	.word	0xe0001000

080013c4 <_Z15read_speed_datav>:
uint8_t ch3_cnt=0,ch4_cnt=99;

uint32_t servo_duty,esc_duty,freq;
uint32_t force_raw[8];

HAL_StatusTypeDef read_speed_data(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
 80013ce:	e009      	b.n	80013e4 <_Z15read_speed_datav+0x20>
		if(received_speed[i]==acsr)break;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4a1a      	ldr	r2, [pc, #104]	; (800143c <_Z15read_speed_datav+0x78>)
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	4a19      	ldr	r2, [pc, #100]	; (8001440 <_Z15read_speed_datav+0x7c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d006      	beq.n	80013ec <_Z15read_speed_datav+0x28>
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	3301      	adds	r3, #1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b10      	cmp	r3, #16
 80013e8:	d9f2      	bls.n	80013d0 <_Z15read_speed_datav+0xc>
 80013ea:	e000      	b.n	80013ee <_Z15read_speed_datav+0x2a>
		if(received_speed[i]==acsr)break;
 80013ec:	bf00      	nop
	}
	if(i==SPEED_PIN_COUNT+1)return HAL_ERROR;
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b11      	cmp	r3, #17
 80013f2:	d101      	bne.n	80013f8 <_Z15read_speed_datav+0x34>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e01c      	b.n	8001432 <_Z15read_speed_datav+0x6e>

	memcpy(speed,&received_speed[i+1],(SPEED_PIN_COUNT-i)*sizeof(uint32_t));
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	3301      	adds	r3, #1
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <_Z15read_speed_datav+0x78>)
 8001400:	1899      	adds	r1, r3, r2
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f1c3 0310 	rsb	r3, r3, #16
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	461a      	mov	r2, r3
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <_Z15read_speed_datav+0x80>)
 800140e:	f00f fa26 	bl	801085e <memcpy>
	if(i){
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00b      	beq.n	8001430 <_Z15read_speed_datav+0x6c>
		memcpy(&speed[SPEED_PIN_COUNT-i],received_speed,i*sizeof(uint32_t));
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f1c3 0310 	rsb	r3, r3, #16
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4a08      	ldr	r2, [pc, #32]	; (8001444 <_Z15read_speed_datav+0x80>)
 8001422:	1898      	adds	r0, r3, r2
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	461a      	mov	r2, r3
 800142a:	4904      	ldr	r1, [pc, #16]	; (800143c <_Z15read_speed_datav+0x78>)
 800142c:	f00f fa17 	bl	801085e <memcpy>
	}
	return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	240007a8 	.word	0x240007a8
 8001440:	41435352 	.word	0x41435352
 8001444:	240007ec 	.word	0x240007ec

08001448 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5){
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a46      	ldr	r2, [pc, #280]	; (8001570 <HAL_UART_RxCpltCallback+0x128>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d10f      	bne.n	800147a <HAL_UART_RxCpltCallback+0x32>
		if(read_speed_data()==HAL_ERROR){
 800145a:	f7ff ffb3 	bl	80013c4 <_Z15read_speed_datav>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d07b      	beq.n	8001566 <HAL_UART_RxCpltCallback+0x11e>
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 800146e:	2244      	movs	r2, #68	; 0x44
 8001470:	4940      	ldr	r1, [pc, #256]	; (8001574 <HAL_UART_RxCpltCallback+0x12c>)
 8001472:	4841      	ldr	r0, [pc, #260]	; (8001578 <HAL_UART_RxCpltCallback+0x130>)
 8001474:	f00c fd2e 	bl	800ded4 <HAL_UART_Receive_DMA>
			break;
		default:
			break;
		}
	}
}
 8001478:	e075      	b.n	8001566 <HAL_UART_RxCpltCallback+0x11e>
	}else if(huart->Instance==UART7){
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a3f      	ldr	r2, [pc, #252]	; (800157c <HAL_UART_RxCpltCallback+0x134>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d170      	bne.n	8001566 <HAL_UART_RxCpltCallback+0x11e>
		switch(led_state){
 8001484:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <HAL_UART_RxCpltCallback+0x138>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b42      	cmp	r3, #66	; 0x42
 800148a:	d061      	beq.n	8001550 <HAL_UART_RxCpltCallback+0x108>
 800148c:	2b42      	cmp	r3, #66	; 0x42
 800148e:	db69      	blt.n	8001564 <HAL_UART_RxCpltCallback+0x11c>
 8001490:	2b79      	cmp	r3, #121	; 0x79
 8001492:	dc67      	bgt.n	8001564 <HAL_UART_RxCpltCallback+0x11c>
 8001494:	2b52      	cmp	r3, #82	; 0x52
 8001496:	db65      	blt.n	8001564 <HAL_UART_RxCpltCallback+0x11c>
 8001498:	3b52      	subs	r3, #82	; 0x52
 800149a:	2b27      	cmp	r3, #39	; 0x27
 800149c:	d862      	bhi.n	8001564 <HAL_UART_RxCpltCallback+0x11c>
 800149e:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <HAL_UART_RxCpltCallback+0x5c>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	08001545 	.word	0x08001545
 80014a8:	08001565 	.word	0x08001565
 80014ac:	08001565 	.word	0x08001565
 80014b0:	08001565 	.word	0x08001565
 80014b4:	08001565 	.word	0x08001565
 80014b8:	08001565 	.word	0x08001565
 80014bc:	08001565 	.word	0x08001565
 80014c0:	0800155b 	.word	0x0800155b
 80014c4:	08001565 	.word	0x08001565
 80014c8:	08001565 	.word	0x08001565
 80014cc:	08001565 	.word	0x08001565
 80014d0:	08001565 	.word	0x08001565
 80014d4:	08001565 	.word	0x08001565
 80014d8:	08001565 	.word	0x08001565
 80014dc:	08001565 	.word	0x08001565
 80014e0:	08001565 	.word	0x08001565
 80014e4:	08001551 	.word	0x08001551
 80014e8:	08001565 	.word	0x08001565
 80014ec:	08001565 	.word	0x08001565
 80014f0:	08001565 	.word	0x08001565
 80014f4:	08001565 	.word	0x08001565
 80014f8:	08001565 	.word	0x08001565
 80014fc:	08001565 	.word	0x08001565
 8001500:	08001565 	.word	0x08001565
 8001504:	08001565 	.word	0x08001565
 8001508:	08001565 	.word	0x08001565
 800150c:	08001565 	.word	0x08001565
 8001510:	08001565 	.word	0x08001565
 8001514:	08001565 	.word	0x08001565
 8001518:	08001565 	.word	0x08001565
 800151c:	08001565 	.word	0x08001565
 8001520:	08001565 	.word	0x08001565
 8001524:	08001545 	.word	0x08001545
 8001528:	08001565 	.word	0x08001565
 800152c:	08001565 	.word	0x08001565
 8001530:	08001565 	.word	0x08001565
 8001534:	08001565 	.word	0x08001565
 8001538:	08001565 	.word	0x08001565
 800153c:	08001565 	.word	0x08001565
 8001540:	0800155b 	.word	0x0800155b
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <HAL_UART_RxCpltCallback+0x13c>)
 800154a:	f006 fa7a 	bl	8007a42 <HAL_GPIO_TogglePin>
			break;
 800154e:	e00a      	b.n	8001566 <HAL_UART_RxCpltCallback+0x11e>
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001550:	2108      	movs	r1, #8
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <HAL_UART_RxCpltCallback+0x140>)
 8001554:	f006 fa75 	bl	8007a42 <HAL_GPIO_TogglePin>
			break;
 8001558:	e005      	b.n	8001566 <HAL_UART_RxCpltCallback+0x11e>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800155a:	2120      	movs	r1, #32
 800155c:	480a      	ldr	r0, [pc, #40]	; (8001588 <HAL_UART_RxCpltCallback+0x140>)
 800155e:	f006 fa70 	bl	8007a42 <HAL_GPIO_TogglePin>
			break;
 8001562:	e000      	b.n	8001566 <HAL_UART_RxCpltCallback+0x11e>
			break;
 8001564:	bf00      	nop
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40005000 	.word	0x40005000
 8001574:	240007a8 	.word	0x240007a8
 8001578:	24000410 	.word	0x24000410
 800157c:	40007800 	.word	0x40007800
 8001580:	2400082c 	.word	0x2400082c
 8001584:	58021000 	.word	0x58021000
 8001588:	58020c00 	.word	0x58020c00

0800158c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==UART5) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <HAL_UART_ErrorCallback+0x24>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d104      	bne.n	80015a8 <HAL_UART_ErrorCallback+0x1c>
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 800159e:	2244      	movs	r2, #68	; 0x44
 80015a0:	4904      	ldr	r1, [pc, #16]	; (80015b4 <HAL_UART_ErrorCallback+0x28>)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <HAL_UART_ErrorCallback+0x2c>)
 80015a4:	f00c fc96 	bl	800ded4 <HAL_UART_Receive_DMA>
    }
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40005000 	.word	0x40005000
 80015b4:	240007a8 	.word	0x240007a8
 80015b8:	24000410 	.word	0x24000410

080015bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM16){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d113      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0x3a>
		if(input_mode==Manual){
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d10f      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0x3a>
			esc_duty=0;
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
			servo_duty=0;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,esc_duty);
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,servo_duty);
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40014400 	.word	0x40014400
 8001608:	240007a4 	.word	0x240007a4
 800160c:	24000834 	.word	0x24000834
 8001610:	24000830 	.word	0x24000830
 8001614:	24000674 	.word	0x24000674

08001618 <HAL_TIM_IC_CaptureCallback>:
	char msg[100]={0};
	sprintf(msg,"Force: %0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f\n",force[0],force[1],force[2],force[3],force[4],force[5],force[6],force[7]);

}*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

//	if(input_mode==Auto)return;

	uint32_t temp_freq;
	if(htim->Instance==TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a35      	ldr	r2, [pc, #212]	; (80016fc <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d121      	bne.n	800166e <HAL_TIM_IC_CaptureCallback+0x56>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7f1b      	ldrb	r3, [r3, #28]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d11d      	bne.n	800166e <HAL_TIM_IC_CaptureCallback+0x56>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001632:	2100      	movs	r1, #0
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f00b fc19 	bl	800ce6c <HAL_TIM_ReadCapturedValue>
 800163a:	60f8      	str	r0, [r7, #12]
		servo_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800163c:	2104      	movs	r1, #4
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f00b fc14 	bl	800ce6c <HAL_TIM_ReadCapturedValue>
 8001644:	4603      	mov	r3, r0
 8001646:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001648:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_duty);
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_TIM_IC_CaptureCallback+0xec>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a2c      	ldr	r2, [pc, #176]	; (8001700 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCounter(htim,0);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800165c:	2100      	movs	r1, #0
 800165e:	482a      	ldr	r0, [pc, #168]	; (8001708 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001660:	f00a fdec 	bl	800c23c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001664:	2104      	movs	r1, #4
 8001666:	4828      	ldr	r0, [pc, #160]	; (8001708 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001668:	f00a fc72 	bl	800bf50 <HAL_TIM_IC_Start>
 800166c:	e025      	b.n	80016ba <HAL_TIM_IC_CaptureCallback+0xa2>

	}else if(htim->Instance==TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a26      	ldr	r2, [pc, #152]	; (800170c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d120      	bne.n	80016ba <HAL_TIM_IC_CaptureCallback+0xa2>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7f1b      	ldrb	r3, [r3, #28]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d11c      	bne.n	80016ba <HAL_TIM_IC_CaptureCallback+0xa2>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001680:	2100      	movs	r1, #0
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f00b fbf2 	bl	800ce6c <HAL_TIM_ReadCapturedValue>
 8001688:	60f8      	str	r0, [r7, #12]
		esc_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800168a:	2104      	movs	r1, #4
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f00b fbed 	bl	800ce6c <HAL_TIM_ReadCapturedValue>
 8001692:	4603      	mov	r3, r0
 8001694:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001696:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_duty);
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_TIM_IC_CaptureCallback+0xec>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCounter(htim,0);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80016aa:	2100      	movs	r1, #0
 80016ac:	4819      	ldr	r0, [pc, #100]	; (8001714 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80016ae:	f00a fdc5 	bl	800c23c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 80016b2:	2104      	movs	r1, #4
 80016b4:	4817      	ldr	r0, [pc, #92]	; (8001714 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80016b6:	f00a fc4b 	bl	800bf50 <HAL_TIM_IC_Start>

	}
	if(freq<1000 || abs((int)temp_freq-(int)freq)>50){
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_TIM_IC_CaptureCallback+0x100>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016c2:	d308      	bcc.n	80016d6 <HAL_TIM_IC_CaptureCallback+0xbe>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4a14      	ldr	r2, [pc, #80]	; (8001718 <HAL_TIM_IC_CaptureCallback+0x100>)
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bfb8      	it	lt
 80016d0:	425b      	neglt	r3, r3
 80016d2:	2b32      	cmp	r3, #50	; 0x32
 80016d4:	dd09      	ble.n	80016ea <HAL_TIM_IC_CaptureCallback+0xd2>
		freq=temp_freq;
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_TIM_IC_CaptureCallback+0x100>)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_TIM_IC_CaptureCallback+0xec>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_TIM_IC_CaptureCallback+0xec>)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	60d3      	str	r3, [r2, #12]
	}
	__HAL_TIM_SetCounter(&htim16,0);
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_TIM_IC_CaptureCallback+0x104>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24

}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40000c00 	.word	0x40000c00
 8001700:	24000830 	.word	0x24000830
 8001704:	24000674 	.word	0x24000674
 8001708:	240006c0 	.word	0x240006c0
 800170c:	40014000 	.word	0x40014000
 8001710:	24000834 	.word	0x24000834
 8001714:	2400070c 	.word	0x2400070c
 8001718:	24000838 	.word	0x24000838
 800171c:	24000758 	.word	0x24000758

08001720 <_Z8test_i2cv>:

void test_cp2101(){

}

void test_i2c(){
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b091      	sub	sp, #68	; 0x44
 8001724:	af00      	add	r7, sp, #0

    uint8_t i;
    HAL_StatusTypeDef ret;
    uint8_t address[10];
    uint8_t length=0;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 800172c:	2301      	movs	r3, #1
 800172e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001732:	e020      	b.n	8001776 <_Z8test_i2cv+0x56>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8001734:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001738:	b29b      	uxth	r3, r3
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	b299      	uxth	r1, r3
 800173e:	2305      	movs	r3, #5
 8001740:	2203      	movs	r2, #3
 8001742:	4865      	ldr	r0, [pc, #404]	; (80018d8 <_Z8test_i2cv+0x1b8>)
 8001744:	f006 fa28 	bl	8007b98 <HAL_I2C_IsDeviceReady>
 8001748:	4603      	mov	r3, r0
 800174a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        if(ret == HAL_OK)
 800174e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10a      	bne.n	800176c <_Z8test_i2cv+0x4c>
        {
            address[length++]=i;
 8001756:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001760:	3340      	adds	r3, #64	; 0x40
 8001762:	443b      	add	r3, r7
 8001764:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001768:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 800176c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001770:	3301      	adds	r3, #1
 8001772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001776:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800177a:	2b00      	cmp	r3, #0
 800177c:	dada      	bge.n	8001734 <_Z8test_i2cv+0x14>
        }
    }
    uint8_t i2c_start_msg1[] = "I2C Scanning:\n";
 800177e:	4b57      	ldr	r3, [pc, #348]	; (80018dc <_Z8test_i2cv+0x1bc>)
 8001780:	f107 0420 	add.w	r4, r7, #32
 8001784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001786:	c407      	stmia	r4!, {r0, r1, r2}
 8001788:	8023      	strh	r3, [r4, #0]
 800178a:	3402      	adds	r4, #2
 800178c:	0c1b      	lsrs	r3, r3, #16
 800178e:	7023      	strb	r3, [r4, #0]

	char buffer[25] = {0};
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	751a      	strb	r2, [r3, #20]
	HAL_UART_Transmit(&huart7, i2c_start_msg1, sizeof(i2c_start_msg1)-1, 10);
 80017a6:	f107 0120 	add.w	r1, r7, #32
 80017aa:	230a      	movs	r3, #10
 80017ac:	220e      	movs	r2, #14
 80017ae:	484c      	ldr	r0, [pc, #304]	; (80018e0 <_Z8test_i2cv+0x1c0>)
 80017b0:	f00c fb02 	bl	800ddb8 <HAL_UART_Transmit>

	if(length==2){
 80017b4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d10f      	bne.n	80017dc <_Z8test_i2cv+0xbc>
		sprintf(buffer, "\tI2C1 Address:0x%02X,0x%02X\n", address[0],address[1]);
 80017bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017c0:	461a      	mov	r2, r3
 80017c2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80017c6:	1d38      	adds	r0, r7, #4
 80017c8:	4946      	ldr	r1, [pc, #280]	; (80018e4 <_Z8test_i2cv+0x1c4>)
 80017ca:	f00e ff65 	bl	8010698 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 80017ce:	1d39      	adds	r1, r7, #4
 80017d0:	230a      	movs	r3, #10
 80017d2:	2218      	movs	r2, #24
 80017d4:	4842      	ldr	r0, [pc, #264]	; (80018e0 <_Z8test_i2cv+0x1c0>)
 80017d6:	f00c faef 	bl	800ddb8 <HAL_UART_Transmit>
 80017da:	e01c      	b.n	8001816 <_Z8test_i2cv+0xf6>
	}else if(length==1){
 80017dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d10e      	bne.n	8001802 <_Z8test_i2cv+0xe2>
		sprintf(buffer, "\tI2C1 Address:0x%02X\n", address[0]);
 80017e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017e8:	461a      	mov	r2, r3
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	493e      	ldr	r1, [pc, #248]	; (80018e8 <_Z8test_i2cv+0x1c8>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00e ff52 	bl	8010698 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 80017f4:	1d39      	adds	r1, r7, #4
 80017f6:	230a      	movs	r3, #10
 80017f8:	2213      	movs	r2, #19
 80017fa:	4839      	ldr	r0, [pc, #228]	; (80018e0 <_Z8test_i2cv+0x1c0>)
 80017fc:	f00c fadc 	bl	800ddb8 <HAL_UART_Transmit>
 8001800:	e009      	b.n	8001816 <_Z8test_i2cv+0xf6>
	}else if(length==0){
 8001802:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <_Z8test_i2cv+0xf6>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C1\n", 25, 10);
 800180a:	230a      	movs	r3, #10
 800180c:	2219      	movs	r2, #25
 800180e:	4937      	ldr	r1, [pc, #220]	; (80018ec <_Z8test_i2cv+0x1cc>)
 8001810:	4833      	ldr	r0, [pc, #204]	; (80018e0 <_Z8test_i2cv+0x1c0>)
 8001812:	f00c fad1 	bl	800ddb8 <HAL_UART_Transmit>
	}

    length=0;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 800181c:	2301      	movs	r3, #1
 800181e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001822:	e020      	b.n	8001866 <_Z8test_i2cv+0x146>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8001824:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001828:	b29b      	uxth	r3, r3
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	b299      	uxth	r1, r3
 800182e:	2305      	movs	r3, #5
 8001830:	2203      	movs	r2, #3
 8001832:	482f      	ldr	r0, [pc, #188]	; (80018f0 <_Z8test_i2cv+0x1d0>)
 8001834:	f006 f9b0 	bl	8007b98 <HAL_I2C_IsDeviceReady>
 8001838:	4603      	mov	r3, r0
 800183a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if(ret == HAL_OK)
 800183e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10a      	bne.n	800185c <_Z8test_i2cv+0x13c>
		{
			address[length++]=i;
 8001846:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001850:	3340      	adds	r3, #64	; 0x40
 8001852:	443b      	add	r3, r7
 8001854:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001858:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 800185c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001860:	3301      	adds	r3, #1
 8001862:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001866:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800186a:	2b00      	cmp	r3, #0
 800186c:	dada      	bge.n	8001824 <_Z8test_i2cv+0x104>
		}
	}
    if(length==2){
 800186e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001872:	2b02      	cmp	r3, #2
 8001874:	d10f      	bne.n	8001896 <_Z8test_i2cv+0x176>
		sprintf(buffer, "\tI2C2 Address:0x%02X,0x%02X\n", address[0],address[1]);
 8001876:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800187a:	461a      	mov	r2, r3
 800187c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001880:	1d38      	adds	r0, r7, #4
 8001882:	491c      	ldr	r1, [pc, #112]	; (80018f4 <_Z8test_i2cv+0x1d4>)
 8001884:	f00e ff08 	bl	8010698 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 8001888:	1d39      	adds	r1, r7, #4
 800188a:	230a      	movs	r3, #10
 800188c:	2218      	movs	r2, #24
 800188e:	4814      	ldr	r0, [pc, #80]	; (80018e0 <_Z8test_i2cv+0x1c0>)
 8001890:	f00c fa92 	bl	800ddb8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
	}else if(length==0){
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
	}

}
 8001894:	e01c      	b.n	80018d0 <_Z8test_i2cv+0x1b0>
	}else if(length==1){
 8001896:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800189a:	2b01      	cmp	r3, #1
 800189c:	d10e      	bne.n	80018bc <_Z8test_i2cv+0x19c>
		sprintf(buffer, "\tI2C2 Address:0x%02X\n", address[0]);
 800189e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018a2:	461a      	mov	r2, r3
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4914      	ldr	r1, [pc, #80]	; (80018f8 <_Z8test_i2cv+0x1d8>)
 80018a8:	4618      	mov	r0, r3
 80018aa:	f00e fef5 	bl	8010698 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 80018ae:	1d39      	adds	r1, r7, #4
 80018b0:	230a      	movs	r3, #10
 80018b2:	2213      	movs	r2, #19
 80018b4:	480a      	ldr	r0, [pc, #40]	; (80018e0 <_Z8test_i2cv+0x1c0>)
 80018b6:	f00c fa7f 	bl	800ddb8 <HAL_UART_Transmit>
}
 80018ba:	e009      	b.n	80018d0 <_Z8test_i2cv+0x1b0>
	}else if(length==0){
 80018bc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <_Z8test_i2cv+0x1b0>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
 80018c4:	230a      	movs	r3, #10
 80018c6:	2219      	movs	r2, #25
 80018c8:	490c      	ldr	r1, [pc, #48]	; (80018fc <_Z8test_i2cv+0x1dc>)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <_Z8test_i2cv+0x1c0>)
 80018cc:	f00c fa74 	bl	800ddb8 <HAL_UART_Transmit>
}
 80018d0:	bf00      	nop
 80018d2:	3744      	adds	r7, #68	; 0x44
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	240002d4 	.word	0x240002d4
 80018dc:	08012908 	.word	0x08012908
 80018e0:	240004a4 	.word	0x240004a4
 80018e4:	08012860 	.word	0x08012860
 80018e8:	08012880 	.word	0x08012880
 80018ec:	08012898 	.word	0x08012898
 80018f0:	24000328 	.word	0x24000328
 80018f4:	080128b4 	.word	0x080128b4
 80018f8:	080128d4 	.word	0x080128d4
 80018fc:	080128ec 	.word	0x080128ec

08001900 <_Z10test_speedv>:

void test_speed(){
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
	char send_data[7];
	HAL_UART_Transmit(&huart7, (uint8_t*)"Speed: ", 7, 10);
 8001906:	230a      	movs	r3, #10
 8001908:	2207      	movs	r2, #7
 800190a:	4914      	ldr	r1, [pc, #80]	; (800195c <_Z10test_speedv+0x5c>)
 800190c:	4814      	ldr	r0, [pc, #80]	; (8001960 <_Z10test_speedv+0x60>)
 800190e:	f00c fa53 	bl	800ddb8 <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e011      	b.n	800193c <_Z10test_speedv+0x3c>
		sprintf(send_data,"%04lu ",speed[i]);
 8001918:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_Z10test_speedv+0x64>)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	4911      	ldr	r1, [pc, #68]	; (8001968 <_Z10test_speedv+0x68>)
 8001924:	4618      	mov	r0, r3
 8001926:	f00e feb7 	bl	8010698 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)send_data, 5, 10);
 800192a:	1d39      	adds	r1, r7, #4
 800192c:	230a      	movs	r3, #10
 800192e:	2205      	movs	r2, #5
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <_Z10test_speedv+0x60>)
 8001932:	f00c fa41 	bl	800ddb8 <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3301      	adds	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b0f      	cmp	r3, #15
 8001940:	ddea      	ble.n	8001918 <_Z10test_speedv+0x18>
	}
	uint8_t lf[]={10};
 8001942:	230a      	movs	r3, #10
 8001944:	703b      	strb	r3, [r7, #0]
	HAL_UART_Transmit(&huart7, lf, 1, 10);
 8001946:	4639      	mov	r1, r7
 8001948:	230a      	movs	r3, #10
 800194a:	2201      	movs	r2, #1
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <_Z10test_speedv+0x60>)
 800194e:	f00c fa33 	bl	800ddb8 <HAL_UART_Transmit>

}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	08012918 	.word	0x08012918
 8001960:	240004a4 	.word	0x240004a4
 8001964:	240007ec 	.word	0x240007ec
 8001968:	08012920 	.word	0x08012920

0800196c <_Z10test_brakev>:

void test_brake(){
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,ch3_cnt++);
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <_Z10test_brakev+0x50>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	b2d1      	uxtb	r1, r2
 8001978:	4a10      	ldr	r2, [pc, #64]	; (80019bc <_Z10test_brakev+0x50>)
 800197a:	7011      	strb	r1, [r2, #0]
 800197c:	4a10      	ldr	r2, [pc, #64]	; (80019c0 <_Z10test_brakev+0x54>)
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,ch4_cnt--);
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <_Z10test_brakev+0x58>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	1e5a      	subs	r2, r3, #1
 8001988:	b2d1      	uxtb	r1, r2
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <_Z10test_brakev+0x58>)
 800198c:	7011      	strb	r1, [r2, #0]
 800198e:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <_Z10test_brakev+0x54>)
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
	if(ch3_cnt==99)ch3_cnt=0;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <_Z10test_brakev+0x50>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b63      	cmp	r3, #99	; 0x63
 800199a:	d102      	bne.n	80019a2 <_Z10test_brakev+0x36>
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <_Z10test_brakev+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
	if(ch4_cnt==0)ch4_cnt=99;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <_Z10test_brakev+0x58>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <_Z10test_brakev+0x44>
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <_Z10test_brakev+0x58>)
 80019ac:	2263      	movs	r2, #99	; 0x63
 80019ae:	701a      	strb	r2, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	2400082d 	.word	0x2400082d
 80019c0:	24000628 	.word	0x24000628
 80019c4:	24000000 	.word	0x24000000

080019c8 <_Z10input_testv>:


void input_test(){
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b0b9      	sub	sp, #228	; 0xe4
 80019cc:	af02      	add	r7, sp, #8
	InputMode mode = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin)==GPIO_PIN_RESET?Auto:Manual;
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	4867      	ldr	r0, [pc, #412]	; (8001b70 <_Z10input_testv+0x1a8>)
 80019d2:	f006 f805 	bl	80079e0 <HAL_GPIO_ReadPin>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf14      	ite	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	2300      	moveq	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	if(input_mode!=mode){
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <_Z10input_testv+0x1ac>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	f897 20d6 	ldrb.w	r2, [r7, #214]	; 0xd6
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d044      	beq.n	8001a7c <_Z10input_testv+0xb4>
		input_mode=mode;
 80019f2:	4a60      	ldr	r2, [pc, #384]	; (8001b74 <_Z10input_testv+0x1ac>)
 80019f4:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80019f8:	7013      	strb	r3, [r2, #0]
		if(input_mode==Manual){
 80019fa:	4b5e      	ldr	r3, [pc, #376]	; (8001b74 <_Z10input_testv+0x1ac>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d113      	bne.n	8001a2a <_Z10input_testv+0x62>
			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001a02:	2100      	movs	r1, #0
 8001a04:	485c      	ldr	r0, [pc, #368]	; (8001b78 <_Z10input_testv+0x1b0>)
 8001a06:	f00a fc19 	bl	800c23c <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	485a      	ldr	r0, [pc, #360]	; (8001b78 <_Z10input_testv+0x1b0>)
 8001a0e:	f00a fa9f 	bl	800bf50 <HAL_TIM_IC_Start>
			HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001a12:	2100      	movs	r1, #0
 8001a14:	4859      	ldr	r0, [pc, #356]	; (8001b7c <_Z10input_testv+0x1b4>)
 8001a16:	f00a fc11 	bl	800c23c <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	4857      	ldr	r0, [pc, #348]	; (8001b7c <_Z10input_testv+0x1b4>)
 8001a1e:	f00a fa97 	bl	800bf50 <HAL_TIM_IC_Start>

			HAL_TIM_Base_Start_IT(&htim16);
 8001a22:	4857      	ldr	r0, [pc, #348]	; (8001b80 <_Z10input_testv+0x1b8>)
 8001a24:	f00a f81c 	bl	800ba60 <HAL_TIM_Base_Start_IT>
 8001a28:	e028      	b.n	8001a7c <_Z10input_testv+0xb4>
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
		}else{
			freq=0;
 8001a2a:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <_Z10input_testv+0x1bc>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8001a30:	2100      	movs	r1, #0
 8001a32:	4851      	ldr	r0, [pc, #324]	; (8001b78 <_Z10input_testv+0x1b0>)
 8001a34:	f00a fd52 	bl	800c4dc <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_2);
 8001a38:	2104      	movs	r1, #4
 8001a3a:	484f      	ldr	r0, [pc, #316]	; (8001b78 <_Z10input_testv+0x1b0>)
 8001a3c:	f00a fb8c 	bl	800c158 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop_IT(&htim15, TIM_CHANNEL_1);
 8001a40:	2100      	movs	r1, #0
 8001a42:	484e      	ldr	r0, [pc, #312]	; (8001b7c <_Z10input_testv+0x1b4>)
 8001a44:	f00a fd4a 	bl	800c4dc <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop(&htim15, TIM_CHANNEL_2);
 8001a48:	2104      	movs	r1, #4
 8001a4a:	484c      	ldr	r0, [pc, #304]	; (8001b7c <_Z10input_testv+0x1b4>)
 8001a4c:	f00a fb84 	bl	800c158 <HAL_TIM_IC_Stop>

			HAL_TIM_Base_Stop_IT(&htim16);
 8001a50:	484b      	ldr	r0, [pc, #300]	; (8001b80 <_Z10input_testv+0x1b8>)
 8001a52:	f00a f87d 	bl	800bb50 <HAL_TIM_Base_Stop_IT>

			__HAL_TIM_SET_AUTORELOAD(&htim3,20000-1);
 8001a56:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <_Z10input_testv+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a60:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <_Z10input_testv+0x1c0>)
 8001a62:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a66:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,5000-1);
 8001a68:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <_Z10input_testv+0x1c0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a70:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,10000-1);
 8001a72:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <_Z10input_testv+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a7a:	639a      	str	r2, [r3, #56]	; 0x38
//			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
		}
	}
	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8001a7c:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <_Z10input_testv+0x1c0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	uint32_t esc_cnt = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 8001a86:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <_Z10input_testv+0x1c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	uint32_t servo_cnt = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2);
 8001a90:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <_Z10input_testv+0x1c0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	char str[200]={0};
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	22c4      	movs	r2, #196	; 0xc4
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00e fe5a 	bl	801075e <memset>
	if(mode==Auto){
 8001aaa:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d11e      	bne.n	8001af0 <_Z10input_testv+0x128>
		sprintf(str,"Input Mode: Auto, Frequency: %u Hz, ESC DutyCycle: %u%%, SERVO DutyCycle: %u%%\n",1000000/arr,esc_cnt*100/arr,servo_cnt*100/arr);
 8001ab2:	4a36      	ldr	r2, [pc, #216]	; (8001b8c <_Z10input_testv+0x1c4>)
 8001ab4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ab8:	fbb2 f1f3 	udiv	r1, r2, r3
 8001abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ac0:	2264      	movs	r2, #100	; 0x64
 8001ac2:	fb03 f202 	mul.w	r2, r3, r2
 8001ac6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aca:	fbb2 f4f3 	udiv	r4, r2, r3
 8001ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ad2:	2264      	movs	r2, #100	; 0x64
 8001ad4:	fb03 f202 	mul.w	r2, r3, r2
 8001ad8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	4638      	mov	r0, r7
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4623      	mov	r3, r4
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	4929      	ldr	r1, [pc, #164]	; (8001b90 <_Z10input_testv+0x1c8>)
 8001aea:	f00e fdd5 	bl	8010698 <siprintf>
 8001aee:	e01d      	b.n	8001b2c <_Z10input_testv+0x164>
	}else{
		sprintf(str,"Input Mode: Manual, Frequency: %u Hz, ESC DutyCycle: %u%%, SERVO DutyCycle: %u%%\n",1000000/arr,esc_cnt*100/arr,servo_cnt*100/arr);
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <_Z10input_testv+0x1c4>)
 8001af2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001af6:	fbb2 f1f3 	udiv	r1, r2, r3
 8001afa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001afe:	2264      	movs	r2, #100	; 0x64
 8001b00:	fb03 f202 	mul.w	r2, r3, r2
 8001b04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b08:	fbb2 f4f3 	udiv	r4, r2, r3
 8001b0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b10:	2264      	movs	r2, #100	; 0x64
 8001b12:	fb03 f202 	mul.w	r2, r3, r2
 8001b16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4638      	mov	r0, r7
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	4623      	mov	r3, r4
 8001b24:	460a      	mov	r2, r1
 8001b26:	491b      	ldr	r1, [pc, #108]	; (8001b94 <_Z10input_testv+0x1cc>)
 8001b28:	f00e fdb6 	bl	8010698 <siprintf>
	}
	uint8_t i=0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	while(str[i]!=0 && i<200){
 8001b32:	e00c      	b.n	8001b4e <_Z10input_testv+0x186>
		HAL_UART_Transmit(&huart7, (uint8_t*)(&str[i++]), 1, 1);
 8001b34:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	f887 20d7 	strb.w	r2, [r7, #215]	; 0xd7
 8001b3e:	461a      	mov	r2, r3
 8001b40:	463b      	mov	r3, r7
 8001b42:	1899      	adds	r1, r3, r2
 8001b44:	2301      	movs	r3, #1
 8001b46:	2201      	movs	r2, #1
 8001b48:	4813      	ldr	r0, [pc, #76]	; (8001b98 <_Z10input_testv+0x1d0>)
 8001b4a:	f00c f935 	bl	800ddb8 <HAL_UART_Transmit>
	while(str[i]!=0 && i<200){
 8001b4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b52:	33d8      	adds	r3, #216	; 0xd8
 8001b54:	443b      	add	r3, r7
 8001b56:	f813 3cd8 	ldrb.w	r3, [r3, #-216]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <_Z10input_testv+0x19e>
 8001b5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b62:	2bc7      	cmp	r3, #199	; 0xc7
 8001b64:	d9e6      	bls.n	8001b34 <_Z10input_testv+0x16c>
	}

}
 8001b66:	bf00      	nop
 8001b68:	37dc      	adds	r7, #220	; 0xdc
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	58020400 	.word	0x58020400
 8001b74:	240007a4 	.word	0x240007a4
 8001b78:	240006c0 	.word	0x240006c0
 8001b7c:	2400070c 	.word	0x2400070c
 8001b80:	24000758 	.word	0x24000758
 8001b84:	24000838 	.word	0x24000838
 8001b88:	24000674 	.word	0x24000674
 8001b8c:	000f4240 	.word	0x000f4240
 8001b90:	08012928 	.word	0x08012928
 8001b94:	08012978 	.word	0x08012978
 8001b98:	240004a4 	.word	0x240004a4
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <_Z10force_testv>:

void force_test(){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0b0      	sub	sp, #192	; 0xc0
 8001ba4:	af0e      	add	r7, sp, #56	; 0x38
	float force[8];
	for(uint8_t i=0;i<8;++i){
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001bac:	e021      	b.n	8001bf2 <_Z10force_testv+0x52>
		force[i]=(float)force_raw[i]*3.3/0xFFFF;
 8001bae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bb2:	4a45      	ldr	r2, [pc, #276]	; (8001cc8 <_Z10force_testv+0x128>)
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bc4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001cb8 <_Z10force_testv+0x118>
 8001bc8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bcc:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8001cc0 <_Z10force_testv+0x120>
 8001bd0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001bd4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	3388      	adds	r3, #136	; 0x88
 8001be0:	443b      	add	r3, r7
 8001be2:	3b24      	subs	r3, #36	; 0x24
 8001be4:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<8;++i){
 8001be8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bec:	3301      	adds	r3, #1
 8001bee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001bf2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bf6:	2b07      	cmp	r3, #7
 8001bf8:	d9d9      	bls.n	8001bae <_Z10force_testv+0xe>
	}
	char msg[100]={0};
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2260      	movs	r2, #96	; 0x60
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00e fdaa 	bl	801075e <memset>
	sprintf(msg,"Force: %0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f\n",force[0],force[1],force[2],force[3],force[4],force[5],force[6],force[7]);
 8001c0a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001c0e:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
 8001c12:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c1a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001c1e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001c22:	edd7 5a1c 	vldr	s11, [r7, #112]	; 0x70
 8001c26:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001c2a:	edd7 4a1d 	vldr	s9, [r7, #116]	; 0x74
 8001c2e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001c32:	edd7 3a1e 	vldr	s7, [r7, #120]	; 0x78
 8001c36:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8001c3a:	edd7 2a1f 	vldr	s5, [r7, #124]	; 0x7c
 8001c3e:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8001c42:	edd7 1a20 	vldr	s3, [r7, #128]	; 0x80
 8001c46:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8001c4a:	4638      	mov	r0, r7
 8001c4c:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8001c50:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8001c54:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001c58:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001c5c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001c60:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001c64:	ed8d 7b00 	vstr	d7, [sp]
 8001c68:	ec53 2b10 	vmov	r2, r3, d0
 8001c6c:	4917      	ldr	r1, [pc, #92]	; (8001ccc <_Z10force_testv+0x12c>)
 8001c6e:	f00e fd13 	bl	8010698 <siprintf>
	uint8_t i=0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	while(msg[i]!=0 && i<100){
 8001c78:	e00c      	b.n	8001c94 <_Z10force_testv+0xf4>
		HAL_UART_Transmit(&huart7, (uint8_t*)(&msg[i++]), 1, 1);
 8001c7a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 8001c84:	461a      	mov	r2, r3
 8001c86:	463b      	mov	r3, r7
 8001c88:	1899      	adds	r1, r3, r2
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4810      	ldr	r0, [pc, #64]	; (8001cd0 <_Z10force_testv+0x130>)
 8001c90:	f00c f892 	bl	800ddb8 <HAL_UART_Transmit>
	while(msg[i]!=0 && i<100){
 8001c94:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c98:	3388      	adds	r3, #136	; 0x88
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <_Z10force_testv+0x10c>
 8001ca4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001ca8:	2b63      	cmp	r3, #99	; 0x63
 8001caa:	d9e6      	bls.n	8001c7a <_Z10force_testv+0xda>
	}
}
 8001cac:	bf00      	nop
 8001cae:	3788      	adds	r7, #136	; 0x88
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	66666666 	.word	0x66666666
 8001cbc:	400a6666 	.word	0x400a6666
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40efffe0 	.word	0x40efffe0
 8001cc8:	2400083c 	.word	0x2400083c
 8001ccc:	080129cc 	.word	0x080129cc
 8001cd0:	240004a4 	.word	0x240004a4

08001cd4 <setup>:

void setup(){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	DWT_Init();
 8001cd8:	f7ff fb5c 	bl	8001394 <_ZL8DWT_Initv>
//	HAL_ADC_Start_DMA(&hadc1, force_raw, 8);
	HAL_ADC_Start_DMA(&hadc1,force_raw,8);
 8001cdc:	2208      	movs	r2, #8
 8001cde:	494a      	ldr	r1, [pc, #296]	; (8001e08 <setup+0x134>)
 8001ce0:	484a      	ldr	r0, [pc, #296]	; (8001e0c <setup+0x138>)
 8001ce2:	f001 fbab 	bl	800343c <HAL_ADC_Start_DMA>
	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8001ce6:	2244      	movs	r2, #68	; 0x44
 8001ce8:	4949      	ldr	r1, [pc, #292]	; (8001e10 <setup+0x13c>)
 8001cea:	484a      	ldr	r0, [pc, #296]	; (8001e14 <setup+0x140>)
 8001cec:	f00c f8f2 	bl	800ded4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart7, (uint8_t*)&led_state, 1);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4949      	ldr	r1, [pc, #292]	; (8001e18 <setup+0x144>)
 8001cf4:	4849      	ldr	r0, [pc, #292]	; (8001e1c <setup+0x148>)
 8001cf6:	f00c f8ed 	bl	800ded4 <HAL_UART_Receive_DMA>

	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	4848      	ldr	r0, [pc, #288]	; (8001e20 <setup+0x14c>)
 8001d00:	f005 fe86 	bl	8007a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2120      	movs	r1, #32
 8001d08:	4845      	ldr	r0, [pc, #276]	; (8001e20 <setup+0x14c>)
 8001d0a:	f005 fe81 	bl	8007a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d14:	4843      	ldr	r0, [pc, #268]	; (8001e24 <setup+0x150>)
 8001d16:	f005 fe7b 	bl	8007a10 <HAL_GPIO_WritePin>

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,33);
 8001d1a:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <setup+0x154>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2221      	movs	r2, #33	; 0x21
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2,67);
 8001d22:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <setup+0x154>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2243      	movs	r2, #67	; 0x43
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,ch3_cnt++);
 8001d2a:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <setup+0x158>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	b2d1      	uxtb	r1, r2
 8001d32:	4a3e      	ldr	r2, [pc, #248]	; (8001e2c <setup+0x158>)
 8001d34:	7011      	strb	r1, [r2, #0]
 8001d36:	4a3c      	ldr	r2, [pc, #240]	; (8001e28 <setup+0x154>)
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,ch4_cnt--);
 8001d3c:	4b3c      	ldr	r3, [pc, #240]	; (8001e30 <setup+0x15c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	b2d1      	uxtb	r1, r2
 8001d44:	4a3a      	ldr	r2, [pc, #232]	; (8001e30 <setup+0x15c>)
 8001d46:	7011      	strb	r1, [r2, #0]
 8001d48:	4a37      	ldr	r2, [pc, #220]	; (8001e28 <setup+0x154>)
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40

	HAL_TIM_Base_Start_IT(&htim2);
 8001d4e:	4836      	ldr	r0, [pc, #216]	; (8001e28 <setup+0x154>)
 8001d50:	f009 fe86 	bl	800ba60 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d54:	2100      	movs	r1, #0
 8001d56:	4834      	ldr	r0, [pc, #208]	; (8001e28 <setup+0x154>)
 8001d58:	f009 ff8a 	bl	800bc70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	4832      	ldr	r0, [pc, #200]	; (8001e28 <setup+0x154>)
 8001d60:	f009 ff86 	bl	800bc70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001d64:	2108      	movs	r1, #8
 8001d66:	4830      	ldr	r0, [pc, #192]	; (8001e28 <setup+0x154>)
 8001d68:	f009 ff82 	bl	800bc70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001d6c:	210c      	movs	r1, #12
 8001d6e:	482e      	ldr	r0, [pc, #184]	; (8001e28 <setup+0x154>)
 8001d70:	f009 ff7e 	bl	800bc70 <HAL_TIM_PWM_Start>


	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2120      	movs	r1, #32
 8001d78:	482e      	ldr	r0, [pc, #184]	; (8001e34 <setup+0x160>)
 8001d7a:	f005 fe49 	bl	8007a10 <HAL_GPIO_WritePin>
	freq = 0;
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <setup+0x164>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
	input_mode = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin)==GPIO_PIN_RESET?Auto:Manual;
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	482b      	ldr	r0, [pc, #172]	; (8001e34 <setup+0x160>)
 8001d88:	f005 fe2a 	bl	80079e0 <HAL_GPIO_ReadPin>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf14      	ite	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	2300      	moveq	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <setup+0x168>)
 8001d9c:	701a      	strb	r2, [r3, #0]
	if(input_mode==Manual){
 8001d9e:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <setup+0x168>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d112      	bne.n	8001dcc <setup+0xf8>
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001da6:	2100      	movs	r1, #0
 8001da8:	4825      	ldr	r0, [pc, #148]	; (8001e40 <setup+0x16c>)
 8001daa:	f00a fa47 	bl	800c23c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001dae:	2104      	movs	r1, #4
 8001db0:	4823      	ldr	r0, [pc, #140]	; (8001e40 <setup+0x16c>)
 8001db2:	f00a f8cd 	bl	800bf50 <HAL_TIM_IC_Start>
		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001db6:	2100      	movs	r1, #0
 8001db8:	4822      	ldr	r0, [pc, #136]	; (8001e44 <setup+0x170>)
 8001dba:	f00a fa3f 	bl	800c23c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	4820      	ldr	r0, [pc, #128]	; (8001e44 <setup+0x170>)
 8001dc2:	f00a f8c5 	bl	800bf50 <HAL_TIM_IC_Start>

		HAL_TIM_Base_Start_IT(&htim16);
 8001dc6:	4820      	ldr	r0, [pc, #128]	; (8001e48 <setup+0x174>)
 8001dc8:	f009 fe4a 	bl	800ba60 <HAL_TIM_Base_Start_IT>
	}

	__HAL_TIM_SET_AUTORELOAD(&htim3,20000-1);
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <setup+0x178>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <setup+0x178>)
 8001dd8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ddc:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,5000-1);
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <setup+0x178>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f241 3287 	movw	r2, #4999	; 0x1387
 8001de6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,10000-1);
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <setup+0x178>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f242 720f 	movw	r2, #9999	; 0x270f
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001df2:	2100      	movs	r1, #0
 8001df4:	4815      	ldr	r0, [pc, #84]	; (8001e4c <setup+0x178>)
 8001df6:	f009 ff3b 	bl	800bc70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	4813      	ldr	r0, [pc, #76]	; (8001e4c <setup+0x178>)
 8001dfe:	f009 ff37 	bl	800bc70 <HAL_TIM_PWM_Start>



}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2400083c 	.word	0x2400083c
 8001e0c:	240001f8 	.word	0x240001f8
 8001e10:	240007a8 	.word	0x240007a8
 8001e14:	24000410 	.word	0x24000410
 8001e18:	2400082c 	.word	0x2400082c
 8001e1c:	240004a4 	.word	0x240004a4
 8001e20:	58020c00 	.word	0x58020c00
 8001e24:	58021000 	.word	0x58021000
 8001e28:	24000628 	.word	0x24000628
 8001e2c:	2400082d 	.word	0x2400082d
 8001e30:	24000000 	.word	0x24000000
 8001e34:	58020400 	.word	0x58020400
 8001e38:	24000838 	.word	0x24000838
 8001e3c:	240007a4 	.word	0x240007a4
 8001e40:	240006c0 	.word	0x240006c0
 8001e44:	2400070c 	.word	0x2400070c
 8001e48:	24000758 	.word	0x24000758
 8001e4c:	24000674 	.word	0x24000674

08001e50 <loop>:




void loop(){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart7, (uint8_t*)("\n\n"), 2, 1);
 8001e54:	2301      	movs	r3, #1
 8001e56:	2202      	movs	r2, #2
 8001e58:	4909      	ldr	r1, [pc, #36]	; (8001e80 <loop+0x30>)
 8001e5a:	480a      	ldr	r0, [pc, #40]	; (8001e84 <loop+0x34>)
 8001e5c:	f00b ffac 	bl	800ddb8 <HAL_UART_Transmit>
	force_test();
 8001e60:	f7ff fe9e 	bl	8001ba0 <_Z10force_testv>
	input_test();
 8001e64:	f7ff fdb0 	bl	80019c8 <_Z10input_testv>
	test_speed();
 8001e68:	f7ff fd4a 	bl	8001900 <_Z10test_speedv>
	test_i2c();
 8001e6c:	f7ff fc58 	bl	8001720 <_Z8test_i2cv>
	test_brake();
 8001e70:	f7ff fd7c 	bl	800196c <_Z10test_brakev>
	HAL_Delay(1000);
 8001e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e78:	f000 ff06 	bl	8002c88 <HAL_Delay>


}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	08012a04 	.word	0x08012a04
 8001e84:	240004a4 	.word	0x240004a4

08001e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_MspInit+0x30>)
 8001e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e94:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_MspInit+0x30>)
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_MspInit+0x30>)
 8001ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	58024400 	.word	0x58024400

08001ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0bc      	sub	sp, #240	; 0xf0
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	22c0      	movs	r2, #192	; 0xc0
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f00e fc3e 	bl	801075e <memset>
  if(hadc->Instance==ADC1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a5e      	ldr	r2, [pc, #376]	; (8002060 <HAL_ADC_MspInit+0x1a4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	f040 80b5 	bne.w	8002058 <HAL_ADC_MspInit+0x19c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001eee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f02:	f107 0318 	add.w	r3, r7, #24
 8001f06:	4618      	mov	r0, r3
 8001f08:	f007 f854 	bl	8008fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8001f12:	f7ff fa39 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f16:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f1c:	4a51      	ldr	r2, [pc, #324]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f1e:	f043 0320 	orr.w	r3, r3, #32
 8001f22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f26:	4b4f      	ldr	r3, [pc, #316]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f34:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3a:	4a4a      	ldr	r2, [pc, #296]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f44:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b44      	ldr	r3, [pc, #272]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f58:	4a42      	ldr	r2, [pc, #264]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f62:	4b40      	ldr	r3, [pc, #256]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f70:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f76:	4a3b      	ldr	r2, [pc, #236]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f80:	4b38      	ldr	r3, [pc, #224]	; (8002064 <HAL_ADC_MspInit+0x1a8>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8001f8e:	2333      	movs	r3, #51	; 0x33
 8001f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f94:	2303      	movs	r3, #3
 8001f96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4830      	ldr	r0, [pc, #192]	; (8002068 <HAL_ADC_MspInit+0x1ac>)
 8001fa8:	f005 fb6a 	bl	8007680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 8001fac:	2350      	movs	r3, #80	; 0x50
 8001fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4829      	ldr	r0, [pc, #164]	; (800206c <HAL_ADC_MspInit+0x1b0>)
 8001fc6:	f005 fb5b 	bl	8007680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fdc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4823      	ldr	r0, [pc, #140]	; (8002070 <HAL_ADC_MspInit+0x1b4>)
 8001fe4:	f005 fb4c 	bl	8007680 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 8001fea:	4a23      	ldr	r2, [pc, #140]	; (8002078 <HAL_ADC_MspInit+0x1bc>)
 8001fec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 8001ff0:	2209      	movs	r2, #9
 8001ff2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 8002002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002006:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002008:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 800200a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800200e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 8002012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002016:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 800201a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 8002022:	2200      	movs	r2, #0
 8002024:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 8002028:	2200      	movs	r2, #0
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800202c:	4811      	ldr	r0, [pc, #68]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 800202e:	f002 fceb 	bl	8004a08 <HAL_DMA_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_ADC_MspInit+0x180>
    {
      Error_Handler();
 8002038:	f7ff f9a6 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 8002040:	64da      	str	r2, [r3, #76]	; 0x4c
 8002042:	4a0c      	ldr	r2, [pc, #48]	; (8002074 <HAL_ADC_MspInit+0x1b8>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	2012      	movs	r0, #18
 800204e:	f002 fca6 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002052:	2012      	movs	r0, #18
 8002054:	f002 fcbd 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	37f0      	adds	r7, #240	; 0xf0
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40022000 	.word	0x40022000
 8002064:	58024400 	.word	0x58024400
 8002068:	58020800 	.word	0x58020800
 800206c:	58020000 	.word	0x58020000
 8002070:	58020400 	.word	0x58020400
 8002074:	2400025c 	.word	0x2400025c
 8002078:	40020040 	.word	0x40020040

0800207c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0bc      	sub	sp, #240	; 0xf0
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002094:	f107 0318 	add.w	r3, r7, #24
 8002098:	22c0      	movs	r2, #192	; 0xc0
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f00e fb5e 	bl	801075e <memset>
  if(hi2c->Instance==I2C1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a4d      	ldr	r2, [pc, #308]	; (80021dc <HAL_I2C_MspInit+0x160>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d147      	bne.n	800213c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020ac:	f04f 0208 	mov.w	r2, #8
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020be:	f107 0318 	add.w	r3, r7, #24
 80020c2:	4618      	mov	r0, r3
 80020c4:	f006 ff76 	bl	8008fb4 <HAL_RCCEx_PeriphCLKConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80020ce:	f7ff f95b 	bl	8001388 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 80020d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d8:	4a41      	ldr	r2, [pc, #260]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020e2:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f8:	2312      	movs	r3, #18
 80020fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800210a:	2304      	movs	r3, #4
 800210c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002114:	4619      	mov	r1, r3
 8002116:	4833      	ldr	r0, [pc, #204]	; (80021e4 <HAL_I2C_MspInit+0x168>)
 8002118:	f005 fab2 	bl	8007680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800211c:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 800211e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002122:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 8002124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002128:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800212c:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 800212e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800213a:	e04b      	b.n	80021d4 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <HAL_I2C_MspInit+0x16c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d146      	bne.n	80021d4 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002146:	f04f 0208 	mov.w	r2, #8
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002158:	f107 0318 	add.w	r3, r7, #24
 800215c:	4618      	mov	r0, r3
 800215e:	f006 ff29 	bl	8008fb4 <HAL_RCCEx_PeriphCLKConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8002168:	f7ff f90e 	bl	8001388 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 800216e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002172:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800218a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800218e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002192:	2312      	movs	r3, #18
 8002194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021a4:	2304      	movs	r3, #4
 80021a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021ae:	4619      	mov	r1, r3
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <HAL_I2C_MspInit+0x168>)
 80021b2:	f005 fa65 	bl	8007680 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 80021b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021bc:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 80021be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_I2C_MspInit+0x164>)
 80021c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
}
 80021d4:	bf00      	nop
 80021d6:	37f0      	adds	r7, #240	; 0xf0
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40005400 	.word	0x40005400
 80021e0:	58024400 	.word	0x58024400
 80021e4:	58020400 	.word	0x58020400
 80021e8:	40005800 	.word	0x40005800

080021ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0be      	sub	sp, #248	; 0xf8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002204:	f107 0320 	add.w	r3, r7, #32
 8002208:	22c0      	movs	r2, #192	; 0xc0
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f00e faa6 	bl	801075e <memset>
  if(huart->Instance==LPUART1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4aab      	ldr	r2, [pc, #684]	; (80024c4 <HAL_UART_MspInit+0x2d8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d147      	bne.n	80022ac <HAL_UART_MspInit+0xc0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800221c:	f04f 0204 	mov.w	r2, #4
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800222e:	f107 0320 	add.w	r3, r7, #32
 8002232:	4618      	mov	r0, r3
 8002234:	f006 febe 	bl	8008fb4 <HAL_RCCEx_PeriphCLKConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800223e:	f7ff f8a3 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002242:	4ba1      	ldr	r3, [pc, #644]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 8002244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002248:	4a9f      	ldr	r2, [pc, #636]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 800224a:	f043 0308 	orr.w	r3, r3, #8
 800224e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002252:	4b9d      	ldr	r3, [pc, #628]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 8002254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b99      	ldr	r3, [pc, #612]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 8002262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002266:	4a98      	ldr	r2, [pc, #608]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002270:	4b95      	ldr	r3, [pc, #596]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 8002272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800227e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8002298:	2303      	movs	r3, #3
 800229a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022a2:	4619      	mov	r1, r3
 80022a4:	4889      	ldr	r0, [pc, #548]	; (80024cc <HAL_UART_MspInit+0x2e0>)
 80022a6:	f005 f9eb 	bl	8007680 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80022aa:	e106      	b.n	80024ba <HAL_UART_MspInit+0x2ce>
  else if(huart->Instance==UART5)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a87      	ldr	r2, [pc, #540]	; (80024d0 <HAL_UART_MspInit+0x2e4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d17e      	bne.n	80023b4 <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80022b6:	f04f 0202 	mov.w	r2, #2
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c8:	f107 0320 	add.w	r3, r7, #32
 80022cc:	4618      	mov	r0, r3
 80022ce:	f006 fe71 	bl	8008fb4 <HAL_RCCEx_PeriphCLKConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80022d8:	f7ff f856 	bl	8001388 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80022dc:	4b7a      	ldr	r3, [pc, #488]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 80022de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e2:	4a79      	ldr	r2, [pc, #484]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 80022e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022ec:	4b76      	ldr	r3, [pc, #472]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 80022ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 80022fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002300:	4a71      	ldr	r2, [pc, #452]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800230a:	4b6f      	ldr	r3, [pc, #444]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 800230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002318:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800231c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002332:	230e      	movs	r3, #14
 8002334:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800233c:	4619      	mov	r1, r3
 800233e:	4865      	ldr	r0, [pc, #404]	; (80024d4 <HAL_UART_MspInit+0x2e8>)
 8002340:	f005 f99e 	bl	8007680 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002344:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 8002346:	4a65      	ldr	r2, [pc, #404]	; (80024dc <HAL_UART_MspInit+0x2f0>)
 8002348:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800234a:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 800234c:	2241      	movs	r2, #65	; 0x41
 800234e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002350:	4b61      	ldr	r3, [pc, #388]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002356:	4b60      	ldr	r3, [pc, #384]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 8002358:	2200      	movs	r2, #0
 800235a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800235c:	4b5e      	ldr	r3, [pc, #376]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 800235e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002362:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002364:	4b5c      	ldr	r3, [pc, #368]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800236a:	4b5b      	ldr	r3, [pc, #364]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002370:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 8002372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002376:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002378:	4b57      	ldr	r3, [pc, #348]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 800237a:	2200      	movs	r2, #0
 800237c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 8002380:	2200      	movs	r2, #0
 8002382:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002384:	4854      	ldr	r0, [pc, #336]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 8002386:	f002 fb3f 	bl	8004a08 <HAL_DMA_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002390:	f7fe fffa 	bl	8001388 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a50      	ldr	r2, [pc, #320]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 8002398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800239c:	4a4e      	ldr	r2, [pc, #312]	; (80024d8 <HAL_UART_MspInit+0x2ec>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	2035      	movs	r0, #53	; 0x35
 80023a8:	f002 faf9 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80023ac:	2035      	movs	r0, #53	; 0x35
 80023ae:	f002 fb10 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 80023b2:	e082      	b.n	80024ba <HAL_UART_MspInit+0x2ce>
  else if(huart->Instance==UART7)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a49      	ldr	r2, [pc, #292]	; (80024e0 <HAL_UART_MspInit+0x2f4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d17d      	bne.n	80024ba <HAL_UART_MspInit+0x2ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80023be:	f04f 0202 	mov.w	r2, #2
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d0:	f107 0320 	add.w	r3, r7, #32
 80023d4:	4618      	mov	r0, r3
 80023d6:	f006 fded 	bl	8008fb4 <HAL_RCCEx_PeriphCLKConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 80023e0:	f7fe ffd2 	bl	8001388 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80023e4:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 80023e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ea:	4a37      	ldr	r2, [pc, #220]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 80023ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023f4:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 80023f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002402:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 8002404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002408:	4a2f      	ldr	r2, [pc, #188]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 800240a:	f043 0310 	orr.w	r3, r3, #16
 800240e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_UART_MspInit+0x2dc>)
 8002414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002420:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002424:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800243a:	2307      	movs	r3, #7
 800243c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002440:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002444:	4619      	mov	r1, r3
 8002446:	4827      	ldr	r0, [pc, #156]	; (80024e4 <HAL_UART_MspInit+0x2f8>)
 8002448:	f005 f91a 	bl	8007680 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream1;
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 800244e:	4a27      	ldr	r2, [pc, #156]	; (80024ec <HAL_UART_MspInit+0x300>)
 8002450:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 8002454:	224f      	movs	r2, #79	; 0x4f
 8002456:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002458:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 8002460:	2200      	movs	r2, #0
 8002462:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 8002466:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800246a:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 800246e:	2200      	movs	r2, #0
 8002470:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 800247a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800247e:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 8002482:	2200      	movs	r2, #0
 8002484:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 8002488:	2200      	movs	r2, #0
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800248c:	4816      	ldr	r0, [pc, #88]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 800248e:	f002 fabb 	bl	8004a08 <HAL_DMA_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 8002498:	f7fe ff76 	bl	8001388 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 80024a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80024a4:	4a10      	ldr	r2, [pc, #64]	; (80024e8 <HAL_UART_MspInit+0x2fc>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2100      	movs	r1, #0
 80024ae:	2052      	movs	r0, #82	; 0x52
 80024b0:	f002 fa75 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80024b4:	2052      	movs	r0, #82	; 0x52
 80024b6:	f002 fa8c 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	37f8      	adds	r7, #248	; 0xf8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	58000c00 	.word	0x58000c00
 80024c8:	58024400 	.word	0x58024400
 80024cc:	58020000 	.word	0x58020000
 80024d0:	40005000 	.word	0x40005000
 80024d4:	58020400 	.word	0x58020400
 80024d8:	24000538 	.word	0x24000538
 80024dc:	40020010 	.word	0x40020010
 80024e0:	40007800 	.word	0x40007800
 80024e4:	58021000 	.word	0x58021000
 80024e8:	240005b0 	.word	0x240005b0
 80024ec:	40020028 	.word	0x40020028

080024f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08e      	sub	sp, #56	; 0x38
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d10f      	bne.n	8002532 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002512:	4b5e      	ldr	r3, [pc, #376]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 8002514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002518:	4a5c      	ldr	r2, [pc, #368]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002522:	4b5a      	ldr	r3, [pc, #360]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 8002524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	623b      	str	r3, [r7, #32]
 800252e:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002530:	e0a8      	b.n	8002684 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM3)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a56      	ldr	r2, [pc, #344]	; (8002690 <HAL_TIM_Base_MspInit+0x1a0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d10f      	bne.n	800255c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 800253e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002542:	4a52      	ldr	r2, [pc, #328]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800254c:	4b4f      	ldr	r3, [pc, #316]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 800254e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	69fb      	ldr	r3, [r7, #28]
}
 800255a:	e093      	b.n	8002684 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM5)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a4c      	ldr	r2, [pc, #304]	; (8002694 <HAL_TIM_Base_MspInit+0x1a4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d136      	bne.n	80025d4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002566:	4b49      	ldr	r3, [pc, #292]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 8002568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800256c:	4a47      	ldr	r2, [pc, #284]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 800256e:	f043 0308 	orr.w	r3, r3, #8
 8002572:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002576:	4b45      	ldr	r3, [pc, #276]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 8002578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	4b41      	ldr	r3, [pc, #260]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 8002586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258a:	4a40      	ldr	r2, [pc, #256]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002594:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 8002596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025a2:	2301      	movs	r3, #1
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025b2:	2302      	movs	r3, #2
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ba:	4619      	mov	r1, r3
 80025bc:	4836      	ldr	r0, [pc, #216]	; (8002698 <HAL_TIM_Base_MspInit+0x1a8>)
 80025be:	f005 f85f 	bl	8007680 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	2032      	movs	r0, #50	; 0x32
 80025c8:	f002 f9e9 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80025cc:	2032      	movs	r0, #50	; 0x32
 80025ce:	f002 fa00 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 80025d2:	e057      	b.n	8002684 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM15)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a30      	ldr	r2, [pc, #192]	; (800269c <HAL_TIM_Base_MspInit+0x1ac>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d136      	bne.n	800264c <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 80025e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025e4:	4a29      	ldr	r2, [pc, #164]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 80025e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 80025f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 80025fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002602:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 8002604:	f043 0310 	orr.w	r3, r3, #16
 8002608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800260c:	4b1f      	ldr	r3, [pc, #124]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 800260e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800261a:	2320      	movs	r3, #32
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800262a:	2304      	movs	r3, #4
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800262e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002632:	4619      	mov	r1, r3
 8002634:	481a      	ldr	r0, [pc, #104]	; (80026a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002636:	f005 f823 	bl	8007680 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	2074      	movs	r0, #116	; 0x74
 8002640:	f002 f9ad 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002644:	2074      	movs	r0, #116	; 0x74
 8002646:	f002 f9c4 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 800264a:	e01b      	b.n	8002684 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM16)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <HAL_TIM_Base_MspInit+0x1b4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d116      	bne.n	8002684 <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 8002658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800265c:	4a0b      	ldr	r2, [pc, #44]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 800265e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002662:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_TIM_Base_MspInit+0x19c>)
 8002668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	2075      	movs	r0, #117	; 0x75
 800267a:	f002 f990 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800267e:	2075      	movs	r0, #117	; 0x75
 8002680:	f002 f9a7 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 8002684:	bf00      	nop
 8002686:	3738      	adds	r7, #56	; 0x38
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	58024400 	.word	0x58024400
 8002690:	40000400 	.word	0x40000400
 8002694:	40000c00 	.word	0x40000c00
 8002698:	58020000 	.word	0x58020000
 800269c:	40014000 	.word	0x40014000
 80026a0:	58021000 	.word	0x58021000
 80026a4:	40014400 	.word	0x40014400

080026a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c8:	d120      	bne.n	800270c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <HAL_TIM_MspPostInit+0xb4>)
 80026cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d0:	4a22      	ldr	r2, [pc, #136]	; (800275c <HAL_TIM_MspPostInit+0xb4>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_TIM_MspPostInit+0xb4>)
 80026dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80026e8:	f248 030e 	movw	r3, #32782	; 0x800e
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026fa:	2301      	movs	r3, #1
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	4816      	ldr	r0, [pc, #88]	; (8002760 <HAL_TIM_MspPostInit+0xb8>)
 8002706:	f004 ffbb 	bl	8007680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800270a:	e023      	b.n	8002754 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <HAL_TIM_MspPostInit+0xbc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d11e      	bne.n	8002754 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_TIM_MspPostInit+0xb4>)
 8002718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271c:	4a0f      	ldr	r2, [pc, #60]	; (800275c <HAL_TIM_MspPostInit+0xb4>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_TIM_MspPostInit+0xb4>)
 8002728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002734:	23c0      	movs	r3, #192	; 0xc0
 8002736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002744:	2302      	movs	r3, #2
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4619      	mov	r1, r3
 800274e:	4806      	ldr	r0, [pc, #24]	; (8002768 <HAL_TIM_MspPostInit+0xc0>)
 8002750:	f004 ff96 	bl	8007680 <HAL_GPIO_Init>
}
 8002754:	bf00      	nop
 8002756:	3728      	adds	r7, #40	; 0x28
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	58024400 	.word	0x58024400
 8002760:	58020000 	.word	0x58020000
 8002764:	40000400 	.word	0x40000400
 8002768:	58020800 	.word	0x58020800

0800276c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <NMI_Handler+0x4>

08002772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002776:	e7fe      	b.n	8002776 <HardFault_Handler+0x4>

08002778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800277c:	e7fe      	b.n	800277c <MemManage_Handler+0x4>

0800277e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002782:	e7fe      	b.n	8002782 <BusFault_Handler+0x4>

08002784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <UsageFault_Handler+0x4>

0800278a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b8:	f000 fa46 	bl	8002c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}

080027c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <DMA1_Stream0_IRQHandler+0x10>)
 80027c6:	f003 fc49 	bl	800605c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	24000538 	.word	0x24000538

080027d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <DMA1_Stream1_IRQHandler+0x10>)
 80027da:	f003 fc3f 	bl	800605c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	240005b0 	.word	0x240005b0

080027e8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <DMA1_Stream2_IRQHandler+0x10>)
 80027ee:	f003 fc35 	bl	800605c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2400025c 	.word	0x2400025c

080027fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <ADC_IRQHandler+0x10>)
 8002802:	f000 fedf 	bl	80035c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	240001f8 	.word	0x240001f8

08002810 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <TIM5_IRQHandler+0x10>)
 8002816:	f009 ff1f 	bl	800c658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	240006c0 	.word	0x240006c0

08002824 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <UART5_IRQHandler+0x10>)
 800282a:	f00b fb9f 	bl	800df6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	24000410 	.word	0x24000410

08002838 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <UART7_IRQHandler+0x10>)
 800283e:	f00b fb95 	bl	800df6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	240004a4 	.word	0x240004a4

0800284c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <TIM15_IRQHandler+0x10>)
 8002852:	f009 ff01 	bl	800c658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2400070c 	.word	0x2400070c

08002860 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <TIM16_IRQHandler+0x10>)
 8002866:	f009 fef7 	bl	800c658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	24000758 	.word	0x24000758

08002874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return 1;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <_kill>:

int _kill(int pid, int sig)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800288e:	f00d ffb9 	bl	8010804 <__errno>
 8002892:	4603      	mov	r3, r0
 8002894:	2216      	movs	r2, #22
 8002896:	601a      	str	r2, [r3, #0]
  return -1;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_exit>:

void _exit (int status)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ffe7 	bl	8002884 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028b6:	e7fe      	b.n	80028b6 <_exit+0x12>

080028b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e00a      	b.n	80028e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028ca:	f3af 8000 	nop.w
 80028ce:	4601      	mov	r1, r0
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	60ba      	str	r2, [r7, #8]
 80028d6:	b2ca      	uxtb	r2, r1
 80028d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3301      	adds	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	dbf0      	blt.n	80028ca <_read+0x12>
  }

  return len;
 80028e8:	687b      	ldr	r3, [r7, #4]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e009      	b.n	8002918 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	60ba      	str	r2, [r7, #8]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	dbf1      	blt.n	8002904 <_write+0x12>
  }
  return len;
 8002920:	687b      	ldr	r3, [r7, #4]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <_close>:

int _close(int file)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002952:	605a      	str	r2, [r3, #4]
  return 0;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <_isatty>:

int _isatty(int file)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800299c:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <_sbrk+0x5c>)
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <_sbrk+0x60>)
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <_sbrk+0x64>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <_sbrk+0x64>)
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <_sbrk+0x68>)
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d207      	bcs.n	80029d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c4:	f00d ff1e 	bl	8010804 <__errno>
 80029c8:	4603      	mov	r3, r0
 80029ca:	220c      	movs	r2, #12
 80029cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d2:	e009      	b.n	80029e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <_sbrk+0x64>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <_sbrk+0x64>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <_sbrk+0x64>)
 80029e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e6:	68fb      	ldr	r3, [r7, #12]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	24080000 	.word	0x24080000
 80029f4:	00000400 	.word	0x00000400
 80029f8:	2400085c 	.word	0x2400085c
 80029fc:	240009b0 	.word	0x240009b0

08002a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a04:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <SystemInit+0xe4>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	4a36      	ldr	r2, [pc, #216]	; (8002ae4 <SystemInit+0xe4>)
 8002a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a14:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <SystemInit+0xe8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	2b06      	cmp	r3, #6
 8002a1e:	d807      	bhi.n	8002a30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a20:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <SystemInit+0xe8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 030f 	bic.w	r3, r3, #15
 8002a28:	4a2f      	ldr	r2, [pc, #188]	; (8002ae8 <SystemInit+0xe8>)
 8002a2a:	f043 0307 	orr.w	r3, r3, #7
 8002a2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a30:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <SystemInit+0xec>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2d      	ldr	r2, [pc, #180]	; (8002aec <SystemInit+0xec>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <SystemInit+0xec>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <SystemInit+0xec>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4929      	ldr	r1, [pc, #164]	; (8002aec <SystemInit+0xec>)
 8002a48:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <SystemInit+0xf0>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <SystemInit+0xe8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a5a:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <SystemInit+0xe8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 030f 	bic.w	r3, r3, #15
 8002a62:	4a21      	ldr	r2, [pc, #132]	; (8002ae8 <SystemInit+0xe8>)
 8002a64:	f043 0307 	orr.w	r3, r3, #7
 8002a68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <SystemInit+0xec>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <SystemInit+0xec>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <SystemInit+0xec>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <SystemInit+0xec>)
 8002a7e:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <SystemInit+0xf4>)
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <SystemInit+0xec>)
 8002a84:	4a1c      	ldr	r2, [pc, #112]	; (8002af8 <SystemInit+0xf8>)
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <SystemInit+0xec>)
 8002a8a:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <SystemInit+0xfc>)
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <SystemInit+0xec>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a94:	4b15      	ldr	r3, [pc, #84]	; (8002aec <SystemInit+0xec>)
 8002a96:	4a19      	ldr	r2, [pc, #100]	; (8002afc <SystemInit+0xfc>)
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <SystemInit+0xec>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <SystemInit+0xec>)
 8002aa2:	4a16      	ldr	r2, [pc, #88]	; (8002afc <SystemInit+0xfc>)
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <SystemInit+0xec>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <SystemInit+0xec>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <SystemInit+0xec>)
 8002ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <SystemInit+0xec>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <SystemInit+0x100>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <SystemInit+0x104>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aca:	d202      	bcs.n	8002ad2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <SystemInit+0x108>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <SystemInit+0x10c>)
 8002ad4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002ad8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00
 8002ae8:	52002000 	.word	0x52002000
 8002aec:	58024400 	.word	0x58024400
 8002af0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002af4:	02020200 	.word	0x02020200
 8002af8:	01ff0000 	.word	0x01ff0000
 8002afc:	01010280 	.word	0x01010280
 8002b00:	5c001000 	.word	0x5c001000
 8002b04:	ffff0000 	.word	0xffff0000
 8002b08:	51008108 	.word	0x51008108
 8002b0c:	52004000 	.word	0x52004000

08002b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b14:	f7ff ff74 	bl	8002a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b18:	480c      	ldr	r0, [pc, #48]	; (8002b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b1a:	490d      	ldr	r1, [pc, #52]	; (8002b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b20:	e002      	b.n	8002b28 <LoopCopyDataInit>

08002b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b26:	3304      	adds	r3, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b2c:	d3f9      	bcc.n	8002b22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b30:	4c0a      	ldr	r4, [pc, #40]	; (8002b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b34:	e001      	b.n	8002b3a <LoopFillZerobss>

08002b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b38:	3204      	adds	r2, #4

08002b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b3c:	d3fb      	bcc.n	8002b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b3e:	f00d fe67 	bl	8010810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b42:	f7fd fda3 	bl	800068c <main>
  bx  lr
 8002b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b50:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002b54:	08012dcc 	.word	0x08012dcc
  ldr r2, =_sbss
 8002b58:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8002b5c:	240009b0 	.word	0x240009b0

08002b60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b60:	e7fe      	b.n	8002b60 <ADC3_IRQHandler>
	...

08002b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6a:	2003      	movs	r0, #3
 8002b6c:	f001 ff0c 	bl	8004988 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b70:	f006 f84a 	bl	8008c08 <HAL_RCC_GetSysClockFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_Init+0x68>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	4913      	ldr	r1, [pc, #76]	; (8002bd0 <HAL_Init+0x6c>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b8e:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <HAL_Init+0x68>)
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <HAL_Init+0x6c>)
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <HAL_Init+0x70>)
 8002ba6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ba8:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <HAL_Init+0x74>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bae:	200f      	movs	r0, #15
 8002bb0:	f000 f814 	bl	8002bdc <HAL_InitTick>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e002      	b.n	8002bc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bbe:	f7ff f963 	bl	8001e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	58024400 	.word	0x58024400
 8002bd0:	08012a08 	.word	0x08012a08
 8002bd4:	24000008 	.word	0x24000008
 8002bd8:	24000004 	.word	0x24000004

08002bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002be4:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_InitTick+0x60>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e021      	b.n	8002c34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002bf0:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <HAL_InitTick+0x64>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <HAL_InitTick+0x60>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fef1 	bl	80049ee <HAL_SYSTICK_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00e      	b.n	8002c34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b0f      	cmp	r3, #15
 8002c1a:	d80a      	bhi.n	8002c32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c24:	f001 febb 	bl	800499e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c28:	4a06      	ldr	r2, [pc, #24]	; (8002c44 <HAL_InitTick+0x68>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	24000010 	.word	0x24000010
 8002c40:	24000004 	.word	0x24000004
 8002c44:	2400000c 	.word	0x2400000c

08002c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_IncTick+0x20>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_IncTick+0x24>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <HAL_IncTick+0x24>)
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	24000010 	.word	0x24000010
 8002c6c:	24000860 	.word	0x24000860

08002c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return uwTick;
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <HAL_GetTick+0x14>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	24000860 	.word	0x24000860

08002c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c90:	f7ff ffee 	bl	8002c70 <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca0:	d005      	beq.n	8002cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_Delay+0x44>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cae:	bf00      	nop
 8002cb0:	f7ff ffde 	bl	8002c70 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d8f7      	bhi.n	8002cb0 <HAL_Delay+0x28>
  {
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	24000010 	.word	0x24000010

08002cd0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <HAL_GetREVID+0x14>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	5c001000 	.word	0x5c001000

08002ce8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	609a      	str	r2, [r3, #8]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3360      	adds	r3, #96	; 0x60
 8002d62:	461a      	mov	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d84:	bf00      	nop
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	fa01 f303 	lsl.w	r3, r1, r3
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	611a      	str	r2, [r3, #16]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b087      	sub	sp, #28
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3360      	adds	r3, #96	; 0x60
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	601a      	str	r2, [r3, #0]
  }
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b087      	sub	sp, #28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3330      	adds	r3, #48	; 0x30
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	4413      	add	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	211f      	movs	r1, #31
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	401a      	ands	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	f003 011f 	and.w	r1, r3, #31
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	431a      	orrs	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f023 0203 	bic.w	r2, r3, #3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b087      	sub	sp, #28
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3314      	adds	r3, #20
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	0e5b      	lsrs	r3, r3, #25
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	4413      	add	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	0d1b      	lsrs	r3, r3, #20
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2107      	movs	r1, #7
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	0d1b      	lsrs	r3, r3, #20
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	431a      	orrs	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f0c:	bf00      	nop
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f30:	43db      	mvns	r3, r3
 8002f32:	401a      	ands	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0318 	and.w	r3, r3, #24
 8002f3a:	4908      	ldr	r1, [pc, #32]	; (8002f5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f3c:	40d9      	lsrs	r1, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	400b      	ands	r3, r1
 8002f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f46:	431a      	orrs	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	000fffff 	.word	0x000fffff

08002f60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 031f 	and.w	r3, r3, #31
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6093      	str	r3, [r2, #8]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	5fffffc0 	.word	0x5fffffc0

08002fbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd0:	d101      	bne.n	8002fd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <LL_ADC_EnableInternalRegulator+0x24>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	6fffffc0 	.word	0x6fffffc0

0800300c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003020:	d101      	bne.n	8003026 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <LL_ADC_Enable+0x24>)
 8003042:	4013      	ands	r3, r2
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	7fffffc0 	.word	0x7fffffc0

0800305c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <LL_ADC_IsEnabled+0x18>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <LL_ADC_IsEnabled+0x1a>
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <LL_ADC_REG_StartConversion+0x24>)
 8003092:	4013      	ands	r3, r2
 8003094:	f043 0204 	orr.w	r2, r3, #4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	7fffffc0 	.word	0x7fffffc0

080030ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d101      	bne.n	80030c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d101      	bne.n	80030ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e18f      	b.n	8003432 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fe fecb 	bl	8001ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff3f 	bl	8002fbc <LL_ADC_IsDeepPowerDownEnabled>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d004      	beq.n	800314e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff25 	bl	8002f98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff5a 	bl	800300c <LL_ADC_IsInternalRegulatorEnabled>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d114      	bne.n	8003188 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ff3e 	bl	8002fe4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003168:	4b87      	ldr	r3, [pc, #540]	; (8003388 <HAL_ADC_Init+0x290>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	4a87      	ldr	r2, [pc, #540]	; (800338c <HAL_ADC_Init+0x294>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	099b      	lsrs	r3, r3, #6
 8003176:	3301      	adds	r3, #1
 8003178:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800317a:	e002      	b.n	8003182 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	3b01      	subs	r3, #1
 8003180:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f9      	bne.n	800317c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff ff3d 	bl	800300c <LL_ADC_IsInternalRegulatorEnabled>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10d      	bne.n	80031b4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f043 0210 	orr.w	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff77 	bl	80030ac <LL_ADC_REG_IsConversionOngoing>
 80031be:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f040 8129 	bne.w	8003420 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f040 8125 	bne.w	8003420 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031de:	f043 0202 	orr.w	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff36 	bl	800305c <LL_ADC_IsEnabled>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d136      	bne.n	8003264 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a65      	ldr	r2, [pc, #404]	; (8003390 <HAL_ADC_Init+0x298>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <HAL_ADC_Init+0x112>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a63      	ldr	r2, [pc, #396]	; (8003394 <HAL_ADC_Init+0x29c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10e      	bne.n	8003228 <HAL_ADC_Init+0x130>
 800320a:	4861      	ldr	r0, [pc, #388]	; (8003390 <HAL_ADC_Init+0x298>)
 800320c:	f7ff ff26 	bl	800305c <LL_ADC_IsEnabled>
 8003210:	4604      	mov	r4, r0
 8003212:	4860      	ldr	r0, [pc, #384]	; (8003394 <HAL_ADC_Init+0x29c>)
 8003214:	f7ff ff22 	bl	800305c <LL_ADC_IsEnabled>
 8003218:	4603      	mov	r3, r0
 800321a:	4323      	orrs	r3, r4
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e008      	b.n	800323a <HAL_ADC_Init+0x142>
 8003228:	485b      	ldr	r0, [pc, #364]	; (8003398 <HAL_ADC_Init+0x2a0>)
 800322a:	f7ff ff17 	bl	800305c <LL_ADC_IsEnabled>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d012      	beq.n	8003264 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a53      	ldr	r2, [pc, #332]	; (8003390 <HAL_ADC_Init+0x298>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_ADC_Init+0x15a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a51      	ldr	r2, [pc, #324]	; (8003394 <HAL_ADC_Init+0x29c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d101      	bne.n	8003256 <HAL_ADC_Init+0x15e>
 8003252:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_ADC_Init+0x2a4>)
 8003254:	e000      	b.n	8003258 <HAL_ADC_Init+0x160>
 8003256:	4a52      	ldr	r2, [pc, #328]	; (80033a0 <HAL_ADC_Init+0x2a8>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f7ff fd42 	bl	8002ce8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003264:	f7ff fd34 	bl	8002cd0 <HAL_GetREVID>
 8003268:	4603      	mov	r3, r0
 800326a:	f241 0203 	movw	r2, #4099	; 0x1003
 800326e:	4293      	cmp	r3, r2
 8003270:	d914      	bls.n	800329c <HAL_ADC_Init+0x1a4>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b10      	cmp	r3, #16
 8003278:	d110      	bne.n	800329c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7d5b      	ldrb	r3, [r3, #21]
 800327e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003284:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800328a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7f1b      	ldrb	r3, [r3, #28]
 8003290:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003292:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003294:	f043 030c 	orr.w	r3, r3, #12
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	e00d      	b.n	80032b8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7d5b      	ldrb	r3, [r3, #21]
 80032a0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032a6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80032ac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	7f1b      	ldrb	r3, [r3, #28]
 80032b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	7f1b      	ldrb	r3, [r3, #28]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d106      	bne.n	80032ce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	045b      	lsls	r3, r3, #17
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <HAL_ADC_Init+0x2ac>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	430b      	orrs	r3, r1
 80032fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fed2 	bl	80030ac <LL_ADC_REG_IsConversionOngoing>
 8003308:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fedf 	bl	80030d2 <LL_ADC_INJ_IsConversionOngoing>
 8003314:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d15f      	bne.n	80033dc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d15c      	bne.n	80033dc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7d1b      	ldrb	r3, [r3, #20]
 8003326:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <HAL_ADC_Init+0x2b0>)
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	69b9      	ldr	r1, [r7, #24]
 8003340:	430b      	orrs	r3, r1
 8003342:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800334a:	2b01      	cmp	r3, #1
 800334c:	d130      	bne.n	80033b0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	4b14      	ldr	r3, [pc, #80]	; (80033ac <HAL_ADC_Init+0x2b4>)
 800335c:	4013      	ands	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003362:	3a01      	subs	r2, #1
 8003364:	0411      	lsls	r1, r2, #16
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003370:	4311      	orrs	r1, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003376:	430a      	orrs	r2, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	611a      	str	r2, [r3, #16]
 8003384:	e01c      	b.n	80033c0 <HAL_ADC_Init+0x2c8>
 8003386:	bf00      	nop
 8003388:	24000004 	.word	0x24000004
 800338c:	053e2d63 	.word	0x053e2d63
 8003390:	40022000 	.word	0x40022000
 8003394:	40022100 	.word	0x40022100
 8003398:	58026000 	.word	0x58026000
 800339c:	40022300 	.word	0x40022300
 80033a0:	58026300 	.word	0x58026300
 80033a4:	fff0c003 	.word	0xfff0c003
 80033a8:	ffffbffc 	.word	0xffffbffc
 80033ac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 ffc4 	bl	8004364 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d10c      	bne.n	80033fe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f023 010f 	bic.w	r1, r3, #15
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	1e5a      	subs	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
 80033fc:	e007      	b.n	800340e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 020f 	bic.w	r2, r2, #15
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	f023 0303 	bic.w	r3, r3, #3
 8003416:	f043 0201 	orr.w	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	655a      	str	r2, [r3, #84]	; 0x54
 800341e:	e007      	b.n	8003430 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003424:	f043 0210 	orr.w	r2, r3, #16
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003430:	7ffb      	ldrb	r3, [r7, #31]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd90      	pop	{r4, r7, pc}
 800343a:	bf00      	nop

0800343c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a55      	ldr	r2, [pc, #340]	; (80035a4 <HAL_ADC_Start_DMA+0x168>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_ADC_Start_DMA+0x20>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a54      	ldr	r2, [pc, #336]	; (80035a8 <HAL_ADC_Start_DMA+0x16c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_ADC_Start_DMA+0x24>
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_ADC_Start_DMA+0x170>)
 800345e:	e000      	b.n	8003462 <HAL_ADC_Start_DMA+0x26>
 8003460:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_ADC_Start_DMA+0x174>)
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fd7c 	bl	8002f60 <LL_ADC_GetMultimode>
 8003468:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fe1c 	bl	80030ac <LL_ADC_REG_IsConversionOngoing>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 808c 	bne.w	8003594 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_ADC_Start_DMA+0x4e>
 8003486:	2302      	movs	r3, #2
 8003488:	e087      	b.n	800359a <HAL_ADC_Start_DMA+0x15e>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d002      	beq.n	80034a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d170      	bne.n	8003586 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fe3f 	bl	8004128 <ADC_Enable>
 80034aa:	4603      	mov	r3, r0
 80034ac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d163      	bne.n	800357c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034b8:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <HAL_ADC_Start_DMA+0x178>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a37      	ldr	r2, [pc, #220]	; (80035a8 <HAL_ADC_Start_DMA+0x16c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d002      	beq.n	80034d4 <HAL_ADC_Start_DMA+0x98>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	e000      	b.n	80034d6 <HAL_ADC_Start_DMA+0x9a>
 80034d4:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_ADC_Start_DMA+0x168>)
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	4293      	cmp	r3, r2
 80034dc:	d002      	beq.n	80034e4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d006      	beq.n	800350a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	f023 0206 	bic.w	r2, r3, #6
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	659a      	str	r2, [r3, #88]	; 0x58
 8003508:	e002      	b.n	8003510 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003514:	4a28      	ldr	r2, [pc, #160]	; (80035b8 <HAL_ADC_Start_DMA+0x17c>)
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351c:	4a27      	ldr	r2, [pc, #156]	; (80035bc <HAL_ADC_Start_DMA+0x180>)
 800351e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003524:	4a26      	ldr	r2, [pc, #152]	; (80035c0 <HAL_ADC_Start_DMA+0x184>)
 8003526:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	221c      	movs	r2, #28
 800352e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0210 	orr.w	r2, r2, #16
 8003546:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	4619      	mov	r1, r3
 8003552:	4610      	mov	r0, r2
 8003554:	f7ff fc8f 	bl	8002e76 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3340      	adds	r3, #64	; 0x40
 8003562:	4619      	mov	r1, r3
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f001 fdaa 	bl	80050c0 <HAL_DMA_Start_IT>
 800356c:	4603      	mov	r3, r0
 800356e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fd85 	bl	8003084 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800357a:	e00d      	b.n	8003598 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003584:	e008      	b.n	8003598 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003592:	e001      	b.n	8003598 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003598:	7dfb      	ldrb	r3, [r7, #23]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40022000 	.word	0x40022000
 80035a8:	40022100 	.word	0x40022100
 80035ac:	40022300 	.word	0x40022300
 80035b0:	58026300 	.word	0x58026300
 80035b4:	fffff0fe 	.word	0xfffff0fe
 80035b8:	0800423d 	.word	0x0800423d
 80035bc:	08004315 	.word	0x08004315
 80035c0:	08004331 	.word	0x08004331

080035c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a87      	ldr	r2, [pc, #540]	; (8003804 <HAL_ADC_IRQHandler+0x240>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_ADC_IRQHandler+0x30>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a86      	ldr	r2, [pc, #536]	; (8003808 <HAL_ADC_IRQHandler+0x244>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_IRQHandler+0x34>
 80035f4:	4b85      	ldr	r3, [pc, #532]	; (800380c <HAL_ADC_IRQHandler+0x248>)
 80035f6:	e000      	b.n	80035fa <HAL_ADC_IRQHandler+0x36>
 80035f8:	4b85      	ldr	r3, [pc, #532]	; (8003810 <HAL_ADC_IRQHandler+0x24c>)
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fcb0 	bl	8002f60 <LL_ADC_GetMultimode>
 8003600:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d017      	beq.n	800363c <HAL_ADC_IRQHandler+0x78>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d012      	beq.n	800363c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fff2 	bl	8004618 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2202      	movs	r2, #2
 800363a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d004      	beq.n	8003650 <HAL_ADC_IRQHandler+0x8c>
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8083 	beq.w	8003762 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d07d      	beq.n	8003762 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d105      	bne.n	800367e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fbb8 	bl	8002df8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d062      	beq.n	8003754 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a5d      	ldr	r2, [pc, #372]	; (8003808 <HAL_ADC_IRQHandler+0x244>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d002      	beq.n	800369e <HAL_ADC_IRQHandler+0xda>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	e000      	b.n	80036a0 <HAL_ADC_IRQHandler+0xdc>
 800369e:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_ADC_IRQHandler+0x240>)
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d008      	beq.n	80036ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d002      	beq.n	80036ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b09      	cmp	r3, #9
 80036b8:	d104      	bne.n	80036c4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	e00c      	b.n	80036de <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a4f      	ldr	r2, [pc, #316]	; (8003808 <HAL_ADC_IRQHandler+0x244>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d002      	beq.n	80036d4 <HAL_ADC_IRQHandler+0x110>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	e000      	b.n	80036d6 <HAL_ADC_IRQHandler+0x112>
 80036d4:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <HAL_ADC_IRQHandler+0x240>)
 80036d6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d135      	bne.n	8003754 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d12e      	bne.n	8003754 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fcd6 	bl	80030ac <LL_ADC_REG_IsConversionOngoing>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d11a      	bne.n	800373c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 020c 	bic.w	r2, r2, #12
 8003714:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d112      	bne.n	8003754 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003732:	f043 0201 	orr.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	655a      	str	r2, [r3, #84]	; 0x54
 800373a:	e00b      	b.n	8003754 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	f043 0210 	orr.w	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f96f 	bl	8003a38 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	220c      	movs	r2, #12
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d004      	beq.n	8003776 <HAL_ADC_IRQHandler+0x1b2>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a0 	beq.w	80038c2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 809a 	beq.w	80038c2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	d105      	bne.n	80037a6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fb76 	bl	8002e9c <LL_ADC_INJ_IsTriggerSourceSWStart>
 80037b0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fb1e 	bl	8002df8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037bc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <HAL_ADC_IRQHandler+0x244>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d002      	beq.n	80037ce <HAL_ADC_IRQHandler+0x20a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	e000      	b.n	80037d0 <HAL_ADC_IRQHandler+0x20c>
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <HAL_ADC_IRQHandler+0x240>)
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d008      	beq.n	80037ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b06      	cmp	r3, #6
 80037e2:	d002      	beq.n	80037ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b07      	cmp	r3, #7
 80037e8:	d104      	bne.n	80037f4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	623b      	str	r3, [r7, #32]
 80037f2:	e014      	b.n	800381e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a03      	ldr	r2, [pc, #12]	; (8003808 <HAL_ADC_IRQHandler+0x244>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00a      	beq.n	8003814 <HAL_ADC_IRQHandler+0x250>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	e008      	b.n	8003816 <HAL_ADC_IRQHandler+0x252>
 8003804:	40022000 	.word	0x40022000
 8003808:	40022100 	.word	0x40022100
 800380c:	40022300 	.word	0x40022300
 8003810:	58026300 	.word	0x58026300
 8003814:	4b84      	ldr	r3, [pc, #528]	; (8003a28 <HAL_ADC_IRQHandler+0x464>)
 8003816:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d047      	beq.n	80038b4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_ADC_IRQHandler+0x27a>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d03f      	beq.n	80038b4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800383a:	2b00      	cmp	r3, #0
 800383c:	d13a      	bne.n	80038b4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d133      	bne.n	80038b4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d12e      	bne.n	80038b4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fc39 	bl	80030d2 <LL_ADC_INJ_IsConversionOngoing>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d11a      	bne.n	800389c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003874:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d112      	bne.n	80038b4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	f043 0201 	orr.w	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
 800389a:	e00b      	b.n	80038b4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	f043 0210 	orr.w	r2, r3, #16
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	f043 0201 	orr.w	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fe87 	bl	80045c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2260      	movs	r2, #96	; 0x60
 80038c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d011      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x32c>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8bc 	bl	8003a60 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2280      	movs	r2, #128	; 0x80
 80038ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d012      	beq.n	8003920 <HAL_ADC_IRQHandler+0x35c>
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fe6d 	bl	80045f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800391e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003926:	2b00      	cmp	r3, #0
 8003928:	d012      	beq.n	8003950 <HAL_ADC_IRQHandler+0x38c>
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00d      	beq.n	8003950 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fe5f 	bl	8004604 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800394e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b00      	cmp	r3, #0
 8003958:	d043      	beq.n	80039e2 <HAL_ADC_IRQHandler+0x41e>
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d03e      	beq.n	80039e2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800396c:	2301      	movs	r3, #1
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
 8003970:	e021      	b.n	80039b6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d015      	beq.n	80039a4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2a      	ldr	r2, [pc, #168]	; (8003a28 <HAL_ADC_IRQHandler+0x464>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_ADC_IRQHandler+0x3c8>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a29      	ldr	r2, [pc, #164]	; (8003a2c <HAL_ADC_IRQHandler+0x468>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_ADC_IRQHandler+0x3cc>
 800398c:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_ADC_IRQHandler+0x46c>)
 800398e:	e000      	b.n	8003992 <HAL_ADC_IRQHandler+0x3ce>
 8003990:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_ADC_IRQHandler+0x470>)
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff faf2 	bl	8002f7c <LL_ADC_GetMultiDMATransfer>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800399e:	2301      	movs	r3, #1
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	e008      	b.n	80039b6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80039b2:	2301      	movs	r3, #1
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10e      	bne.n	80039da <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	f043 0202 	orr.w	r2, r3, #2
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f84d 	bl	8003a74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2210      	movs	r2, #16
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d018      	beq.n	8003a1e <HAL_ADC_IRQHandler+0x45a>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d013      	beq.n	8003a1e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	f043 0208 	orr.w	r2, r3, #8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a16:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fddf 	bl	80045dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003a1e:	bf00      	nop
 8003a20:	3728      	adds	r7, #40	; 0x28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	40022100 	.word	0x40022100
 8003a30:	40022300 	.word	0x40022300
 8003a34:	58026300 	.word	0x58026300

08003a38 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b0a1      	sub	sp, #132	; 0x84
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4a9d      	ldr	r2, [pc, #628]	; (8003d18 <HAL_ADC_ConfigChannel+0x290>)
 8003aa2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x2a>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e321      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x66e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff faf4 	bl	80030ac <LL_ADC_REG_IsConversionOngoing>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 8306 	bne.w	80040d8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d108      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x62>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0e9b      	lsrs	r3, r3, #26
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	e016      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x90>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003afa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003afc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003b02:	2320      	movs	r3, #32
 8003b04:	e003      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003b06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b08:	fab3 f383 	clz	r3, r3
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	2201      	movs	r2, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	69d1      	ldr	r1, [r2, #28]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	430b      	orrs	r3, r1
 8003b24:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f7ff f973 	bl	8002e1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fab5 	bl	80030ac <LL_ADC_REG_IsConversionOngoing>
 8003b42:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fac2 	bl	80030d2 <LL_ADC_INJ_IsConversionOngoing>
 8003b4e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f040 80b3 	bne.w	8003cbe <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f040 80af 	bne.w	8003cbe <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f7ff f9a8 	bl	8002ec2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b72:	4b6a      	ldr	r3, [pc, #424]	; (8003d1c <HAL_ADC_ConfigChannel+0x294>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b7e:	d10b      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x110>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	e01d      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x14c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10b      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x136>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	e00a      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x14c>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d027      	beq.n	8003c2e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6919      	ldr	r1, [r3, #16]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bec:	f7ff f8b0 	bl	8002d50 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6919      	ldr	r1, [r3, #16]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	7e5b      	ldrb	r3, [r3, #25]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d102      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x17e>
 8003c00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c04:	e000      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x180>
 8003c06:	2300      	movs	r3, #0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f7ff f8da 	bl	8002dc2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6919      	ldr	r1, [r3, #16]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	7e1b      	ldrb	r3, [r3, #24]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d102      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x19c>
 8003c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c22:	e000      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x19e>
 8003c24:	2300      	movs	r3, #0
 8003c26:	461a      	mov	r2, r3
 8003c28:	f7ff f8b2 	bl	8002d90 <LL_ADC_SetDataRightShift>
 8003c2c:	e047      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	069b      	lsls	r3, r3, #26
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d107      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c50:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	069b      	lsls	r3, r3, #26
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d107      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c74:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	069b      	lsls	r3, r3, #26
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d107      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c98:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	069b      	lsls	r3, r3, #26
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d107      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cbc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff f9ca 	bl	800305c <LL_ADC_IsEnabled>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 820d 	bne.w	80040ea <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f7ff f91b 	bl	8002f18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4a0c      	ldr	r2, [pc, #48]	; (8003d18 <HAL_ADC_ConfigChannel+0x290>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	f040 8133 	bne.w	8003f54 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d110      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x298>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	0e9b      	lsrs	r3, r3, #26
 8003d04:	3301      	adds	r3, #1
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	2b09      	cmp	r3, #9
 8003d0c:	bf94      	ite	ls
 8003d0e:	2301      	movls	r3, #1
 8003d10:	2300      	movhi	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	e01e      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x2cc>
 8003d16:	bf00      	nop
 8003d18:	47ff0000 	.word	0x47ff0000
 8003d1c:	5c001000 	.word	0x5c001000
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003d38:	2320      	movs	r3, #32
 8003d3a:	e003      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d3e:	fab3 f383 	clz	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	2b09      	cmp	r3, #9
 8003d4c:	bf94      	ite	ls
 8003d4e:	2301      	movls	r3, #1
 8003d50:	2300      	movhi	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d079      	beq.n	8003e4c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d107      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x2ec>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	0e9b      	lsrs	r3, r3, #26
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	069b      	lsls	r3, r3, #26
 8003d6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d72:	e015      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x318>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d84:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e003      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	069b      	lsls	r3, r3, #26
 8003d9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x338>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	0e9b      	lsrs	r3, r3, #26
 8003db2:	3301      	adds	r3, #1
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	2101      	movs	r1, #1
 8003dba:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbe:	e017      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x368>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc8:	fa93 f3a3 	rbit	r3, r3
 8003dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003dd8:	2320      	movs	r3, #32
 8003dda:	e003      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	ea42 0103 	orr.w	r1, r2, r3
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x38e>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	0e9b      	lsrs	r3, r3, #26
 8003e06:	3301      	adds	r3, #1
 8003e08:	f003 021f 	and.w	r2, r3, #31
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4413      	add	r3, r2
 8003e12:	051b      	lsls	r3, r3, #20
 8003e14:	e018      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x3c0>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003e2e:	2320      	movs	r3, #32
 8003e30:	e003      	b.n	8003e3a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	fab3 f383 	clz	r3, r3
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	f003 021f 	and.w	r2, r3, #31
 8003e40:	4613      	mov	r3, r2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	4413      	add	r3, r2
 8003e46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	e07e      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x3e0>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	0e9b      	lsrs	r3, r3, #26
 8003e5e:	3301      	adds	r3, #1
 8003e60:	069b      	lsls	r3, r3, #26
 8003e62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e66:	e015      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x40c>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003e80:	2320      	movs	r3, #32
 8003e82:	e003      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	069b      	lsls	r3, r3, #26
 8003e90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d109      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x42c>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	0e9b      	lsrs	r3, r3, #26
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	2101      	movs	r1, #1
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	e017      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x45c>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fa93 f3a3 	rbit	r3, r3
 8003ec0:	61bb      	str	r3, [r7, #24]
  return result;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003ecc:	2320      	movs	r3, #32
 8003ece:	e003      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2101      	movs	r1, #1
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	ea42 0103 	orr.w	r1, r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10d      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x488>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	0e9b      	lsrs	r3, r3, #26
 8003efa:	3301      	adds	r3, #1
 8003efc:	f003 021f 	and.w	r2, r3, #31
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	3b1e      	subs	r3, #30
 8003f08:	051b      	lsls	r3, r3, #20
 8003f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	e01b      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x4c0>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	60fb      	str	r3, [r7, #12]
  return result;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003f28:	2320      	movs	r3, #32
 8003f2a:	e003      	b.n	8003f34 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	3301      	adds	r3, #1
 8003f36:	f003 021f 	and.w	r2, r3, #31
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	3b1e      	subs	r3, #30
 8003f42:	051b      	lsls	r3, r3, #20
 8003f44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	6892      	ldr	r2, [r2, #8]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f7fe ffb7 	bl	8002ec2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f280 80c6 	bge.w	80040ea <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a67      	ldr	r2, [pc, #412]	; (8004100 <HAL_ADC_ConfigChannel+0x678>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d004      	beq.n	8003f72 <HAL_ADC_ConfigChannel+0x4ea>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a65      	ldr	r2, [pc, #404]	; (8004104 <HAL_ADC_ConfigChannel+0x67c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x4ee>
 8003f72:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_ADC_ConfigChannel+0x680>)
 8003f74:	e000      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x4f0>
 8003f76:	4b65      	ldr	r3, [pc, #404]	; (800410c <HAL_ADC_ConfigChannel+0x684>)
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe fedb 	bl	8002d34 <LL_ADC_GetCommonPathInternalCh>
 8003f7e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a5e      	ldr	r2, [pc, #376]	; (8004100 <HAL_ADC_ConfigChannel+0x678>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_ADC_ConfigChannel+0x50c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a5d      	ldr	r2, [pc, #372]	; (8004104 <HAL_ADC_ConfigChannel+0x67c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d10e      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x52a>
 8003f94:	485a      	ldr	r0, [pc, #360]	; (8004100 <HAL_ADC_ConfigChannel+0x678>)
 8003f96:	f7ff f861 	bl	800305c <LL_ADC_IsEnabled>
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	4859      	ldr	r0, [pc, #356]	; (8004104 <HAL_ADC_ConfigChannel+0x67c>)
 8003f9e:	f7ff f85d 	bl	800305c <LL_ADC_IsEnabled>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4323      	orrs	r3, r4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	e008      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x53c>
 8003fb2:	4857      	ldr	r0, [pc, #348]	; (8004110 <HAL_ADC_ConfigChannel+0x688>)
 8003fb4:	f7ff f852 	bl	800305c <LL_ADC_IsEnabled>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf0c      	ite	eq
 8003fbe:	2301      	moveq	r3, #1
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d07d      	beq.n	80040c4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a51      	ldr	r2, [pc, #324]	; (8004114 <HAL_ADC_ConfigChannel+0x68c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d130      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x5ac>
 8003fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d12b      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a4b      	ldr	r2, [pc, #300]	; (8004110 <HAL_ADC_ConfigChannel+0x688>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	f040 8081 	bne.w	80040ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a44      	ldr	r2, [pc, #272]	; (8004100 <HAL_ADC_ConfigChannel+0x678>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_ADC_ConfigChannel+0x574>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a43      	ldr	r2, [pc, #268]	; (8004104 <HAL_ADC_ConfigChannel+0x67c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d101      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x578>
 8003ffc:	4a42      	ldr	r2, [pc, #264]	; (8004108 <HAL_ADC_ConfigChannel+0x680>)
 8003ffe:	e000      	b.n	8004002 <HAL_ADC_ConfigChannel+0x57a>
 8004000:	4a42      	ldr	r2, [pc, #264]	; (800410c <HAL_ADC_ConfigChannel+0x684>)
 8004002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004004:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f7fe fe7f 	bl	8002d0e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004010:	4b41      	ldr	r3, [pc, #260]	; (8004118 <HAL_ADC_ConfigChannel+0x690>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	4a41      	ldr	r2, [pc, #260]	; (800411c <HAL_ADC_ConfigChannel+0x694>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	3301      	adds	r3, #1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004024:	e002      	b.n	800402c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3b01      	subs	r3, #1
 800402a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f9      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004032:	e05a      	b.n	80040ea <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a39      	ldr	r2, [pc, #228]	; (8004120 <HAL_ADC_ConfigChannel+0x698>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d11e      	bne.n	800407c <HAL_ADC_ConfigChannel+0x5f4>
 800403e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d119      	bne.n	800407c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a30      	ldr	r2, [pc, #192]	; (8004110 <HAL_ADC_ConfigChannel+0x688>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d14b      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <HAL_ADC_ConfigChannel+0x678>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_ADC_ConfigChannel+0x5de>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a28      	ldr	r2, [pc, #160]	; (8004104 <HAL_ADC_ConfigChannel+0x67c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d101      	bne.n	800406a <HAL_ADC_ConfigChannel+0x5e2>
 8004066:	4a28      	ldr	r2, [pc, #160]	; (8004108 <HAL_ADC_ConfigChannel+0x680>)
 8004068:	e000      	b.n	800406c <HAL_ADC_ConfigChannel+0x5e4>
 800406a:	4a28      	ldr	r2, [pc, #160]	; (800410c <HAL_ADC_ConfigChannel+0x684>)
 800406c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f7fe fe4a 	bl	8002d0e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800407a:	e036      	b.n	80040ea <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a28      	ldr	r2, [pc, #160]	; (8004124 <HAL_ADC_ConfigChannel+0x69c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d131      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x662>
 8004086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d12c      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <HAL_ADC_ConfigChannel+0x688>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d127      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a18      	ldr	r2, [pc, #96]	; (8004100 <HAL_ADC_ConfigChannel+0x678>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_ADC_ConfigChannel+0x626>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a16      	ldr	r2, [pc, #88]	; (8004104 <HAL_ADC_ConfigChannel+0x67c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x62a>
 80040ae:	4a16      	ldr	r2, [pc, #88]	; (8004108 <HAL_ADC_ConfigChannel+0x680>)
 80040b0:	e000      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x62c>
 80040b2:	4a16      	ldr	r2, [pc, #88]	; (800410c <HAL_ADC_ConfigChannel+0x684>)
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040ba:	4619      	mov	r1, r3
 80040bc:	4610      	mov	r0, r2
 80040be:	f7fe fe26 	bl	8002d0e <LL_ADC_SetCommonPathInternalCh>
 80040c2:	e012      	b.n	80040ea <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040d6:	e008      	b.n	80040ea <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3784      	adds	r7, #132	; 0x84
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd90      	pop	{r4, r7, pc}
 80040fe:	bf00      	nop
 8004100:	40022000 	.word	0x40022000
 8004104:	40022100 	.word	0x40022100
 8004108:	40022300 	.word	0x40022300
 800410c:	58026300 	.word	0x58026300
 8004110:	58026000 	.word	0x58026000
 8004114:	cb840000 	.word	0xcb840000
 8004118:	24000004 	.word	0x24000004
 800411c:	053e2d63 	.word	0x053e2d63
 8004120:	c7520000 	.word	0xc7520000
 8004124:	cfb80000 	.word	0xcfb80000

08004128 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe ff91 	bl	800305c <LL_ADC_IsEnabled>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d16e      	bne.n	800421e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	4b38      	ldr	r3, [pc, #224]	; (8004228 <ADC_Enable+0x100>)
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00d      	beq.n	800416a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f043 0210 	orr.w	r2, r3, #16
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	f043 0201 	orr.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e05a      	b.n	8004220 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe ff60 	bl	8003034 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004174:	f7fe fd7c 	bl	8002c70 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2b      	ldr	r2, [pc, #172]	; (800422c <ADC_Enable+0x104>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <ADC_Enable+0x66>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a29      	ldr	r2, [pc, #164]	; (8004230 <ADC_Enable+0x108>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d101      	bne.n	8004192 <ADC_Enable+0x6a>
 800418e:	4b29      	ldr	r3, [pc, #164]	; (8004234 <ADC_Enable+0x10c>)
 8004190:	e000      	b.n	8004194 <ADC_Enable+0x6c>
 8004192:	4b29      	ldr	r3, [pc, #164]	; (8004238 <ADC_Enable+0x110>)
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fee3 	bl	8002f60 <LL_ADC_GetMultimode>
 800419a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a23      	ldr	r2, [pc, #140]	; (8004230 <ADC_Enable+0x108>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d002      	beq.n	80041ac <ADC_Enable+0x84>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	e000      	b.n	80041ae <ADC_Enable+0x86>
 80041ac:	4b1f      	ldr	r3, [pc, #124]	; (800422c <ADC_Enable+0x104>)
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d02c      	beq.n	8004210 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d130      	bne.n	800421e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041bc:	e028      	b.n	8004210 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe ff4a 	bl	800305c <LL_ADC_IsEnabled>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe ff2e 	bl	8003034 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041d8:	f7fe fd4a 	bl	8002c70 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d914      	bls.n	8004210 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d00d      	beq.n	8004210 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	f043 0210 	orr.w	r2, r3, #16
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e007      	b.n	8004220 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d1cf      	bne.n	80041be <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	8000003f 	.word	0x8000003f
 800422c:	40022000 	.word	0x40022000
 8004230:	40022100 	.word	0x40022100
 8004234:	40022300 	.word	0x40022300
 8004238:	58026300 	.word	0x58026300

0800423c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004252:	2b00      	cmp	r3, #0
 8004254:	d14b      	bne.n	80042ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d021      	beq.n	80042b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe fdbf 	bl	8002df8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d032      	beq.n	80042e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d12b      	bne.n	80042e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11f      	bne.n	80042e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f043 0201 	orr.w	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54
 80042b2:	e018      	b.n	80042e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d111      	bne.n	80042e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d105      	bne.n	80042e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fba6 	bl	8003a38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042ec:	e00e      	b.n	800430c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f7ff fbba 	bl	8003a74 <HAL_ADC_ErrorCallback>
}
 8004300:	e004      	b.n	800430c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fb92 	bl	8003a4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	f043 0204 	orr.w	r2, r3, #4
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff fb8c 	bl	8003a74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7a      	ldr	r2, [pc, #488]	; (800455c <ADC_ConfigureBoostMode+0x1f8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d004      	beq.n	8004380 <ADC_ConfigureBoostMode+0x1c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a79      	ldr	r2, [pc, #484]	; (8004560 <ADC_ConfigureBoostMode+0x1fc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d109      	bne.n	8004394 <ADC_ConfigureBoostMode+0x30>
 8004380:	4b78      	ldr	r3, [pc, #480]	; (8004564 <ADC_ConfigureBoostMode+0x200>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e008      	b.n	80043a6 <ADC_ConfigureBoostMode+0x42>
 8004394:	4b74      	ldr	r3, [pc, #464]	; (8004568 <ADC_ConfigureBoostMode+0x204>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf14      	ite	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	2300      	moveq	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01c      	beq.n	80043e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80043aa:	f004 fda7 	bl	8008efc <HAL_RCC_GetHCLKFreq>
 80043ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043b8:	d010      	beq.n	80043dc <ADC_ConfigureBoostMode+0x78>
 80043ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043be:	d873      	bhi.n	80044a8 <ADC_ConfigureBoostMode+0x144>
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c4:	d002      	beq.n	80043cc <ADC_ConfigureBoostMode+0x68>
 80043c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ca:	d16d      	bne.n	80044a8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	60fb      	str	r3, [r7, #12]
        break;
 80043da:	e068      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	089b      	lsrs	r3, r3, #2
 80043e0:	60fb      	str	r3, [r7, #12]
        break;
 80043e2:	e064      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80043e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	f005 ffec 	bl	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80043f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80043fa:	d051      	beq.n	80044a0 <ADC_ConfigureBoostMode+0x13c>
 80043fc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004400:	d854      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 8004402:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004406:	d047      	beq.n	8004498 <ADC_ConfigureBoostMode+0x134>
 8004408:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800440c:	d84e      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 800440e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004412:	d03d      	beq.n	8004490 <ADC_ConfigureBoostMode+0x12c>
 8004414:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004418:	d848      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 800441a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800441e:	d033      	beq.n	8004488 <ADC_ConfigureBoostMode+0x124>
 8004420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004424:	d842      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 8004426:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800442a:	d029      	beq.n	8004480 <ADC_ConfigureBoostMode+0x11c>
 800442c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004430:	d83c      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 8004432:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004436:	d01a      	beq.n	800446e <ADC_ConfigureBoostMode+0x10a>
 8004438:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800443c:	d836      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 800443e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004442:	d014      	beq.n	800446e <ADC_ConfigureBoostMode+0x10a>
 8004444:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004448:	d830      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 800444a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800444e:	d00e      	beq.n	800446e <ADC_ConfigureBoostMode+0x10a>
 8004450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004454:	d82a      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 8004456:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800445a:	d008      	beq.n	800446e <ADC_ConfigureBoostMode+0x10a>
 800445c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004460:	d824      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 8004462:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004466:	d002      	beq.n	800446e <ADC_ConfigureBoostMode+0x10a>
 8004468:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800446c:	d11e      	bne.n	80044ac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	0c9b      	lsrs	r3, r3, #18
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	60fb      	str	r3, [r7, #12]
        break;
 800447e:	e016      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	60fb      	str	r3, [r7, #12]
        break;
 8004486:	e012      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	60fb      	str	r3, [r7, #12]
        break;
 800448e:	e00e      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	099b      	lsrs	r3, r3, #6
 8004494:	60fb      	str	r3, [r7, #12]
        break;
 8004496:	e00a      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	09db      	lsrs	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
        break;
 800449e:	e006      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	60fb      	str	r3, [r7, #12]
        break;
 80044a6:	e002      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
        break;
 80044a8:	bf00      	nop
 80044aa:	e000      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80044ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80044ae:	f7fe fc0f 	bl	8002cd0 <HAL_GetREVID>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d815      	bhi.n	80044e8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a2b      	ldr	r2, [pc, #172]	; (800456c <ADC_ConfigureBoostMode+0x208>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d908      	bls.n	80044d6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80044d4:	e03e      	b.n	8004554 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e4:	609a      	str	r2, [r3, #8]
}
 80044e6:	e035      	b.n	8004554 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a1f      	ldr	r2, [pc, #124]	; (8004570 <ADC_ConfigureBoostMode+0x20c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d808      	bhi.n	8004508 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004504:	609a      	str	r2, [r3, #8]
}
 8004506:	e025      	b.n	8004554 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <ADC_ConfigureBoostMode+0x210>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d80a      	bhi.n	8004526 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004522:	609a      	str	r2, [r3, #8]
}
 8004524:	e016      	b.n	8004554 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <ADC_ConfigureBoostMode+0x214>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d80a      	bhi.n	8004544 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004540:	609a      	str	r2, [r3, #8]
}
 8004542:	e007      	b.n	8004554 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004552:	609a      	str	r2, [r3, #8]
}
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40022000 	.word	0x40022000
 8004560:	40022100 	.word	0x40022100
 8004564:	40022300 	.word	0x40022300
 8004568:	58026300 	.word	0x58026300
 800456c:	01312d00 	.word	0x01312d00
 8004570:	005f5e10 	.word	0x005f5e10
 8004574:	00bebc20 	.word	0x00bebc20
 8004578:	017d7840 	.word	0x017d7840

0800457c <LL_ADC_IsEnabled>:
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <LL_ADC_IsEnabled+0x18>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <LL_ADC_IsEnabled+0x1a>
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d101      	bne.n	80045ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b09f      	sub	sp, #124	; 0x7c
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004646:	2302      	movs	r3, #2
 8004648:	e0be      	b.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004652:	2300      	movs	r3, #0
 8004654:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004656:	2300      	movs	r3, #0
 8004658:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a5c      	ldr	r2, [pc, #368]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d102      	bne.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004664:	4b5b      	ldr	r3, [pc, #364]	; (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	e001      	b.n	800466e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10b      	bne.n	800468c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e09d      	b.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff87 	bl	80045a2 <LL_ADC_REG_IsConversionOngoing>
 8004694:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ff81 	bl	80045a2 <LL_ADC_REG_IsConversionOngoing>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d17f      	bne.n	80047a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80046a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d17c      	bne.n	80047a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a47      	ldr	r2, [pc, #284]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a46      	ldr	r2, [pc, #280]	; (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80046c0:	4b45      	ldr	r3, [pc, #276]	; (80047d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046c2:	e000      	b.n	80046c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80046c4:	4b45      	ldr	r3, [pc, #276]	; (80047dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046c6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d039      	beq.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80046d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	431a      	orrs	r2, r3
 80046de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a3a      	ldr	r2, [pc, #232]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a38      	ldr	r2, [pc, #224]	; (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10e      	bne.n	8004714 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80046f6:	4836      	ldr	r0, [pc, #216]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046f8:	f7ff ff40 	bl	800457c <LL_ADC_IsEnabled>
 80046fc:	4604      	mov	r4, r0
 80046fe:	4835      	ldr	r0, [pc, #212]	; (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004700:	f7ff ff3c 	bl	800457c <LL_ADC_IsEnabled>
 8004704:	4603      	mov	r3, r0
 8004706:	4323      	orrs	r3, r4
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e008      	b.n	8004726 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004714:	4832      	ldr	r0, [pc, #200]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004716:	f7ff ff31 	bl	800457c <LL_ADC_IsEnabled>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d047      	beq.n	80047ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800472a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	4b2d      	ldr	r3, [pc, #180]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004730:	4013      	ands	r3, r2
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	6811      	ldr	r1, [r2, #0]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	430a      	orrs	r2, r1
 800473c:	431a      	orrs	r2, r3
 800473e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004740:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004742:	e03a      	b.n	80047ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800474c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1e      	ldr	r2, [pc, #120]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d10e      	bne.n	8004782 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004764:	481a      	ldr	r0, [pc, #104]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004766:	f7ff ff09 	bl	800457c <LL_ADC_IsEnabled>
 800476a:	4604      	mov	r4, r0
 800476c:	4819      	ldr	r0, [pc, #100]	; (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800476e:	f7ff ff05 	bl	800457c <LL_ADC_IsEnabled>
 8004772:	4603      	mov	r3, r0
 8004774:	4323      	orrs	r3, r4
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	e008      	b.n	8004794 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004782:	4817      	ldr	r0, [pc, #92]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004784:	f7ff fefa 	bl	800457c <LL_ADC_IsEnabled>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d010      	beq.n	80047ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800479e:	4013      	ands	r3, r2
 80047a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047a2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047a4:	e009      	b.n	80047ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	f043 0220 	orr.w	r2, r3, #32
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80047b8:	e000      	b.n	80047bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047ba:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80047c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	377c      	adds	r7, #124	; 0x7c
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd90      	pop	{r4, r7, pc}
 80047d0:	40022000 	.word	0x40022000
 80047d4:	40022100 	.word	0x40022100
 80047d8:	40022300 	.word	0x40022300
 80047dc:	58026300 	.word	0x58026300
 80047e0:	58026000 	.word	0x58026000
 80047e4:	fffff0e0 	.word	0xfffff0e0

080047e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <__NVIC_SetPriorityGrouping+0x40>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004804:	4013      	ands	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <__NVIC_SetPriorityGrouping+0x44>)
 8004812:	4313      	orrs	r3, r2
 8004814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004816:	4a04      	ldr	r2, [pc, #16]	; (8004828 <__NVIC_SetPriorityGrouping+0x40>)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	60d3      	str	r3, [r2, #12]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000ed00 	.word	0xe000ed00
 800482c:	05fa0000 	.word	0x05fa0000

08004830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004834:	4b04      	ldr	r3, [pc, #16]	; (8004848 <__NVIC_GetPriorityGrouping+0x18>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	f003 0307 	and.w	r3, r3, #7
}
 800483e:	4618      	mov	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800485a:	2b00      	cmp	r3, #0
 800485c:	db0b      	blt.n	8004876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	f003 021f 	and.w	r2, r3, #31
 8004864:	4907      	ldr	r1, [pc, #28]	; (8004884 <__NVIC_EnableIRQ+0x38>)
 8004866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2001      	movs	r0, #1
 800486e:	fa00 f202 	lsl.w	r2, r0, r2
 8004872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000e100 	.word	0xe000e100

08004888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	6039      	str	r1, [r7, #0]
 8004892:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	db0a      	blt.n	80048b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	490c      	ldr	r1, [pc, #48]	; (80048d4 <__NVIC_SetPriority+0x4c>)
 80048a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048a6:	0112      	lsls	r2, r2, #4
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	440b      	add	r3, r1
 80048ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048b0:	e00a      	b.n	80048c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	4908      	ldr	r1, [pc, #32]	; (80048d8 <__NVIC_SetPriority+0x50>)
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	3b04      	subs	r3, #4
 80048c0:	0112      	lsls	r2, r2, #4
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	440b      	add	r3, r1
 80048c6:	761a      	strb	r2, [r3, #24]
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	e000e100 	.word	0xe000e100
 80048d8:	e000ed00 	.word	0xe000ed00

080048dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	; 0x24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f1c3 0307 	rsb	r3, r3, #7
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	bf28      	it	cs
 80048fa:	2304      	movcs	r3, #4
 80048fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3304      	adds	r3, #4
 8004902:	2b06      	cmp	r3, #6
 8004904:	d902      	bls.n	800490c <NVIC_EncodePriority+0x30>
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3b03      	subs	r3, #3
 800490a:	e000      	b.n	800490e <NVIC_EncodePriority+0x32>
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43da      	mvns	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	401a      	ands	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004924:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	43d9      	mvns	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004934:	4313      	orrs	r3, r2
         );
}
 8004936:	4618      	mov	r0, r3
 8004938:	3724      	adds	r7, #36	; 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3b01      	subs	r3, #1
 8004950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004954:	d301      	bcc.n	800495a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004956:	2301      	movs	r3, #1
 8004958:	e00f      	b.n	800497a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <SysTick_Config+0x40>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004962:	210f      	movs	r1, #15
 8004964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004968:	f7ff ff8e 	bl	8004888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <SysTick_Config+0x40>)
 800496e:	2200      	movs	r2, #0
 8004970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004972:	4b04      	ldr	r3, [pc, #16]	; (8004984 <SysTick_Config+0x40>)
 8004974:	2207      	movs	r2, #7
 8004976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	e000e010 	.word	0xe000e010

08004988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff29 	bl	80047e8 <__NVIC_SetPriorityGrouping>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4603      	mov	r3, r0
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049ac:	f7ff ff40 	bl	8004830 <__NVIC_GetPriorityGrouping>
 80049b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f7ff ff90 	bl	80048dc <NVIC_EncodePriority>
 80049bc:	4602      	mov	r2, r0
 80049be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ff5f 	bl	8004888 <__NVIC_SetPriority>
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4603      	mov	r3, r0
 80049da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff33 	bl	800484c <__NVIC_EnableIRQ>
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff ffa4 	bl	8004944 <SysTick_Config>
 80049fc:	4603      	mov	r3, r0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a10:	f7fe f92e 	bl	8002c70 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e316      	b.n	800504e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a66      	ldr	r2, [pc, #408]	; (8004bc0 <HAL_DMA_Init+0x1b8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d04a      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a65      	ldr	r2, [pc, #404]	; (8004bc4 <HAL_DMA_Init+0x1bc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d045      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a63      	ldr	r2, [pc, #396]	; (8004bc8 <HAL_DMA_Init+0x1c0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d040      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a62      	ldr	r2, [pc, #392]	; (8004bcc <HAL_DMA_Init+0x1c4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d03b      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a60      	ldr	r2, [pc, #384]	; (8004bd0 <HAL_DMA_Init+0x1c8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d036      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a5f      	ldr	r2, [pc, #380]	; (8004bd4 <HAL_DMA_Init+0x1cc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d031      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a5d      	ldr	r2, [pc, #372]	; (8004bd8 <HAL_DMA_Init+0x1d0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d02c      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a5c      	ldr	r2, [pc, #368]	; (8004bdc <HAL_DMA_Init+0x1d4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d027      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a5a      	ldr	r2, [pc, #360]	; (8004be0 <HAL_DMA_Init+0x1d8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d022      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a59      	ldr	r2, [pc, #356]	; (8004be4 <HAL_DMA_Init+0x1dc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d01d      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a57      	ldr	r2, [pc, #348]	; (8004be8 <HAL_DMA_Init+0x1e0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d018      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a56      	ldr	r2, [pc, #344]	; (8004bec <HAL_DMA_Init+0x1e4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a54      	ldr	r2, [pc, #336]	; (8004bf0 <HAL_DMA_Init+0x1e8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a53      	ldr	r2, [pc, #332]	; (8004bf4 <HAL_DMA_Init+0x1ec>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a51      	ldr	r2, [pc, #324]	; (8004bf8 <HAL_DMA_Init+0x1f0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_DMA_Init+0xb8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a50      	ldr	r2, [pc, #320]	; (8004bfc <HAL_DMA_Init+0x1f4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_DMA_Init+0xbc>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_DMA_Init+0xbe>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 813b 	beq.w	8004d42 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a37      	ldr	r2, [pc, #220]	; (8004bc0 <HAL_DMA_Init+0x1b8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d04a      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a36      	ldr	r2, [pc, #216]	; (8004bc4 <HAL_DMA_Init+0x1bc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d045      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a34      	ldr	r2, [pc, #208]	; (8004bc8 <HAL_DMA_Init+0x1c0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d040      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a33      	ldr	r2, [pc, #204]	; (8004bcc <HAL_DMA_Init+0x1c4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d03b      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a31      	ldr	r2, [pc, #196]	; (8004bd0 <HAL_DMA_Init+0x1c8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d036      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a30      	ldr	r2, [pc, #192]	; (8004bd4 <HAL_DMA_Init+0x1cc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d031      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a2e      	ldr	r2, [pc, #184]	; (8004bd8 <HAL_DMA_Init+0x1d0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d02c      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2d      	ldr	r2, [pc, #180]	; (8004bdc <HAL_DMA_Init+0x1d4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d027      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2b      	ldr	r2, [pc, #172]	; (8004be0 <HAL_DMA_Init+0x1d8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d022      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2a      	ldr	r2, [pc, #168]	; (8004be4 <HAL_DMA_Init+0x1dc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d01d      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a28      	ldr	r2, [pc, #160]	; (8004be8 <HAL_DMA_Init+0x1e0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d018      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a27      	ldr	r2, [pc, #156]	; (8004bec <HAL_DMA_Init+0x1e4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a25      	ldr	r2, [pc, #148]	; (8004bf0 <HAL_DMA_Init+0x1e8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00e      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a24      	ldr	r2, [pc, #144]	; (8004bf4 <HAL_DMA_Init+0x1ec>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a22      	ldr	r2, [pc, #136]	; (8004bf8 <HAL_DMA_Init+0x1f0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_DMA_Init+0x174>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <HAL_DMA_Init+0x1f4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <HAL_DMA_Init+0x186>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	e007      	b.n	8004b9e <HAL_DMA_Init+0x196>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b9e:	e02f      	b.n	8004c00 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ba0:	f7fe f866 	bl	8002c70 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	d928      	bls.n	8004c00 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e246      	b.n	800504e <HAL_DMA_Init+0x646>
 8004bc0:	40020010 	.word	0x40020010
 8004bc4:	40020028 	.word	0x40020028
 8004bc8:	40020040 	.word	0x40020040
 8004bcc:	40020058 	.word	0x40020058
 8004bd0:	40020070 	.word	0x40020070
 8004bd4:	40020088 	.word	0x40020088
 8004bd8:	400200a0 	.word	0x400200a0
 8004bdc:	400200b8 	.word	0x400200b8
 8004be0:	40020410 	.word	0x40020410
 8004be4:	40020428 	.word	0x40020428
 8004be8:	40020440 	.word	0x40020440
 8004bec:	40020458 	.word	0x40020458
 8004bf0:	40020470 	.word	0x40020470
 8004bf4:	40020488 	.word	0x40020488
 8004bf8:	400204a0 	.word	0x400204a0
 8004bfc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1c8      	bne.n	8004ba0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4b83      	ldr	r3, [pc, #524]	; (8004e28 <HAL_DMA_Init+0x420>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c26:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c32:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c3e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d107      	bne.n	8004c64 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004c64:	4b71      	ldr	r3, [pc, #452]	; (8004e2c <HAL_DMA_Init+0x424>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4b71      	ldr	r3, [pc, #452]	; (8004e30 <HAL_DMA_Init+0x428>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c70:	d328      	bcc.n	8004cc4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b28      	cmp	r3, #40	; 0x28
 8004c78:	d903      	bls.n	8004c82 <HAL_DMA_Init+0x27a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c80:	d917      	bls.n	8004cb2 <HAL_DMA_Init+0x2aa>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b3e      	cmp	r3, #62	; 0x3e
 8004c88:	d903      	bls.n	8004c92 <HAL_DMA_Init+0x28a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b42      	cmp	r3, #66	; 0x42
 8004c90:	d90f      	bls.n	8004cb2 <HAL_DMA_Init+0x2aa>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b46      	cmp	r3, #70	; 0x46
 8004c98:	d903      	bls.n	8004ca2 <HAL_DMA_Init+0x29a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b48      	cmp	r3, #72	; 0x48
 8004ca0:	d907      	bls.n	8004cb2 <HAL_DMA_Init+0x2aa>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b4e      	cmp	r3, #78	; 0x4e
 8004ca8:	d905      	bls.n	8004cb6 <HAL_DMA_Init+0x2ae>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b52      	cmp	r3, #82	; 0x52
 8004cb0:	d801      	bhi.n	8004cb6 <HAL_DMA_Init+0x2ae>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <HAL_DMA_Init+0x2b0>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f023 0307 	bic.w	r3, r3, #7
 8004cda:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d117      	bne.n	8004d1e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00e      	beq.n	8004d1e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f002 fb33 	bl	800736c <DMA_CheckFifoParam>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2240      	movs	r2, #64	; 0x40
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e197      	b.n	800504e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f002 fa6e 	bl	8007208 <DMA_CalcBaseAndBitshift>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	223f      	movs	r2, #63	; 0x3f
 8004d3a:	409a      	lsls	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	e0cd      	b.n	8004ede <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a3b      	ldr	r2, [pc, #236]	; (8004e34 <HAL_DMA_Init+0x42c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d022      	beq.n	8004d92 <HAL_DMA_Init+0x38a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a39      	ldr	r2, [pc, #228]	; (8004e38 <HAL_DMA_Init+0x430>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01d      	beq.n	8004d92 <HAL_DMA_Init+0x38a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a38      	ldr	r2, [pc, #224]	; (8004e3c <HAL_DMA_Init+0x434>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d018      	beq.n	8004d92 <HAL_DMA_Init+0x38a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a36      	ldr	r2, [pc, #216]	; (8004e40 <HAL_DMA_Init+0x438>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d013      	beq.n	8004d92 <HAL_DMA_Init+0x38a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a35      	ldr	r2, [pc, #212]	; (8004e44 <HAL_DMA_Init+0x43c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00e      	beq.n	8004d92 <HAL_DMA_Init+0x38a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a33      	ldr	r2, [pc, #204]	; (8004e48 <HAL_DMA_Init+0x440>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d009      	beq.n	8004d92 <HAL_DMA_Init+0x38a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a32      	ldr	r2, [pc, #200]	; (8004e4c <HAL_DMA_Init+0x444>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d004      	beq.n	8004d92 <HAL_DMA_Init+0x38a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a30      	ldr	r2, [pc, #192]	; (8004e50 <HAL_DMA_Init+0x448>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <HAL_DMA_Init+0x38e>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <HAL_DMA_Init+0x390>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8097 	beq.w	8004ecc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <HAL_DMA_Init+0x42c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d021      	beq.n	8004dec <HAL_DMA_Init+0x3e4>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a22      	ldr	r2, [pc, #136]	; (8004e38 <HAL_DMA_Init+0x430>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01c      	beq.n	8004dec <HAL_DMA_Init+0x3e4>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <HAL_DMA_Init+0x434>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d017      	beq.n	8004dec <HAL_DMA_Init+0x3e4>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <HAL_DMA_Init+0x438>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d012      	beq.n	8004dec <HAL_DMA_Init+0x3e4>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <HAL_DMA_Init+0x43c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00d      	beq.n	8004dec <HAL_DMA_Init+0x3e4>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1c      	ldr	r2, [pc, #112]	; (8004e48 <HAL_DMA_Init+0x440>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d008      	beq.n	8004dec <HAL_DMA_Init+0x3e4>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1b      	ldr	r2, [pc, #108]	; (8004e4c <HAL_DMA_Init+0x444>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <HAL_DMA_Init+0x3e4>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a19      	ldr	r2, [pc, #100]	; (8004e50 <HAL_DMA_Init+0x448>)
 8004dea:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <HAL_DMA_Init+0x44c>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d021      	beq.n	8004e58 <HAL_DMA_Init+0x450>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b80      	cmp	r3, #128	; 0x80
 8004e1a:	d102      	bne.n	8004e22 <HAL_DMA_Init+0x41a>
 8004e1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e20:	e01b      	b.n	8004e5a <HAL_DMA_Init+0x452>
 8004e22:	2300      	movs	r3, #0
 8004e24:	e019      	b.n	8004e5a <HAL_DMA_Init+0x452>
 8004e26:	bf00      	nop
 8004e28:	fe10803f 	.word	0xfe10803f
 8004e2c:	5c001000 	.word	0x5c001000
 8004e30:	ffff0000 	.word	0xffff0000
 8004e34:	58025408 	.word	0x58025408
 8004e38:	5802541c 	.word	0x5802541c
 8004e3c:	58025430 	.word	0x58025430
 8004e40:	58025444 	.word	0x58025444
 8004e44:	58025458 	.word	0x58025458
 8004e48:	5802546c 	.word	0x5802546c
 8004e4c:	58025480 	.word	0x58025480
 8004e50:	58025494 	.word	0x58025494
 8004e54:	fffe000f 	.word	0xfffe000f
 8004e58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68d2      	ldr	r2, [r2, #12]
 8004e5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4b6e      	ldr	r3, [pc, #440]	; (8005058 <HAL_DMA_Init+0x650>)
 8004ea0:	4413      	add	r3, r2
 8004ea2:	4a6e      	ldr	r2, [pc, #440]	; (800505c <HAL_DMA_Init+0x654>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	091b      	lsrs	r3, r3, #4
 8004eaa:	009a      	lsls	r2, r3, #2
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f002 f9a9 	bl	8007208 <DMA_CalcBaseAndBitshift>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	409a      	lsls	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	e008      	b.n	8004ede <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2240      	movs	r2, #64	; 0x40
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e0b7      	b.n	800504e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a5f      	ldr	r2, [pc, #380]	; (8005060 <HAL_DMA_Init+0x658>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d072      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a5d      	ldr	r2, [pc, #372]	; (8005064 <HAL_DMA_Init+0x65c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d06d      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a5c      	ldr	r2, [pc, #368]	; (8005068 <HAL_DMA_Init+0x660>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d068      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a5a      	ldr	r2, [pc, #360]	; (800506c <HAL_DMA_Init+0x664>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d063      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a59      	ldr	r2, [pc, #356]	; (8005070 <HAL_DMA_Init+0x668>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d05e      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a57      	ldr	r2, [pc, #348]	; (8005074 <HAL_DMA_Init+0x66c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d059      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a56      	ldr	r2, [pc, #344]	; (8005078 <HAL_DMA_Init+0x670>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d054      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a54      	ldr	r2, [pc, #336]	; (800507c <HAL_DMA_Init+0x674>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d04f      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a53      	ldr	r2, [pc, #332]	; (8005080 <HAL_DMA_Init+0x678>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d04a      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a51      	ldr	r2, [pc, #324]	; (8005084 <HAL_DMA_Init+0x67c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d045      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a50      	ldr	r2, [pc, #320]	; (8005088 <HAL_DMA_Init+0x680>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d040      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a4e      	ldr	r2, [pc, #312]	; (800508c <HAL_DMA_Init+0x684>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d03b      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a4d      	ldr	r2, [pc, #308]	; (8005090 <HAL_DMA_Init+0x688>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d036      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a4b      	ldr	r2, [pc, #300]	; (8005094 <HAL_DMA_Init+0x68c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d031      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a4a      	ldr	r2, [pc, #296]	; (8005098 <HAL_DMA_Init+0x690>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d02c      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a48      	ldr	r2, [pc, #288]	; (800509c <HAL_DMA_Init+0x694>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d027      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a47      	ldr	r2, [pc, #284]	; (80050a0 <HAL_DMA_Init+0x698>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d022      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a45      	ldr	r2, [pc, #276]	; (80050a4 <HAL_DMA_Init+0x69c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01d      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a44      	ldr	r2, [pc, #272]	; (80050a8 <HAL_DMA_Init+0x6a0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d018      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a42      	ldr	r2, [pc, #264]	; (80050ac <HAL_DMA_Init+0x6a4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d013      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a41      	ldr	r2, [pc, #260]	; (80050b0 <HAL_DMA_Init+0x6a8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00e      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a3f      	ldr	r2, [pc, #252]	; (80050b4 <HAL_DMA_Init+0x6ac>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d009      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a3e      	ldr	r2, [pc, #248]	; (80050b8 <HAL_DMA_Init+0x6b0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d004      	beq.n	8004fce <HAL_DMA_Init+0x5c6>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a3c      	ldr	r2, [pc, #240]	; (80050bc <HAL_DMA_Init+0x6b4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_DMA_Init+0x5ca>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <HAL_DMA_Init+0x5cc>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d032      	beq.n	800503e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f002 fa43 	bl	8007464 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b80      	cmp	r3, #128	; 0x80
 8004fe4:	d102      	bne.n	8004fec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005000:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d010      	beq.n	800502c <HAL_DMA_Init+0x624>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b08      	cmp	r3, #8
 8005010:	d80c      	bhi.n	800502c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f002 fac0 	bl	8007598 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	e008      	b.n	800503e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	a7fdabf8 	.word	0xa7fdabf8
 800505c:	cccccccd 	.word	0xcccccccd
 8005060:	40020010 	.word	0x40020010
 8005064:	40020028 	.word	0x40020028
 8005068:	40020040 	.word	0x40020040
 800506c:	40020058 	.word	0x40020058
 8005070:	40020070 	.word	0x40020070
 8005074:	40020088 	.word	0x40020088
 8005078:	400200a0 	.word	0x400200a0
 800507c:	400200b8 	.word	0x400200b8
 8005080:	40020410 	.word	0x40020410
 8005084:	40020428 	.word	0x40020428
 8005088:	40020440 	.word	0x40020440
 800508c:	40020458 	.word	0x40020458
 8005090:	40020470 	.word	0x40020470
 8005094:	40020488 	.word	0x40020488
 8005098:	400204a0 	.word	0x400204a0
 800509c:	400204b8 	.word	0x400204b8
 80050a0:	58025408 	.word	0x58025408
 80050a4:	5802541c 	.word	0x5802541c
 80050a8:	58025430 	.word	0x58025430
 80050ac:	58025444 	.word	0x58025444
 80050b0:	58025458 	.word	0x58025458
 80050b4:	5802546c 	.word	0x5802546c
 80050b8:	58025480 	.word	0x58025480
 80050bc:	58025494 	.word	0x58025494

080050c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e226      	b.n	800552a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_DMA_Start_IT+0x2a>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e21f      	b.n	800552a <HAL_DMA_Start_IT+0x46a>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	f040 820a 	bne.w	8005514 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a68      	ldr	r2, [pc, #416]	; (80052b4 <HAL_DMA_Start_IT+0x1f4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d04a      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a66      	ldr	r2, [pc, #408]	; (80052b8 <HAL_DMA_Start_IT+0x1f8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d045      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a65      	ldr	r2, [pc, #404]	; (80052bc <HAL_DMA_Start_IT+0x1fc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d040      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a63      	ldr	r2, [pc, #396]	; (80052c0 <HAL_DMA_Start_IT+0x200>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d03b      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a62      	ldr	r2, [pc, #392]	; (80052c4 <HAL_DMA_Start_IT+0x204>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d036      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a60      	ldr	r2, [pc, #384]	; (80052c8 <HAL_DMA_Start_IT+0x208>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d031      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a5f      	ldr	r2, [pc, #380]	; (80052cc <HAL_DMA_Start_IT+0x20c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d02c      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a5d      	ldr	r2, [pc, #372]	; (80052d0 <HAL_DMA_Start_IT+0x210>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d027      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a5c      	ldr	r2, [pc, #368]	; (80052d4 <HAL_DMA_Start_IT+0x214>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d022      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a5a      	ldr	r2, [pc, #360]	; (80052d8 <HAL_DMA_Start_IT+0x218>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01d      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a59      	ldr	r2, [pc, #356]	; (80052dc <HAL_DMA_Start_IT+0x21c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d018      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a57      	ldr	r2, [pc, #348]	; (80052e0 <HAL_DMA_Start_IT+0x220>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d013      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a56      	ldr	r2, [pc, #344]	; (80052e4 <HAL_DMA_Start_IT+0x224>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00e      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a54      	ldr	r2, [pc, #336]	; (80052e8 <HAL_DMA_Start_IT+0x228>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d009      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a53      	ldr	r2, [pc, #332]	; (80052ec <HAL_DMA_Start_IT+0x22c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d004      	beq.n	80051ae <HAL_DMA_Start_IT+0xee>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a51      	ldr	r2, [pc, #324]	; (80052f0 <HAL_DMA_Start_IT+0x230>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d108      	bne.n	80051c0 <HAL_DMA_Start_IT+0x100>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e007      	b.n	80051d0 <HAL_DMA_Start_IT+0x110>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f001 fe6a 	bl	8006eb0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a34      	ldr	r2, [pc, #208]	; (80052b4 <HAL_DMA_Start_IT+0x1f4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d04a      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a33      	ldr	r2, [pc, #204]	; (80052b8 <HAL_DMA_Start_IT+0x1f8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d045      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a31      	ldr	r2, [pc, #196]	; (80052bc <HAL_DMA_Start_IT+0x1fc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d040      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a30      	ldr	r2, [pc, #192]	; (80052c0 <HAL_DMA_Start_IT+0x200>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d03b      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2e      	ldr	r2, [pc, #184]	; (80052c4 <HAL_DMA_Start_IT+0x204>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d036      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2d      	ldr	r2, [pc, #180]	; (80052c8 <HAL_DMA_Start_IT+0x208>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d031      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2b      	ldr	r2, [pc, #172]	; (80052cc <HAL_DMA_Start_IT+0x20c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02c      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2a      	ldr	r2, [pc, #168]	; (80052d0 <HAL_DMA_Start_IT+0x210>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d027      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a28      	ldr	r2, [pc, #160]	; (80052d4 <HAL_DMA_Start_IT+0x214>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d022      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <HAL_DMA_Start_IT+0x218>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d01d      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a25      	ldr	r2, [pc, #148]	; (80052dc <HAL_DMA_Start_IT+0x21c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d018      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a24      	ldr	r2, [pc, #144]	; (80052e0 <HAL_DMA_Start_IT+0x220>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a22      	ldr	r2, [pc, #136]	; (80052e4 <HAL_DMA_Start_IT+0x224>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00e      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a21      	ldr	r2, [pc, #132]	; (80052e8 <HAL_DMA_Start_IT+0x228>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1f      	ldr	r2, [pc, #124]	; (80052ec <HAL_DMA_Start_IT+0x22c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_DMA_Start_IT+0x1bc>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1e      	ldr	r2, [pc, #120]	; (80052f0 <HAL_DMA_Start_IT+0x230>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d101      	bne.n	8005280 <HAL_DMA_Start_IT+0x1c0>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <HAL_DMA_Start_IT+0x1c2>
 8005280:	2300      	movs	r3, #0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d036      	beq.n	80052f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f023 021e 	bic.w	r2, r3, #30
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0216 	orr.w	r2, r2, #22
 8005298:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d03e      	beq.n	8005320 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0208 	orr.w	r2, r2, #8
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e035      	b.n	8005320 <HAL_DMA_Start_IT+0x260>
 80052b4:	40020010 	.word	0x40020010
 80052b8:	40020028 	.word	0x40020028
 80052bc:	40020040 	.word	0x40020040
 80052c0:	40020058 	.word	0x40020058
 80052c4:	40020070 	.word	0x40020070
 80052c8:	40020088 	.word	0x40020088
 80052cc:	400200a0 	.word	0x400200a0
 80052d0:	400200b8 	.word	0x400200b8
 80052d4:	40020410 	.word	0x40020410
 80052d8:	40020428 	.word	0x40020428
 80052dc:	40020440 	.word	0x40020440
 80052e0:	40020458 	.word	0x40020458
 80052e4:	40020470 	.word	0x40020470
 80052e8:	40020488 	.word	0x40020488
 80052ec:	400204a0 	.word	0x400204a0
 80052f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 020e 	bic.w	r2, r3, #14
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 020a 	orr.w	r2, r2, #10
 8005306:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d007      	beq.n	8005320 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0204 	orr.w	r2, r2, #4
 800531e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a83      	ldr	r2, [pc, #524]	; (8005534 <HAL_DMA_Start_IT+0x474>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d072      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a82      	ldr	r2, [pc, #520]	; (8005538 <HAL_DMA_Start_IT+0x478>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d06d      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a80      	ldr	r2, [pc, #512]	; (800553c <HAL_DMA_Start_IT+0x47c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d068      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a7f      	ldr	r2, [pc, #508]	; (8005540 <HAL_DMA_Start_IT+0x480>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d063      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a7d      	ldr	r2, [pc, #500]	; (8005544 <HAL_DMA_Start_IT+0x484>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d05e      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a7c      	ldr	r2, [pc, #496]	; (8005548 <HAL_DMA_Start_IT+0x488>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d059      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a7a      	ldr	r2, [pc, #488]	; (800554c <HAL_DMA_Start_IT+0x48c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d054      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a79      	ldr	r2, [pc, #484]	; (8005550 <HAL_DMA_Start_IT+0x490>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d04f      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a77      	ldr	r2, [pc, #476]	; (8005554 <HAL_DMA_Start_IT+0x494>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d04a      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a76      	ldr	r2, [pc, #472]	; (8005558 <HAL_DMA_Start_IT+0x498>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d045      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a74      	ldr	r2, [pc, #464]	; (800555c <HAL_DMA_Start_IT+0x49c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d040      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a73      	ldr	r2, [pc, #460]	; (8005560 <HAL_DMA_Start_IT+0x4a0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d03b      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a71      	ldr	r2, [pc, #452]	; (8005564 <HAL_DMA_Start_IT+0x4a4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d036      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a70      	ldr	r2, [pc, #448]	; (8005568 <HAL_DMA_Start_IT+0x4a8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d031      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a6e      	ldr	r2, [pc, #440]	; (800556c <HAL_DMA_Start_IT+0x4ac>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d02c      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a6d      	ldr	r2, [pc, #436]	; (8005570 <HAL_DMA_Start_IT+0x4b0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d027      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a6b      	ldr	r2, [pc, #428]	; (8005574 <HAL_DMA_Start_IT+0x4b4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d022      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a6a      	ldr	r2, [pc, #424]	; (8005578 <HAL_DMA_Start_IT+0x4b8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d01d      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a68      	ldr	r2, [pc, #416]	; (800557c <HAL_DMA_Start_IT+0x4bc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d018      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a67      	ldr	r2, [pc, #412]	; (8005580 <HAL_DMA_Start_IT+0x4c0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a65      	ldr	r2, [pc, #404]	; (8005584 <HAL_DMA_Start_IT+0x4c4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00e      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a64      	ldr	r2, [pc, #400]	; (8005588 <HAL_DMA_Start_IT+0x4c8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d009      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a62      	ldr	r2, [pc, #392]	; (800558c <HAL_DMA_Start_IT+0x4cc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d004      	beq.n	8005410 <HAL_DMA_Start_IT+0x350>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a61      	ldr	r2, [pc, #388]	; (8005590 <HAL_DMA_Start_IT+0x4d0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d101      	bne.n	8005414 <HAL_DMA_Start_IT+0x354>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_DMA_Start_IT+0x356>
 8005414:	2300      	movs	r3, #0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01a      	beq.n	8005450 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005436:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800544e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a37      	ldr	r2, [pc, #220]	; (8005534 <HAL_DMA_Start_IT+0x474>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d04a      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a36      	ldr	r2, [pc, #216]	; (8005538 <HAL_DMA_Start_IT+0x478>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d045      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a34      	ldr	r2, [pc, #208]	; (800553c <HAL_DMA_Start_IT+0x47c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d040      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a33      	ldr	r2, [pc, #204]	; (8005540 <HAL_DMA_Start_IT+0x480>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d03b      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a31      	ldr	r2, [pc, #196]	; (8005544 <HAL_DMA_Start_IT+0x484>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d036      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a30      	ldr	r2, [pc, #192]	; (8005548 <HAL_DMA_Start_IT+0x488>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d031      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a2e      	ldr	r2, [pc, #184]	; (800554c <HAL_DMA_Start_IT+0x48c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d02c      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2d      	ldr	r2, [pc, #180]	; (8005550 <HAL_DMA_Start_IT+0x490>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d027      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a2b      	ldr	r2, [pc, #172]	; (8005554 <HAL_DMA_Start_IT+0x494>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d022      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <HAL_DMA_Start_IT+0x498>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d01d      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a28      	ldr	r2, [pc, #160]	; (800555c <HAL_DMA_Start_IT+0x49c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d018      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a27      	ldr	r2, [pc, #156]	; (8005560 <HAL_DMA_Start_IT+0x4a0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a25      	ldr	r2, [pc, #148]	; (8005564 <HAL_DMA_Start_IT+0x4a4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a24      	ldr	r2, [pc, #144]	; (8005568 <HAL_DMA_Start_IT+0x4a8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d009      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a22      	ldr	r2, [pc, #136]	; (800556c <HAL_DMA_Start_IT+0x4ac>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_DMA_Start_IT+0x430>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a21      	ldr	r2, [pc, #132]	; (8005570 <HAL_DMA_Start_IT+0x4b0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d108      	bne.n	8005502 <HAL_DMA_Start_IT+0x442>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	e012      	b.n	8005528 <HAL_DMA_Start_IT+0x468>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e009      	b.n	8005528 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800551a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005528:	7dfb      	ldrb	r3, [r7, #23]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40020010 	.word	0x40020010
 8005538:	40020028 	.word	0x40020028
 800553c:	40020040 	.word	0x40020040
 8005540:	40020058 	.word	0x40020058
 8005544:	40020070 	.word	0x40020070
 8005548:	40020088 	.word	0x40020088
 800554c:	400200a0 	.word	0x400200a0
 8005550:	400200b8 	.word	0x400200b8
 8005554:	40020410 	.word	0x40020410
 8005558:	40020428 	.word	0x40020428
 800555c:	40020440 	.word	0x40020440
 8005560:	40020458 	.word	0x40020458
 8005564:	40020470 	.word	0x40020470
 8005568:	40020488 	.word	0x40020488
 800556c:	400204a0 	.word	0x400204a0
 8005570:	400204b8 	.word	0x400204b8
 8005574:	58025408 	.word	0x58025408
 8005578:	5802541c 	.word	0x5802541c
 800557c:	58025430 	.word	0x58025430
 8005580:	58025444 	.word	0x58025444
 8005584:	58025458 	.word	0x58025458
 8005588:	5802546c 	.word	0x5802546c
 800558c:	58025480 	.word	0x58025480
 8005590:	58025494 	.word	0x58025494

08005594 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800559c:	f7fd fb68 	bl	8002c70 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e2dc      	b.n	8005b66 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d008      	beq.n	80055ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2280      	movs	r2, #128	; 0x80
 80055bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e2cd      	b.n	8005b66 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a76      	ldr	r2, [pc, #472]	; (80057a8 <HAL_DMA_Abort+0x214>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d04a      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a74      	ldr	r2, [pc, #464]	; (80057ac <HAL_DMA_Abort+0x218>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d045      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a73      	ldr	r2, [pc, #460]	; (80057b0 <HAL_DMA_Abort+0x21c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d040      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a71      	ldr	r2, [pc, #452]	; (80057b4 <HAL_DMA_Abort+0x220>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d03b      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a70      	ldr	r2, [pc, #448]	; (80057b8 <HAL_DMA_Abort+0x224>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d036      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a6e      	ldr	r2, [pc, #440]	; (80057bc <HAL_DMA_Abort+0x228>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d031      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a6d      	ldr	r2, [pc, #436]	; (80057c0 <HAL_DMA_Abort+0x22c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d02c      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a6b      	ldr	r2, [pc, #428]	; (80057c4 <HAL_DMA_Abort+0x230>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d027      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a6a      	ldr	r2, [pc, #424]	; (80057c8 <HAL_DMA_Abort+0x234>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d022      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a68      	ldr	r2, [pc, #416]	; (80057cc <HAL_DMA_Abort+0x238>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d01d      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a67      	ldr	r2, [pc, #412]	; (80057d0 <HAL_DMA_Abort+0x23c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d018      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a65      	ldr	r2, [pc, #404]	; (80057d4 <HAL_DMA_Abort+0x240>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d013      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a64      	ldr	r2, [pc, #400]	; (80057d8 <HAL_DMA_Abort+0x244>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00e      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a62      	ldr	r2, [pc, #392]	; (80057dc <HAL_DMA_Abort+0x248>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d009      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a61      	ldr	r2, [pc, #388]	; (80057e0 <HAL_DMA_Abort+0x24c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d004      	beq.n	800566a <HAL_DMA_Abort+0xd6>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a5f      	ldr	r2, [pc, #380]	; (80057e4 <HAL_DMA_Abort+0x250>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d101      	bne.n	800566e <HAL_DMA_Abort+0xda>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <HAL_DMA_Abort+0xdc>
 800566e:	2300      	movs	r3, #0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d013      	beq.n	800569c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 021e 	bic.w	r2, r2, #30
 8005682:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005692:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e00a      	b.n	80056b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 020e 	bic.w	r2, r2, #14
 80056aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a3c      	ldr	r2, [pc, #240]	; (80057a8 <HAL_DMA_Abort+0x214>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d072      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a3a      	ldr	r2, [pc, #232]	; (80057ac <HAL_DMA_Abort+0x218>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d06d      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a39      	ldr	r2, [pc, #228]	; (80057b0 <HAL_DMA_Abort+0x21c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d068      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a37      	ldr	r2, [pc, #220]	; (80057b4 <HAL_DMA_Abort+0x220>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d063      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a36      	ldr	r2, [pc, #216]	; (80057b8 <HAL_DMA_Abort+0x224>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d05e      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a34      	ldr	r2, [pc, #208]	; (80057bc <HAL_DMA_Abort+0x228>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d059      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a33      	ldr	r2, [pc, #204]	; (80057c0 <HAL_DMA_Abort+0x22c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d054      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a31      	ldr	r2, [pc, #196]	; (80057c4 <HAL_DMA_Abort+0x230>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d04f      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a30      	ldr	r2, [pc, #192]	; (80057c8 <HAL_DMA_Abort+0x234>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d04a      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a2e      	ldr	r2, [pc, #184]	; (80057cc <HAL_DMA_Abort+0x238>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d045      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a2d      	ldr	r2, [pc, #180]	; (80057d0 <HAL_DMA_Abort+0x23c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d040      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a2b      	ldr	r2, [pc, #172]	; (80057d4 <HAL_DMA_Abort+0x240>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d03b      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2a      	ldr	r2, [pc, #168]	; (80057d8 <HAL_DMA_Abort+0x244>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d036      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a28      	ldr	r2, [pc, #160]	; (80057dc <HAL_DMA_Abort+0x248>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d031      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a27      	ldr	r2, [pc, #156]	; (80057e0 <HAL_DMA_Abort+0x24c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d02c      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <HAL_DMA_Abort+0x250>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d027      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a24      	ldr	r2, [pc, #144]	; (80057e8 <HAL_DMA_Abort+0x254>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d022      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a22      	ldr	r2, [pc, #136]	; (80057ec <HAL_DMA_Abort+0x258>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01d      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a21      	ldr	r2, [pc, #132]	; (80057f0 <HAL_DMA_Abort+0x25c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d018      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <HAL_DMA_Abort+0x260>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d013      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <HAL_DMA_Abort+0x264>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00e      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <HAL_DMA_Abort+0x268>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d009      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1b      	ldr	r2, [pc, #108]	; (8005800 <HAL_DMA_Abort+0x26c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d004      	beq.n	80057a2 <HAL_DMA_Abort+0x20e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a19      	ldr	r2, [pc, #100]	; (8005804 <HAL_DMA_Abort+0x270>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d132      	bne.n	8005808 <HAL_DMA_Abort+0x274>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e031      	b.n	800580a <HAL_DMA_Abort+0x276>
 80057a6:	bf00      	nop
 80057a8:	40020010 	.word	0x40020010
 80057ac:	40020028 	.word	0x40020028
 80057b0:	40020040 	.word	0x40020040
 80057b4:	40020058 	.word	0x40020058
 80057b8:	40020070 	.word	0x40020070
 80057bc:	40020088 	.word	0x40020088
 80057c0:	400200a0 	.word	0x400200a0
 80057c4:	400200b8 	.word	0x400200b8
 80057c8:	40020410 	.word	0x40020410
 80057cc:	40020428 	.word	0x40020428
 80057d0:	40020440 	.word	0x40020440
 80057d4:	40020458 	.word	0x40020458
 80057d8:	40020470 	.word	0x40020470
 80057dc:	40020488 	.word	0x40020488
 80057e0:	400204a0 	.word	0x400204a0
 80057e4:	400204b8 	.word	0x400204b8
 80057e8:	58025408 	.word	0x58025408
 80057ec:	5802541c 	.word	0x5802541c
 80057f0:	58025430 	.word	0x58025430
 80057f4:	58025444 	.word	0x58025444
 80057f8:	58025458 	.word	0x58025458
 80057fc:	5802546c 	.word	0x5802546c
 8005800:	58025480 	.word	0x58025480
 8005804:	58025494 	.word	0x58025494
 8005808:	2300      	movs	r3, #0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800581c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a6d      	ldr	r2, [pc, #436]	; (80059d8 <HAL_DMA_Abort+0x444>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d04a      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a6b      	ldr	r2, [pc, #428]	; (80059dc <HAL_DMA_Abort+0x448>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d045      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a6a      	ldr	r2, [pc, #424]	; (80059e0 <HAL_DMA_Abort+0x44c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d040      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a68      	ldr	r2, [pc, #416]	; (80059e4 <HAL_DMA_Abort+0x450>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d03b      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a67      	ldr	r2, [pc, #412]	; (80059e8 <HAL_DMA_Abort+0x454>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d036      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a65      	ldr	r2, [pc, #404]	; (80059ec <HAL_DMA_Abort+0x458>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d031      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a64      	ldr	r2, [pc, #400]	; (80059f0 <HAL_DMA_Abort+0x45c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d02c      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a62      	ldr	r2, [pc, #392]	; (80059f4 <HAL_DMA_Abort+0x460>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d027      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a61      	ldr	r2, [pc, #388]	; (80059f8 <HAL_DMA_Abort+0x464>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d022      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a5f      	ldr	r2, [pc, #380]	; (80059fc <HAL_DMA_Abort+0x468>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01d      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a5e      	ldr	r2, [pc, #376]	; (8005a00 <HAL_DMA_Abort+0x46c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d018      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5c      	ldr	r2, [pc, #368]	; (8005a04 <HAL_DMA_Abort+0x470>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a5b      	ldr	r2, [pc, #364]	; (8005a08 <HAL_DMA_Abort+0x474>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00e      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a59      	ldr	r2, [pc, #356]	; (8005a0c <HAL_DMA_Abort+0x478>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d009      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a58      	ldr	r2, [pc, #352]	; (8005a10 <HAL_DMA_Abort+0x47c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_DMA_Abort+0x32a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a56      	ldr	r2, [pc, #344]	; (8005a14 <HAL_DMA_Abort+0x480>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d108      	bne.n	80058d0 <HAL_DMA_Abort+0x33c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e007      	b.n	80058e0 <HAL_DMA_Abort+0x34c>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0201 	bic.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80058e0:	e013      	b.n	800590a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058e2:	f7fd f9c5 	bl	8002c70 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b05      	cmp	r3, #5
 80058ee:	d90c      	bls.n	800590a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2203      	movs	r2, #3
 80058fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e12d      	b.n	8005b66 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e5      	bne.n	80058e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2f      	ldr	r2, [pc, #188]	; (80059d8 <HAL_DMA_Abort+0x444>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d04a      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2d      	ldr	r2, [pc, #180]	; (80059dc <HAL_DMA_Abort+0x448>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d045      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2c      	ldr	r2, [pc, #176]	; (80059e0 <HAL_DMA_Abort+0x44c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d040      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2a      	ldr	r2, [pc, #168]	; (80059e4 <HAL_DMA_Abort+0x450>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d03b      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a29      	ldr	r2, [pc, #164]	; (80059e8 <HAL_DMA_Abort+0x454>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d036      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a27      	ldr	r2, [pc, #156]	; (80059ec <HAL_DMA_Abort+0x458>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d031      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a26      	ldr	r2, [pc, #152]	; (80059f0 <HAL_DMA_Abort+0x45c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d02c      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a24      	ldr	r2, [pc, #144]	; (80059f4 <HAL_DMA_Abort+0x460>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d027      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a23      	ldr	r2, [pc, #140]	; (80059f8 <HAL_DMA_Abort+0x464>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d022      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a21      	ldr	r2, [pc, #132]	; (80059fc <HAL_DMA_Abort+0x468>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01d      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a20      	ldr	r2, [pc, #128]	; (8005a00 <HAL_DMA_Abort+0x46c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d018      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <HAL_DMA_Abort+0x470>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1d      	ldr	r2, [pc, #116]	; (8005a08 <HAL_DMA_Abort+0x474>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00e      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1b      	ldr	r2, [pc, #108]	; (8005a0c <HAL_DMA_Abort+0x478>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1a      	ldr	r2, [pc, #104]	; (8005a10 <HAL_DMA_Abort+0x47c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_DMA_Abort+0x422>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <HAL_DMA_Abort+0x480>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d101      	bne.n	80059ba <HAL_DMA_Abort+0x426>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <HAL_DMA_Abort+0x428>
 80059ba:	2300      	movs	r3, #0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d02b      	beq.n	8005a18 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	223f      	movs	r2, #63	; 0x3f
 80059d0:	409a      	lsls	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	609a      	str	r2, [r3, #8]
 80059d6:	e02a      	b.n	8005a2e <HAL_DMA_Abort+0x49a>
 80059d8:	40020010 	.word	0x40020010
 80059dc:	40020028 	.word	0x40020028
 80059e0:	40020040 	.word	0x40020040
 80059e4:	40020058 	.word	0x40020058
 80059e8:	40020070 	.word	0x40020070
 80059ec:	40020088 	.word	0x40020088
 80059f0:	400200a0 	.word	0x400200a0
 80059f4:	400200b8 	.word	0x400200b8
 80059f8:	40020410 	.word	0x40020410
 80059fc:	40020428 	.word	0x40020428
 8005a00:	40020440 	.word	0x40020440
 8005a04:	40020458 	.word	0x40020458
 8005a08:	40020470 	.word	0x40020470
 8005a0c:	40020488 	.word	0x40020488
 8005a10:	400204a0 	.word	0x400204a0
 8005a14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	2201      	movs	r2, #1
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a4f      	ldr	r2, [pc, #316]	; (8005b70 <HAL_DMA_Abort+0x5dc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d072      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a4d      	ldr	r2, [pc, #308]	; (8005b74 <HAL_DMA_Abort+0x5e0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d06d      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a4c      	ldr	r2, [pc, #304]	; (8005b78 <HAL_DMA_Abort+0x5e4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d068      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a4a      	ldr	r2, [pc, #296]	; (8005b7c <HAL_DMA_Abort+0x5e8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d063      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a49      	ldr	r2, [pc, #292]	; (8005b80 <HAL_DMA_Abort+0x5ec>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d05e      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a47      	ldr	r2, [pc, #284]	; (8005b84 <HAL_DMA_Abort+0x5f0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d059      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a46      	ldr	r2, [pc, #280]	; (8005b88 <HAL_DMA_Abort+0x5f4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d054      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a44      	ldr	r2, [pc, #272]	; (8005b8c <HAL_DMA_Abort+0x5f8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d04f      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a43      	ldr	r2, [pc, #268]	; (8005b90 <HAL_DMA_Abort+0x5fc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d04a      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a41      	ldr	r2, [pc, #260]	; (8005b94 <HAL_DMA_Abort+0x600>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d045      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a40      	ldr	r2, [pc, #256]	; (8005b98 <HAL_DMA_Abort+0x604>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d040      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a3e      	ldr	r2, [pc, #248]	; (8005b9c <HAL_DMA_Abort+0x608>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d03b      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a3d      	ldr	r2, [pc, #244]	; (8005ba0 <HAL_DMA_Abort+0x60c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d036      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a3b      	ldr	r2, [pc, #236]	; (8005ba4 <HAL_DMA_Abort+0x610>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d031      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a3a      	ldr	r2, [pc, #232]	; (8005ba8 <HAL_DMA_Abort+0x614>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d02c      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a38      	ldr	r2, [pc, #224]	; (8005bac <HAL_DMA_Abort+0x618>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d027      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a37      	ldr	r2, [pc, #220]	; (8005bb0 <HAL_DMA_Abort+0x61c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d022      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a35      	ldr	r2, [pc, #212]	; (8005bb4 <HAL_DMA_Abort+0x620>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01d      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a34      	ldr	r2, [pc, #208]	; (8005bb8 <HAL_DMA_Abort+0x624>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d018      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a32      	ldr	r2, [pc, #200]	; (8005bbc <HAL_DMA_Abort+0x628>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d013      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a31      	ldr	r2, [pc, #196]	; (8005bc0 <HAL_DMA_Abort+0x62c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00e      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <HAL_DMA_Abort+0x630>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d009      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a2e      	ldr	r2, [pc, #184]	; (8005bc8 <HAL_DMA_Abort+0x634>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d004      	beq.n	8005b1e <HAL_DMA_Abort+0x58a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a2c      	ldr	r2, [pc, #176]	; (8005bcc <HAL_DMA_Abort+0x638>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d101      	bne.n	8005b22 <HAL_DMA_Abort+0x58e>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <HAL_DMA_Abort+0x590>
 8005b22:	2300      	movs	r3, #0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d015      	beq.n	8005b54 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b30:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00c      	beq.n	8005b54 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b48:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b52:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40020010 	.word	0x40020010
 8005b74:	40020028 	.word	0x40020028
 8005b78:	40020040 	.word	0x40020040
 8005b7c:	40020058 	.word	0x40020058
 8005b80:	40020070 	.word	0x40020070
 8005b84:	40020088 	.word	0x40020088
 8005b88:	400200a0 	.word	0x400200a0
 8005b8c:	400200b8 	.word	0x400200b8
 8005b90:	40020410 	.word	0x40020410
 8005b94:	40020428 	.word	0x40020428
 8005b98:	40020440 	.word	0x40020440
 8005b9c:	40020458 	.word	0x40020458
 8005ba0:	40020470 	.word	0x40020470
 8005ba4:	40020488 	.word	0x40020488
 8005ba8:	400204a0 	.word	0x400204a0
 8005bac:	400204b8 	.word	0x400204b8
 8005bb0:	58025408 	.word	0x58025408
 8005bb4:	5802541c 	.word	0x5802541c
 8005bb8:	58025430 	.word	0x58025430
 8005bbc:	58025444 	.word	0x58025444
 8005bc0:	58025458 	.word	0x58025458
 8005bc4:	5802546c 	.word	0x5802546c
 8005bc8:	58025480 	.word	0x58025480
 8005bcc:	58025494 	.word	0x58025494

08005bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e237      	b.n	8006052 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d004      	beq.n	8005bf8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2280      	movs	r2, #128	; 0x80
 8005bf2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e22c      	b.n	8006052 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5c      	ldr	r2, [pc, #368]	; (8005d70 <HAL_DMA_Abort_IT+0x1a0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d04a      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a5b      	ldr	r2, [pc, #364]	; (8005d74 <HAL_DMA_Abort_IT+0x1a4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d045      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a59      	ldr	r2, [pc, #356]	; (8005d78 <HAL_DMA_Abort_IT+0x1a8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d040      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a58      	ldr	r2, [pc, #352]	; (8005d7c <HAL_DMA_Abort_IT+0x1ac>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d03b      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a56      	ldr	r2, [pc, #344]	; (8005d80 <HAL_DMA_Abort_IT+0x1b0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d036      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a55      	ldr	r2, [pc, #340]	; (8005d84 <HAL_DMA_Abort_IT+0x1b4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d031      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a53      	ldr	r2, [pc, #332]	; (8005d88 <HAL_DMA_Abort_IT+0x1b8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d02c      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a52      	ldr	r2, [pc, #328]	; (8005d8c <HAL_DMA_Abort_IT+0x1bc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d027      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a50      	ldr	r2, [pc, #320]	; (8005d90 <HAL_DMA_Abort_IT+0x1c0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d022      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a4f      	ldr	r2, [pc, #316]	; (8005d94 <HAL_DMA_Abort_IT+0x1c4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d01d      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a4d      	ldr	r2, [pc, #308]	; (8005d98 <HAL_DMA_Abort_IT+0x1c8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d018      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a4c      	ldr	r2, [pc, #304]	; (8005d9c <HAL_DMA_Abort_IT+0x1cc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d013      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a4a      	ldr	r2, [pc, #296]	; (8005da0 <HAL_DMA_Abort_IT+0x1d0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00e      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a49      	ldr	r2, [pc, #292]	; (8005da4 <HAL_DMA_Abort_IT+0x1d4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d009      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a47      	ldr	r2, [pc, #284]	; (8005da8 <HAL_DMA_Abort_IT+0x1d8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d004      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a46      	ldr	r2, [pc, #280]	; (8005dac <HAL_DMA_Abort_IT+0x1dc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d101      	bne.n	8005c9c <HAL_DMA_Abort_IT+0xcc>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <HAL_DMA_Abort_IT+0xce>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8086 	beq.w	8005db0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2204      	movs	r2, #4
 8005ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a2f      	ldr	r2, [pc, #188]	; (8005d70 <HAL_DMA_Abort_IT+0x1a0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d04a      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2e      	ldr	r2, [pc, #184]	; (8005d74 <HAL_DMA_Abort_IT+0x1a4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d045      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2c      	ldr	r2, [pc, #176]	; (8005d78 <HAL_DMA_Abort_IT+0x1a8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d040      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <HAL_DMA_Abort_IT+0x1ac>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d03b      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a29      	ldr	r2, [pc, #164]	; (8005d80 <HAL_DMA_Abort_IT+0x1b0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d036      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a28      	ldr	r2, [pc, #160]	; (8005d84 <HAL_DMA_Abort_IT+0x1b4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d031      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a26      	ldr	r2, [pc, #152]	; (8005d88 <HAL_DMA_Abort_IT+0x1b8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d02c      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a25      	ldr	r2, [pc, #148]	; (8005d8c <HAL_DMA_Abort_IT+0x1bc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d027      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a23      	ldr	r2, [pc, #140]	; (8005d90 <HAL_DMA_Abort_IT+0x1c0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d022      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a22      	ldr	r2, [pc, #136]	; (8005d94 <HAL_DMA_Abort_IT+0x1c4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d01d      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a20      	ldr	r2, [pc, #128]	; (8005d98 <HAL_DMA_Abort_IT+0x1c8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d018      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1f      	ldr	r2, [pc, #124]	; (8005d9c <HAL_DMA_Abort_IT+0x1cc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1d      	ldr	r2, [pc, #116]	; (8005da0 <HAL_DMA_Abort_IT+0x1d0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00e      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1c      	ldr	r2, [pc, #112]	; (8005da4 <HAL_DMA_Abort_IT+0x1d4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1a      	ldr	r2, [pc, #104]	; (8005da8 <HAL_DMA_Abort_IT+0x1d8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x17c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a19      	ldr	r2, [pc, #100]	; (8005dac <HAL_DMA_Abort_IT+0x1dc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d108      	bne.n	8005d5e <HAL_DMA_Abort_IT+0x18e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0201 	bic.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	e178      	b.n	8006050 <HAL_DMA_Abort_IT+0x480>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e16f      	b.n	8006050 <HAL_DMA_Abort_IT+0x480>
 8005d70:	40020010 	.word	0x40020010
 8005d74:	40020028 	.word	0x40020028
 8005d78:	40020040 	.word	0x40020040
 8005d7c:	40020058 	.word	0x40020058
 8005d80:	40020070 	.word	0x40020070
 8005d84:	40020088 	.word	0x40020088
 8005d88:	400200a0 	.word	0x400200a0
 8005d8c:	400200b8 	.word	0x400200b8
 8005d90:	40020410 	.word	0x40020410
 8005d94:	40020428 	.word	0x40020428
 8005d98:	40020440 	.word	0x40020440
 8005d9c:	40020458 	.word	0x40020458
 8005da0:	40020470 	.word	0x40020470
 8005da4:	40020488 	.word	0x40020488
 8005da8:	400204a0 	.word	0x400204a0
 8005dac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 020e 	bic.w	r2, r2, #14
 8005dbe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a6c      	ldr	r2, [pc, #432]	; (8005f78 <HAL_DMA_Abort_IT+0x3a8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d04a      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a6b      	ldr	r2, [pc, #428]	; (8005f7c <HAL_DMA_Abort_IT+0x3ac>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d045      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a69      	ldr	r2, [pc, #420]	; (8005f80 <HAL_DMA_Abort_IT+0x3b0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d040      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a68      	ldr	r2, [pc, #416]	; (8005f84 <HAL_DMA_Abort_IT+0x3b4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d03b      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a66      	ldr	r2, [pc, #408]	; (8005f88 <HAL_DMA_Abort_IT+0x3b8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d036      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a65      	ldr	r2, [pc, #404]	; (8005f8c <HAL_DMA_Abort_IT+0x3bc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d031      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a63      	ldr	r2, [pc, #396]	; (8005f90 <HAL_DMA_Abort_IT+0x3c0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d02c      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a62      	ldr	r2, [pc, #392]	; (8005f94 <HAL_DMA_Abort_IT+0x3c4>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d027      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a60      	ldr	r2, [pc, #384]	; (8005f98 <HAL_DMA_Abort_IT+0x3c8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d022      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a5f      	ldr	r2, [pc, #380]	; (8005f9c <HAL_DMA_Abort_IT+0x3cc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d01d      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a5d      	ldr	r2, [pc, #372]	; (8005fa0 <HAL_DMA_Abort_IT+0x3d0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d018      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a5c      	ldr	r2, [pc, #368]	; (8005fa4 <HAL_DMA_Abort_IT+0x3d4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d013      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a5a      	ldr	r2, [pc, #360]	; (8005fa8 <HAL_DMA_Abort_IT+0x3d8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00e      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a59      	ldr	r2, [pc, #356]	; (8005fac <HAL_DMA_Abort_IT+0x3dc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d009      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a57      	ldr	r2, [pc, #348]	; (8005fb0 <HAL_DMA_Abort_IT+0x3e0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d004      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x290>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a56      	ldr	r2, [pc, #344]	; (8005fb4 <HAL_DMA_Abort_IT+0x3e4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d108      	bne.n	8005e72 <HAL_DMA_Abort_IT+0x2a2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	e007      	b.n	8005e82 <HAL_DMA_Abort_IT+0x2b2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0201 	bic.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a3c      	ldr	r2, [pc, #240]	; (8005f78 <HAL_DMA_Abort_IT+0x3a8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d072      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a3a      	ldr	r2, [pc, #232]	; (8005f7c <HAL_DMA_Abort_IT+0x3ac>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d06d      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a39      	ldr	r2, [pc, #228]	; (8005f80 <HAL_DMA_Abort_IT+0x3b0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d068      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a37      	ldr	r2, [pc, #220]	; (8005f84 <HAL_DMA_Abort_IT+0x3b4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d063      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a36      	ldr	r2, [pc, #216]	; (8005f88 <HAL_DMA_Abort_IT+0x3b8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d05e      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a34      	ldr	r2, [pc, #208]	; (8005f8c <HAL_DMA_Abort_IT+0x3bc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d059      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a33      	ldr	r2, [pc, #204]	; (8005f90 <HAL_DMA_Abort_IT+0x3c0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d054      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a31      	ldr	r2, [pc, #196]	; (8005f94 <HAL_DMA_Abort_IT+0x3c4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d04f      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a30      	ldr	r2, [pc, #192]	; (8005f98 <HAL_DMA_Abort_IT+0x3c8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d04a      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a2e      	ldr	r2, [pc, #184]	; (8005f9c <HAL_DMA_Abort_IT+0x3cc>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d045      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a2d      	ldr	r2, [pc, #180]	; (8005fa0 <HAL_DMA_Abort_IT+0x3d0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d040      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2b      	ldr	r2, [pc, #172]	; (8005fa4 <HAL_DMA_Abort_IT+0x3d4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d03b      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <HAL_DMA_Abort_IT+0x3d8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d036      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a28      	ldr	r2, [pc, #160]	; (8005fac <HAL_DMA_Abort_IT+0x3dc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d031      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a27      	ldr	r2, [pc, #156]	; (8005fb0 <HAL_DMA_Abort_IT+0x3e0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d02c      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a25      	ldr	r2, [pc, #148]	; (8005fb4 <HAL_DMA_Abort_IT+0x3e4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d027      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a24      	ldr	r2, [pc, #144]	; (8005fb8 <HAL_DMA_Abort_IT+0x3e8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d022      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a22      	ldr	r2, [pc, #136]	; (8005fbc <HAL_DMA_Abort_IT+0x3ec>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01d      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a21      	ldr	r2, [pc, #132]	; (8005fc0 <HAL_DMA_Abort_IT+0x3f0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d018      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1f      	ldr	r2, [pc, #124]	; (8005fc4 <HAL_DMA_Abort_IT+0x3f4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a1e      	ldr	r2, [pc, #120]	; (8005fc8 <HAL_DMA_Abort_IT+0x3f8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00e      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <HAL_DMA_Abort_IT+0x3fc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d009      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1b      	ldr	r2, [pc, #108]	; (8005fd0 <HAL_DMA_Abort_IT+0x400>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x3a2>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a19      	ldr	r2, [pc, #100]	; (8005fd4 <HAL_DMA_Abort_IT+0x404>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d132      	bne.n	8005fd8 <HAL_DMA_Abort_IT+0x408>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e031      	b.n	8005fda <HAL_DMA_Abort_IT+0x40a>
 8005f76:	bf00      	nop
 8005f78:	40020010 	.word	0x40020010
 8005f7c:	40020028 	.word	0x40020028
 8005f80:	40020040 	.word	0x40020040
 8005f84:	40020058 	.word	0x40020058
 8005f88:	40020070 	.word	0x40020070
 8005f8c:	40020088 	.word	0x40020088
 8005f90:	400200a0 	.word	0x400200a0
 8005f94:	400200b8 	.word	0x400200b8
 8005f98:	40020410 	.word	0x40020410
 8005f9c:	40020428 	.word	0x40020428
 8005fa0:	40020440 	.word	0x40020440
 8005fa4:	40020458 	.word	0x40020458
 8005fa8:	40020470 	.word	0x40020470
 8005fac:	40020488 	.word	0x40020488
 8005fb0:	400204a0 	.word	0x400204a0
 8005fb4:	400204b8 	.word	0x400204b8
 8005fb8:	58025408 	.word	0x58025408
 8005fbc:	5802541c 	.word	0x5802541c
 8005fc0:	58025430 	.word	0x58025430
 8005fc4:	58025444 	.word	0x58025444
 8005fc8:	58025458 	.word	0x58025458
 8005fcc:	5802546c 	.word	0x5802546c
 8005fd0:	58025480 	.word	0x58025480
 8005fd4:	58025494 	.word	0x58025494
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d028      	beq.n	8006030 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	409a      	lsls	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800600c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00c      	beq.n	8006030 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006024:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800602e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop

0800605c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006068:	4b67      	ldr	r3, [pc, #412]	; (8006208 <HAL_DMA_IRQHandler+0x1ac>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a67      	ldr	r2, [pc, #412]	; (800620c <HAL_DMA_IRQHandler+0x1b0>)
 800606e:	fba2 2303 	umull	r2, r3, r2, r3
 8006072:	0a9b      	lsrs	r3, r3, #10
 8006074:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006080:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a5f      	ldr	r2, [pc, #380]	; (8006210 <HAL_DMA_IRQHandler+0x1b4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d04a      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a5d      	ldr	r2, [pc, #372]	; (8006214 <HAL_DMA_IRQHandler+0x1b8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d045      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a5c      	ldr	r2, [pc, #368]	; (8006218 <HAL_DMA_IRQHandler+0x1bc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d040      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a5a      	ldr	r2, [pc, #360]	; (800621c <HAL_DMA_IRQHandler+0x1c0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d03b      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a59      	ldr	r2, [pc, #356]	; (8006220 <HAL_DMA_IRQHandler+0x1c4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d036      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a57      	ldr	r2, [pc, #348]	; (8006224 <HAL_DMA_IRQHandler+0x1c8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d031      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a56      	ldr	r2, [pc, #344]	; (8006228 <HAL_DMA_IRQHandler+0x1cc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02c      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a54      	ldr	r2, [pc, #336]	; (800622c <HAL_DMA_IRQHandler+0x1d0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d027      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a53      	ldr	r2, [pc, #332]	; (8006230 <HAL_DMA_IRQHandler+0x1d4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a51      	ldr	r2, [pc, #324]	; (8006234 <HAL_DMA_IRQHandler+0x1d8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a50      	ldr	r2, [pc, #320]	; (8006238 <HAL_DMA_IRQHandler+0x1dc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a4e      	ldr	r2, [pc, #312]	; (800623c <HAL_DMA_IRQHandler+0x1e0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a4d      	ldr	r2, [pc, #308]	; (8006240 <HAL_DMA_IRQHandler+0x1e4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a4b      	ldr	r2, [pc, #300]	; (8006244 <HAL_DMA_IRQHandler+0x1e8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a4a      	ldr	r2, [pc, #296]	; (8006248 <HAL_DMA_IRQHandler+0x1ec>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_DMA_IRQHandler+0xd2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a48      	ldr	r2, [pc, #288]	; (800624c <HAL_DMA_IRQHandler+0x1f0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d101      	bne.n	8006132 <HAL_DMA_IRQHandler+0xd6>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <HAL_DMA_IRQHandler+0xd8>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 842b 	beq.w	8006990 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	2208      	movs	r2, #8
 8006144:	409a      	lsls	r2, r3
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 80a2 	beq.w	8006294 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2e      	ldr	r2, [pc, #184]	; (8006210 <HAL_DMA_IRQHandler+0x1b4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d04a      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a2d      	ldr	r2, [pc, #180]	; (8006214 <HAL_DMA_IRQHandler+0x1b8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d045      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a2b      	ldr	r2, [pc, #172]	; (8006218 <HAL_DMA_IRQHandler+0x1bc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d040      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a2a      	ldr	r2, [pc, #168]	; (800621c <HAL_DMA_IRQHandler+0x1c0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d03b      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a28      	ldr	r2, [pc, #160]	; (8006220 <HAL_DMA_IRQHandler+0x1c4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d036      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a27      	ldr	r2, [pc, #156]	; (8006224 <HAL_DMA_IRQHandler+0x1c8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d031      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a25      	ldr	r2, [pc, #148]	; (8006228 <HAL_DMA_IRQHandler+0x1cc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d02c      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a24      	ldr	r2, [pc, #144]	; (800622c <HAL_DMA_IRQHandler+0x1d0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d027      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a22      	ldr	r2, [pc, #136]	; (8006230 <HAL_DMA_IRQHandler+0x1d4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d022      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a21      	ldr	r2, [pc, #132]	; (8006234 <HAL_DMA_IRQHandler+0x1d8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d01d      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a1f      	ldr	r2, [pc, #124]	; (8006238 <HAL_DMA_IRQHandler+0x1dc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d018      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a1e      	ldr	r2, [pc, #120]	; (800623c <HAL_DMA_IRQHandler+0x1e0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1c      	ldr	r2, [pc, #112]	; (8006240 <HAL_DMA_IRQHandler+0x1e4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00e      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a1b      	ldr	r2, [pc, #108]	; (8006244 <HAL_DMA_IRQHandler+0x1e8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d009      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a19      	ldr	r2, [pc, #100]	; (8006248 <HAL_DMA_IRQHandler+0x1ec>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d004      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x194>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a18      	ldr	r2, [pc, #96]	; (800624c <HAL_DMA_IRQHandler+0x1f0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d12f      	bne.n	8006250 <HAL_DMA_IRQHandler+0x1f4>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bf14      	ite	ne
 80061fe:	2301      	movne	r3, #1
 8006200:	2300      	moveq	r3, #0
 8006202:	b2db      	uxtb	r3, r3
 8006204:	e02e      	b.n	8006264 <HAL_DMA_IRQHandler+0x208>
 8006206:	bf00      	nop
 8006208:	24000004 	.word	0x24000004
 800620c:	1b4e81b5 	.word	0x1b4e81b5
 8006210:	40020010 	.word	0x40020010
 8006214:	40020028 	.word	0x40020028
 8006218:	40020040 	.word	0x40020040
 800621c:	40020058 	.word	0x40020058
 8006220:	40020070 	.word	0x40020070
 8006224:	40020088 	.word	0x40020088
 8006228:	400200a0 	.word	0x400200a0
 800622c:	400200b8 	.word	0x400200b8
 8006230:	40020410 	.word	0x40020410
 8006234:	40020428 	.word	0x40020428
 8006238:	40020440 	.word	0x40020440
 800623c:	40020458 	.word	0x40020458
 8006240:	40020470 	.word	0x40020470
 8006244:	40020488 	.word	0x40020488
 8006248:	400204a0 	.word	0x400204a0
 800624c:	400204b8 	.word	0x400204b8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b00      	cmp	r3, #0
 800625c:	bf14      	ite	ne
 800625e:	2301      	movne	r3, #1
 8006260:	2300      	moveq	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d015      	beq.n	8006294 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0204 	bic.w	r2, r2, #4
 8006276:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	2208      	movs	r2, #8
 8006282:	409a      	lsls	r2, r3
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	f043 0201 	orr.w	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006298:	f003 031f 	and.w	r3, r3, #31
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	fa22 f303 	lsr.w	r3, r2, r3
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d06e      	beq.n	8006388 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a69      	ldr	r2, [pc, #420]	; (8006454 <HAL_DMA_IRQHandler+0x3f8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d04a      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a67      	ldr	r2, [pc, #412]	; (8006458 <HAL_DMA_IRQHandler+0x3fc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d045      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a66      	ldr	r2, [pc, #408]	; (800645c <HAL_DMA_IRQHandler+0x400>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d040      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a64      	ldr	r2, [pc, #400]	; (8006460 <HAL_DMA_IRQHandler+0x404>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d03b      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a63      	ldr	r2, [pc, #396]	; (8006464 <HAL_DMA_IRQHandler+0x408>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d036      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a61      	ldr	r2, [pc, #388]	; (8006468 <HAL_DMA_IRQHandler+0x40c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d031      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a60      	ldr	r2, [pc, #384]	; (800646c <HAL_DMA_IRQHandler+0x410>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d02c      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a5e      	ldr	r2, [pc, #376]	; (8006470 <HAL_DMA_IRQHandler+0x414>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d027      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a5d      	ldr	r2, [pc, #372]	; (8006474 <HAL_DMA_IRQHandler+0x418>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d022      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a5b      	ldr	r2, [pc, #364]	; (8006478 <HAL_DMA_IRQHandler+0x41c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d01d      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a5a      	ldr	r2, [pc, #360]	; (800647c <HAL_DMA_IRQHandler+0x420>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d018      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a58      	ldr	r2, [pc, #352]	; (8006480 <HAL_DMA_IRQHandler+0x424>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d013      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a57      	ldr	r2, [pc, #348]	; (8006484 <HAL_DMA_IRQHandler+0x428>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00e      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a55      	ldr	r2, [pc, #340]	; (8006488 <HAL_DMA_IRQHandler+0x42c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d009      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a54      	ldr	r2, [pc, #336]	; (800648c <HAL_DMA_IRQHandler+0x430>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d004      	beq.n	800634a <HAL_DMA_IRQHandler+0x2ee>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a52      	ldr	r2, [pc, #328]	; (8006490 <HAL_DMA_IRQHandler+0x434>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d10a      	bne.n	8006360 <HAL_DMA_IRQHandler+0x304>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006354:	2b00      	cmp	r3, #0
 8006356:	bf14      	ite	ne
 8006358:	2301      	movne	r3, #1
 800635a:	2300      	moveq	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	e003      	b.n	8006368 <HAL_DMA_IRQHandler+0x30c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2300      	movs	r3, #0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00d      	beq.n	8006388 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	2201      	movs	r2, #1
 8006376:	409a      	lsls	r2, r3
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006380:	f043 0202 	orr.w	r2, r3, #2
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638c:	f003 031f 	and.w	r3, r3, #31
 8006390:	2204      	movs	r2, #4
 8006392:	409a      	lsls	r2, r3
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 808f 	beq.w	80064bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2c      	ldr	r2, [pc, #176]	; (8006454 <HAL_DMA_IRQHandler+0x3f8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d04a      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <HAL_DMA_IRQHandler+0x3fc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d045      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a29      	ldr	r2, [pc, #164]	; (800645c <HAL_DMA_IRQHandler+0x400>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d040      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a27      	ldr	r2, [pc, #156]	; (8006460 <HAL_DMA_IRQHandler+0x404>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d03b      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a26      	ldr	r2, [pc, #152]	; (8006464 <HAL_DMA_IRQHandler+0x408>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d036      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a24      	ldr	r2, [pc, #144]	; (8006468 <HAL_DMA_IRQHandler+0x40c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d031      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a23      	ldr	r2, [pc, #140]	; (800646c <HAL_DMA_IRQHandler+0x410>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d02c      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a21      	ldr	r2, [pc, #132]	; (8006470 <HAL_DMA_IRQHandler+0x414>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d027      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a20      	ldr	r2, [pc, #128]	; (8006474 <HAL_DMA_IRQHandler+0x418>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d022      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1e      	ldr	r2, [pc, #120]	; (8006478 <HAL_DMA_IRQHandler+0x41c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01d      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1d      	ldr	r2, [pc, #116]	; (800647c <HAL_DMA_IRQHandler+0x420>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d018      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <HAL_DMA_IRQHandler+0x424>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1a      	ldr	r2, [pc, #104]	; (8006484 <HAL_DMA_IRQHandler+0x428>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00e      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a18      	ldr	r2, [pc, #96]	; (8006488 <HAL_DMA_IRQHandler+0x42c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d009      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a17      	ldr	r2, [pc, #92]	; (800648c <HAL_DMA_IRQHandler+0x430>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d004      	beq.n	800643e <HAL_DMA_IRQHandler+0x3e2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a15      	ldr	r2, [pc, #84]	; (8006490 <HAL_DMA_IRQHandler+0x434>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d12a      	bne.n	8006494 <HAL_DMA_IRQHandler+0x438>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	bf14      	ite	ne
 800644c:	2301      	movne	r3, #1
 800644e:	2300      	moveq	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	e023      	b.n	800649c <HAL_DMA_IRQHandler+0x440>
 8006454:	40020010 	.word	0x40020010
 8006458:	40020028 	.word	0x40020028
 800645c:	40020040 	.word	0x40020040
 8006460:	40020058 	.word	0x40020058
 8006464:	40020070 	.word	0x40020070
 8006468:	40020088 	.word	0x40020088
 800646c:	400200a0 	.word	0x400200a0
 8006470:	400200b8 	.word	0x400200b8
 8006474:	40020410 	.word	0x40020410
 8006478:	40020428 	.word	0x40020428
 800647c:	40020440 	.word	0x40020440
 8006480:	40020458 	.word	0x40020458
 8006484:	40020470 	.word	0x40020470
 8006488:	40020488 	.word	0x40020488
 800648c:	400204a0 	.word	0x400204a0
 8006490:	400204b8 	.word	0x400204b8
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2300      	movs	r3, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00d      	beq.n	80064bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a4:	f003 031f 	and.w	r3, r3, #31
 80064a8:	2204      	movs	r2, #4
 80064aa:	409a      	lsls	r2, r3
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b4:	f043 0204 	orr.w	r2, r3, #4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	2210      	movs	r2, #16
 80064c6:	409a      	lsls	r2, r3
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80a6 	beq.w	800661e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a85      	ldr	r2, [pc, #532]	; (80066ec <HAL_DMA_IRQHandler+0x690>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d04a      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a83      	ldr	r2, [pc, #524]	; (80066f0 <HAL_DMA_IRQHandler+0x694>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d045      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a82      	ldr	r2, [pc, #520]	; (80066f4 <HAL_DMA_IRQHandler+0x698>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d040      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a80      	ldr	r2, [pc, #512]	; (80066f8 <HAL_DMA_IRQHandler+0x69c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d03b      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a7f      	ldr	r2, [pc, #508]	; (80066fc <HAL_DMA_IRQHandler+0x6a0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d036      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a7d      	ldr	r2, [pc, #500]	; (8006700 <HAL_DMA_IRQHandler+0x6a4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d031      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a7c      	ldr	r2, [pc, #496]	; (8006704 <HAL_DMA_IRQHandler+0x6a8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d02c      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a7a      	ldr	r2, [pc, #488]	; (8006708 <HAL_DMA_IRQHandler+0x6ac>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d027      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a79      	ldr	r2, [pc, #484]	; (800670c <HAL_DMA_IRQHandler+0x6b0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d022      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a77      	ldr	r2, [pc, #476]	; (8006710 <HAL_DMA_IRQHandler+0x6b4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d01d      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a76      	ldr	r2, [pc, #472]	; (8006714 <HAL_DMA_IRQHandler+0x6b8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d018      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a74      	ldr	r2, [pc, #464]	; (8006718 <HAL_DMA_IRQHandler+0x6bc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a73      	ldr	r2, [pc, #460]	; (800671c <HAL_DMA_IRQHandler+0x6c0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00e      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a71      	ldr	r2, [pc, #452]	; (8006720 <HAL_DMA_IRQHandler+0x6c4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d009      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a70      	ldr	r2, [pc, #448]	; (8006724 <HAL_DMA_IRQHandler+0x6c8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d004      	beq.n	8006572 <HAL_DMA_IRQHandler+0x516>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a6e      	ldr	r2, [pc, #440]	; (8006728 <HAL_DMA_IRQHandler+0x6cc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d10a      	bne.n	8006588 <HAL_DMA_IRQHandler+0x52c>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	bf14      	ite	ne
 8006580:	2301      	movne	r3, #1
 8006582:	2300      	moveq	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	e009      	b.n	800659c <HAL_DMA_IRQHandler+0x540>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	bf14      	ite	ne
 8006596:	2301      	movne	r3, #1
 8006598:	2300      	moveq	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d03e      	beq.n	800661e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	2210      	movs	r2, #16
 80065aa:	409a      	lsls	r2, r3
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d018      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d108      	bne.n	80065de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d024      	beq.n	800661e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
 80065dc:	e01f      	b.n	800661e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d01b      	beq.n	800661e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	4798      	blx	r3
 80065ee:	e016      	b.n	800661e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d107      	bne.n	800660e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0208 	bic.w	r2, r2, #8
 800660c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	2220      	movs	r2, #32
 8006628:	409a      	lsls	r2, r3
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	4013      	ands	r3, r2
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 8110 	beq.w	8006854 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a2c      	ldr	r2, [pc, #176]	; (80066ec <HAL_DMA_IRQHandler+0x690>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d04a      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a2b      	ldr	r2, [pc, #172]	; (80066f0 <HAL_DMA_IRQHandler+0x694>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d045      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a29      	ldr	r2, [pc, #164]	; (80066f4 <HAL_DMA_IRQHandler+0x698>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d040      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a28      	ldr	r2, [pc, #160]	; (80066f8 <HAL_DMA_IRQHandler+0x69c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d03b      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a26      	ldr	r2, [pc, #152]	; (80066fc <HAL_DMA_IRQHandler+0x6a0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d036      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a25      	ldr	r2, [pc, #148]	; (8006700 <HAL_DMA_IRQHandler+0x6a4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d031      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a23      	ldr	r2, [pc, #140]	; (8006704 <HAL_DMA_IRQHandler+0x6a8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d02c      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a22      	ldr	r2, [pc, #136]	; (8006708 <HAL_DMA_IRQHandler+0x6ac>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d027      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a20      	ldr	r2, [pc, #128]	; (800670c <HAL_DMA_IRQHandler+0x6b0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d022      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1f      	ldr	r2, [pc, #124]	; (8006710 <HAL_DMA_IRQHandler+0x6b4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d01d      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <HAL_DMA_IRQHandler+0x6b8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d018      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1c      	ldr	r2, [pc, #112]	; (8006718 <HAL_DMA_IRQHandler+0x6bc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d013      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1a      	ldr	r2, [pc, #104]	; (800671c <HAL_DMA_IRQHandler+0x6c0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00e      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a19      	ldr	r2, [pc, #100]	; (8006720 <HAL_DMA_IRQHandler+0x6c4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d009      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a17      	ldr	r2, [pc, #92]	; (8006724 <HAL_DMA_IRQHandler+0x6c8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d004      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x678>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a16      	ldr	r2, [pc, #88]	; (8006728 <HAL_DMA_IRQHandler+0x6cc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d12b      	bne.n	800672c <HAL_DMA_IRQHandler+0x6d0>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bf14      	ite	ne
 80066e2:	2301      	movne	r3, #1
 80066e4:	2300      	moveq	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	e02a      	b.n	8006740 <HAL_DMA_IRQHandler+0x6e4>
 80066ea:	bf00      	nop
 80066ec:	40020010 	.word	0x40020010
 80066f0:	40020028 	.word	0x40020028
 80066f4:	40020040 	.word	0x40020040
 80066f8:	40020058 	.word	0x40020058
 80066fc:	40020070 	.word	0x40020070
 8006700:	40020088 	.word	0x40020088
 8006704:	400200a0 	.word	0x400200a0
 8006708:	400200b8 	.word	0x400200b8
 800670c:	40020410 	.word	0x40020410
 8006710:	40020428 	.word	0x40020428
 8006714:	40020440 	.word	0x40020440
 8006718:	40020458 	.word	0x40020458
 800671c:	40020470 	.word	0x40020470
 8006720:	40020488 	.word	0x40020488
 8006724:	400204a0 	.word	0x400204a0
 8006728:	400204b8 	.word	0x400204b8
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	bf14      	ite	ne
 800673a:	2301      	movne	r3, #1
 800673c:	2300      	moveq	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 8087 	beq.w	8006854 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674a:	f003 031f 	and.w	r3, r3, #31
 800674e:	2220      	movs	r2, #32
 8006750:	409a      	lsls	r2, r3
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b04      	cmp	r3, #4
 8006760:	d139      	bne.n	80067d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0216 	bic.w	r2, r2, #22
 8006770:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006780:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	d103      	bne.n	8006792 <HAL_DMA_IRQHandler+0x736>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0208 	bic.w	r2, r2, #8
 80067a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a6:	f003 031f 	and.w	r3, r3, #31
 80067aa:	223f      	movs	r2, #63	; 0x3f
 80067ac:	409a      	lsls	r2, r3
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 834a 	beq.w	8006e60 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	4798      	blx	r3
          }
          return;
 80067d4:	e344      	b.n	8006e60 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d018      	beq.n	8006816 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d108      	bne.n	8006804 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d02c      	beq.n	8006854 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
 8006802:	e027      	b.n	8006854 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d023      	beq.n	8006854 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
 8006814:	e01e      	b.n	8006854 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10f      	bne.n	8006844 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0210 	bic.w	r2, r2, #16
 8006832:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8306 	beq.w	8006e6a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 8088 	beq.w	800697c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2204      	movs	r2, #4
 8006870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a7a      	ldr	r2, [pc, #488]	; (8006a64 <HAL_DMA_IRQHandler+0xa08>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d04a      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a79      	ldr	r2, [pc, #484]	; (8006a68 <HAL_DMA_IRQHandler+0xa0c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d045      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a77      	ldr	r2, [pc, #476]	; (8006a6c <HAL_DMA_IRQHandler+0xa10>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d040      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a76      	ldr	r2, [pc, #472]	; (8006a70 <HAL_DMA_IRQHandler+0xa14>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d03b      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a74      	ldr	r2, [pc, #464]	; (8006a74 <HAL_DMA_IRQHandler+0xa18>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d036      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a73      	ldr	r2, [pc, #460]	; (8006a78 <HAL_DMA_IRQHandler+0xa1c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d031      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a71      	ldr	r2, [pc, #452]	; (8006a7c <HAL_DMA_IRQHandler+0xa20>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d02c      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a70      	ldr	r2, [pc, #448]	; (8006a80 <HAL_DMA_IRQHandler+0xa24>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d027      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a6e      	ldr	r2, [pc, #440]	; (8006a84 <HAL_DMA_IRQHandler+0xa28>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d022      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a6d      	ldr	r2, [pc, #436]	; (8006a88 <HAL_DMA_IRQHandler+0xa2c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d01d      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a6b      	ldr	r2, [pc, #428]	; (8006a8c <HAL_DMA_IRQHandler+0xa30>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d018      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a6a      	ldr	r2, [pc, #424]	; (8006a90 <HAL_DMA_IRQHandler+0xa34>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d013      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a68      	ldr	r2, [pc, #416]	; (8006a94 <HAL_DMA_IRQHandler+0xa38>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00e      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a67      	ldr	r2, [pc, #412]	; (8006a98 <HAL_DMA_IRQHandler+0xa3c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a65      	ldr	r2, [pc, #404]	; (8006a9c <HAL_DMA_IRQHandler+0xa40>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_DMA_IRQHandler+0x8b8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a64      	ldr	r2, [pc, #400]	; (8006aa0 <HAL_DMA_IRQHandler+0xa44>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d108      	bne.n	8006926 <HAL_DMA_IRQHandler+0x8ca>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0201 	bic.w	r2, r2, #1
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	e007      	b.n	8006936 <HAL_DMA_IRQHandler+0x8da>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693e:	429a      	cmp	r2, r3
 8006940:	d307      	bcc.n	8006952 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f2      	bne.n	8006936 <HAL_DMA_IRQHandler+0x8da>
 8006950:	e000      	b.n	8006954 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006952:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2203      	movs	r2, #3
 8006966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800696a:	e003      	b.n	8006974 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8272 	beq.w	8006e6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
 800698e:	e26c      	b.n	8006e6a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a43      	ldr	r2, [pc, #268]	; (8006aa4 <HAL_DMA_IRQHandler+0xa48>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d022      	beq.n	80069e0 <HAL_DMA_IRQHandler+0x984>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a42      	ldr	r2, [pc, #264]	; (8006aa8 <HAL_DMA_IRQHandler+0xa4c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d01d      	beq.n	80069e0 <HAL_DMA_IRQHandler+0x984>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a40      	ldr	r2, [pc, #256]	; (8006aac <HAL_DMA_IRQHandler+0xa50>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d018      	beq.n	80069e0 <HAL_DMA_IRQHandler+0x984>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a3f      	ldr	r2, [pc, #252]	; (8006ab0 <HAL_DMA_IRQHandler+0xa54>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d013      	beq.n	80069e0 <HAL_DMA_IRQHandler+0x984>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a3d      	ldr	r2, [pc, #244]	; (8006ab4 <HAL_DMA_IRQHandler+0xa58>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00e      	beq.n	80069e0 <HAL_DMA_IRQHandler+0x984>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a3c      	ldr	r2, [pc, #240]	; (8006ab8 <HAL_DMA_IRQHandler+0xa5c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d009      	beq.n	80069e0 <HAL_DMA_IRQHandler+0x984>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a3a      	ldr	r2, [pc, #232]	; (8006abc <HAL_DMA_IRQHandler+0xa60>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d004      	beq.n	80069e0 <HAL_DMA_IRQHandler+0x984>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a39      	ldr	r2, [pc, #228]	; (8006ac0 <HAL_DMA_IRQHandler+0xa64>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d101      	bne.n	80069e4 <HAL_DMA_IRQHandler+0x988>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e000      	b.n	80069e6 <HAL_DMA_IRQHandler+0x98a>
 80069e4:	2300      	movs	r3, #0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 823f 	beq.w	8006e6a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	2204      	movs	r2, #4
 80069fe:	409a      	lsls	r2, r3
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80cd 	beq.w	8006ba4 <HAL_DMA_IRQHandler+0xb48>
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 80c7 	beq.w	8006ba4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	2204      	movs	r2, #4
 8006a20:	409a      	lsls	r2, r3
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d049      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8210 	beq.w	8006e64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a4c:	e20a      	b.n	8006e64 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8206 	beq.w	8006e64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a60:	e200      	b.n	8006e64 <HAL_DMA_IRQHandler+0xe08>
 8006a62:	bf00      	nop
 8006a64:	40020010 	.word	0x40020010
 8006a68:	40020028 	.word	0x40020028
 8006a6c:	40020040 	.word	0x40020040
 8006a70:	40020058 	.word	0x40020058
 8006a74:	40020070 	.word	0x40020070
 8006a78:	40020088 	.word	0x40020088
 8006a7c:	400200a0 	.word	0x400200a0
 8006a80:	400200b8 	.word	0x400200b8
 8006a84:	40020410 	.word	0x40020410
 8006a88:	40020428 	.word	0x40020428
 8006a8c:	40020440 	.word	0x40020440
 8006a90:	40020458 	.word	0x40020458
 8006a94:	40020470 	.word	0x40020470
 8006a98:	40020488 	.word	0x40020488
 8006a9c:	400204a0 	.word	0x400204a0
 8006aa0:	400204b8 	.word	0x400204b8
 8006aa4:	58025408 	.word	0x58025408
 8006aa8:	5802541c 	.word	0x5802541c
 8006aac:	58025430 	.word	0x58025430
 8006ab0:	58025444 	.word	0x58025444
 8006ab4:	58025458 	.word	0x58025458
 8006ab8:	5802546c 	.word	0x5802546c
 8006abc:	58025480 	.word	0x58025480
 8006ac0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d160      	bne.n	8006b90 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a7f      	ldr	r2, [pc, #508]	; (8006cd0 <HAL_DMA_IRQHandler+0xc74>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d04a      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a7d      	ldr	r2, [pc, #500]	; (8006cd4 <HAL_DMA_IRQHandler+0xc78>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d045      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a7c      	ldr	r2, [pc, #496]	; (8006cd8 <HAL_DMA_IRQHandler+0xc7c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d040      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a7a      	ldr	r2, [pc, #488]	; (8006cdc <HAL_DMA_IRQHandler+0xc80>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d03b      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a79      	ldr	r2, [pc, #484]	; (8006ce0 <HAL_DMA_IRQHandler+0xc84>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d036      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a77      	ldr	r2, [pc, #476]	; (8006ce4 <HAL_DMA_IRQHandler+0xc88>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d031      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a76      	ldr	r2, [pc, #472]	; (8006ce8 <HAL_DMA_IRQHandler+0xc8c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d02c      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a74      	ldr	r2, [pc, #464]	; (8006cec <HAL_DMA_IRQHandler+0xc90>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d027      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a73      	ldr	r2, [pc, #460]	; (8006cf0 <HAL_DMA_IRQHandler+0xc94>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d022      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a71      	ldr	r2, [pc, #452]	; (8006cf4 <HAL_DMA_IRQHandler+0xc98>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a70      	ldr	r2, [pc, #448]	; (8006cf8 <HAL_DMA_IRQHandler+0xc9c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d018      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6e      	ldr	r2, [pc, #440]	; (8006cfc <HAL_DMA_IRQHandler+0xca0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a6d      	ldr	r2, [pc, #436]	; (8006d00 <HAL_DMA_IRQHandler+0xca4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a6b      	ldr	r2, [pc, #428]	; (8006d04 <HAL_DMA_IRQHandler+0xca8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a6a      	ldr	r2, [pc, #424]	; (8006d08 <HAL_DMA_IRQHandler+0xcac>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xb12>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a68      	ldr	r2, [pc, #416]	; (8006d0c <HAL_DMA_IRQHandler+0xcb0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <HAL_DMA_IRQHandler+0xb24>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0208 	bic.w	r2, r2, #8
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e007      	b.n	8006b90 <HAL_DMA_IRQHandler+0xb34>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0204 	bic.w	r2, r2, #4
 8006b8e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8165 	beq.w	8006e64 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ba2:	e15f      	b.n	8006e64 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	2202      	movs	r2, #2
 8006bae:	409a      	lsls	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 80c5 	beq.w	8006d44 <HAL_DMA_IRQHandler+0xce8>
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80bf 	beq.w	8006d44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	2202      	movs	r2, #2
 8006bd0:	409a      	lsls	r2, r3
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d018      	beq.n	8006c12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 813a 	beq.w	8006e68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bfc:	e134      	b.n	8006e68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 8130 	beq.w	8006e68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c10:	e12a      	b.n	8006e68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f040 8089 	bne.w	8006d30 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2b      	ldr	r2, [pc, #172]	; (8006cd0 <HAL_DMA_IRQHandler+0xc74>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d04a      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a29      	ldr	r2, [pc, #164]	; (8006cd4 <HAL_DMA_IRQHandler+0xc78>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d045      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a28      	ldr	r2, [pc, #160]	; (8006cd8 <HAL_DMA_IRQHandler+0xc7c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d040      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a26      	ldr	r2, [pc, #152]	; (8006cdc <HAL_DMA_IRQHandler+0xc80>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d03b      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a25      	ldr	r2, [pc, #148]	; (8006ce0 <HAL_DMA_IRQHandler+0xc84>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d036      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a23      	ldr	r2, [pc, #140]	; (8006ce4 <HAL_DMA_IRQHandler+0xc88>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d031      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a22      	ldr	r2, [pc, #136]	; (8006ce8 <HAL_DMA_IRQHandler+0xc8c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d02c      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a20      	ldr	r2, [pc, #128]	; (8006cec <HAL_DMA_IRQHandler+0xc90>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d027      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a1f      	ldr	r2, [pc, #124]	; (8006cf0 <HAL_DMA_IRQHandler+0xc94>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d022      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1d      	ldr	r2, [pc, #116]	; (8006cf4 <HAL_DMA_IRQHandler+0xc98>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d01d      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1c      	ldr	r2, [pc, #112]	; (8006cf8 <HAL_DMA_IRQHandler+0xc9c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d018      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1a      	ldr	r2, [pc, #104]	; (8006cfc <HAL_DMA_IRQHandler+0xca0>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d013      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a19      	ldr	r2, [pc, #100]	; (8006d00 <HAL_DMA_IRQHandler+0xca4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00e      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <HAL_DMA_IRQHandler+0xca8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d009      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a16      	ldr	r2, [pc, #88]	; (8006d08 <HAL_DMA_IRQHandler+0xcac>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d004      	beq.n	8006cbe <HAL_DMA_IRQHandler+0xc62>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a14      	ldr	r2, [pc, #80]	; (8006d0c <HAL_DMA_IRQHandler+0xcb0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d128      	bne.n	8006d10 <HAL_DMA_IRQHandler+0xcb4>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0214 	bic.w	r2, r2, #20
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e027      	b.n	8006d20 <HAL_DMA_IRQHandler+0xcc4>
 8006cd0:	40020010 	.word	0x40020010
 8006cd4:	40020028 	.word	0x40020028
 8006cd8:	40020040 	.word	0x40020040
 8006cdc:	40020058 	.word	0x40020058
 8006ce0:	40020070 	.word	0x40020070
 8006ce4:	40020088 	.word	0x40020088
 8006ce8:	400200a0 	.word	0x400200a0
 8006cec:	400200b8 	.word	0x400200b8
 8006cf0:	40020410 	.word	0x40020410
 8006cf4:	40020428 	.word	0x40020428
 8006cf8:	40020440 	.word	0x40020440
 8006cfc:	40020458 	.word	0x40020458
 8006d00:	40020470 	.word	0x40020470
 8006d04:	40020488 	.word	0x40020488
 8006d08:	400204a0 	.word	0x400204a0
 8006d0c:	400204b8 	.word	0x400204b8
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 020a 	bic.w	r2, r2, #10
 8006d1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 8097 	beq.w	8006e68 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d42:	e091      	b.n	8006e68 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d48:	f003 031f 	and.w	r3, r3, #31
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	409a      	lsls	r2, r3
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	4013      	ands	r3, r2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8088 	beq.w	8006e6a <HAL_DMA_IRQHandler+0xe0e>
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8082 	beq.w	8006e6a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a41      	ldr	r2, [pc, #260]	; (8006e70 <HAL_DMA_IRQHandler+0xe14>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d04a      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a3f      	ldr	r2, [pc, #252]	; (8006e74 <HAL_DMA_IRQHandler+0xe18>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d045      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a3e      	ldr	r2, [pc, #248]	; (8006e78 <HAL_DMA_IRQHandler+0xe1c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d040      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a3c      	ldr	r2, [pc, #240]	; (8006e7c <HAL_DMA_IRQHandler+0xe20>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d03b      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a3b      	ldr	r2, [pc, #236]	; (8006e80 <HAL_DMA_IRQHandler+0xe24>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d036      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a39      	ldr	r2, [pc, #228]	; (8006e84 <HAL_DMA_IRQHandler+0xe28>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d031      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a38      	ldr	r2, [pc, #224]	; (8006e88 <HAL_DMA_IRQHandler+0xe2c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d02c      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a36      	ldr	r2, [pc, #216]	; (8006e8c <HAL_DMA_IRQHandler+0xe30>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d027      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a35      	ldr	r2, [pc, #212]	; (8006e90 <HAL_DMA_IRQHandler+0xe34>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d022      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a33      	ldr	r2, [pc, #204]	; (8006e94 <HAL_DMA_IRQHandler+0xe38>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d01d      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a32      	ldr	r2, [pc, #200]	; (8006e98 <HAL_DMA_IRQHandler+0xe3c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a30      	ldr	r2, [pc, #192]	; (8006e9c <HAL_DMA_IRQHandler+0xe40>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a2f      	ldr	r2, [pc, #188]	; (8006ea0 <HAL_DMA_IRQHandler+0xe44>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a2d      	ldr	r2, [pc, #180]	; (8006ea4 <HAL_DMA_IRQHandler+0xe48>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2c      	ldr	r2, [pc, #176]	; (8006ea8 <HAL_DMA_IRQHandler+0xe4c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xdaa>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2a      	ldr	r2, [pc, #168]	; (8006eac <HAL_DMA_IRQHandler+0xe50>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <HAL_DMA_IRQHandler+0xdbc>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 021c 	bic.w	r2, r2, #28
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e007      	b.n	8006e28 <HAL_DMA_IRQHandler+0xdcc>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 020e 	bic.w	r2, r2, #14
 8006e26:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e2c:	f003 031f 	and.w	r3, r3, #31
 8006e30:	2201      	movs	r2, #1
 8006e32:	409a      	lsls	r2, r3
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
 8006e5e:	e004      	b.n	8006e6a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006e60:	bf00      	nop
 8006e62:	e002      	b.n	8006e6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e64:	bf00      	nop
 8006e66:	e000      	b.n	8006e6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e68:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e6a:	3728      	adds	r7, #40	; 0x28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40020010 	.word	0x40020010
 8006e74:	40020028 	.word	0x40020028
 8006e78:	40020040 	.word	0x40020040
 8006e7c:	40020058 	.word	0x40020058
 8006e80:	40020070 	.word	0x40020070
 8006e84:	40020088 	.word	0x40020088
 8006e88:	400200a0 	.word	0x400200a0
 8006e8c:	400200b8 	.word	0x400200b8
 8006e90:	40020410 	.word	0x40020410
 8006e94:	40020428 	.word	0x40020428
 8006e98:	40020440 	.word	0x40020440
 8006e9c:	40020458 	.word	0x40020458
 8006ea0:	40020470 	.word	0x40020470
 8006ea4:	40020488 	.word	0x40020488
 8006ea8:	400204a0 	.word	0x400204a0
 8006eac:	400204b8 	.word	0x400204b8

08006eb0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a7f      	ldr	r2, [pc, #508]	; (80070cc <DMA_SetConfig+0x21c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d072      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a7d      	ldr	r2, [pc, #500]	; (80070d0 <DMA_SetConfig+0x220>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d06d      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a7c      	ldr	r2, [pc, #496]	; (80070d4 <DMA_SetConfig+0x224>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d068      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a7a      	ldr	r2, [pc, #488]	; (80070d8 <DMA_SetConfig+0x228>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d063      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a79      	ldr	r2, [pc, #484]	; (80070dc <DMA_SetConfig+0x22c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d05e      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a77      	ldr	r2, [pc, #476]	; (80070e0 <DMA_SetConfig+0x230>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d059      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a76      	ldr	r2, [pc, #472]	; (80070e4 <DMA_SetConfig+0x234>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d054      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a74      	ldr	r2, [pc, #464]	; (80070e8 <DMA_SetConfig+0x238>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d04f      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a73      	ldr	r2, [pc, #460]	; (80070ec <DMA_SetConfig+0x23c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d04a      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a71      	ldr	r2, [pc, #452]	; (80070f0 <DMA_SetConfig+0x240>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d045      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a70      	ldr	r2, [pc, #448]	; (80070f4 <DMA_SetConfig+0x244>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d040      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a6e      	ldr	r2, [pc, #440]	; (80070f8 <DMA_SetConfig+0x248>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d03b      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a6d      	ldr	r2, [pc, #436]	; (80070fc <DMA_SetConfig+0x24c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d036      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a6b      	ldr	r2, [pc, #428]	; (8007100 <DMA_SetConfig+0x250>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d031      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a6a      	ldr	r2, [pc, #424]	; (8007104 <DMA_SetConfig+0x254>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d02c      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a68      	ldr	r2, [pc, #416]	; (8007108 <DMA_SetConfig+0x258>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d027      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a67      	ldr	r2, [pc, #412]	; (800710c <DMA_SetConfig+0x25c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d022      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a65      	ldr	r2, [pc, #404]	; (8007110 <DMA_SetConfig+0x260>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d01d      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a64      	ldr	r2, [pc, #400]	; (8007114 <DMA_SetConfig+0x264>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d018      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a62      	ldr	r2, [pc, #392]	; (8007118 <DMA_SetConfig+0x268>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d013      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a61      	ldr	r2, [pc, #388]	; (800711c <DMA_SetConfig+0x26c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00e      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a5f      	ldr	r2, [pc, #380]	; (8007120 <DMA_SetConfig+0x270>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d009      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a5e      	ldr	r2, [pc, #376]	; (8007124 <DMA_SetConfig+0x274>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d004      	beq.n	8006fba <DMA_SetConfig+0x10a>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a5c      	ldr	r2, [pc, #368]	; (8007128 <DMA_SetConfig+0x278>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d101      	bne.n	8006fbe <DMA_SetConfig+0x10e>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e000      	b.n	8006fc0 <DMA_SetConfig+0x110>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00d      	beq.n	8006fe0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fcc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d004      	beq.n	8006fe0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fde:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a39      	ldr	r2, [pc, #228]	; (80070cc <DMA_SetConfig+0x21c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d04a      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a38      	ldr	r2, [pc, #224]	; (80070d0 <DMA_SetConfig+0x220>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d045      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a36      	ldr	r2, [pc, #216]	; (80070d4 <DMA_SetConfig+0x224>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d040      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a35      	ldr	r2, [pc, #212]	; (80070d8 <DMA_SetConfig+0x228>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d03b      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a33      	ldr	r2, [pc, #204]	; (80070dc <DMA_SetConfig+0x22c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d036      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a32      	ldr	r2, [pc, #200]	; (80070e0 <DMA_SetConfig+0x230>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d031      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a30      	ldr	r2, [pc, #192]	; (80070e4 <DMA_SetConfig+0x234>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d02c      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a2f      	ldr	r2, [pc, #188]	; (80070e8 <DMA_SetConfig+0x238>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d027      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a2d      	ldr	r2, [pc, #180]	; (80070ec <DMA_SetConfig+0x23c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d022      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a2c      	ldr	r2, [pc, #176]	; (80070f0 <DMA_SetConfig+0x240>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d01d      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a2a      	ldr	r2, [pc, #168]	; (80070f4 <DMA_SetConfig+0x244>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d018      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a29      	ldr	r2, [pc, #164]	; (80070f8 <DMA_SetConfig+0x248>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d013      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a27      	ldr	r2, [pc, #156]	; (80070fc <DMA_SetConfig+0x24c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00e      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a26      	ldr	r2, [pc, #152]	; (8007100 <DMA_SetConfig+0x250>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d009      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a24      	ldr	r2, [pc, #144]	; (8007104 <DMA_SetConfig+0x254>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d004      	beq.n	8007080 <DMA_SetConfig+0x1d0>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a23      	ldr	r2, [pc, #140]	; (8007108 <DMA_SetConfig+0x258>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d101      	bne.n	8007084 <DMA_SetConfig+0x1d4>
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <DMA_SetConfig+0x1d6>
 8007084:	2300      	movs	r3, #0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d059      	beq.n	800713e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	223f      	movs	r2, #63	; 0x3f
 8007094:	409a      	lsls	r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070a8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	d138      	bne.n	800712c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070ca:	e086      	b.n	80071da <DMA_SetConfig+0x32a>
 80070cc:	40020010 	.word	0x40020010
 80070d0:	40020028 	.word	0x40020028
 80070d4:	40020040 	.word	0x40020040
 80070d8:	40020058 	.word	0x40020058
 80070dc:	40020070 	.word	0x40020070
 80070e0:	40020088 	.word	0x40020088
 80070e4:	400200a0 	.word	0x400200a0
 80070e8:	400200b8 	.word	0x400200b8
 80070ec:	40020410 	.word	0x40020410
 80070f0:	40020428 	.word	0x40020428
 80070f4:	40020440 	.word	0x40020440
 80070f8:	40020458 	.word	0x40020458
 80070fc:	40020470 	.word	0x40020470
 8007100:	40020488 	.word	0x40020488
 8007104:	400204a0 	.word	0x400204a0
 8007108:	400204b8 	.word	0x400204b8
 800710c:	58025408 	.word	0x58025408
 8007110:	5802541c 	.word	0x5802541c
 8007114:	58025430 	.word	0x58025430
 8007118:	58025444 	.word	0x58025444
 800711c:	58025458 	.word	0x58025458
 8007120:	5802546c 	.word	0x5802546c
 8007124:	58025480 	.word	0x58025480
 8007128:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	60da      	str	r2, [r3, #12]
}
 800713c:	e04d      	b.n	80071da <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a29      	ldr	r2, [pc, #164]	; (80071e8 <DMA_SetConfig+0x338>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d022      	beq.n	800718e <DMA_SetConfig+0x2de>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a27      	ldr	r2, [pc, #156]	; (80071ec <DMA_SetConfig+0x33c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01d      	beq.n	800718e <DMA_SetConfig+0x2de>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a26      	ldr	r2, [pc, #152]	; (80071f0 <DMA_SetConfig+0x340>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d018      	beq.n	800718e <DMA_SetConfig+0x2de>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a24      	ldr	r2, [pc, #144]	; (80071f4 <DMA_SetConfig+0x344>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d013      	beq.n	800718e <DMA_SetConfig+0x2de>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a23      	ldr	r2, [pc, #140]	; (80071f8 <DMA_SetConfig+0x348>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00e      	beq.n	800718e <DMA_SetConfig+0x2de>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a21      	ldr	r2, [pc, #132]	; (80071fc <DMA_SetConfig+0x34c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d009      	beq.n	800718e <DMA_SetConfig+0x2de>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a20      	ldr	r2, [pc, #128]	; (8007200 <DMA_SetConfig+0x350>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d004      	beq.n	800718e <DMA_SetConfig+0x2de>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a1e      	ldr	r2, [pc, #120]	; (8007204 <DMA_SetConfig+0x354>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d101      	bne.n	8007192 <DMA_SetConfig+0x2e2>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <DMA_SetConfig+0x2e4>
 8007192:	2300      	movs	r3, #0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d020      	beq.n	80071da <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	2201      	movs	r2, #1
 80071a2:	409a      	lsls	r2, r3
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2b40      	cmp	r3, #64	; 0x40
 80071b6:	d108      	bne.n	80071ca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	60da      	str	r2, [r3, #12]
}
 80071c8:	e007      	b.n	80071da <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	60da      	str	r2, [r3, #12]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	58025408 	.word	0x58025408
 80071ec:	5802541c 	.word	0x5802541c
 80071f0:	58025430 	.word	0x58025430
 80071f4:	58025444 	.word	0x58025444
 80071f8:	58025458 	.word	0x58025458
 80071fc:	5802546c 	.word	0x5802546c
 8007200:	58025480 	.word	0x58025480
 8007204:	58025494 	.word	0x58025494

08007208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a42      	ldr	r2, [pc, #264]	; (8007320 <DMA_CalcBaseAndBitshift+0x118>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d04a      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a41      	ldr	r2, [pc, #260]	; (8007324 <DMA_CalcBaseAndBitshift+0x11c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d045      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a3f      	ldr	r2, [pc, #252]	; (8007328 <DMA_CalcBaseAndBitshift+0x120>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d040      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a3e      	ldr	r2, [pc, #248]	; (800732c <DMA_CalcBaseAndBitshift+0x124>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d03b      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a3c      	ldr	r2, [pc, #240]	; (8007330 <DMA_CalcBaseAndBitshift+0x128>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d036      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a3b      	ldr	r2, [pc, #236]	; (8007334 <DMA_CalcBaseAndBitshift+0x12c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d031      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a39      	ldr	r2, [pc, #228]	; (8007338 <DMA_CalcBaseAndBitshift+0x130>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d02c      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a38      	ldr	r2, [pc, #224]	; (800733c <DMA_CalcBaseAndBitshift+0x134>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d027      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a36      	ldr	r2, [pc, #216]	; (8007340 <DMA_CalcBaseAndBitshift+0x138>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d022      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a35      	ldr	r2, [pc, #212]	; (8007344 <DMA_CalcBaseAndBitshift+0x13c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d01d      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a33      	ldr	r2, [pc, #204]	; (8007348 <DMA_CalcBaseAndBitshift+0x140>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d018      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a32      	ldr	r2, [pc, #200]	; (800734c <DMA_CalcBaseAndBitshift+0x144>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d013      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a30      	ldr	r2, [pc, #192]	; (8007350 <DMA_CalcBaseAndBitshift+0x148>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00e      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a2f      	ldr	r2, [pc, #188]	; (8007354 <DMA_CalcBaseAndBitshift+0x14c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d009      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a2d      	ldr	r2, [pc, #180]	; (8007358 <DMA_CalcBaseAndBitshift+0x150>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d004      	beq.n	80072b0 <DMA_CalcBaseAndBitshift+0xa8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a2c      	ldr	r2, [pc, #176]	; (800735c <DMA_CalcBaseAndBitshift+0x154>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d101      	bne.n	80072b4 <DMA_CalcBaseAndBitshift+0xac>
 80072b0:	2301      	movs	r3, #1
 80072b2:	e000      	b.n	80072b6 <DMA_CalcBaseAndBitshift+0xae>
 80072b4:	2300      	movs	r3, #0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d024      	beq.n	8007304 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	3b10      	subs	r3, #16
 80072c2:	4a27      	ldr	r2, [pc, #156]	; (8007360 <DMA_CalcBaseAndBitshift+0x158>)
 80072c4:	fba2 2303 	umull	r2, r3, r2, r3
 80072c8:	091b      	lsrs	r3, r3, #4
 80072ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	4a24      	ldr	r2, [pc, #144]	; (8007364 <DMA_CalcBaseAndBitshift+0x15c>)
 80072d4:	5cd3      	ldrb	r3, [r2, r3]
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d908      	bls.n	80072f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	4b1f      	ldr	r3, [pc, #124]	; (8007368 <DMA_CalcBaseAndBitshift+0x160>)
 80072ea:	4013      	ands	r3, r2
 80072ec:	1d1a      	adds	r2, r3, #4
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	659a      	str	r2, [r3, #88]	; 0x58
 80072f2:	e00d      	b.n	8007310 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <DMA_CalcBaseAndBitshift+0x160>)
 80072fc:	4013      	ands	r3, r2
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6593      	str	r3, [r2, #88]	; 0x58
 8007302:	e005      	b.n	8007310 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	40020010 	.word	0x40020010
 8007324:	40020028 	.word	0x40020028
 8007328:	40020040 	.word	0x40020040
 800732c:	40020058 	.word	0x40020058
 8007330:	40020070 	.word	0x40020070
 8007334:	40020088 	.word	0x40020088
 8007338:	400200a0 	.word	0x400200a0
 800733c:	400200b8 	.word	0x400200b8
 8007340:	40020410 	.word	0x40020410
 8007344:	40020428 	.word	0x40020428
 8007348:	40020440 	.word	0x40020440
 800734c:	40020458 	.word	0x40020458
 8007350:	40020470 	.word	0x40020470
 8007354:	40020488 	.word	0x40020488
 8007358:	400204a0 	.word	0x400204a0
 800735c:	400204b8 	.word	0x400204b8
 8007360:	aaaaaaab 	.word	0xaaaaaaab
 8007364:	08012a18 	.word	0x08012a18
 8007368:	fffffc00 	.word	0xfffffc00

0800736c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d120      	bne.n	80073c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007384:	2b03      	cmp	r3, #3
 8007386:	d858      	bhi.n	800743a <DMA_CheckFifoParam+0xce>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <DMA_CheckFifoParam+0x24>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073a1 	.word	0x080073a1
 8007394:	080073b3 	.word	0x080073b3
 8007398:	080073a1 	.word	0x080073a1
 800739c:	0800743b 	.word	0x0800743b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d048      	beq.n	800743e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073b0:	e045      	b.n	800743e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073ba:	d142      	bne.n	8007442 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073c0:	e03f      	b.n	8007442 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ca:	d123      	bne.n	8007414 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d838      	bhi.n	8007446 <DMA_CheckFifoParam+0xda>
 80073d4:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <DMA_CheckFifoParam+0x70>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	080073ed 	.word	0x080073ed
 80073e0:	080073f3 	.word	0x080073f3
 80073e4:	080073ed 	.word	0x080073ed
 80073e8:	08007405 	.word	0x08007405
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
        break;
 80073f0:	e030      	b.n	8007454 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d025      	beq.n	800744a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007402:	e022      	b.n	800744a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800740c:	d11f      	bne.n	800744e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007412:	e01c      	b.n	800744e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007418:	2b02      	cmp	r3, #2
 800741a:	d902      	bls.n	8007422 <DMA_CheckFifoParam+0xb6>
 800741c:	2b03      	cmp	r3, #3
 800741e:	d003      	beq.n	8007428 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007420:	e018      	b.n	8007454 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	73fb      	strb	r3, [r7, #15]
        break;
 8007426:	e015      	b.n	8007454 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00e      	beq.n	8007452 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	73fb      	strb	r3, [r7, #15]
    break;
 8007438:	e00b      	b.n	8007452 <DMA_CheckFifoParam+0xe6>
        break;
 800743a:	bf00      	nop
 800743c:	e00a      	b.n	8007454 <DMA_CheckFifoParam+0xe8>
        break;
 800743e:	bf00      	nop
 8007440:	e008      	b.n	8007454 <DMA_CheckFifoParam+0xe8>
        break;
 8007442:	bf00      	nop
 8007444:	e006      	b.n	8007454 <DMA_CheckFifoParam+0xe8>
        break;
 8007446:	bf00      	nop
 8007448:	e004      	b.n	8007454 <DMA_CheckFifoParam+0xe8>
        break;
 800744a:	bf00      	nop
 800744c:	e002      	b.n	8007454 <DMA_CheckFifoParam+0xe8>
        break;
 800744e:	bf00      	nop
 8007450:	e000      	b.n	8007454 <DMA_CheckFifoParam+0xe8>
    break;
 8007452:	bf00      	nop
    }
  }

  return status;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop

08007464 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a38      	ldr	r2, [pc, #224]	; (8007558 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d022      	beq.n	80074c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a36      	ldr	r2, [pc, #216]	; (800755c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d01d      	beq.n	80074c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a35      	ldr	r2, [pc, #212]	; (8007560 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d018      	beq.n	80074c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a33      	ldr	r2, [pc, #204]	; (8007564 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a32      	ldr	r2, [pc, #200]	; (8007568 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00e      	beq.n	80074c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a30      	ldr	r2, [pc, #192]	; (800756c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d009      	beq.n	80074c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a2f      	ldr	r2, [pc, #188]	; (8007570 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a2d      	ldr	r2, [pc, #180]	; (8007574 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d101      	bne.n	80074c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e000      	b.n	80074c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80074c6:	2300      	movs	r3, #0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01a      	beq.n	8007502 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	3b08      	subs	r3, #8
 80074d4:	4a28      	ldr	r2, [pc, #160]	; (8007578 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80074d6:	fba2 2303 	umull	r2, r3, r2, r3
 80074da:	091b      	lsrs	r3, r3, #4
 80074dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4b26      	ldr	r3, [pc, #152]	; (800757c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	461a      	mov	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a24      	ldr	r2, [pc, #144]	; (8007580 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80074f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f003 031f 	and.w	r3, r3, #31
 80074f8:	2201      	movs	r2, #1
 80074fa:	409a      	lsls	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007500:	e024      	b.n	800754c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	3b10      	subs	r3, #16
 800750a:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800750c:	fba2 2303 	umull	r2, r3, r2, r3
 8007510:	091b      	lsrs	r3, r3, #4
 8007512:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4a1c      	ldr	r2, [pc, #112]	; (8007588 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d806      	bhi.n	800752a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4a1b      	ldr	r2, [pc, #108]	; (800758c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d902      	bls.n	800752a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	3308      	adds	r3, #8
 8007528:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4b18      	ldr	r3, [pc, #96]	; (8007590 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	461a      	mov	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a16      	ldr	r2, [pc, #88]	; (8007594 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800753c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	2201      	movs	r2, #1
 8007546:	409a      	lsls	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800754c:	bf00      	nop
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	58025408 	.word	0x58025408
 800755c:	5802541c 	.word	0x5802541c
 8007560:	58025430 	.word	0x58025430
 8007564:	58025444 	.word	0x58025444
 8007568:	58025458 	.word	0x58025458
 800756c:	5802546c 	.word	0x5802546c
 8007570:	58025480 	.word	0x58025480
 8007574:	58025494 	.word	0x58025494
 8007578:	cccccccd 	.word	0xcccccccd
 800757c:	16009600 	.word	0x16009600
 8007580:	58025880 	.word	0x58025880
 8007584:	aaaaaaab 	.word	0xaaaaaaab
 8007588:	400204b8 	.word	0x400204b8
 800758c:	4002040f 	.word	0x4002040f
 8007590:	10008200 	.word	0x10008200
 8007594:	40020880 	.word	0x40020880

08007598 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d04a      	beq.n	8007644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d847      	bhi.n	8007644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a25      	ldr	r2, [pc, #148]	; (8007650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d022      	beq.n	8007604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a24      	ldr	r2, [pc, #144]	; (8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d01d      	beq.n	8007604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a22      	ldr	r2, [pc, #136]	; (8007658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d018      	beq.n	8007604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a21      	ldr	r2, [pc, #132]	; (800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d013      	beq.n	8007604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00e      	beq.n	8007604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a1e      	ldr	r2, [pc, #120]	; (8007664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d009      	beq.n	8007604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1c      	ldr	r2, [pc, #112]	; (8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d004      	beq.n	8007604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1b      	ldr	r2, [pc, #108]	; (800766c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d101      	bne.n	8007608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007604:	2301      	movs	r3, #1
 8007606:	e000      	b.n	800760a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007608:	2300      	movs	r3, #0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4b17      	ldr	r3, [pc, #92]	; (8007670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007612:	4413      	add	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	461a      	mov	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a15      	ldr	r2, [pc, #84]	; (8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007620:	671a      	str	r2, [r3, #112]	; 0x70
 8007622:	e009      	b.n	8007638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007628:	4413      	add	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	461a      	mov	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a11      	ldr	r2, [pc, #68]	; (800767c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007636:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3b01      	subs	r3, #1
 800763c:	2201      	movs	r2, #1
 800763e:	409a      	lsls	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	58025408 	.word	0x58025408
 8007654:	5802541c 	.word	0x5802541c
 8007658:	58025430 	.word	0x58025430
 800765c:	58025444 	.word	0x58025444
 8007660:	58025458 	.word	0x58025458
 8007664:	5802546c 	.word	0x5802546c
 8007668:	58025480 	.word	0x58025480
 800766c:	58025494 	.word	0x58025494
 8007670:	1600963f 	.word	0x1600963f
 8007674:	58025940 	.word	0x58025940
 8007678:	1000823f 	.word	0x1000823f
 800767c:	40020940 	.word	0x40020940

08007680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007680:	b480      	push	{r7}
 8007682:	b089      	sub	sp, #36	; 0x24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800768a:	2300      	movs	r3, #0
 800768c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800768e:	4b89      	ldr	r3, [pc, #548]	; (80078b4 <HAL_GPIO_Init+0x234>)
 8007690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007692:	e194      	b.n	80079be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	2101      	movs	r1, #1
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	fa01 f303 	lsl.w	r3, r1, r3
 80076a0:	4013      	ands	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8186 	beq.w	80079b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f003 0303 	and.w	r3, r3, #3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d005      	beq.n	80076c4 <HAL_GPIO_Init+0x44>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f003 0303 	and.w	r3, r3, #3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d130      	bne.n	8007726 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	2203      	movs	r2, #3
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	43db      	mvns	r3, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4013      	ands	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	fa02 f303 	lsl.w	r3, r2, r3
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076fa:	2201      	movs	r2, #1
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	43db      	mvns	r3, r3
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	4013      	ands	r3, r2
 8007708:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	091b      	lsrs	r3, r3, #4
 8007710:	f003 0201 	and.w	r2, r3, #1
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	fa02 f303 	lsl.w	r3, r2, r3
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	4313      	orrs	r3, r2
 800771e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	2b03      	cmp	r3, #3
 8007730:	d017      	beq.n	8007762 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	2203      	movs	r2, #3
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	43db      	mvns	r3, r3
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	4013      	ands	r3, r2
 8007748:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	fa02 f303 	lsl.w	r3, r2, r3
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	4313      	orrs	r3, r2
 800775a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d123      	bne.n	80077b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	08da      	lsrs	r2, r3, #3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3208      	adds	r2, #8
 8007776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	220f      	movs	r2, #15
 8007786:	fa02 f303 	lsl.w	r3, r2, r3
 800778a:	43db      	mvns	r3, r3
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	4013      	ands	r3, r2
 8007790:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	fa02 f303 	lsl.w	r3, r2, r3
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	08da      	lsrs	r2, r3, #3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3208      	adds	r2, #8
 80077b0:	69b9      	ldr	r1, [r7, #24]
 80077b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	2203      	movs	r2, #3
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	43db      	mvns	r3, r3
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	4013      	ands	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f003 0203 	and.w	r2, r3, #3
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	fa02 f303 	lsl.w	r3, r2, r3
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80e0 	beq.w	80079b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077f8:	4b2f      	ldr	r3, [pc, #188]	; (80078b8 <HAL_GPIO_Init+0x238>)
 80077fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077fe:	4a2e      	ldr	r2, [pc, #184]	; (80078b8 <HAL_GPIO_Init+0x238>)
 8007800:	f043 0302 	orr.w	r3, r3, #2
 8007804:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007808:	4b2b      	ldr	r3, [pc, #172]	; (80078b8 <HAL_GPIO_Init+0x238>)
 800780a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007816:	4a29      	ldr	r2, [pc, #164]	; (80078bc <HAL_GPIO_Init+0x23c>)
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	089b      	lsrs	r3, r3, #2
 800781c:	3302      	adds	r3, #2
 800781e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	220f      	movs	r2, #15
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	43db      	mvns	r3, r3
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	4013      	ands	r3, r2
 8007838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a20      	ldr	r2, [pc, #128]	; (80078c0 <HAL_GPIO_Init+0x240>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d052      	beq.n	80078e8 <HAL_GPIO_Init+0x268>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a1f      	ldr	r2, [pc, #124]	; (80078c4 <HAL_GPIO_Init+0x244>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d031      	beq.n	80078ae <HAL_GPIO_Init+0x22e>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a1e      	ldr	r2, [pc, #120]	; (80078c8 <HAL_GPIO_Init+0x248>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d02b      	beq.n	80078aa <HAL_GPIO_Init+0x22a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a1d      	ldr	r2, [pc, #116]	; (80078cc <HAL_GPIO_Init+0x24c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d025      	beq.n	80078a6 <HAL_GPIO_Init+0x226>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a1c      	ldr	r2, [pc, #112]	; (80078d0 <HAL_GPIO_Init+0x250>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d01f      	beq.n	80078a2 <HAL_GPIO_Init+0x222>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a1b      	ldr	r2, [pc, #108]	; (80078d4 <HAL_GPIO_Init+0x254>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d019      	beq.n	800789e <HAL_GPIO_Init+0x21e>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a1a      	ldr	r2, [pc, #104]	; (80078d8 <HAL_GPIO_Init+0x258>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d013      	beq.n	800789a <HAL_GPIO_Init+0x21a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a19      	ldr	r2, [pc, #100]	; (80078dc <HAL_GPIO_Init+0x25c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d00d      	beq.n	8007896 <HAL_GPIO_Init+0x216>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a18      	ldr	r2, [pc, #96]	; (80078e0 <HAL_GPIO_Init+0x260>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d007      	beq.n	8007892 <HAL_GPIO_Init+0x212>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a17      	ldr	r2, [pc, #92]	; (80078e4 <HAL_GPIO_Init+0x264>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d101      	bne.n	800788e <HAL_GPIO_Init+0x20e>
 800788a:	2309      	movs	r3, #9
 800788c:	e02d      	b.n	80078ea <HAL_GPIO_Init+0x26a>
 800788e:	230a      	movs	r3, #10
 8007890:	e02b      	b.n	80078ea <HAL_GPIO_Init+0x26a>
 8007892:	2308      	movs	r3, #8
 8007894:	e029      	b.n	80078ea <HAL_GPIO_Init+0x26a>
 8007896:	2307      	movs	r3, #7
 8007898:	e027      	b.n	80078ea <HAL_GPIO_Init+0x26a>
 800789a:	2306      	movs	r3, #6
 800789c:	e025      	b.n	80078ea <HAL_GPIO_Init+0x26a>
 800789e:	2305      	movs	r3, #5
 80078a0:	e023      	b.n	80078ea <HAL_GPIO_Init+0x26a>
 80078a2:	2304      	movs	r3, #4
 80078a4:	e021      	b.n	80078ea <HAL_GPIO_Init+0x26a>
 80078a6:	2303      	movs	r3, #3
 80078a8:	e01f      	b.n	80078ea <HAL_GPIO_Init+0x26a>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e01d      	b.n	80078ea <HAL_GPIO_Init+0x26a>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e01b      	b.n	80078ea <HAL_GPIO_Init+0x26a>
 80078b2:	bf00      	nop
 80078b4:	58000080 	.word	0x58000080
 80078b8:	58024400 	.word	0x58024400
 80078bc:	58000400 	.word	0x58000400
 80078c0:	58020000 	.word	0x58020000
 80078c4:	58020400 	.word	0x58020400
 80078c8:	58020800 	.word	0x58020800
 80078cc:	58020c00 	.word	0x58020c00
 80078d0:	58021000 	.word	0x58021000
 80078d4:	58021400 	.word	0x58021400
 80078d8:	58021800 	.word	0x58021800
 80078dc:	58021c00 	.word	0x58021c00
 80078e0:	58022000 	.word	0x58022000
 80078e4:	58022400 	.word	0x58022400
 80078e8:	2300      	movs	r3, #0
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	f002 0203 	and.w	r2, r2, #3
 80078f0:	0092      	lsls	r2, r2, #2
 80078f2:	4093      	lsls	r3, r2
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078fa:	4938      	ldr	r1, [pc, #224]	; (80079dc <HAL_GPIO_Init+0x35c>)
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	089b      	lsrs	r3, r3, #2
 8007900:	3302      	adds	r3, #2
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	43db      	mvns	r3, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4013      	ands	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	4313      	orrs	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800792e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	43db      	mvns	r3, r3
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	4013      	ands	r3, r2
 8007946:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	4313      	orrs	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800795c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	43db      	mvns	r3, r3
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	4013      	ands	r3, r2
 8007972:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	43db      	mvns	r3, r3
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	4013      	ands	r3, r2
 800799c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	3301      	adds	r3, #1
 80079bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	fa22 f303 	lsr.w	r3, r2, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f47f ae63 	bne.w	8007694 <HAL_GPIO_Init+0x14>
  }
}
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	3724      	adds	r7, #36	; 0x24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	58000400 	.word	0x58000400

080079e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691a      	ldr	r2, [r3, #16]
 80079f0:	887b      	ldrh	r3, [r7, #2]
 80079f2:	4013      	ands	r3, r2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079f8:	2301      	movs	r3, #1
 80079fa:	73fb      	strb	r3, [r7, #15]
 80079fc:	e001      	b.n	8007a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	807b      	strh	r3, [r7, #2]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a20:	787b      	ldrb	r3, [r7, #1]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a26:	887a      	ldrh	r2, [r7, #2]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a2c:	e003      	b.n	8007a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a2e:	887b      	ldrh	r3, [r7, #2]
 8007a30:	041a      	lsls	r2, r3, #16
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	619a      	str	r2, [r3, #24]
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b085      	sub	sp, #20
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a54:	887a      	ldrh	r2, [r7, #2]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	041a      	lsls	r2, r3, #16
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	43d9      	mvns	r1, r3
 8007a60:	887b      	ldrh	r3, [r7, #2]
 8007a62:	400b      	ands	r3, r1
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	619a      	str	r2, [r3, #24]
}
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
	...

08007a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e07f      	b.n	8007b8a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d106      	bne.n	8007aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7fa faec 	bl	800207c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2224      	movs	r2, #36	; 0x24
 8007aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0201 	bic.w	r2, r2, #1
 8007aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ac8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ad8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d107      	bne.n	8007af2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007aee:	609a      	str	r2, [r3, #8]
 8007af0:	e006      	b.n	8007b00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007afe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d104      	bne.n	8007b12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6859      	ldr	r1, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <HAL_I2C_Init+0x11c>)
 8007b1e:	430b      	orrs	r3, r1
 8007b20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691a      	ldr	r2, [r3, #16]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69d9      	ldr	r1, [r3, #28]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a1a      	ldr	r2, [r3, #32]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	02008000 	.word	0x02008000

08007b98 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af02      	add	r7, sp, #8
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	607a      	str	r2, [r7, #4]
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	f040 80ef 	bne.w	8007d98 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc8:	d101      	bne.n	8007bce <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e0e5      	b.n	8007d9a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_I2C_IsDeviceReady+0x44>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e0de      	b.n	8007d9a <HAL_I2C_IsDeviceReady+0x202>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2224      	movs	r2, #36	; 0x24
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d105      	bne.n	8007c06 <HAL_I2C_IsDeviceReady+0x6e>
 8007bfa:	897b      	ldrh	r3, [r7, #10]
 8007bfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c00:	4b68      	ldr	r3, [pc, #416]	; (8007da4 <HAL_I2C_IsDeviceReady+0x20c>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	e004      	b.n	8007c10 <HAL_I2C_IsDeviceReady+0x78>
 8007c06:	897b      	ldrh	r3, [r7, #10]
 8007c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c0c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	6812      	ldr	r2, [r2, #0]
 8007c14:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007c16:	f7fb f82b 	bl	8002c70 <HAL_GetTick>
 8007c1a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	bf0c      	ite	eq
 8007c2a:	2301      	moveq	r3, #1
 8007c2c:	2300      	movne	r3, #0
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	f003 0310 	and.w	r3, r3, #16
 8007c3c:	2b10      	cmp	r3, #16
 8007c3e:	bf0c      	ite	eq
 8007c40:	2301      	moveq	r3, #1
 8007c42:	2300      	movne	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007c48:	e034      	b.n	8007cb4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c50:	d01a      	beq.n	8007c88 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c52:	f7fb f80d 	bl	8002c70 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d302      	bcc.n	8007c68 <HAL_I2C_IsDeviceReady+0xd0>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10f      	bne.n	8007c88 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c74:	f043 0220 	orr.w	r2, r3, #32
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e088      	b.n	8007d9a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	bf0c      	ite	eq
 8007c96:	2301      	moveq	r3, #1
 8007c98:	2300      	movne	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	bf0c      	ite	eq
 8007cac:	2301      	moveq	r3, #1
 8007cae:	2300      	movne	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007cb4:	7ffb      	ldrb	r3, [r7, #31]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d102      	bne.n	8007cc0 <HAL_I2C_IsDeviceReady+0x128>
 8007cba:	7fbb      	ldrb	r3, [r7, #30]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0c4      	beq.n	8007c4a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f003 0310 	and.w	r3, r3, #16
 8007cca:	2b10      	cmp	r3, #16
 8007ccc:	d01a      	beq.n	8007d04 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2120      	movs	r1, #32
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 f865 	bl	8007da8 <I2C_WaitOnFlagUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e058      	b.n	8007d9a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2220      	movs	r2, #32
 8007cee:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	e04a      	b.n	8007d9a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2120      	movs	r1, #32
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 f84a 	bl	8007da8 <I2C_WaitOnFlagUntilTimeout>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e03d      	b.n	8007d9a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2210      	movs	r2, #16
 8007d24:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d118      	bne.n	8007d68 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d44:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2120      	movs	r1, #32
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f829 	bl	8007da8 <I2C_WaitOnFlagUntilTimeout>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e01c      	b.n	8007d9a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2220      	movs	r2, #32
 8007d66:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	f63f af3d 	bhi.w	8007bf2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d84:	f043 0220 	orr.w	r2, r3, #32
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e000      	b.n	8007d9a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8007d98:	2302      	movs	r3, #2
  }
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3720      	adds	r7, #32
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	02002000 	.word	0x02002000

08007da8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	4613      	mov	r3, r2
 8007db6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007db8:	e031      	b.n	8007e1e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dc0:	d02d      	beq.n	8007e1e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dc2:	f7fa ff55 	bl	8002c70 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d302      	bcc.n	8007dd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d122      	bne.n	8007e1e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699a      	ldr	r2, [r3, #24]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	4013      	ands	r3, r2
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	bf0c      	ite	eq
 8007de8:	2301      	moveq	r3, #1
 8007dea:	2300      	movne	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	461a      	mov	r2, r3
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d113      	bne.n	8007e1e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfa:	f043 0220 	orr.w	r2, r3, #32
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e00f      	b.n	8007e3e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699a      	ldr	r2, [r3, #24]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	4013      	ands	r3, r2
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	bf0c      	ite	eq
 8007e2e:	2301      	moveq	r3, #1
 8007e30:	2300      	movne	r3, #0
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	461a      	mov	r2, r3
 8007e36:	79fb      	ldrb	r3, [r7, #7]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d0be      	beq.n	8007dba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b20      	cmp	r3, #32
 8007e5a:	d138      	bne.n	8007ece <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d101      	bne.n	8007e6a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e032      	b.n	8007ed0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2224      	movs	r2, #36	; 0x24
 8007e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0201 	bic.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e98:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6819      	ldr	r1, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f042 0201 	orr.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e000      	b.n	8007ed0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ece:	2302      	movs	r3, #2
  }
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d139      	bne.n	8007f66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e033      	b.n	8007f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2224      	movs	r2, #36	; 0x24
 8007f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0201 	bic.w	r2, r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f042 0201 	orr.w	r2, r2, #1
 8007f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2220      	movs	r2, #32
 8007f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	e000      	b.n	8007f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f66:	2302      	movs	r3, #2
  }
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007f7c:	4b19      	ldr	r3, [pc, #100]	; (8007fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d00a      	beq.n	8007f9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007f88:	4b16      	ldr	r3, [pc, #88]	; (8007fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d001      	beq.n	8007f9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e01f      	b.n	8007fda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	e01d      	b.n	8007fda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007f9e:	4b11      	ldr	r3, [pc, #68]	; (8007fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f023 0207 	bic.w	r2, r3, #7
 8007fa6:	490f      	ldr	r1, [pc, #60]	; (8007fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007fae:	f7fa fe5f 	bl	8002c70 <HAL_GetTick>
 8007fb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fb4:	e009      	b.n	8007fca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007fb6:	f7fa fe5b 	bl	8002c70 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fc4:	d901      	bls.n	8007fca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e007      	b.n	8007fda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fca:	4b06      	ldr	r3, [pc, #24]	; (8007fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd6:	d1ee      	bne.n	8007fb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	58024800 	.word	0x58024800

08007fe8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08c      	sub	sp, #48	; 0x30
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d102      	bne.n	8007ffc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f000 bc48 	b.w	800888c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8088 	beq.w	800811a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800800a:	4b99      	ldr	r3, [pc, #612]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008012:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008014:	4b96      	ldr	r3, [pc, #600]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801c:	2b10      	cmp	r3, #16
 800801e:	d007      	beq.n	8008030 <HAL_RCC_OscConfig+0x48>
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	2b18      	cmp	r3, #24
 8008024:	d111      	bne.n	800804a <HAL_RCC_OscConfig+0x62>
 8008026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008028:	f003 0303 	and.w	r3, r3, #3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d10c      	bne.n	800804a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008030:	4b8f      	ldr	r3, [pc, #572]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d06d      	beq.n	8008118 <HAL_RCC_OscConfig+0x130>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d169      	bne.n	8008118 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	f000 bc21 	b.w	800888c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008052:	d106      	bne.n	8008062 <HAL_RCC_OscConfig+0x7a>
 8008054:	4b86      	ldr	r3, [pc, #536]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a85      	ldr	r2, [pc, #532]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 800805a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	e02e      	b.n	80080c0 <HAL_RCC_OscConfig+0xd8>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10c      	bne.n	8008084 <HAL_RCC_OscConfig+0x9c>
 800806a:	4b81      	ldr	r3, [pc, #516]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a80      	ldr	r2, [pc, #512]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	4b7e      	ldr	r3, [pc, #504]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a7d      	ldr	r2, [pc, #500]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 800807c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008080:	6013      	str	r3, [r2, #0]
 8008082:	e01d      	b.n	80080c0 <HAL_RCC_OscConfig+0xd8>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800808c:	d10c      	bne.n	80080a8 <HAL_RCC_OscConfig+0xc0>
 800808e:	4b78      	ldr	r3, [pc, #480]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a77      	ldr	r2, [pc, #476]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008098:	6013      	str	r3, [r2, #0]
 800809a:	4b75      	ldr	r3, [pc, #468]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a74      	ldr	r2, [pc, #464]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80080a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	e00b      	b.n	80080c0 <HAL_RCC_OscConfig+0xd8>
 80080a8:	4b71      	ldr	r3, [pc, #452]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a70      	ldr	r2, [pc, #448]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80080ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080b2:	6013      	str	r3, [r2, #0]
 80080b4:	4b6e      	ldr	r3, [pc, #440]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a6d      	ldr	r2, [pc, #436]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80080ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d013      	beq.n	80080f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c8:	f7fa fdd2 	bl	8002c70 <HAL_GetTick>
 80080cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080d0:	f7fa fdce 	bl	8002c70 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b64      	cmp	r3, #100	; 0x64
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e3d4      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080e2:	4b63      	ldr	r3, [pc, #396]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0f0      	beq.n	80080d0 <HAL_RCC_OscConfig+0xe8>
 80080ee:	e014      	b.n	800811a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f0:	f7fa fdbe 	bl	8002c70 <HAL_GetTick>
 80080f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080f8:	f7fa fdba 	bl	8002c70 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b64      	cmp	r3, #100	; 0x64
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e3c0      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800810a:	4b59      	ldr	r3, [pc, #356]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1f0      	bne.n	80080f8 <HAL_RCC_OscConfig+0x110>
 8008116:	e000      	b.n	800811a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 80ca 	beq.w	80082bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008128:	4b51      	ldr	r3, [pc, #324]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008130:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008132:	4b4f      	ldr	r3, [pc, #316]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008136:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d007      	beq.n	800814e <HAL_RCC_OscConfig+0x166>
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	2b18      	cmp	r3, #24
 8008142:	d156      	bne.n	80081f2 <HAL_RCC_OscConfig+0x20a>
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	f003 0303 	and.w	r3, r3, #3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d151      	bne.n	80081f2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800814e:	4b48      	ldr	r3, [pc, #288]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b00      	cmp	r3, #0
 8008158:	d005      	beq.n	8008166 <HAL_RCC_OscConfig+0x17e>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e392      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008166:	4b42      	ldr	r3, [pc, #264]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f023 0219 	bic.w	r2, r3, #25
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	493f      	ldr	r1, [pc, #252]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008174:	4313      	orrs	r3, r2
 8008176:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008178:	f7fa fd7a 	bl	8002c70 <HAL_GetTick>
 800817c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800817e:	e008      	b.n	8008192 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008180:	f7fa fd76 	bl	8002c70 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b02      	cmp	r3, #2
 800818c:	d901      	bls.n	8008192 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e37c      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008192:	4b37      	ldr	r3, [pc, #220]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0304 	and.w	r3, r3, #4
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0f0      	beq.n	8008180 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800819e:	f7fa fd97 	bl	8002cd0 <HAL_GetREVID>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d817      	bhi.n	80081dc <HAL_RCC_OscConfig+0x1f4>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	2b40      	cmp	r3, #64	; 0x40
 80081b2:	d108      	bne.n	80081c6 <HAL_RCC_OscConfig+0x1de>
 80081b4:	4b2e      	ldr	r3, [pc, #184]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80081bc:	4a2c      	ldr	r2, [pc, #176]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80081be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081c2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081c4:	e07a      	b.n	80082bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081c6:	4b2a      	ldr	r3, [pc, #168]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	031b      	lsls	r3, r3, #12
 80081d4:	4926      	ldr	r1, [pc, #152]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081da:	e06f      	b.n	80082bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081dc:	4b24      	ldr	r3, [pc, #144]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	061b      	lsls	r3, r3, #24
 80081ea:	4921      	ldr	r1, [pc, #132]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081f0:	e064      	b.n	80082bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d047      	beq.n	800828a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081fa:	4b1d      	ldr	r3, [pc, #116]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f023 0219 	bic.w	r2, r3, #25
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	491a      	ldr	r1, [pc, #104]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008208:	4313      	orrs	r3, r2
 800820a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820c:	f7fa fd30 	bl	8002c70 <HAL_GetTick>
 8008210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008212:	e008      	b.n	8008226 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008214:	f7fa fd2c 	bl	8002c70 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d901      	bls.n	8008226 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e332      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008226:	4b12      	ldr	r3, [pc, #72]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0f0      	beq.n	8008214 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008232:	f7fa fd4d 	bl	8002cd0 <HAL_GetREVID>
 8008236:	4603      	mov	r3, r0
 8008238:	f241 0203 	movw	r2, #4099	; 0x1003
 800823c:	4293      	cmp	r3, r2
 800823e:	d819      	bhi.n	8008274 <HAL_RCC_OscConfig+0x28c>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	2b40      	cmp	r3, #64	; 0x40
 8008246:	d108      	bne.n	800825a <HAL_RCC_OscConfig+0x272>
 8008248:	4b09      	ldr	r3, [pc, #36]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008250:	4a07      	ldr	r2, [pc, #28]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 8008252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008256:	6053      	str	r3, [r2, #4]
 8008258:	e030      	b.n	80082bc <HAL_RCC_OscConfig+0x2d4>
 800825a:	4b05      	ldr	r3, [pc, #20]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	031b      	lsls	r3, r3, #12
 8008268:	4901      	ldr	r1, [pc, #4]	; (8008270 <HAL_RCC_OscConfig+0x288>)
 800826a:	4313      	orrs	r3, r2
 800826c:	604b      	str	r3, [r1, #4]
 800826e:	e025      	b.n	80082bc <HAL_RCC_OscConfig+0x2d4>
 8008270:	58024400 	.word	0x58024400
 8008274:	4b9a      	ldr	r3, [pc, #616]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	061b      	lsls	r3, r3, #24
 8008282:	4997      	ldr	r1, [pc, #604]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008284:	4313      	orrs	r3, r2
 8008286:	604b      	str	r3, [r1, #4]
 8008288:	e018      	b.n	80082bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800828a:	4b95      	ldr	r3, [pc, #596]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a94      	ldr	r2, [pc, #592]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008296:	f7fa fceb 	bl	8002c70 <HAL_GetTick>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800829c:	e008      	b.n	80082b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800829e:	f7fa fce7 	bl	8002c70 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e2ed      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082b0:	4b8b      	ldr	r3, [pc, #556]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1f0      	bne.n	800829e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0310 	and.w	r3, r3, #16
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 80a9 	beq.w	800841c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082ca:	4b85      	ldr	r3, [pc, #532]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082d4:	4b82      	ldr	r3, [pc, #520]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80082d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d007      	beq.n	80082f0 <HAL_RCC_OscConfig+0x308>
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	2b18      	cmp	r3, #24
 80082e4:	d13a      	bne.n	800835c <HAL_RCC_OscConfig+0x374>
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f003 0303 	and.w	r3, r3, #3
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d135      	bne.n	800835c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082f0:	4b7b      	ldr	r3, [pc, #492]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <HAL_RCC_OscConfig+0x320>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	2b80      	cmp	r3, #128	; 0x80
 8008302:	d001      	beq.n	8008308 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e2c1      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008308:	f7fa fce2 	bl	8002cd0 <HAL_GetREVID>
 800830c:	4603      	mov	r3, r0
 800830e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008312:	4293      	cmp	r3, r2
 8008314:	d817      	bhi.n	8008346 <HAL_RCC_OscConfig+0x35e>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	2b20      	cmp	r3, #32
 800831c:	d108      	bne.n	8008330 <HAL_RCC_OscConfig+0x348>
 800831e:	4b70      	ldr	r3, [pc, #448]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008326:	4a6e      	ldr	r2, [pc, #440]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800832c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800832e:	e075      	b.n	800841c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008330:	4b6b      	ldr	r3, [pc, #428]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	069b      	lsls	r3, r3, #26
 800833e:	4968      	ldr	r1, [pc, #416]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008340:	4313      	orrs	r3, r2
 8008342:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008344:	e06a      	b.n	800841c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008346:	4b66      	ldr	r3, [pc, #408]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	061b      	lsls	r3, r3, #24
 8008354:	4962      	ldr	r1, [pc, #392]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008356:	4313      	orrs	r3, r2
 8008358:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800835a:	e05f      	b.n	800841c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d042      	beq.n	80083ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008364:	4b5e      	ldr	r3, [pc, #376]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a5d      	ldr	r2, [pc, #372]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 800836a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008370:	f7fa fc7e 	bl	8002c70 <HAL_GetTick>
 8008374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008376:	e008      	b.n	800838a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008378:	f7fa fc7a 	bl	8002c70 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d901      	bls.n	800838a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e280      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800838a:	4b55      	ldr	r3, [pc, #340]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0f0      	beq.n	8008378 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008396:	f7fa fc9b 	bl	8002cd0 <HAL_GetREVID>
 800839a:	4603      	mov	r3, r0
 800839c:	f241 0203 	movw	r2, #4099	; 0x1003
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d817      	bhi.n	80083d4 <HAL_RCC_OscConfig+0x3ec>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	2b20      	cmp	r3, #32
 80083aa:	d108      	bne.n	80083be <HAL_RCC_OscConfig+0x3d6>
 80083ac:	4b4c      	ldr	r3, [pc, #304]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80083b4:	4a4a      	ldr	r2, [pc, #296]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80083b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083ba:	6053      	str	r3, [r2, #4]
 80083bc:	e02e      	b.n	800841c <HAL_RCC_OscConfig+0x434>
 80083be:	4b48      	ldr	r3, [pc, #288]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	069b      	lsls	r3, r3, #26
 80083cc:	4944      	ldr	r1, [pc, #272]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	604b      	str	r3, [r1, #4]
 80083d2:	e023      	b.n	800841c <HAL_RCC_OscConfig+0x434>
 80083d4:	4b42      	ldr	r3, [pc, #264]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	061b      	lsls	r3, r3, #24
 80083e2:	493f      	ldr	r1, [pc, #252]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60cb      	str	r3, [r1, #12]
 80083e8:	e018      	b.n	800841c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80083ea:	4b3d      	ldr	r3, [pc, #244]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a3c      	ldr	r2, [pc, #240]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80083f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f6:	f7fa fc3b 	bl	8002c70 <HAL_GetTick>
 80083fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083fc:	e008      	b.n	8008410 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80083fe:	f7fa fc37 	bl	8002c70 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	d901      	bls.n	8008410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e23d      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008410:	4b33      	ldr	r3, [pc, #204]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1f0      	bne.n	80083fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0308 	and.w	r3, r3, #8
 8008424:	2b00      	cmp	r3, #0
 8008426:	d036      	beq.n	8008496 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d019      	beq.n	8008464 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008430:	4b2b      	ldr	r3, [pc, #172]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008434:	4a2a      	ldr	r2, [pc, #168]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800843c:	f7fa fc18 	bl	8002c70 <HAL_GetTick>
 8008440:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008442:	e008      	b.n	8008456 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008444:	f7fa fc14 	bl	8002c70 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b02      	cmp	r3, #2
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e21a      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008456:	4b22      	ldr	r3, [pc, #136]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0f0      	beq.n	8008444 <HAL_RCC_OscConfig+0x45c>
 8008462:	e018      	b.n	8008496 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008464:	4b1e      	ldr	r3, [pc, #120]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 8008466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008468:	4a1d      	ldr	r2, [pc, #116]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 800846a:	f023 0301 	bic.w	r3, r3, #1
 800846e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fa fbfe 	bl	8002c70 <HAL_GetTick>
 8008474:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008476:	e008      	b.n	800848a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008478:	f7fa fbfa 	bl	8002c70 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b02      	cmp	r3, #2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e200      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800848a:	4b15      	ldr	r3, [pc, #84]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 800848c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1f0      	bne.n	8008478 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d039      	beq.n	8008516 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d01c      	beq.n	80084e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80084aa:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a0c      	ldr	r2, [pc, #48]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80084b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084b6:	f7fa fbdb 	bl	8002c70 <HAL_GetTick>
 80084ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084be:	f7fa fbd7 	bl	8002c70 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e1dd      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084d0:	4b03      	ldr	r3, [pc, #12]	; (80084e0 <HAL_RCC_OscConfig+0x4f8>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d0f0      	beq.n	80084be <HAL_RCC_OscConfig+0x4d6>
 80084dc:	e01b      	b.n	8008516 <HAL_RCC_OscConfig+0x52e>
 80084de:	bf00      	nop
 80084e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084e4:	4b9b      	ldr	r3, [pc, #620]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a9a      	ldr	r2, [pc, #616]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80084ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084f0:	f7fa fbbe 	bl	8002c70 <HAL_GetTick>
 80084f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084f6:	e008      	b.n	800850a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084f8:	f7fa fbba 	bl	8002c70 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	2b02      	cmp	r3, #2
 8008504:	d901      	bls.n	800850a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e1c0      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800850a:	4b92      	ldr	r3, [pc, #584]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1f0      	bne.n	80084f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0304 	and.w	r3, r3, #4
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 8081 	beq.w	8008626 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008524:	4b8c      	ldr	r3, [pc, #560]	; (8008758 <HAL_RCC_OscConfig+0x770>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a8b      	ldr	r2, [pc, #556]	; (8008758 <HAL_RCC_OscConfig+0x770>)
 800852a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800852e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008530:	f7fa fb9e 	bl	8002c70 <HAL_GetTick>
 8008534:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008538:	f7fa fb9a 	bl	8002c70 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b64      	cmp	r3, #100	; 0x64
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e1a0      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800854a:	4b83      	ldr	r3, [pc, #524]	; (8008758 <HAL_RCC_OscConfig+0x770>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008552:	2b00      	cmp	r3, #0
 8008554:	d0f0      	beq.n	8008538 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d106      	bne.n	800856c <HAL_RCC_OscConfig+0x584>
 800855e:	4b7d      	ldr	r3, [pc, #500]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008562:	4a7c      	ldr	r2, [pc, #496]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008564:	f043 0301 	orr.w	r3, r3, #1
 8008568:	6713      	str	r3, [r2, #112]	; 0x70
 800856a:	e02d      	b.n	80085c8 <HAL_RCC_OscConfig+0x5e0>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10c      	bne.n	800858e <HAL_RCC_OscConfig+0x5a6>
 8008574:	4b77      	ldr	r3, [pc, #476]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008578:	4a76      	ldr	r2, [pc, #472]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 800857a:	f023 0301 	bic.w	r3, r3, #1
 800857e:	6713      	str	r3, [r2, #112]	; 0x70
 8008580:	4b74      	ldr	r3, [pc, #464]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008584:	4a73      	ldr	r2, [pc, #460]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008586:	f023 0304 	bic.w	r3, r3, #4
 800858a:	6713      	str	r3, [r2, #112]	; 0x70
 800858c:	e01c      	b.n	80085c8 <HAL_RCC_OscConfig+0x5e0>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2b05      	cmp	r3, #5
 8008594:	d10c      	bne.n	80085b0 <HAL_RCC_OscConfig+0x5c8>
 8008596:	4b6f      	ldr	r3, [pc, #444]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859a:	4a6e      	ldr	r2, [pc, #440]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 800859c:	f043 0304 	orr.w	r3, r3, #4
 80085a0:	6713      	str	r3, [r2, #112]	; 0x70
 80085a2:	4b6c      	ldr	r3, [pc, #432]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80085a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a6:	4a6b      	ldr	r2, [pc, #428]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80085a8:	f043 0301 	orr.w	r3, r3, #1
 80085ac:	6713      	str	r3, [r2, #112]	; 0x70
 80085ae:	e00b      	b.n	80085c8 <HAL_RCC_OscConfig+0x5e0>
 80085b0:	4b68      	ldr	r3, [pc, #416]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80085b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b4:	4a67      	ldr	r2, [pc, #412]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80085b6:	f023 0301 	bic.w	r3, r3, #1
 80085ba:	6713      	str	r3, [r2, #112]	; 0x70
 80085bc:	4b65      	ldr	r3, [pc, #404]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80085be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c0:	4a64      	ldr	r2, [pc, #400]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80085c2:	f023 0304 	bic.w	r3, r3, #4
 80085c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d015      	beq.n	80085fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d0:	f7fa fb4e 	bl	8002c70 <HAL_GetTick>
 80085d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085d6:	e00a      	b.n	80085ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085d8:	f7fa fb4a 	bl	8002c70 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e14e      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085ee:	4b59      	ldr	r3, [pc, #356]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80085f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0ee      	beq.n	80085d8 <HAL_RCC_OscConfig+0x5f0>
 80085fa:	e014      	b.n	8008626 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085fc:	f7fa fb38 	bl	8002c70 <HAL_GetTick>
 8008600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008602:	e00a      	b.n	800861a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008604:	f7fa fb34 	bl	8002c70 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008612:	4293      	cmp	r3, r2
 8008614:	d901      	bls.n	800861a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e138      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800861a:	4b4e      	ldr	r3, [pc, #312]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 800861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1ee      	bne.n	8008604 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 812d 	beq.w	800888a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008630:	4b48      	ldr	r3, [pc, #288]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008638:	2b18      	cmp	r3, #24
 800863a:	f000 80bd 	beq.w	80087b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	2b02      	cmp	r3, #2
 8008644:	f040 809e 	bne.w	8008784 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008648:	4b42      	ldr	r3, [pc, #264]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a41      	ldr	r2, [pc, #260]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 800864e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008654:	f7fa fb0c 	bl	8002c70 <HAL_GetTick>
 8008658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800865a:	e008      	b.n	800866e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800865c:	f7fa fb08 	bl	8002c70 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	2b02      	cmp	r3, #2
 8008668:	d901      	bls.n	800866e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e10e      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800866e:	4b39      	ldr	r3, [pc, #228]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1f0      	bne.n	800865c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800867a:	4b36      	ldr	r3, [pc, #216]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 800867c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800867e:	4b37      	ldr	r3, [pc, #220]	; (800875c <HAL_RCC_OscConfig+0x774>)
 8008680:	4013      	ands	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800868a:	0112      	lsls	r2, r2, #4
 800868c:	430a      	orrs	r2, r1
 800868e:	4931      	ldr	r1, [pc, #196]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008690:	4313      	orrs	r3, r2
 8008692:	628b      	str	r3, [r1, #40]	; 0x28
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008698:	3b01      	subs	r3, #1
 800869a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a2:	3b01      	subs	r3, #1
 80086a4:	025b      	lsls	r3, r3, #9
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	431a      	orrs	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ae:	3b01      	subs	r3, #1
 80086b0:	041b      	lsls	r3, r3, #16
 80086b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086b6:	431a      	orrs	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086bc:	3b01      	subs	r3, #1
 80086be:	061b      	lsls	r3, r3, #24
 80086c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086c4:	4923      	ldr	r1, [pc, #140]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80086ca:	4b22      	ldr	r3, [pc, #136]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	4a21      	ldr	r2, [pc, #132]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80086d0:	f023 0301 	bic.w	r3, r3, #1
 80086d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086d6:	4b1f      	ldr	r3, [pc, #124]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80086d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086da:	4b21      	ldr	r3, [pc, #132]	; (8008760 <HAL_RCC_OscConfig+0x778>)
 80086dc:	4013      	ands	r3, r2
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80086e2:	00d2      	lsls	r2, r2, #3
 80086e4:	491b      	ldr	r1, [pc, #108]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80086ea:	4b1a      	ldr	r3, [pc, #104]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80086ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ee:	f023 020c 	bic.w	r2, r3, #12
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	4917      	ldr	r1, [pc, #92]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086fc:	4b15      	ldr	r3, [pc, #84]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	f023 0202 	bic.w	r2, r3, #2
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008708:	4912      	ldr	r1, [pc, #72]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 800870a:	4313      	orrs	r3, r2
 800870c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800870e:	4b11      	ldr	r3, [pc, #68]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	4a10      	ldr	r2, [pc, #64]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008718:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800871a:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	4a0d      	ldr	r2, [pc, #52]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008724:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008726:	4b0b      	ldr	r3, [pc, #44]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	4a0a      	ldr	r2, [pc, #40]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 800872c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008730:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008732:	4b08      	ldr	r3, [pc, #32]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008736:	4a07      	ldr	r2, [pc, #28]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008738:	f043 0301 	orr.w	r3, r3, #1
 800873c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800873e:	4b05      	ldr	r3, [pc, #20]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a04      	ldr	r2, [pc, #16]	; (8008754 <HAL_RCC_OscConfig+0x76c>)
 8008744:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800874a:	f7fa fa91 	bl	8002c70 <HAL_GetTick>
 800874e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008750:	e011      	b.n	8008776 <HAL_RCC_OscConfig+0x78e>
 8008752:	bf00      	nop
 8008754:	58024400 	.word	0x58024400
 8008758:	58024800 	.word	0x58024800
 800875c:	fffffc0c 	.word	0xfffffc0c
 8008760:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008764:	f7fa fa84 	bl	8002c70 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	2b02      	cmp	r3, #2
 8008770:	d901      	bls.n	8008776 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e08a      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008776:	4b47      	ldr	r3, [pc, #284]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f0      	beq.n	8008764 <HAL_RCC_OscConfig+0x77c>
 8008782:	e082      	b.n	800888a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008784:	4b43      	ldr	r3, [pc, #268]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a42      	ldr	r2, [pc, #264]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 800878a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800878e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008790:	f7fa fa6e 	bl	8002c70 <HAL_GetTick>
 8008794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008798:	f7fa fa6a 	bl	8002c70 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e070      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087aa:	4b3a      	ldr	r3, [pc, #232]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1f0      	bne.n	8008798 <HAL_RCC_OscConfig+0x7b0>
 80087b6:	e068      	b.n	800888a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80087b8:	4b36      	ldr	r3, [pc, #216]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 80087ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80087be:	4b35      	ldr	r3, [pc, #212]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 80087c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d031      	beq.n	8008830 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f003 0203 	and.w	r2, r3, #3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d12a      	bne.n	8008830 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	091b      	lsrs	r3, r3, #4
 80087de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d122      	bne.n	8008830 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d11a      	bne.n	8008830 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	0a5b      	lsrs	r3, r3, #9
 80087fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008806:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008808:	429a      	cmp	r2, r3
 800880a:	d111      	bne.n	8008830 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	0c1b      	lsrs	r3, r3, #16
 8008810:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800881a:	429a      	cmp	r2, r3
 800881c:	d108      	bne.n	8008830 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	0e1b      	lsrs	r3, r3, #24
 8008822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800882c:	429a      	cmp	r2, r3
 800882e:	d001      	beq.n	8008834 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e02b      	b.n	800888c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008834:	4b17      	ldr	r3, [pc, #92]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 8008836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008838:	08db      	lsrs	r3, r3, #3
 800883a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800883e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	429a      	cmp	r2, r3
 8008848:	d01f      	beq.n	800888a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800884a:	4b12      	ldr	r3, [pc, #72]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 800884c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884e:	4a11      	ldr	r2, [pc, #68]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 8008850:	f023 0301 	bic.w	r3, r3, #1
 8008854:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008856:	f7fa fa0b 	bl	8002c70 <HAL_GetTick>
 800885a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800885c:	bf00      	nop
 800885e:	f7fa fa07 	bl	8002c70 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	4293      	cmp	r3, r2
 8008868:	d0f9      	beq.n	800885e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800886a:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 800886c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800886e:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <HAL_RCC_OscConfig+0x8b0>)
 8008870:	4013      	ands	r3, r2
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008876:	00d2      	lsls	r2, r2, #3
 8008878:	4906      	ldr	r1, [pc, #24]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 800887a:	4313      	orrs	r3, r2
 800887c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800887e:	4b05      	ldr	r3, [pc, #20]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 8008880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008882:	4a04      	ldr	r2, [pc, #16]	; (8008894 <HAL_RCC_OscConfig+0x8ac>)
 8008884:	f043 0301 	orr.w	r3, r3, #1
 8008888:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3730      	adds	r7, #48	; 0x30
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	58024400 	.word	0x58024400
 8008898:	ffff0007 	.word	0xffff0007

0800889c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e19c      	b.n	8008bea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088b0:	4b8a      	ldr	r3, [pc, #552]	; (8008adc <HAL_RCC_ClockConfig+0x240>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 030f 	and.w	r3, r3, #15
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d910      	bls.n	80088e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088be:	4b87      	ldr	r3, [pc, #540]	; (8008adc <HAL_RCC_ClockConfig+0x240>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f023 020f 	bic.w	r2, r3, #15
 80088c6:	4985      	ldr	r1, [pc, #532]	; (8008adc <HAL_RCC_ClockConfig+0x240>)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ce:	4b83      	ldr	r3, [pc, #524]	; (8008adc <HAL_RCC_ClockConfig+0x240>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 030f 	and.w	r3, r3, #15
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d001      	beq.n	80088e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e184      	b.n	8008bea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d010      	beq.n	800890e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	4b7b      	ldr	r3, [pc, #492]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d908      	bls.n	800890e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088fc:	4b78      	ldr	r3, [pc, #480]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	4975      	ldr	r1, [pc, #468]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 800890a:	4313      	orrs	r3, r2
 800890c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d010      	beq.n	800893c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	695a      	ldr	r2, [r3, #20]
 800891e:	4b70      	ldr	r3, [pc, #448]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008926:	429a      	cmp	r2, r3
 8008928:	d908      	bls.n	800893c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800892a:	4b6d      	ldr	r3, [pc, #436]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	496a      	ldr	r1, [pc, #424]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008938:	4313      	orrs	r3, r2
 800893a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b00      	cmp	r3, #0
 8008946:	d010      	beq.n	800896a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	699a      	ldr	r2, [r3, #24]
 800894c:	4b64      	ldr	r3, [pc, #400]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008954:	429a      	cmp	r2, r3
 8008956:	d908      	bls.n	800896a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008958:	4b61      	ldr	r3, [pc, #388]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 800895a:	69db      	ldr	r3, [r3, #28]
 800895c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	495e      	ldr	r1, [pc, #376]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008966:	4313      	orrs	r3, r2
 8008968:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b00      	cmp	r3, #0
 8008974:	d010      	beq.n	8008998 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	69da      	ldr	r2, [r3, #28]
 800897a:	4b59      	ldr	r3, [pc, #356]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008982:	429a      	cmp	r2, r3
 8008984:	d908      	bls.n	8008998 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008986:	4b56      	ldr	r3, [pc, #344]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	69db      	ldr	r3, [r3, #28]
 8008992:	4953      	ldr	r1, [pc, #332]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008994:	4313      	orrs	r3, r2
 8008996:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0302 	and.w	r3, r3, #2
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d010      	beq.n	80089c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68da      	ldr	r2, [r3, #12]
 80089a8:	4b4d      	ldr	r3, [pc, #308]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	f003 030f 	and.w	r3, r3, #15
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d908      	bls.n	80089c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089b4:	4b4a      	ldr	r3, [pc, #296]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	f023 020f 	bic.w	r2, r3, #15
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	4947      	ldr	r1, [pc, #284]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d055      	beq.n	8008a7e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80089d2:	4b43      	ldr	r3, [pc, #268]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	4940      	ldr	r1, [pc, #256]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d107      	bne.n	80089fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089ec:	4b3c      	ldr	r3, [pc, #240]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d121      	bne.n	8008a3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0f6      	b.n	8008bea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d107      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a04:	4b36      	ldr	r3, [pc, #216]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d115      	bne.n	8008a3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e0ea      	b.n	8008bea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d107      	bne.n	8008a2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a1c:	4b30      	ldr	r3, [pc, #192]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d109      	bne.n	8008a3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e0de      	b.n	8008bea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a2c:	4b2c      	ldr	r3, [pc, #176]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e0d6      	b.n	8008bea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a3c:	4b28      	ldr	r3, [pc, #160]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	f023 0207 	bic.w	r2, r3, #7
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4925      	ldr	r1, [pc, #148]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a4e:	f7fa f90f 	bl	8002c70 <HAL_GetTick>
 8008a52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a54:	e00a      	b.n	8008a6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a56:	f7fa f90b 	bl	8002c70 <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e0be      	b.n	8008bea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a6c:	4b1c      	ldr	r3, [pc, #112]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d1eb      	bne.n	8008a56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d010      	beq.n	8008aac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	4b14      	ldr	r3, [pc, #80]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d208      	bcs.n	8008aac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a9a:	4b11      	ldr	r3, [pc, #68]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	f023 020f 	bic.w	r2, r3, #15
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	490e      	ldr	r1, [pc, #56]	; (8008ae0 <HAL_RCC_ClockConfig+0x244>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008aac:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <HAL_RCC_ClockConfig+0x240>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 030f 	and.w	r3, r3, #15
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d214      	bcs.n	8008ae4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aba:	4b08      	ldr	r3, [pc, #32]	; (8008adc <HAL_RCC_ClockConfig+0x240>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f023 020f 	bic.w	r2, r3, #15
 8008ac2:	4906      	ldr	r1, [pc, #24]	; (8008adc <HAL_RCC_ClockConfig+0x240>)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aca:	4b04      	ldr	r3, [pc, #16]	; (8008adc <HAL_RCC_ClockConfig+0x240>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 030f 	and.w	r3, r3, #15
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d005      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e086      	b.n	8008bea <HAL_RCC_ClockConfig+0x34e>
 8008adc:	52002000 	.word	0x52002000
 8008ae0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d010      	beq.n	8008b12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691a      	ldr	r2, [r3, #16]
 8008af4:	4b3f      	ldr	r3, [pc, #252]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d208      	bcs.n	8008b12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b00:	4b3c      	ldr	r3, [pc, #240]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	4939      	ldr	r1, [pc, #228]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0308 	and.w	r3, r3, #8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d010      	beq.n	8008b40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	695a      	ldr	r2, [r3, #20]
 8008b22:	4b34      	ldr	r3, [pc, #208]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d208      	bcs.n	8008b40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b2e:	4b31      	ldr	r3, [pc, #196]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	492e      	ldr	r1, [pc, #184]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0310 	and.w	r3, r3, #16
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d010      	beq.n	8008b6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	699a      	ldr	r2, [r3, #24]
 8008b50:	4b28      	ldr	r3, [pc, #160]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d208      	bcs.n	8008b6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b5c:	4b25      	ldr	r3, [pc, #148]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	4922      	ldr	r1, [pc, #136]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0320 	and.w	r3, r3, #32
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d010      	beq.n	8008b9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	69da      	ldr	r2, [r3, #28]
 8008b7e:	4b1d      	ldr	r3, [pc, #116]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d208      	bcs.n	8008b9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008b8a:	4b1a      	ldr	r3, [pc, #104]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	4917      	ldr	r1, [pc, #92]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b9c:	f000 f834 	bl	8008c08 <HAL_RCC_GetSysClockFreq>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	4b14      	ldr	r3, [pc, #80]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	0a1b      	lsrs	r3, r3, #8
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	4912      	ldr	r1, [pc, #72]	; (8008bf8 <HAL_RCC_ClockConfig+0x35c>)
 8008bae:	5ccb      	ldrb	r3, [r1, r3]
 8008bb0:	f003 031f 	and.w	r3, r3, #31
 8008bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bba:	4b0e      	ldr	r3, [pc, #56]	; (8008bf4 <HAL_RCC_ClockConfig+0x358>)
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	f003 030f 	and.w	r3, r3, #15
 8008bc2:	4a0d      	ldr	r2, [pc, #52]	; (8008bf8 <HAL_RCC_ClockConfig+0x35c>)
 8008bc4:	5cd3      	ldrb	r3, [r2, r3]
 8008bc6:	f003 031f 	and.w	r3, r3, #31
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd0:	4a0a      	ldr	r2, [pc, #40]	; (8008bfc <HAL_RCC_ClockConfig+0x360>)
 8008bd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bd4:	4a0a      	ldr	r2, [pc, #40]	; (8008c00 <HAL_RCC_ClockConfig+0x364>)
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008bda:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <HAL_RCC_ClockConfig+0x368>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7f9 fffc 	bl	8002bdc <HAL_InitTick>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	08012a08 	.word	0x08012a08
 8008bfc:	24000008 	.word	0x24000008
 8008c00:	24000004 	.word	0x24000004
 8008c04:	2400000c 	.word	0x2400000c

08008c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b089      	sub	sp, #36	; 0x24
 8008c0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c0e:	4bb3      	ldr	r3, [pc, #716]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c16:	2b18      	cmp	r3, #24
 8008c18:	f200 8155 	bhi.w	8008ec6 <HAL_RCC_GetSysClockFreq+0x2be>
 8008c1c:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008c89 	.word	0x08008c89
 8008c28:	08008ec7 	.word	0x08008ec7
 8008c2c:	08008ec7 	.word	0x08008ec7
 8008c30:	08008ec7 	.word	0x08008ec7
 8008c34:	08008ec7 	.word	0x08008ec7
 8008c38:	08008ec7 	.word	0x08008ec7
 8008c3c:	08008ec7 	.word	0x08008ec7
 8008c40:	08008ec7 	.word	0x08008ec7
 8008c44:	08008caf 	.word	0x08008caf
 8008c48:	08008ec7 	.word	0x08008ec7
 8008c4c:	08008ec7 	.word	0x08008ec7
 8008c50:	08008ec7 	.word	0x08008ec7
 8008c54:	08008ec7 	.word	0x08008ec7
 8008c58:	08008ec7 	.word	0x08008ec7
 8008c5c:	08008ec7 	.word	0x08008ec7
 8008c60:	08008ec7 	.word	0x08008ec7
 8008c64:	08008cb5 	.word	0x08008cb5
 8008c68:	08008ec7 	.word	0x08008ec7
 8008c6c:	08008ec7 	.word	0x08008ec7
 8008c70:	08008ec7 	.word	0x08008ec7
 8008c74:	08008ec7 	.word	0x08008ec7
 8008c78:	08008ec7 	.word	0x08008ec7
 8008c7c:	08008ec7 	.word	0x08008ec7
 8008c80:	08008ec7 	.word	0x08008ec7
 8008c84:	08008cbb 	.word	0x08008cbb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c88:	4b94      	ldr	r3, [pc, #592]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d009      	beq.n	8008ca8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c94:	4b91      	ldr	r3, [pc, #580]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	08db      	lsrs	r3, r3, #3
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	4a90      	ldr	r2, [pc, #576]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008ca6:	e111      	b.n	8008ecc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ca8:	4b8d      	ldr	r3, [pc, #564]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008caa:	61bb      	str	r3, [r7, #24]
      break;
 8008cac:	e10e      	b.n	8008ecc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008cae:	4b8d      	ldr	r3, [pc, #564]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008cb0:	61bb      	str	r3, [r7, #24]
      break;
 8008cb2:	e10b      	b.n	8008ecc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008cb4:	4b8c      	ldr	r3, [pc, #560]	; (8008ee8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008cb6:	61bb      	str	r3, [r7, #24]
      break;
 8008cb8:	e108      	b.n	8008ecc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cba:	4b88      	ldr	r3, [pc, #544]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbe:	f003 0303 	and.w	r3, r3, #3
 8008cc2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008cc4:	4b85      	ldr	r3, [pc, #532]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc8:	091b      	lsrs	r3, r3, #4
 8008cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008cd0:	4b82      	ldr	r3, [pc, #520]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008cda:	4b80      	ldr	r3, [pc, #512]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cde:	08db      	lsrs	r3, r3, #3
 8008ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	fb02 f303 	mul.w	r3, r2, r3
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 80e1 	beq.w	8008ec0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	f000 8083 	beq.w	8008e0c <HAL_RCC_GetSysClockFreq+0x204>
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	f200 80a1 	bhi.w	8008e50 <HAL_RCC_GetSysClockFreq+0x248>
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <HAL_RCC_GetSysClockFreq+0x114>
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d056      	beq.n	8008dc8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d1a:	e099      	b.n	8008e50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d1c:	4b6f      	ldr	r3, [pc, #444]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0320 	and.w	r3, r3, #32
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d02d      	beq.n	8008d84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d28:	4b6c      	ldr	r3, [pc, #432]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	08db      	lsrs	r3, r3, #3
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	4a6b      	ldr	r2, [pc, #428]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d34:	fa22 f303 	lsr.w	r3, r2, r3
 8008d38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	ee07 3a90 	vmov	s15, r3
 8008d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d52:	4b62      	ldr	r3, [pc, #392]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d66:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008eec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008d82:	e087      	b.n	8008e94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ef0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d96:	4b51      	ldr	r3, [pc, #324]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008daa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008eec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008dc6:	e065      	b.n	8008e94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008ef4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dda:	4b40      	ldr	r3, [pc, #256]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008eec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e0a:	e043      	b.n	8008e94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e16:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008ef8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1e:	4b2f      	ldr	r3, [pc, #188]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e32:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008eec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e4e:	e021      	b.n	8008e94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008ef4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e62:	4b1e      	ldr	r3, [pc, #120]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e72:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e76:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008eec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008e94:	4b11      	ldr	r3, [pc, #68]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e98:	0a5b      	lsrs	r3, r3, #9
 8008e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	ee07 3a90 	vmov	s15, r3
 8008ea8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008eac:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eb8:	ee17 3a90 	vmov	r3, s15
 8008ebc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008ebe:	e005      	b.n	8008ecc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61bb      	str	r3, [r7, #24]
      break;
 8008ec4:	e002      	b.n	8008ecc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008ec6:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ec8:	61bb      	str	r3, [r7, #24]
      break;
 8008eca:	bf00      	nop
  }

  return sysclockfreq;
 8008ecc:	69bb      	ldr	r3, [r7, #24]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3724      	adds	r7, #36	; 0x24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	58024400 	.word	0x58024400
 8008ee0:	03d09000 	.word	0x03d09000
 8008ee4:	003d0900 	.word	0x003d0900
 8008ee8:	017d7840 	.word	0x017d7840
 8008eec:	46000000 	.word	0x46000000
 8008ef0:	4c742400 	.word	0x4c742400
 8008ef4:	4a742400 	.word	0x4a742400
 8008ef8:	4bbebc20 	.word	0x4bbebc20

08008efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f02:	f7ff fe81 	bl	8008c08 <HAL_RCC_GetSysClockFreq>
 8008f06:	4602      	mov	r2, r0
 8008f08:	4b10      	ldr	r3, [pc, #64]	; (8008f4c <HAL_RCC_GetHCLKFreq+0x50>)
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	0a1b      	lsrs	r3, r3, #8
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	490f      	ldr	r1, [pc, #60]	; (8008f50 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f14:	5ccb      	ldrb	r3, [r1, r3]
 8008f16:	f003 031f 	and.w	r3, r3, #31
 8008f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f20:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <HAL_RCC_GetHCLKFreq+0x50>)
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	f003 030f 	and.w	r3, r3, #15
 8008f28:	4a09      	ldr	r2, [pc, #36]	; (8008f50 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f2a:	5cd3      	ldrb	r3, [r2, r3]
 8008f2c:	f003 031f 	and.w	r3, r3, #31
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	fa22 f303 	lsr.w	r3, r2, r3
 8008f36:	4a07      	ldr	r2, [pc, #28]	; (8008f54 <HAL_RCC_GetHCLKFreq+0x58>)
 8008f38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f3a:	4a07      	ldr	r2, [pc, #28]	; (8008f58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008f40:	4b04      	ldr	r3, [pc, #16]	; (8008f54 <HAL_RCC_GetHCLKFreq+0x58>)
 8008f42:	681b      	ldr	r3, [r3, #0]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	08012a08 	.word	0x08012a08
 8008f54:	24000008 	.word	0x24000008
 8008f58:	24000004 	.word	0x24000004

08008f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f60:	f7ff ffcc 	bl	8008efc <HAL_RCC_GetHCLKFreq>
 8008f64:	4602      	mov	r2, r0
 8008f66:	4b06      	ldr	r3, [pc, #24]	; (8008f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	091b      	lsrs	r3, r3, #4
 8008f6c:	f003 0307 	and.w	r3, r3, #7
 8008f70:	4904      	ldr	r1, [pc, #16]	; (8008f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f72:	5ccb      	ldrb	r3, [r1, r3]
 8008f74:	f003 031f 	and.w	r3, r3, #31
 8008f78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	58024400 	.word	0x58024400
 8008f84:	08012a08 	.word	0x08012a08

08008f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008f8c:	f7ff ffb6 	bl	8008efc <HAL_RCC_GetHCLKFreq>
 8008f90:	4602      	mov	r2, r0
 8008f92:	4b06      	ldr	r3, [pc, #24]	; (8008fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	0a1b      	lsrs	r3, r3, #8
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	4904      	ldr	r1, [pc, #16]	; (8008fb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f9e:	5ccb      	ldrb	r3, [r1, r3]
 8008fa0:	f003 031f 	and.w	r3, r3, #31
 8008fa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	58024400 	.word	0x58024400
 8008fb0:	08012a08 	.word	0x08012a08

08008fb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fb8:	b0ca      	sub	sp, #296	; 0x128
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008fd8:	2500      	movs	r5, #0
 8008fda:	ea54 0305 	orrs.w	r3, r4, r5
 8008fde:	d049      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fea:	d02f      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008fec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ff0:	d828      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ff6:	d01a      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008ff8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ffc:	d822      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009006:	d007      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009008:	e01c      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800900a:	4bb8      	ldr	r3, [pc, #736]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800900c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900e:	4ab7      	ldr	r2, [pc, #732]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009014:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009016:	e01a      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800901c:	3308      	adds	r3, #8
 800901e:	2102      	movs	r1, #2
 8009020:	4618      	mov	r0, r3
 8009022:	f002 fb61 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009026:	4603      	mov	r3, r0
 8009028:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800902c:	e00f      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800902e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009032:	3328      	adds	r3, #40	; 0x28
 8009034:	2102      	movs	r1, #2
 8009036:	4618      	mov	r0, r3
 8009038:	f002 fc08 	bl	800b84c <RCCEx_PLL3_Config>
 800903c:	4603      	mov	r3, r0
 800903e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009042:	e004      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800904a:	e000      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800904c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800904e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009056:	4ba5      	ldr	r3, [pc, #660]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800905a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800905e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009064:	4aa1      	ldr	r2, [pc, #644]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009066:	430b      	orrs	r3, r1
 8009068:	6513      	str	r3, [r2, #80]	; 0x50
 800906a:	e003      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009070:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009080:	f04f 0900 	mov.w	r9, #0
 8009084:	ea58 0309 	orrs.w	r3, r8, r9
 8009088:	d047      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800908a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009090:	2b04      	cmp	r3, #4
 8009092:	d82a      	bhi.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009094:	a201      	add	r2, pc, #4	; (adr r2, 800909c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909a:	bf00      	nop
 800909c:	080090b1 	.word	0x080090b1
 80090a0:	080090bf 	.word	0x080090bf
 80090a4:	080090d5 	.word	0x080090d5
 80090a8:	080090f3 	.word	0x080090f3
 80090ac:	080090f3 	.word	0x080090f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090b0:	4b8e      	ldr	r3, [pc, #568]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b4:	4a8d      	ldr	r2, [pc, #564]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090bc:	e01a      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c2:	3308      	adds	r3, #8
 80090c4:	2100      	movs	r1, #0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f002 fb0e 	bl	800b6e8 <RCCEx_PLL2_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090d2:	e00f      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d8:	3328      	adds	r3, #40	; 0x28
 80090da:	2100      	movs	r1, #0
 80090dc:	4618      	mov	r0, r3
 80090de:	f002 fbb5 	bl	800b84c <RCCEx_PLL3_Config>
 80090e2:	4603      	mov	r3, r0
 80090e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090e8:	e004      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090f0:	e000      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80090f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090fc:	4b7b      	ldr	r3, [pc, #492]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009100:	f023 0107 	bic.w	r1, r3, #7
 8009104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910a:	4a78      	ldr	r2, [pc, #480]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800910c:	430b      	orrs	r3, r1
 800910e:	6513      	str	r3, [r2, #80]	; 0x50
 8009110:	e003      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009116:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009126:	f04f 0b00 	mov.w	fp, #0
 800912a:	ea5a 030b 	orrs.w	r3, sl, fp
 800912e:	d04c      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800913a:	d030      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800913c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009140:	d829      	bhi.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009142:	2bc0      	cmp	r3, #192	; 0xc0
 8009144:	d02d      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009146:	2bc0      	cmp	r3, #192	; 0xc0
 8009148:	d825      	bhi.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800914a:	2b80      	cmp	r3, #128	; 0x80
 800914c:	d018      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800914e:	2b80      	cmp	r3, #128	; 0x80
 8009150:	d821      	bhi.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009156:	2b40      	cmp	r3, #64	; 0x40
 8009158:	d007      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800915a:	e01c      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800915c:	4b63      	ldr	r3, [pc, #396]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	4a62      	ldr	r2, [pc, #392]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009168:	e01c      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800916a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800916e:	3308      	adds	r3, #8
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f002 fab8 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009178:	4603      	mov	r3, r0
 800917a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800917e:	e011      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009184:	3328      	adds	r3, #40	; 0x28
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f002 fb5f 	bl	800b84c <RCCEx_PLL3_Config>
 800918e:	4603      	mov	r3, r0
 8009190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009194:	e006      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800919c:	e002      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800919e:	bf00      	nop
 80091a0:	e000      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80091a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10a      	bne.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80091ac:	4b4f      	ldr	r3, [pc, #316]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80091b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ba:	4a4c      	ldr	r2, [pc, #304]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091bc:	430b      	orrs	r3, r1
 80091be:	6513      	str	r3, [r2, #80]	; 0x50
 80091c0:	e003      	b.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80091ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80091d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80091da:	2300      	movs	r3, #0
 80091dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80091e4:	460b      	mov	r3, r1
 80091e6:	4313      	orrs	r3, r2
 80091e8:	d053      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80091ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80091f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091f6:	d035      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80091f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091fc:	d82e      	bhi.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80091fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009202:	d031      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009204:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009208:	d828      	bhi.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800920a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800920e:	d01a      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009214:	d822      	bhi.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800921a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800921e:	d007      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009220:	e01c      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009222:	4b32      	ldr	r3, [pc, #200]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009226:	4a31      	ldr	r2, [pc, #196]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800922c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800922e:	e01c      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009234:	3308      	adds	r3, #8
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f002 fa55 	bl	800b6e8 <RCCEx_PLL2_Config>
 800923e:	4603      	mov	r3, r0
 8009240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009244:	e011      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800924a:	3328      	adds	r3, #40	; 0x28
 800924c:	2100      	movs	r1, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f002 fafc 	bl	800b84c <RCCEx_PLL3_Config>
 8009254:	4603      	mov	r3, r0
 8009256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800925a:	e006      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009262:	e002      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009264:	bf00      	nop
 8009266:	e000      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800926a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10b      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009272:	4b1e      	ldr	r3, [pc, #120]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009276:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800927a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800927e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009282:	4a1a      	ldr	r2, [pc, #104]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009284:	430b      	orrs	r3, r1
 8009286:	6593      	str	r3, [r2, #88]	; 0x58
 8009288:	e003      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800928e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800929e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80092a2:	2300      	movs	r3, #0
 80092a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80092a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80092ac:	460b      	mov	r3, r1
 80092ae:	4313      	orrs	r3, r2
 80092b0:	d056      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80092b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092be:	d038      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80092c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092c4:	d831      	bhi.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092ca:	d034      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80092cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092d0:	d82b      	bhi.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092d6:	d01d      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80092d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092dc:	d825      	bhi.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d006      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80092e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092e6:	d00a      	beq.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80092e8:	e01f      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092ea:	bf00      	nop
 80092ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092f0:	4ba2      	ldr	r3, [pc, #648]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	4aa1      	ldr	r2, [pc, #644]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092fc:	e01c      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009302:	3308      	adds	r3, #8
 8009304:	2100      	movs	r1, #0
 8009306:	4618      	mov	r0, r3
 8009308:	f002 f9ee 	bl	800b6e8 <RCCEx_PLL2_Config>
 800930c:	4603      	mov	r3, r0
 800930e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009312:	e011      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009318:	3328      	adds	r3, #40	; 0x28
 800931a:	2100      	movs	r1, #0
 800931c:	4618      	mov	r0, r3
 800931e:	f002 fa95 	bl	800b84c <RCCEx_PLL3_Config>
 8009322:	4603      	mov	r3, r0
 8009324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009328:	e006      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009330:	e002      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009332:	bf00      	nop
 8009334:	e000      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10b      	bne.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009340:	4b8e      	ldr	r3, [pc, #568]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009344:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800934c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009350:	4a8a      	ldr	r2, [pc, #552]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009352:	430b      	orrs	r3, r1
 8009354:	6593      	str	r3, [r2, #88]	; 0x58
 8009356:	e003      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800935c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800936c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009370:	2300      	movs	r3, #0
 8009372:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009376:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800937a:	460b      	mov	r3, r1
 800937c:	4313      	orrs	r3, r2
 800937e:	d03a      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009386:	2b30      	cmp	r3, #48	; 0x30
 8009388:	d01f      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800938a:	2b30      	cmp	r3, #48	; 0x30
 800938c:	d819      	bhi.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800938e:	2b20      	cmp	r3, #32
 8009390:	d00c      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009392:	2b20      	cmp	r3, #32
 8009394:	d815      	bhi.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009396:	2b00      	cmp	r3, #0
 8009398:	d019      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800939a:	2b10      	cmp	r3, #16
 800939c:	d111      	bne.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800939e:	4b77      	ldr	r3, [pc, #476]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a2:	4a76      	ldr	r2, [pc, #472]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80093aa:	e011      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093b0:	3308      	adds	r3, #8
 80093b2:	2102      	movs	r1, #2
 80093b4:	4618      	mov	r0, r3
 80093b6:	f002 f997 	bl	800b6e8 <RCCEx_PLL2_Config>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80093c0:	e006      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093c8:	e002      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80093ca:	bf00      	nop
 80093cc:	e000      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80093ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80093d8:	4b68      	ldr	r3, [pc, #416]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80093e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e6:	4a65      	ldr	r2, [pc, #404]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093e8:	430b      	orrs	r3, r1
 80093ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093ec:	e003      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80093f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009402:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009406:	2300      	movs	r3, #0
 8009408:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800940c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009410:	460b      	mov	r3, r1
 8009412:	4313      	orrs	r3, r2
 8009414:	d051      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800941a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800941c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009420:	d035      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009426:	d82e      	bhi.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009428:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800942c:	d031      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800942e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009432:	d828      	bhi.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009438:	d01a      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800943a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800943e:	d822      	bhi.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009440:	2b00      	cmp	r3, #0
 8009442:	d003      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009448:	d007      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800944a:	e01c      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800944c:	4b4b      	ldr	r3, [pc, #300]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800944e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009450:	4a4a      	ldr	r2, [pc, #296]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009458:	e01c      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800945a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800945e:	3308      	adds	r3, #8
 8009460:	2100      	movs	r1, #0
 8009462:	4618      	mov	r0, r3
 8009464:	f002 f940 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009468:	4603      	mov	r3, r0
 800946a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800946e:	e011      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009474:	3328      	adds	r3, #40	; 0x28
 8009476:	2100      	movs	r1, #0
 8009478:	4618      	mov	r0, r3
 800947a:	f002 f9e7 	bl	800b84c <RCCEx_PLL3_Config>
 800947e:	4603      	mov	r3, r0
 8009480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009484:	e006      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800948c:	e002      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800948e:	bf00      	nop
 8009490:	e000      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10a      	bne.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800949c:	4b37      	ldr	r3, [pc, #220]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800949e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80094a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094aa:	4a34      	ldr	r2, [pc, #208]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094ac:	430b      	orrs	r3, r1
 80094ae:	6513      	str	r3, [r2, #80]	; 0x50
 80094b0:	e003      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80094ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80094c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80094ca:	2300      	movs	r3, #0
 80094cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80094d4:	460b      	mov	r3, r1
 80094d6:	4313      	orrs	r3, r2
 80094d8:	d056      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094e4:	d033      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80094e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094ea:	d82c      	bhi.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094f0:	d02f      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80094f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094f6:	d826      	bhi.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094fc:	d02b      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80094fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009502:	d820      	bhi.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009508:	d012      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800950a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800950e:	d81a      	bhi.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009510:	2b00      	cmp	r3, #0
 8009512:	d022      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009518:	d115      	bne.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800951e:	3308      	adds	r3, #8
 8009520:	2101      	movs	r1, #1
 8009522:	4618      	mov	r0, r3
 8009524:	f002 f8e0 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009528:	4603      	mov	r3, r0
 800952a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800952e:	e015      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009534:	3328      	adds	r3, #40	; 0x28
 8009536:	2101      	movs	r1, #1
 8009538:	4618      	mov	r0, r3
 800953a:	f002 f987 	bl	800b84c <RCCEx_PLL3_Config>
 800953e:	4603      	mov	r3, r0
 8009540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009544:	e00a      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800954c:	e006      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800954e:	bf00      	nop
 8009550:	e004      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009552:	bf00      	nop
 8009554:	e002      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009556:	bf00      	nop
 8009558:	e000      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800955a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800955c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10d      	bne.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009564:	4b05      	ldr	r3, [pc, #20]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009568:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800956c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009572:	4a02      	ldr	r2, [pc, #8]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009574:	430b      	orrs	r3, r1
 8009576:	6513      	str	r3, [r2, #80]	; 0x50
 8009578:	e006      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800957a:	bf00      	nop
 800957c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009580:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009584:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009598:	2300      	movs	r3, #0
 800959a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800959e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80095a2:	460b      	mov	r3, r1
 80095a4:	4313      	orrs	r3, r2
 80095a6:	d055      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80095a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095b4:	d033      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80095b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095ba:	d82c      	bhi.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c0:	d02f      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80095c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c6:	d826      	bhi.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095cc:	d02b      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80095ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095d2:	d820      	bhi.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095d8:	d012      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80095da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095de:	d81a      	bhi.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d022      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80095e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095e8:	d115      	bne.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ee:	3308      	adds	r3, #8
 80095f0:	2101      	movs	r1, #1
 80095f2:	4618      	mov	r0, r3
 80095f4:	f002 f878 	bl	800b6e8 <RCCEx_PLL2_Config>
 80095f8:	4603      	mov	r3, r0
 80095fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80095fe:	e015      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009604:	3328      	adds	r3, #40	; 0x28
 8009606:	2101      	movs	r1, #1
 8009608:	4618      	mov	r0, r3
 800960a:	f002 f91f 	bl	800b84c <RCCEx_PLL3_Config>
 800960e:	4603      	mov	r3, r0
 8009610:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009614:	e00a      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800961c:	e006      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800961e:	bf00      	nop
 8009620:	e004      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009622:	bf00      	nop
 8009624:	e002      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009626:	bf00      	nop
 8009628:	e000      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800962a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800962c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10b      	bne.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009634:	4ba3      	ldr	r3, [pc, #652]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009638:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800963c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009640:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009644:	4a9f      	ldr	r2, [pc, #636]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009646:	430b      	orrs	r3, r1
 8009648:	6593      	str	r3, [r2, #88]	; 0x58
 800964a:	e003      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009650:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009664:	2300      	movs	r3, #0
 8009666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800966a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800966e:	460b      	mov	r3, r1
 8009670:	4313      	orrs	r3, r2
 8009672:	d037      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800967e:	d00e      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009684:	d816      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d018      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800968a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800968e:	d111      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009690:	4b8c      	ldr	r3, [pc, #560]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	4a8b      	ldr	r2, [pc, #556]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800969a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800969c:	e00f      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800969e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a2:	3308      	adds	r3, #8
 80096a4:	2101      	movs	r1, #1
 80096a6:	4618      	mov	r0, r3
 80096a8:	f002 f81e 	bl	800b6e8 <RCCEx_PLL2_Config>
 80096ac:	4603      	mov	r3, r0
 80096ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80096b2:	e004      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096ba:	e000      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80096bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10a      	bne.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80096c6:	4b7f      	ldr	r3, [pc, #508]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80096ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d4:	4a7b      	ldr	r2, [pc, #492]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096d6:	430b      	orrs	r3, r1
 80096d8:	6513      	str	r3, [r2, #80]	; 0x50
 80096da:	e003      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80096e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80096f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096f4:	2300      	movs	r3, #0
 80096f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80096fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80096fe:	460b      	mov	r3, r1
 8009700:	4313      	orrs	r3, r2
 8009702:	d039      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800970a:	2b03      	cmp	r3, #3
 800970c:	d81c      	bhi.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	08009751 	.word	0x08009751
 8009718:	08009725 	.word	0x08009725
 800971c:	08009733 	.word	0x08009733
 8009720:	08009751 	.word	0x08009751
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009724:	4b67      	ldr	r3, [pc, #412]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	4a66      	ldr	r2, [pc, #408]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800972a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800972e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009730:	e00f      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009736:	3308      	adds	r3, #8
 8009738:	2102      	movs	r1, #2
 800973a:	4618      	mov	r0, r3
 800973c:	f001 ffd4 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009740:	4603      	mov	r3, r0
 8009742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009746:	e004      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800974e:	e000      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10a      	bne.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800975a:	4b5a      	ldr	r3, [pc, #360]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800975c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800975e:	f023 0103 	bic.w	r1, r3, #3
 8009762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009768:	4a56      	ldr	r2, [pc, #344]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800976a:	430b      	orrs	r3, r1
 800976c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800976e:	e003      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009774:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009788:	2300      	movs	r3, #0
 800978a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800978e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009792:	460b      	mov	r3, r1
 8009794:	4313      	orrs	r3, r2
 8009796:	f000 809f 	beq.w	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800979a:	4b4b      	ldr	r3, [pc, #300]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a4a      	ldr	r2, [pc, #296]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80097a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097a6:	f7f9 fa63 	bl	8002c70 <HAL_GetTick>
 80097aa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097ae:	e00b      	b.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097b0:	f7f9 fa5e 	bl	8002c70 <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	2b64      	cmp	r3, #100	; 0x64
 80097be:	d903      	bls.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097c6:	e005      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097c8:	4b3f      	ldr	r3, [pc, #252]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d0ed      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80097d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d179      	bne.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80097dc:	4b39      	ldr	r3, [pc, #228]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80097e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80097e8:	4053      	eors	r3, r2
 80097ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d015      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097f2:	4b34      	ldr	r3, [pc, #208]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097fe:	4b31      	ldr	r3, [pc, #196]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009802:	4a30      	ldr	r2, [pc, #192]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009808:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800980a:	4b2e      	ldr	r3, [pc, #184]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800980c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980e:	4a2d      	ldr	r2, [pc, #180]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009814:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009816:	4a2b      	ldr	r2, [pc, #172]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009818:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800981c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800981e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009822:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800982a:	d118      	bne.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800982c:	f7f9 fa20 	bl	8002c70 <HAL_GetTick>
 8009830:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009834:	e00d      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009836:	f7f9 fa1b 	bl	8002c70 <HAL_GetTick>
 800983a:	4602      	mov	r2, r0
 800983c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009840:	1ad2      	subs	r2, r2, r3
 8009842:	f241 3388 	movw	r3, #5000	; 0x1388
 8009846:	429a      	cmp	r2, r3
 8009848:	d903      	bls.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009850:	e005      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009852:	4b1c      	ldr	r3, [pc, #112]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0eb      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800985e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009862:	2b00      	cmp	r3, #0
 8009864:	d129      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800986a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800986e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009876:	d10e      	bne.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009878:	4b12      	ldr	r3, [pc, #72]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009884:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009888:	091a      	lsrs	r2, r3, #4
 800988a:	4b10      	ldr	r3, [pc, #64]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800988c:	4013      	ands	r3, r2
 800988e:	4a0d      	ldr	r2, [pc, #52]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009890:	430b      	orrs	r3, r1
 8009892:	6113      	str	r3, [r2, #16]
 8009894:	e005      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009896:	4b0b      	ldr	r3, [pc, #44]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	4a0a      	ldr	r2, [pc, #40]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800989c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098a0:	6113      	str	r3, [r2, #16]
 80098a2:	4b08      	ldr	r3, [pc, #32]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80098a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098b2:	4a04      	ldr	r2, [pc, #16]	; (80098c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098b4:	430b      	orrs	r3, r1
 80098b6:	6713      	str	r3, [r2, #112]	; 0x70
 80098b8:	e00e      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80098ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80098c2:	e009      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80098c4:	58024400 	.word	0x58024400
 80098c8:	58024800 	.word	0x58024800
 80098cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80098d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	f002 0301 	and.w	r3, r2, #1
 80098e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098e8:	2300      	movs	r3, #0
 80098ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4313      	orrs	r3, r2
 80098f6:	f000 8089 	beq.w	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80098fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009900:	2b28      	cmp	r3, #40	; 0x28
 8009902:	d86b      	bhi.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009904:	a201      	add	r2, pc, #4	; (adr r2, 800990c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990a:	bf00      	nop
 800990c:	080099e5 	.word	0x080099e5
 8009910:	080099dd 	.word	0x080099dd
 8009914:	080099dd 	.word	0x080099dd
 8009918:	080099dd 	.word	0x080099dd
 800991c:	080099dd 	.word	0x080099dd
 8009920:	080099dd 	.word	0x080099dd
 8009924:	080099dd 	.word	0x080099dd
 8009928:	080099dd 	.word	0x080099dd
 800992c:	080099b1 	.word	0x080099b1
 8009930:	080099dd 	.word	0x080099dd
 8009934:	080099dd 	.word	0x080099dd
 8009938:	080099dd 	.word	0x080099dd
 800993c:	080099dd 	.word	0x080099dd
 8009940:	080099dd 	.word	0x080099dd
 8009944:	080099dd 	.word	0x080099dd
 8009948:	080099dd 	.word	0x080099dd
 800994c:	080099c7 	.word	0x080099c7
 8009950:	080099dd 	.word	0x080099dd
 8009954:	080099dd 	.word	0x080099dd
 8009958:	080099dd 	.word	0x080099dd
 800995c:	080099dd 	.word	0x080099dd
 8009960:	080099dd 	.word	0x080099dd
 8009964:	080099dd 	.word	0x080099dd
 8009968:	080099dd 	.word	0x080099dd
 800996c:	080099e5 	.word	0x080099e5
 8009970:	080099dd 	.word	0x080099dd
 8009974:	080099dd 	.word	0x080099dd
 8009978:	080099dd 	.word	0x080099dd
 800997c:	080099dd 	.word	0x080099dd
 8009980:	080099dd 	.word	0x080099dd
 8009984:	080099dd 	.word	0x080099dd
 8009988:	080099dd 	.word	0x080099dd
 800998c:	080099e5 	.word	0x080099e5
 8009990:	080099dd 	.word	0x080099dd
 8009994:	080099dd 	.word	0x080099dd
 8009998:	080099dd 	.word	0x080099dd
 800999c:	080099dd 	.word	0x080099dd
 80099a0:	080099dd 	.word	0x080099dd
 80099a4:	080099dd 	.word	0x080099dd
 80099a8:	080099dd 	.word	0x080099dd
 80099ac:	080099e5 	.word	0x080099e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b4:	3308      	adds	r3, #8
 80099b6:	2101      	movs	r1, #1
 80099b8:	4618      	mov	r0, r3
 80099ba:	f001 fe95 	bl	800b6e8 <RCCEx_PLL2_Config>
 80099be:	4603      	mov	r3, r0
 80099c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80099c4:	e00f      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ca:	3328      	adds	r3, #40	; 0x28
 80099cc:	2101      	movs	r1, #1
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 ff3c 	bl	800b84c <RCCEx_PLL3_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80099da:	e004      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099e2:	e000      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80099e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10a      	bne.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80099ee:	4bbf      	ldr	r3, [pc, #764]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80099f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099fc:	4abb      	ldr	r2, [pc, #748]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099fe:	430b      	orrs	r3, r1
 8009a00:	6553      	str	r3, [r2, #84]	; 0x54
 8009a02:	e003      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	f002 0302 	and.w	r3, r2, #2
 8009a18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009a22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009a26:	460b      	mov	r3, r1
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	d041      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	d824      	bhi.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009a36:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009a89 	.word	0x08009a89
 8009a40:	08009a55 	.word	0x08009a55
 8009a44:	08009a6b 	.word	0x08009a6b
 8009a48:	08009a89 	.word	0x08009a89
 8009a4c:	08009a89 	.word	0x08009a89
 8009a50:	08009a89 	.word	0x08009a89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a58:	3308      	adds	r3, #8
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f001 fe43 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009a62:	4603      	mov	r3, r0
 8009a64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009a68:	e00f      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6e:	3328      	adds	r3, #40	; 0x28
 8009a70:	2101      	movs	r1, #1
 8009a72:	4618      	mov	r0, r3
 8009a74:	f001 feea 	bl	800b84c <RCCEx_PLL3_Config>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009a7e:	e004      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a86:	e000      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10a      	bne.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a92:	4b96      	ldr	r3, [pc, #600]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a96:	f023 0107 	bic.w	r1, r3, #7
 8009a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa0:	4a92      	ldr	r2, [pc, #584]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009aa2:	430b      	orrs	r3, r1
 8009aa4:	6553      	str	r3, [r2, #84]	; 0x54
 8009aa6:	e003      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	f002 0304 	and.w	r3, r2, #4
 8009abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ac6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009aca:	460b      	mov	r3, r1
 8009acc:	4313      	orrs	r3, r2
 8009ace:	d044      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ad8:	2b05      	cmp	r3, #5
 8009ada:	d825      	bhi.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009adc:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae2:	bf00      	nop
 8009ae4:	08009b31 	.word	0x08009b31
 8009ae8:	08009afd 	.word	0x08009afd
 8009aec:	08009b13 	.word	0x08009b13
 8009af0:	08009b31 	.word	0x08009b31
 8009af4:	08009b31 	.word	0x08009b31
 8009af8:	08009b31 	.word	0x08009b31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b00:	3308      	adds	r3, #8
 8009b02:	2101      	movs	r1, #1
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 fdef 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b10:	e00f      	b.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b16:	3328      	adds	r3, #40	; 0x28
 8009b18:	2101      	movs	r1, #1
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f001 fe96 	bl	800b84c <RCCEx_PLL3_Config>
 8009b20:	4603      	mov	r3, r0
 8009b22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b26:	e004      	b.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b2e:	e000      	b.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10b      	bne.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b3a:	4b6c      	ldr	r3, [pc, #432]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b3e:	f023 0107 	bic.w	r1, r3, #7
 8009b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b4a:	4a68      	ldr	r2, [pc, #416]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8009b50:	e003      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f002 0320 	and.w	r3, r2, #32
 8009b66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009b74:	460b      	mov	r3, r1
 8009b76:	4313      	orrs	r3, r2
 8009b78:	d055      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b86:	d033      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b8c:	d82c      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b92:	d02f      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b98:	d826      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b9e:	d02b      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009ba0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ba4:	d820      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009baa:	d012      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb0:	d81a      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d022      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bba:	d115      	bne.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f001 fd8f 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009bd0:	e015      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd6:	3328      	adds	r3, #40	; 0x28
 8009bd8:	2102      	movs	r1, #2
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 fe36 	bl	800b84c <RCCEx_PLL3_Config>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009be6:	e00a      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bee:	e006      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bf0:	bf00      	nop
 8009bf2:	e004      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bf4:	bf00      	nop
 8009bf6:	e002      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bf8:	bf00      	nop
 8009bfa:	e000      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c06:	4b39      	ldr	r3, [pc, #228]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c16:	4a35      	ldr	r2, [pc, #212]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c18:	430b      	orrs	r3, r1
 8009c1a:	6553      	str	r3, [r2, #84]	; 0x54
 8009c1c:	e003      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c36:	2300      	movs	r3, #0
 8009c38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4313      	orrs	r3, r2
 8009c44:	d058      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009c52:	d033      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009c54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009c58:	d82c      	bhi.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c5e:	d02f      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c64:	d826      	bhi.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c6a:	d02b      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009c6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c70:	d820      	bhi.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c76:	d012      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c7c:	d81a      	bhi.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d022      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c86:	d115      	bne.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	2100      	movs	r1, #0
 8009c90:	4618      	mov	r0, r3
 8009c92:	f001 fd29 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009c96:	4603      	mov	r3, r0
 8009c98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009c9c:	e015      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca2:	3328      	adds	r3, #40	; 0x28
 8009ca4:	2102      	movs	r1, #2
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f001 fdd0 	bl	800b84c <RCCEx_PLL3_Config>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009cb2:	e00a      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cba:	e006      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009cbc:	bf00      	nop
 8009cbe:	e004      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009cc0:	bf00      	nop
 8009cc2:	e002      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009cc4:	bf00      	nop
 8009cc6:	e000      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10e      	bne.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009cd2:	4b06      	ldr	r3, [pc, #24]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ce2:	4a02      	ldr	r2, [pc, #8]	; (8009cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8009ce8:	e006      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009cea:	bf00      	nop
 8009cec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009d12:	460b      	mov	r3, r1
 8009d14:	4313      	orrs	r3, r2
 8009d16:	d055      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d24:	d033      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009d26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d2a:	d82c      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d30:	d02f      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d36:	d826      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d3c:	d02b      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009d3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d42:	d820      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d48:	d012      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d4e:	d81a      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d022      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d58:	d115      	bne.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d5e:	3308      	adds	r3, #8
 8009d60:	2100      	movs	r1, #0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f001 fcc0 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009d6e:	e015      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d74:	3328      	adds	r3, #40	; 0x28
 8009d76:	2102      	movs	r1, #2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f001 fd67 	bl	800b84c <RCCEx_PLL3_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009d84:	e00a      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d8c:	e006      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d8e:	bf00      	nop
 8009d90:	e004      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d92:	bf00      	nop
 8009d94:	e002      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d96:	bf00      	nop
 8009d98:	e000      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10b      	bne.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009da4:	4ba1      	ldr	r3, [pc, #644]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009db4:	4a9d      	ldr	r2, [pc, #628]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009db6:	430b      	orrs	r3, r1
 8009db8:	6593      	str	r3, [r2, #88]	; 0x58
 8009dba:	e003      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f002 0308 	and.w	r3, r2, #8
 8009dd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009dda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009dde:	460b      	mov	r3, r1
 8009de0:	4313      	orrs	r3, r2
 8009de2:	d01e      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df0:	d10c      	bne.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df6:	3328      	adds	r3, #40	; 0x28
 8009df8:	2102      	movs	r1, #2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f001 fd26 	bl	800b84c <RCCEx_PLL3_Config>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d002      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e0c:	4b87      	ldr	r3, [pc, #540]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e1c:	4a83      	ldr	r2, [pc, #524]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	f002 0310 	and.w	r3, r2, #16
 8009e2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e32:	2300      	movs	r3, #0
 8009e34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	d01e      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4e:	d10c      	bne.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e54:	3328      	adds	r3, #40	; 0x28
 8009e56:	2102      	movs	r1, #2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f001 fcf7 	bl	800b84c <RCCEx_PLL3_Config>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e6a:	4b70      	ldr	r3, [pc, #448]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e7a:	4a6c      	ldr	r2, [pc, #432]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e7c:	430b      	orrs	r3, r1
 8009e7e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e90:	2300      	movs	r3, #0
 8009e92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	d03e      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eac:	d022      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eb2:	d81b      	bhi.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ebc:	d00b      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009ebe:	e015      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f001 fc0d 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009ed4:	e00f      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eda:	3328      	adds	r3, #40	; 0x28
 8009edc:	2102      	movs	r1, #2
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f001 fcb4 	bl	800b84c <RCCEx_PLL3_Config>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009eea:	e004      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ef2:	e000      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10b      	bne.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009efe:	4b4b      	ldr	r3, [pc, #300]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f0e:	4a47      	ldr	r2, [pc, #284]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f10:	430b      	orrs	r3, r1
 8009f12:	6593      	str	r3, [r2, #88]	; 0x58
 8009f14:	e003      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009f2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009f34:	460b      	mov	r3, r1
 8009f36:	4313      	orrs	r3, r2
 8009f38:	d03b      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f46:	d01f      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f4c:	d818      	bhi.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f52:	d003      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f58:	d007      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009f5a:	e011      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f5c:	4b33      	ldr	r3, [pc, #204]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f60:	4a32      	ldr	r2, [pc, #200]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009f68:	e00f      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f6e:	3328      	adds	r3, #40	; 0x28
 8009f70:	2101      	movs	r1, #1
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 fc6a 	bl	800b84c <RCCEx_PLL3_Config>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009f7e:	e004      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f86:	e000      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10b      	bne.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f92:	4b26      	ldr	r3, [pc, #152]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa2:	4a22      	ldr	r2, [pc, #136]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fa4:	430b      	orrs	r3, r1
 8009fa6:	6553      	str	r3, [r2, #84]	; 0x54
 8009fa8:	e003      	b.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	677b      	str	r3, [r7, #116]	; 0x74
 8009fc4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	d034      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fdc:	d007      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009fde:	e011      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fe0:	4b12      	ldr	r3, [pc, #72]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe4:	4a11      	ldr	r2, [pc, #68]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009fec:	e00e      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ff2:	3308      	adds	r3, #8
 8009ff4:	2102      	movs	r1, #2
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 fb76 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a002:	e003      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a00a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a00c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10d      	bne.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a022:	4a02      	ldr	r2, [pc, #8]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a024:	430b      	orrs	r3, r1
 800a026:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a028:	e006      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a02a:	bf00      	nop
 800a02c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a030:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a034:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a044:	66bb      	str	r3, [r7, #104]	; 0x68
 800a046:	2300      	movs	r3, #0
 800a048:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a04a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a04e:	460b      	mov	r3, r1
 800a050:	4313      	orrs	r3, r2
 800a052:	d00c      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a058:	3328      	adds	r3, #40	; 0x28
 800a05a:	2102      	movs	r1, #2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 fbf5 	bl	800b84c <RCCEx_PLL3_Config>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d002      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a07a:	663b      	str	r3, [r7, #96]	; 0x60
 800a07c:	2300      	movs	r3, #0
 800a07e:	667b      	str	r3, [r7, #100]	; 0x64
 800a080:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a084:	460b      	mov	r3, r1
 800a086:	4313      	orrs	r3, r2
 800a088:	d038      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a096:	d018      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a09c:	d811      	bhi.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a09e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a2:	d014      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a8:	d80b      	bhi.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d011      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a0ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0b2:	d106      	bne.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0b4:	4bc3      	ldr	r3, [pc, #780]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b8:	4ac2      	ldr	r2, [pc, #776]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a0c0:	e008      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0c8:	e004      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a0ca:	bf00      	nop
 800a0cc:	e002      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a0ce:	bf00      	nop
 800a0d0:	e000      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a0d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10b      	bne.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0dc:	4bb9      	ldr	r3, [pc, #740]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0ec:	4ab5      	ldr	r2, [pc, #724]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0ee:	430b      	orrs	r3, r1
 800a0f0:	6553      	str	r3, [r2, #84]	; 0x54
 800a0f2:	e003      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a108:	65bb      	str	r3, [r7, #88]	; 0x58
 800a10a:	2300      	movs	r3, #0
 800a10c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a10e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a112:	460b      	mov	r3, r1
 800a114:	4313      	orrs	r3, r2
 800a116:	d009      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a118:	4baa      	ldr	r3, [pc, #680]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a11c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a126:	4aa7      	ldr	r2, [pc, #668]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a128:	430b      	orrs	r3, r1
 800a12a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a138:	653b      	str	r3, [r7, #80]	; 0x50
 800a13a:	2300      	movs	r3, #0
 800a13c:	657b      	str	r3, [r7, #84]	; 0x54
 800a13e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a142:	460b      	mov	r3, r1
 800a144:	4313      	orrs	r3, r2
 800a146:	d00a      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a148:	4b9e      	ldr	r3, [pc, #632]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a154:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a158:	4a9a      	ldr	r2, [pc, #616]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a15a:	430b      	orrs	r3, r1
 800a15c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a16a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a16c:	2300      	movs	r3, #0
 800a16e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a170:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a174:	460b      	mov	r3, r1
 800a176:	4313      	orrs	r3, r2
 800a178:	d009      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a17a:	4b92      	ldr	r3, [pc, #584]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a17e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a188:	4a8e      	ldr	r2, [pc, #568]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a18a:	430b      	orrs	r3, r1
 800a18c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a19a:	643b      	str	r3, [r7, #64]	; 0x40
 800a19c:	2300      	movs	r3, #0
 800a19e:	647b      	str	r3, [r7, #68]	; 0x44
 800a1a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	d00e      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a1aa:	4b86      	ldr	r3, [pc, #536]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	4a85      	ldr	r2, [pc, #532]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1b4:	6113      	str	r3, [r2, #16]
 800a1b6:	4b83      	ldr	r3, [pc, #524]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1b8:	6919      	ldr	r1, [r3, #16]
 800a1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a1c2:	4a80      	ldr	r2, [pc, #512]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1c4:	430b      	orrs	r3, r1
 800a1c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a1d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	d009      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a1e4:	4b77      	ldr	r3, [pc, #476]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f2:	4a74      	ldr	r2, [pc, #464]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1f4:	430b      	orrs	r3, r1
 800a1f6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a204:	633b      	str	r3, [r7, #48]	; 0x30
 800a206:	2300      	movs	r3, #0
 800a208:	637b      	str	r3, [r7, #52]	; 0x34
 800a20a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a20e:	460b      	mov	r3, r1
 800a210:	4313      	orrs	r3, r2
 800a212:	d00a      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a214:	4b6b      	ldr	r3, [pc, #428]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a218:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a224:	4a67      	ldr	r2, [pc, #412]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a226:	430b      	orrs	r3, r1
 800a228:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	2100      	movs	r1, #0
 800a234:	62b9      	str	r1, [r7, #40]	; 0x28
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a23c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a240:	460b      	mov	r3, r1
 800a242:	4313      	orrs	r3, r2
 800a244:	d011      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24a:	3308      	adds	r3, #8
 800a24c:	2100      	movs	r1, #0
 800a24e:	4618      	mov	r0, r3
 800a250:	f001 fa4a 	bl	800b6e8 <RCCEx_PLL2_Config>
 800a254:	4603      	mov	r3, r0
 800a256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a25a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	2100      	movs	r1, #0
 800a274:	6239      	str	r1, [r7, #32]
 800a276:	f003 0302 	and.w	r3, r3, #2
 800a27a:	627b      	str	r3, [r7, #36]	; 0x24
 800a27c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a280:	460b      	mov	r3, r1
 800a282:	4313      	orrs	r3, r2
 800a284:	d011      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28a:	3308      	adds	r3, #8
 800a28c:	2101      	movs	r1, #1
 800a28e:	4618      	mov	r0, r3
 800a290:	f001 fa2a 	bl	800b6e8 <RCCEx_PLL2_Config>
 800a294:	4603      	mov	r3, r0
 800a296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a29a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	61b9      	str	r1, [r7, #24]
 800a2b6:	f003 0304 	and.w	r3, r3, #4
 800a2ba:	61fb      	str	r3, [r7, #28]
 800a2bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	d011      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	2102      	movs	r1, #2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f001 fa0a 	bl	800b6e8 <RCCEx_PLL2_Config>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a2da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d003      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	6139      	str	r1, [r7, #16]
 800a2f6:	f003 0308 	and.w	r3, r3, #8
 800a2fa:	617b      	str	r3, [r7, #20]
 800a2fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a300:	460b      	mov	r3, r1
 800a302:	4313      	orrs	r3, r2
 800a304:	d011      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a30a:	3328      	adds	r3, #40	; 0x28
 800a30c:	2100      	movs	r1, #0
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 fa9c 	bl	800b84c <RCCEx_PLL3_Config>
 800a314:	4603      	mov	r3, r0
 800a316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a31a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a326:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	2100      	movs	r1, #0
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	f003 0310 	and.w	r3, r3, #16
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a340:	460b      	mov	r3, r1
 800a342:	4313      	orrs	r3, r2
 800a344:	d011      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34a:	3328      	adds	r3, #40	; 0x28
 800a34c:	2101      	movs	r1, #1
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 fa7c 	bl	800b84c <RCCEx_PLL3_Config>
 800a354:	4603      	mov	r3, r0
 800a356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a35a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	2100      	movs	r1, #0
 800a374:	6039      	str	r1, [r7, #0]
 800a376:	f003 0320 	and.w	r3, r3, #32
 800a37a:	607b      	str	r3, [r7, #4]
 800a37c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a380:	460b      	mov	r3, r1
 800a382:	4313      	orrs	r3, r2
 800a384:	d011      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a38a:	3328      	adds	r3, #40	; 0x28
 800a38c:	2102      	movs	r1, #2
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 fa5c 	bl	800b84c <RCCEx_PLL3_Config>
 800a394:	4603      	mov	r3, r0
 800a396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a39a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a3aa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e000      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3c4:	58024400 	.word	0x58024400

0800a3c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b090      	sub	sp, #64	; 0x40
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a3d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a3da:	430b      	orrs	r3, r1
 800a3dc:	f040 8094 	bne.w	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a3e0:	4b9e      	ldr	r3, [pc, #632]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e4:	f003 0307 	and.w	r3, r3, #7
 800a3e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	f200 8087 	bhi.w	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a3f2:	a201      	add	r2, pc, #4	; (adr r2, 800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f8:	0800a40d 	.word	0x0800a40d
 800a3fc:	0800a435 	.word	0x0800a435
 800a400:	0800a45d 	.word	0x0800a45d
 800a404:	0800a4f9 	.word	0x0800a4f9
 800a408:	0800a485 	.word	0x0800a485
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a40c:	4b93      	ldr	r3, [pc, #588]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a418:	d108      	bne.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a41a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 f810 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a428:	f000 bd45 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a430:	f000 bd41 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a434:	4b89      	ldr	r3, [pc, #548]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a43c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a440:	d108      	bne.n	800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a442:	f107 0318 	add.w	r3, r7, #24
 800a446:	4618      	mov	r0, r3
 800a448:	f000 fd54 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a450:	f000 bd31 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a458:	f000 bd2d 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a45c:	4b7f      	ldr	r3, [pc, #508]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a468:	d108      	bne.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a46a:	f107 030c 	add.w	r3, r7, #12
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 fe94 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a478:	f000 bd1d 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a47c:	2300      	movs	r3, #0
 800a47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a480:	f000 bd19 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a484:	4b75      	ldr	r3, [pc, #468]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a48c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a48e:	4b73      	ldr	r3, [pc, #460]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0304 	and.w	r3, r3, #4
 800a496:	2b04      	cmp	r3, #4
 800a498:	d10c      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d109      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4a0:	4b6e      	ldr	r3, [pc, #440]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	08db      	lsrs	r3, r3, #3
 800a4a6:	f003 0303 	and.w	r3, r3, #3
 800a4aa:	4a6d      	ldr	r2, [pc, #436]	; (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4b2:	e01f      	b.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4b4:	4b69      	ldr	r3, [pc, #420]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4c0:	d106      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4c8:	d102      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4ca:	4b66      	ldr	r3, [pc, #408]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4ce:	e011      	b.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4d0:	4b62      	ldr	r3, [pc, #392]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4dc:	d106      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4e4:	d102      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4e6:	4b60      	ldr	r3, [pc, #384]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4ea:	e003      	b.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a4f0:	f000 bce1 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4f4:	f000 bcdf 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4f8:	4b5c      	ldr	r3, [pc, #368]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4fc:	f000 bcdb 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a500:	2300      	movs	r3, #0
 800a502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a504:	f000 bcd7 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a510:	430b      	orrs	r3, r1
 800a512:	f040 80ad 	bne.w	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a516:	4b51      	ldr	r3, [pc, #324]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a51a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a51e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a526:	d056      	beq.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a52e:	f200 8090 	bhi.w	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	2bc0      	cmp	r3, #192	; 0xc0
 800a536:	f000 8088 	beq.w	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	2bc0      	cmp	r3, #192	; 0xc0
 800a53e:	f200 8088 	bhi.w	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a544:	2b80      	cmp	r3, #128	; 0x80
 800a546:	d032      	beq.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	2b80      	cmp	r3, #128	; 0x80
 800a54c:	f200 8081 	bhi.w	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	2b40      	cmp	r3, #64	; 0x40
 800a55a:	d014      	beq.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a55c:	e079      	b.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a55e:	4b3f      	ldr	r3, [pc, #252]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a56a:	d108      	bne.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a56c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a570:	4618      	mov	r0, r3
 800a572:	f000 ff67 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a57a:	f000 bc9c 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a57e:	2300      	movs	r3, #0
 800a580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a582:	f000 bc98 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a586:	4b35      	ldr	r3, [pc, #212]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a58e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a592:	d108      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a594:	f107 0318 	add.w	r3, r7, #24
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 fcab 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5a2:	f000 bc88 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5aa:	f000 bc84 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ae:	4b2b      	ldr	r3, [pc, #172]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ba:	d108      	bne.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5bc:	f107 030c 	add.w	r3, r7, #12
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fdeb 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ca:	f000 bc74 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5d2:	f000 bc70 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5d6:	4b21      	ldr	r3, [pc, #132]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5e0:	4b1e      	ldr	r3, [pc, #120]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b04      	cmp	r3, #4
 800a5ea:	d10c      	bne.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d109      	bne.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5f2:	4b1a      	ldr	r3, [pc, #104]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	08db      	lsrs	r3, r3, #3
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	4a18      	ldr	r2, [pc, #96]	; (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a602:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a604:	e01f      	b.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a606:	4b15      	ldr	r3, [pc, #84]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a612:	d106      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a61a:	d102      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a61c:	4b11      	ldr	r3, [pc, #68]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a61e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a620:	e011      	b.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a622:	4b0e      	ldr	r3, [pc, #56]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a62a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a62e:	d106      	bne.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a636:	d102      	bne.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a638:	4b0b      	ldr	r3, [pc, #44]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a63c:	e003      	b.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a642:	f000 bc38 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a646:	f000 bc36 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a64a:	4b08      	ldr	r3, [pc, #32]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a64e:	f000 bc32 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a656:	f000 bc2e 	b.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a65a:	bf00      	nop
 800a65c:	58024400 	.word	0x58024400
 800a660:	03d09000 	.word	0x03d09000
 800a664:	003d0900 	.word	0x003d0900
 800a668:	017d7840 	.word	0x017d7840
 800a66c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a670:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a674:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a678:	430b      	orrs	r3, r1
 800a67a:	f040 809c 	bne.w	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a67e:	4b9e      	ldr	r3, [pc, #632]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a682:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a686:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a68e:	d054      	beq.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a696:	f200 808b 	bhi.w	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a6a0:	f000 8083 	beq.w	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a6aa:	f200 8081 	bhi.w	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6b4:	d02f      	beq.n	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6bc:	d878      	bhi.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d004      	beq.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6ca:	d012      	beq.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a6cc:	e070      	b.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6ce:	4b8a      	ldr	r3, [pc, #552]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6da:	d107      	bne.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 feaf 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ea:	e3e4      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6f0:	e3e1      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6f2:	4b81      	ldr	r3, [pc, #516]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6fe:	d107      	bne.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a700:	f107 0318 	add.w	r3, r7, #24
 800a704:	4618      	mov	r0, r3
 800a706:	f000 fbf5 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a70e:	e3d2      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a710:	2300      	movs	r3, #0
 800a712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a714:	e3cf      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a716:	4b78      	ldr	r3, [pc, #480]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a71e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a722:	d107      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a724:	f107 030c 	add.w	r3, r7, #12
 800a728:	4618      	mov	r0, r3
 800a72a:	f000 fd37 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a732:	e3c0      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a734:	2300      	movs	r3, #0
 800a736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a738:	e3bd      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a73a:	4b6f      	ldr	r3, [pc, #444]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a73e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a742:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a744:	4b6c      	ldr	r3, [pc, #432]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 0304 	and.w	r3, r3, #4
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	d10c      	bne.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a752:	2b00      	cmp	r3, #0
 800a754:	d109      	bne.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a756:	4b68      	ldr	r3, [pc, #416]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	08db      	lsrs	r3, r3, #3
 800a75c:	f003 0303 	and.w	r3, r3, #3
 800a760:	4a66      	ldr	r2, [pc, #408]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a762:	fa22 f303 	lsr.w	r3, r2, r3
 800a766:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a768:	e01e      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a76a:	4b63      	ldr	r3, [pc, #396]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a776:	d106      	bne.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a77e:	d102      	bne.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a780:	4b5f      	ldr	r3, [pc, #380]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a784:	e010      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a786:	4b5c      	ldr	r3, [pc, #368]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a78e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a792:	d106      	bne.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a79a:	d102      	bne.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a79c:	4b59      	ldr	r3, [pc, #356]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a79e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7a0:	e002      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a7a6:	e386      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7a8:	e385      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7aa:	4b57      	ldr	r3, [pc, #348]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7ae:	e382      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7b4:	e37f      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a7b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7ba:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a7be:	430b      	orrs	r3, r1
 800a7c0:	f040 80a7 	bne.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a7c4:	4b4c      	ldr	r3, [pc, #304]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a7cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7d4:	d055      	beq.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7dc:	f200 8096 	bhi.w	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7e6:	f000 8084 	beq.w	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7f0:	f200 808c 	bhi.w	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7fa:	d030      	beq.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a802:	f200 8083 	bhi.w	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d004      	beq.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a812:	d012      	beq.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a814:	e07a      	b.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a816:	4b38      	ldr	r3, [pc, #224]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a81e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a822:	d107      	bne.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 fe0b 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a832:	e340      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a838:	e33d      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a83a:	4b2f      	ldr	r3, [pc, #188]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a846:	d107      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a848:	f107 0318 	add.w	r3, r7, #24
 800a84c:	4618      	mov	r0, r3
 800a84e:	f000 fb51 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a856:	e32e      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a85c:	e32b      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a85e:	4b26      	ldr	r3, [pc, #152]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a86a:	d107      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a86c:	f107 030c 	add.w	r3, r7, #12
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fc93 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a87a:	e31c      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a880:	e319      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a882:	4b1d      	ldr	r3, [pc, #116]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a886:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a88a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a88c:	4b1a      	ldr	r3, [pc, #104]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0304 	and.w	r3, r3, #4
 800a894:	2b04      	cmp	r3, #4
 800a896:	d10c      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d109      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a89e:	4b16      	ldr	r3, [pc, #88]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	08db      	lsrs	r3, r3, #3
 800a8a4:	f003 0303 	and.w	r3, r3, #3
 800a8a8:	4a14      	ldr	r2, [pc, #80]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a8aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b0:	e01e      	b.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8b2:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8be:	d106      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8c6:	d102      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8c8:	4b0d      	ldr	r3, [pc, #52]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8cc:	e010      	b.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8ce:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8da:	d106      	bne.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8e2:	d102      	bne.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8e4:	4b07      	ldr	r3, [pc, #28]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8e8:	e002      	b.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a8ee:	e2e2      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8f0:	e2e1      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8f2:	4b05      	ldr	r3, [pc, #20]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f6:	e2de      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8f8:	58024400 	.word	0x58024400
 800a8fc:	03d09000 	.word	0x03d09000
 800a900:	003d0900 	.word	0x003d0900
 800a904:	017d7840 	.word	0x017d7840
 800a908:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a910:	e2d1      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a912:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a916:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a91a:	430b      	orrs	r3, r1
 800a91c:	f040 809c 	bne.w	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a920:	4b93      	ldr	r3, [pc, #588]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a924:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a928:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a930:	d054      	beq.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a938:	f200 808b 	bhi.w	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a942:	f000 8083 	beq.w	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a94c:	f200 8081 	bhi.w	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a956:	d02f      	beq.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a95e:	d878      	bhi.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a962:	2b00      	cmp	r3, #0
 800a964:	d004      	beq.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a96c:	d012      	beq.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a96e:	e070      	b.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a970:	4b7f      	ldr	r3, [pc, #508]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a97c:	d107      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a97e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a982:	4618      	mov	r0, r3
 800a984:	f000 fd5e 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a98c:	e293      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a992:	e290      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a994:	4b76      	ldr	r3, [pc, #472]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a99c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9a0:	d107      	bne.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9a2:	f107 0318 	add.w	r3, r7, #24
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 faa4 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9b0:	e281      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9b6:	e27e      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9b8:	4b6d      	ldr	r3, [pc, #436]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9c4:	d107      	bne.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9c6:	f107 030c 	add.w	r3, r7, #12
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 fbe6 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d4:	e26f      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9da:	e26c      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9dc:	4b64      	ldr	r3, [pc, #400]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9e4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9e6:	4b62      	ldr	r3, [pc, #392]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0304 	and.w	r3, r3, #4
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d10c      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d109      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9f8:	4b5d      	ldr	r3, [pc, #372]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	08db      	lsrs	r3, r3, #3
 800a9fe:	f003 0303 	and.w	r3, r3, #3
 800aa02:	4a5c      	ldr	r2, [pc, #368]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aa04:	fa22 f303 	lsr.w	r3, r2, r3
 800aa08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa0a:	e01e      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa0c:	4b58      	ldr	r3, [pc, #352]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa18:	d106      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800aa1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa20:	d102      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa22:	4b55      	ldr	r3, [pc, #340]	; (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa26:	e010      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa28:	4b51      	ldr	r3, [pc, #324]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa34:	d106      	bne.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aa36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa3c:	d102      	bne.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa3e:	4b4f      	ldr	r3, [pc, #316]	; (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aa40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa42:	e002      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aa48:	e235      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa4a:	e234      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa4c:	4b4c      	ldr	r3, [pc, #304]	; (800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800aa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa50:	e231      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa56:	e22e      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aa58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa5c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800aa60:	430b      	orrs	r3, r1
 800aa62:	f040 808f 	bne.w	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aa66:	4b42      	ldr	r3, [pc, #264]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa6a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800aa6e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa76:	d06b      	beq.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa7e:	d874      	bhi.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa86:	d056      	beq.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa8e:	d86c      	bhi.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa96:	d03b      	beq.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa9e:	d864      	bhi.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaa6:	d021      	beq.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaae:	d85c      	bhi.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d004      	beq.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800aab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aabc:	d004      	beq.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800aabe:	e054      	b.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800aac0:	f7fe fa4c 	bl	8008f5c <HAL_RCC_GetPCLK1Freq>
 800aac4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aac6:	e1f6      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aac8:	4b29      	ldr	r3, [pc, #164]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aad4:	d107      	bne.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aad6:	f107 0318 	add.w	r3, r7, #24
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 fa0a 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aae4:	e1e7      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaea:	e1e4      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aaec:	4b20      	ldr	r3, [pc, #128]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaf8:	d107      	bne.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aafa:	f107 030c 	add.w	r3, r7, #12
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 fb4c 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab08:	e1d5      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab0e:	e1d2      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab10:	4b17      	ldr	r3, [pc, #92]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0304 	and.w	r3, r3, #4
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d109      	bne.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab1c:	4b14      	ldr	r3, [pc, #80]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	08db      	lsrs	r3, r3, #3
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	4a13      	ldr	r2, [pc, #76]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ab28:	fa22 f303 	lsr.w	r3, r2, r3
 800ab2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab2e:	e1c2      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab34:	e1bf      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ab36:	4b0e      	ldr	r3, [pc, #56]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab42:	d102      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ab44:	4b0c      	ldr	r3, [pc, #48]	; (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab48:	e1b5      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab4e:	e1b2      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab50:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab5c:	d102      	bne.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ab5e:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ab60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab62:	e1a8      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab68:	e1a5      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab6e:	e1a2      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab70:	58024400 	.word	0x58024400
 800ab74:	03d09000 	.word	0x03d09000
 800ab78:	003d0900 	.word	0x003d0900
 800ab7c:	017d7840 	.word	0x017d7840
 800ab80:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab88:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ab8c:	430b      	orrs	r3, r1
 800ab8e:	d173      	bne.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ab90:	4b9c      	ldr	r3, [pc, #624]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ab98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aba0:	d02f      	beq.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aba8:	d863      	bhi.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800abaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abac:	2b00      	cmp	r3, #0
 800abae:	d004      	beq.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800abb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abb6:	d012      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800abb8:	e05b      	b.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abba:	4b92      	ldr	r3, [pc, #584]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abc6:	d107      	bne.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc8:	f107 0318 	add.w	r3, r7, #24
 800abcc:	4618      	mov	r0, r3
 800abce:	f000 f991 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abd6:	e16e      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abdc:	e16b      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abde:	4b89      	ldr	r3, [pc, #548]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abea:	d107      	bne.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abec:	f107 030c 	add.w	r3, r7, #12
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fad3 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abfa:	e15c      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac00:	e159      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac02:	4b80      	ldr	r3, [pc, #512]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac0c:	4b7d      	ldr	r3, [pc, #500]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0304 	and.w	r3, r3, #4
 800ac14:	2b04      	cmp	r3, #4
 800ac16:	d10c      	bne.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ac18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d109      	bne.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac1e:	4b79      	ldr	r3, [pc, #484]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	08db      	lsrs	r3, r3, #3
 800ac24:	f003 0303 	and.w	r3, r3, #3
 800ac28:	4a77      	ldr	r2, [pc, #476]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac30:	e01e      	b.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac32:	4b74      	ldr	r3, [pc, #464]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac3e:	d106      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ac40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac46:	d102      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac48:	4b70      	ldr	r3, [pc, #448]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac4c:	e010      	b.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac4e:	4b6d      	ldr	r3, [pc, #436]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac5a:	d106      	bne.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ac5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac62:	d102      	bne.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac64:	4b6a      	ldr	r3, [pc, #424]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ac66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac68:	e002      	b.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac6e:	e122      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac70:	e121      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac76:	e11e      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ac78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac7c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ac80:	430b      	orrs	r3, r1
 800ac82:	d133      	bne.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ac84:	4b5f      	ldr	r3, [pc, #380]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac8c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d004      	beq.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ac94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac9a:	d012      	beq.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ac9c:	e023      	b.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac9e:	4b59      	ldr	r3, [pc, #356]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acaa:	d107      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 fbc7 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acba:	e0fc      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc0:	e0f9      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acc2:	4b50      	ldr	r3, [pc, #320]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acce:	d107      	bne.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acd0:	f107 0318 	add.w	r3, r7, #24
 800acd4:	4618      	mov	r0, r3
 800acd6:	f000 f90d 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800acda:	6a3b      	ldr	r3, [r7, #32]
 800acdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acde:	e0ea      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ace4:	e0e7      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acea:	e0e4      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800acec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acf0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800acf4:	430b      	orrs	r3, r1
 800acf6:	f040 808d 	bne.w	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800acfa:	4b42      	ldr	r3, [pc, #264]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acfe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ad02:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad0a:	d06b      	beq.n	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad12:	d874      	bhi.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad1a:	d056      	beq.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad22:	d86c      	bhi.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad2a:	d03b      	beq.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad32:	d864      	bhi.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad3a:	d021      	beq.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad42:	d85c      	bhi.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d004      	beq.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad50:	d004      	beq.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ad52:	e054      	b.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ad54:	f000 f8b8 	bl	800aec8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad58:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad5a:	e0ac      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad5c:	4b29      	ldr	r3, [pc, #164]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad68:	d107      	bne.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad6a:	f107 0318 	add.w	r3, r7, #24
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 f8c0 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad78:	e09d      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad7e:	e09a      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad80:	4b20      	ldr	r3, [pc, #128]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad8c:	d107      	bne.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad8e:	f107 030c 	add.w	r3, r7, #12
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 fa02 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad9c:	e08b      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ada2:	e088      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ada4:	4b17      	ldr	r3, [pc, #92]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 0304 	and.w	r3, r3, #4
 800adac:	2b04      	cmp	r3, #4
 800adae:	d109      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adb0:	4b14      	ldr	r3, [pc, #80]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	08db      	lsrs	r3, r3, #3
 800adb6:	f003 0303 	and.w	r3, r3, #3
 800adba:	4a13      	ldr	r2, [pc, #76]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800adbc:	fa22 f303 	lsr.w	r3, r2, r3
 800adc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adc2:	e078      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adc8:	e075      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800adca:	4b0e      	ldr	r3, [pc, #56]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800add6:	d102      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800add8:	4b0c      	ldr	r3, [pc, #48]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800addc:	e06b      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ade2:	e068      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ade4:	4b07      	ldr	r3, [pc, #28]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adf0:	d102      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800adf2:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf6:	e05e      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adfc:	e05b      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800adfe:	2300      	movs	r3, #0
 800ae00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae02:	e058      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae04:	58024400 	.word	0x58024400
 800ae08:	03d09000 	.word	0x03d09000
 800ae0c:	003d0900 	.word	0x003d0900
 800ae10:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae18:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ae1c:	430b      	orrs	r3, r1
 800ae1e:	d148      	bne.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ae20:	4b27      	ldr	r3, [pc, #156]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae28:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae30:	d02a      	beq.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae38:	d838      	bhi.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d004      	beq.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae46:	d00d      	beq.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ae48:	e030      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae4a:	4b1d      	ldr	r3, [pc, #116]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae56:	d102      	bne.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ae58:	4b1a      	ldr	r3, [pc, #104]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ae5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae5c:	e02b      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae62:	e028      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae64:	4b16      	ldr	r3, [pc, #88]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae70:	d107      	bne.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 fae4 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae80:	e019      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae86:	e016      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae88:	4b0d      	ldr	r3, [pc, #52]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae94:	d107      	bne.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae96:	f107 0318 	add.w	r3, r7, #24
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f000 f82a 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aea4:	e007      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeaa:	e004      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeb0:	e001      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800aeb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3740      	adds	r7, #64	; 0x40
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	58024400 	.word	0x58024400
 800aec4:	017d7840 	.word	0x017d7840

0800aec8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aecc:	f7fe f816 	bl	8008efc <HAL_RCC_GetHCLKFreq>
 800aed0:	4602      	mov	r2, r0
 800aed2:	4b06      	ldr	r3, [pc, #24]	; (800aeec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	091b      	lsrs	r3, r3, #4
 800aed8:	f003 0307 	and.w	r3, r3, #7
 800aedc:	4904      	ldr	r1, [pc, #16]	; (800aef0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aede:	5ccb      	ldrb	r3, [r1, r3]
 800aee0:	f003 031f 	and.w	r3, r3, #31
 800aee4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	58024400 	.word	0x58024400
 800aef0:	08012a08 	.word	0x08012a08

0800aef4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b089      	sub	sp, #36	; 0x24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aefc:	4ba1      	ldr	r3, [pc, #644]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af00:	f003 0303 	and.w	r3, r3, #3
 800af04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800af06:	4b9f      	ldr	r3, [pc, #636]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0a:	0b1b      	lsrs	r3, r3, #12
 800af0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af12:	4b9c      	ldr	r3, [pc, #624]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af16:	091b      	lsrs	r3, r3, #4
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af1e:	4b99      	ldr	r3, [pc, #612]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af22:	08db      	lsrs	r3, r3, #3
 800af24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	fb02 f303 	mul.w	r3, r2, r3
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 8111 	beq.w	800b164 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	2b02      	cmp	r3, #2
 800af46:	f000 8083 	beq.w	800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	f200 80a1 	bhi.w	800b094 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d003      	beq.n	800af60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d056      	beq.n	800b00c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af5e:	e099      	b.n	800b094 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af60:	4b88      	ldr	r3, [pc, #544]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 0320 	and.w	r3, r3, #32
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d02d      	beq.n	800afc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af6c:	4b85      	ldr	r3, [pc, #532]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	08db      	lsrs	r3, r3, #3
 800af72:	f003 0303 	and.w	r3, r3, #3
 800af76:	4a84      	ldr	r2, [pc, #528]	; (800b188 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800af78:	fa22 f303 	lsr.w	r3, r2, r3
 800af7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	ee07 3a90 	vmov	s15, r3
 800af84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	ee07 3a90 	vmov	s15, r3
 800af8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af96:	4b7b      	ldr	r3, [pc, #492]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afc6:	e087      	b.n	800b0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	ee07 3a90 	vmov	s15, r3
 800afce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b190 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800afd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afda:	4b6a      	ldr	r3, [pc, #424]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afea:	ed97 6a03 	vldr	s12, [r7, #12]
 800afee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800affa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800affe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b00a:	e065      	b.n	800b0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	ee07 3a90 	vmov	s15, r3
 800b012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b016:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b194 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b01a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b01e:	4b59      	ldr	r3, [pc, #356]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b026:	ee07 3a90 	vmov	s15, r3
 800b02a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b02e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b032:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b03a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b03e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b04a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b04e:	e043      	b.n	800b0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	ee07 3a90 	vmov	s15, r3
 800b056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b062:	4b48      	ldr	r3, [pc, #288]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b06a:	ee07 3a90 	vmov	s15, r3
 800b06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b072:	ed97 6a03 	vldr	s12, [r7, #12]
 800b076:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b08e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b092:	e021      	b.n	800b0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b194 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0a6:	4b37      	ldr	r3, [pc, #220]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ae:	ee07 3a90 	vmov	s15, r3
 800b0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b0d8:	4b2a      	ldr	r3, [pc, #168]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0dc:	0a5b      	lsrs	r3, r3, #9
 800b0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e2:	ee07 3a90 	vmov	s15, r3
 800b0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0fe:	ee17 2a90 	vmov	r2, s15
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b106:	4b1f      	ldr	r3, [pc, #124]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10a:	0c1b      	lsrs	r3, r3, #16
 800b10c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b110:	ee07 3a90 	vmov	s15, r3
 800b114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b11c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b120:	edd7 6a07 	vldr	s13, [r7, #28]
 800b124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b12c:	ee17 2a90 	vmov	r2, s15
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b134:	4b13      	ldr	r3, [pc, #76]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b138:	0e1b      	lsrs	r3, r3, #24
 800b13a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b14a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b14e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b15a:	ee17 2a90 	vmov	r2, s15
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b162:	e008      	b.n	800b176 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	609a      	str	r2, [r3, #8]
}
 800b176:	bf00      	nop
 800b178:	3724      	adds	r7, #36	; 0x24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	58024400 	.word	0x58024400
 800b188:	03d09000 	.word	0x03d09000
 800b18c:	46000000 	.word	0x46000000
 800b190:	4c742400 	.word	0x4c742400
 800b194:	4a742400 	.word	0x4a742400
 800b198:	4bbebc20 	.word	0x4bbebc20

0800b19c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b089      	sub	sp, #36	; 0x24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1a4:	4ba1      	ldr	r3, [pc, #644]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a8:	f003 0303 	and.w	r3, r3, #3
 800b1ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b1ae:	4b9f      	ldr	r3, [pc, #636]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b2:	0d1b      	lsrs	r3, r3, #20
 800b1b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b1ba:	4b9c      	ldr	r3, [pc, #624]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1be:	0a1b      	lsrs	r3, r3, #8
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b1c6:	4b99      	ldr	r3, [pc, #612]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ca:	08db      	lsrs	r3, r3, #3
 800b1cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	fb02 f303 	mul.w	r3, r2, r3
 800b1d6:	ee07 3a90 	vmov	s15, r3
 800b1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f000 8111 	beq.w	800b40c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	f000 8083 	beq.w	800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	f200 80a1 	bhi.w	800b33c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d003      	beq.n	800b208 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d056      	beq.n	800b2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b206:	e099      	b.n	800b33c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b208:	4b88      	ldr	r3, [pc, #544]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0320 	and.w	r3, r3, #32
 800b210:	2b00      	cmp	r3, #0
 800b212:	d02d      	beq.n	800b270 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b214:	4b85      	ldr	r3, [pc, #532]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	08db      	lsrs	r3, r3, #3
 800b21a:	f003 0303 	and.w	r3, r3, #3
 800b21e:	4a84      	ldr	r2, [pc, #528]	; (800b430 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b220:	fa22 f303 	lsr.w	r3, r2, r3
 800b224:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	ee07 3a90 	vmov	s15, r3
 800b22c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	ee07 3a90 	vmov	s15, r3
 800b236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b23e:	4b7b      	ldr	r3, [pc, #492]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b246:	ee07 3a90 	vmov	s15, r3
 800b24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b24e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b252:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b25e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b26a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b26e:	e087      	b.n	800b380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	ee07 3a90 	vmov	s15, r3
 800b276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b27a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b438 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b282:	4b6a      	ldr	r3, [pc, #424]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b28a:	ee07 3a90 	vmov	s15, r3
 800b28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b292:	ed97 6a03 	vldr	s12, [r7, #12]
 800b296:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2b2:	e065      	b.n	800b380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	ee07 3a90 	vmov	s15, r3
 800b2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b43c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2c6:	4b59      	ldr	r3, [pc, #356]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ce:	ee07 3a90 	vmov	s15, r3
 800b2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2f6:	e043      	b.n	800b380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	ee07 3a90 	vmov	s15, r3
 800b2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b302:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b30a:	4b48      	ldr	r3, [pc, #288]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b312:	ee07 3a90 	vmov	s15, r3
 800b316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b31a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b31e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b33a:	e021      	b.n	800b380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	ee07 3a90 	vmov	s15, r3
 800b342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b346:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b43c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b34a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b34e:	4b37      	ldr	r3, [pc, #220]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b356:	ee07 3a90 	vmov	s15, r3
 800b35a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b35e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b362:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b36a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b36e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b37a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b37e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b380:	4b2a      	ldr	r3, [pc, #168]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b384:	0a5b      	lsrs	r3, r3, #9
 800b386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b38a:	ee07 3a90 	vmov	s15, r3
 800b38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b39a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b39e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3a6:	ee17 2a90 	vmov	r2, s15
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b3ae:	4b1f      	ldr	r3, [pc, #124]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b2:	0c1b      	lsrs	r3, r3, #16
 800b3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b8:	ee07 3a90 	vmov	s15, r3
 800b3bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3d4:	ee17 2a90 	vmov	r2, s15
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b3dc:	4b13      	ldr	r3, [pc, #76]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e0:	0e1b      	lsrs	r3, r3, #24
 800b3e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3e6:	ee07 3a90 	vmov	s15, r3
 800b3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b402:	ee17 2a90 	vmov	r2, s15
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b40a:	e008      	b.n	800b41e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	609a      	str	r2, [r3, #8]
}
 800b41e:	bf00      	nop
 800b420:	3724      	adds	r7, #36	; 0x24
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	58024400 	.word	0x58024400
 800b430:	03d09000 	.word	0x03d09000
 800b434:	46000000 	.word	0x46000000
 800b438:	4c742400 	.word	0x4c742400
 800b43c:	4a742400 	.word	0x4a742400
 800b440:	4bbebc20 	.word	0x4bbebc20

0800b444 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b444:	b480      	push	{r7}
 800b446:	b089      	sub	sp, #36	; 0x24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b44c:	4ba0      	ldr	r3, [pc, #640]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b450:	f003 0303 	and.w	r3, r3, #3
 800b454:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b456:	4b9e      	ldr	r3, [pc, #632]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45a:	091b      	lsrs	r3, r3, #4
 800b45c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b460:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b462:	4b9b      	ldr	r3, [pc, #620]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b46c:	4b98      	ldr	r3, [pc, #608]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b470:	08db      	lsrs	r3, r3, #3
 800b472:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	fb02 f303 	mul.w	r3, r2, r3
 800b47c:	ee07 3a90 	vmov	s15, r3
 800b480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b484:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f000 8111 	beq.w	800b6b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	2b02      	cmp	r3, #2
 800b494:	f000 8083 	beq.w	800b59e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	f200 80a1 	bhi.w	800b5e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d003      	beq.n	800b4ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d056      	beq.n	800b55a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b4ac:	e099      	b.n	800b5e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4ae:	4b88      	ldr	r3, [pc, #544]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 0320 	and.w	r3, r3, #32
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d02d      	beq.n	800b516 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4ba:	4b85      	ldr	r3, [pc, #532]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	08db      	lsrs	r3, r3, #3
 800b4c0:	f003 0303 	and.w	r3, r3, #3
 800b4c4:	4a83      	ldr	r2, [pc, #524]	; (800b6d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	ee07 3a90 	vmov	s15, r3
 800b4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	ee07 3a90 	vmov	s15, r3
 800b4dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4e4:	4b7a      	ldr	r3, [pc, #488]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ec:	ee07 3a90 	vmov	s15, r3
 800b4f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b50c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b510:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b514:	e087      	b.n	800b626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	ee07 3a90 	vmov	s15, r3
 800b51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b520:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b6dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b528:	4b69      	ldr	r3, [pc, #420]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b530:	ee07 3a90 	vmov	s15, r3
 800b534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b538:	ed97 6a03 	vldr	s12, [r7, #12]
 800b53c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b54c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b550:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b554:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b558:	e065      	b.n	800b626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	ee07 3a90 	vmov	s15, r3
 800b560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b564:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b56c:	4b58      	ldr	r3, [pc, #352]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b574:	ee07 3a90 	vmov	s15, r3
 800b578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b57c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b580:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b58c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b594:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b598:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b59c:	e043      	b.n	800b626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	ee07 3a90 	vmov	s15, r3
 800b5a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b5ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5b0:	4b47      	ldr	r3, [pc, #284]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b8:	ee07 3a90 	vmov	s15, r3
 800b5bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5e0:	e021      	b.n	800b626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	ee07 3a90 	vmov	s15, r3
 800b5e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b6dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5f4:	4b36      	ldr	r3, [pc, #216]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5fc:	ee07 3a90 	vmov	s15, r3
 800b600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b604:	ed97 6a03 	vldr	s12, [r7, #12]
 800b608:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b60c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b61c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b620:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b624:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b626:	4b2a      	ldr	r3, [pc, #168]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62a:	0a5b      	lsrs	r3, r3, #9
 800b62c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b630:	ee07 3a90 	vmov	s15, r3
 800b634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b63c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b640:	edd7 6a07 	vldr	s13, [r7, #28]
 800b644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b64c:	ee17 2a90 	vmov	r2, s15
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b654:	4b1e      	ldr	r3, [pc, #120]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b658:	0c1b      	lsrs	r3, r3, #16
 800b65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b65e:	ee07 3a90 	vmov	s15, r3
 800b662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b66a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b66e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b67a:	ee17 2a90 	vmov	r2, s15
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b682:	4b13      	ldr	r3, [pc, #76]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b686:	0e1b      	lsrs	r3, r3, #24
 800b688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b68c:	ee07 3a90 	vmov	s15, r3
 800b690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b698:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b69c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a8:	ee17 2a90 	vmov	r2, s15
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b6b0:	e008      	b.n	800b6c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	609a      	str	r2, [r3, #8]
}
 800b6c4:	bf00      	nop
 800b6c6:	3724      	adds	r7, #36	; 0x24
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	58024400 	.word	0x58024400
 800b6d4:	03d09000 	.word	0x03d09000
 800b6d8:	46000000 	.word	0x46000000
 800b6dc:	4c742400 	.word	0x4c742400
 800b6e0:	4a742400 	.word	0x4a742400
 800b6e4:	4bbebc20 	.word	0x4bbebc20

0800b6e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6f6:	4b53      	ldr	r3, [pc, #332]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fa:	f003 0303 	and.w	r3, r3, #3
 800b6fe:	2b03      	cmp	r3, #3
 800b700:	d101      	bne.n	800b706 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e099      	b.n	800b83a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b706:	4b4f      	ldr	r3, [pc, #316]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a4e      	ldr	r2, [pc, #312]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b70c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b712:	f7f7 faad 	bl	8002c70 <HAL_GetTick>
 800b716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b718:	e008      	b.n	800b72c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b71a:	f7f7 faa9 	bl	8002c70 <HAL_GetTick>
 800b71e:	4602      	mov	r2, r0
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	2b02      	cmp	r3, #2
 800b726:	d901      	bls.n	800b72c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b728:	2303      	movs	r3, #3
 800b72a:	e086      	b.n	800b83a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b72c:	4b45      	ldr	r3, [pc, #276]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1f0      	bne.n	800b71a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b738:	4b42      	ldr	r3, [pc, #264]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	031b      	lsls	r3, r3, #12
 800b746:	493f      	ldr	r1, [pc, #252]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b748:	4313      	orrs	r3, r2
 800b74a:	628b      	str	r3, [r1, #40]	; 0x28
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	3b01      	subs	r3, #1
 800b752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	3b01      	subs	r3, #1
 800b75c:	025b      	lsls	r3, r3, #9
 800b75e:	b29b      	uxth	r3, r3
 800b760:	431a      	orrs	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	3b01      	subs	r3, #1
 800b768:	041b      	lsls	r3, r3, #16
 800b76a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b76e:	431a      	orrs	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	3b01      	subs	r3, #1
 800b776:	061b      	lsls	r3, r3, #24
 800b778:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b77c:	4931      	ldr	r1, [pc, #196]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b77e:	4313      	orrs	r3, r2
 800b780:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b782:	4b30      	ldr	r3, [pc, #192]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b786:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	492d      	ldr	r1, [pc, #180]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b790:	4313      	orrs	r3, r2
 800b792:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b794:	4b2b      	ldr	r3, [pc, #172]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b798:	f023 0220 	bic.w	r2, r3, #32
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	4928      	ldr	r1, [pc, #160]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b7a6:	4b27      	ldr	r3, [pc, #156]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7aa:	4a26      	ldr	r2, [pc, #152]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7ac:	f023 0310 	bic.w	r3, r3, #16
 800b7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b7b2:	4b24      	ldr	r3, [pc, #144]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7b6:	4b24      	ldr	r3, [pc, #144]	; (800b848 <RCCEx_PLL2_Config+0x160>)
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	69d2      	ldr	r2, [r2, #28]
 800b7be:	00d2      	lsls	r2, r2, #3
 800b7c0:	4920      	ldr	r1, [pc, #128]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b7c6:	4b1f      	ldr	r3, [pc, #124]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ca:	4a1e      	ldr	r2, [pc, #120]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7cc:	f043 0310 	orr.w	r3, r3, #16
 800b7d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d106      	bne.n	800b7e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b7d8:	4b1a      	ldr	r3, [pc, #104]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	4a19      	ldr	r2, [pc, #100]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7e4:	e00f      	b.n	800b806 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d106      	bne.n	800b7fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b7ec:	4b15      	ldr	r3, [pc, #84]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	4a14      	ldr	r2, [pc, #80]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7f8:	e005      	b.n	800b806 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b7fa:	4b12      	ldr	r3, [pc, #72]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fe:	4a11      	ldr	r2, [pc, #68]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b804:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b806:	4b0f      	ldr	r3, [pc, #60]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a0e      	ldr	r2, [pc, #56]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b80c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b812:	f7f7 fa2d 	bl	8002c70 <HAL_GetTick>
 800b816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b818:	e008      	b.n	800b82c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b81a:	f7f7 fa29 	bl	8002c70 <HAL_GetTick>
 800b81e:	4602      	mov	r2, r0
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	2b02      	cmp	r3, #2
 800b826:	d901      	bls.n	800b82c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b828:	2303      	movs	r3, #3
 800b82a:	e006      	b.n	800b83a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b82c:	4b05      	ldr	r3, [pc, #20]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b834:	2b00      	cmp	r3, #0
 800b836:	d0f0      	beq.n	800b81a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b838:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	58024400 	.word	0x58024400
 800b848:	ffff0007 	.word	0xffff0007

0800b84c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b85a:	4b53      	ldr	r3, [pc, #332]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85e:	f003 0303 	and.w	r3, r3, #3
 800b862:	2b03      	cmp	r3, #3
 800b864:	d101      	bne.n	800b86a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e099      	b.n	800b99e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b86a:	4b4f      	ldr	r3, [pc, #316]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a4e      	ldr	r2, [pc, #312]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b876:	f7f7 f9fb 	bl	8002c70 <HAL_GetTick>
 800b87a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b87c:	e008      	b.n	800b890 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b87e:	f7f7 f9f7 	bl	8002c70 <HAL_GetTick>
 800b882:	4602      	mov	r2, r0
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d901      	bls.n	800b890 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	e086      	b.n	800b99e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b890:	4b45      	ldr	r3, [pc, #276]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1f0      	bne.n	800b87e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b89c:	4b42      	ldr	r3, [pc, #264]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	051b      	lsls	r3, r3, #20
 800b8aa:	493f      	ldr	r1, [pc, #252]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	628b      	str	r3, [r1, #40]	; 0x28
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	025b      	lsls	r3, r3, #9
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	041b      	lsls	r3, r3, #16
 800b8ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b8d2:	431a      	orrs	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	061b      	lsls	r3, r3, #24
 800b8dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b8e0:	4931      	ldr	r1, [pc, #196]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b8e6:	4b30      	ldr	r3, [pc, #192]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	492d      	ldr	r1, [pc, #180]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b8f8:	4b2b      	ldr	r3, [pc, #172]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	4928      	ldr	r1, [pc, #160]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b906:	4313      	orrs	r3, r2
 800b908:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b90a:	4b27      	ldr	r3, [pc, #156]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90e:	4a26      	ldr	r2, [pc, #152]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b914:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b916:	4b24      	ldr	r3, [pc, #144]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b91a:	4b24      	ldr	r3, [pc, #144]	; (800b9ac <RCCEx_PLL3_Config+0x160>)
 800b91c:	4013      	ands	r3, r2
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	69d2      	ldr	r2, [r2, #28]
 800b922:	00d2      	lsls	r2, r2, #3
 800b924:	4920      	ldr	r1, [pc, #128]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b926:	4313      	orrs	r3, r2
 800b928:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b92a:	4b1f      	ldr	r3, [pc, #124]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92e:	4a1e      	ldr	r2, [pc, #120]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b934:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d106      	bne.n	800b94a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b93c:	4b1a      	ldr	r3, [pc, #104]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b940:	4a19      	ldr	r2, [pc, #100]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b942:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b946:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b948:	e00f      	b.n	800b96a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d106      	bne.n	800b95e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b950:	4b15      	ldr	r3, [pc, #84]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b954:	4a14      	ldr	r2, [pc, #80]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b956:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b95a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b95c:	e005      	b.n	800b96a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b95e:	4b12      	ldr	r3, [pc, #72]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b962:	4a11      	ldr	r2, [pc, #68]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b964:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b968:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b96a:	4b0f      	ldr	r3, [pc, #60]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a0e      	ldr	r2, [pc, #56]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b976:	f7f7 f97b 	bl	8002c70 <HAL_GetTick>
 800b97a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b97c:	e008      	b.n	800b990 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b97e:	f7f7 f977 	bl	8002c70 <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d901      	bls.n	800b990 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e006      	b.n	800b99e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b990:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d0f0      	beq.n	800b97e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	58024400 	.word	0x58024400
 800b9ac:	ffff0007 	.word	0xffff0007

0800b9b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e049      	b.n	800ba56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d106      	bne.n	800b9dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7f6 fd8a 	bl	80024f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2202      	movs	r2, #2
 800b9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4610      	mov	r0, r2
 800b9f0:	f001 fa9e 	bl	800cf30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
	...

0800ba60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d001      	beq.n	800ba78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba74:	2301      	movs	r3, #1
 800ba76:	e054      	b.n	800bb22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68da      	ldr	r2, [r3, #12]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f042 0201 	orr.w	r2, r2, #1
 800ba8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a26      	ldr	r2, [pc, #152]	; (800bb30 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d022      	beq.n	800bae0 <HAL_TIM_Base_Start_IT+0x80>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baa2:	d01d      	beq.n	800bae0 <HAL_TIM_Base_Start_IT+0x80>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a22      	ldr	r2, [pc, #136]	; (800bb34 <HAL_TIM_Base_Start_IT+0xd4>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d018      	beq.n	800bae0 <HAL_TIM_Base_Start_IT+0x80>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a21      	ldr	r2, [pc, #132]	; (800bb38 <HAL_TIM_Base_Start_IT+0xd8>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d013      	beq.n	800bae0 <HAL_TIM_Base_Start_IT+0x80>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a1f      	ldr	r2, [pc, #124]	; (800bb3c <HAL_TIM_Base_Start_IT+0xdc>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d00e      	beq.n	800bae0 <HAL_TIM_Base_Start_IT+0x80>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a1e      	ldr	r2, [pc, #120]	; (800bb40 <HAL_TIM_Base_Start_IT+0xe0>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d009      	beq.n	800bae0 <HAL_TIM_Base_Start_IT+0x80>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a1c      	ldr	r2, [pc, #112]	; (800bb44 <HAL_TIM_Base_Start_IT+0xe4>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d004      	beq.n	800bae0 <HAL_TIM_Base_Start_IT+0x80>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a1b      	ldr	r2, [pc, #108]	; (800bb48 <HAL_TIM_Base_Start_IT+0xe8>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d115      	bne.n	800bb0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689a      	ldr	r2, [r3, #8]
 800bae6:	4b19      	ldr	r3, [pc, #100]	; (800bb4c <HAL_TIM_Base_Start_IT+0xec>)
 800bae8:	4013      	ands	r3, r2
 800baea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2b06      	cmp	r3, #6
 800baf0:	d015      	beq.n	800bb1e <HAL_TIM_Base_Start_IT+0xbe>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baf8:	d011      	beq.n	800bb1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f042 0201 	orr.w	r2, r2, #1
 800bb08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb0a:	e008      	b.n	800bb1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f042 0201 	orr.w	r2, r2, #1
 800bb1a:	601a      	str	r2, [r3, #0]
 800bb1c:	e000      	b.n	800bb20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	40010000 	.word	0x40010000
 800bb34:	40000400 	.word	0x40000400
 800bb38:	40000800 	.word	0x40000800
 800bb3c:	40000c00 	.word	0x40000c00
 800bb40:	40010400 	.word	0x40010400
 800bb44:	40001800 	.word	0x40001800
 800bb48:	40014000 	.word	0x40014000
 800bb4c:	00010007 	.word	0x00010007

0800bb50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68da      	ldr	r2, [r3, #12]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f022 0201 	bic.w	r2, r2, #1
 800bb66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6a1a      	ldr	r2, [r3, #32]
 800bb6e:	f241 1311 	movw	r3, #4369	; 0x1111
 800bb72:	4013      	ands	r3, r2
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10f      	bne.n	800bb98 <HAL_TIM_Base_Stop_IT+0x48>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	6a1a      	ldr	r2, [r3, #32]
 800bb7e:	f240 4344 	movw	r3, #1092	; 0x444
 800bb82:	4013      	ands	r3, r2
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d107      	bne.n	800bb98 <HAL_TIM_Base_Stop_IT+0x48>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f022 0201 	bic.w	r2, r2, #1
 800bb96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b082      	sub	sp, #8
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d101      	bne.n	800bbc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e049      	b.n	800bc54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d106      	bne.n	800bbda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f841 	bl	800bc5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2202      	movs	r2, #2
 800bbde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4619      	mov	r1, r3
 800bbec:	4610      	mov	r0, r2
 800bbee:	f001 f99f 	bl	800cf30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2201      	movs	r2, #1
 800bc06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d109      	bne.n	800bc94 <HAL_TIM_PWM_Start+0x24>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	bf14      	ite	ne
 800bc8c:	2301      	movne	r3, #1
 800bc8e:	2300      	moveq	r3, #0
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	e03c      	b.n	800bd0e <HAL_TIM_PWM_Start+0x9e>
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	2b04      	cmp	r3, #4
 800bc98:	d109      	bne.n	800bcae <HAL_TIM_PWM_Start+0x3e>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	bf14      	ite	ne
 800bca6:	2301      	movne	r3, #1
 800bca8:	2300      	moveq	r3, #0
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	e02f      	b.n	800bd0e <HAL_TIM_PWM_Start+0x9e>
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	2b08      	cmp	r3, #8
 800bcb2:	d109      	bne.n	800bcc8 <HAL_TIM_PWM_Start+0x58>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	bf14      	ite	ne
 800bcc0:	2301      	movne	r3, #1
 800bcc2:	2300      	moveq	r3, #0
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	e022      	b.n	800bd0e <HAL_TIM_PWM_Start+0x9e>
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	2b0c      	cmp	r3, #12
 800bccc:	d109      	bne.n	800bce2 <HAL_TIM_PWM_Start+0x72>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	bf14      	ite	ne
 800bcda:	2301      	movne	r3, #1
 800bcdc:	2300      	moveq	r3, #0
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	e015      	b.n	800bd0e <HAL_TIM_PWM_Start+0x9e>
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b10      	cmp	r3, #16
 800bce6:	d109      	bne.n	800bcfc <HAL_TIM_PWM_Start+0x8c>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	bf14      	ite	ne
 800bcf4:	2301      	movne	r3, #1
 800bcf6:	2300      	moveq	r3, #0
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	e008      	b.n	800bd0e <HAL_TIM_PWM_Start+0x9e>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	bf14      	ite	ne
 800bd08:	2301      	movne	r3, #1
 800bd0a:	2300      	moveq	r3, #0
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d001      	beq.n	800bd16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e0a1      	b.n	800be5a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d104      	bne.n	800bd26 <HAL_TIM_PWM_Start+0xb6>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd24:	e023      	b.n	800bd6e <HAL_TIM_PWM_Start+0xfe>
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	2b04      	cmp	r3, #4
 800bd2a:	d104      	bne.n	800bd36 <HAL_TIM_PWM_Start+0xc6>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd34:	e01b      	b.n	800bd6e <HAL_TIM_PWM_Start+0xfe>
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	2b08      	cmp	r3, #8
 800bd3a:	d104      	bne.n	800bd46 <HAL_TIM_PWM_Start+0xd6>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd44:	e013      	b.n	800bd6e <HAL_TIM_PWM_Start+0xfe>
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	2b0c      	cmp	r3, #12
 800bd4a:	d104      	bne.n	800bd56 <HAL_TIM_PWM_Start+0xe6>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd54:	e00b      	b.n	800bd6e <HAL_TIM_PWM_Start+0xfe>
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	2b10      	cmp	r3, #16
 800bd5a:	d104      	bne.n	800bd66 <HAL_TIM_PWM_Start+0xf6>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2202      	movs	r2, #2
 800bd60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd64:	e003      	b.n	800bd6e <HAL_TIM_PWM_Start+0xfe>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2202      	movs	r2, #2
 800bd6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2201      	movs	r2, #1
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f001 fefc 	bl	800db74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a38      	ldr	r2, [pc, #224]	; (800be64 <HAL_TIM_PWM_Start+0x1f4>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d013      	beq.n	800bdae <HAL_TIM_PWM_Start+0x13e>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a37      	ldr	r2, [pc, #220]	; (800be68 <HAL_TIM_PWM_Start+0x1f8>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d00e      	beq.n	800bdae <HAL_TIM_PWM_Start+0x13e>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a35      	ldr	r2, [pc, #212]	; (800be6c <HAL_TIM_PWM_Start+0x1fc>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d009      	beq.n	800bdae <HAL_TIM_PWM_Start+0x13e>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a34      	ldr	r2, [pc, #208]	; (800be70 <HAL_TIM_PWM_Start+0x200>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d004      	beq.n	800bdae <HAL_TIM_PWM_Start+0x13e>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a32      	ldr	r2, [pc, #200]	; (800be74 <HAL_TIM_PWM_Start+0x204>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d101      	bne.n	800bdb2 <HAL_TIM_PWM_Start+0x142>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e000      	b.n	800bdb4 <HAL_TIM_PWM_Start+0x144>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d007      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bdc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a25      	ldr	r2, [pc, #148]	; (800be64 <HAL_TIM_PWM_Start+0x1f4>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d022      	beq.n	800be18 <HAL_TIM_PWM_Start+0x1a8>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdda:	d01d      	beq.n	800be18 <HAL_TIM_PWM_Start+0x1a8>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a25      	ldr	r2, [pc, #148]	; (800be78 <HAL_TIM_PWM_Start+0x208>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d018      	beq.n	800be18 <HAL_TIM_PWM_Start+0x1a8>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a24      	ldr	r2, [pc, #144]	; (800be7c <HAL_TIM_PWM_Start+0x20c>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d013      	beq.n	800be18 <HAL_TIM_PWM_Start+0x1a8>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a22      	ldr	r2, [pc, #136]	; (800be80 <HAL_TIM_PWM_Start+0x210>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d00e      	beq.n	800be18 <HAL_TIM_PWM_Start+0x1a8>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a1a      	ldr	r2, [pc, #104]	; (800be68 <HAL_TIM_PWM_Start+0x1f8>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d009      	beq.n	800be18 <HAL_TIM_PWM_Start+0x1a8>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a1e      	ldr	r2, [pc, #120]	; (800be84 <HAL_TIM_PWM_Start+0x214>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d004      	beq.n	800be18 <HAL_TIM_PWM_Start+0x1a8>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4a16      	ldr	r2, [pc, #88]	; (800be6c <HAL_TIM_PWM_Start+0x1fc>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d115      	bne.n	800be44 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	689a      	ldr	r2, [r3, #8]
 800be1e:	4b1a      	ldr	r3, [pc, #104]	; (800be88 <HAL_TIM_PWM_Start+0x218>)
 800be20:	4013      	ands	r3, r2
 800be22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2b06      	cmp	r3, #6
 800be28:	d015      	beq.n	800be56 <HAL_TIM_PWM_Start+0x1e6>
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be30:	d011      	beq.n	800be56 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f042 0201 	orr.w	r2, r2, #1
 800be40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be42:	e008      	b.n	800be56 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f042 0201 	orr.w	r2, r2, #1
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	e000      	b.n	800be58 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	40010000 	.word	0x40010000
 800be68:	40010400 	.word	0x40010400
 800be6c:	40014000 	.word	0x40014000
 800be70:	40014400 	.word	0x40014400
 800be74:	40014800 	.word	0x40014800
 800be78:	40000400 	.word	0x40000400
 800be7c:	40000800 	.word	0x40000800
 800be80:	40000c00 	.word	0x40000c00
 800be84:	40001800 	.word	0x40001800
 800be88:	00010007 	.word	0x00010007

0800be8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e049      	b.n	800bf32 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d106      	bne.n	800beb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f841 	bl	800bf3a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2202      	movs	r2, #2
 800bebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	3304      	adds	r3, #4
 800bec8:	4619      	mov	r1, r3
 800beca:	4610      	mov	r0, r2
 800becc:	f001 f830 	bl	800cf30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b083      	sub	sp, #12
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800bf42:	bf00      	nop
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
	...

0800bf50 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d104      	bne.n	800bf6a <HAL_TIM_IC_Start+0x1a>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	e023      	b.n	800bfb2 <HAL_TIM_IC_Start+0x62>
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	2b04      	cmp	r3, #4
 800bf6e:	d104      	bne.n	800bf7a <HAL_TIM_IC_Start+0x2a>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	e01b      	b.n	800bfb2 <HAL_TIM_IC_Start+0x62>
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2b08      	cmp	r3, #8
 800bf7e:	d104      	bne.n	800bf8a <HAL_TIM_IC_Start+0x3a>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	e013      	b.n	800bfb2 <HAL_TIM_IC_Start+0x62>
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	2b0c      	cmp	r3, #12
 800bf8e:	d104      	bne.n	800bf9a <HAL_TIM_IC_Start+0x4a>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	e00b      	b.n	800bfb2 <HAL_TIM_IC_Start+0x62>
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	2b10      	cmp	r3, #16
 800bf9e:	d104      	bne.n	800bfaa <HAL_TIM_IC_Start+0x5a>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	e003      	b.n	800bfb2 <HAL_TIM_IC_Start+0x62>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d104      	bne.n	800bfc4 <HAL_TIM_IC_Start+0x74>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	e013      	b.n	800bfec <HAL_TIM_IC_Start+0x9c>
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	2b04      	cmp	r3, #4
 800bfc8:	d104      	bne.n	800bfd4 <HAL_TIM_IC_Start+0x84>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	e00b      	b.n	800bfec <HAL_TIM_IC_Start+0x9c>
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	2b08      	cmp	r3, #8
 800bfd8:	d104      	bne.n	800bfe4 <HAL_TIM_IC_Start+0x94>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	e003      	b.n	800bfec <HAL_TIM_IC_Start+0x9c>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800bfee:	7bfb      	ldrb	r3, [r7, #15]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d102      	bne.n	800bffa <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800bff4:	7bbb      	ldrb	r3, [r7, #14]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d001      	beq.n	800bffe <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e097      	b.n	800c12e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d104      	bne.n	800c00e <HAL_TIM_IC_Start+0xbe>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2202      	movs	r2, #2
 800c008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c00c:	e023      	b.n	800c056 <HAL_TIM_IC_Start+0x106>
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	2b04      	cmp	r3, #4
 800c012:	d104      	bne.n	800c01e <HAL_TIM_IC_Start+0xce>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2202      	movs	r2, #2
 800c018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c01c:	e01b      	b.n	800c056 <HAL_TIM_IC_Start+0x106>
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2b08      	cmp	r3, #8
 800c022:	d104      	bne.n	800c02e <HAL_TIM_IC_Start+0xde>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2202      	movs	r2, #2
 800c028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c02c:	e013      	b.n	800c056 <HAL_TIM_IC_Start+0x106>
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b0c      	cmp	r3, #12
 800c032:	d104      	bne.n	800c03e <HAL_TIM_IC_Start+0xee>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2202      	movs	r2, #2
 800c038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c03c:	e00b      	b.n	800c056 <HAL_TIM_IC_Start+0x106>
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	2b10      	cmp	r3, #16
 800c042:	d104      	bne.n	800c04e <HAL_TIM_IC_Start+0xfe>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2202      	movs	r2, #2
 800c048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c04c:	e003      	b.n	800c056 <HAL_TIM_IC_Start+0x106>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2202      	movs	r2, #2
 800c052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d104      	bne.n	800c066 <HAL_TIM_IC_Start+0x116>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2202      	movs	r2, #2
 800c060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c064:	e013      	b.n	800c08e <HAL_TIM_IC_Start+0x13e>
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	2b04      	cmp	r3, #4
 800c06a:	d104      	bne.n	800c076 <HAL_TIM_IC_Start+0x126>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2202      	movs	r2, #2
 800c070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c074:	e00b      	b.n	800c08e <HAL_TIM_IC_Start+0x13e>
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b08      	cmp	r3, #8
 800c07a:	d104      	bne.n	800c086 <HAL_TIM_IC_Start+0x136>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2202      	movs	r2, #2
 800c080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c084:	e003      	b.n	800c08e <HAL_TIM_IC_Start+0x13e>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2202      	movs	r2, #2
 800c08a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2201      	movs	r2, #1
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	4618      	mov	r0, r3
 800c098:	f001 fd6c 	bl	800db74 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a25      	ldr	r2, [pc, #148]	; (800c138 <HAL_TIM_IC_Start+0x1e8>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d022      	beq.n	800c0ec <HAL_TIM_IC_Start+0x19c>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0ae:	d01d      	beq.n	800c0ec <HAL_TIM_IC_Start+0x19c>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a21      	ldr	r2, [pc, #132]	; (800c13c <HAL_TIM_IC_Start+0x1ec>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d018      	beq.n	800c0ec <HAL_TIM_IC_Start+0x19c>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a20      	ldr	r2, [pc, #128]	; (800c140 <HAL_TIM_IC_Start+0x1f0>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d013      	beq.n	800c0ec <HAL_TIM_IC_Start+0x19c>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a1e      	ldr	r2, [pc, #120]	; (800c144 <HAL_TIM_IC_Start+0x1f4>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d00e      	beq.n	800c0ec <HAL_TIM_IC_Start+0x19c>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a1d      	ldr	r2, [pc, #116]	; (800c148 <HAL_TIM_IC_Start+0x1f8>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d009      	beq.n	800c0ec <HAL_TIM_IC_Start+0x19c>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a1b      	ldr	r2, [pc, #108]	; (800c14c <HAL_TIM_IC_Start+0x1fc>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d004      	beq.n	800c0ec <HAL_TIM_IC_Start+0x19c>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a1a      	ldr	r2, [pc, #104]	; (800c150 <HAL_TIM_IC_Start+0x200>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d115      	bne.n	800c118 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	689a      	ldr	r2, [r3, #8]
 800c0f2:	4b18      	ldr	r3, [pc, #96]	; (800c154 <HAL_TIM_IC_Start+0x204>)
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	2b06      	cmp	r3, #6
 800c0fc:	d015      	beq.n	800c12a <HAL_TIM_IC_Start+0x1da>
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c104:	d011      	beq.n	800c12a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f042 0201 	orr.w	r2, r2, #1
 800c114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c116:	e008      	b.n	800c12a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f042 0201 	orr.w	r2, r2, #1
 800c126:	601a      	str	r2, [r3, #0]
 800c128:	e000      	b.n	800c12c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c12a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	40010000 	.word	0x40010000
 800c13c:	40000400 	.word	0x40000400
 800c140:	40000800 	.word	0x40000800
 800c144:	40000c00 	.word	0x40000c00
 800c148:	40010400 	.word	0x40010400
 800c14c:	40001800 	.word	0x40001800
 800c150:	40014000 	.word	0x40014000
 800c154:	00010007 	.word	0x00010007

0800c158 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2200      	movs	r2, #0
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f001 fd02 	bl	800db74 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	6a1a      	ldr	r2, [r3, #32]
 800c176:	f241 1311 	movw	r3, #4369	; 0x1111
 800c17a:	4013      	ands	r3, r2
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10f      	bne.n	800c1a0 <HAL_TIM_IC_Stop+0x48>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6a1a      	ldr	r2, [r3, #32]
 800c186:	f240 4344 	movw	r3, #1092	; 0x444
 800c18a:	4013      	ands	r3, r2
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d107      	bne.n	800c1a0 <HAL_TIM_IC_Stop+0x48>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f022 0201 	bic.w	r2, r2, #1
 800c19e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d104      	bne.n	800c1b0 <HAL_TIM_IC_Stop+0x58>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1ae:	e023      	b.n	800c1f8 <HAL_TIM_IC_Stop+0xa0>
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	2b04      	cmp	r3, #4
 800c1b4:	d104      	bne.n	800c1c0 <HAL_TIM_IC_Stop+0x68>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1be:	e01b      	b.n	800c1f8 <HAL_TIM_IC_Stop+0xa0>
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	2b08      	cmp	r3, #8
 800c1c4:	d104      	bne.n	800c1d0 <HAL_TIM_IC_Stop+0x78>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1ce:	e013      	b.n	800c1f8 <HAL_TIM_IC_Stop+0xa0>
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	2b0c      	cmp	r3, #12
 800c1d4:	d104      	bne.n	800c1e0 <HAL_TIM_IC_Stop+0x88>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1de:	e00b      	b.n	800c1f8 <HAL_TIM_IC_Stop+0xa0>
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2b10      	cmp	r3, #16
 800c1e4:	d104      	bne.n	800c1f0 <HAL_TIM_IC_Stop+0x98>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1ee:	e003      	b.n	800c1f8 <HAL_TIM_IC_Stop+0xa0>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d104      	bne.n	800c208 <HAL_TIM_IC_Stop+0xb0>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c206:	e013      	b.n	800c230 <HAL_TIM_IC_Stop+0xd8>
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b04      	cmp	r3, #4
 800c20c:	d104      	bne.n	800c218 <HAL_TIM_IC_Stop+0xc0>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c216:	e00b      	b.n	800c230 <HAL_TIM_IC_Stop+0xd8>
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	2b08      	cmp	r3, #8
 800c21c:	d104      	bne.n	800c228 <HAL_TIM_IC_Stop+0xd0>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2201      	movs	r2, #1
 800c222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c226:	e003      	b.n	800c230 <HAL_TIM_IC_Stop+0xd8>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
	...

0800c23c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c246:	2300      	movs	r3, #0
 800c248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d104      	bne.n	800c25a <HAL_TIM_IC_Start_IT+0x1e>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c256:	b2db      	uxtb	r3, r3
 800c258:	e023      	b.n	800c2a2 <HAL_TIM_IC_Start_IT+0x66>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	d104      	bne.n	800c26a <HAL_TIM_IC_Start_IT+0x2e>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c266:	b2db      	uxtb	r3, r3
 800c268:	e01b      	b.n	800c2a2 <HAL_TIM_IC_Start_IT+0x66>
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2b08      	cmp	r3, #8
 800c26e:	d104      	bne.n	800c27a <HAL_TIM_IC_Start_IT+0x3e>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c276:	b2db      	uxtb	r3, r3
 800c278:	e013      	b.n	800c2a2 <HAL_TIM_IC_Start_IT+0x66>
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	2b0c      	cmp	r3, #12
 800c27e:	d104      	bne.n	800c28a <HAL_TIM_IC_Start_IT+0x4e>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c286:	b2db      	uxtb	r3, r3
 800c288:	e00b      	b.n	800c2a2 <HAL_TIM_IC_Start_IT+0x66>
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2b10      	cmp	r3, #16
 800c28e:	d104      	bne.n	800c29a <HAL_TIM_IC_Start_IT+0x5e>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c296:	b2db      	uxtb	r3, r3
 800c298:	e003      	b.n	800c2a2 <HAL_TIM_IC_Start_IT+0x66>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d104      	bne.n	800c2b4 <HAL_TIM_IC_Start_IT+0x78>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	e013      	b.n	800c2dc <HAL_TIM_IC_Start_IT+0xa0>
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	d104      	bne.n	800c2c4 <HAL_TIM_IC_Start_IT+0x88>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	e00b      	b.n	800c2dc <HAL_TIM_IC_Start_IT+0xa0>
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	2b08      	cmp	r3, #8
 800c2c8:	d104      	bne.n	800c2d4 <HAL_TIM_IC_Start_IT+0x98>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	e003      	b.n	800c2dc <HAL_TIM_IC_Start_IT+0xa0>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c2de:	7bbb      	ldrb	r3, [r7, #14]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d102      	bne.n	800c2ea <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c2e4:	7b7b      	ldrb	r3, [r7, #13]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d001      	beq.n	800c2ee <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e0e2      	b.n	800c4b4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d104      	bne.n	800c2fe <HAL_TIM_IC_Start_IT+0xc2>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2202      	movs	r2, #2
 800c2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c2fc:	e023      	b.n	800c346 <HAL_TIM_IC_Start_IT+0x10a>
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	2b04      	cmp	r3, #4
 800c302:	d104      	bne.n	800c30e <HAL_TIM_IC_Start_IT+0xd2>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2202      	movs	r2, #2
 800c308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c30c:	e01b      	b.n	800c346 <HAL_TIM_IC_Start_IT+0x10a>
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	2b08      	cmp	r3, #8
 800c312:	d104      	bne.n	800c31e <HAL_TIM_IC_Start_IT+0xe2>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2202      	movs	r2, #2
 800c318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c31c:	e013      	b.n	800c346 <HAL_TIM_IC_Start_IT+0x10a>
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b0c      	cmp	r3, #12
 800c322:	d104      	bne.n	800c32e <HAL_TIM_IC_Start_IT+0xf2>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2202      	movs	r2, #2
 800c328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c32c:	e00b      	b.n	800c346 <HAL_TIM_IC_Start_IT+0x10a>
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	2b10      	cmp	r3, #16
 800c332:	d104      	bne.n	800c33e <HAL_TIM_IC_Start_IT+0x102>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2202      	movs	r2, #2
 800c338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c33c:	e003      	b.n	800c346 <HAL_TIM_IC_Start_IT+0x10a>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2202      	movs	r2, #2
 800c342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d104      	bne.n	800c356 <HAL_TIM_IC_Start_IT+0x11a>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2202      	movs	r2, #2
 800c350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c354:	e013      	b.n	800c37e <HAL_TIM_IC_Start_IT+0x142>
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b04      	cmp	r3, #4
 800c35a:	d104      	bne.n	800c366 <HAL_TIM_IC_Start_IT+0x12a>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2202      	movs	r2, #2
 800c360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c364:	e00b      	b.n	800c37e <HAL_TIM_IC_Start_IT+0x142>
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b08      	cmp	r3, #8
 800c36a:	d104      	bne.n	800c376 <HAL_TIM_IC_Start_IT+0x13a>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c374:	e003      	b.n	800c37e <HAL_TIM_IC_Start_IT+0x142>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2202      	movs	r2, #2
 800c37a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b0c      	cmp	r3, #12
 800c382:	d841      	bhi.n	800c408 <HAL_TIM_IC_Start_IT+0x1cc>
 800c384:	a201      	add	r2, pc, #4	; (adr r2, 800c38c <HAL_TIM_IC_Start_IT+0x150>)
 800c386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38a:	bf00      	nop
 800c38c:	0800c3c1 	.word	0x0800c3c1
 800c390:	0800c409 	.word	0x0800c409
 800c394:	0800c409 	.word	0x0800c409
 800c398:	0800c409 	.word	0x0800c409
 800c39c:	0800c3d3 	.word	0x0800c3d3
 800c3a0:	0800c409 	.word	0x0800c409
 800c3a4:	0800c409 	.word	0x0800c409
 800c3a8:	0800c409 	.word	0x0800c409
 800c3ac:	0800c3e5 	.word	0x0800c3e5
 800c3b0:	0800c409 	.word	0x0800c409
 800c3b4:	0800c409 	.word	0x0800c409
 800c3b8:	0800c409 	.word	0x0800c409
 800c3bc:	0800c3f7 	.word	0x0800c3f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	68da      	ldr	r2, [r3, #12]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f042 0202 	orr.w	r2, r2, #2
 800c3ce:	60da      	str	r2, [r3, #12]
      break;
 800c3d0:	e01d      	b.n	800c40e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68da      	ldr	r2, [r3, #12]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f042 0204 	orr.w	r2, r2, #4
 800c3e0:	60da      	str	r2, [r3, #12]
      break;
 800c3e2:	e014      	b.n	800c40e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68da      	ldr	r2, [r3, #12]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0208 	orr.w	r2, r2, #8
 800c3f2:	60da      	str	r2, [r3, #12]
      break;
 800c3f4:	e00b      	b.n	800c40e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68da      	ldr	r2, [r3, #12]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f042 0210 	orr.w	r2, r2, #16
 800c404:	60da      	str	r2, [r3, #12]
      break;
 800c406:	e002      	b.n	800c40e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800c408:	2301      	movs	r3, #1
 800c40a:	73fb      	strb	r3, [r7, #15]
      break;
 800c40c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d14e      	bne.n	800c4b2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2201      	movs	r2, #1
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f001 fba9 	bl	800db74 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a25      	ldr	r2, [pc, #148]	; (800c4bc <HAL_TIM_IC_Start_IT+0x280>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d022      	beq.n	800c472 <HAL_TIM_IC_Start_IT+0x236>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c434:	d01d      	beq.n	800c472 <HAL_TIM_IC_Start_IT+0x236>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a21      	ldr	r2, [pc, #132]	; (800c4c0 <HAL_TIM_IC_Start_IT+0x284>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d018      	beq.n	800c472 <HAL_TIM_IC_Start_IT+0x236>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a1f      	ldr	r2, [pc, #124]	; (800c4c4 <HAL_TIM_IC_Start_IT+0x288>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d013      	beq.n	800c472 <HAL_TIM_IC_Start_IT+0x236>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a1e      	ldr	r2, [pc, #120]	; (800c4c8 <HAL_TIM_IC_Start_IT+0x28c>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d00e      	beq.n	800c472 <HAL_TIM_IC_Start_IT+0x236>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a1c      	ldr	r2, [pc, #112]	; (800c4cc <HAL_TIM_IC_Start_IT+0x290>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d009      	beq.n	800c472 <HAL_TIM_IC_Start_IT+0x236>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a1b      	ldr	r2, [pc, #108]	; (800c4d0 <HAL_TIM_IC_Start_IT+0x294>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d004      	beq.n	800c472 <HAL_TIM_IC_Start_IT+0x236>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a19      	ldr	r2, [pc, #100]	; (800c4d4 <HAL_TIM_IC_Start_IT+0x298>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d115      	bne.n	800c49e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	689a      	ldr	r2, [r3, #8]
 800c478:	4b17      	ldr	r3, [pc, #92]	; (800c4d8 <HAL_TIM_IC_Start_IT+0x29c>)
 800c47a:	4013      	ands	r3, r2
 800c47c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	2b06      	cmp	r3, #6
 800c482:	d015      	beq.n	800c4b0 <HAL_TIM_IC_Start_IT+0x274>
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c48a:	d011      	beq.n	800c4b0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f042 0201 	orr.w	r2, r2, #1
 800c49a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c49c:	e008      	b.n	800c4b0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f042 0201 	orr.w	r2, r2, #1
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	e000      	b.n	800c4b2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4b0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	40010000 	.word	0x40010000
 800c4c0:	40000400 	.word	0x40000400
 800c4c4:	40000800 	.word	0x40000800
 800c4c8:	40000c00 	.word	0x40000c00
 800c4cc:	40010400 	.word	0x40010400
 800c4d0:	40001800 	.word	0x40001800
 800c4d4:	40014000 	.word	0x40014000
 800c4d8:	00010007 	.word	0x00010007

0800c4dc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	2b0c      	cmp	r3, #12
 800c4ee:	d841      	bhi.n	800c574 <HAL_TIM_IC_Stop_IT+0x98>
 800c4f0:	a201      	add	r2, pc, #4	; (adr r2, 800c4f8 <HAL_TIM_IC_Stop_IT+0x1c>)
 800c4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f6:	bf00      	nop
 800c4f8:	0800c52d 	.word	0x0800c52d
 800c4fc:	0800c575 	.word	0x0800c575
 800c500:	0800c575 	.word	0x0800c575
 800c504:	0800c575 	.word	0x0800c575
 800c508:	0800c53f 	.word	0x0800c53f
 800c50c:	0800c575 	.word	0x0800c575
 800c510:	0800c575 	.word	0x0800c575
 800c514:	0800c575 	.word	0x0800c575
 800c518:	0800c551 	.word	0x0800c551
 800c51c:	0800c575 	.word	0x0800c575
 800c520:	0800c575 	.word	0x0800c575
 800c524:	0800c575 	.word	0x0800c575
 800c528:	0800c563 	.word	0x0800c563
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68da      	ldr	r2, [r3, #12]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f022 0202 	bic.w	r2, r2, #2
 800c53a:	60da      	str	r2, [r3, #12]
      break;
 800c53c:	e01d      	b.n	800c57a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68da      	ldr	r2, [r3, #12]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f022 0204 	bic.w	r2, r2, #4
 800c54c:	60da      	str	r2, [r3, #12]
      break;
 800c54e:	e014      	b.n	800c57a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68da      	ldr	r2, [r3, #12]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f022 0208 	bic.w	r2, r2, #8
 800c55e:	60da      	str	r2, [r3, #12]
      break;
 800c560:	e00b      	b.n	800c57a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	68da      	ldr	r2, [r3, #12]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f022 0210 	bic.w	r2, r2, #16
 800c570:	60da      	str	r2, [r3, #12]
      break;
 800c572:	e002      	b.n	800c57a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	73fb      	strb	r3, [r7, #15]
      break;
 800c578:	bf00      	nop
  }

  if (status == HAL_OK)
 800c57a:	7bfb      	ldrb	r3, [r7, #15]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d166      	bne.n	800c64e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2200      	movs	r2, #0
 800c586:	6839      	ldr	r1, [r7, #0]
 800c588:	4618      	mov	r0, r3
 800c58a:	f001 faf3 	bl	800db74 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	6a1a      	ldr	r2, [r3, #32]
 800c594:	f241 1311 	movw	r3, #4369	; 0x1111
 800c598:	4013      	ands	r3, r2
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10f      	bne.n	800c5be <HAL_TIM_IC_Stop_IT+0xe2>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6a1a      	ldr	r2, [r3, #32]
 800c5a4:	f240 4344 	movw	r3, #1092	; 0x444
 800c5a8:	4013      	ands	r3, r2
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d107      	bne.n	800c5be <HAL_TIM_IC_Stop_IT+0xe2>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f022 0201 	bic.w	r2, r2, #1
 800c5bc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d104      	bne.n	800c5ce <HAL_TIM_IC_Stop_IT+0xf2>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5cc:	e023      	b.n	800c616 <HAL_TIM_IC_Stop_IT+0x13a>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b04      	cmp	r3, #4
 800c5d2:	d104      	bne.n	800c5de <HAL_TIM_IC_Stop_IT+0x102>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5dc:	e01b      	b.n	800c616 <HAL_TIM_IC_Stop_IT+0x13a>
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	2b08      	cmp	r3, #8
 800c5e2:	d104      	bne.n	800c5ee <HAL_TIM_IC_Stop_IT+0x112>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5ec:	e013      	b.n	800c616 <HAL_TIM_IC_Stop_IT+0x13a>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b0c      	cmp	r3, #12
 800c5f2:	d104      	bne.n	800c5fe <HAL_TIM_IC_Stop_IT+0x122>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c5fc:	e00b      	b.n	800c616 <HAL_TIM_IC_Stop_IT+0x13a>
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	2b10      	cmp	r3, #16
 800c602:	d104      	bne.n	800c60e <HAL_TIM_IC_Stop_IT+0x132>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c60c:	e003      	b.n	800c616 <HAL_TIM_IC_Stop_IT+0x13a>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d104      	bne.n	800c626 <HAL_TIM_IC_Stop_IT+0x14a>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c624:	e013      	b.n	800c64e <HAL_TIM_IC_Stop_IT+0x172>
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	2b04      	cmp	r3, #4
 800c62a:	d104      	bne.n	800c636 <HAL_TIM_IC_Stop_IT+0x15a>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c634:	e00b      	b.n	800c64e <HAL_TIM_IC_Stop_IT+0x172>
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2b08      	cmp	r3, #8
 800c63a:	d104      	bne.n	800c646 <HAL_TIM_IC_Stop_IT+0x16a>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c644:	e003      	b.n	800c64e <HAL_TIM_IC_Stop_IT+0x172>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2201      	movs	r2, #1
 800c64a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800c64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3710      	adds	r7, #16
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	691b      	ldr	r3, [r3, #16]
 800c666:	f003 0302 	and.w	r3, r3, #2
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d122      	bne.n	800c6b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	f003 0302 	and.w	r3, r3, #2
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d11b      	bne.n	800c6b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f06f 0202 	mvn.w	r2, #2
 800c684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2201      	movs	r2, #1
 800c68a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	f003 0303 	and.w	r3, r3, #3
 800c696:	2b00      	cmp	r3, #0
 800c698:	d003      	beq.n	800c6a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7f4 ffbc 	bl	8001618 <HAL_TIM_IC_CaptureCallback>
 800c6a0:	e005      	b.n	800c6ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 fc26 	bl	800cef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 fc2d 	bl	800cf08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	f003 0304 	and.w	r3, r3, #4
 800c6be:	2b04      	cmp	r3, #4
 800c6c0:	d122      	bne.n	800c708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	f003 0304 	and.w	r3, r3, #4
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	d11b      	bne.n	800c708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f06f 0204 	mvn.w	r2, #4
 800c6d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2202      	movs	r2, #2
 800c6de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	699b      	ldr	r3, [r3, #24]
 800c6e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d003      	beq.n	800c6f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7f4 ff92 	bl	8001618 <HAL_TIM_IC_CaptureCallback>
 800c6f4:	e005      	b.n	800c702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 fbfc 	bl	800cef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fc03 	bl	800cf08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	f003 0308 	and.w	r3, r3, #8
 800c712:	2b08      	cmp	r3, #8
 800c714:	d122      	bne.n	800c75c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	f003 0308 	and.w	r3, r3, #8
 800c720:	2b08      	cmp	r3, #8
 800c722:	d11b      	bne.n	800c75c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f06f 0208 	mvn.w	r2, #8
 800c72c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2204      	movs	r2, #4
 800c732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	69db      	ldr	r3, [r3, #28]
 800c73a:	f003 0303 	and.w	r3, r3, #3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d003      	beq.n	800c74a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7f4 ff68 	bl	8001618 <HAL_TIM_IC_CaptureCallback>
 800c748:	e005      	b.n	800c756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fbd2 	bl	800cef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 fbd9 	bl	800cf08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	f003 0310 	and.w	r3, r3, #16
 800c766:	2b10      	cmp	r3, #16
 800c768:	d122      	bne.n	800c7b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	f003 0310 	and.w	r3, r3, #16
 800c774:	2b10      	cmp	r3, #16
 800c776:	d11b      	bne.n	800c7b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f06f 0210 	mvn.w	r2, #16
 800c780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2208      	movs	r2, #8
 800c786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	69db      	ldr	r3, [r3, #28]
 800c78e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c792:	2b00      	cmp	r3, #0
 800c794:	d003      	beq.n	800c79e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7f4 ff3e 	bl	8001618 <HAL_TIM_IC_CaptureCallback>
 800c79c:	e005      	b.n	800c7aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 fba8 	bl	800cef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 fbaf 	bl	800cf08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	f003 0301 	and.w	r3, r3, #1
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d10e      	bne.n	800c7dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	f003 0301 	and.w	r3, r3, #1
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d107      	bne.n	800c7dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f06f 0201 	mvn.w	r2, #1
 800c7d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f7f4 fef0 	bl	80015bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7e6:	2b80      	cmp	r3, #128	; 0x80
 800c7e8:	d10e      	bne.n	800c808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7f4:	2b80      	cmp	r3, #128	; 0x80
 800c7f6:	d107      	bne.n	800c808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f001 fa74 	bl	800dcf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c816:	d10e      	bne.n	800c836 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c822:	2b80      	cmp	r3, #128	; 0x80
 800c824:	d107      	bne.n	800c836 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f001 fa67 	bl	800dd04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c840:	2b40      	cmp	r3, #64	; 0x40
 800c842:	d10e      	bne.n	800c862 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c84e:	2b40      	cmp	r3, #64	; 0x40
 800c850:	d107      	bne.n	800c862 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c85a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fb5d 	bl	800cf1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	691b      	ldr	r3, [r3, #16]
 800c868:	f003 0320 	and.w	r3, r3, #32
 800c86c:	2b20      	cmp	r3, #32
 800c86e:	d10e      	bne.n	800c88e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	f003 0320 	and.w	r3, r3, #32
 800c87a:	2b20      	cmp	r3, #32
 800c87c:	d107      	bne.n	800c88e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f06f 0220 	mvn.w	r2, #32
 800c886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f001 fa27 	bl	800dcdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c88e:	bf00      	nop
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b086      	sub	sp, #24
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	60f8      	str	r0, [r7, #12]
 800c89e:	60b9      	str	r1, [r7, #8]
 800c8a0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d101      	bne.n	800c8b4 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	e088      	b.n	800c9c6 <HAL_TIM_IC_ConfigChannel+0x130>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d11b      	bne.n	800c8fa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800c8d2:	f000 ff87 	bl	800d7e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	699a      	ldr	r2, [r3, #24]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f022 020c 	bic.w	r2, r2, #12
 800c8e4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	6999      	ldr	r1, [r3, #24]
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	689a      	ldr	r2, [r3, #8]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	619a      	str	r2, [r3, #24]
 800c8f8:	e060      	b.n	800c9bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b04      	cmp	r3, #4
 800c8fe:	d11c      	bne.n	800c93a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800c910:	f001 f80b 	bl	800d92a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	699a      	ldr	r2, [r3, #24]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c922:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	6999      	ldr	r1, [r3, #24]
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	021a      	lsls	r2, r3, #8
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	430a      	orrs	r2, r1
 800c936:	619a      	str	r2, [r3, #24]
 800c938:	e040      	b.n	800c9bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b08      	cmp	r3, #8
 800c93e:	d11b      	bne.n	800c978 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800c950:	f001 f858 	bl	800da04 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	69da      	ldr	r2, [r3, #28]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f022 020c 	bic.w	r2, r2, #12
 800c962:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	69d9      	ldr	r1, [r3, #28]
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	689a      	ldr	r2, [r3, #8]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	430a      	orrs	r2, r1
 800c974:	61da      	str	r2, [r3, #28]
 800c976:	e021      	b.n	800c9bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b0c      	cmp	r3, #12
 800c97c:	d11c      	bne.n	800c9b8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800c98e:	f001 f875 	bl	800da7c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	69da      	ldr	r2, [r3, #28]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c9a0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	69d9      	ldr	r1, [r3, #28]
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	021a      	lsls	r2, r3, #8
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	61da      	str	r2, [r3, #28]
 800c9b6:	e001      	b.n	800c9bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c9c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3718      	adds	r7, #24
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
	...

0800c9d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d101      	bne.n	800c9ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c9ea:	2302      	movs	r3, #2
 800c9ec:	e0ff      	b.n	800cbee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b14      	cmp	r3, #20
 800c9fa:	f200 80f0 	bhi.w	800cbde <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ca04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ca00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca04:	0800ca59 	.word	0x0800ca59
 800ca08:	0800cbdf 	.word	0x0800cbdf
 800ca0c:	0800cbdf 	.word	0x0800cbdf
 800ca10:	0800cbdf 	.word	0x0800cbdf
 800ca14:	0800ca99 	.word	0x0800ca99
 800ca18:	0800cbdf 	.word	0x0800cbdf
 800ca1c:	0800cbdf 	.word	0x0800cbdf
 800ca20:	0800cbdf 	.word	0x0800cbdf
 800ca24:	0800cadb 	.word	0x0800cadb
 800ca28:	0800cbdf 	.word	0x0800cbdf
 800ca2c:	0800cbdf 	.word	0x0800cbdf
 800ca30:	0800cbdf 	.word	0x0800cbdf
 800ca34:	0800cb1b 	.word	0x0800cb1b
 800ca38:	0800cbdf 	.word	0x0800cbdf
 800ca3c:	0800cbdf 	.word	0x0800cbdf
 800ca40:	0800cbdf 	.word	0x0800cbdf
 800ca44:	0800cb5d 	.word	0x0800cb5d
 800ca48:	0800cbdf 	.word	0x0800cbdf
 800ca4c:	0800cbdf 	.word	0x0800cbdf
 800ca50:	0800cbdf 	.word	0x0800cbdf
 800ca54:	0800cb9d 	.word	0x0800cb9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	68b9      	ldr	r1, [r7, #8]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 fb00 	bl	800d064 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	699a      	ldr	r2, [r3, #24]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f042 0208 	orr.w	r2, r2, #8
 800ca72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	699a      	ldr	r2, [r3, #24]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f022 0204 	bic.w	r2, r2, #4
 800ca82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6999      	ldr	r1, [r3, #24]
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	691a      	ldr	r2, [r3, #16]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	430a      	orrs	r2, r1
 800ca94:	619a      	str	r2, [r3, #24]
      break;
 800ca96:	e0a5      	b.n	800cbe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	68b9      	ldr	r1, [r7, #8]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 fb70 	bl	800d184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	699a      	ldr	r2, [r3, #24]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	699a      	ldr	r2, [r3, #24]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	6999      	ldr	r1, [r3, #24]
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	691b      	ldr	r3, [r3, #16]
 800cace:	021a      	lsls	r2, r3, #8
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	430a      	orrs	r2, r1
 800cad6:	619a      	str	r2, [r3, #24]
      break;
 800cad8:	e084      	b.n	800cbe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	68b9      	ldr	r1, [r7, #8]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 fbd9 	bl	800d298 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	69da      	ldr	r2, [r3, #28]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f042 0208 	orr.w	r2, r2, #8
 800caf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	69da      	ldr	r2, [r3, #28]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f022 0204 	bic.w	r2, r2, #4
 800cb04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	69d9      	ldr	r1, [r3, #28]
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	691a      	ldr	r2, [r3, #16]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	430a      	orrs	r2, r1
 800cb16:	61da      	str	r2, [r3, #28]
      break;
 800cb18:	e064      	b.n	800cbe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	68b9      	ldr	r1, [r7, #8]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f000 fc41 	bl	800d3a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	69da      	ldr	r2, [r3, #28]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	69da      	ldr	r2, [r3, #28]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	69d9      	ldr	r1, [r3, #28]
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	021a      	lsls	r2, r3, #8
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	430a      	orrs	r2, r1
 800cb58:	61da      	str	r2, [r3, #28]
      break;
 800cb5a:	e043      	b.n	800cbe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	68b9      	ldr	r1, [r7, #8]
 800cb62:	4618      	mov	r0, r3
 800cb64:	f000 fc8a 	bl	800d47c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f042 0208 	orr.w	r2, r2, #8
 800cb76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f022 0204 	bic.w	r2, r2, #4
 800cb86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	691a      	ldr	r2, [r3, #16]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	430a      	orrs	r2, r1
 800cb98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cb9a:	e023      	b.n	800cbe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68b9      	ldr	r1, [r7, #8]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 fcce 	bl	800d544 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	021a      	lsls	r2, r3, #8
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	430a      	orrs	r2, r1
 800cbda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cbdc:	e002      	b.n	800cbe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	75fb      	strb	r3, [r7, #23]
      break;
 800cbe2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cbec:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3718      	adds	r7, #24
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop

0800cbf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d101      	bne.n	800cc14 <HAL_TIM_ConfigClockSource+0x1c>
 800cc10:	2302      	movs	r3, #2
 800cc12:	e0dc      	b.n	800cdce <HAL_TIM_ConfigClockSource+0x1d6>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2202      	movs	r2, #2
 800cc20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	4b6a      	ldr	r3, [pc, #424]	; (800cdd8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cc30:	4013      	ands	r3, r2
 800cc32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68ba      	ldr	r2, [r7, #8]
 800cc42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a64      	ldr	r2, [pc, #400]	; (800cddc <HAL_TIM_ConfigClockSource+0x1e4>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	f000 80a9 	beq.w	800cda2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc50:	4a62      	ldr	r2, [pc, #392]	; (800cddc <HAL_TIM_ConfigClockSource+0x1e4>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	f200 80ae 	bhi.w	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc58:	4a61      	ldr	r2, [pc, #388]	; (800cde0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	f000 80a1 	beq.w	800cda2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc60:	4a5f      	ldr	r2, [pc, #380]	; (800cde0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	f200 80a6 	bhi.w	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc68:	4a5e      	ldr	r2, [pc, #376]	; (800cde4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	f000 8099 	beq.w	800cda2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc70:	4a5c      	ldr	r2, [pc, #368]	; (800cde4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	f200 809e 	bhi.w	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cc7c:	f000 8091 	beq.w	800cda2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cc84:	f200 8096 	bhi.w	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc8c:	f000 8089 	beq.w	800cda2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc94:	f200 808e 	bhi.w	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc9c:	d03e      	beq.n	800cd1c <HAL_TIM_ConfigClockSource+0x124>
 800cc9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cca2:	f200 8087 	bhi.w	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccaa:	f000 8086 	beq.w	800cdba <HAL_TIM_ConfigClockSource+0x1c2>
 800ccae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccb2:	d87f      	bhi.n	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccb4:	2b70      	cmp	r3, #112	; 0x70
 800ccb6:	d01a      	beq.n	800ccee <HAL_TIM_ConfigClockSource+0xf6>
 800ccb8:	2b70      	cmp	r3, #112	; 0x70
 800ccba:	d87b      	bhi.n	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccbc:	2b60      	cmp	r3, #96	; 0x60
 800ccbe:	d050      	beq.n	800cd62 <HAL_TIM_ConfigClockSource+0x16a>
 800ccc0:	2b60      	cmp	r3, #96	; 0x60
 800ccc2:	d877      	bhi.n	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccc4:	2b50      	cmp	r3, #80	; 0x50
 800ccc6:	d03c      	beq.n	800cd42 <HAL_TIM_ConfigClockSource+0x14a>
 800ccc8:	2b50      	cmp	r3, #80	; 0x50
 800ccca:	d873      	bhi.n	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cccc:	2b40      	cmp	r3, #64	; 0x40
 800ccce:	d058      	beq.n	800cd82 <HAL_TIM_ConfigClockSource+0x18a>
 800ccd0:	2b40      	cmp	r3, #64	; 0x40
 800ccd2:	d86f      	bhi.n	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccd4:	2b30      	cmp	r3, #48	; 0x30
 800ccd6:	d064      	beq.n	800cda2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccd8:	2b30      	cmp	r3, #48	; 0x30
 800ccda:	d86b      	bhi.n	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccdc:	2b20      	cmp	r3, #32
 800ccde:	d060      	beq.n	800cda2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cce0:	2b20      	cmp	r3, #32
 800cce2:	d867      	bhi.n	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d05c      	beq.n	800cda2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cce8:	2b10      	cmp	r3, #16
 800ccea:	d05a      	beq.n	800cda2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccec:	e062      	b.n	800cdb4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ccfe:	f000 ff19 	bl	800db34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cd10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	68ba      	ldr	r2, [r7, #8]
 800cd18:	609a      	str	r2, [r3, #8]
      break;
 800cd1a:	e04f      	b.n	800cdbc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd2c:	f000 ff02 	bl	800db34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	689a      	ldr	r2, [r3, #8]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd3e:	609a      	str	r2, [r3, #8]
      break;
 800cd40:	e03c      	b.n	800cdbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd4e:	461a      	mov	r2, r3
 800cd50:	f000 fdbc 	bl	800d8cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2150      	movs	r1, #80	; 0x50
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f000 fecc 	bl	800daf8 <TIM_ITRx_SetConfig>
      break;
 800cd60:	e02c      	b.n	800cdbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd6e:	461a      	mov	r2, r3
 800cd70:	f000 fe18 	bl	800d9a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2160      	movs	r1, #96	; 0x60
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f000 febc 	bl	800daf8 <TIM_ITRx_SetConfig>
      break;
 800cd80:	e01c      	b.n	800cdbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd8e:	461a      	mov	r2, r3
 800cd90:	f000 fd9c 	bl	800d8cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2140      	movs	r1, #64	; 0x40
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f000 feac 	bl	800daf8 <TIM_ITRx_SetConfig>
      break;
 800cda0:	e00c      	b.n	800cdbc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4610      	mov	r0, r2
 800cdae:	f000 fea3 	bl	800daf8 <TIM_ITRx_SetConfig>
      break;
 800cdb2:	e003      	b.n	800cdbc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	73fb      	strb	r3, [r7, #15]
      break;
 800cdb8:	e000      	b.n	800cdbc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cdba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	ffceff88 	.word	0xffceff88
 800cddc:	00100040 	.word	0x00100040
 800cde0:	00100030 	.word	0x00100030
 800cde4:	00100020 	.word	0x00100020

0800cde8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d101      	bne.n	800ce00 <HAL_TIM_SlaveConfigSynchro+0x18>
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	e031      	b.n	800ce64 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ce10:	6839      	ldr	r1, [r7, #0]
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 fbfc 	bl	800d610 <TIM_SlaveTimer_SetConfig>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d009      	beq.n	800ce32 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2201      	movs	r2, #1
 800ce22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e018      	b.n	800ce64 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68da      	ldr	r2, [r3, #12]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce40:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	68da      	ldr	r2, [r3, #12]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce50:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2201      	movs	r2, #1
 800ce56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ce76:	2300      	movs	r3, #0
 800ce78:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	2b0c      	cmp	r3, #12
 800ce7e:	d831      	bhi.n	800cee4 <HAL_TIM_ReadCapturedValue+0x78>
 800ce80:	a201      	add	r2, pc, #4	; (adr r2, 800ce88 <HAL_TIM_ReadCapturedValue+0x1c>)
 800ce82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce86:	bf00      	nop
 800ce88:	0800cebd 	.word	0x0800cebd
 800ce8c:	0800cee5 	.word	0x0800cee5
 800ce90:	0800cee5 	.word	0x0800cee5
 800ce94:	0800cee5 	.word	0x0800cee5
 800ce98:	0800cec7 	.word	0x0800cec7
 800ce9c:	0800cee5 	.word	0x0800cee5
 800cea0:	0800cee5 	.word	0x0800cee5
 800cea4:	0800cee5 	.word	0x0800cee5
 800cea8:	0800ced1 	.word	0x0800ced1
 800ceac:	0800cee5 	.word	0x0800cee5
 800ceb0:	0800cee5 	.word	0x0800cee5
 800ceb4:	0800cee5 	.word	0x0800cee5
 800ceb8:	0800cedb 	.word	0x0800cedb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec2:	60fb      	str	r3, [r7, #12]

      break;
 800cec4:	e00f      	b.n	800cee6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cecc:	60fb      	str	r3, [r7, #12]

      break;
 800cece:	e00a      	b.n	800cee6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced6:	60fb      	str	r3, [r7, #12]

      break;
 800ced8:	e005      	b.n	800cee6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee0:	60fb      	str	r3, [r7, #12]

      break;
 800cee2:	e000      	b.n	800cee6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800cee4:	bf00      	nop
  }

  return tmpreg;
 800cee6:	68fb      	ldr	r3, [r7, #12]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3714      	adds	r7, #20
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf10:	bf00      	nop
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf24:	bf00      	nop
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a40      	ldr	r2, [pc, #256]	; (800d044 <TIM_Base_SetConfig+0x114>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d013      	beq.n	800cf70 <TIM_Base_SetConfig+0x40>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf4e:	d00f      	beq.n	800cf70 <TIM_Base_SetConfig+0x40>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a3d      	ldr	r2, [pc, #244]	; (800d048 <TIM_Base_SetConfig+0x118>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d00b      	beq.n	800cf70 <TIM_Base_SetConfig+0x40>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a3c      	ldr	r2, [pc, #240]	; (800d04c <TIM_Base_SetConfig+0x11c>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d007      	beq.n	800cf70 <TIM_Base_SetConfig+0x40>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a3b      	ldr	r2, [pc, #236]	; (800d050 <TIM_Base_SetConfig+0x120>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d003      	beq.n	800cf70 <TIM_Base_SetConfig+0x40>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4a3a      	ldr	r2, [pc, #232]	; (800d054 <TIM_Base_SetConfig+0x124>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d108      	bne.n	800cf82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4a2f      	ldr	r2, [pc, #188]	; (800d044 <TIM_Base_SetConfig+0x114>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d01f      	beq.n	800cfca <TIM_Base_SetConfig+0x9a>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf90:	d01b      	beq.n	800cfca <TIM_Base_SetConfig+0x9a>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a2c      	ldr	r2, [pc, #176]	; (800d048 <TIM_Base_SetConfig+0x118>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d017      	beq.n	800cfca <TIM_Base_SetConfig+0x9a>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a2b      	ldr	r2, [pc, #172]	; (800d04c <TIM_Base_SetConfig+0x11c>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d013      	beq.n	800cfca <TIM_Base_SetConfig+0x9a>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4a2a      	ldr	r2, [pc, #168]	; (800d050 <TIM_Base_SetConfig+0x120>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d00f      	beq.n	800cfca <TIM_Base_SetConfig+0x9a>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4a29      	ldr	r2, [pc, #164]	; (800d054 <TIM_Base_SetConfig+0x124>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d00b      	beq.n	800cfca <TIM_Base_SetConfig+0x9a>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4a28      	ldr	r2, [pc, #160]	; (800d058 <TIM_Base_SetConfig+0x128>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d007      	beq.n	800cfca <TIM_Base_SetConfig+0x9a>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4a27      	ldr	r2, [pc, #156]	; (800d05c <TIM_Base_SetConfig+0x12c>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d003      	beq.n	800cfca <TIM_Base_SetConfig+0x9a>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	4a26      	ldr	r2, [pc, #152]	; (800d060 <TIM_Base_SetConfig+0x130>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d108      	bne.n	800cfdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	695b      	ldr	r3, [r3, #20]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	689a      	ldr	r2, [r3, #8]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a10      	ldr	r2, [pc, #64]	; (800d044 <TIM_Base_SetConfig+0x114>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d00f      	beq.n	800d028 <TIM_Base_SetConfig+0xf8>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a12      	ldr	r2, [pc, #72]	; (800d054 <TIM_Base_SetConfig+0x124>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d00b      	beq.n	800d028 <TIM_Base_SetConfig+0xf8>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a11      	ldr	r2, [pc, #68]	; (800d058 <TIM_Base_SetConfig+0x128>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d007      	beq.n	800d028 <TIM_Base_SetConfig+0xf8>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a10      	ldr	r2, [pc, #64]	; (800d05c <TIM_Base_SetConfig+0x12c>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d003      	beq.n	800d028 <TIM_Base_SetConfig+0xf8>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a0f      	ldr	r2, [pc, #60]	; (800d060 <TIM_Base_SetConfig+0x130>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d103      	bne.n	800d030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	691a      	ldr	r2, [r3, #16]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	615a      	str	r2, [r3, #20]
}
 800d036:	bf00      	nop
 800d038:	3714      	adds	r7, #20
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	40010000 	.word	0x40010000
 800d048:	40000400 	.word	0x40000400
 800d04c:	40000800 	.word	0x40000800
 800d050:	40000c00 	.word	0x40000c00
 800d054:	40010400 	.word	0x40010400
 800d058:	40014000 	.word	0x40014000
 800d05c:	40014400 	.word	0x40014400
 800d060:	40014800 	.word	0x40014800

0800d064 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d064:	b480      	push	{r7}
 800d066:	b087      	sub	sp, #28
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a1b      	ldr	r3, [r3, #32]
 800d072:	f023 0201 	bic.w	r2, r3, #1
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a1b      	ldr	r3, [r3, #32]
 800d07e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	699b      	ldr	r3, [r3, #24]
 800d08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	4b37      	ldr	r3, [pc, #220]	; (800d16c <TIM_OC1_SetConfig+0x108>)
 800d090:	4013      	ands	r3, r2
 800d092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f023 0303 	bic.w	r3, r3, #3
 800d09a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	f023 0302 	bic.w	r3, r3, #2
 800d0ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	697a      	ldr	r2, [r7, #20]
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a2d      	ldr	r2, [pc, #180]	; (800d170 <TIM_OC1_SetConfig+0x10c>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d00f      	beq.n	800d0e0 <TIM_OC1_SetConfig+0x7c>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a2c      	ldr	r2, [pc, #176]	; (800d174 <TIM_OC1_SetConfig+0x110>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d00b      	beq.n	800d0e0 <TIM_OC1_SetConfig+0x7c>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a2b      	ldr	r2, [pc, #172]	; (800d178 <TIM_OC1_SetConfig+0x114>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d007      	beq.n	800d0e0 <TIM_OC1_SetConfig+0x7c>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a2a      	ldr	r2, [pc, #168]	; (800d17c <TIM_OC1_SetConfig+0x118>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d003      	beq.n	800d0e0 <TIM_OC1_SetConfig+0x7c>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a29      	ldr	r2, [pc, #164]	; (800d180 <TIM_OC1_SetConfig+0x11c>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d10c      	bne.n	800d0fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	f023 0308 	bic.w	r3, r3, #8
 800d0e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	697a      	ldr	r2, [r7, #20]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	f023 0304 	bic.w	r3, r3, #4
 800d0f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a1c      	ldr	r2, [pc, #112]	; (800d170 <TIM_OC1_SetConfig+0x10c>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d00f      	beq.n	800d122 <TIM_OC1_SetConfig+0xbe>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a1b      	ldr	r2, [pc, #108]	; (800d174 <TIM_OC1_SetConfig+0x110>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d00b      	beq.n	800d122 <TIM_OC1_SetConfig+0xbe>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a1a      	ldr	r2, [pc, #104]	; (800d178 <TIM_OC1_SetConfig+0x114>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d007      	beq.n	800d122 <TIM_OC1_SetConfig+0xbe>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a19      	ldr	r2, [pc, #100]	; (800d17c <TIM_OC1_SetConfig+0x118>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d003      	beq.n	800d122 <TIM_OC1_SetConfig+0xbe>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a18      	ldr	r2, [pc, #96]	; (800d180 <TIM_OC1_SetConfig+0x11c>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d111      	bne.n	800d146 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	693a      	ldr	r2, [r7, #16]
 800d138:	4313      	orrs	r3, r2
 800d13a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	4313      	orrs	r3, r2
 800d144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	68fa      	ldr	r2, [r7, #12]
 800d150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	697a      	ldr	r2, [r7, #20]
 800d15e:	621a      	str	r2, [r3, #32]
}
 800d160:	bf00      	nop
 800d162:	371c      	adds	r7, #28
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr
 800d16c:	fffeff8f 	.word	0xfffeff8f
 800d170:	40010000 	.word	0x40010000
 800d174:	40010400 	.word	0x40010400
 800d178:	40014000 	.word	0x40014000
 800d17c:	40014400 	.word	0x40014400
 800d180:	40014800 	.word	0x40014800

0800d184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d184:	b480      	push	{r7}
 800d186:	b087      	sub	sp, #28
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6a1b      	ldr	r3, [r3, #32]
 800d192:	f023 0210 	bic.w	r2, r3, #16
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a1b      	ldr	r3, [r3, #32]
 800d19e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	699b      	ldr	r3, [r3, #24]
 800d1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	4b34      	ldr	r3, [pc, #208]	; (800d280 <TIM_OC2_SetConfig+0xfc>)
 800d1b0:	4013      	ands	r3, r2
 800d1b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	021b      	lsls	r3, r3, #8
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	f023 0320 	bic.w	r3, r3, #32
 800d1ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	011b      	lsls	r3, r3, #4
 800d1d6:	697a      	ldr	r2, [r7, #20]
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	4a29      	ldr	r2, [pc, #164]	; (800d284 <TIM_OC2_SetConfig+0x100>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d003      	beq.n	800d1ec <TIM_OC2_SetConfig+0x68>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4a28      	ldr	r2, [pc, #160]	; (800d288 <TIM_OC2_SetConfig+0x104>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d10d      	bne.n	800d208 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	011b      	lsls	r3, r3, #4
 800d1fa:	697a      	ldr	r2, [r7, #20]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d206:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a1e      	ldr	r2, [pc, #120]	; (800d284 <TIM_OC2_SetConfig+0x100>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d00f      	beq.n	800d230 <TIM_OC2_SetConfig+0xac>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a1d      	ldr	r2, [pc, #116]	; (800d288 <TIM_OC2_SetConfig+0x104>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d00b      	beq.n	800d230 <TIM_OC2_SetConfig+0xac>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a1c      	ldr	r2, [pc, #112]	; (800d28c <TIM_OC2_SetConfig+0x108>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d007      	beq.n	800d230 <TIM_OC2_SetConfig+0xac>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4a1b      	ldr	r2, [pc, #108]	; (800d290 <TIM_OC2_SetConfig+0x10c>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d003      	beq.n	800d230 <TIM_OC2_SetConfig+0xac>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4a1a      	ldr	r2, [pc, #104]	; (800d294 <TIM_OC2_SetConfig+0x110>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d113      	bne.n	800d258 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d236:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d23e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	695b      	ldr	r3, [r3, #20]
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	693a      	ldr	r2, [r7, #16]
 800d248:	4313      	orrs	r3, r2
 800d24a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	699b      	ldr	r3, [r3, #24]
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	693a      	ldr	r2, [r7, #16]
 800d254:	4313      	orrs	r3, r2
 800d256:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	693a      	ldr	r2, [r7, #16]
 800d25c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	685a      	ldr	r2, [r3, #4]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	697a      	ldr	r2, [r7, #20]
 800d270:	621a      	str	r2, [r3, #32]
}
 800d272:	bf00      	nop
 800d274:	371c      	adds	r7, #28
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	feff8fff 	.word	0xfeff8fff
 800d284:	40010000 	.word	0x40010000
 800d288:	40010400 	.word	0x40010400
 800d28c:	40014000 	.word	0x40014000
 800d290:	40014400 	.word	0x40014400
 800d294:	40014800 	.word	0x40014800

0800d298 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d298:	b480      	push	{r7}
 800d29a:	b087      	sub	sp, #28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6a1b      	ldr	r3, [r3, #32]
 800d2a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	69db      	ldr	r3, [r3, #28]
 800d2be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	4b33      	ldr	r3, [pc, #204]	; (800d390 <TIM_OC3_SetConfig+0xf8>)
 800d2c4:	4013      	ands	r3, r2
 800d2c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f023 0303 	bic.w	r3, r3, #3
 800d2ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d2e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	021b      	lsls	r3, r3, #8
 800d2e8:	697a      	ldr	r2, [r7, #20]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4a28      	ldr	r2, [pc, #160]	; (800d394 <TIM_OC3_SetConfig+0xfc>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d003      	beq.n	800d2fe <TIM_OC3_SetConfig+0x66>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	4a27      	ldr	r2, [pc, #156]	; (800d398 <TIM_OC3_SetConfig+0x100>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d10d      	bne.n	800d31a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	021b      	lsls	r3, r3, #8
 800d30c:	697a      	ldr	r2, [r7, #20]
 800d30e:	4313      	orrs	r3, r2
 800d310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a1d      	ldr	r2, [pc, #116]	; (800d394 <TIM_OC3_SetConfig+0xfc>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d00f      	beq.n	800d342 <TIM_OC3_SetConfig+0xaa>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4a1c      	ldr	r2, [pc, #112]	; (800d398 <TIM_OC3_SetConfig+0x100>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d00b      	beq.n	800d342 <TIM_OC3_SetConfig+0xaa>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4a1b      	ldr	r2, [pc, #108]	; (800d39c <TIM_OC3_SetConfig+0x104>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d007      	beq.n	800d342 <TIM_OC3_SetConfig+0xaa>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4a1a      	ldr	r2, [pc, #104]	; (800d3a0 <TIM_OC3_SetConfig+0x108>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d003      	beq.n	800d342 <TIM_OC3_SetConfig+0xaa>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4a19      	ldr	r2, [pc, #100]	; (800d3a4 <TIM_OC3_SetConfig+0x10c>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d113      	bne.n	800d36a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	695b      	ldr	r3, [r3, #20]
 800d356:	011b      	lsls	r3, r3, #4
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	4313      	orrs	r3, r2
 800d35c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	699b      	ldr	r3, [r3, #24]
 800d362:	011b      	lsls	r3, r3, #4
 800d364:	693a      	ldr	r2, [r7, #16]
 800d366:	4313      	orrs	r3, r2
 800d368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	693a      	ldr	r2, [r7, #16]
 800d36e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	685a      	ldr	r2, [r3, #4]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	697a      	ldr	r2, [r7, #20]
 800d382:	621a      	str	r2, [r3, #32]
}
 800d384:	bf00      	nop
 800d386:	371c      	adds	r7, #28
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr
 800d390:	fffeff8f 	.word	0xfffeff8f
 800d394:	40010000 	.word	0x40010000
 800d398:	40010400 	.word	0x40010400
 800d39c:	40014000 	.word	0x40014000
 800d3a0:	40014400 	.word	0x40014400
 800d3a4:	40014800 	.word	0x40014800

0800d3a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a1b      	ldr	r3, [r3, #32]
 800d3b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a1b      	ldr	r3, [r3, #32]
 800d3c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	69db      	ldr	r3, [r3, #28]
 800d3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	4b24      	ldr	r3, [pc, #144]	; (800d464 <TIM_OC4_SetConfig+0xbc>)
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	021b      	lsls	r3, r3, #8
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d3f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	031b      	lsls	r3, r3, #12
 800d3fa:	693a      	ldr	r2, [r7, #16]
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4a19      	ldr	r2, [pc, #100]	; (800d468 <TIM_OC4_SetConfig+0xc0>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d00f      	beq.n	800d428 <TIM_OC4_SetConfig+0x80>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	4a18      	ldr	r2, [pc, #96]	; (800d46c <TIM_OC4_SetConfig+0xc4>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d00b      	beq.n	800d428 <TIM_OC4_SetConfig+0x80>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4a17      	ldr	r2, [pc, #92]	; (800d470 <TIM_OC4_SetConfig+0xc8>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d007      	beq.n	800d428 <TIM_OC4_SetConfig+0x80>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	4a16      	ldr	r2, [pc, #88]	; (800d474 <TIM_OC4_SetConfig+0xcc>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d003      	beq.n	800d428 <TIM_OC4_SetConfig+0x80>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	4a15      	ldr	r2, [pc, #84]	; (800d478 <TIM_OC4_SetConfig+0xd0>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d109      	bne.n	800d43c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d42e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	695b      	ldr	r3, [r3, #20]
 800d434:	019b      	lsls	r3, r3, #6
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	4313      	orrs	r3, r2
 800d43a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	697a      	ldr	r2, [r7, #20]
 800d440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	693a      	ldr	r2, [r7, #16]
 800d454:	621a      	str	r2, [r3, #32]
}
 800d456:	bf00      	nop
 800d458:	371c      	adds	r7, #28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
 800d462:	bf00      	nop
 800d464:	feff8fff 	.word	0xfeff8fff
 800d468:	40010000 	.word	0x40010000
 800d46c:	40010400 	.word	0x40010400
 800d470:	40014000 	.word	0x40014000
 800d474:	40014400 	.word	0x40014400
 800d478:	40014800 	.word	0x40014800

0800d47c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b087      	sub	sp, #28
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6a1b      	ldr	r3, [r3, #32]
 800d48a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	4b21      	ldr	r3, [pc, #132]	; (800d52c <TIM_OC5_SetConfig+0xb0>)
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68fa      	ldr	r2, [r7, #12]
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d4bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	041b      	lsls	r3, r3, #16
 800d4c4:	693a      	ldr	r2, [r7, #16]
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4a18      	ldr	r2, [pc, #96]	; (800d530 <TIM_OC5_SetConfig+0xb4>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d00f      	beq.n	800d4f2 <TIM_OC5_SetConfig+0x76>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	4a17      	ldr	r2, [pc, #92]	; (800d534 <TIM_OC5_SetConfig+0xb8>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d00b      	beq.n	800d4f2 <TIM_OC5_SetConfig+0x76>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4a16      	ldr	r2, [pc, #88]	; (800d538 <TIM_OC5_SetConfig+0xbc>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d007      	beq.n	800d4f2 <TIM_OC5_SetConfig+0x76>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4a15      	ldr	r2, [pc, #84]	; (800d53c <TIM_OC5_SetConfig+0xc0>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d003      	beq.n	800d4f2 <TIM_OC5_SetConfig+0x76>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4a14      	ldr	r2, [pc, #80]	; (800d540 <TIM_OC5_SetConfig+0xc4>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d109      	bne.n	800d506 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d4f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	021b      	lsls	r3, r3, #8
 800d500:	697a      	ldr	r2, [r7, #20]
 800d502:	4313      	orrs	r3, r2
 800d504:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	685a      	ldr	r2, [r3, #4]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	621a      	str	r2, [r3, #32]
}
 800d520:	bf00      	nop
 800d522:	371c      	adds	r7, #28
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	fffeff8f 	.word	0xfffeff8f
 800d530:	40010000 	.word	0x40010000
 800d534:	40010400 	.word	0x40010400
 800d538:	40014000 	.word	0x40014000
 800d53c:	40014400 	.word	0x40014400
 800d540:	40014800 	.word	0x40014800

0800d544 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d544:	b480      	push	{r7}
 800d546:	b087      	sub	sp, #28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6a1b      	ldr	r3, [r3, #32]
 800d552:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6a1b      	ldr	r3, [r3, #32]
 800d55e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d56c:	68fa      	ldr	r2, [r7, #12]
 800d56e:	4b22      	ldr	r3, [pc, #136]	; (800d5f8 <TIM_OC6_SetConfig+0xb4>)
 800d570:	4013      	ands	r3, r2
 800d572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	021b      	lsls	r3, r3, #8
 800d57a:	68fa      	ldr	r2, [r7, #12]
 800d57c:	4313      	orrs	r3, r2
 800d57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	051b      	lsls	r3, r3, #20
 800d58e:	693a      	ldr	r2, [r7, #16]
 800d590:	4313      	orrs	r3, r2
 800d592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a19      	ldr	r2, [pc, #100]	; (800d5fc <TIM_OC6_SetConfig+0xb8>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d00f      	beq.n	800d5bc <TIM_OC6_SetConfig+0x78>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a18      	ldr	r2, [pc, #96]	; (800d600 <TIM_OC6_SetConfig+0xbc>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d00b      	beq.n	800d5bc <TIM_OC6_SetConfig+0x78>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4a17      	ldr	r2, [pc, #92]	; (800d604 <TIM_OC6_SetConfig+0xc0>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d007      	beq.n	800d5bc <TIM_OC6_SetConfig+0x78>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	4a16      	ldr	r2, [pc, #88]	; (800d608 <TIM_OC6_SetConfig+0xc4>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d003      	beq.n	800d5bc <TIM_OC6_SetConfig+0x78>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a15      	ldr	r2, [pc, #84]	; (800d60c <TIM_OC6_SetConfig+0xc8>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d109      	bne.n	800d5d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d5c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	695b      	ldr	r3, [r3, #20]
 800d5c8:	029b      	lsls	r3, r3, #10
 800d5ca:	697a      	ldr	r2, [r7, #20]
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	697a      	ldr	r2, [r7, #20]
 800d5d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	685a      	ldr	r2, [r3, #4]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	693a      	ldr	r2, [r7, #16]
 800d5e8:	621a      	str	r2, [r3, #32]
}
 800d5ea:	bf00      	nop
 800d5ec:	371c      	adds	r7, #28
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	feff8fff 	.word	0xfeff8fff
 800d5fc:	40010000 	.word	0x40010000
 800d600:	40010400 	.word	0x40010400
 800d604:	40014000 	.word	0x40014000
 800d608:	40014400 	.word	0x40014400
 800d60c:	40014800 	.word	0x40014800

0800d610 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b086      	sub	sp, #24
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d626:	693a      	ldr	r2, [r7, #16]
 800d628:	4b65      	ldr	r3, [pc, #404]	; (800d7c0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800d62a:	4013      	ands	r3, r2
 800d62c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	693a      	ldr	r2, [r7, #16]
 800d634:	4313      	orrs	r3, r2
 800d636:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	4b62      	ldr	r3, [pc, #392]	; (800d7c4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800d63c:	4013      	ands	r3, r2
 800d63e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	693a      	ldr	r2, [r7, #16]
 800d646:	4313      	orrs	r3, r2
 800d648:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	693a      	ldr	r2, [r7, #16]
 800d650:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	4a5c      	ldr	r2, [pc, #368]	; (800d7c8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	f000 80ab 	beq.w	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d65e:	4a5a      	ldr	r2, [pc, #360]	; (800d7c8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d660:	4293      	cmp	r3, r2
 800d662:	f200 80a4 	bhi.w	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d66a:	f000 80a3 	beq.w	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d66e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d672:	f200 809c 	bhi.w	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d676:	4a55      	ldr	r2, [pc, #340]	; (800d7cc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	f000 809b 	beq.w	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d67e:	4a53      	ldr	r2, [pc, #332]	; (800d7cc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d680:	4293      	cmp	r3, r2
 800d682:	f200 8094 	bhi.w	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d686:	4a52      	ldr	r2, [pc, #328]	; (800d7d0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	f000 8093 	beq.w	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d68e:	4a50      	ldr	r2, [pc, #320]	; (800d7d0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d690:	4293      	cmp	r3, r2
 800d692:	f200 808c 	bhi.w	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d696:	4a4f      	ldr	r2, [pc, #316]	; (800d7d4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	f000 808b 	beq.w	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d69e:	4a4d      	ldr	r2, [pc, #308]	; (800d7d4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	f200 8084 	bhi.w	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d6a6:	4a4c      	ldr	r2, [pc, #304]	; (800d7d8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	f000 8083 	beq.w	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6ae:	4a4a      	ldr	r2, [pc, #296]	; (800d7d8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d87c      	bhi.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d6b4:	4a49      	ldr	r2, [pc, #292]	; (800d7dc <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d07c      	beq.n	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6ba:	4a48      	ldr	r2, [pc, #288]	; (800d7dc <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d876      	bhi.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d6c0:	4a47      	ldr	r2, [pc, #284]	; (800d7e0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d076      	beq.n	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6c6:	4a46      	ldr	r2, [pc, #280]	; (800d7e0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d870      	bhi.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d6cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d6d0:	d070      	beq.n	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6d2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d6d6:	d86a      	bhi.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d6d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6dc:	d06a      	beq.n	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6e2:	d864      	bhi.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d6e4:	2b70      	cmp	r3, #112	; 0x70
 800d6e6:	d01a      	beq.n	800d71e <TIM_SlaveTimer_SetConfig+0x10e>
 800d6e8:	2b70      	cmp	r3, #112	; 0x70
 800d6ea:	d860      	bhi.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d6ec:	2b60      	cmp	r3, #96	; 0x60
 800d6ee:	d054      	beq.n	800d79a <TIM_SlaveTimer_SetConfig+0x18a>
 800d6f0:	2b60      	cmp	r3, #96	; 0x60
 800d6f2:	d85c      	bhi.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d6f4:	2b50      	cmp	r3, #80	; 0x50
 800d6f6:	d046      	beq.n	800d786 <TIM_SlaveTimer_SetConfig+0x176>
 800d6f8:	2b50      	cmp	r3, #80	; 0x50
 800d6fa:	d858      	bhi.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d6fc:	2b40      	cmp	r3, #64	; 0x40
 800d6fe:	d019      	beq.n	800d734 <TIM_SlaveTimer_SetConfig+0x124>
 800d700:	2b40      	cmp	r3, #64	; 0x40
 800d702:	d854      	bhi.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d704:	2b30      	cmp	r3, #48	; 0x30
 800d706:	d055      	beq.n	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d708:	2b30      	cmp	r3, #48	; 0x30
 800d70a:	d850      	bhi.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d70c:	2b20      	cmp	r3, #32
 800d70e:	d051      	beq.n	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d710:	2b20      	cmp	r3, #32
 800d712:	d84c      	bhi.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
 800d714:	2b00      	cmp	r3, #0
 800d716:	d04d      	beq.n	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d718:	2b10      	cmp	r3, #16
 800d71a:	d04b      	beq.n	800d7b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d71c:	e047      	b.n	800d7ae <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800d72e:	f000 fa01 	bl	800db34 <TIM_ETR_SetConfig>
      break;
 800d732:	e040      	b.n	800d7b6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2b05      	cmp	r3, #5
 800d73a:	d101      	bne.n	800d740 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800d73c:	2301      	movs	r3, #1
 800d73e:	e03b      	b.n	800d7b8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	6a1a      	ldr	r2, [r3, #32]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f022 0201 	bic.w	r2, r2, #1
 800d756:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	699b      	ldr	r3, [r3, #24]
 800d75e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d766:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	691b      	ldr	r3, [r3, #16]
 800d76c:	011b      	lsls	r3, r3, #4
 800d76e:	68ba      	ldr	r2, [r7, #8]
 800d770:	4313      	orrs	r3, r2
 800d772:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	621a      	str	r2, [r3, #32]
      break;
 800d784:	e017      	b.n	800d7b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d792:	461a      	mov	r2, r3
 800d794:	f000 f89a 	bl	800d8cc <TIM_TI1_ConfigInputStage>
      break;
 800d798:	e00d      	b.n	800d7b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	f000 f8fc 	bl	800d9a4 <TIM_TI2_ConfigInputStage>
      break;
 800d7ac:	e003      	b.n	800d7b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	75fb      	strb	r3, [r7, #23]
      break;
 800d7b2:	e000      	b.n	800d7b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800d7b4:	bf00      	nop
  }

  return status;
 800d7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3718      	adds	r7, #24
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	ffcfff8f 	.word	0xffcfff8f
 800d7c4:	fffefff8 	.word	0xfffefff8
 800d7c8:	00200010 	.word	0x00200010
 800d7cc:	00100070 	.word	0x00100070
 800d7d0:	00100060 	.word	0x00100060
 800d7d4:	00100050 	.word	0x00100050
 800d7d8:	00100040 	.word	0x00100040
 800d7dc:	00100030 	.word	0x00100030
 800d7e0:	00100020 	.word	0x00100020

0800d7e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b087      	sub	sp, #28
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
 800d7f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	6a1b      	ldr	r3, [r3, #32]
 800d7f6:	f023 0201 	bic.w	r2, r3, #1
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	699b      	ldr	r3, [r3, #24]
 800d802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6a1b      	ldr	r3, [r3, #32]
 800d808:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	4a28      	ldr	r2, [pc, #160]	; (800d8b0 <TIM_TI1_SetConfig+0xcc>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d01b      	beq.n	800d84a <TIM_TI1_SetConfig+0x66>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d818:	d017      	beq.n	800d84a <TIM_TI1_SetConfig+0x66>
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	4a25      	ldr	r2, [pc, #148]	; (800d8b4 <TIM_TI1_SetConfig+0xd0>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d013      	beq.n	800d84a <TIM_TI1_SetConfig+0x66>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	4a24      	ldr	r2, [pc, #144]	; (800d8b8 <TIM_TI1_SetConfig+0xd4>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d00f      	beq.n	800d84a <TIM_TI1_SetConfig+0x66>
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	4a23      	ldr	r2, [pc, #140]	; (800d8bc <TIM_TI1_SetConfig+0xd8>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d00b      	beq.n	800d84a <TIM_TI1_SetConfig+0x66>
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	4a22      	ldr	r2, [pc, #136]	; (800d8c0 <TIM_TI1_SetConfig+0xdc>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d007      	beq.n	800d84a <TIM_TI1_SetConfig+0x66>
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	4a21      	ldr	r2, [pc, #132]	; (800d8c4 <TIM_TI1_SetConfig+0xe0>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d003      	beq.n	800d84a <TIM_TI1_SetConfig+0x66>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	4a20      	ldr	r2, [pc, #128]	; (800d8c8 <TIM_TI1_SetConfig+0xe4>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d101      	bne.n	800d84e <TIM_TI1_SetConfig+0x6a>
 800d84a:	2301      	movs	r3, #1
 800d84c:	e000      	b.n	800d850 <TIM_TI1_SetConfig+0x6c>
 800d84e:	2300      	movs	r3, #0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d008      	beq.n	800d866 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	f023 0303 	bic.w	r3, r3, #3
 800d85a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d85c:	697a      	ldr	r2, [r7, #20]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4313      	orrs	r3, r2
 800d862:	617b      	str	r3, [r7, #20]
 800d864:	e003      	b.n	800d86e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	f043 0301 	orr.w	r3, r3, #1
 800d86c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	011b      	lsls	r3, r3, #4
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	697a      	ldr	r2, [r7, #20]
 800d87e:	4313      	orrs	r3, r2
 800d880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	f023 030a 	bic.w	r3, r3, #10
 800d888:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	f003 030a 	and.w	r3, r3, #10
 800d890:	693a      	ldr	r2, [r7, #16]
 800d892:	4313      	orrs	r3, r2
 800d894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	697a      	ldr	r2, [r7, #20]
 800d89a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	693a      	ldr	r2, [r7, #16]
 800d8a0:	621a      	str	r2, [r3, #32]
}
 800d8a2:	bf00      	nop
 800d8a4:	371c      	adds	r7, #28
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	40010000 	.word	0x40010000
 800d8b4:	40000400 	.word	0x40000400
 800d8b8:	40000800 	.word	0x40000800
 800d8bc:	40000c00 	.word	0x40000c00
 800d8c0:	40010400 	.word	0x40010400
 800d8c4:	40001800 	.word	0x40001800
 800d8c8:	40014000 	.word	0x40014000

0800d8cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b087      	sub	sp, #28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	6a1b      	ldr	r3, [r3, #32]
 800d8dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	6a1b      	ldr	r3, [r3, #32]
 800d8e2:	f023 0201 	bic.w	r2, r3, #1
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	699b      	ldr	r3, [r3, #24]
 800d8ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	011b      	lsls	r3, r3, #4
 800d8fc:	693a      	ldr	r2, [r7, #16]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	f023 030a 	bic.w	r3, r3, #10
 800d908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	4313      	orrs	r3, r2
 800d910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	693a      	ldr	r2, [r7, #16]
 800d916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	697a      	ldr	r2, [r7, #20]
 800d91c:	621a      	str	r2, [r3, #32]
}
 800d91e:	bf00      	nop
 800d920:	371c      	adds	r7, #28
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr

0800d92a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d92a:	b480      	push	{r7}
 800d92c:	b087      	sub	sp, #28
 800d92e:	af00      	add	r7, sp, #0
 800d930:	60f8      	str	r0, [r7, #12]
 800d932:	60b9      	str	r1, [r7, #8]
 800d934:	607a      	str	r2, [r7, #4]
 800d936:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	6a1b      	ldr	r3, [r3, #32]
 800d93c:	f023 0210 	bic.w	r2, r3, #16
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	699b      	ldr	r3, [r3, #24]
 800d948:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6a1b      	ldr	r3, [r3, #32]
 800d94e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d956:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	021b      	lsls	r3, r3, #8
 800d95c:	697a      	ldr	r2, [r7, #20]
 800d95e:	4313      	orrs	r3, r2
 800d960:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	031b      	lsls	r3, r3, #12
 800d96e:	b29b      	uxth	r3, r3
 800d970:	697a      	ldr	r2, [r7, #20]
 800d972:	4313      	orrs	r3, r2
 800d974:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d97c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	011b      	lsls	r3, r3, #4
 800d982:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d986:	693a      	ldr	r2, [r7, #16]
 800d988:	4313      	orrs	r3, r2
 800d98a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	693a      	ldr	r2, [r7, #16]
 800d996:	621a      	str	r2, [r3, #32]
}
 800d998:	bf00      	nop
 800d99a:	371c      	adds	r7, #28
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b087      	sub	sp, #28
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6a1b      	ldr	r3, [r3, #32]
 800d9b4:	f023 0210 	bic.w	r2, r3, #16
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	699b      	ldr	r3, [r3, #24]
 800d9c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6a1b      	ldr	r3, [r3, #32]
 800d9c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	031b      	lsls	r3, r3, #12
 800d9d4:	697a      	ldr	r2, [r7, #20]
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d9e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	011b      	lsls	r3, r3, #4
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	621a      	str	r2, [r3, #32]
}
 800d9f8:	bf00      	nop
 800d9fa:	371c      	adds	r7, #28
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800da04:	b480      	push	{r7}
 800da06:	b087      	sub	sp, #28
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
 800da10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	6a1b      	ldr	r3, [r3, #32]
 800da16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	69db      	ldr	r3, [r3, #28]
 800da22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6a1b      	ldr	r3, [r3, #32]
 800da28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	f023 0303 	bic.w	r3, r3, #3
 800da30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800da32:	697a      	ldr	r2, [r7, #20]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4313      	orrs	r3, r2
 800da38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800da40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	011b      	lsls	r3, r3, #4
 800da46:	b2db      	uxtb	r3, r3
 800da48:	697a      	ldr	r2, [r7, #20]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800da54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	021b      	lsls	r3, r3, #8
 800da5a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800da5e:	693a      	ldr	r2, [r7, #16]
 800da60:	4313      	orrs	r3, r2
 800da62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	693a      	ldr	r2, [r7, #16]
 800da6e:	621a      	str	r2, [r3, #32]
}
 800da70:	bf00      	nop
 800da72:	371c      	adds	r7, #28
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b087      	sub	sp, #28
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
 800da88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	6a1b      	ldr	r3, [r3, #32]
 800da8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	69db      	ldr	r3, [r3, #28]
 800da9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6a1b      	ldr	r3, [r3, #32]
 800daa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800daa8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	021b      	lsls	r3, r3, #8
 800daae:	697a      	ldr	r2, [r7, #20]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800daba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	031b      	lsls	r3, r3, #12
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800dace:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	031b      	lsls	r3, r3, #12
 800dad4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800dad8:	693a      	ldr	r2, [r7, #16]
 800dada:	4313      	orrs	r3, r2
 800dadc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	697a      	ldr	r2, [r7, #20]
 800dae2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	693a      	ldr	r2, [r7, #16]
 800dae8:	621a      	str	r2, [r3, #32]
}
 800daea:	bf00      	nop
 800daec:	371c      	adds	r7, #28
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr
	...

0800daf8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b085      	sub	sp, #20
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	4b09      	ldr	r3, [pc, #36]	; (800db30 <TIM_ITRx_SetConfig+0x38>)
 800db0c:	4013      	ands	r3, r2
 800db0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800db10:	683a      	ldr	r2, [r7, #0]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	4313      	orrs	r3, r2
 800db16:	f043 0307 	orr.w	r3, r3, #7
 800db1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	609a      	str	r2, [r3, #8]
}
 800db22:	bf00      	nop
 800db24:	3714      	adds	r7, #20
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	ffcfff8f 	.word	0xffcfff8f

0800db34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800db34:	b480      	push	{r7}
 800db36:	b087      	sub	sp, #28
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
 800db40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	021a      	lsls	r2, r3, #8
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	431a      	orrs	r2, r3
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	4313      	orrs	r3, r2
 800db5c:	697a      	ldr	r2, [r7, #20]
 800db5e:	4313      	orrs	r3, r2
 800db60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	697a      	ldr	r2, [r7, #20]
 800db66:	609a      	str	r2, [r3, #8]
}
 800db68:	bf00      	nop
 800db6a:	371c      	adds	r7, #28
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800db74:	b480      	push	{r7}
 800db76:	b087      	sub	sp, #28
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	f003 031f 	and.w	r3, r3, #31
 800db86:	2201      	movs	r2, #1
 800db88:	fa02 f303 	lsl.w	r3, r2, r3
 800db8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6a1a      	ldr	r2, [r3, #32]
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	43db      	mvns	r3, r3
 800db96:	401a      	ands	r2, r3
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6a1a      	ldr	r2, [r3, #32]
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	f003 031f 	and.w	r3, r3, #31
 800dba6:	6879      	ldr	r1, [r7, #4]
 800dba8:	fa01 f303 	lsl.w	r3, r1, r3
 800dbac:	431a      	orrs	r2, r3
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	621a      	str	r2, [r3, #32]
}
 800dbb2:	bf00      	nop
 800dbb4:	371c      	adds	r7, #28
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
	...

0800dbc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d101      	bne.n	800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dbd4:	2302      	movs	r3, #2
 800dbd6:	e06d      	b.n	800dcb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2202      	movs	r2, #2
 800dbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a30      	ldr	r2, [pc, #192]	; (800dcc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d004      	beq.n	800dc0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4a2f      	ldr	r2, [pc, #188]	; (800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d108      	bne.n	800dc1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dc12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	68fa      	ldr	r2, [r7, #12]
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	68fa      	ldr	r2, [r7, #12]
 800dc36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a20      	ldr	r2, [pc, #128]	; (800dcc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d022      	beq.n	800dc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc4a:	d01d      	beq.n	800dc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a1d      	ldr	r2, [pc, #116]	; (800dcc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d018      	beq.n	800dc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a1c      	ldr	r2, [pc, #112]	; (800dccc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d013      	beq.n	800dc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a1a      	ldr	r2, [pc, #104]	; (800dcd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d00e      	beq.n	800dc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4a15      	ldr	r2, [pc, #84]	; (800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d009      	beq.n	800dc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a16      	ldr	r2, [pc, #88]	; (800dcd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d004      	beq.n	800dc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	4a15      	ldr	r2, [pc, #84]	; (800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d10c      	bne.n	800dca2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	68ba      	ldr	r2, [r7, #8]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3714      	adds	r7, #20
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr
 800dcc0:	40010000 	.word	0x40010000
 800dcc4:	40010400 	.word	0x40010400
 800dcc8:	40000400 	.word	0x40000400
 800dccc:	40000800 	.word	0x40000800
 800dcd0:	40000c00 	.word	0x40000c00
 800dcd4:	40001800 	.word	0x40001800
 800dcd8:	40014000 	.word	0x40014000

0800dcdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b083      	sub	sp, #12
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dce4:	bf00      	nop
 800dce6:	370c      	adds	r7, #12
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dcf8:	bf00      	nop
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d101      	bne.n	800dd2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd26:	2301      	movs	r3, #1
 800dd28:	e042      	b.n	800ddb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d106      	bne.n	800dd42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f7f4 fa55 	bl	80021ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2224      	movs	r2, #36	; 0x24
 800dd46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f022 0201 	bic.w	r2, r2, #1
 800dd58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 fce0 	bl	800e720 <UART_SetConfig>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d101      	bne.n	800dd6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e022      	b.n	800ddb0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d002      	beq.n	800dd78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f001 fa3c 	bl	800f1f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	685a      	ldr	r2, [r3, #4]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	689a      	ldr	r2, [r3, #8]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f042 0201 	orr.w	r2, r2, #1
 800dda6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f001 fac3 	bl	800f334 <UART_CheckIdleState>
 800ddae:	4603      	mov	r3, r0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08a      	sub	sp, #40	; 0x28
 800ddbc:	af02      	add	r7, sp, #8
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	603b      	str	r3, [r7, #0]
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddce:	2b20      	cmp	r3, #32
 800ddd0:	d17b      	bne.n	800deca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <HAL_UART_Transmit+0x26>
 800ddd8:	88fb      	ldrh	r3, [r7, #6]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d101      	bne.n	800dde2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ddde:	2301      	movs	r3, #1
 800dde0:	e074      	b.n	800decc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2200      	movs	r2, #0
 800dde6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2221      	movs	r2, #33	; 0x21
 800ddee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ddf2:	f7f4 ff3d 	bl	8002c70 <HAL_GetTick>
 800ddf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	88fa      	ldrh	r2, [r7, #6]
 800ddfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	88fa      	ldrh	r2, [r7, #6]
 800de04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de10:	d108      	bne.n	800de24 <HAL_UART_Transmit+0x6c>
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d104      	bne.n	800de24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800de1a:	2300      	movs	r3, #0
 800de1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	61bb      	str	r3, [r7, #24]
 800de22:	e003      	b.n	800de2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de28:	2300      	movs	r3, #0
 800de2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800de2c:	e030      	b.n	800de90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	9300      	str	r3, [sp, #0]
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	2200      	movs	r2, #0
 800de36:	2180      	movs	r1, #128	; 0x80
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f001 fb25 	bl	800f488 <UART_WaitOnFlagUntilTimeout>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d005      	beq.n	800de50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2220      	movs	r2, #32
 800de48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800de4c:	2303      	movs	r3, #3
 800de4e:	e03d      	b.n	800decc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d10b      	bne.n	800de6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	461a      	mov	r2, r3
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	3302      	adds	r3, #2
 800de6a:	61bb      	str	r3, [r7, #24]
 800de6c:	e007      	b.n	800de7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	781a      	ldrb	r2, [r3, #0]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	3301      	adds	r3, #1
 800de7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de84:	b29b      	uxth	r3, r3
 800de86:	3b01      	subs	r3, #1
 800de88:	b29a      	uxth	r2, r3
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de96:	b29b      	uxth	r3, r3
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1c8      	bne.n	800de2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	9300      	str	r3, [sp, #0]
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	2200      	movs	r2, #0
 800dea4:	2140      	movs	r1, #64	; 0x40
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f001 faee 	bl	800f488 <UART_WaitOnFlagUntilTimeout>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d005      	beq.n	800debe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2220      	movs	r2, #32
 800deb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800deba:	2303      	movs	r3, #3
 800debc:	e006      	b.n	800decc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2220      	movs	r2, #32
 800dec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dec6:	2300      	movs	r3, #0
 800dec8:	e000      	b.n	800decc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800deca:	2302      	movs	r3, #2
  }
}
 800decc:	4618      	mov	r0, r3
 800dece:	3720      	adds	r7, #32
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b08a      	sub	sp, #40	; 0x28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	4613      	mov	r3, r2
 800dee0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dee8:	2b20      	cmp	r3, #32
 800deea:	d137      	bne.n	800df5c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d002      	beq.n	800def8 <HAL_UART_Receive_DMA+0x24>
 800def2:	88fb      	ldrh	r3, [r7, #6]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d101      	bne.n	800defc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800def8:	2301      	movs	r3, #1
 800defa:	e030      	b.n	800df5e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2200      	movs	r2, #0
 800df00:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a18      	ldr	r2, [pc, #96]	; (800df68 <HAL_UART_Receive_DMA+0x94>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d01f      	beq.n	800df4c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df16:	2b00      	cmp	r3, #0
 800df18:	d018      	beq.n	800df4c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	e853 3f00 	ldrex	r3, [r3]
 800df26:	613b      	str	r3, [r7, #16]
   return(result);
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df2e:	627b      	str	r3, [r7, #36]	; 0x24
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	461a      	mov	r2, r3
 800df36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df38:	623b      	str	r3, [r7, #32]
 800df3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df3c:	69f9      	ldr	r1, [r7, #28]
 800df3e:	6a3a      	ldr	r2, [r7, #32]
 800df40:	e841 2300 	strex	r3, r2, [r1]
 800df44:	61bb      	str	r3, [r7, #24]
   return(result);
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1e6      	bne.n	800df1a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800df4c:	88fb      	ldrh	r3, [r7, #6]
 800df4e:	461a      	mov	r2, r3
 800df50:	68b9      	ldr	r1, [r7, #8]
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f001 fb00 	bl	800f558 <UART_Start_Receive_DMA>
 800df58:	4603      	mov	r3, r0
 800df5a:	e000      	b.n	800df5e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800df5c:	2302      	movs	r3, #2
  }
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3728      	adds	r7, #40	; 0x28
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	58000c00 	.word	0x58000c00

0800df6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b0ba      	sub	sp, #232	; 0xe8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	69db      	ldr	r3, [r3, #28]
 800df7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800df92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800df96:	f640 030f 	movw	r3, #2063	; 0x80f
 800df9a:	4013      	ands	r3, r2
 800df9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dfa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d11b      	bne.n	800dfe0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dfa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfac:	f003 0320 	and.w	r3, r3, #32
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d015      	beq.n	800dfe0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dfb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfb8:	f003 0320 	and.w	r3, r3, #32
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d105      	bne.n	800dfcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dfc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d009      	beq.n	800dfe0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f000 8377 	beq.w	800e6c4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	4798      	blx	r3
      }
      return;
 800dfde:	e371      	b.n	800e6c4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dfe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 8123 	beq.w	800e230 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dfea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dfee:	4b8d      	ldr	r3, [pc, #564]	; (800e224 <HAL_UART_IRQHandler+0x2b8>)
 800dff0:	4013      	ands	r3, r2
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d106      	bne.n	800e004 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dff6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dffa:	4b8b      	ldr	r3, [pc, #556]	; (800e228 <HAL_UART_IRQHandler+0x2bc>)
 800dffc:	4013      	ands	r3, r2
 800dffe:	2b00      	cmp	r3, #0
 800e000:	f000 8116 	beq.w	800e230 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d011      	beq.n	800e034 <HAL_UART_IRQHandler+0xc8>
 800e010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00b      	beq.n	800e034 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2201      	movs	r2, #1
 800e022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e02a:	f043 0201 	orr.w	r2, r3, #1
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e038:	f003 0302 	and.w	r3, r3, #2
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d011      	beq.n	800e064 <HAL_UART_IRQHandler+0xf8>
 800e040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e044:	f003 0301 	and.w	r3, r3, #1
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00b      	beq.n	800e064 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2202      	movs	r2, #2
 800e052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e05a:	f043 0204 	orr.w	r2, r3, #4
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e068:	f003 0304 	and.w	r3, r3, #4
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d011      	beq.n	800e094 <HAL_UART_IRQHandler+0x128>
 800e070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e074:	f003 0301 	and.w	r3, r3, #1
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00b      	beq.n	800e094 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2204      	movs	r2, #4
 800e082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e08a:	f043 0202 	orr.w	r2, r3, #2
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e098:	f003 0308 	and.w	r3, r3, #8
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d017      	beq.n	800e0d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0a4:	f003 0320 	and.w	r3, r3, #32
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d105      	bne.n	800e0b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e0ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e0b0:	4b5c      	ldr	r3, [pc, #368]	; (800e224 <HAL_UART_IRQHandler+0x2b8>)
 800e0b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00b      	beq.n	800e0d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2208      	movs	r2, #8
 800e0be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0c6:	f043 0208 	orr.w	r2, r3, #8
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e0d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d012      	beq.n	800e102 <HAL_UART_IRQHandler+0x196>
 800e0dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d00c      	beq.n	800e102 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e0f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0f8:	f043 0220 	orr.w	r2, r3, #32
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f000 82dd 	beq.w	800e6c8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e112:	f003 0320 	and.w	r3, r3, #32
 800e116:	2b00      	cmp	r3, #0
 800e118:	d013      	beq.n	800e142 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e11a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e11e:	f003 0320 	and.w	r3, r3, #32
 800e122:	2b00      	cmp	r3, #0
 800e124:	d105      	bne.n	800e132 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e12a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d007      	beq.n	800e142 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e136:	2b00      	cmp	r3, #0
 800e138:	d003      	beq.n	800e142 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e156:	2b40      	cmp	r3, #64	; 0x40
 800e158:	d005      	beq.n	800e166 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e15a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e15e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e162:	2b00      	cmp	r3, #0
 800e164:	d054      	beq.n	800e210 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f001 fade 	bl	800f728 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e176:	2b40      	cmp	r3, #64	; 0x40
 800e178:	d146      	bne.n	800e208 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	3308      	adds	r3, #8
 800e180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e188:	e853 3f00 	ldrex	r3, [r3]
 800e18c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3308      	adds	r3, #8
 800e1a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e1a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e1aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e1b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e1b6:	e841 2300 	strex	r3, r2, [r1]
 800e1ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e1be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d1d9      	bne.n	800e17a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d017      	beq.n	800e200 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1d6:	4a15      	ldr	r2, [pc, #84]	; (800e22c <HAL_UART_IRQHandler+0x2c0>)
 800e1d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7f7 fcf5 	bl	8005bd0 <HAL_DMA_Abort_IT>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d019      	beq.n	800e220 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1fe:	e00f      	b.n	800e220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7f3 f9c3 	bl	800158c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e206:	e00b      	b.n	800e220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7f3 f9bf 	bl	800158c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e20e:	e007      	b.n	800e220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7f3 f9bb 	bl	800158c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e21e:	e253      	b.n	800e6c8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e220:	bf00      	nop
    return;
 800e222:	e251      	b.n	800e6c8 <HAL_UART_IRQHandler+0x75c>
 800e224:	10000001 	.word	0x10000001
 800e228:	04000120 	.word	0x04000120
 800e22c:	0800f9db 	.word	0x0800f9db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e234:	2b01      	cmp	r3, #1
 800e236:	f040 81e7 	bne.w	800e608 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e23e:	f003 0310 	and.w	r3, r3, #16
 800e242:	2b00      	cmp	r3, #0
 800e244:	f000 81e0 	beq.w	800e608 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e24c:	f003 0310 	and.w	r3, r3, #16
 800e250:	2b00      	cmp	r3, #0
 800e252:	f000 81d9 	beq.w	800e608 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2210      	movs	r2, #16
 800e25c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e268:	2b40      	cmp	r3, #64	; 0x40
 800e26a:	f040 8151 	bne.w	800e510 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a96      	ldr	r2, [pc, #600]	; (800e4d0 <HAL_UART_IRQHandler+0x564>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d068      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a93      	ldr	r2, [pc, #588]	; (800e4d4 <HAL_UART_IRQHandler+0x568>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d061      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4a91      	ldr	r2, [pc, #580]	; (800e4d8 <HAL_UART_IRQHandler+0x56c>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d05a      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a8e      	ldr	r2, [pc, #568]	; (800e4dc <HAL_UART_IRQHandler+0x570>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d053      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4a8c      	ldr	r2, [pc, #560]	; (800e4e0 <HAL_UART_IRQHandler+0x574>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d04c      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a89      	ldr	r2, [pc, #548]	; (800e4e4 <HAL_UART_IRQHandler+0x578>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d045      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4a87      	ldr	r2, [pc, #540]	; (800e4e8 <HAL_UART_IRQHandler+0x57c>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d03e      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4a84      	ldr	r2, [pc, #528]	; (800e4ec <HAL_UART_IRQHandler+0x580>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d037      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a82      	ldr	r2, [pc, #520]	; (800e4f0 <HAL_UART_IRQHandler+0x584>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d030      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a7f      	ldr	r2, [pc, #508]	; (800e4f4 <HAL_UART_IRQHandler+0x588>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d029      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4a7d      	ldr	r2, [pc, #500]	; (800e4f8 <HAL_UART_IRQHandler+0x58c>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d022      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a7a      	ldr	r2, [pc, #488]	; (800e4fc <HAL_UART_IRQHandler+0x590>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d01b      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a78      	ldr	r2, [pc, #480]	; (800e500 <HAL_UART_IRQHandler+0x594>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d014      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a75      	ldr	r2, [pc, #468]	; (800e504 <HAL_UART_IRQHandler+0x598>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d00d      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a73      	ldr	r2, [pc, #460]	; (800e508 <HAL_UART_IRQHandler+0x59c>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d006      	beq.n	800e34e <HAL_UART_IRQHandler+0x3e2>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a70      	ldr	r2, [pc, #448]	; (800e50c <HAL_UART_IRQHandler+0x5a0>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d106      	bne.n	800e35c <HAL_UART_IRQHandler+0x3f0>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	b29b      	uxth	r3, r3
 800e35a:	e005      	b.n	800e368 <HAL_UART_IRQHandler+0x3fc>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	b29b      	uxth	r3, r3
 800e368:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e36c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e370:	2b00      	cmp	r3, #0
 800e372:	f000 81ab 	beq.w	800e6cc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e37c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e380:	429a      	cmp	r2, r3
 800e382:	f080 81a3 	bcs.w	800e6cc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e38c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e396:	69db      	ldr	r3, [r3, #28]
 800e398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e39c:	f000 8087 	beq.w	800e4ae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e3ac:	e853 3f00 	ldrex	r3, [r3]
 800e3b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e3b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e3b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e3ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e3ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e3d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e3da:	e841 2300 	strex	r3, r2, [r1]
 800e3de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e3e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1da      	bne.n	800e3a0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	3308      	adds	r3, #8
 800e3f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3f4:	e853 3f00 	ldrex	r3, [r3]
 800e3f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e3fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3fc:	f023 0301 	bic.w	r3, r3, #1
 800e400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	3308      	adds	r3, #8
 800e40a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e40e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e412:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e41a:	e841 2300 	strex	r3, r2, [r1]
 800e41e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e422:	2b00      	cmp	r3, #0
 800e424:	d1e1      	bne.n	800e3ea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	3308      	adds	r3, #8
 800e42c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e42e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e430:	e853 3f00 	ldrex	r3, [r3]
 800e434:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e43c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	3308      	adds	r3, #8
 800e446:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e44a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e44c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e452:	e841 2300 	strex	r3, r2, [r1]
 800e456:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1e3      	bne.n	800e426 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2220      	movs	r2, #32
 800e462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2200      	movs	r2, #0
 800e46a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e474:	e853 3f00 	ldrex	r3, [r3]
 800e478:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e47a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e47c:	f023 0310 	bic.w	r3, r3, #16
 800e480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	461a      	mov	r2, r3
 800e48a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e48e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e490:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e492:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e496:	e841 2300 	strex	r3, r2, [r1]
 800e49a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1e4      	bne.n	800e46c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7f7 f873 	bl	8005594 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2202      	movs	r2, #2
 800e4b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 f91d 	bl	800e708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e4ce:	e0fd      	b.n	800e6cc <HAL_UART_IRQHandler+0x760>
 800e4d0:	40020010 	.word	0x40020010
 800e4d4:	40020028 	.word	0x40020028
 800e4d8:	40020040 	.word	0x40020040
 800e4dc:	40020058 	.word	0x40020058
 800e4e0:	40020070 	.word	0x40020070
 800e4e4:	40020088 	.word	0x40020088
 800e4e8:	400200a0 	.word	0x400200a0
 800e4ec:	400200b8 	.word	0x400200b8
 800e4f0:	40020410 	.word	0x40020410
 800e4f4:	40020428 	.word	0x40020428
 800e4f8:	40020440 	.word	0x40020440
 800e4fc:	40020458 	.word	0x40020458
 800e500:	40020470 	.word	0x40020470
 800e504:	40020488 	.word	0x40020488
 800e508:	400204a0 	.word	0x400204a0
 800e50c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f000 80cf 	beq.w	800e6d0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e532:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e536:	2b00      	cmp	r3, #0
 800e538:	f000 80ca 	beq.w	800e6d0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e544:	e853 3f00 	ldrex	r3, [r3]
 800e548:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e54c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	461a      	mov	r2, r3
 800e55a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e55e:	647b      	str	r3, [r7, #68]	; 0x44
 800e560:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e566:	e841 2300 	strex	r3, r2, [r1]
 800e56a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1e4      	bne.n	800e53c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	3308      	adds	r3, #8
 800e578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57c:	e853 3f00 	ldrex	r3, [r3]
 800e580:	623b      	str	r3, [r7, #32]
   return(result);
 800e582:	6a3a      	ldr	r2, [r7, #32]
 800e584:	4b55      	ldr	r3, [pc, #340]	; (800e6dc <HAL_UART_IRQHandler+0x770>)
 800e586:	4013      	ands	r3, r2
 800e588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	3308      	adds	r3, #8
 800e592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e596:	633a      	str	r2, [r7, #48]	; 0x30
 800e598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e59e:	e841 2300 	strex	r3, r2, [r1]
 800e5a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1e3      	bne.n	800e572 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2220      	movs	r2, #32
 800e5ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	e853 3f00 	ldrex	r3, [r3]
 800e5ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f023 0310 	bic.w	r3, r3, #16
 800e5d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e5e0:	61fb      	str	r3, [r7, #28]
 800e5e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e4:	69b9      	ldr	r1, [r7, #24]
 800e5e6:	69fa      	ldr	r2, [r7, #28]
 800e5e8:	e841 2300 	strex	r3, r2, [r1]
 800e5ec:	617b      	str	r3, [r7, #20]
   return(result);
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1e4      	bne.n	800e5be <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2202      	movs	r2, #2
 800e5f8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e5fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e5fe:	4619      	mov	r1, r3
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 f881 	bl	800e708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e606:	e063      	b.n	800e6d0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e60c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00e      	beq.n	800e632 <HAL_UART_IRQHandler+0x6c6>
 800e614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d008      	beq.n	800e632 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f001 fa16 	bl	800fa5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e630:	e051      	b.n	800e6d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d014      	beq.n	800e668 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e63e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e646:	2b00      	cmp	r3, #0
 800e648:	d105      	bne.n	800e656 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e64a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e64e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e652:	2b00      	cmp	r3, #0
 800e654:	d008      	beq.n	800e668 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d03a      	beq.n	800e6d4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	4798      	blx	r3
    }
    return;
 800e666:	e035      	b.n	800e6d4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e670:	2b00      	cmp	r3, #0
 800e672:	d009      	beq.n	800e688 <HAL_UART_IRQHandler+0x71c>
 800e674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d003      	beq.n	800e688 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f001 f9c0 	bl	800fa06 <UART_EndTransmit_IT>
    return;
 800e686:	e026      	b.n	800e6d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e68c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e690:	2b00      	cmp	r3, #0
 800e692:	d009      	beq.n	800e6a8 <HAL_UART_IRQHandler+0x73c>
 800e694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e698:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d003      	beq.n	800e6a8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f001 f9ef 	bl	800fa84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6a6:	e016      	b.n	800e6d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d010      	beq.n	800e6d6 <HAL_UART_IRQHandler+0x76a>
 800e6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	da0c      	bge.n	800e6d6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f001 f9d7 	bl	800fa70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6c2:	e008      	b.n	800e6d6 <HAL_UART_IRQHandler+0x76a>
      return;
 800e6c4:	bf00      	nop
 800e6c6:	e006      	b.n	800e6d6 <HAL_UART_IRQHandler+0x76a>
    return;
 800e6c8:	bf00      	nop
 800e6ca:	e004      	b.n	800e6d6 <HAL_UART_IRQHandler+0x76a>
      return;
 800e6cc:	bf00      	nop
 800e6ce:	e002      	b.n	800e6d6 <HAL_UART_IRQHandler+0x76a>
      return;
 800e6d0:	bf00      	nop
 800e6d2:	e000      	b.n	800e6d6 <HAL_UART_IRQHandler+0x76a>
    return;
 800e6d4:	bf00      	nop
  }
}
 800e6d6:	37e8      	adds	r7, #232	; 0xe8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	effffffe 	.word	0xeffffffe

0800e6e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e6e8:	bf00      	nop
 800e6ea:	370c      	adds	r7, #12
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	460b      	mov	r3, r1
 800e712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e724:	b092      	sub	sp, #72	; 0x48
 800e726:	af00      	add	r7, sp, #0
 800e728:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e72a:	2300      	movs	r3, #0
 800e72c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	689a      	ldr	r2, [r3, #8]
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	691b      	ldr	r3, [r3, #16]
 800e738:	431a      	orrs	r2, r3
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	695b      	ldr	r3, [r3, #20]
 800e73e:	431a      	orrs	r2, r3
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	69db      	ldr	r3, [r3, #28]
 800e744:	4313      	orrs	r3, r2
 800e746:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	4bbe      	ldr	r3, [pc, #760]	; (800ea48 <UART_SetConfig+0x328>)
 800e750:	4013      	ands	r3, r2
 800e752:	697a      	ldr	r2, [r7, #20]
 800e754:	6812      	ldr	r2, [r2, #0]
 800e756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e758:	430b      	orrs	r3, r1
 800e75a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	68da      	ldr	r2, [r3, #12]
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	430a      	orrs	r2, r1
 800e770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	699b      	ldr	r3, [r3, #24]
 800e776:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4ab3      	ldr	r2, [pc, #716]	; (800ea4c <UART_SetConfig+0x32c>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d004      	beq.n	800e78c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	6a1b      	ldr	r3, [r3, #32]
 800e786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e788:	4313      	orrs	r3, r2
 800e78a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	689a      	ldr	r2, [r3, #8]
 800e792:	4baf      	ldr	r3, [pc, #700]	; (800ea50 <UART_SetConfig+0x330>)
 800e794:	4013      	ands	r3, r2
 800e796:	697a      	ldr	r2, [r7, #20]
 800e798:	6812      	ldr	r2, [r2, #0]
 800e79a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e79c:	430b      	orrs	r3, r1
 800e79e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a6:	f023 010f 	bic.w	r1, r3, #15
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	430a      	orrs	r2, r1
 800e7b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4aa6      	ldr	r2, [pc, #664]	; (800ea54 <UART_SetConfig+0x334>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d177      	bne.n	800e8b0 <UART_SetConfig+0x190>
 800e7c0:	4ba5      	ldr	r3, [pc, #660]	; (800ea58 <UART_SetConfig+0x338>)
 800e7c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e7c8:	2b28      	cmp	r3, #40	; 0x28
 800e7ca:	d86d      	bhi.n	800e8a8 <UART_SetConfig+0x188>
 800e7cc:	a201      	add	r2, pc, #4	; (adr r2, 800e7d4 <UART_SetConfig+0xb4>)
 800e7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d2:	bf00      	nop
 800e7d4:	0800e879 	.word	0x0800e879
 800e7d8:	0800e8a9 	.word	0x0800e8a9
 800e7dc:	0800e8a9 	.word	0x0800e8a9
 800e7e0:	0800e8a9 	.word	0x0800e8a9
 800e7e4:	0800e8a9 	.word	0x0800e8a9
 800e7e8:	0800e8a9 	.word	0x0800e8a9
 800e7ec:	0800e8a9 	.word	0x0800e8a9
 800e7f0:	0800e8a9 	.word	0x0800e8a9
 800e7f4:	0800e881 	.word	0x0800e881
 800e7f8:	0800e8a9 	.word	0x0800e8a9
 800e7fc:	0800e8a9 	.word	0x0800e8a9
 800e800:	0800e8a9 	.word	0x0800e8a9
 800e804:	0800e8a9 	.word	0x0800e8a9
 800e808:	0800e8a9 	.word	0x0800e8a9
 800e80c:	0800e8a9 	.word	0x0800e8a9
 800e810:	0800e8a9 	.word	0x0800e8a9
 800e814:	0800e889 	.word	0x0800e889
 800e818:	0800e8a9 	.word	0x0800e8a9
 800e81c:	0800e8a9 	.word	0x0800e8a9
 800e820:	0800e8a9 	.word	0x0800e8a9
 800e824:	0800e8a9 	.word	0x0800e8a9
 800e828:	0800e8a9 	.word	0x0800e8a9
 800e82c:	0800e8a9 	.word	0x0800e8a9
 800e830:	0800e8a9 	.word	0x0800e8a9
 800e834:	0800e891 	.word	0x0800e891
 800e838:	0800e8a9 	.word	0x0800e8a9
 800e83c:	0800e8a9 	.word	0x0800e8a9
 800e840:	0800e8a9 	.word	0x0800e8a9
 800e844:	0800e8a9 	.word	0x0800e8a9
 800e848:	0800e8a9 	.word	0x0800e8a9
 800e84c:	0800e8a9 	.word	0x0800e8a9
 800e850:	0800e8a9 	.word	0x0800e8a9
 800e854:	0800e899 	.word	0x0800e899
 800e858:	0800e8a9 	.word	0x0800e8a9
 800e85c:	0800e8a9 	.word	0x0800e8a9
 800e860:	0800e8a9 	.word	0x0800e8a9
 800e864:	0800e8a9 	.word	0x0800e8a9
 800e868:	0800e8a9 	.word	0x0800e8a9
 800e86c:	0800e8a9 	.word	0x0800e8a9
 800e870:	0800e8a9 	.word	0x0800e8a9
 800e874:	0800e8a1 	.word	0x0800e8a1
 800e878:	2301      	movs	r3, #1
 800e87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87e:	e222      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e880:	2304      	movs	r3, #4
 800e882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e886:	e21e      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e888:	2308      	movs	r3, #8
 800e88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e88e:	e21a      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e890:	2310      	movs	r3, #16
 800e892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e896:	e216      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e898:	2320      	movs	r3, #32
 800e89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e89e:	e212      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e8a0:	2340      	movs	r3, #64	; 0x40
 800e8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8a6:	e20e      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e8a8:	2380      	movs	r3, #128	; 0x80
 800e8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ae:	e20a      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a69      	ldr	r2, [pc, #420]	; (800ea5c <UART_SetConfig+0x33c>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d130      	bne.n	800e91c <UART_SetConfig+0x1fc>
 800e8ba:	4b67      	ldr	r3, [pc, #412]	; (800ea58 <UART_SetConfig+0x338>)
 800e8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8be:	f003 0307 	and.w	r3, r3, #7
 800e8c2:	2b05      	cmp	r3, #5
 800e8c4:	d826      	bhi.n	800e914 <UART_SetConfig+0x1f4>
 800e8c6:	a201      	add	r2, pc, #4	; (adr r2, 800e8cc <UART_SetConfig+0x1ac>)
 800e8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8cc:	0800e8e5 	.word	0x0800e8e5
 800e8d0:	0800e8ed 	.word	0x0800e8ed
 800e8d4:	0800e8f5 	.word	0x0800e8f5
 800e8d8:	0800e8fd 	.word	0x0800e8fd
 800e8dc:	0800e905 	.word	0x0800e905
 800e8e0:	0800e90d 	.word	0x0800e90d
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ea:	e1ec      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e8ec:	2304      	movs	r3, #4
 800e8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8f2:	e1e8      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e8f4:	2308      	movs	r3, #8
 800e8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8fa:	e1e4      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e8fc:	2310      	movs	r3, #16
 800e8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e902:	e1e0      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e904:	2320      	movs	r3, #32
 800e906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e90a:	e1dc      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e90c:	2340      	movs	r3, #64	; 0x40
 800e90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e912:	e1d8      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e914:	2380      	movs	r3, #128	; 0x80
 800e916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e91a:	e1d4      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4a4f      	ldr	r2, [pc, #316]	; (800ea60 <UART_SetConfig+0x340>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d130      	bne.n	800e988 <UART_SetConfig+0x268>
 800e926:	4b4c      	ldr	r3, [pc, #304]	; (800ea58 <UART_SetConfig+0x338>)
 800e928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e92a:	f003 0307 	and.w	r3, r3, #7
 800e92e:	2b05      	cmp	r3, #5
 800e930:	d826      	bhi.n	800e980 <UART_SetConfig+0x260>
 800e932:	a201      	add	r2, pc, #4	; (adr r2, 800e938 <UART_SetConfig+0x218>)
 800e934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e938:	0800e951 	.word	0x0800e951
 800e93c:	0800e959 	.word	0x0800e959
 800e940:	0800e961 	.word	0x0800e961
 800e944:	0800e969 	.word	0x0800e969
 800e948:	0800e971 	.word	0x0800e971
 800e94c:	0800e979 	.word	0x0800e979
 800e950:	2300      	movs	r3, #0
 800e952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e956:	e1b6      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e958:	2304      	movs	r3, #4
 800e95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e95e:	e1b2      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e960:	2308      	movs	r3, #8
 800e962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e966:	e1ae      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e968:	2310      	movs	r3, #16
 800e96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96e:	e1aa      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e970:	2320      	movs	r3, #32
 800e972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e976:	e1a6      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e978:	2340      	movs	r3, #64	; 0x40
 800e97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97e:	e1a2      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e980:	2380      	movs	r3, #128	; 0x80
 800e982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e986:	e19e      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	4a35      	ldr	r2, [pc, #212]	; (800ea64 <UART_SetConfig+0x344>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d130      	bne.n	800e9f4 <UART_SetConfig+0x2d4>
 800e992:	4b31      	ldr	r3, [pc, #196]	; (800ea58 <UART_SetConfig+0x338>)
 800e994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e996:	f003 0307 	and.w	r3, r3, #7
 800e99a:	2b05      	cmp	r3, #5
 800e99c:	d826      	bhi.n	800e9ec <UART_SetConfig+0x2cc>
 800e99e:	a201      	add	r2, pc, #4	; (adr r2, 800e9a4 <UART_SetConfig+0x284>)
 800e9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a4:	0800e9bd 	.word	0x0800e9bd
 800e9a8:	0800e9c5 	.word	0x0800e9c5
 800e9ac:	0800e9cd 	.word	0x0800e9cd
 800e9b0:	0800e9d5 	.word	0x0800e9d5
 800e9b4:	0800e9dd 	.word	0x0800e9dd
 800e9b8:	0800e9e5 	.word	0x0800e9e5
 800e9bc:	2300      	movs	r3, #0
 800e9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9c2:	e180      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e9c4:	2304      	movs	r3, #4
 800e9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ca:	e17c      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e9cc:	2308      	movs	r3, #8
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d2:	e178      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e9d4:	2310      	movs	r3, #16
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9da:	e174      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e9dc:	2320      	movs	r3, #32
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e2:	e170      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e9e4:	2340      	movs	r3, #64	; 0x40
 800e9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ea:	e16c      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e9ec:	2380      	movs	r3, #128	; 0x80
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9f2:	e168      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4a1b      	ldr	r2, [pc, #108]	; (800ea68 <UART_SetConfig+0x348>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d142      	bne.n	800ea84 <UART_SetConfig+0x364>
 800e9fe:	4b16      	ldr	r3, [pc, #88]	; (800ea58 <UART_SetConfig+0x338>)
 800ea00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea02:	f003 0307 	and.w	r3, r3, #7
 800ea06:	2b05      	cmp	r3, #5
 800ea08:	d838      	bhi.n	800ea7c <UART_SetConfig+0x35c>
 800ea0a:	a201      	add	r2, pc, #4	; (adr r2, 800ea10 <UART_SetConfig+0x2f0>)
 800ea0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea10:	0800ea29 	.word	0x0800ea29
 800ea14:	0800ea31 	.word	0x0800ea31
 800ea18:	0800ea39 	.word	0x0800ea39
 800ea1c:	0800ea41 	.word	0x0800ea41
 800ea20:	0800ea6d 	.word	0x0800ea6d
 800ea24:	0800ea75 	.word	0x0800ea75
 800ea28:	2300      	movs	r3, #0
 800ea2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea2e:	e14a      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ea30:	2304      	movs	r3, #4
 800ea32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea36:	e146      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ea38:	2308      	movs	r3, #8
 800ea3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea3e:	e142      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ea40:	2310      	movs	r3, #16
 800ea42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea46:	e13e      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ea48:	cfff69f3 	.word	0xcfff69f3
 800ea4c:	58000c00 	.word	0x58000c00
 800ea50:	11fff4ff 	.word	0x11fff4ff
 800ea54:	40011000 	.word	0x40011000
 800ea58:	58024400 	.word	0x58024400
 800ea5c:	40004400 	.word	0x40004400
 800ea60:	40004800 	.word	0x40004800
 800ea64:	40004c00 	.word	0x40004c00
 800ea68:	40005000 	.word	0x40005000
 800ea6c:	2320      	movs	r3, #32
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea72:	e128      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ea74:	2340      	movs	r3, #64	; 0x40
 800ea76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea7a:	e124      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ea7c:	2380      	movs	r3, #128	; 0x80
 800ea7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea82:	e120      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4acb      	ldr	r2, [pc, #812]	; (800edb8 <UART_SetConfig+0x698>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d176      	bne.n	800eb7c <UART_SetConfig+0x45c>
 800ea8e:	4bcb      	ldr	r3, [pc, #812]	; (800edbc <UART_SetConfig+0x69c>)
 800ea90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea96:	2b28      	cmp	r3, #40	; 0x28
 800ea98:	d86c      	bhi.n	800eb74 <UART_SetConfig+0x454>
 800ea9a:	a201      	add	r2, pc, #4	; (adr r2, 800eaa0 <UART_SetConfig+0x380>)
 800ea9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa0:	0800eb45 	.word	0x0800eb45
 800eaa4:	0800eb75 	.word	0x0800eb75
 800eaa8:	0800eb75 	.word	0x0800eb75
 800eaac:	0800eb75 	.word	0x0800eb75
 800eab0:	0800eb75 	.word	0x0800eb75
 800eab4:	0800eb75 	.word	0x0800eb75
 800eab8:	0800eb75 	.word	0x0800eb75
 800eabc:	0800eb75 	.word	0x0800eb75
 800eac0:	0800eb4d 	.word	0x0800eb4d
 800eac4:	0800eb75 	.word	0x0800eb75
 800eac8:	0800eb75 	.word	0x0800eb75
 800eacc:	0800eb75 	.word	0x0800eb75
 800ead0:	0800eb75 	.word	0x0800eb75
 800ead4:	0800eb75 	.word	0x0800eb75
 800ead8:	0800eb75 	.word	0x0800eb75
 800eadc:	0800eb75 	.word	0x0800eb75
 800eae0:	0800eb55 	.word	0x0800eb55
 800eae4:	0800eb75 	.word	0x0800eb75
 800eae8:	0800eb75 	.word	0x0800eb75
 800eaec:	0800eb75 	.word	0x0800eb75
 800eaf0:	0800eb75 	.word	0x0800eb75
 800eaf4:	0800eb75 	.word	0x0800eb75
 800eaf8:	0800eb75 	.word	0x0800eb75
 800eafc:	0800eb75 	.word	0x0800eb75
 800eb00:	0800eb5d 	.word	0x0800eb5d
 800eb04:	0800eb75 	.word	0x0800eb75
 800eb08:	0800eb75 	.word	0x0800eb75
 800eb0c:	0800eb75 	.word	0x0800eb75
 800eb10:	0800eb75 	.word	0x0800eb75
 800eb14:	0800eb75 	.word	0x0800eb75
 800eb18:	0800eb75 	.word	0x0800eb75
 800eb1c:	0800eb75 	.word	0x0800eb75
 800eb20:	0800eb65 	.word	0x0800eb65
 800eb24:	0800eb75 	.word	0x0800eb75
 800eb28:	0800eb75 	.word	0x0800eb75
 800eb2c:	0800eb75 	.word	0x0800eb75
 800eb30:	0800eb75 	.word	0x0800eb75
 800eb34:	0800eb75 	.word	0x0800eb75
 800eb38:	0800eb75 	.word	0x0800eb75
 800eb3c:	0800eb75 	.word	0x0800eb75
 800eb40:	0800eb6d 	.word	0x0800eb6d
 800eb44:	2301      	movs	r3, #1
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb4a:	e0bc      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800eb4c:	2304      	movs	r3, #4
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb52:	e0b8      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800eb54:	2308      	movs	r3, #8
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb5a:	e0b4      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800eb5c:	2310      	movs	r3, #16
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb62:	e0b0      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800eb64:	2320      	movs	r3, #32
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6a:	e0ac      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800eb6c:	2340      	movs	r3, #64	; 0x40
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb72:	e0a8      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800eb74:	2380      	movs	r3, #128	; 0x80
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb7a:	e0a4      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4a8f      	ldr	r2, [pc, #572]	; (800edc0 <UART_SetConfig+0x6a0>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d130      	bne.n	800ebe8 <UART_SetConfig+0x4c8>
 800eb86:	4b8d      	ldr	r3, [pc, #564]	; (800edbc <UART_SetConfig+0x69c>)
 800eb88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb8a:	f003 0307 	and.w	r3, r3, #7
 800eb8e:	2b05      	cmp	r3, #5
 800eb90:	d826      	bhi.n	800ebe0 <UART_SetConfig+0x4c0>
 800eb92:	a201      	add	r2, pc, #4	; (adr r2, 800eb98 <UART_SetConfig+0x478>)
 800eb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb98:	0800ebb1 	.word	0x0800ebb1
 800eb9c:	0800ebb9 	.word	0x0800ebb9
 800eba0:	0800ebc1 	.word	0x0800ebc1
 800eba4:	0800ebc9 	.word	0x0800ebc9
 800eba8:	0800ebd1 	.word	0x0800ebd1
 800ebac:	0800ebd9 	.word	0x0800ebd9
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebb6:	e086      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ebb8:	2304      	movs	r3, #4
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebbe:	e082      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ebc0:	2308      	movs	r3, #8
 800ebc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebc6:	e07e      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ebc8:	2310      	movs	r3, #16
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebce:	e07a      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ebd0:	2320      	movs	r3, #32
 800ebd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd6:	e076      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ebd8:	2340      	movs	r3, #64	; 0x40
 800ebda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebde:	e072      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ebe0:	2380      	movs	r3, #128	; 0x80
 800ebe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe6:	e06e      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4a75      	ldr	r2, [pc, #468]	; (800edc4 <UART_SetConfig+0x6a4>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d130      	bne.n	800ec54 <UART_SetConfig+0x534>
 800ebf2:	4b72      	ldr	r3, [pc, #456]	; (800edbc <UART_SetConfig+0x69c>)
 800ebf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebf6:	f003 0307 	and.w	r3, r3, #7
 800ebfa:	2b05      	cmp	r3, #5
 800ebfc:	d826      	bhi.n	800ec4c <UART_SetConfig+0x52c>
 800ebfe:	a201      	add	r2, pc, #4	; (adr r2, 800ec04 <UART_SetConfig+0x4e4>)
 800ec00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec04:	0800ec1d 	.word	0x0800ec1d
 800ec08:	0800ec25 	.word	0x0800ec25
 800ec0c:	0800ec2d 	.word	0x0800ec2d
 800ec10:	0800ec35 	.word	0x0800ec35
 800ec14:	0800ec3d 	.word	0x0800ec3d
 800ec18:	0800ec45 	.word	0x0800ec45
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec22:	e050      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ec24:	2304      	movs	r3, #4
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec2a:	e04c      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ec2c:	2308      	movs	r3, #8
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec32:	e048      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ec34:	2310      	movs	r3, #16
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3a:	e044      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ec3c:	2320      	movs	r3, #32
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec42:	e040      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ec44:	2340      	movs	r3, #64	; 0x40
 800ec46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4a:	e03c      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ec4c:	2380      	movs	r3, #128	; 0x80
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec52:	e038      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4a5b      	ldr	r2, [pc, #364]	; (800edc8 <UART_SetConfig+0x6a8>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d130      	bne.n	800ecc0 <UART_SetConfig+0x5a0>
 800ec5e:	4b57      	ldr	r3, [pc, #348]	; (800edbc <UART_SetConfig+0x69c>)
 800ec60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec62:	f003 0307 	and.w	r3, r3, #7
 800ec66:	2b05      	cmp	r3, #5
 800ec68:	d826      	bhi.n	800ecb8 <UART_SetConfig+0x598>
 800ec6a:	a201      	add	r2, pc, #4	; (adr r2, 800ec70 <UART_SetConfig+0x550>)
 800ec6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec70:	0800ec89 	.word	0x0800ec89
 800ec74:	0800ec91 	.word	0x0800ec91
 800ec78:	0800ec99 	.word	0x0800ec99
 800ec7c:	0800eca1 	.word	0x0800eca1
 800ec80:	0800eca9 	.word	0x0800eca9
 800ec84:	0800ecb1 	.word	0x0800ecb1
 800ec88:	2302      	movs	r3, #2
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8e:	e01a      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ec90:	2304      	movs	r3, #4
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec96:	e016      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ec98:	2308      	movs	r3, #8
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9e:	e012      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800eca0:	2310      	movs	r3, #16
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca6:	e00e      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800eca8:	2320      	movs	r3, #32
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecae:	e00a      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ecb0:	2340      	movs	r3, #64	; 0x40
 800ecb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb6:	e006      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ecb8:	2380      	movs	r3, #128	; 0x80
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecbe:	e002      	b.n	800ecc6 <UART_SetConfig+0x5a6>
 800ecc0:	2380      	movs	r3, #128	; 0x80
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a3f      	ldr	r2, [pc, #252]	; (800edc8 <UART_SetConfig+0x6a8>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	f040 80f8 	bne.w	800eec2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ecd2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ecd6:	2b20      	cmp	r3, #32
 800ecd8:	dc46      	bgt.n	800ed68 <UART_SetConfig+0x648>
 800ecda:	2b02      	cmp	r3, #2
 800ecdc:	f2c0 8082 	blt.w	800ede4 <UART_SetConfig+0x6c4>
 800ece0:	3b02      	subs	r3, #2
 800ece2:	2b1e      	cmp	r3, #30
 800ece4:	d87e      	bhi.n	800ede4 <UART_SetConfig+0x6c4>
 800ece6:	a201      	add	r2, pc, #4	; (adr r2, 800ecec <UART_SetConfig+0x5cc>)
 800ece8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecec:	0800ed6f 	.word	0x0800ed6f
 800ecf0:	0800ede5 	.word	0x0800ede5
 800ecf4:	0800ed77 	.word	0x0800ed77
 800ecf8:	0800ede5 	.word	0x0800ede5
 800ecfc:	0800ede5 	.word	0x0800ede5
 800ed00:	0800ede5 	.word	0x0800ede5
 800ed04:	0800ed87 	.word	0x0800ed87
 800ed08:	0800ede5 	.word	0x0800ede5
 800ed0c:	0800ede5 	.word	0x0800ede5
 800ed10:	0800ede5 	.word	0x0800ede5
 800ed14:	0800ede5 	.word	0x0800ede5
 800ed18:	0800ede5 	.word	0x0800ede5
 800ed1c:	0800ede5 	.word	0x0800ede5
 800ed20:	0800ede5 	.word	0x0800ede5
 800ed24:	0800ed97 	.word	0x0800ed97
 800ed28:	0800ede5 	.word	0x0800ede5
 800ed2c:	0800ede5 	.word	0x0800ede5
 800ed30:	0800ede5 	.word	0x0800ede5
 800ed34:	0800ede5 	.word	0x0800ede5
 800ed38:	0800ede5 	.word	0x0800ede5
 800ed3c:	0800ede5 	.word	0x0800ede5
 800ed40:	0800ede5 	.word	0x0800ede5
 800ed44:	0800ede5 	.word	0x0800ede5
 800ed48:	0800ede5 	.word	0x0800ede5
 800ed4c:	0800ede5 	.word	0x0800ede5
 800ed50:	0800ede5 	.word	0x0800ede5
 800ed54:	0800ede5 	.word	0x0800ede5
 800ed58:	0800ede5 	.word	0x0800ede5
 800ed5c:	0800ede5 	.word	0x0800ede5
 800ed60:	0800ede5 	.word	0x0800ede5
 800ed64:	0800edd7 	.word	0x0800edd7
 800ed68:	2b40      	cmp	r3, #64	; 0x40
 800ed6a:	d037      	beq.n	800eddc <UART_SetConfig+0x6bc>
 800ed6c:	e03a      	b.n	800ede4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ed6e:	f7fc f8ab 	bl	800aec8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ed72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed74:	e03c      	b.n	800edf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fc f8ba 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed84:	e034      	b.n	800edf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed86:	f107 0318 	add.w	r3, r7, #24
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fc fa06 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed94:	e02c      	b.n	800edf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed96:	4b09      	ldr	r3, [pc, #36]	; (800edbc <UART_SetConfig+0x69c>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f003 0320 	and.w	r3, r3, #32
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d016      	beq.n	800edd0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eda2:	4b06      	ldr	r3, [pc, #24]	; (800edbc <UART_SetConfig+0x69c>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	08db      	lsrs	r3, r3, #3
 800eda8:	f003 0303 	and.w	r3, r3, #3
 800edac:	4a07      	ldr	r2, [pc, #28]	; (800edcc <UART_SetConfig+0x6ac>)
 800edae:	fa22 f303 	lsr.w	r3, r2, r3
 800edb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edb4:	e01c      	b.n	800edf0 <UART_SetConfig+0x6d0>
 800edb6:	bf00      	nop
 800edb8:	40011400 	.word	0x40011400
 800edbc:	58024400 	.word	0x58024400
 800edc0:	40007800 	.word	0x40007800
 800edc4:	40007c00 	.word	0x40007c00
 800edc8:	58000c00 	.word	0x58000c00
 800edcc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800edd0:	4b9d      	ldr	r3, [pc, #628]	; (800f048 <UART_SetConfig+0x928>)
 800edd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edd4:	e00c      	b.n	800edf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800edd6:	4b9d      	ldr	r3, [pc, #628]	; (800f04c <UART_SetConfig+0x92c>)
 800edd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edda:	e009      	b.n	800edf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ede0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ede2:	e005      	b.n	800edf0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ede4:	2300      	movs	r3, #0
 800ede6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ede8:	2301      	movs	r3, #1
 800edea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800edee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800edf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f000 81de 	beq.w	800f1b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfc:	4a94      	ldr	r2, [pc, #592]	; (800f050 <UART_SetConfig+0x930>)
 800edfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee02:	461a      	mov	r2, r3
 800ee04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee06:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee0a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	685a      	ldr	r2, [r3, #4]
 800ee10:	4613      	mov	r3, r2
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	4413      	add	r3, r2
 800ee16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d305      	bcc.n	800ee28 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d903      	bls.n	800ee30 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee2e:	e1c1      	b.n	800f1b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee32:	2200      	movs	r2, #0
 800ee34:	60bb      	str	r3, [r7, #8]
 800ee36:	60fa      	str	r2, [r7, #12]
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee3c:	4a84      	ldr	r2, [pc, #528]	; (800f050 <UART_SetConfig+0x930>)
 800ee3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	2200      	movs	r2, #0
 800ee46:	603b      	str	r3, [r7, #0]
 800ee48:	607a      	str	r2, [r7, #4]
 800ee4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ee52:	f7f1 fa9d 	bl	8000390 <__aeabi_uldivmod>
 800ee56:	4602      	mov	r2, r0
 800ee58:	460b      	mov	r3, r1
 800ee5a:	4610      	mov	r0, r2
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	f04f 0200 	mov.w	r2, #0
 800ee62:	f04f 0300 	mov.w	r3, #0
 800ee66:	020b      	lsls	r3, r1, #8
 800ee68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee6c:	0202      	lsls	r2, r0, #8
 800ee6e:	6979      	ldr	r1, [r7, #20]
 800ee70:	6849      	ldr	r1, [r1, #4]
 800ee72:	0849      	lsrs	r1, r1, #1
 800ee74:	2000      	movs	r0, #0
 800ee76:	460c      	mov	r4, r1
 800ee78:	4605      	mov	r5, r0
 800ee7a:	eb12 0804 	adds.w	r8, r2, r4
 800ee7e:	eb43 0905 	adc.w	r9, r3, r5
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	469a      	mov	sl, r3
 800ee8a:	4693      	mov	fp, r2
 800ee8c:	4652      	mov	r2, sl
 800ee8e:	465b      	mov	r3, fp
 800ee90:	4640      	mov	r0, r8
 800ee92:	4649      	mov	r1, r9
 800ee94:	f7f1 fa7c 	bl	8000390 <__aeabi_uldivmod>
 800ee98:	4602      	mov	r2, r0
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eea6:	d308      	bcc.n	800eeba <UART_SetConfig+0x79a>
 800eea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eeae:	d204      	bcs.n	800eeba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eeb6:	60da      	str	r2, [r3, #12]
 800eeb8:	e17c      	b.n	800f1b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800eeba:	2301      	movs	r3, #1
 800eebc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eec0:	e178      	b.n	800f1b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	69db      	ldr	r3, [r3, #28]
 800eec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeca:	f040 80c5 	bne.w	800f058 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800eece:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eed2:	2b20      	cmp	r3, #32
 800eed4:	dc48      	bgt.n	800ef68 <UART_SetConfig+0x848>
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	db7b      	blt.n	800efd2 <UART_SetConfig+0x8b2>
 800eeda:	2b20      	cmp	r3, #32
 800eedc:	d879      	bhi.n	800efd2 <UART_SetConfig+0x8b2>
 800eede:	a201      	add	r2, pc, #4	; (adr r2, 800eee4 <UART_SetConfig+0x7c4>)
 800eee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee4:	0800ef6f 	.word	0x0800ef6f
 800eee8:	0800ef77 	.word	0x0800ef77
 800eeec:	0800efd3 	.word	0x0800efd3
 800eef0:	0800efd3 	.word	0x0800efd3
 800eef4:	0800ef7f 	.word	0x0800ef7f
 800eef8:	0800efd3 	.word	0x0800efd3
 800eefc:	0800efd3 	.word	0x0800efd3
 800ef00:	0800efd3 	.word	0x0800efd3
 800ef04:	0800ef8f 	.word	0x0800ef8f
 800ef08:	0800efd3 	.word	0x0800efd3
 800ef0c:	0800efd3 	.word	0x0800efd3
 800ef10:	0800efd3 	.word	0x0800efd3
 800ef14:	0800efd3 	.word	0x0800efd3
 800ef18:	0800efd3 	.word	0x0800efd3
 800ef1c:	0800efd3 	.word	0x0800efd3
 800ef20:	0800efd3 	.word	0x0800efd3
 800ef24:	0800ef9f 	.word	0x0800ef9f
 800ef28:	0800efd3 	.word	0x0800efd3
 800ef2c:	0800efd3 	.word	0x0800efd3
 800ef30:	0800efd3 	.word	0x0800efd3
 800ef34:	0800efd3 	.word	0x0800efd3
 800ef38:	0800efd3 	.word	0x0800efd3
 800ef3c:	0800efd3 	.word	0x0800efd3
 800ef40:	0800efd3 	.word	0x0800efd3
 800ef44:	0800efd3 	.word	0x0800efd3
 800ef48:	0800efd3 	.word	0x0800efd3
 800ef4c:	0800efd3 	.word	0x0800efd3
 800ef50:	0800efd3 	.word	0x0800efd3
 800ef54:	0800efd3 	.word	0x0800efd3
 800ef58:	0800efd3 	.word	0x0800efd3
 800ef5c:	0800efd3 	.word	0x0800efd3
 800ef60:	0800efd3 	.word	0x0800efd3
 800ef64:	0800efc5 	.word	0x0800efc5
 800ef68:	2b40      	cmp	r3, #64	; 0x40
 800ef6a:	d02e      	beq.n	800efca <UART_SetConfig+0x8aa>
 800ef6c:	e031      	b.n	800efd2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef6e:	f7f9 fff5 	bl	8008f5c <HAL_RCC_GetPCLK1Freq>
 800ef72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef74:	e033      	b.n	800efde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef76:	f7fa f807 	bl	8008f88 <HAL_RCC_GetPCLK2Freq>
 800ef7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef7c:	e02f      	b.n	800efde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fb ffb6 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef8c:	e027      	b.n	800efde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef8e:	f107 0318 	add.w	r3, r7, #24
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fc f902 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef9c:	e01f      	b.n	800efde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef9e:	4b2d      	ldr	r3, [pc, #180]	; (800f054 <UART_SetConfig+0x934>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f003 0320 	and.w	r3, r3, #32
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d009      	beq.n	800efbe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efaa:	4b2a      	ldr	r3, [pc, #168]	; (800f054 <UART_SetConfig+0x934>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	08db      	lsrs	r3, r3, #3
 800efb0:	f003 0303 	and.w	r3, r3, #3
 800efb4:	4a24      	ldr	r2, [pc, #144]	; (800f048 <UART_SetConfig+0x928>)
 800efb6:	fa22 f303 	lsr.w	r3, r2, r3
 800efba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efbc:	e00f      	b.n	800efde <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800efbe:	4b22      	ldr	r3, [pc, #136]	; (800f048 <UART_SetConfig+0x928>)
 800efc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efc2:	e00c      	b.n	800efde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efc4:	4b21      	ldr	r3, [pc, #132]	; (800f04c <UART_SetConfig+0x92c>)
 800efc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efc8:	e009      	b.n	800efde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efd0:	e005      	b.n	800efde <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800efd2:	2300      	movs	r3, #0
 800efd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800efd6:	2301      	movs	r3, #1
 800efd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800efdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800efde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	f000 80e7 	beq.w	800f1b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efea:	4a19      	ldr	r2, [pc, #100]	; (800f050 <UART_SetConfig+0x930>)
 800efec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eff0:	461a      	mov	r2, r3
 800eff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eff4:	fbb3 f3f2 	udiv	r3, r3, r2
 800eff8:	005a      	lsls	r2, r3, #1
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	085b      	lsrs	r3, r3, #1
 800f000:	441a      	add	r2, r3
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	fbb2 f3f3 	udiv	r3, r2, r3
 800f00a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	2b0f      	cmp	r3, #15
 800f010:	d916      	bls.n	800f040 <UART_SetConfig+0x920>
 800f012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f018:	d212      	bcs.n	800f040 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	f023 030f 	bic.w	r3, r3, #15
 800f022:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f026:	085b      	lsrs	r3, r3, #1
 800f028:	b29b      	uxth	r3, r3
 800f02a:	f003 0307 	and.w	r3, r3, #7
 800f02e:	b29a      	uxth	r2, r3
 800f030:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f032:	4313      	orrs	r3, r2
 800f034:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f03c:	60da      	str	r2, [r3, #12]
 800f03e:	e0b9      	b.n	800f1b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f040:	2301      	movs	r3, #1
 800f042:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f046:	e0b5      	b.n	800f1b4 <UART_SetConfig+0xa94>
 800f048:	03d09000 	.word	0x03d09000
 800f04c:	003d0900 	.word	0x003d0900
 800f050:	08012a20 	.word	0x08012a20
 800f054:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f058:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f05c:	2b20      	cmp	r3, #32
 800f05e:	dc49      	bgt.n	800f0f4 <UART_SetConfig+0x9d4>
 800f060:	2b00      	cmp	r3, #0
 800f062:	db7c      	blt.n	800f15e <UART_SetConfig+0xa3e>
 800f064:	2b20      	cmp	r3, #32
 800f066:	d87a      	bhi.n	800f15e <UART_SetConfig+0xa3e>
 800f068:	a201      	add	r2, pc, #4	; (adr r2, 800f070 <UART_SetConfig+0x950>)
 800f06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f06e:	bf00      	nop
 800f070:	0800f0fb 	.word	0x0800f0fb
 800f074:	0800f103 	.word	0x0800f103
 800f078:	0800f15f 	.word	0x0800f15f
 800f07c:	0800f15f 	.word	0x0800f15f
 800f080:	0800f10b 	.word	0x0800f10b
 800f084:	0800f15f 	.word	0x0800f15f
 800f088:	0800f15f 	.word	0x0800f15f
 800f08c:	0800f15f 	.word	0x0800f15f
 800f090:	0800f11b 	.word	0x0800f11b
 800f094:	0800f15f 	.word	0x0800f15f
 800f098:	0800f15f 	.word	0x0800f15f
 800f09c:	0800f15f 	.word	0x0800f15f
 800f0a0:	0800f15f 	.word	0x0800f15f
 800f0a4:	0800f15f 	.word	0x0800f15f
 800f0a8:	0800f15f 	.word	0x0800f15f
 800f0ac:	0800f15f 	.word	0x0800f15f
 800f0b0:	0800f12b 	.word	0x0800f12b
 800f0b4:	0800f15f 	.word	0x0800f15f
 800f0b8:	0800f15f 	.word	0x0800f15f
 800f0bc:	0800f15f 	.word	0x0800f15f
 800f0c0:	0800f15f 	.word	0x0800f15f
 800f0c4:	0800f15f 	.word	0x0800f15f
 800f0c8:	0800f15f 	.word	0x0800f15f
 800f0cc:	0800f15f 	.word	0x0800f15f
 800f0d0:	0800f15f 	.word	0x0800f15f
 800f0d4:	0800f15f 	.word	0x0800f15f
 800f0d8:	0800f15f 	.word	0x0800f15f
 800f0dc:	0800f15f 	.word	0x0800f15f
 800f0e0:	0800f15f 	.word	0x0800f15f
 800f0e4:	0800f15f 	.word	0x0800f15f
 800f0e8:	0800f15f 	.word	0x0800f15f
 800f0ec:	0800f15f 	.word	0x0800f15f
 800f0f0:	0800f151 	.word	0x0800f151
 800f0f4:	2b40      	cmp	r3, #64	; 0x40
 800f0f6:	d02e      	beq.n	800f156 <UART_SetConfig+0xa36>
 800f0f8:	e031      	b.n	800f15e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0fa:	f7f9 ff2f 	bl	8008f5c <HAL_RCC_GetPCLK1Freq>
 800f0fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f100:	e033      	b.n	800f16a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f102:	f7f9 ff41 	bl	8008f88 <HAL_RCC_GetPCLK2Freq>
 800f106:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f108:	e02f      	b.n	800f16a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f10a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f10e:	4618      	mov	r0, r3
 800f110:	f7fb fef0 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f118:	e027      	b.n	800f16a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f11a:	f107 0318 	add.w	r3, r7, #24
 800f11e:	4618      	mov	r0, r3
 800f120:	f7fc f83c 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f124:	69fb      	ldr	r3, [r7, #28]
 800f126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f128:	e01f      	b.n	800f16a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f12a:	4b2d      	ldr	r3, [pc, #180]	; (800f1e0 <UART_SetConfig+0xac0>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f003 0320 	and.w	r3, r3, #32
 800f132:	2b00      	cmp	r3, #0
 800f134:	d009      	beq.n	800f14a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f136:	4b2a      	ldr	r3, [pc, #168]	; (800f1e0 <UART_SetConfig+0xac0>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	08db      	lsrs	r3, r3, #3
 800f13c:	f003 0303 	and.w	r3, r3, #3
 800f140:	4a28      	ldr	r2, [pc, #160]	; (800f1e4 <UART_SetConfig+0xac4>)
 800f142:	fa22 f303 	lsr.w	r3, r2, r3
 800f146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f148:	e00f      	b.n	800f16a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f14a:	4b26      	ldr	r3, [pc, #152]	; (800f1e4 <UART_SetConfig+0xac4>)
 800f14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f14e:	e00c      	b.n	800f16a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f150:	4b25      	ldr	r3, [pc, #148]	; (800f1e8 <UART_SetConfig+0xac8>)
 800f152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f154:	e009      	b.n	800f16a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f15c:	e005      	b.n	800f16a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f15e:	2300      	movs	r3, #0
 800f160:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f162:	2301      	movs	r3, #1
 800f164:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f168:	bf00      	nop
    }

    if (pclk != 0U)
 800f16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d021      	beq.n	800f1b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f174:	4a1d      	ldr	r2, [pc, #116]	; (800f1ec <UART_SetConfig+0xacc>)
 800f176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f17a:	461a      	mov	r2, r3
 800f17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f17e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	085b      	lsrs	r3, r3, #1
 800f188:	441a      	add	r2, r3
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f192:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f196:	2b0f      	cmp	r3, #15
 800f198:	d909      	bls.n	800f1ae <UART_SetConfig+0xa8e>
 800f19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1a0:	d205      	bcs.n	800f1ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	60da      	str	r2, [r3, #12]
 800f1ac:	e002      	b.n	800f1b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f1d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3748      	adds	r7, #72	; 0x48
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1de:	bf00      	nop
 800f1e0:	58024400 	.word	0x58024400
 800f1e4:	03d09000 	.word	0x03d09000
 800f1e8:	003d0900 	.word	0x003d0900
 800f1ec:	08012a20 	.word	0x08012a20

0800f1f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1fc:	f003 0301 	and.w	r3, r3, #1
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00a      	beq.n	800f21a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	430a      	orrs	r2, r1
 800f218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f21e:	f003 0302 	and.w	r3, r3, #2
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00a      	beq.n	800f23c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	430a      	orrs	r2, r1
 800f23a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f240:	f003 0304 	and.w	r3, r3, #4
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00a      	beq.n	800f25e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	430a      	orrs	r2, r1
 800f25c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f262:	f003 0308 	and.w	r3, r3, #8
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00a      	beq.n	800f280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	430a      	orrs	r2, r1
 800f27e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f284:	f003 0310 	and.w	r3, r3, #16
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00a      	beq.n	800f2a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	689b      	ldr	r3, [r3, #8]
 800f292:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	430a      	orrs	r2, r1
 800f2a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a6:	f003 0320 	and.w	r3, r3, #32
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00a      	beq.n	800f2c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	430a      	orrs	r2, r1
 800f2c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d01a      	beq.n	800f306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	430a      	orrs	r2, r1
 800f2e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2ee:	d10a      	bne.n	800f306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	430a      	orrs	r2, r1
 800f304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00a      	beq.n	800f328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	430a      	orrs	r2, r1
 800f326:	605a      	str	r2, [r3, #4]
  }
}
 800f328:	bf00      	nop
 800f32a:	370c      	adds	r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr

0800f334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b098      	sub	sp, #96	; 0x60
 800f338:	af02      	add	r7, sp, #8
 800f33a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f344:	f7f3 fc94 	bl	8002c70 <HAL_GetTick>
 800f348:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f003 0308 	and.w	r3, r3, #8
 800f354:	2b08      	cmp	r3, #8
 800f356:	d12f      	bne.n	800f3b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f35c:	9300      	str	r3, [sp, #0]
 800f35e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f360:	2200      	movs	r2, #0
 800f362:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 f88e 	bl	800f488 <UART_WaitOnFlagUntilTimeout>
 800f36c:	4603      	mov	r3, r0
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d022      	beq.n	800f3b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f37a:	e853 3f00 	ldrex	r3, [r3]
 800f37e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f386:	653b      	str	r3, [r7, #80]	; 0x50
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	461a      	mov	r2, r3
 800f38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f390:	647b      	str	r3, [r7, #68]	; 0x44
 800f392:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f394:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f398:	e841 2300 	strex	r3, r2, [r1]
 800f39c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d1e6      	bne.n	800f372 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2220      	movs	r2, #32
 800f3a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3b4:	2303      	movs	r3, #3
 800f3b6:	e063      	b.n	800f480 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f003 0304 	and.w	r3, r3, #4
 800f3c2:	2b04      	cmp	r3, #4
 800f3c4:	d149      	bne.n	800f45a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3ca:	9300      	str	r3, [sp, #0]
 800f3cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 f857 	bl	800f488 <UART_WaitOnFlagUntilTimeout>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d03c      	beq.n	800f45a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e8:	e853 3f00 	ldrex	r3, [r3]
 800f3ec:	623b      	str	r3, [r7, #32]
   return(result);
 800f3ee:	6a3b      	ldr	r3, [r7, #32]
 800f3f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f3f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3fe:	633b      	str	r3, [r7, #48]	; 0x30
 800f400:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f406:	e841 2300 	strex	r3, r2, [r1]
 800f40a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d1e6      	bne.n	800f3e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	3308      	adds	r3, #8
 800f418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	e853 3f00 	ldrex	r3, [r3]
 800f420:	60fb      	str	r3, [r7, #12]
   return(result);
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f023 0301 	bic.w	r3, r3, #1
 800f428:	64bb      	str	r3, [r7, #72]	; 0x48
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3308      	adds	r3, #8
 800f430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f432:	61fa      	str	r2, [r7, #28]
 800f434:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f436:	69b9      	ldr	r1, [r7, #24]
 800f438:	69fa      	ldr	r2, [r7, #28]
 800f43a:	e841 2300 	strex	r3, r2, [r1]
 800f43e:	617b      	str	r3, [r7, #20]
   return(result);
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1e5      	bne.n	800f412 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2220      	movs	r2, #32
 800f44a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2200      	movs	r2, #0
 800f452:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f456:	2303      	movs	r3, #3
 800f458:	e012      	b.n	800f480 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2220      	movs	r2, #32
 800f45e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2220      	movs	r2, #32
 800f466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2200      	movs	r2, #0
 800f46e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2200      	movs	r2, #0
 800f474:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2200      	movs	r2, #0
 800f47a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f47e:	2300      	movs	r3, #0
}
 800f480:	4618      	mov	r0, r3
 800f482:	3758      	adds	r7, #88	; 0x58
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b084      	sub	sp, #16
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	60b9      	str	r1, [r7, #8]
 800f492:	603b      	str	r3, [r7, #0]
 800f494:	4613      	mov	r3, r2
 800f496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f498:	e049      	b.n	800f52e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4a0:	d045      	beq.n	800f52e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4a2:	f7f3 fbe5 	bl	8002c70 <HAL_GetTick>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	69ba      	ldr	r2, [r7, #24]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d302      	bcc.n	800f4b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d101      	bne.n	800f4bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f4b8:	2303      	movs	r3, #3
 800f4ba:	e048      	b.n	800f54e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f003 0304 	and.w	r3, r3, #4
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d031      	beq.n	800f52e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	69db      	ldr	r3, [r3, #28]
 800f4d0:	f003 0308 	and.w	r3, r3, #8
 800f4d4:	2b08      	cmp	r3, #8
 800f4d6:	d110      	bne.n	800f4fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2208      	movs	r2, #8
 800f4de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f000 f921 	bl	800f728 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2208      	movs	r2, #8
 800f4ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	e029      	b.n	800f54e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	69db      	ldr	r3, [r3, #28]
 800f500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f508:	d111      	bne.n	800f52e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f000 f907 	bl	800f728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2220      	movs	r2, #32
 800f51e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2200      	movs	r2, #0
 800f526:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f52a:	2303      	movs	r3, #3
 800f52c:	e00f      	b.n	800f54e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	69da      	ldr	r2, [r3, #28]
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	4013      	ands	r3, r2
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	bf0c      	ite	eq
 800f53e:	2301      	moveq	r3, #1
 800f540:	2300      	movne	r3, #0
 800f542:	b2db      	uxtb	r3, r3
 800f544:	461a      	mov	r2, r3
 800f546:	79fb      	ldrb	r3, [r7, #7]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d0a6      	beq.n	800f49a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f54c:	2300      	movs	r3, #0
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
	...

0800f558 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b096      	sub	sp, #88	; 0x58
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	4613      	mov	r3, r2
 800f564:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	68ba      	ldr	r2, [r7, #8]
 800f56a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	88fa      	ldrh	r2, [r7, #6]
 800f570:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2200      	movs	r2, #0
 800f578:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2222      	movs	r2, #34	; 0x22
 800f580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d02d      	beq.n	800f5ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f594:	4a40      	ldr	r2, [pc, #256]	; (800f698 <UART_Start_Receive_DMA+0x140>)
 800f596:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f59e:	4a3f      	ldr	r2, [pc, #252]	; (800f69c <UART_Start_Receive_DMA+0x144>)
 800f5a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5a8:	4a3d      	ldr	r2, [pc, #244]	; (800f6a0 <UART_Start_Receive_DMA+0x148>)
 800f5aa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	3324      	adds	r3, #36	; 0x24
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	88fb      	ldrh	r3, [r7, #6]
 800f5cc:	f7f5 fd78 	bl	80050c0 <HAL_DMA_Start_IT>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d009      	beq.n	800f5ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2210      	movs	r2, #16
 800f5da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2220      	movs	r2, #32
 800f5e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	e051      	b.n	800f68e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	691b      	ldr	r3, [r3, #16]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d018      	beq.n	800f624 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5fa:	e853 3f00 	ldrex	r3, [r3]
 800f5fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f606:	657b      	str	r3, [r7, #84]	; 0x54
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	461a      	mov	r2, r3
 800f60e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f610:	64bb      	str	r3, [r7, #72]	; 0x48
 800f612:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f614:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f618:	e841 2300 	strex	r3, r2, [r1]
 800f61c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1e6      	bne.n	800f5f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	3308      	adds	r3, #8
 800f62a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62e:	e853 3f00 	ldrex	r3, [r3]
 800f632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f636:	f043 0301 	orr.w	r3, r3, #1
 800f63a:	653b      	str	r3, [r7, #80]	; 0x50
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	3308      	adds	r3, #8
 800f642:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f644:	637a      	str	r2, [r7, #52]	; 0x34
 800f646:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f64a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f64c:	e841 2300 	strex	r3, r2, [r1]
 800f650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f654:	2b00      	cmp	r3, #0
 800f656:	d1e5      	bne.n	800f624 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	3308      	adds	r3, #8
 800f65e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	e853 3f00 	ldrex	r3, [r3]
 800f666:	613b      	str	r3, [r7, #16]
   return(result);
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f66e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	3308      	adds	r3, #8
 800f676:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f678:	623a      	str	r2, [r7, #32]
 800f67a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f67c:	69f9      	ldr	r1, [r7, #28]
 800f67e:	6a3a      	ldr	r2, [r7, #32]
 800f680:	e841 2300 	strex	r3, r2, [r1]
 800f684:	61bb      	str	r3, [r7, #24]
   return(result);
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d1e5      	bne.n	800f658 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f68c:	2300      	movs	r3, #0
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3758      	adds	r7, #88	; 0x58
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	0800f7f5 	.word	0x0800f7f5
 800f69c:	0800f91d 	.word	0x0800f91d
 800f6a0:	0800f95b 	.word	0x0800f95b

0800f6a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b08f      	sub	sp, #60	; 0x3c
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b2:	6a3b      	ldr	r3, [r7, #32]
 800f6b4:	e853 3f00 	ldrex	r3, [r3]
 800f6b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f6c0:	637b      	str	r3, [r7, #52]	; 0x34
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6d2:	e841 2300 	strex	r3, r2, [r1]
 800f6d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1e6      	bne.n	800f6ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	3308      	adds	r3, #8
 800f6e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	e853 3f00 	ldrex	r3, [r3]
 800f6ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f6f4:	633b      	str	r3, [r7, #48]	; 0x30
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	3308      	adds	r3, #8
 800f6fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6fe:	61ba      	str	r2, [r7, #24]
 800f700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f702:	6979      	ldr	r1, [r7, #20]
 800f704:	69ba      	ldr	r2, [r7, #24]
 800f706:	e841 2300 	strex	r3, r2, [r1]
 800f70a:	613b      	str	r3, [r7, #16]
   return(result);
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d1e5      	bne.n	800f6de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2220      	movs	r2, #32
 800f716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f71a:	bf00      	nop
 800f71c:	373c      	adds	r7, #60	; 0x3c
 800f71e:	46bd      	mov	sp, r7
 800f720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f724:	4770      	bx	lr
	...

0800f728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f728:	b480      	push	{r7}
 800f72a:	b095      	sub	sp, #84	; 0x54
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f738:	e853 3f00 	ldrex	r3, [r3]
 800f73c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f744:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	461a      	mov	r2, r3
 800f74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f74e:	643b      	str	r3, [r7, #64]	; 0x40
 800f750:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f756:	e841 2300 	strex	r3, r2, [r1]
 800f75a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1e6      	bne.n	800f730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	3308      	adds	r3, #8
 800f768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f76a:	6a3b      	ldr	r3, [r7, #32]
 800f76c:	e853 3f00 	ldrex	r3, [r3]
 800f770:	61fb      	str	r3, [r7, #28]
   return(result);
 800f772:	69fa      	ldr	r2, [r7, #28]
 800f774:	4b1e      	ldr	r3, [pc, #120]	; (800f7f0 <UART_EndRxTransfer+0xc8>)
 800f776:	4013      	ands	r3, r2
 800f778:	64bb      	str	r3, [r7, #72]	; 0x48
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	3308      	adds	r3, #8
 800f780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f782:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f784:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f78a:	e841 2300 	strex	r3, r2, [r1]
 800f78e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f792:	2b00      	cmp	r3, #0
 800f794:	d1e5      	bne.n	800f762 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d118      	bne.n	800f7d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	e853 3f00 	ldrex	r3, [r3]
 800f7aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	f023 0310 	bic.w	r3, r3, #16
 800f7b2:	647b      	str	r3, [r7, #68]	; 0x44
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	461a      	mov	r2, r3
 800f7ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7bc:	61bb      	str	r3, [r7, #24]
 800f7be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c0:	6979      	ldr	r1, [r7, #20]
 800f7c2:	69ba      	ldr	r2, [r7, #24]
 800f7c4:	e841 2300 	strex	r3, r2, [r1]
 800f7c8:	613b      	str	r3, [r7, #16]
   return(result);
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d1e6      	bne.n	800f79e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2220      	movs	r2, #32
 800f7d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f7e4:	bf00      	nop
 800f7e6:	3754      	adds	r7, #84	; 0x54
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr
 800f7f0:	effffffe 	.word	0xeffffffe

0800f7f4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b09c      	sub	sp, #112	; 0x70
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f800:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	69db      	ldr	r3, [r3, #28]
 800f806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f80a:	d071      	beq.n	800f8f0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f80c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f80e:	2200      	movs	r2, #0
 800f810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f81c:	e853 3f00 	ldrex	r3, [r3]
 800f820:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f828:	66bb      	str	r3, [r7, #104]	; 0x68
 800f82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	461a      	mov	r2, r3
 800f830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f832:	65bb      	str	r3, [r7, #88]	; 0x58
 800f834:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f836:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f838:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f83a:	e841 2300 	strex	r3, r2, [r1]
 800f83e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f842:	2b00      	cmp	r3, #0
 800f844:	d1e6      	bne.n	800f814 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	3308      	adds	r3, #8
 800f84c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f850:	e853 3f00 	ldrex	r3, [r3]
 800f854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f858:	f023 0301 	bic.w	r3, r3, #1
 800f85c:	667b      	str	r3, [r7, #100]	; 0x64
 800f85e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	3308      	adds	r3, #8
 800f864:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f866:	647a      	str	r2, [r7, #68]	; 0x44
 800f868:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f86a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f86c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f86e:	e841 2300 	strex	r3, r2, [r1]
 800f872:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f876:	2b00      	cmp	r3, #0
 800f878:	d1e5      	bne.n	800f846 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f87a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	3308      	adds	r3, #8
 800f880:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f884:	e853 3f00 	ldrex	r3, [r3]
 800f888:	623b      	str	r3, [r7, #32]
   return(result);
 800f88a:	6a3b      	ldr	r3, [r7, #32]
 800f88c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f890:	663b      	str	r3, [r7, #96]	; 0x60
 800f892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	3308      	adds	r3, #8
 800f898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f89a:	633a      	str	r2, [r7, #48]	; 0x30
 800f89c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f89e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8a2:	e841 2300 	strex	r3, r2, [r1]
 800f8a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d1e5      	bne.n	800f87a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f8ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8b0:	2220      	movs	r2, #32
 800f8b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d118      	bne.n	800f8f0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	e853 3f00 	ldrex	r3, [r3]
 800f8ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f023 0310 	bic.w	r3, r3, #16
 800f8d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8dc:	61fb      	str	r3, [r7, #28]
 800f8de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8e0:	69b9      	ldr	r1, [r7, #24]
 800f8e2:	69fa      	ldr	r2, [r7, #28]
 800f8e4:	e841 2300 	strex	r3, r2, [r1]
 800f8e8:	617b      	str	r3, [r7, #20]
   return(result);
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d1e6      	bne.n	800f8be <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d107      	bne.n	800f90e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f904:	4619      	mov	r1, r3
 800f906:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f908:	f7fe fefe 	bl	800e708 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f90c:	e002      	b.n	800f914 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f90e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f910:	f7f1 fd9a 	bl	8001448 <HAL_UART_RxCpltCallback>
}
 800f914:	bf00      	nop
 800f916:	3770      	adds	r7, #112	; 0x70
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b084      	sub	sp, #16
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f928:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2201      	movs	r2, #1
 800f92e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f934:	2b01      	cmp	r3, #1
 800f936:	d109      	bne.n	800f94c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f93e:	085b      	lsrs	r3, r3, #1
 800f940:	b29b      	uxth	r3, r3
 800f942:	4619      	mov	r1, r3
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f7fe fedf 	bl	800e708 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f94a:	e002      	b.n	800f952 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f94c:	68f8      	ldr	r0, [r7, #12]
 800f94e:	f7fe fed1 	bl	800e6f4 <HAL_UART_RxHalfCpltCallback>
}
 800f952:	bf00      	nop
 800f954:	3710      	adds	r7, #16
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}

0800f95a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f95a:	b580      	push	{r7, lr}
 800f95c:	b086      	sub	sp, #24
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f966:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f96e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f976:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f982:	2b80      	cmp	r3, #128	; 0x80
 800f984:	d109      	bne.n	800f99a <UART_DMAError+0x40>
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	2b21      	cmp	r3, #33	; 0x21
 800f98a:	d106      	bne.n	800f99a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	2200      	movs	r2, #0
 800f990:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f994:	6978      	ldr	r0, [r7, #20]
 800f996:	f7ff fe85 	bl	800f6a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9a4:	2b40      	cmp	r3, #64	; 0x40
 800f9a6:	d109      	bne.n	800f9bc <UART_DMAError+0x62>
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2b22      	cmp	r3, #34	; 0x22
 800f9ac:	d106      	bne.n	800f9bc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f9b6:	6978      	ldr	r0, [r7, #20]
 800f9b8:	f7ff feb6 	bl	800f728 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9c2:	f043 0210 	orr.w	r2, r3, #16
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9cc:	6978      	ldr	r0, [r7, #20]
 800f9ce:	f7f1 fddd 	bl	800158c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9d2:	bf00      	nop
 800f9d4:	3718      	adds	r7, #24
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}

0800f9da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f9da:	b580      	push	{r7, lr}
 800f9dc:	b084      	sub	sp, #16
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9f8:	68f8      	ldr	r0, [r7, #12]
 800f9fa:	f7f1 fdc7 	bl	800158c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9fe:	bf00      	nop
 800fa00:	3710      	adds	r7, #16
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b088      	sub	sp, #32
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	e853 3f00 	ldrex	r3, [r3]
 800fa1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa22:	61fb      	str	r3, [r7, #28]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	461a      	mov	r2, r3
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	61bb      	str	r3, [r7, #24]
 800fa2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa30:	6979      	ldr	r1, [r7, #20]
 800fa32:	69ba      	ldr	r2, [r7, #24]
 800fa34:	e841 2300 	strex	r3, r2, [r1]
 800fa38:	613b      	str	r3, [r7, #16]
   return(result);
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d1e6      	bne.n	800fa0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2220      	movs	r2, #32
 800fa44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f7fe fe46 	bl	800e6e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa54:	bf00      	nop
 800fa56:	3720      	adds	r7, #32
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fa64:	bf00      	nop
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fa78:	bf00      	nop
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fa8c:	bf00      	nop
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b085      	sub	sp, #20
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800faa6:	2b01      	cmp	r3, #1
 800faa8:	d101      	bne.n	800faae <HAL_UARTEx_DisableFifoMode+0x16>
 800faaa:	2302      	movs	r3, #2
 800faac:	e027      	b.n	800fafe <HAL_UARTEx_DisableFifoMode+0x66>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2201      	movs	r2, #1
 800fab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2224      	movs	r2, #36	; 0x24
 800faba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	681a      	ldr	r2, [r3, #0]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f022 0201 	bic.w	r2, r2, #1
 800fad4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fadc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2200      	movs	r2, #0
 800fae2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	68fa      	ldr	r2, [r7, #12]
 800faea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2220      	movs	r2, #32
 800faf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fafc:	2300      	movs	r3, #0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3714      	adds	r7, #20
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr

0800fb0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b084      	sub	sp, #16
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
 800fb12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d101      	bne.n	800fb22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fb1e:	2302      	movs	r3, #2
 800fb20:	e02d      	b.n	800fb7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2201      	movs	r2, #1
 800fb26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2224      	movs	r2, #36	; 0x24
 800fb2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f022 0201 	bic.w	r2, r2, #1
 800fb48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	683a      	ldr	r2, [r7, #0]
 800fb5a:	430a      	orrs	r2, r1
 800fb5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 f850 	bl	800fc04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2220      	movs	r2, #32
 800fb70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b084      	sub	sp, #16
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
 800fb8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	d101      	bne.n	800fb9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fb9a:	2302      	movs	r3, #2
 800fb9c:	e02d      	b.n	800fbfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2201      	movs	r2, #1
 800fba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2224      	movs	r2, #36	; 0x24
 800fbaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f022 0201 	bic.w	r2, r2, #1
 800fbc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	689b      	ldr	r3, [r3, #8]
 800fbcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	683a      	ldr	r2, [r7, #0]
 800fbd6:	430a      	orrs	r2, r1
 800fbd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f000 f812 	bl	800fc04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2220      	movs	r2, #32
 800fbec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3710      	adds	r7, #16
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
	...

0800fc04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b085      	sub	sp, #20
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d108      	bne.n	800fc26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2201      	movs	r2, #1
 800fc18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2201      	movs	r2, #1
 800fc20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fc24:	e031      	b.n	800fc8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fc26:	2310      	movs	r3, #16
 800fc28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fc2a:	2310      	movs	r3, #16
 800fc2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	689b      	ldr	r3, [r3, #8]
 800fc34:	0e5b      	lsrs	r3, r3, #25
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	f003 0307 	and.w	r3, r3, #7
 800fc3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	0f5b      	lsrs	r3, r3, #29
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	f003 0307 	and.w	r3, r3, #7
 800fc4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fc4e:	7bbb      	ldrb	r3, [r7, #14]
 800fc50:	7b3a      	ldrb	r2, [r7, #12]
 800fc52:	4911      	ldr	r1, [pc, #68]	; (800fc98 <UARTEx_SetNbDataToProcess+0x94>)
 800fc54:	5c8a      	ldrb	r2, [r1, r2]
 800fc56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fc5a:	7b3a      	ldrb	r2, [r7, #12]
 800fc5c:	490f      	ldr	r1, [pc, #60]	; (800fc9c <UARTEx_SetNbDataToProcess+0x98>)
 800fc5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fc60:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc64:	b29a      	uxth	r2, r3
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fc6c:	7bfb      	ldrb	r3, [r7, #15]
 800fc6e:	7b7a      	ldrb	r2, [r7, #13]
 800fc70:	4909      	ldr	r1, [pc, #36]	; (800fc98 <UARTEx_SetNbDataToProcess+0x94>)
 800fc72:	5c8a      	ldrb	r2, [r1, r2]
 800fc74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fc78:	7b7a      	ldrb	r2, [r7, #13]
 800fc7a:	4908      	ldr	r1, [pc, #32]	; (800fc9c <UARTEx_SetNbDataToProcess+0x98>)
 800fc7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fc7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fc8a:	bf00      	nop
 800fc8c:	3714      	adds	r7, #20
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr
 800fc96:	bf00      	nop
 800fc98:	08012a38 	.word	0x08012a38
 800fc9c:	08012a40 	.word	0x08012a40

0800fca0 <__cvt>:
 800fca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fca2:	ed2d 8b02 	vpush	{d8}
 800fca6:	eeb0 8b40 	vmov.f64	d8, d0
 800fcaa:	b085      	sub	sp, #20
 800fcac:	4617      	mov	r7, r2
 800fcae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fcb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fcb2:	ee18 2a90 	vmov	r2, s17
 800fcb6:	f025 0520 	bic.w	r5, r5, #32
 800fcba:	2a00      	cmp	r2, #0
 800fcbc:	bfb6      	itet	lt
 800fcbe:	222d      	movlt	r2, #45	; 0x2d
 800fcc0:	2200      	movge	r2, #0
 800fcc2:	eeb1 8b40 	vneglt.f64	d8, d0
 800fcc6:	2d46      	cmp	r5, #70	; 0x46
 800fcc8:	460c      	mov	r4, r1
 800fcca:	701a      	strb	r2, [r3, #0]
 800fccc:	d004      	beq.n	800fcd8 <__cvt+0x38>
 800fcce:	2d45      	cmp	r5, #69	; 0x45
 800fcd0:	d100      	bne.n	800fcd4 <__cvt+0x34>
 800fcd2:	3401      	adds	r4, #1
 800fcd4:	2102      	movs	r1, #2
 800fcd6:	e000      	b.n	800fcda <__cvt+0x3a>
 800fcd8:	2103      	movs	r1, #3
 800fcda:	ab03      	add	r3, sp, #12
 800fcdc:	9301      	str	r3, [sp, #4]
 800fcde:	ab02      	add	r3, sp, #8
 800fce0:	9300      	str	r3, [sp, #0]
 800fce2:	4622      	mov	r2, r4
 800fce4:	4633      	mov	r3, r6
 800fce6:	eeb0 0b48 	vmov.f64	d0, d8
 800fcea:	f000 fe51 	bl	8010990 <_dtoa_r>
 800fcee:	2d47      	cmp	r5, #71	; 0x47
 800fcf0:	d101      	bne.n	800fcf6 <__cvt+0x56>
 800fcf2:	07fb      	lsls	r3, r7, #31
 800fcf4:	d51a      	bpl.n	800fd2c <__cvt+0x8c>
 800fcf6:	2d46      	cmp	r5, #70	; 0x46
 800fcf8:	eb00 0204 	add.w	r2, r0, r4
 800fcfc:	d10c      	bne.n	800fd18 <__cvt+0x78>
 800fcfe:	7803      	ldrb	r3, [r0, #0]
 800fd00:	2b30      	cmp	r3, #48	; 0x30
 800fd02:	d107      	bne.n	800fd14 <__cvt+0x74>
 800fd04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd0c:	bf1c      	itt	ne
 800fd0e:	f1c4 0401 	rsbne	r4, r4, #1
 800fd12:	6034      	strne	r4, [r6, #0]
 800fd14:	6833      	ldr	r3, [r6, #0]
 800fd16:	441a      	add	r2, r3
 800fd18:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd20:	bf08      	it	eq
 800fd22:	9203      	streq	r2, [sp, #12]
 800fd24:	2130      	movs	r1, #48	; 0x30
 800fd26:	9b03      	ldr	r3, [sp, #12]
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d307      	bcc.n	800fd3c <__cvt+0x9c>
 800fd2c:	9b03      	ldr	r3, [sp, #12]
 800fd2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd30:	1a1b      	subs	r3, r3, r0
 800fd32:	6013      	str	r3, [r2, #0]
 800fd34:	b005      	add	sp, #20
 800fd36:	ecbd 8b02 	vpop	{d8}
 800fd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd3c:	1c5c      	adds	r4, r3, #1
 800fd3e:	9403      	str	r4, [sp, #12]
 800fd40:	7019      	strb	r1, [r3, #0]
 800fd42:	e7f0      	b.n	800fd26 <__cvt+0x86>

0800fd44 <__exponent>:
 800fd44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd46:	4603      	mov	r3, r0
 800fd48:	2900      	cmp	r1, #0
 800fd4a:	bfb8      	it	lt
 800fd4c:	4249      	neglt	r1, r1
 800fd4e:	f803 2b02 	strb.w	r2, [r3], #2
 800fd52:	bfb4      	ite	lt
 800fd54:	222d      	movlt	r2, #45	; 0x2d
 800fd56:	222b      	movge	r2, #43	; 0x2b
 800fd58:	2909      	cmp	r1, #9
 800fd5a:	7042      	strb	r2, [r0, #1]
 800fd5c:	dd2a      	ble.n	800fdb4 <__exponent+0x70>
 800fd5e:	f10d 0207 	add.w	r2, sp, #7
 800fd62:	4617      	mov	r7, r2
 800fd64:	260a      	movs	r6, #10
 800fd66:	4694      	mov	ip, r2
 800fd68:	fb91 f5f6 	sdiv	r5, r1, r6
 800fd6c:	fb06 1415 	mls	r4, r6, r5, r1
 800fd70:	3430      	adds	r4, #48	; 0x30
 800fd72:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800fd76:	460c      	mov	r4, r1
 800fd78:	2c63      	cmp	r4, #99	; 0x63
 800fd7a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800fd7e:	4629      	mov	r1, r5
 800fd80:	dcf1      	bgt.n	800fd66 <__exponent+0x22>
 800fd82:	3130      	adds	r1, #48	; 0x30
 800fd84:	f1ac 0402 	sub.w	r4, ip, #2
 800fd88:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fd8c:	1c41      	adds	r1, r0, #1
 800fd8e:	4622      	mov	r2, r4
 800fd90:	42ba      	cmp	r2, r7
 800fd92:	d30a      	bcc.n	800fdaa <__exponent+0x66>
 800fd94:	f10d 0209 	add.w	r2, sp, #9
 800fd98:	eba2 020c 	sub.w	r2, r2, ip
 800fd9c:	42bc      	cmp	r4, r7
 800fd9e:	bf88      	it	hi
 800fda0:	2200      	movhi	r2, #0
 800fda2:	4413      	add	r3, r2
 800fda4:	1a18      	subs	r0, r3, r0
 800fda6:	b003      	add	sp, #12
 800fda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdaa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fdae:	f801 5f01 	strb.w	r5, [r1, #1]!
 800fdb2:	e7ed      	b.n	800fd90 <__exponent+0x4c>
 800fdb4:	2330      	movs	r3, #48	; 0x30
 800fdb6:	3130      	adds	r1, #48	; 0x30
 800fdb8:	7083      	strb	r3, [r0, #2]
 800fdba:	70c1      	strb	r1, [r0, #3]
 800fdbc:	1d03      	adds	r3, r0, #4
 800fdbe:	e7f1      	b.n	800fda4 <__exponent+0x60>

0800fdc0 <_printf_float>:
 800fdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc4:	b08b      	sub	sp, #44	; 0x2c
 800fdc6:	460c      	mov	r4, r1
 800fdc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fdcc:	4616      	mov	r6, r2
 800fdce:	461f      	mov	r7, r3
 800fdd0:	4605      	mov	r5, r0
 800fdd2:	f000 fccd 	bl	8010770 <_localeconv_r>
 800fdd6:	f8d0 b000 	ldr.w	fp, [r0]
 800fdda:	4658      	mov	r0, fp
 800fddc:	f7f0 fad0 	bl	8000380 <strlen>
 800fde0:	2300      	movs	r3, #0
 800fde2:	9308      	str	r3, [sp, #32]
 800fde4:	f8d8 3000 	ldr.w	r3, [r8]
 800fde8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fdec:	6822      	ldr	r2, [r4, #0]
 800fdee:	3307      	adds	r3, #7
 800fdf0:	f023 0307 	bic.w	r3, r3, #7
 800fdf4:	f103 0108 	add.w	r1, r3, #8
 800fdf8:	f8c8 1000 	str.w	r1, [r8]
 800fdfc:	ed93 0b00 	vldr	d0, [r3]
 800fe00:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8010060 <_printf_float+0x2a0>
 800fe04:	eeb0 7bc0 	vabs.f64	d7, d0
 800fe08:	eeb4 7b46 	vcmp.f64	d7, d6
 800fe0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe10:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800fe14:	4682      	mov	sl, r0
 800fe16:	dd24      	ble.n	800fe62 <_printf_float+0xa2>
 800fe18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fe1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe20:	d502      	bpl.n	800fe28 <_printf_float+0x68>
 800fe22:	232d      	movs	r3, #45	; 0x2d
 800fe24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe28:	498f      	ldr	r1, [pc, #572]	; (8010068 <_printf_float+0x2a8>)
 800fe2a:	4b90      	ldr	r3, [pc, #576]	; (801006c <_printf_float+0x2ac>)
 800fe2c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fe30:	bf94      	ite	ls
 800fe32:	4688      	movls	r8, r1
 800fe34:	4698      	movhi	r8, r3
 800fe36:	2303      	movs	r3, #3
 800fe38:	6123      	str	r3, [r4, #16]
 800fe3a:	f022 0204 	bic.w	r2, r2, #4
 800fe3e:	2300      	movs	r3, #0
 800fe40:	6022      	str	r2, [r4, #0]
 800fe42:	9304      	str	r3, [sp, #16]
 800fe44:	9700      	str	r7, [sp, #0]
 800fe46:	4633      	mov	r3, r6
 800fe48:	aa09      	add	r2, sp, #36	; 0x24
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	f000 f9d1 	bl	80101f4 <_printf_common>
 800fe52:	3001      	adds	r0, #1
 800fe54:	f040 808a 	bne.w	800ff6c <_printf_float+0x1ac>
 800fe58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe5c:	b00b      	add	sp, #44	; 0x2c
 800fe5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe62:	eeb4 0b40 	vcmp.f64	d0, d0
 800fe66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe6a:	d709      	bvc.n	800fe80 <_printf_float+0xc0>
 800fe6c:	ee10 3a90 	vmov	r3, s1
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	bfbc      	itt	lt
 800fe74:	232d      	movlt	r3, #45	; 0x2d
 800fe76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fe7a:	497d      	ldr	r1, [pc, #500]	; (8010070 <_printf_float+0x2b0>)
 800fe7c:	4b7d      	ldr	r3, [pc, #500]	; (8010074 <_printf_float+0x2b4>)
 800fe7e:	e7d5      	b.n	800fe2c <_printf_float+0x6c>
 800fe80:	6863      	ldr	r3, [r4, #4]
 800fe82:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fe86:	9104      	str	r1, [sp, #16]
 800fe88:	1c59      	adds	r1, r3, #1
 800fe8a:	d13c      	bne.n	800ff06 <_printf_float+0x146>
 800fe8c:	2306      	movs	r3, #6
 800fe8e:	6063      	str	r3, [r4, #4]
 800fe90:	2300      	movs	r3, #0
 800fe92:	9303      	str	r3, [sp, #12]
 800fe94:	ab08      	add	r3, sp, #32
 800fe96:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fe9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe9e:	ab07      	add	r3, sp, #28
 800fea0:	6861      	ldr	r1, [r4, #4]
 800fea2:	9300      	str	r3, [sp, #0]
 800fea4:	6022      	str	r2, [r4, #0]
 800fea6:	f10d 031b 	add.w	r3, sp, #27
 800feaa:	4628      	mov	r0, r5
 800feac:	f7ff fef8 	bl	800fca0 <__cvt>
 800feb0:	9b04      	ldr	r3, [sp, #16]
 800feb2:	9907      	ldr	r1, [sp, #28]
 800feb4:	2b47      	cmp	r3, #71	; 0x47
 800feb6:	4680      	mov	r8, r0
 800feb8:	d108      	bne.n	800fecc <_printf_float+0x10c>
 800feba:	1cc8      	adds	r0, r1, #3
 800febc:	db02      	blt.n	800fec4 <_printf_float+0x104>
 800febe:	6863      	ldr	r3, [r4, #4]
 800fec0:	4299      	cmp	r1, r3
 800fec2:	dd41      	ble.n	800ff48 <_printf_float+0x188>
 800fec4:	f1a9 0902 	sub.w	r9, r9, #2
 800fec8:	fa5f f989 	uxtb.w	r9, r9
 800fecc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fed0:	d820      	bhi.n	800ff14 <_printf_float+0x154>
 800fed2:	3901      	subs	r1, #1
 800fed4:	464a      	mov	r2, r9
 800fed6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800feda:	9107      	str	r1, [sp, #28]
 800fedc:	f7ff ff32 	bl	800fd44 <__exponent>
 800fee0:	9a08      	ldr	r2, [sp, #32]
 800fee2:	9004      	str	r0, [sp, #16]
 800fee4:	1813      	adds	r3, r2, r0
 800fee6:	2a01      	cmp	r2, #1
 800fee8:	6123      	str	r3, [r4, #16]
 800feea:	dc02      	bgt.n	800fef2 <_printf_float+0x132>
 800feec:	6822      	ldr	r2, [r4, #0]
 800feee:	07d2      	lsls	r2, r2, #31
 800fef0:	d501      	bpl.n	800fef6 <_printf_float+0x136>
 800fef2:	3301      	adds	r3, #1
 800fef4:	6123      	str	r3, [r4, #16]
 800fef6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d0a2      	beq.n	800fe44 <_printf_float+0x84>
 800fefe:	232d      	movs	r3, #45	; 0x2d
 800ff00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff04:	e79e      	b.n	800fe44 <_printf_float+0x84>
 800ff06:	9904      	ldr	r1, [sp, #16]
 800ff08:	2947      	cmp	r1, #71	; 0x47
 800ff0a:	d1c1      	bne.n	800fe90 <_printf_float+0xd0>
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d1bf      	bne.n	800fe90 <_printf_float+0xd0>
 800ff10:	2301      	movs	r3, #1
 800ff12:	e7bc      	b.n	800fe8e <_printf_float+0xce>
 800ff14:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ff18:	d118      	bne.n	800ff4c <_printf_float+0x18c>
 800ff1a:	2900      	cmp	r1, #0
 800ff1c:	6863      	ldr	r3, [r4, #4]
 800ff1e:	dd0b      	ble.n	800ff38 <_printf_float+0x178>
 800ff20:	6121      	str	r1, [r4, #16]
 800ff22:	b913      	cbnz	r3, 800ff2a <_printf_float+0x16a>
 800ff24:	6822      	ldr	r2, [r4, #0]
 800ff26:	07d0      	lsls	r0, r2, #31
 800ff28:	d502      	bpl.n	800ff30 <_printf_float+0x170>
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	440b      	add	r3, r1
 800ff2e:	6123      	str	r3, [r4, #16]
 800ff30:	2300      	movs	r3, #0
 800ff32:	65a1      	str	r1, [r4, #88]	; 0x58
 800ff34:	9304      	str	r3, [sp, #16]
 800ff36:	e7de      	b.n	800fef6 <_printf_float+0x136>
 800ff38:	b913      	cbnz	r3, 800ff40 <_printf_float+0x180>
 800ff3a:	6822      	ldr	r2, [r4, #0]
 800ff3c:	07d2      	lsls	r2, r2, #31
 800ff3e:	d501      	bpl.n	800ff44 <_printf_float+0x184>
 800ff40:	3302      	adds	r3, #2
 800ff42:	e7f4      	b.n	800ff2e <_printf_float+0x16e>
 800ff44:	2301      	movs	r3, #1
 800ff46:	e7f2      	b.n	800ff2e <_printf_float+0x16e>
 800ff48:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ff4c:	9b08      	ldr	r3, [sp, #32]
 800ff4e:	4299      	cmp	r1, r3
 800ff50:	db05      	blt.n	800ff5e <_printf_float+0x19e>
 800ff52:	6823      	ldr	r3, [r4, #0]
 800ff54:	6121      	str	r1, [r4, #16]
 800ff56:	07d8      	lsls	r0, r3, #31
 800ff58:	d5ea      	bpl.n	800ff30 <_printf_float+0x170>
 800ff5a:	1c4b      	adds	r3, r1, #1
 800ff5c:	e7e7      	b.n	800ff2e <_printf_float+0x16e>
 800ff5e:	2900      	cmp	r1, #0
 800ff60:	bfd4      	ite	le
 800ff62:	f1c1 0202 	rsble	r2, r1, #2
 800ff66:	2201      	movgt	r2, #1
 800ff68:	4413      	add	r3, r2
 800ff6a:	e7e0      	b.n	800ff2e <_printf_float+0x16e>
 800ff6c:	6823      	ldr	r3, [r4, #0]
 800ff6e:	055a      	lsls	r2, r3, #21
 800ff70:	d407      	bmi.n	800ff82 <_printf_float+0x1c2>
 800ff72:	6923      	ldr	r3, [r4, #16]
 800ff74:	4642      	mov	r2, r8
 800ff76:	4631      	mov	r1, r6
 800ff78:	4628      	mov	r0, r5
 800ff7a:	47b8      	blx	r7
 800ff7c:	3001      	adds	r0, #1
 800ff7e:	d12a      	bne.n	800ffd6 <_printf_float+0x216>
 800ff80:	e76a      	b.n	800fe58 <_printf_float+0x98>
 800ff82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ff86:	f240 80e0 	bls.w	801014a <_printf_float+0x38a>
 800ff8a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ff8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ff92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff96:	d133      	bne.n	8010000 <_printf_float+0x240>
 800ff98:	4a37      	ldr	r2, [pc, #220]	; (8010078 <_printf_float+0x2b8>)
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	4631      	mov	r1, r6
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	47b8      	blx	r7
 800ffa2:	3001      	adds	r0, #1
 800ffa4:	f43f af58 	beq.w	800fe58 <_printf_float+0x98>
 800ffa8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	db02      	blt.n	800ffb6 <_printf_float+0x1f6>
 800ffb0:	6823      	ldr	r3, [r4, #0]
 800ffb2:	07d8      	lsls	r0, r3, #31
 800ffb4:	d50f      	bpl.n	800ffd6 <_printf_float+0x216>
 800ffb6:	4653      	mov	r3, sl
 800ffb8:	465a      	mov	r2, fp
 800ffba:	4631      	mov	r1, r6
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	47b8      	blx	r7
 800ffc0:	3001      	adds	r0, #1
 800ffc2:	f43f af49 	beq.w	800fe58 <_printf_float+0x98>
 800ffc6:	f04f 0800 	mov.w	r8, #0
 800ffca:	f104 091a 	add.w	r9, r4, #26
 800ffce:	9b08      	ldr	r3, [sp, #32]
 800ffd0:	3b01      	subs	r3, #1
 800ffd2:	4543      	cmp	r3, r8
 800ffd4:	dc09      	bgt.n	800ffea <_printf_float+0x22a>
 800ffd6:	6823      	ldr	r3, [r4, #0]
 800ffd8:	079b      	lsls	r3, r3, #30
 800ffda:	f100 8106 	bmi.w	80101ea <_printf_float+0x42a>
 800ffde:	68e0      	ldr	r0, [r4, #12]
 800ffe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffe2:	4298      	cmp	r0, r3
 800ffe4:	bfb8      	it	lt
 800ffe6:	4618      	movlt	r0, r3
 800ffe8:	e738      	b.n	800fe5c <_printf_float+0x9c>
 800ffea:	2301      	movs	r3, #1
 800ffec:	464a      	mov	r2, r9
 800ffee:	4631      	mov	r1, r6
 800fff0:	4628      	mov	r0, r5
 800fff2:	47b8      	blx	r7
 800fff4:	3001      	adds	r0, #1
 800fff6:	f43f af2f 	beq.w	800fe58 <_printf_float+0x98>
 800fffa:	f108 0801 	add.w	r8, r8, #1
 800fffe:	e7e6      	b.n	800ffce <_printf_float+0x20e>
 8010000:	9b07      	ldr	r3, [sp, #28]
 8010002:	2b00      	cmp	r3, #0
 8010004:	dc3a      	bgt.n	801007c <_printf_float+0x2bc>
 8010006:	4a1c      	ldr	r2, [pc, #112]	; (8010078 <_printf_float+0x2b8>)
 8010008:	2301      	movs	r3, #1
 801000a:	4631      	mov	r1, r6
 801000c:	4628      	mov	r0, r5
 801000e:	47b8      	blx	r7
 8010010:	3001      	adds	r0, #1
 8010012:	f43f af21 	beq.w	800fe58 <_printf_float+0x98>
 8010016:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801001a:	4313      	orrs	r3, r2
 801001c:	d102      	bne.n	8010024 <_printf_float+0x264>
 801001e:	6823      	ldr	r3, [r4, #0]
 8010020:	07d9      	lsls	r1, r3, #31
 8010022:	d5d8      	bpl.n	800ffd6 <_printf_float+0x216>
 8010024:	4653      	mov	r3, sl
 8010026:	465a      	mov	r2, fp
 8010028:	4631      	mov	r1, r6
 801002a:	4628      	mov	r0, r5
 801002c:	47b8      	blx	r7
 801002e:	3001      	adds	r0, #1
 8010030:	f43f af12 	beq.w	800fe58 <_printf_float+0x98>
 8010034:	f04f 0900 	mov.w	r9, #0
 8010038:	f104 0a1a 	add.w	sl, r4, #26
 801003c:	9b07      	ldr	r3, [sp, #28]
 801003e:	425b      	negs	r3, r3
 8010040:	454b      	cmp	r3, r9
 8010042:	dc01      	bgt.n	8010048 <_printf_float+0x288>
 8010044:	9b08      	ldr	r3, [sp, #32]
 8010046:	e795      	b.n	800ff74 <_printf_float+0x1b4>
 8010048:	2301      	movs	r3, #1
 801004a:	4652      	mov	r2, sl
 801004c:	4631      	mov	r1, r6
 801004e:	4628      	mov	r0, r5
 8010050:	47b8      	blx	r7
 8010052:	3001      	adds	r0, #1
 8010054:	f43f af00 	beq.w	800fe58 <_printf_float+0x98>
 8010058:	f109 0901 	add.w	r9, r9, #1
 801005c:	e7ee      	b.n	801003c <_printf_float+0x27c>
 801005e:	bf00      	nop
 8010060:	ffffffff 	.word	0xffffffff
 8010064:	7fefffff 	.word	0x7fefffff
 8010068:	08012a48 	.word	0x08012a48
 801006c:	08012a4c 	.word	0x08012a4c
 8010070:	08012a50 	.word	0x08012a50
 8010074:	08012a54 	.word	0x08012a54
 8010078:	08012a58 	.word	0x08012a58
 801007c:	9a08      	ldr	r2, [sp, #32]
 801007e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010080:	429a      	cmp	r2, r3
 8010082:	bfa8      	it	ge
 8010084:	461a      	movge	r2, r3
 8010086:	2a00      	cmp	r2, #0
 8010088:	4691      	mov	r9, r2
 801008a:	dc38      	bgt.n	80100fe <_printf_float+0x33e>
 801008c:	2300      	movs	r3, #0
 801008e:	9305      	str	r3, [sp, #20]
 8010090:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010094:	f104 021a 	add.w	r2, r4, #26
 8010098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801009a:	9905      	ldr	r1, [sp, #20]
 801009c:	9304      	str	r3, [sp, #16]
 801009e:	eba3 0309 	sub.w	r3, r3, r9
 80100a2:	428b      	cmp	r3, r1
 80100a4:	dc33      	bgt.n	801010e <_printf_float+0x34e>
 80100a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	db3c      	blt.n	8010128 <_printf_float+0x368>
 80100ae:	6823      	ldr	r3, [r4, #0]
 80100b0:	07da      	lsls	r2, r3, #31
 80100b2:	d439      	bmi.n	8010128 <_printf_float+0x368>
 80100b4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80100b8:	eba2 0903 	sub.w	r9, r2, r3
 80100bc:	9b04      	ldr	r3, [sp, #16]
 80100be:	1ad2      	subs	r2, r2, r3
 80100c0:	4591      	cmp	r9, r2
 80100c2:	bfa8      	it	ge
 80100c4:	4691      	movge	r9, r2
 80100c6:	f1b9 0f00 	cmp.w	r9, #0
 80100ca:	dc35      	bgt.n	8010138 <_printf_float+0x378>
 80100cc:	f04f 0800 	mov.w	r8, #0
 80100d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100d4:	f104 0a1a 	add.w	sl, r4, #26
 80100d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80100dc:	1a9b      	subs	r3, r3, r2
 80100de:	eba3 0309 	sub.w	r3, r3, r9
 80100e2:	4543      	cmp	r3, r8
 80100e4:	f77f af77 	ble.w	800ffd6 <_printf_float+0x216>
 80100e8:	2301      	movs	r3, #1
 80100ea:	4652      	mov	r2, sl
 80100ec:	4631      	mov	r1, r6
 80100ee:	4628      	mov	r0, r5
 80100f0:	47b8      	blx	r7
 80100f2:	3001      	adds	r0, #1
 80100f4:	f43f aeb0 	beq.w	800fe58 <_printf_float+0x98>
 80100f8:	f108 0801 	add.w	r8, r8, #1
 80100fc:	e7ec      	b.n	80100d8 <_printf_float+0x318>
 80100fe:	4613      	mov	r3, r2
 8010100:	4631      	mov	r1, r6
 8010102:	4642      	mov	r2, r8
 8010104:	4628      	mov	r0, r5
 8010106:	47b8      	blx	r7
 8010108:	3001      	adds	r0, #1
 801010a:	d1bf      	bne.n	801008c <_printf_float+0x2cc>
 801010c:	e6a4      	b.n	800fe58 <_printf_float+0x98>
 801010e:	2301      	movs	r3, #1
 8010110:	4631      	mov	r1, r6
 8010112:	4628      	mov	r0, r5
 8010114:	9204      	str	r2, [sp, #16]
 8010116:	47b8      	blx	r7
 8010118:	3001      	adds	r0, #1
 801011a:	f43f ae9d 	beq.w	800fe58 <_printf_float+0x98>
 801011e:	9b05      	ldr	r3, [sp, #20]
 8010120:	9a04      	ldr	r2, [sp, #16]
 8010122:	3301      	adds	r3, #1
 8010124:	9305      	str	r3, [sp, #20]
 8010126:	e7b7      	b.n	8010098 <_printf_float+0x2d8>
 8010128:	4653      	mov	r3, sl
 801012a:	465a      	mov	r2, fp
 801012c:	4631      	mov	r1, r6
 801012e:	4628      	mov	r0, r5
 8010130:	47b8      	blx	r7
 8010132:	3001      	adds	r0, #1
 8010134:	d1be      	bne.n	80100b4 <_printf_float+0x2f4>
 8010136:	e68f      	b.n	800fe58 <_printf_float+0x98>
 8010138:	9a04      	ldr	r2, [sp, #16]
 801013a:	464b      	mov	r3, r9
 801013c:	4442      	add	r2, r8
 801013e:	4631      	mov	r1, r6
 8010140:	4628      	mov	r0, r5
 8010142:	47b8      	blx	r7
 8010144:	3001      	adds	r0, #1
 8010146:	d1c1      	bne.n	80100cc <_printf_float+0x30c>
 8010148:	e686      	b.n	800fe58 <_printf_float+0x98>
 801014a:	9a08      	ldr	r2, [sp, #32]
 801014c:	2a01      	cmp	r2, #1
 801014e:	dc01      	bgt.n	8010154 <_printf_float+0x394>
 8010150:	07db      	lsls	r3, r3, #31
 8010152:	d537      	bpl.n	80101c4 <_printf_float+0x404>
 8010154:	2301      	movs	r3, #1
 8010156:	4642      	mov	r2, r8
 8010158:	4631      	mov	r1, r6
 801015a:	4628      	mov	r0, r5
 801015c:	47b8      	blx	r7
 801015e:	3001      	adds	r0, #1
 8010160:	f43f ae7a 	beq.w	800fe58 <_printf_float+0x98>
 8010164:	4653      	mov	r3, sl
 8010166:	465a      	mov	r2, fp
 8010168:	4631      	mov	r1, r6
 801016a:	4628      	mov	r0, r5
 801016c:	47b8      	blx	r7
 801016e:	3001      	adds	r0, #1
 8010170:	f43f ae72 	beq.w	800fe58 <_printf_float+0x98>
 8010174:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010178:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801017c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010180:	9b08      	ldr	r3, [sp, #32]
 8010182:	d01a      	beq.n	80101ba <_printf_float+0x3fa>
 8010184:	3b01      	subs	r3, #1
 8010186:	f108 0201 	add.w	r2, r8, #1
 801018a:	4631      	mov	r1, r6
 801018c:	4628      	mov	r0, r5
 801018e:	47b8      	blx	r7
 8010190:	3001      	adds	r0, #1
 8010192:	d10e      	bne.n	80101b2 <_printf_float+0x3f2>
 8010194:	e660      	b.n	800fe58 <_printf_float+0x98>
 8010196:	2301      	movs	r3, #1
 8010198:	464a      	mov	r2, r9
 801019a:	4631      	mov	r1, r6
 801019c:	4628      	mov	r0, r5
 801019e:	47b8      	blx	r7
 80101a0:	3001      	adds	r0, #1
 80101a2:	f43f ae59 	beq.w	800fe58 <_printf_float+0x98>
 80101a6:	f108 0801 	add.w	r8, r8, #1
 80101aa:	9b08      	ldr	r3, [sp, #32]
 80101ac:	3b01      	subs	r3, #1
 80101ae:	4543      	cmp	r3, r8
 80101b0:	dcf1      	bgt.n	8010196 <_printf_float+0x3d6>
 80101b2:	9b04      	ldr	r3, [sp, #16]
 80101b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80101b8:	e6dd      	b.n	800ff76 <_printf_float+0x1b6>
 80101ba:	f04f 0800 	mov.w	r8, #0
 80101be:	f104 091a 	add.w	r9, r4, #26
 80101c2:	e7f2      	b.n	80101aa <_printf_float+0x3ea>
 80101c4:	2301      	movs	r3, #1
 80101c6:	4642      	mov	r2, r8
 80101c8:	e7df      	b.n	801018a <_printf_float+0x3ca>
 80101ca:	2301      	movs	r3, #1
 80101cc:	464a      	mov	r2, r9
 80101ce:	4631      	mov	r1, r6
 80101d0:	4628      	mov	r0, r5
 80101d2:	47b8      	blx	r7
 80101d4:	3001      	adds	r0, #1
 80101d6:	f43f ae3f 	beq.w	800fe58 <_printf_float+0x98>
 80101da:	f108 0801 	add.w	r8, r8, #1
 80101de:	68e3      	ldr	r3, [r4, #12]
 80101e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101e2:	1a5b      	subs	r3, r3, r1
 80101e4:	4543      	cmp	r3, r8
 80101e6:	dcf0      	bgt.n	80101ca <_printf_float+0x40a>
 80101e8:	e6f9      	b.n	800ffde <_printf_float+0x21e>
 80101ea:	f04f 0800 	mov.w	r8, #0
 80101ee:	f104 0919 	add.w	r9, r4, #25
 80101f2:	e7f4      	b.n	80101de <_printf_float+0x41e>

080101f4 <_printf_common>:
 80101f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101f8:	4616      	mov	r6, r2
 80101fa:	4699      	mov	r9, r3
 80101fc:	688a      	ldr	r2, [r1, #8]
 80101fe:	690b      	ldr	r3, [r1, #16]
 8010200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010204:	4293      	cmp	r3, r2
 8010206:	bfb8      	it	lt
 8010208:	4613      	movlt	r3, r2
 801020a:	6033      	str	r3, [r6, #0]
 801020c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010210:	4607      	mov	r7, r0
 8010212:	460c      	mov	r4, r1
 8010214:	b10a      	cbz	r2, 801021a <_printf_common+0x26>
 8010216:	3301      	adds	r3, #1
 8010218:	6033      	str	r3, [r6, #0]
 801021a:	6823      	ldr	r3, [r4, #0]
 801021c:	0699      	lsls	r1, r3, #26
 801021e:	bf42      	ittt	mi
 8010220:	6833      	ldrmi	r3, [r6, #0]
 8010222:	3302      	addmi	r3, #2
 8010224:	6033      	strmi	r3, [r6, #0]
 8010226:	6825      	ldr	r5, [r4, #0]
 8010228:	f015 0506 	ands.w	r5, r5, #6
 801022c:	d106      	bne.n	801023c <_printf_common+0x48>
 801022e:	f104 0a19 	add.w	sl, r4, #25
 8010232:	68e3      	ldr	r3, [r4, #12]
 8010234:	6832      	ldr	r2, [r6, #0]
 8010236:	1a9b      	subs	r3, r3, r2
 8010238:	42ab      	cmp	r3, r5
 801023a:	dc26      	bgt.n	801028a <_printf_common+0x96>
 801023c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010240:	1e13      	subs	r3, r2, #0
 8010242:	6822      	ldr	r2, [r4, #0]
 8010244:	bf18      	it	ne
 8010246:	2301      	movne	r3, #1
 8010248:	0692      	lsls	r2, r2, #26
 801024a:	d42b      	bmi.n	80102a4 <_printf_common+0xb0>
 801024c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010250:	4649      	mov	r1, r9
 8010252:	4638      	mov	r0, r7
 8010254:	47c0      	blx	r8
 8010256:	3001      	adds	r0, #1
 8010258:	d01e      	beq.n	8010298 <_printf_common+0xa4>
 801025a:	6823      	ldr	r3, [r4, #0]
 801025c:	6922      	ldr	r2, [r4, #16]
 801025e:	f003 0306 	and.w	r3, r3, #6
 8010262:	2b04      	cmp	r3, #4
 8010264:	bf02      	ittt	eq
 8010266:	68e5      	ldreq	r5, [r4, #12]
 8010268:	6833      	ldreq	r3, [r6, #0]
 801026a:	1aed      	subeq	r5, r5, r3
 801026c:	68a3      	ldr	r3, [r4, #8]
 801026e:	bf0c      	ite	eq
 8010270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010274:	2500      	movne	r5, #0
 8010276:	4293      	cmp	r3, r2
 8010278:	bfc4      	itt	gt
 801027a:	1a9b      	subgt	r3, r3, r2
 801027c:	18ed      	addgt	r5, r5, r3
 801027e:	2600      	movs	r6, #0
 8010280:	341a      	adds	r4, #26
 8010282:	42b5      	cmp	r5, r6
 8010284:	d11a      	bne.n	80102bc <_printf_common+0xc8>
 8010286:	2000      	movs	r0, #0
 8010288:	e008      	b.n	801029c <_printf_common+0xa8>
 801028a:	2301      	movs	r3, #1
 801028c:	4652      	mov	r2, sl
 801028e:	4649      	mov	r1, r9
 8010290:	4638      	mov	r0, r7
 8010292:	47c0      	blx	r8
 8010294:	3001      	adds	r0, #1
 8010296:	d103      	bne.n	80102a0 <_printf_common+0xac>
 8010298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102a0:	3501      	adds	r5, #1
 80102a2:	e7c6      	b.n	8010232 <_printf_common+0x3e>
 80102a4:	18e1      	adds	r1, r4, r3
 80102a6:	1c5a      	adds	r2, r3, #1
 80102a8:	2030      	movs	r0, #48	; 0x30
 80102aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102ae:	4422      	add	r2, r4
 80102b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102b8:	3302      	adds	r3, #2
 80102ba:	e7c7      	b.n	801024c <_printf_common+0x58>
 80102bc:	2301      	movs	r3, #1
 80102be:	4622      	mov	r2, r4
 80102c0:	4649      	mov	r1, r9
 80102c2:	4638      	mov	r0, r7
 80102c4:	47c0      	blx	r8
 80102c6:	3001      	adds	r0, #1
 80102c8:	d0e6      	beq.n	8010298 <_printf_common+0xa4>
 80102ca:	3601      	adds	r6, #1
 80102cc:	e7d9      	b.n	8010282 <_printf_common+0x8e>
	...

080102d0 <_printf_i>:
 80102d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102d4:	7e0f      	ldrb	r7, [r1, #24]
 80102d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80102d8:	2f78      	cmp	r7, #120	; 0x78
 80102da:	4691      	mov	r9, r2
 80102dc:	4680      	mov	r8, r0
 80102de:	460c      	mov	r4, r1
 80102e0:	469a      	mov	sl, r3
 80102e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80102e6:	d807      	bhi.n	80102f8 <_printf_i+0x28>
 80102e8:	2f62      	cmp	r7, #98	; 0x62
 80102ea:	d80a      	bhi.n	8010302 <_printf_i+0x32>
 80102ec:	2f00      	cmp	r7, #0
 80102ee:	f000 80d4 	beq.w	801049a <_printf_i+0x1ca>
 80102f2:	2f58      	cmp	r7, #88	; 0x58
 80102f4:	f000 80c0 	beq.w	8010478 <_printf_i+0x1a8>
 80102f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010300:	e03a      	b.n	8010378 <_printf_i+0xa8>
 8010302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010306:	2b15      	cmp	r3, #21
 8010308:	d8f6      	bhi.n	80102f8 <_printf_i+0x28>
 801030a:	a101      	add	r1, pc, #4	; (adr r1, 8010310 <_printf_i+0x40>)
 801030c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010310:	08010369 	.word	0x08010369
 8010314:	0801037d 	.word	0x0801037d
 8010318:	080102f9 	.word	0x080102f9
 801031c:	080102f9 	.word	0x080102f9
 8010320:	080102f9 	.word	0x080102f9
 8010324:	080102f9 	.word	0x080102f9
 8010328:	0801037d 	.word	0x0801037d
 801032c:	080102f9 	.word	0x080102f9
 8010330:	080102f9 	.word	0x080102f9
 8010334:	080102f9 	.word	0x080102f9
 8010338:	080102f9 	.word	0x080102f9
 801033c:	08010481 	.word	0x08010481
 8010340:	080103a9 	.word	0x080103a9
 8010344:	0801043b 	.word	0x0801043b
 8010348:	080102f9 	.word	0x080102f9
 801034c:	080102f9 	.word	0x080102f9
 8010350:	080104a3 	.word	0x080104a3
 8010354:	080102f9 	.word	0x080102f9
 8010358:	080103a9 	.word	0x080103a9
 801035c:	080102f9 	.word	0x080102f9
 8010360:	080102f9 	.word	0x080102f9
 8010364:	08010443 	.word	0x08010443
 8010368:	682b      	ldr	r3, [r5, #0]
 801036a:	1d1a      	adds	r2, r3, #4
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	602a      	str	r2, [r5, #0]
 8010370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010378:	2301      	movs	r3, #1
 801037a:	e09f      	b.n	80104bc <_printf_i+0x1ec>
 801037c:	6820      	ldr	r0, [r4, #0]
 801037e:	682b      	ldr	r3, [r5, #0]
 8010380:	0607      	lsls	r7, r0, #24
 8010382:	f103 0104 	add.w	r1, r3, #4
 8010386:	6029      	str	r1, [r5, #0]
 8010388:	d501      	bpl.n	801038e <_printf_i+0xbe>
 801038a:	681e      	ldr	r6, [r3, #0]
 801038c:	e003      	b.n	8010396 <_printf_i+0xc6>
 801038e:	0646      	lsls	r6, r0, #25
 8010390:	d5fb      	bpl.n	801038a <_printf_i+0xba>
 8010392:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010396:	2e00      	cmp	r6, #0
 8010398:	da03      	bge.n	80103a2 <_printf_i+0xd2>
 801039a:	232d      	movs	r3, #45	; 0x2d
 801039c:	4276      	negs	r6, r6
 801039e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103a2:	485a      	ldr	r0, [pc, #360]	; (801050c <_printf_i+0x23c>)
 80103a4:	230a      	movs	r3, #10
 80103a6:	e012      	b.n	80103ce <_printf_i+0xfe>
 80103a8:	682b      	ldr	r3, [r5, #0]
 80103aa:	6820      	ldr	r0, [r4, #0]
 80103ac:	1d19      	adds	r1, r3, #4
 80103ae:	6029      	str	r1, [r5, #0]
 80103b0:	0605      	lsls	r5, r0, #24
 80103b2:	d501      	bpl.n	80103b8 <_printf_i+0xe8>
 80103b4:	681e      	ldr	r6, [r3, #0]
 80103b6:	e002      	b.n	80103be <_printf_i+0xee>
 80103b8:	0641      	lsls	r1, r0, #25
 80103ba:	d5fb      	bpl.n	80103b4 <_printf_i+0xe4>
 80103bc:	881e      	ldrh	r6, [r3, #0]
 80103be:	4853      	ldr	r0, [pc, #332]	; (801050c <_printf_i+0x23c>)
 80103c0:	2f6f      	cmp	r7, #111	; 0x6f
 80103c2:	bf0c      	ite	eq
 80103c4:	2308      	moveq	r3, #8
 80103c6:	230a      	movne	r3, #10
 80103c8:	2100      	movs	r1, #0
 80103ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103ce:	6865      	ldr	r5, [r4, #4]
 80103d0:	60a5      	str	r5, [r4, #8]
 80103d2:	2d00      	cmp	r5, #0
 80103d4:	bfa2      	ittt	ge
 80103d6:	6821      	ldrge	r1, [r4, #0]
 80103d8:	f021 0104 	bicge.w	r1, r1, #4
 80103dc:	6021      	strge	r1, [r4, #0]
 80103de:	b90e      	cbnz	r6, 80103e4 <_printf_i+0x114>
 80103e0:	2d00      	cmp	r5, #0
 80103e2:	d04b      	beq.n	801047c <_printf_i+0x1ac>
 80103e4:	4615      	mov	r5, r2
 80103e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80103ea:	fb03 6711 	mls	r7, r3, r1, r6
 80103ee:	5dc7      	ldrb	r7, [r0, r7]
 80103f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80103f4:	4637      	mov	r7, r6
 80103f6:	42bb      	cmp	r3, r7
 80103f8:	460e      	mov	r6, r1
 80103fa:	d9f4      	bls.n	80103e6 <_printf_i+0x116>
 80103fc:	2b08      	cmp	r3, #8
 80103fe:	d10b      	bne.n	8010418 <_printf_i+0x148>
 8010400:	6823      	ldr	r3, [r4, #0]
 8010402:	07de      	lsls	r6, r3, #31
 8010404:	d508      	bpl.n	8010418 <_printf_i+0x148>
 8010406:	6923      	ldr	r3, [r4, #16]
 8010408:	6861      	ldr	r1, [r4, #4]
 801040a:	4299      	cmp	r1, r3
 801040c:	bfde      	ittt	le
 801040e:	2330      	movle	r3, #48	; 0x30
 8010410:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010414:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010418:	1b52      	subs	r2, r2, r5
 801041a:	6122      	str	r2, [r4, #16]
 801041c:	f8cd a000 	str.w	sl, [sp]
 8010420:	464b      	mov	r3, r9
 8010422:	aa03      	add	r2, sp, #12
 8010424:	4621      	mov	r1, r4
 8010426:	4640      	mov	r0, r8
 8010428:	f7ff fee4 	bl	80101f4 <_printf_common>
 801042c:	3001      	adds	r0, #1
 801042e:	d14a      	bne.n	80104c6 <_printf_i+0x1f6>
 8010430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010434:	b004      	add	sp, #16
 8010436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	f043 0320 	orr.w	r3, r3, #32
 8010440:	6023      	str	r3, [r4, #0]
 8010442:	4833      	ldr	r0, [pc, #204]	; (8010510 <_printf_i+0x240>)
 8010444:	2778      	movs	r7, #120	; 0x78
 8010446:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801044a:	6823      	ldr	r3, [r4, #0]
 801044c:	6829      	ldr	r1, [r5, #0]
 801044e:	061f      	lsls	r7, r3, #24
 8010450:	f851 6b04 	ldr.w	r6, [r1], #4
 8010454:	d402      	bmi.n	801045c <_printf_i+0x18c>
 8010456:	065f      	lsls	r7, r3, #25
 8010458:	bf48      	it	mi
 801045a:	b2b6      	uxthmi	r6, r6
 801045c:	07df      	lsls	r7, r3, #31
 801045e:	bf48      	it	mi
 8010460:	f043 0320 	orrmi.w	r3, r3, #32
 8010464:	6029      	str	r1, [r5, #0]
 8010466:	bf48      	it	mi
 8010468:	6023      	strmi	r3, [r4, #0]
 801046a:	b91e      	cbnz	r6, 8010474 <_printf_i+0x1a4>
 801046c:	6823      	ldr	r3, [r4, #0]
 801046e:	f023 0320 	bic.w	r3, r3, #32
 8010472:	6023      	str	r3, [r4, #0]
 8010474:	2310      	movs	r3, #16
 8010476:	e7a7      	b.n	80103c8 <_printf_i+0xf8>
 8010478:	4824      	ldr	r0, [pc, #144]	; (801050c <_printf_i+0x23c>)
 801047a:	e7e4      	b.n	8010446 <_printf_i+0x176>
 801047c:	4615      	mov	r5, r2
 801047e:	e7bd      	b.n	80103fc <_printf_i+0x12c>
 8010480:	682b      	ldr	r3, [r5, #0]
 8010482:	6826      	ldr	r6, [r4, #0]
 8010484:	6961      	ldr	r1, [r4, #20]
 8010486:	1d18      	adds	r0, r3, #4
 8010488:	6028      	str	r0, [r5, #0]
 801048a:	0635      	lsls	r5, r6, #24
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	d501      	bpl.n	8010494 <_printf_i+0x1c4>
 8010490:	6019      	str	r1, [r3, #0]
 8010492:	e002      	b.n	801049a <_printf_i+0x1ca>
 8010494:	0670      	lsls	r0, r6, #25
 8010496:	d5fb      	bpl.n	8010490 <_printf_i+0x1c0>
 8010498:	8019      	strh	r1, [r3, #0]
 801049a:	2300      	movs	r3, #0
 801049c:	6123      	str	r3, [r4, #16]
 801049e:	4615      	mov	r5, r2
 80104a0:	e7bc      	b.n	801041c <_printf_i+0x14c>
 80104a2:	682b      	ldr	r3, [r5, #0]
 80104a4:	1d1a      	adds	r2, r3, #4
 80104a6:	602a      	str	r2, [r5, #0]
 80104a8:	681d      	ldr	r5, [r3, #0]
 80104aa:	6862      	ldr	r2, [r4, #4]
 80104ac:	2100      	movs	r1, #0
 80104ae:	4628      	mov	r0, r5
 80104b0:	f7ef ff16 	bl	80002e0 <memchr>
 80104b4:	b108      	cbz	r0, 80104ba <_printf_i+0x1ea>
 80104b6:	1b40      	subs	r0, r0, r5
 80104b8:	6060      	str	r0, [r4, #4]
 80104ba:	6863      	ldr	r3, [r4, #4]
 80104bc:	6123      	str	r3, [r4, #16]
 80104be:	2300      	movs	r3, #0
 80104c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104c4:	e7aa      	b.n	801041c <_printf_i+0x14c>
 80104c6:	6923      	ldr	r3, [r4, #16]
 80104c8:	462a      	mov	r2, r5
 80104ca:	4649      	mov	r1, r9
 80104cc:	4640      	mov	r0, r8
 80104ce:	47d0      	blx	sl
 80104d0:	3001      	adds	r0, #1
 80104d2:	d0ad      	beq.n	8010430 <_printf_i+0x160>
 80104d4:	6823      	ldr	r3, [r4, #0]
 80104d6:	079b      	lsls	r3, r3, #30
 80104d8:	d413      	bmi.n	8010502 <_printf_i+0x232>
 80104da:	68e0      	ldr	r0, [r4, #12]
 80104dc:	9b03      	ldr	r3, [sp, #12]
 80104de:	4298      	cmp	r0, r3
 80104e0:	bfb8      	it	lt
 80104e2:	4618      	movlt	r0, r3
 80104e4:	e7a6      	b.n	8010434 <_printf_i+0x164>
 80104e6:	2301      	movs	r3, #1
 80104e8:	4632      	mov	r2, r6
 80104ea:	4649      	mov	r1, r9
 80104ec:	4640      	mov	r0, r8
 80104ee:	47d0      	blx	sl
 80104f0:	3001      	adds	r0, #1
 80104f2:	d09d      	beq.n	8010430 <_printf_i+0x160>
 80104f4:	3501      	adds	r5, #1
 80104f6:	68e3      	ldr	r3, [r4, #12]
 80104f8:	9903      	ldr	r1, [sp, #12]
 80104fa:	1a5b      	subs	r3, r3, r1
 80104fc:	42ab      	cmp	r3, r5
 80104fe:	dcf2      	bgt.n	80104e6 <_printf_i+0x216>
 8010500:	e7eb      	b.n	80104da <_printf_i+0x20a>
 8010502:	2500      	movs	r5, #0
 8010504:	f104 0619 	add.w	r6, r4, #25
 8010508:	e7f5      	b.n	80104f6 <_printf_i+0x226>
 801050a:	bf00      	nop
 801050c:	08012a5a 	.word	0x08012a5a
 8010510:	08012a6b 	.word	0x08012a6b

08010514 <std>:
 8010514:	2300      	movs	r3, #0
 8010516:	b510      	push	{r4, lr}
 8010518:	4604      	mov	r4, r0
 801051a:	e9c0 3300 	strd	r3, r3, [r0]
 801051e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010522:	6083      	str	r3, [r0, #8]
 8010524:	8181      	strh	r1, [r0, #12]
 8010526:	6643      	str	r3, [r0, #100]	; 0x64
 8010528:	81c2      	strh	r2, [r0, #14]
 801052a:	6183      	str	r3, [r0, #24]
 801052c:	4619      	mov	r1, r3
 801052e:	2208      	movs	r2, #8
 8010530:	305c      	adds	r0, #92	; 0x5c
 8010532:	f000 f914 	bl	801075e <memset>
 8010536:	4b0d      	ldr	r3, [pc, #52]	; (801056c <std+0x58>)
 8010538:	6263      	str	r3, [r4, #36]	; 0x24
 801053a:	4b0d      	ldr	r3, [pc, #52]	; (8010570 <std+0x5c>)
 801053c:	62a3      	str	r3, [r4, #40]	; 0x28
 801053e:	4b0d      	ldr	r3, [pc, #52]	; (8010574 <std+0x60>)
 8010540:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010542:	4b0d      	ldr	r3, [pc, #52]	; (8010578 <std+0x64>)
 8010544:	6323      	str	r3, [r4, #48]	; 0x30
 8010546:	4b0d      	ldr	r3, [pc, #52]	; (801057c <std+0x68>)
 8010548:	6224      	str	r4, [r4, #32]
 801054a:	429c      	cmp	r4, r3
 801054c:	d006      	beq.n	801055c <std+0x48>
 801054e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010552:	4294      	cmp	r4, r2
 8010554:	d002      	beq.n	801055c <std+0x48>
 8010556:	33d0      	adds	r3, #208	; 0xd0
 8010558:	429c      	cmp	r4, r3
 801055a:	d105      	bne.n	8010568 <std+0x54>
 801055c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010564:	f000 b978 	b.w	8010858 <__retarget_lock_init_recursive>
 8010568:	bd10      	pop	{r4, pc}
 801056a:	bf00      	nop
 801056c:	080106d9 	.word	0x080106d9
 8010570:	080106fb 	.word	0x080106fb
 8010574:	08010733 	.word	0x08010733
 8010578:	08010757 	.word	0x08010757
 801057c:	24000864 	.word	0x24000864

08010580 <stdio_exit_handler>:
 8010580:	4a02      	ldr	r2, [pc, #8]	; (801058c <stdio_exit_handler+0xc>)
 8010582:	4903      	ldr	r1, [pc, #12]	; (8010590 <stdio_exit_handler+0x10>)
 8010584:	4803      	ldr	r0, [pc, #12]	; (8010594 <stdio_exit_handler+0x14>)
 8010586:	f000 b869 	b.w	801065c <_fwalk_sglue>
 801058a:	bf00      	nop
 801058c:	24000014 	.word	0x24000014
 8010590:	0801211d 	.word	0x0801211d
 8010594:	24000020 	.word	0x24000020

08010598 <cleanup_stdio>:
 8010598:	6841      	ldr	r1, [r0, #4]
 801059a:	4b0c      	ldr	r3, [pc, #48]	; (80105cc <cleanup_stdio+0x34>)
 801059c:	4299      	cmp	r1, r3
 801059e:	b510      	push	{r4, lr}
 80105a0:	4604      	mov	r4, r0
 80105a2:	d001      	beq.n	80105a8 <cleanup_stdio+0x10>
 80105a4:	f001 fdba 	bl	801211c <_fflush_r>
 80105a8:	68a1      	ldr	r1, [r4, #8]
 80105aa:	4b09      	ldr	r3, [pc, #36]	; (80105d0 <cleanup_stdio+0x38>)
 80105ac:	4299      	cmp	r1, r3
 80105ae:	d002      	beq.n	80105b6 <cleanup_stdio+0x1e>
 80105b0:	4620      	mov	r0, r4
 80105b2:	f001 fdb3 	bl	801211c <_fflush_r>
 80105b6:	68e1      	ldr	r1, [r4, #12]
 80105b8:	4b06      	ldr	r3, [pc, #24]	; (80105d4 <cleanup_stdio+0x3c>)
 80105ba:	4299      	cmp	r1, r3
 80105bc:	d004      	beq.n	80105c8 <cleanup_stdio+0x30>
 80105be:	4620      	mov	r0, r4
 80105c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105c4:	f001 bdaa 	b.w	801211c <_fflush_r>
 80105c8:	bd10      	pop	{r4, pc}
 80105ca:	bf00      	nop
 80105cc:	24000864 	.word	0x24000864
 80105d0:	240008cc 	.word	0x240008cc
 80105d4:	24000934 	.word	0x24000934

080105d8 <global_stdio_init.part.0>:
 80105d8:	b510      	push	{r4, lr}
 80105da:	4b0b      	ldr	r3, [pc, #44]	; (8010608 <global_stdio_init.part.0+0x30>)
 80105dc:	4c0b      	ldr	r4, [pc, #44]	; (801060c <global_stdio_init.part.0+0x34>)
 80105de:	4a0c      	ldr	r2, [pc, #48]	; (8010610 <global_stdio_init.part.0+0x38>)
 80105e0:	601a      	str	r2, [r3, #0]
 80105e2:	4620      	mov	r0, r4
 80105e4:	2200      	movs	r2, #0
 80105e6:	2104      	movs	r1, #4
 80105e8:	f7ff ff94 	bl	8010514 <std>
 80105ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80105f0:	2201      	movs	r2, #1
 80105f2:	2109      	movs	r1, #9
 80105f4:	f7ff ff8e 	bl	8010514 <std>
 80105f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80105fc:	2202      	movs	r2, #2
 80105fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010602:	2112      	movs	r1, #18
 8010604:	f7ff bf86 	b.w	8010514 <std>
 8010608:	2400099c 	.word	0x2400099c
 801060c:	24000864 	.word	0x24000864
 8010610:	08010581 	.word	0x08010581

08010614 <__sfp_lock_acquire>:
 8010614:	4801      	ldr	r0, [pc, #4]	; (801061c <__sfp_lock_acquire+0x8>)
 8010616:	f000 b920 	b.w	801085a <__retarget_lock_acquire_recursive>
 801061a:	bf00      	nop
 801061c:	240009a5 	.word	0x240009a5

08010620 <__sfp_lock_release>:
 8010620:	4801      	ldr	r0, [pc, #4]	; (8010628 <__sfp_lock_release+0x8>)
 8010622:	f000 b91b 	b.w	801085c <__retarget_lock_release_recursive>
 8010626:	bf00      	nop
 8010628:	240009a5 	.word	0x240009a5

0801062c <__sinit>:
 801062c:	b510      	push	{r4, lr}
 801062e:	4604      	mov	r4, r0
 8010630:	f7ff fff0 	bl	8010614 <__sfp_lock_acquire>
 8010634:	6a23      	ldr	r3, [r4, #32]
 8010636:	b11b      	cbz	r3, 8010640 <__sinit+0x14>
 8010638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801063c:	f7ff bff0 	b.w	8010620 <__sfp_lock_release>
 8010640:	4b04      	ldr	r3, [pc, #16]	; (8010654 <__sinit+0x28>)
 8010642:	6223      	str	r3, [r4, #32]
 8010644:	4b04      	ldr	r3, [pc, #16]	; (8010658 <__sinit+0x2c>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d1f5      	bne.n	8010638 <__sinit+0xc>
 801064c:	f7ff ffc4 	bl	80105d8 <global_stdio_init.part.0>
 8010650:	e7f2      	b.n	8010638 <__sinit+0xc>
 8010652:	bf00      	nop
 8010654:	08010599 	.word	0x08010599
 8010658:	2400099c 	.word	0x2400099c

0801065c <_fwalk_sglue>:
 801065c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010660:	4607      	mov	r7, r0
 8010662:	4688      	mov	r8, r1
 8010664:	4614      	mov	r4, r2
 8010666:	2600      	movs	r6, #0
 8010668:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801066c:	f1b9 0901 	subs.w	r9, r9, #1
 8010670:	d505      	bpl.n	801067e <_fwalk_sglue+0x22>
 8010672:	6824      	ldr	r4, [r4, #0]
 8010674:	2c00      	cmp	r4, #0
 8010676:	d1f7      	bne.n	8010668 <_fwalk_sglue+0xc>
 8010678:	4630      	mov	r0, r6
 801067a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801067e:	89ab      	ldrh	r3, [r5, #12]
 8010680:	2b01      	cmp	r3, #1
 8010682:	d907      	bls.n	8010694 <_fwalk_sglue+0x38>
 8010684:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010688:	3301      	adds	r3, #1
 801068a:	d003      	beq.n	8010694 <_fwalk_sglue+0x38>
 801068c:	4629      	mov	r1, r5
 801068e:	4638      	mov	r0, r7
 8010690:	47c0      	blx	r8
 8010692:	4306      	orrs	r6, r0
 8010694:	3568      	adds	r5, #104	; 0x68
 8010696:	e7e9      	b.n	801066c <_fwalk_sglue+0x10>

08010698 <siprintf>:
 8010698:	b40e      	push	{r1, r2, r3}
 801069a:	b500      	push	{lr}
 801069c:	b09c      	sub	sp, #112	; 0x70
 801069e:	ab1d      	add	r3, sp, #116	; 0x74
 80106a0:	9002      	str	r0, [sp, #8]
 80106a2:	9006      	str	r0, [sp, #24]
 80106a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80106a8:	4809      	ldr	r0, [pc, #36]	; (80106d0 <siprintf+0x38>)
 80106aa:	9107      	str	r1, [sp, #28]
 80106ac:	9104      	str	r1, [sp, #16]
 80106ae:	4909      	ldr	r1, [pc, #36]	; (80106d4 <siprintf+0x3c>)
 80106b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80106b4:	9105      	str	r1, [sp, #20]
 80106b6:	6800      	ldr	r0, [r0, #0]
 80106b8:	9301      	str	r3, [sp, #4]
 80106ba:	a902      	add	r1, sp, #8
 80106bc:	f001 fbaa 	bl	8011e14 <_svfiprintf_r>
 80106c0:	9b02      	ldr	r3, [sp, #8]
 80106c2:	2200      	movs	r2, #0
 80106c4:	701a      	strb	r2, [r3, #0]
 80106c6:	b01c      	add	sp, #112	; 0x70
 80106c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80106cc:	b003      	add	sp, #12
 80106ce:	4770      	bx	lr
 80106d0:	2400006c 	.word	0x2400006c
 80106d4:	ffff0208 	.word	0xffff0208

080106d8 <__sread>:
 80106d8:	b510      	push	{r4, lr}
 80106da:	460c      	mov	r4, r1
 80106dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106e0:	f000 f86c 	bl	80107bc <_read_r>
 80106e4:	2800      	cmp	r0, #0
 80106e6:	bfab      	itete	ge
 80106e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80106ea:	89a3      	ldrhlt	r3, [r4, #12]
 80106ec:	181b      	addge	r3, r3, r0
 80106ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80106f2:	bfac      	ite	ge
 80106f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80106f6:	81a3      	strhlt	r3, [r4, #12]
 80106f8:	bd10      	pop	{r4, pc}

080106fa <__swrite>:
 80106fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106fe:	461f      	mov	r7, r3
 8010700:	898b      	ldrh	r3, [r1, #12]
 8010702:	05db      	lsls	r3, r3, #23
 8010704:	4605      	mov	r5, r0
 8010706:	460c      	mov	r4, r1
 8010708:	4616      	mov	r6, r2
 801070a:	d505      	bpl.n	8010718 <__swrite+0x1e>
 801070c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010710:	2302      	movs	r3, #2
 8010712:	2200      	movs	r2, #0
 8010714:	f000 f840 	bl	8010798 <_lseek_r>
 8010718:	89a3      	ldrh	r3, [r4, #12]
 801071a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801071e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010722:	81a3      	strh	r3, [r4, #12]
 8010724:	4632      	mov	r2, r6
 8010726:	463b      	mov	r3, r7
 8010728:	4628      	mov	r0, r5
 801072a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801072e:	f000 b857 	b.w	80107e0 <_write_r>

08010732 <__sseek>:
 8010732:	b510      	push	{r4, lr}
 8010734:	460c      	mov	r4, r1
 8010736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801073a:	f000 f82d 	bl	8010798 <_lseek_r>
 801073e:	1c43      	adds	r3, r0, #1
 8010740:	89a3      	ldrh	r3, [r4, #12]
 8010742:	bf15      	itete	ne
 8010744:	6560      	strne	r0, [r4, #84]	; 0x54
 8010746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801074a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801074e:	81a3      	strheq	r3, [r4, #12]
 8010750:	bf18      	it	ne
 8010752:	81a3      	strhne	r3, [r4, #12]
 8010754:	bd10      	pop	{r4, pc}

08010756 <__sclose>:
 8010756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801075a:	f000 b80d 	b.w	8010778 <_close_r>

0801075e <memset>:
 801075e:	4402      	add	r2, r0
 8010760:	4603      	mov	r3, r0
 8010762:	4293      	cmp	r3, r2
 8010764:	d100      	bne.n	8010768 <memset+0xa>
 8010766:	4770      	bx	lr
 8010768:	f803 1b01 	strb.w	r1, [r3], #1
 801076c:	e7f9      	b.n	8010762 <memset+0x4>
	...

08010770 <_localeconv_r>:
 8010770:	4800      	ldr	r0, [pc, #0]	; (8010774 <_localeconv_r+0x4>)
 8010772:	4770      	bx	lr
 8010774:	24000160 	.word	0x24000160

08010778 <_close_r>:
 8010778:	b538      	push	{r3, r4, r5, lr}
 801077a:	4d06      	ldr	r5, [pc, #24]	; (8010794 <_close_r+0x1c>)
 801077c:	2300      	movs	r3, #0
 801077e:	4604      	mov	r4, r0
 8010780:	4608      	mov	r0, r1
 8010782:	602b      	str	r3, [r5, #0]
 8010784:	f7f2 f8d1 	bl	800292a <_close>
 8010788:	1c43      	adds	r3, r0, #1
 801078a:	d102      	bne.n	8010792 <_close_r+0x1a>
 801078c:	682b      	ldr	r3, [r5, #0]
 801078e:	b103      	cbz	r3, 8010792 <_close_r+0x1a>
 8010790:	6023      	str	r3, [r4, #0]
 8010792:	bd38      	pop	{r3, r4, r5, pc}
 8010794:	240009a0 	.word	0x240009a0

08010798 <_lseek_r>:
 8010798:	b538      	push	{r3, r4, r5, lr}
 801079a:	4d07      	ldr	r5, [pc, #28]	; (80107b8 <_lseek_r+0x20>)
 801079c:	4604      	mov	r4, r0
 801079e:	4608      	mov	r0, r1
 80107a0:	4611      	mov	r1, r2
 80107a2:	2200      	movs	r2, #0
 80107a4:	602a      	str	r2, [r5, #0]
 80107a6:	461a      	mov	r2, r3
 80107a8:	f7f2 f8e6 	bl	8002978 <_lseek>
 80107ac:	1c43      	adds	r3, r0, #1
 80107ae:	d102      	bne.n	80107b6 <_lseek_r+0x1e>
 80107b0:	682b      	ldr	r3, [r5, #0]
 80107b2:	b103      	cbz	r3, 80107b6 <_lseek_r+0x1e>
 80107b4:	6023      	str	r3, [r4, #0]
 80107b6:	bd38      	pop	{r3, r4, r5, pc}
 80107b8:	240009a0 	.word	0x240009a0

080107bc <_read_r>:
 80107bc:	b538      	push	{r3, r4, r5, lr}
 80107be:	4d07      	ldr	r5, [pc, #28]	; (80107dc <_read_r+0x20>)
 80107c0:	4604      	mov	r4, r0
 80107c2:	4608      	mov	r0, r1
 80107c4:	4611      	mov	r1, r2
 80107c6:	2200      	movs	r2, #0
 80107c8:	602a      	str	r2, [r5, #0]
 80107ca:	461a      	mov	r2, r3
 80107cc:	f7f2 f874 	bl	80028b8 <_read>
 80107d0:	1c43      	adds	r3, r0, #1
 80107d2:	d102      	bne.n	80107da <_read_r+0x1e>
 80107d4:	682b      	ldr	r3, [r5, #0]
 80107d6:	b103      	cbz	r3, 80107da <_read_r+0x1e>
 80107d8:	6023      	str	r3, [r4, #0]
 80107da:	bd38      	pop	{r3, r4, r5, pc}
 80107dc:	240009a0 	.word	0x240009a0

080107e0 <_write_r>:
 80107e0:	b538      	push	{r3, r4, r5, lr}
 80107e2:	4d07      	ldr	r5, [pc, #28]	; (8010800 <_write_r+0x20>)
 80107e4:	4604      	mov	r4, r0
 80107e6:	4608      	mov	r0, r1
 80107e8:	4611      	mov	r1, r2
 80107ea:	2200      	movs	r2, #0
 80107ec:	602a      	str	r2, [r5, #0]
 80107ee:	461a      	mov	r2, r3
 80107f0:	f7f2 f87f 	bl	80028f2 <_write>
 80107f4:	1c43      	adds	r3, r0, #1
 80107f6:	d102      	bne.n	80107fe <_write_r+0x1e>
 80107f8:	682b      	ldr	r3, [r5, #0]
 80107fa:	b103      	cbz	r3, 80107fe <_write_r+0x1e>
 80107fc:	6023      	str	r3, [r4, #0]
 80107fe:	bd38      	pop	{r3, r4, r5, pc}
 8010800:	240009a0 	.word	0x240009a0

08010804 <__errno>:
 8010804:	4b01      	ldr	r3, [pc, #4]	; (801080c <__errno+0x8>)
 8010806:	6818      	ldr	r0, [r3, #0]
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	2400006c 	.word	0x2400006c

08010810 <__libc_init_array>:
 8010810:	b570      	push	{r4, r5, r6, lr}
 8010812:	4d0d      	ldr	r5, [pc, #52]	; (8010848 <__libc_init_array+0x38>)
 8010814:	4c0d      	ldr	r4, [pc, #52]	; (801084c <__libc_init_array+0x3c>)
 8010816:	1b64      	subs	r4, r4, r5
 8010818:	10a4      	asrs	r4, r4, #2
 801081a:	2600      	movs	r6, #0
 801081c:	42a6      	cmp	r6, r4
 801081e:	d109      	bne.n	8010834 <__libc_init_array+0x24>
 8010820:	4d0b      	ldr	r5, [pc, #44]	; (8010850 <__libc_init_array+0x40>)
 8010822:	4c0c      	ldr	r4, [pc, #48]	; (8010854 <__libc_init_array+0x44>)
 8010824:	f002 f810 	bl	8012848 <_init>
 8010828:	1b64      	subs	r4, r4, r5
 801082a:	10a4      	asrs	r4, r4, #2
 801082c:	2600      	movs	r6, #0
 801082e:	42a6      	cmp	r6, r4
 8010830:	d105      	bne.n	801083e <__libc_init_array+0x2e>
 8010832:	bd70      	pop	{r4, r5, r6, pc}
 8010834:	f855 3b04 	ldr.w	r3, [r5], #4
 8010838:	4798      	blx	r3
 801083a:	3601      	adds	r6, #1
 801083c:	e7ee      	b.n	801081c <__libc_init_array+0xc>
 801083e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010842:	4798      	blx	r3
 8010844:	3601      	adds	r6, #1
 8010846:	e7f2      	b.n	801082e <__libc_init_array+0x1e>
 8010848:	08012dc4 	.word	0x08012dc4
 801084c:	08012dc4 	.word	0x08012dc4
 8010850:	08012dc4 	.word	0x08012dc4
 8010854:	08012dc8 	.word	0x08012dc8

08010858 <__retarget_lock_init_recursive>:
 8010858:	4770      	bx	lr

0801085a <__retarget_lock_acquire_recursive>:
 801085a:	4770      	bx	lr

0801085c <__retarget_lock_release_recursive>:
 801085c:	4770      	bx	lr

0801085e <memcpy>:
 801085e:	440a      	add	r2, r1
 8010860:	4291      	cmp	r1, r2
 8010862:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010866:	d100      	bne.n	801086a <memcpy+0xc>
 8010868:	4770      	bx	lr
 801086a:	b510      	push	{r4, lr}
 801086c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010874:	4291      	cmp	r1, r2
 8010876:	d1f9      	bne.n	801086c <memcpy+0xe>
 8010878:	bd10      	pop	{r4, pc}

0801087a <quorem>:
 801087a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801087e:	6903      	ldr	r3, [r0, #16]
 8010880:	690c      	ldr	r4, [r1, #16]
 8010882:	42a3      	cmp	r3, r4
 8010884:	4607      	mov	r7, r0
 8010886:	db7e      	blt.n	8010986 <quorem+0x10c>
 8010888:	3c01      	subs	r4, #1
 801088a:	f101 0814 	add.w	r8, r1, #20
 801088e:	f100 0514 	add.w	r5, r0, #20
 8010892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010896:	9301      	str	r3, [sp, #4]
 8010898:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801089c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108a0:	3301      	adds	r3, #1
 80108a2:	429a      	cmp	r2, r3
 80108a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80108a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80108ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80108b0:	d331      	bcc.n	8010916 <quorem+0x9c>
 80108b2:	f04f 0e00 	mov.w	lr, #0
 80108b6:	4640      	mov	r0, r8
 80108b8:	46ac      	mov	ip, r5
 80108ba:	46f2      	mov	sl, lr
 80108bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80108c0:	b293      	uxth	r3, r2
 80108c2:	fb06 e303 	mla	r3, r6, r3, lr
 80108c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80108ca:	0c1a      	lsrs	r2, r3, #16
 80108cc:	b29b      	uxth	r3, r3
 80108ce:	ebaa 0303 	sub.w	r3, sl, r3
 80108d2:	f8dc a000 	ldr.w	sl, [ip]
 80108d6:	fa13 f38a 	uxtah	r3, r3, sl
 80108da:	fb06 220e 	mla	r2, r6, lr, r2
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	9b00      	ldr	r3, [sp, #0]
 80108e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80108e6:	b292      	uxth	r2, r2
 80108e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80108ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80108f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80108f4:	4581      	cmp	r9, r0
 80108f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108fa:	f84c 3b04 	str.w	r3, [ip], #4
 80108fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010902:	d2db      	bcs.n	80108bc <quorem+0x42>
 8010904:	f855 300b 	ldr.w	r3, [r5, fp]
 8010908:	b92b      	cbnz	r3, 8010916 <quorem+0x9c>
 801090a:	9b01      	ldr	r3, [sp, #4]
 801090c:	3b04      	subs	r3, #4
 801090e:	429d      	cmp	r5, r3
 8010910:	461a      	mov	r2, r3
 8010912:	d32c      	bcc.n	801096e <quorem+0xf4>
 8010914:	613c      	str	r4, [r7, #16]
 8010916:	4638      	mov	r0, r7
 8010918:	f001 f922 	bl	8011b60 <__mcmp>
 801091c:	2800      	cmp	r0, #0
 801091e:	db22      	blt.n	8010966 <quorem+0xec>
 8010920:	3601      	adds	r6, #1
 8010922:	4629      	mov	r1, r5
 8010924:	2000      	movs	r0, #0
 8010926:	f858 2b04 	ldr.w	r2, [r8], #4
 801092a:	f8d1 c000 	ldr.w	ip, [r1]
 801092e:	b293      	uxth	r3, r2
 8010930:	1ac3      	subs	r3, r0, r3
 8010932:	0c12      	lsrs	r2, r2, #16
 8010934:	fa13 f38c 	uxtah	r3, r3, ip
 8010938:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801093c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010940:	b29b      	uxth	r3, r3
 8010942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010946:	45c1      	cmp	r9, r8
 8010948:	f841 3b04 	str.w	r3, [r1], #4
 801094c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010950:	d2e9      	bcs.n	8010926 <quorem+0xac>
 8010952:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801095a:	b922      	cbnz	r2, 8010966 <quorem+0xec>
 801095c:	3b04      	subs	r3, #4
 801095e:	429d      	cmp	r5, r3
 8010960:	461a      	mov	r2, r3
 8010962:	d30a      	bcc.n	801097a <quorem+0x100>
 8010964:	613c      	str	r4, [r7, #16]
 8010966:	4630      	mov	r0, r6
 8010968:	b003      	add	sp, #12
 801096a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801096e:	6812      	ldr	r2, [r2, #0]
 8010970:	3b04      	subs	r3, #4
 8010972:	2a00      	cmp	r2, #0
 8010974:	d1ce      	bne.n	8010914 <quorem+0x9a>
 8010976:	3c01      	subs	r4, #1
 8010978:	e7c9      	b.n	801090e <quorem+0x94>
 801097a:	6812      	ldr	r2, [r2, #0]
 801097c:	3b04      	subs	r3, #4
 801097e:	2a00      	cmp	r2, #0
 8010980:	d1f0      	bne.n	8010964 <quorem+0xea>
 8010982:	3c01      	subs	r4, #1
 8010984:	e7eb      	b.n	801095e <quorem+0xe4>
 8010986:	2000      	movs	r0, #0
 8010988:	e7ee      	b.n	8010968 <quorem+0xee>
 801098a:	0000      	movs	r0, r0
 801098c:	0000      	movs	r0, r0
	...

08010990 <_dtoa_r>:
 8010990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010994:	ed2d 8b02 	vpush	{d8}
 8010998:	69c5      	ldr	r5, [r0, #28]
 801099a:	b091      	sub	sp, #68	; 0x44
 801099c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80109a0:	ec59 8b10 	vmov	r8, r9, d0
 80109a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80109a6:	9106      	str	r1, [sp, #24]
 80109a8:	4606      	mov	r6, r0
 80109aa:	9208      	str	r2, [sp, #32]
 80109ac:	930c      	str	r3, [sp, #48]	; 0x30
 80109ae:	b975      	cbnz	r5, 80109ce <_dtoa_r+0x3e>
 80109b0:	2010      	movs	r0, #16
 80109b2:	f000 fda5 	bl	8011500 <malloc>
 80109b6:	4602      	mov	r2, r0
 80109b8:	61f0      	str	r0, [r6, #28]
 80109ba:	b920      	cbnz	r0, 80109c6 <_dtoa_r+0x36>
 80109bc:	4ba6      	ldr	r3, [pc, #664]	; (8010c58 <_dtoa_r+0x2c8>)
 80109be:	21ef      	movs	r1, #239	; 0xef
 80109c0:	48a6      	ldr	r0, [pc, #664]	; (8010c5c <_dtoa_r+0x2cc>)
 80109c2:	f001 fbfd 	bl	80121c0 <__assert_func>
 80109c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80109ca:	6005      	str	r5, [r0, #0]
 80109cc:	60c5      	str	r5, [r0, #12]
 80109ce:	69f3      	ldr	r3, [r6, #28]
 80109d0:	6819      	ldr	r1, [r3, #0]
 80109d2:	b151      	cbz	r1, 80109ea <_dtoa_r+0x5a>
 80109d4:	685a      	ldr	r2, [r3, #4]
 80109d6:	604a      	str	r2, [r1, #4]
 80109d8:	2301      	movs	r3, #1
 80109da:	4093      	lsls	r3, r2
 80109dc:	608b      	str	r3, [r1, #8]
 80109de:	4630      	mov	r0, r6
 80109e0:	f000 fe82 	bl	80116e8 <_Bfree>
 80109e4:	69f3      	ldr	r3, [r6, #28]
 80109e6:	2200      	movs	r2, #0
 80109e8:	601a      	str	r2, [r3, #0]
 80109ea:	f1b9 0300 	subs.w	r3, r9, #0
 80109ee:	bfbb      	ittet	lt
 80109f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80109f4:	9303      	strlt	r3, [sp, #12]
 80109f6:	2300      	movge	r3, #0
 80109f8:	2201      	movlt	r2, #1
 80109fa:	bfac      	ite	ge
 80109fc:	6023      	strge	r3, [r4, #0]
 80109fe:	6022      	strlt	r2, [r4, #0]
 8010a00:	4b97      	ldr	r3, [pc, #604]	; (8010c60 <_dtoa_r+0x2d0>)
 8010a02:	9c03      	ldr	r4, [sp, #12]
 8010a04:	43a3      	bics	r3, r4
 8010a06:	d11c      	bne.n	8010a42 <_dtoa_r+0xb2>
 8010a08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a0e:	6013      	str	r3, [r2, #0]
 8010a10:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010a14:	ea53 0308 	orrs.w	r3, r3, r8
 8010a18:	f000 84fb 	beq.w	8011412 <_dtoa_r+0xa82>
 8010a1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a1e:	b963      	cbnz	r3, 8010a3a <_dtoa_r+0xaa>
 8010a20:	4b90      	ldr	r3, [pc, #576]	; (8010c64 <_dtoa_r+0x2d4>)
 8010a22:	e020      	b.n	8010a66 <_dtoa_r+0xd6>
 8010a24:	4b90      	ldr	r3, [pc, #576]	; (8010c68 <_dtoa_r+0x2d8>)
 8010a26:	9301      	str	r3, [sp, #4]
 8010a28:	3308      	adds	r3, #8
 8010a2a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010a2c:	6013      	str	r3, [r2, #0]
 8010a2e:	9801      	ldr	r0, [sp, #4]
 8010a30:	b011      	add	sp, #68	; 0x44
 8010a32:	ecbd 8b02 	vpop	{d8}
 8010a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a3a:	4b8a      	ldr	r3, [pc, #552]	; (8010c64 <_dtoa_r+0x2d4>)
 8010a3c:	9301      	str	r3, [sp, #4]
 8010a3e:	3303      	adds	r3, #3
 8010a40:	e7f3      	b.n	8010a2a <_dtoa_r+0x9a>
 8010a42:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010a46:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4e:	d10c      	bne.n	8010a6a <_dtoa_r+0xda>
 8010a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a52:	2301      	movs	r3, #1
 8010a54:	6013      	str	r3, [r2, #0]
 8010a56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f000 84d7 	beq.w	801140c <_dtoa_r+0xa7c>
 8010a5e:	4b83      	ldr	r3, [pc, #524]	; (8010c6c <_dtoa_r+0x2dc>)
 8010a60:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010a62:	6013      	str	r3, [r2, #0]
 8010a64:	3b01      	subs	r3, #1
 8010a66:	9301      	str	r3, [sp, #4]
 8010a68:	e7e1      	b.n	8010a2e <_dtoa_r+0x9e>
 8010a6a:	aa0e      	add	r2, sp, #56	; 0x38
 8010a6c:	a90f      	add	r1, sp, #60	; 0x3c
 8010a6e:	4630      	mov	r0, r6
 8010a70:	eeb0 0b48 	vmov.f64	d0, d8
 8010a74:	f001 f91a 	bl	8011cac <__d2b>
 8010a78:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8010a7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a7e:	4605      	mov	r5, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d046      	beq.n	8010b12 <_dtoa_r+0x182>
 8010a84:	eeb0 7b48 	vmov.f64	d7, d8
 8010a88:	ee18 1a90 	vmov	r1, s17
 8010a8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010a90:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010a94:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010a98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010a9c:	2000      	movs	r0, #0
 8010a9e:	ee07 1a90 	vmov	s15, r1
 8010aa2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8010aa6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010c40 <_dtoa_r+0x2b0>
 8010aaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010aae:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010c48 <_dtoa_r+0x2b8>
 8010ab2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010ab6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010c50 <_dtoa_r+0x2c0>
 8010aba:	ee07 3a90 	vmov	s15, r3
 8010abe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010ac2:	eeb0 7b46 	vmov.f64	d7, d6
 8010ac6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010aca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010ace:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad6:	ee16 ba90 	vmov	fp, s13
 8010ada:	9009      	str	r0, [sp, #36]	; 0x24
 8010adc:	d508      	bpl.n	8010af0 <_dtoa_r+0x160>
 8010ade:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010ae2:	eeb4 6b47 	vcmp.f64	d6, d7
 8010ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aea:	bf18      	it	ne
 8010aec:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8010af0:	f1bb 0f16 	cmp.w	fp, #22
 8010af4:	d82b      	bhi.n	8010b4e <_dtoa_r+0x1be>
 8010af6:	495e      	ldr	r1, [pc, #376]	; (8010c70 <_dtoa_r+0x2e0>)
 8010af8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8010afc:	ed91 7b00 	vldr	d7, [r1]
 8010b00:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b08:	d501      	bpl.n	8010b0e <_dtoa_r+0x17e>
 8010b0a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010b0e:	2100      	movs	r1, #0
 8010b10:	e01e      	b.n	8010b50 <_dtoa_r+0x1c0>
 8010b12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b14:	4413      	add	r3, r2
 8010b16:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8010b1a:	2920      	cmp	r1, #32
 8010b1c:	bfc1      	itttt	gt
 8010b1e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8010b22:	408c      	lslgt	r4, r1
 8010b24:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8010b28:	fa28 f101 	lsrgt.w	r1, r8, r1
 8010b2c:	bfd6      	itet	le
 8010b2e:	f1c1 0120 	rsble	r1, r1, #32
 8010b32:	4321      	orrgt	r1, r4
 8010b34:	fa08 f101 	lslle.w	r1, r8, r1
 8010b38:	ee07 1a90 	vmov	s15, r1
 8010b3c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010b40:	3b01      	subs	r3, #1
 8010b42:	ee17 1a90 	vmov	r1, s15
 8010b46:	2001      	movs	r0, #1
 8010b48:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010b4c:	e7a7      	b.n	8010a9e <_dtoa_r+0x10e>
 8010b4e:	2101      	movs	r1, #1
 8010b50:	1ad2      	subs	r2, r2, r3
 8010b52:	1e53      	subs	r3, r2, #1
 8010b54:	9305      	str	r3, [sp, #20]
 8010b56:	bf45      	ittet	mi
 8010b58:	f1c2 0301 	rsbmi	r3, r2, #1
 8010b5c:	9304      	strmi	r3, [sp, #16]
 8010b5e:	2300      	movpl	r3, #0
 8010b60:	2300      	movmi	r3, #0
 8010b62:	bf4c      	ite	mi
 8010b64:	9305      	strmi	r3, [sp, #20]
 8010b66:	9304      	strpl	r3, [sp, #16]
 8010b68:	f1bb 0f00 	cmp.w	fp, #0
 8010b6c:	910b      	str	r1, [sp, #44]	; 0x2c
 8010b6e:	db18      	blt.n	8010ba2 <_dtoa_r+0x212>
 8010b70:	9b05      	ldr	r3, [sp, #20]
 8010b72:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010b76:	445b      	add	r3, fp
 8010b78:	9305      	str	r3, [sp, #20]
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	9a06      	ldr	r2, [sp, #24]
 8010b7e:	2a09      	cmp	r2, #9
 8010b80:	d848      	bhi.n	8010c14 <_dtoa_r+0x284>
 8010b82:	2a05      	cmp	r2, #5
 8010b84:	bfc4      	itt	gt
 8010b86:	3a04      	subgt	r2, #4
 8010b88:	9206      	strgt	r2, [sp, #24]
 8010b8a:	9a06      	ldr	r2, [sp, #24]
 8010b8c:	f1a2 0202 	sub.w	r2, r2, #2
 8010b90:	bfcc      	ite	gt
 8010b92:	2400      	movgt	r4, #0
 8010b94:	2401      	movle	r4, #1
 8010b96:	2a03      	cmp	r2, #3
 8010b98:	d847      	bhi.n	8010c2a <_dtoa_r+0x29a>
 8010b9a:	e8df f002 	tbb	[pc, r2]
 8010b9e:	2d0b      	.short	0x2d0b
 8010ba0:	392b      	.short	0x392b
 8010ba2:	9b04      	ldr	r3, [sp, #16]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	eba3 030b 	sub.w	r3, r3, fp
 8010baa:	9304      	str	r3, [sp, #16]
 8010bac:	920a      	str	r2, [sp, #40]	; 0x28
 8010bae:	f1cb 0300 	rsb	r3, fp, #0
 8010bb2:	e7e3      	b.n	8010b7c <_dtoa_r+0x1ec>
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	9207      	str	r2, [sp, #28]
 8010bb8:	9a08      	ldr	r2, [sp, #32]
 8010bba:	2a00      	cmp	r2, #0
 8010bbc:	dc38      	bgt.n	8010c30 <_dtoa_r+0x2a0>
 8010bbe:	f04f 0a01 	mov.w	sl, #1
 8010bc2:	46d1      	mov	r9, sl
 8010bc4:	4652      	mov	r2, sl
 8010bc6:	f8cd a020 	str.w	sl, [sp, #32]
 8010bca:	69f7      	ldr	r7, [r6, #28]
 8010bcc:	2100      	movs	r1, #0
 8010bce:	2004      	movs	r0, #4
 8010bd0:	f100 0c14 	add.w	ip, r0, #20
 8010bd4:	4594      	cmp	ip, r2
 8010bd6:	d930      	bls.n	8010c3a <_dtoa_r+0x2aa>
 8010bd8:	6079      	str	r1, [r7, #4]
 8010bda:	4630      	mov	r0, r6
 8010bdc:	930d      	str	r3, [sp, #52]	; 0x34
 8010bde:	f000 fd43 	bl	8011668 <_Balloc>
 8010be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010be4:	9001      	str	r0, [sp, #4]
 8010be6:	4602      	mov	r2, r0
 8010be8:	2800      	cmp	r0, #0
 8010bea:	d145      	bne.n	8010c78 <_dtoa_r+0x2e8>
 8010bec:	4b21      	ldr	r3, [pc, #132]	; (8010c74 <_dtoa_r+0x2e4>)
 8010bee:	f240 11af 	movw	r1, #431	; 0x1af
 8010bf2:	e6e5      	b.n	80109c0 <_dtoa_r+0x30>
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	e7de      	b.n	8010bb6 <_dtoa_r+0x226>
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	9207      	str	r2, [sp, #28]
 8010bfc:	9a08      	ldr	r2, [sp, #32]
 8010bfe:	eb0b 0a02 	add.w	sl, fp, r2
 8010c02:	f10a 0901 	add.w	r9, sl, #1
 8010c06:	464a      	mov	r2, r9
 8010c08:	2a01      	cmp	r2, #1
 8010c0a:	bfb8      	it	lt
 8010c0c:	2201      	movlt	r2, #1
 8010c0e:	e7dc      	b.n	8010bca <_dtoa_r+0x23a>
 8010c10:	2201      	movs	r2, #1
 8010c12:	e7f2      	b.n	8010bfa <_dtoa_r+0x26a>
 8010c14:	2401      	movs	r4, #1
 8010c16:	2200      	movs	r2, #0
 8010c18:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8010c1c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010c20:	2100      	movs	r1, #0
 8010c22:	46d1      	mov	r9, sl
 8010c24:	2212      	movs	r2, #18
 8010c26:	9108      	str	r1, [sp, #32]
 8010c28:	e7cf      	b.n	8010bca <_dtoa_r+0x23a>
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	9207      	str	r2, [sp, #28]
 8010c2e:	e7f5      	b.n	8010c1c <_dtoa_r+0x28c>
 8010c30:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010c34:	46d1      	mov	r9, sl
 8010c36:	4652      	mov	r2, sl
 8010c38:	e7c7      	b.n	8010bca <_dtoa_r+0x23a>
 8010c3a:	3101      	adds	r1, #1
 8010c3c:	0040      	lsls	r0, r0, #1
 8010c3e:	e7c7      	b.n	8010bd0 <_dtoa_r+0x240>
 8010c40:	636f4361 	.word	0x636f4361
 8010c44:	3fd287a7 	.word	0x3fd287a7
 8010c48:	8b60c8b3 	.word	0x8b60c8b3
 8010c4c:	3fc68a28 	.word	0x3fc68a28
 8010c50:	509f79fb 	.word	0x509f79fb
 8010c54:	3fd34413 	.word	0x3fd34413
 8010c58:	08012a89 	.word	0x08012a89
 8010c5c:	08012aa0 	.word	0x08012aa0
 8010c60:	7ff00000 	.word	0x7ff00000
 8010c64:	08012a85 	.word	0x08012a85
 8010c68:	08012a7c 	.word	0x08012a7c
 8010c6c:	08012a59 	.word	0x08012a59
 8010c70:	08012b90 	.word	0x08012b90
 8010c74:	08012af8 	.word	0x08012af8
 8010c78:	69f2      	ldr	r2, [r6, #28]
 8010c7a:	9901      	ldr	r1, [sp, #4]
 8010c7c:	6011      	str	r1, [r2, #0]
 8010c7e:	f1b9 0f0e 	cmp.w	r9, #14
 8010c82:	d86c      	bhi.n	8010d5e <_dtoa_r+0x3ce>
 8010c84:	2c00      	cmp	r4, #0
 8010c86:	d06a      	beq.n	8010d5e <_dtoa_r+0x3ce>
 8010c88:	f1bb 0f00 	cmp.w	fp, #0
 8010c8c:	f340 80a0 	ble.w	8010dd0 <_dtoa_r+0x440>
 8010c90:	4ac1      	ldr	r2, [pc, #772]	; (8010f98 <_dtoa_r+0x608>)
 8010c92:	f00b 010f 	and.w	r1, fp, #15
 8010c96:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010c9a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010c9e:	ed92 7b00 	vldr	d7, [r2]
 8010ca2:	ea4f 122b 	mov.w	r2, fp, asr #4
 8010ca6:	f000 8087 	beq.w	8010db8 <_dtoa_r+0x428>
 8010caa:	49bc      	ldr	r1, [pc, #752]	; (8010f9c <_dtoa_r+0x60c>)
 8010cac:	ed91 6b08 	vldr	d6, [r1, #32]
 8010cb0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010cb4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010cb8:	f002 020f 	and.w	r2, r2, #15
 8010cbc:	2103      	movs	r1, #3
 8010cbe:	48b7      	ldr	r0, [pc, #732]	; (8010f9c <_dtoa_r+0x60c>)
 8010cc0:	2a00      	cmp	r2, #0
 8010cc2:	d17b      	bne.n	8010dbc <_dtoa_r+0x42c>
 8010cc4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010cc8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010ccc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010cd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010cd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010cd6:	2a00      	cmp	r2, #0
 8010cd8:	f000 80a0 	beq.w	8010e1c <_dtoa_r+0x48c>
 8010cdc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010ce0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce8:	f140 8098 	bpl.w	8010e1c <_dtoa_r+0x48c>
 8010cec:	f1b9 0f00 	cmp.w	r9, #0
 8010cf0:	f000 8094 	beq.w	8010e1c <_dtoa_r+0x48c>
 8010cf4:	f1ba 0f00 	cmp.w	sl, #0
 8010cf8:	dd2f      	ble.n	8010d5a <_dtoa_r+0x3ca>
 8010cfa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010cfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d02:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d06:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8010d0a:	3101      	adds	r1, #1
 8010d0c:	4654      	mov	r4, sl
 8010d0e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d12:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010d16:	ee07 1a90 	vmov	s15, r1
 8010d1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010d1e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010d22:	ee15 7a90 	vmov	r7, s11
 8010d26:	ec51 0b15 	vmov	r0, r1, d5
 8010d2a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8010d2e:	2c00      	cmp	r4, #0
 8010d30:	d177      	bne.n	8010e22 <_dtoa_r+0x492>
 8010d32:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010d36:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010d3a:	ec41 0b17 	vmov	d7, r0, r1
 8010d3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d46:	f300 826a 	bgt.w	801121e <_dtoa_r+0x88e>
 8010d4a:	eeb1 7b47 	vneg.f64	d7, d7
 8010d4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d56:	f100 8260 	bmi.w	801121a <_dtoa_r+0x88a>
 8010d5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010d5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010d60:	2a00      	cmp	r2, #0
 8010d62:	f2c0 811d 	blt.w	8010fa0 <_dtoa_r+0x610>
 8010d66:	f1bb 0f0e 	cmp.w	fp, #14
 8010d6a:	f300 8119 	bgt.w	8010fa0 <_dtoa_r+0x610>
 8010d6e:	4b8a      	ldr	r3, [pc, #552]	; (8010f98 <_dtoa_r+0x608>)
 8010d70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010d74:	ed93 6b00 	vldr	d6, [r3]
 8010d78:	9b08      	ldr	r3, [sp, #32]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	f280 80b7 	bge.w	8010eee <_dtoa_r+0x55e>
 8010d80:	f1b9 0f00 	cmp.w	r9, #0
 8010d84:	f300 80b3 	bgt.w	8010eee <_dtoa_r+0x55e>
 8010d88:	f040 8246 	bne.w	8011218 <_dtoa_r+0x888>
 8010d8c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010d90:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010d94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d98:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da0:	464c      	mov	r4, r9
 8010da2:	464f      	mov	r7, r9
 8010da4:	f280 821c 	bge.w	80111e0 <_dtoa_r+0x850>
 8010da8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010dac:	2331      	movs	r3, #49	; 0x31
 8010dae:	f808 3b01 	strb.w	r3, [r8], #1
 8010db2:	f10b 0b01 	add.w	fp, fp, #1
 8010db6:	e218      	b.n	80111ea <_dtoa_r+0x85a>
 8010db8:	2102      	movs	r1, #2
 8010dba:	e780      	b.n	8010cbe <_dtoa_r+0x32e>
 8010dbc:	07d4      	lsls	r4, r2, #31
 8010dbe:	d504      	bpl.n	8010dca <_dtoa_r+0x43a>
 8010dc0:	ed90 6b00 	vldr	d6, [r0]
 8010dc4:	3101      	adds	r1, #1
 8010dc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010dca:	1052      	asrs	r2, r2, #1
 8010dcc:	3008      	adds	r0, #8
 8010dce:	e777      	b.n	8010cc0 <_dtoa_r+0x330>
 8010dd0:	d022      	beq.n	8010e18 <_dtoa_r+0x488>
 8010dd2:	f1cb 0200 	rsb	r2, fp, #0
 8010dd6:	4970      	ldr	r1, [pc, #448]	; (8010f98 <_dtoa_r+0x608>)
 8010dd8:	f002 000f 	and.w	r0, r2, #15
 8010ddc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010de0:	ed91 7b00 	vldr	d7, [r1]
 8010de4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010de8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010dec:	486b      	ldr	r0, [pc, #428]	; (8010f9c <_dtoa_r+0x60c>)
 8010dee:	1112      	asrs	r2, r2, #4
 8010df0:	2400      	movs	r4, #0
 8010df2:	2102      	movs	r1, #2
 8010df4:	b92a      	cbnz	r2, 8010e02 <_dtoa_r+0x472>
 8010df6:	2c00      	cmp	r4, #0
 8010df8:	f43f af6a 	beq.w	8010cd0 <_dtoa_r+0x340>
 8010dfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e00:	e766      	b.n	8010cd0 <_dtoa_r+0x340>
 8010e02:	07d7      	lsls	r7, r2, #31
 8010e04:	d505      	bpl.n	8010e12 <_dtoa_r+0x482>
 8010e06:	ed90 6b00 	vldr	d6, [r0]
 8010e0a:	3101      	adds	r1, #1
 8010e0c:	2401      	movs	r4, #1
 8010e0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e12:	1052      	asrs	r2, r2, #1
 8010e14:	3008      	adds	r0, #8
 8010e16:	e7ed      	b.n	8010df4 <_dtoa_r+0x464>
 8010e18:	2102      	movs	r1, #2
 8010e1a:	e759      	b.n	8010cd0 <_dtoa_r+0x340>
 8010e1c:	465a      	mov	r2, fp
 8010e1e:	464c      	mov	r4, r9
 8010e20:	e775      	b.n	8010d0e <_dtoa_r+0x37e>
 8010e22:	ec41 0b17 	vmov	d7, r0, r1
 8010e26:	495c      	ldr	r1, [pc, #368]	; (8010f98 <_dtoa_r+0x608>)
 8010e28:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8010e2c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8010e30:	9901      	ldr	r1, [sp, #4]
 8010e32:	440c      	add	r4, r1
 8010e34:	9907      	ldr	r1, [sp, #28]
 8010e36:	b351      	cbz	r1, 8010e8e <_dtoa_r+0x4fe>
 8010e38:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010e3c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010e40:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010e44:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010e48:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010e4c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010e50:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010e54:	ee14 1a90 	vmov	r1, s9
 8010e58:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010e5c:	3130      	adds	r1, #48	; 0x30
 8010e5e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010e62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e6a:	f808 1b01 	strb.w	r1, [r8], #1
 8010e6e:	d439      	bmi.n	8010ee4 <_dtoa_r+0x554>
 8010e70:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010e74:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e7c:	d472      	bmi.n	8010f64 <_dtoa_r+0x5d4>
 8010e7e:	45a0      	cmp	r8, r4
 8010e80:	f43f af6b 	beq.w	8010d5a <_dtoa_r+0x3ca>
 8010e84:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010e88:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010e8c:	e7e0      	b.n	8010e50 <_dtoa_r+0x4c0>
 8010e8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010e92:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010e96:	4620      	mov	r0, r4
 8010e98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010e9c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010ea0:	ee14 1a90 	vmov	r1, s9
 8010ea4:	3130      	adds	r1, #48	; 0x30
 8010ea6:	f808 1b01 	strb.w	r1, [r8], #1
 8010eaa:	45a0      	cmp	r8, r4
 8010eac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010eb0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010eb4:	d118      	bne.n	8010ee8 <_dtoa_r+0x558>
 8010eb6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010eba:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010ebe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec6:	dc4d      	bgt.n	8010f64 <_dtoa_r+0x5d4>
 8010ec8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010ecc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed4:	f57f af41 	bpl.w	8010d5a <_dtoa_r+0x3ca>
 8010ed8:	4680      	mov	r8, r0
 8010eda:	3801      	subs	r0, #1
 8010edc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010ee0:	2b30      	cmp	r3, #48	; 0x30
 8010ee2:	d0f9      	beq.n	8010ed8 <_dtoa_r+0x548>
 8010ee4:	4693      	mov	fp, r2
 8010ee6:	e02a      	b.n	8010f3e <_dtoa_r+0x5ae>
 8010ee8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010eec:	e7d6      	b.n	8010e9c <_dtoa_r+0x50c>
 8010eee:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ef2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010ef6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010efa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010efe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010f02:	ee15 3a10 	vmov	r3, s10
 8010f06:	3330      	adds	r3, #48	; 0x30
 8010f08:	f808 3b01 	strb.w	r3, [r8], #1
 8010f0c:	9b01      	ldr	r3, [sp, #4]
 8010f0e:	eba8 0303 	sub.w	r3, r8, r3
 8010f12:	4599      	cmp	r9, r3
 8010f14:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010f18:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010f1c:	d133      	bne.n	8010f86 <_dtoa_r+0x5f6>
 8010f1e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f2a:	dc1a      	bgt.n	8010f62 <_dtoa_r+0x5d2>
 8010f2c:	eeb4 7b46 	vcmp.f64	d7, d6
 8010f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f34:	d103      	bne.n	8010f3e <_dtoa_r+0x5ae>
 8010f36:	ee15 3a10 	vmov	r3, s10
 8010f3a:	07d9      	lsls	r1, r3, #31
 8010f3c:	d411      	bmi.n	8010f62 <_dtoa_r+0x5d2>
 8010f3e:	4629      	mov	r1, r5
 8010f40:	4630      	mov	r0, r6
 8010f42:	f000 fbd1 	bl	80116e8 <_Bfree>
 8010f46:	2300      	movs	r3, #0
 8010f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f4a:	f888 3000 	strb.w	r3, [r8]
 8010f4e:	f10b 0301 	add.w	r3, fp, #1
 8010f52:	6013      	str	r3, [r2, #0]
 8010f54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f43f ad69 	beq.w	8010a2e <_dtoa_r+0x9e>
 8010f5c:	f8c3 8000 	str.w	r8, [r3]
 8010f60:	e565      	b.n	8010a2e <_dtoa_r+0x9e>
 8010f62:	465a      	mov	r2, fp
 8010f64:	4643      	mov	r3, r8
 8010f66:	4698      	mov	r8, r3
 8010f68:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8010f6c:	2939      	cmp	r1, #57	; 0x39
 8010f6e:	d106      	bne.n	8010f7e <_dtoa_r+0x5ee>
 8010f70:	9901      	ldr	r1, [sp, #4]
 8010f72:	4299      	cmp	r1, r3
 8010f74:	d1f7      	bne.n	8010f66 <_dtoa_r+0x5d6>
 8010f76:	9801      	ldr	r0, [sp, #4]
 8010f78:	2130      	movs	r1, #48	; 0x30
 8010f7a:	3201      	adds	r2, #1
 8010f7c:	7001      	strb	r1, [r0, #0]
 8010f7e:	7819      	ldrb	r1, [r3, #0]
 8010f80:	3101      	adds	r1, #1
 8010f82:	7019      	strb	r1, [r3, #0]
 8010f84:	e7ae      	b.n	8010ee4 <_dtoa_r+0x554>
 8010f86:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010f8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f92:	d1b2      	bne.n	8010efa <_dtoa_r+0x56a>
 8010f94:	e7d3      	b.n	8010f3e <_dtoa_r+0x5ae>
 8010f96:	bf00      	nop
 8010f98:	08012b90 	.word	0x08012b90
 8010f9c:	08012b68 	.word	0x08012b68
 8010fa0:	9907      	ldr	r1, [sp, #28]
 8010fa2:	2900      	cmp	r1, #0
 8010fa4:	f000 80d0 	beq.w	8011148 <_dtoa_r+0x7b8>
 8010fa8:	9906      	ldr	r1, [sp, #24]
 8010faa:	2901      	cmp	r1, #1
 8010fac:	f300 80b4 	bgt.w	8011118 <_dtoa_r+0x788>
 8010fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010fb2:	2900      	cmp	r1, #0
 8010fb4:	f000 80ac 	beq.w	8011110 <_dtoa_r+0x780>
 8010fb8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010fbc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010fc0:	461c      	mov	r4, r3
 8010fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8010fc4:	9b04      	ldr	r3, [sp, #16]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	9304      	str	r3, [sp, #16]
 8010fca:	9b05      	ldr	r3, [sp, #20]
 8010fcc:	2101      	movs	r1, #1
 8010fce:	4413      	add	r3, r2
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	9305      	str	r3, [sp, #20]
 8010fd4:	f000 fc3e 	bl	8011854 <__i2b>
 8010fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fda:	4607      	mov	r7, r0
 8010fdc:	f1b8 0f00 	cmp.w	r8, #0
 8010fe0:	d00d      	beq.n	8010ffe <_dtoa_r+0x66e>
 8010fe2:	9a05      	ldr	r2, [sp, #20]
 8010fe4:	2a00      	cmp	r2, #0
 8010fe6:	dd0a      	ble.n	8010ffe <_dtoa_r+0x66e>
 8010fe8:	4542      	cmp	r2, r8
 8010fea:	9904      	ldr	r1, [sp, #16]
 8010fec:	bfa8      	it	ge
 8010fee:	4642      	movge	r2, r8
 8010ff0:	1a89      	subs	r1, r1, r2
 8010ff2:	9104      	str	r1, [sp, #16]
 8010ff4:	9905      	ldr	r1, [sp, #20]
 8010ff6:	eba8 0802 	sub.w	r8, r8, r2
 8010ffa:	1a8a      	subs	r2, r1, r2
 8010ffc:	9205      	str	r2, [sp, #20]
 8010ffe:	b303      	cbz	r3, 8011042 <_dtoa_r+0x6b2>
 8011000:	9a07      	ldr	r2, [sp, #28]
 8011002:	2a00      	cmp	r2, #0
 8011004:	f000 80a5 	beq.w	8011152 <_dtoa_r+0x7c2>
 8011008:	2c00      	cmp	r4, #0
 801100a:	dd13      	ble.n	8011034 <_dtoa_r+0x6a4>
 801100c:	4639      	mov	r1, r7
 801100e:	4622      	mov	r2, r4
 8011010:	4630      	mov	r0, r6
 8011012:	930d      	str	r3, [sp, #52]	; 0x34
 8011014:	f000 fcde 	bl	80119d4 <__pow5mult>
 8011018:	462a      	mov	r2, r5
 801101a:	4601      	mov	r1, r0
 801101c:	4607      	mov	r7, r0
 801101e:	4630      	mov	r0, r6
 8011020:	f000 fc2e 	bl	8011880 <__multiply>
 8011024:	4629      	mov	r1, r5
 8011026:	9009      	str	r0, [sp, #36]	; 0x24
 8011028:	4630      	mov	r0, r6
 801102a:	f000 fb5d 	bl	80116e8 <_Bfree>
 801102e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011030:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011032:	4615      	mov	r5, r2
 8011034:	1b1a      	subs	r2, r3, r4
 8011036:	d004      	beq.n	8011042 <_dtoa_r+0x6b2>
 8011038:	4629      	mov	r1, r5
 801103a:	4630      	mov	r0, r6
 801103c:	f000 fcca 	bl	80119d4 <__pow5mult>
 8011040:	4605      	mov	r5, r0
 8011042:	2101      	movs	r1, #1
 8011044:	4630      	mov	r0, r6
 8011046:	f000 fc05 	bl	8011854 <__i2b>
 801104a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801104c:	2b00      	cmp	r3, #0
 801104e:	4604      	mov	r4, r0
 8011050:	f340 8081 	ble.w	8011156 <_dtoa_r+0x7c6>
 8011054:	461a      	mov	r2, r3
 8011056:	4601      	mov	r1, r0
 8011058:	4630      	mov	r0, r6
 801105a:	f000 fcbb 	bl	80119d4 <__pow5mult>
 801105e:	9b06      	ldr	r3, [sp, #24]
 8011060:	2b01      	cmp	r3, #1
 8011062:	4604      	mov	r4, r0
 8011064:	dd7a      	ble.n	801115c <_dtoa_r+0x7cc>
 8011066:	2300      	movs	r3, #0
 8011068:	9309      	str	r3, [sp, #36]	; 0x24
 801106a:	6922      	ldr	r2, [r4, #16]
 801106c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011070:	6910      	ldr	r0, [r2, #16]
 8011072:	f000 fba1 	bl	80117b8 <__hi0bits>
 8011076:	f1c0 0020 	rsb	r0, r0, #32
 801107a:	9b05      	ldr	r3, [sp, #20]
 801107c:	4418      	add	r0, r3
 801107e:	f010 001f 	ands.w	r0, r0, #31
 8011082:	f000 8093 	beq.w	80111ac <_dtoa_r+0x81c>
 8011086:	f1c0 0220 	rsb	r2, r0, #32
 801108a:	2a04      	cmp	r2, #4
 801108c:	f340 8085 	ble.w	801119a <_dtoa_r+0x80a>
 8011090:	9b04      	ldr	r3, [sp, #16]
 8011092:	f1c0 001c 	rsb	r0, r0, #28
 8011096:	4403      	add	r3, r0
 8011098:	9304      	str	r3, [sp, #16]
 801109a:	9b05      	ldr	r3, [sp, #20]
 801109c:	4480      	add	r8, r0
 801109e:	4403      	add	r3, r0
 80110a0:	9305      	str	r3, [sp, #20]
 80110a2:	9b04      	ldr	r3, [sp, #16]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	dd05      	ble.n	80110b4 <_dtoa_r+0x724>
 80110a8:	4629      	mov	r1, r5
 80110aa:	461a      	mov	r2, r3
 80110ac:	4630      	mov	r0, r6
 80110ae:	f000 fceb 	bl	8011a88 <__lshift>
 80110b2:	4605      	mov	r5, r0
 80110b4:	9b05      	ldr	r3, [sp, #20]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	dd05      	ble.n	80110c6 <_dtoa_r+0x736>
 80110ba:	4621      	mov	r1, r4
 80110bc:	461a      	mov	r2, r3
 80110be:	4630      	mov	r0, r6
 80110c0:	f000 fce2 	bl	8011a88 <__lshift>
 80110c4:	4604      	mov	r4, r0
 80110c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d071      	beq.n	80111b0 <_dtoa_r+0x820>
 80110cc:	4621      	mov	r1, r4
 80110ce:	4628      	mov	r0, r5
 80110d0:	f000 fd46 	bl	8011b60 <__mcmp>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	da6b      	bge.n	80111b0 <_dtoa_r+0x820>
 80110d8:	2300      	movs	r3, #0
 80110da:	4629      	mov	r1, r5
 80110dc:	220a      	movs	r2, #10
 80110de:	4630      	mov	r0, r6
 80110e0:	f000 fb24 	bl	801172c <__multadd>
 80110e4:	9b07      	ldr	r3, [sp, #28]
 80110e6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80110ea:	4605      	mov	r5, r0
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	f000 8197 	beq.w	8011420 <_dtoa_r+0xa90>
 80110f2:	4639      	mov	r1, r7
 80110f4:	2300      	movs	r3, #0
 80110f6:	220a      	movs	r2, #10
 80110f8:	4630      	mov	r0, r6
 80110fa:	f000 fb17 	bl	801172c <__multadd>
 80110fe:	f1ba 0f00 	cmp.w	sl, #0
 8011102:	4607      	mov	r7, r0
 8011104:	f300 8093 	bgt.w	801122e <_dtoa_r+0x89e>
 8011108:	9b06      	ldr	r3, [sp, #24]
 801110a:	2b02      	cmp	r3, #2
 801110c:	dc57      	bgt.n	80111be <_dtoa_r+0x82e>
 801110e:	e08e      	b.n	801122e <_dtoa_r+0x89e>
 8011110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011112:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011116:	e751      	b.n	8010fbc <_dtoa_r+0x62c>
 8011118:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801111c:	42a3      	cmp	r3, r4
 801111e:	bfbf      	itttt	lt
 8011120:	1ae2      	sublt	r2, r4, r3
 8011122:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011124:	189b      	addlt	r3, r3, r2
 8011126:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011128:	bfae      	itee	ge
 801112a:	1b1c      	subge	r4, r3, r4
 801112c:	4623      	movlt	r3, r4
 801112e:	2400      	movlt	r4, #0
 8011130:	f1b9 0f00 	cmp.w	r9, #0
 8011134:	bfb5      	itete	lt
 8011136:	9a04      	ldrlt	r2, [sp, #16]
 8011138:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801113c:	eba2 0809 	sublt.w	r8, r2, r9
 8011140:	464a      	movge	r2, r9
 8011142:	bfb8      	it	lt
 8011144:	2200      	movlt	r2, #0
 8011146:	e73c      	b.n	8010fc2 <_dtoa_r+0x632>
 8011148:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801114c:	9f07      	ldr	r7, [sp, #28]
 801114e:	461c      	mov	r4, r3
 8011150:	e744      	b.n	8010fdc <_dtoa_r+0x64c>
 8011152:	461a      	mov	r2, r3
 8011154:	e770      	b.n	8011038 <_dtoa_r+0x6a8>
 8011156:	9b06      	ldr	r3, [sp, #24]
 8011158:	2b01      	cmp	r3, #1
 801115a:	dc18      	bgt.n	801118e <_dtoa_r+0x7fe>
 801115c:	9b02      	ldr	r3, [sp, #8]
 801115e:	b9b3      	cbnz	r3, 801118e <_dtoa_r+0x7fe>
 8011160:	9b03      	ldr	r3, [sp, #12]
 8011162:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011166:	b9a2      	cbnz	r2, 8011192 <_dtoa_r+0x802>
 8011168:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801116c:	0d12      	lsrs	r2, r2, #20
 801116e:	0512      	lsls	r2, r2, #20
 8011170:	b18a      	cbz	r2, 8011196 <_dtoa_r+0x806>
 8011172:	9b04      	ldr	r3, [sp, #16]
 8011174:	3301      	adds	r3, #1
 8011176:	9304      	str	r3, [sp, #16]
 8011178:	9b05      	ldr	r3, [sp, #20]
 801117a:	3301      	adds	r3, #1
 801117c:	9305      	str	r3, [sp, #20]
 801117e:	2301      	movs	r3, #1
 8011180:	9309      	str	r3, [sp, #36]	; 0x24
 8011182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011184:	2b00      	cmp	r3, #0
 8011186:	f47f af70 	bne.w	801106a <_dtoa_r+0x6da>
 801118a:	2001      	movs	r0, #1
 801118c:	e775      	b.n	801107a <_dtoa_r+0x6ea>
 801118e:	2300      	movs	r3, #0
 8011190:	e7f6      	b.n	8011180 <_dtoa_r+0x7f0>
 8011192:	9b02      	ldr	r3, [sp, #8]
 8011194:	e7f4      	b.n	8011180 <_dtoa_r+0x7f0>
 8011196:	9209      	str	r2, [sp, #36]	; 0x24
 8011198:	e7f3      	b.n	8011182 <_dtoa_r+0x7f2>
 801119a:	d082      	beq.n	80110a2 <_dtoa_r+0x712>
 801119c:	9b04      	ldr	r3, [sp, #16]
 801119e:	321c      	adds	r2, #28
 80111a0:	4413      	add	r3, r2
 80111a2:	9304      	str	r3, [sp, #16]
 80111a4:	9b05      	ldr	r3, [sp, #20]
 80111a6:	4490      	add	r8, r2
 80111a8:	4413      	add	r3, r2
 80111aa:	e779      	b.n	80110a0 <_dtoa_r+0x710>
 80111ac:	4602      	mov	r2, r0
 80111ae:	e7f5      	b.n	801119c <_dtoa_r+0x80c>
 80111b0:	f1b9 0f00 	cmp.w	r9, #0
 80111b4:	dc36      	bgt.n	8011224 <_dtoa_r+0x894>
 80111b6:	9b06      	ldr	r3, [sp, #24]
 80111b8:	2b02      	cmp	r3, #2
 80111ba:	dd33      	ble.n	8011224 <_dtoa_r+0x894>
 80111bc:	46ca      	mov	sl, r9
 80111be:	f1ba 0f00 	cmp.w	sl, #0
 80111c2:	d10d      	bne.n	80111e0 <_dtoa_r+0x850>
 80111c4:	4621      	mov	r1, r4
 80111c6:	4653      	mov	r3, sl
 80111c8:	2205      	movs	r2, #5
 80111ca:	4630      	mov	r0, r6
 80111cc:	f000 faae 	bl	801172c <__multadd>
 80111d0:	4601      	mov	r1, r0
 80111d2:	4604      	mov	r4, r0
 80111d4:	4628      	mov	r0, r5
 80111d6:	f000 fcc3 	bl	8011b60 <__mcmp>
 80111da:	2800      	cmp	r0, #0
 80111dc:	f73f ade4 	bgt.w	8010da8 <_dtoa_r+0x418>
 80111e0:	9b08      	ldr	r3, [sp, #32]
 80111e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80111e6:	ea6f 0b03 	mvn.w	fp, r3
 80111ea:	f04f 0900 	mov.w	r9, #0
 80111ee:	4621      	mov	r1, r4
 80111f0:	4630      	mov	r0, r6
 80111f2:	f000 fa79 	bl	80116e8 <_Bfree>
 80111f6:	2f00      	cmp	r7, #0
 80111f8:	f43f aea1 	beq.w	8010f3e <_dtoa_r+0x5ae>
 80111fc:	f1b9 0f00 	cmp.w	r9, #0
 8011200:	d005      	beq.n	801120e <_dtoa_r+0x87e>
 8011202:	45b9      	cmp	r9, r7
 8011204:	d003      	beq.n	801120e <_dtoa_r+0x87e>
 8011206:	4649      	mov	r1, r9
 8011208:	4630      	mov	r0, r6
 801120a:	f000 fa6d 	bl	80116e8 <_Bfree>
 801120e:	4639      	mov	r1, r7
 8011210:	4630      	mov	r0, r6
 8011212:	f000 fa69 	bl	80116e8 <_Bfree>
 8011216:	e692      	b.n	8010f3e <_dtoa_r+0x5ae>
 8011218:	2400      	movs	r4, #0
 801121a:	4627      	mov	r7, r4
 801121c:	e7e0      	b.n	80111e0 <_dtoa_r+0x850>
 801121e:	4693      	mov	fp, r2
 8011220:	4627      	mov	r7, r4
 8011222:	e5c1      	b.n	8010da8 <_dtoa_r+0x418>
 8011224:	9b07      	ldr	r3, [sp, #28]
 8011226:	46ca      	mov	sl, r9
 8011228:	2b00      	cmp	r3, #0
 801122a:	f000 8100 	beq.w	801142e <_dtoa_r+0xa9e>
 801122e:	f1b8 0f00 	cmp.w	r8, #0
 8011232:	dd05      	ble.n	8011240 <_dtoa_r+0x8b0>
 8011234:	4639      	mov	r1, r7
 8011236:	4642      	mov	r2, r8
 8011238:	4630      	mov	r0, r6
 801123a:	f000 fc25 	bl	8011a88 <__lshift>
 801123e:	4607      	mov	r7, r0
 8011240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011242:	2b00      	cmp	r3, #0
 8011244:	d05d      	beq.n	8011302 <_dtoa_r+0x972>
 8011246:	6879      	ldr	r1, [r7, #4]
 8011248:	4630      	mov	r0, r6
 801124a:	f000 fa0d 	bl	8011668 <_Balloc>
 801124e:	4680      	mov	r8, r0
 8011250:	b928      	cbnz	r0, 801125e <_dtoa_r+0x8ce>
 8011252:	4b82      	ldr	r3, [pc, #520]	; (801145c <_dtoa_r+0xacc>)
 8011254:	4602      	mov	r2, r0
 8011256:	f240 21ef 	movw	r1, #751	; 0x2ef
 801125a:	f7ff bbb1 	b.w	80109c0 <_dtoa_r+0x30>
 801125e:	693a      	ldr	r2, [r7, #16]
 8011260:	3202      	adds	r2, #2
 8011262:	0092      	lsls	r2, r2, #2
 8011264:	f107 010c 	add.w	r1, r7, #12
 8011268:	300c      	adds	r0, #12
 801126a:	f7ff faf8 	bl	801085e <memcpy>
 801126e:	2201      	movs	r2, #1
 8011270:	4641      	mov	r1, r8
 8011272:	4630      	mov	r0, r6
 8011274:	f000 fc08 	bl	8011a88 <__lshift>
 8011278:	9b01      	ldr	r3, [sp, #4]
 801127a:	3301      	adds	r3, #1
 801127c:	9304      	str	r3, [sp, #16]
 801127e:	9b01      	ldr	r3, [sp, #4]
 8011280:	4453      	add	r3, sl
 8011282:	9308      	str	r3, [sp, #32]
 8011284:	9b02      	ldr	r3, [sp, #8]
 8011286:	f003 0301 	and.w	r3, r3, #1
 801128a:	46b9      	mov	r9, r7
 801128c:	9307      	str	r3, [sp, #28]
 801128e:	4607      	mov	r7, r0
 8011290:	9b04      	ldr	r3, [sp, #16]
 8011292:	4621      	mov	r1, r4
 8011294:	3b01      	subs	r3, #1
 8011296:	4628      	mov	r0, r5
 8011298:	9302      	str	r3, [sp, #8]
 801129a:	f7ff faee 	bl	801087a <quorem>
 801129e:	4603      	mov	r3, r0
 80112a0:	3330      	adds	r3, #48	; 0x30
 80112a2:	9005      	str	r0, [sp, #20]
 80112a4:	4649      	mov	r1, r9
 80112a6:	4628      	mov	r0, r5
 80112a8:	9309      	str	r3, [sp, #36]	; 0x24
 80112aa:	f000 fc59 	bl	8011b60 <__mcmp>
 80112ae:	463a      	mov	r2, r7
 80112b0:	4682      	mov	sl, r0
 80112b2:	4621      	mov	r1, r4
 80112b4:	4630      	mov	r0, r6
 80112b6:	f000 fc6f 	bl	8011b98 <__mdiff>
 80112ba:	68c2      	ldr	r2, [r0, #12]
 80112bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112be:	4680      	mov	r8, r0
 80112c0:	bb0a      	cbnz	r2, 8011306 <_dtoa_r+0x976>
 80112c2:	4601      	mov	r1, r0
 80112c4:	4628      	mov	r0, r5
 80112c6:	f000 fc4b 	bl	8011b60 <__mcmp>
 80112ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112cc:	4602      	mov	r2, r0
 80112ce:	4641      	mov	r1, r8
 80112d0:	4630      	mov	r0, r6
 80112d2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80112d6:	f000 fa07 	bl	80116e8 <_Bfree>
 80112da:	9b06      	ldr	r3, [sp, #24]
 80112dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80112de:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80112e2:	ea43 0102 	orr.w	r1, r3, r2
 80112e6:	9b07      	ldr	r3, [sp, #28]
 80112e8:	4319      	orrs	r1, r3
 80112ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112ec:	d10d      	bne.n	801130a <_dtoa_r+0x97a>
 80112ee:	2b39      	cmp	r3, #57	; 0x39
 80112f0:	d029      	beq.n	8011346 <_dtoa_r+0x9b6>
 80112f2:	f1ba 0f00 	cmp.w	sl, #0
 80112f6:	dd01      	ble.n	80112fc <_dtoa_r+0x96c>
 80112f8:	9b05      	ldr	r3, [sp, #20]
 80112fa:	3331      	adds	r3, #49	; 0x31
 80112fc:	9a02      	ldr	r2, [sp, #8]
 80112fe:	7013      	strb	r3, [r2, #0]
 8011300:	e775      	b.n	80111ee <_dtoa_r+0x85e>
 8011302:	4638      	mov	r0, r7
 8011304:	e7b8      	b.n	8011278 <_dtoa_r+0x8e8>
 8011306:	2201      	movs	r2, #1
 8011308:	e7e1      	b.n	80112ce <_dtoa_r+0x93e>
 801130a:	f1ba 0f00 	cmp.w	sl, #0
 801130e:	db06      	blt.n	801131e <_dtoa_r+0x98e>
 8011310:	9906      	ldr	r1, [sp, #24]
 8011312:	ea41 0a0a 	orr.w	sl, r1, sl
 8011316:	9907      	ldr	r1, [sp, #28]
 8011318:	ea5a 0a01 	orrs.w	sl, sl, r1
 801131c:	d120      	bne.n	8011360 <_dtoa_r+0x9d0>
 801131e:	2a00      	cmp	r2, #0
 8011320:	ddec      	ble.n	80112fc <_dtoa_r+0x96c>
 8011322:	4629      	mov	r1, r5
 8011324:	2201      	movs	r2, #1
 8011326:	4630      	mov	r0, r6
 8011328:	9304      	str	r3, [sp, #16]
 801132a:	f000 fbad 	bl	8011a88 <__lshift>
 801132e:	4621      	mov	r1, r4
 8011330:	4605      	mov	r5, r0
 8011332:	f000 fc15 	bl	8011b60 <__mcmp>
 8011336:	2800      	cmp	r0, #0
 8011338:	9b04      	ldr	r3, [sp, #16]
 801133a:	dc02      	bgt.n	8011342 <_dtoa_r+0x9b2>
 801133c:	d1de      	bne.n	80112fc <_dtoa_r+0x96c>
 801133e:	07da      	lsls	r2, r3, #31
 8011340:	d5dc      	bpl.n	80112fc <_dtoa_r+0x96c>
 8011342:	2b39      	cmp	r3, #57	; 0x39
 8011344:	d1d8      	bne.n	80112f8 <_dtoa_r+0x968>
 8011346:	9a02      	ldr	r2, [sp, #8]
 8011348:	2339      	movs	r3, #57	; 0x39
 801134a:	7013      	strb	r3, [r2, #0]
 801134c:	4643      	mov	r3, r8
 801134e:	4698      	mov	r8, r3
 8011350:	3b01      	subs	r3, #1
 8011352:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011356:	2a39      	cmp	r2, #57	; 0x39
 8011358:	d051      	beq.n	80113fe <_dtoa_r+0xa6e>
 801135a:	3201      	adds	r2, #1
 801135c:	701a      	strb	r2, [r3, #0]
 801135e:	e746      	b.n	80111ee <_dtoa_r+0x85e>
 8011360:	2a00      	cmp	r2, #0
 8011362:	dd03      	ble.n	801136c <_dtoa_r+0x9dc>
 8011364:	2b39      	cmp	r3, #57	; 0x39
 8011366:	d0ee      	beq.n	8011346 <_dtoa_r+0x9b6>
 8011368:	3301      	adds	r3, #1
 801136a:	e7c7      	b.n	80112fc <_dtoa_r+0x96c>
 801136c:	9a04      	ldr	r2, [sp, #16]
 801136e:	9908      	ldr	r1, [sp, #32]
 8011370:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011374:	428a      	cmp	r2, r1
 8011376:	d02b      	beq.n	80113d0 <_dtoa_r+0xa40>
 8011378:	4629      	mov	r1, r5
 801137a:	2300      	movs	r3, #0
 801137c:	220a      	movs	r2, #10
 801137e:	4630      	mov	r0, r6
 8011380:	f000 f9d4 	bl	801172c <__multadd>
 8011384:	45b9      	cmp	r9, r7
 8011386:	4605      	mov	r5, r0
 8011388:	f04f 0300 	mov.w	r3, #0
 801138c:	f04f 020a 	mov.w	r2, #10
 8011390:	4649      	mov	r1, r9
 8011392:	4630      	mov	r0, r6
 8011394:	d107      	bne.n	80113a6 <_dtoa_r+0xa16>
 8011396:	f000 f9c9 	bl	801172c <__multadd>
 801139a:	4681      	mov	r9, r0
 801139c:	4607      	mov	r7, r0
 801139e:	9b04      	ldr	r3, [sp, #16]
 80113a0:	3301      	adds	r3, #1
 80113a2:	9304      	str	r3, [sp, #16]
 80113a4:	e774      	b.n	8011290 <_dtoa_r+0x900>
 80113a6:	f000 f9c1 	bl	801172c <__multadd>
 80113aa:	4639      	mov	r1, r7
 80113ac:	4681      	mov	r9, r0
 80113ae:	2300      	movs	r3, #0
 80113b0:	220a      	movs	r2, #10
 80113b2:	4630      	mov	r0, r6
 80113b4:	f000 f9ba 	bl	801172c <__multadd>
 80113b8:	4607      	mov	r7, r0
 80113ba:	e7f0      	b.n	801139e <_dtoa_r+0xa0e>
 80113bc:	f1ba 0f00 	cmp.w	sl, #0
 80113c0:	9a01      	ldr	r2, [sp, #4]
 80113c2:	bfcc      	ite	gt
 80113c4:	46d0      	movgt	r8, sl
 80113c6:	f04f 0801 	movle.w	r8, #1
 80113ca:	4490      	add	r8, r2
 80113cc:	f04f 0900 	mov.w	r9, #0
 80113d0:	4629      	mov	r1, r5
 80113d2:	2201      	movs	r2, #1
 80113d4:	4630      	mov	r0, r6
 80113d6:	9302      	str	r3, [sp, #8]
 80113d8:	f000 fb56 	bl	8011a88 <__lshift>
 80113dc:	4621      	mov	r1, r4
 80113de:	4605      	mov	r5, r0
 80113e0:	f000 fbbe 	bl	8011b60 <__mcmp>
 80113e4:	2800      	cmp	r0, #0
 80113e6:	dcb1      	bgt.n	801134c <_dtoa_r+0x9bc>
 80113e8:	d102      	bne.n	80113f0 <_dtoa_r+0xa60>
 80113ea:	9b02      	ldr	r3, [sp, #8]
 80113ec:	07db      	lsls	r3, r3, #31
 80113ee:	d4ad      	bmi.n	801134c <_dtoa_r+0x9bc>
 80113f0:	4643      	mov	r3, r8
 80113f2:	4698      	mov	r8, r3
 80113f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113f8:	2a30      	cmp	r2, #48	; 0x30
 80113fa:	d0fa      	beq.n	80113f2 <_dtoa_r+0xa62>
 80113fc:	e6f7      	b.n	80111ee <_dtoa_r+0x85e>
 80113fe:	9a01      	ldr	r2, [sp, #4]
 8011400:	429a      	cmp	r2, r3
 8011402:	d1a4      	bne.n	801134e <_dtoa_r+0x9be>
 8011404:	f10b 0b01 	add.w	fp, fp, #1
 8011408:	2331      	movs	r3, #49	; 0x31
 801140a:	e778      	b.n	80112fe <_dtoa_r+0x96e>
 801140c:	4b14      	ldr	r3, [pc, #80]	; (8011460 <_dtoa_r+0xad0>)
 801140e:	f7ff bb2a 	b.w	8010a66 <_dtoa_r+0xd6>
 8011412:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011414:	2b00      	cmp	r3, #0
 8011416:	f47f ab05 	bne.w	8010a24 <_dtoa_r+0x94>
 801141a:	4b12      	ldr	r3, [pc, #72]	; (8011464 <_dtoa_r+0xad4>)
 801141c:	f7ff bb23 	b.w	8010a66 <_dtoa_r+0xd6>
 8011420:	f1ba 0f00 	cmp.w	sl, #0
 8011424:	dc03      	bgt.n	801142e <_dtoa_r+0xa9e>
 8011426:	9b06      	ldr	r3, [sp, #24]
 8011428:	2b02      	cmp	r3, #2
 801142a:	f73f aec8 	bgt.w	80111be <_dtoa_r+0x82e>
 801142e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011432:	4621      	mov	r1, r4
 8011434:	4628      	mov	r0, r5
 8011436:	f7ff fa20 	bl	801087a <quorem>
 801143a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801143e:	f808 3b01 	strb.w	r3, [r8], #1
 8011442:	9a01      	ldr	r2, [sp, #4]
 8011444:	eba8 0202 	sub.w	r2, r8, r2
 8011448:	4592      	cmp	sl, r2
 801144a:	ddb7      	ble.n	80113bc <_dtoa_r+0xa2c>
 801144c:	4629      	mov	r1, r5
 801144e:	2300      	movs	r3, #0
 8011450:	220a      	movs	r2, #10
 8011452:	4630      	mov	r0, r6
 8011454:	f000 f96a 	bl	801172c <__multadd>
 8011458:	4605      	mov	r5, r0
 801145a:	e7ea      	b.n	8011432 <_dtoa_r+0xaa2>
 801145c:	08012af8 	.word	0x08012af8
 8011460:	08012a58 	.word	0x08012a58
 8011464:	08012a7c 	.word	0x08012a7c

08011468 <_free_r>:
 8011468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801146a:	2900      	cmp	r1, #0
 801146c:	d044      	beq.n	80114f8 <_free_r+0x90>
 801146e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011472:	9001      	str	r0, [sp, #4]
 8011474:	2b00      	cmp	r3, #0
 8011476:	f1a1 0404 	sub.w	r4, r1, #4
 801147a:	bfb8      	it	lt
 801147c:	18e4      	addlt	r4, r4, r3
 801147e:	f000 f8e7 	bl	8011650 <__malloc_lock>
 8011482:	4a1e      	ldr	r2, [pc, #120]	; (80114fc <_free_r+0x94>)
 8011484:	9801      	ldr	r0, [sp, #4]
 8011486:	6813      	ldr	r3, [r2, #0]
 8011488:	b933      	cbnz	r3, 8011498 <_free_r+0x30>
 801148a:	6063      	str	r3, [r4, #4]
 801148c:	6014      	str	r4, [r2, #0]
 801148e:	b003      	add	sp, #12
 8011490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011494:	f000 b8e2 	b.w	801165c <__malloc_unlock>
 8011498:	42a3      	cmp	r3, r4
 801149a:	d908      	bls.n	80114ae <_free_r+0x46>
 801149c:	6825      	ldr	r5, [r4, #0]
 801149e:	1961      	adds	r1, r4, r5
 80114a0:	428b      	cmp	r3, r1
 80114a2:	bf01      	itttt	eq
 80114a4:	6819      	ldreq	r1, [r3, #0]
 80114a6:	685b      	ldreq	r3, [r3, #4]
 80114a8:	1949      	addeq	r1, r1, r5
 80114aa:	6021      	streq	r1, [r4, #0]
 80114ac:	e7ed      	b.n	801148a <_free_r+0x22>
 80114ae:	461a      	mov	r2, r3
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	b10b      	cbz	r3, 80114b8 <_free_r+0x50>
 80114b4:	42a3      	cmp	r3, r4
 80114b6:	d9fa      	bls.n	80114ae <_free_r+0x46>
 80114b8:	6811      	ldr	r1, [r2, #0]
 80114ba:	1855      	adds	r5, r2, r1
 80114bc:	42a5      	cmp	r5, r4
 80114be:	d10b      	bne.n	80114d8 <_free_r+0x70>
 80114c0:	6824      	ldr	r4, [r4, #0]
 80114c2:	4421      	add	r1, r4
 80114c4:	1854      	adds	r4, r2, r1
 80114c6:	42a3      	cmp	r3, r4
 80114c8:	6011      	str	r1, [r2, #0]
 80114ca:	d1e0      	bne.n	801148e <_free_r+0x26>
 80114cc:	681c      	ldr	r4, [r3, #0]
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	6053      	str	r3, [r2, #4]
 80114d2:	440c      	add	r4, r1
 80114d4:	6014      	str	r4, [r2, #0]
 80114d6:	e7da      	b.n	801148e <_free_r+0x26>
 80114d8:	d902      	bls.n	80114e0 <_free_r+0x78>
 80114da:	230c      	movs	r3, #12
 80114dc:	6003      	str	r3, [r0, #0]
 80114de:	e7d6      	b.n	801148e <_free_r+0x26>
 80114e0:	6825      	ldr	r5, [r4, #0]
 80114e2:	1961      	adds	r1, r4, r5
 80114e4:	428b      	cmp	r3, r1
 80114e6:	bf04      	itt	eq
 80114e8:	6819      	ldreq	r1, [r3, #0]
 80114ea:	685b      	ldreq	r3, [r3, #4]
 80114ec:	6063      	str	r3, [r4, #4]
 80114ee:	bf04      	itt	eq
 80114f0:	1949      	addeq	r1, r1, r5
 80114f2:	6021      	streq	r1, [r4, #0]
 80114f4:	6054      	str	r4, [r2, #4]
 80114f6:	e7ca      	b.n	801148e <_free_r+0x26>
 80114f8:	b003      	add	sp, #12
 80114fa:	bd30      	pop	{r4, r5, pc}
 80114fc:	240009a8 	.word	0x240009a8

08011500 <malloc>:
 8011500:	4b02      	ldr	r3, [pc, #8]	; (801150c <malloc+0xc>)
 8011502:	4601      	mov	r1, r0
 8011504:	6818      	ldr	r0, [r3, #0]
 8011506:	f000 b823 	b.w	8011550 <_malloc_r>
 801150a:	bf00      	nop
 801150c:	2400006c 	.word	0x2400006c

08011510 <sbrk_aligned>:
 8011510:	b570      	push	{r4, r5, r6, lr}
 8011512:	4e0e      	ldr	r6, [pc, #56]	; (801154c <sbrk_aligned+0x3c>)
 8011514:	460c      	mov	r4, r1
 8011516:	6831      	ldr	r1, [r6, #0]
 8011518:	4605      	mov	r5, r0
 801151a:	b911      	cbnz	r1, 8011522 <sbrk_aligned+0x12>
 801151c:	f000 fe40 	bl	80121a0 <_sbrk_r>
 8011520:	6030      	str	r0, [r6, #0]
 8011522:	4621      	mov	r1, r4
 8011524:	4628      	mov	r0, r5
 8011526:	f000 fe3b 	bl	80121a0 <_sbrk_r>
 801152a:	1c43      	adds	r3, r0, #1
 801152c:	d00a      	beq.n	8011544 <sbrk_aligned+0x34>
 801152e:	1cc4      	adds	r4, r0, #3
 8011530:	f024 0403 	bic.w	r4, r4, #3
 8011534:	42a0      	cmp	r0, r4
 8011536:	d007      	beq.n	8011548 <sbrk_aligned+0x38>
 8011538:	1a21      	subs	r1, r4, r0
 801153a:	4628      	mov	r0, r5
 801153c:	f000 fe30 	bl	80121a0 <_sbrk_r>
 8011540:	3001      	adds	r0, #1
 8011542:	d101      	bne.n	8011548 <sbrk_aligned+0x38>
 8011544:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011548:	4620      	mov	r0, r4
 801154a:	bd70      	pop	{r4, r5, r6, pc}
 801154c:	240009ac 	.word	0x240009ac

08011550 <_malloc_r>:
 8011550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011554:	1ccd      	adds	r5, r1, #3
 8011556:	f025 0503 	bic.w	r5, r5, #3
 801155a:	3508      	adds	r5, #8
 801155c:	2d0c      	cmp	r5, #12
 801155e:	bf38      	it	cc
 8011560:	250c      	movcc	r5, #12
 8011562:	2d00      	cmp	r5, #0
 8011564:	4607      	mov	r7, r0
 8011566:	db01      	blt.n	801156c <_malloc_r+0x1c>
 8011568:	42a9      	cmp	r1, r5
 801156a:	d905      	bls.n	8011578 <_malloc_r+0x28>
 801156c:	230c      	movs	r3, #12
 801156e:	603b      	str	r3, [r7, #0]
 8011570:	2600      	movs	r6, #0
 8011572:	4630      	mov	r0, r6
 8011574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011578:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801164c <_malloc_r+0xfc>
 801157c:	f000 f868 	bl	8011650 <__malloc_lock>
 8011580:	f8d8 3000 	ldr.w	r3, [r8]
 8011584:	461c      	mov	r4, r3
 8011586:	bb5c      	cbnz	r4, 80115e0 <_malloc_r+0x90>
 8011588:	4629      	mov	r1, r5
 801158a:	4638      	mov	r0, r7
 801158c:	f7ff ffc0 	bl	8011510 <sbrk_aligned>
 8011590:	1c43      	adds	r3, r0, #1
 8011592:	4604      	mov	r4, r0
 8011594:	d155      	bne.n	8011642 <_malloc_r+0xf2>
 8011596:	f8d8 4000 	ldr.w	r4, [r8]
 801159a:	4626      	mov	r6, r4
 801159c:	2e00      	cmp	r6, #0
 801159e:	d145      	bne.n	801162c <_malloc_r+0xdc>
 80115a0:	2c00      	cmp	r4, #0
 80115a2:	d048      	beq.n	8011636 <_malloc_r+0xe6>
 80115a4:	6823      	ldr	r3, [r4, #0]
 80115a6:	4631      	mov	r1, r6
 80115a8:	4638      	mov	r0, r7
 80115aa:	eb04 0903 	add.w	r9, r4, r3
 80115ae:	f000 fdf7 	bl	80121a0 <_sbrk_r>
 80115b2:	4581      	cmp	r9, r0
 80115b4:	d13f      	bne.n	8011636 <_malloc_r+0xe6>
 80115b6:	6821      	ldr	r1, [r4, #0]
 80115b8:	1a6d      	subs	r5, r5, r1
 80115ba:	4629      	mov	r1, r5
 80115bc:	4638      	mov	r0, r7
 80115be:	f7ff ffa7 	bl	8011510 <sbrk_aligned>
 80115c2:	3001      	adds	r0, #1
 80115c4:	d037      	beq.n	8011636 <_malloc_r+0xe6>
 80115c6:	6823      	ldr	r3, [r4, #0]
 80115c8:	442b      	add	r3, r5
 80115ca:	6023      	str	r3, [r4, #0]
 80115cc:	f8d8 3000 	ldr.w	r3, [r8]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d038      	beq.n	8011646 <_malloc_r+0xf6>
 80115d4:	685a      	ldr	r2, [r3, #4]
 80115d6:	42a2      	cmp	r2, r4
 80115d8:	d12b      	bne.n	8011632 <_malloc_r+0xe2>
 80115da:	2200      	movs	r2, #0
 80115dc:	605a      	str	r2, [r3, #4]
 80115de:	e00f      	b.n	8011600 <_malloc_r+0xb0>
 80115e0:	6822      	ldr	r2, [r4, #0]
 80115e2:	1b52      	subs	r2, r2, r5
 80115e4:	d41f      	bmi.n	8011626 <_malloc_r+0xd6>
 80115e6:	2a0b      	cmp	r2, #11
 80115e8:	d917      	bls.n	801161a <_malloc_r+0xca>
 80115ea:	1961      	adds	r1, r4, r5
 80115ec:	42a3      	cmp	r3, r4
 80115ee:	6025      	str	r5, [r4, #0]
 80115f0:	bf18      	it	ne
 80115f2:	6059      	strne	r1, [r3, #4]
 80115f4:	6863      	ldr	r3, [r4, #4]
 80115f6:	bf08      	it	eq
 80115f8:	f8c8 1000 	streq.w	r1, [r8]
 80115fc:	5162      	str	r2, [r4, r5]
 80115fe:	604b      	str	r3, [r1, #4]
 8011600:	4638      	mov	r0, r7
 8011602:	f104 060b 	add.w	r6, r4, #11
 8011606:	f000 f829 	bl	801165c <__malloc_unlock>
 801160a:	f026 0607 	bic.w	r6, r6, #7
 801160e:	1d23      	adds	r3, r4, #4
 8011610:	1af2      	subs	r2, r6, r3
 8011612:	d0ae      	beq.n	8011572 <_malloc_r+0x22>
 8011614:	1b9b      	subs	r3, r3, r6
 8011616:	50a3      	str	r3, [r4, r2]
 8011618:	e7ab      	b.n	8011572 <_malloc_r+0x22>
 801161a:	42a3      	cmp	r3, r4
 801161c:	6862      	ldr	r2, [r4, #4]
 801161e:	d1dd      	bne.n	80115dc <_malloc_r+0x8c>
 8011620:	f8c8 2000 	str.w	r2, [r8]
 8011624:	e7ec      	b.n	8011600 <_malloc_r+0xb0>
 8011626:	4623      	mov	r3, r4
 8011628:	6864      	ldr	r4, [r4, #4]
 801162a:	e7ac      	b.n	8011586 <_malloc_r+0x36>
 801162c:	4634      	mov	r4, r6
 801162e:	6876      	ldr	r6, [r6, #4]
 8011630:	e7b4      	b.n	801159c <_malloc_r+0x4c>
 8011632:	4613      	mov	r3, r2
 8011634:	e7cc      	b.n	80115d0 <_malloc_r+0x80>
 8011636:	230c      	movs	r3, #12
 8011638:	603b      	str	r3, [r7, #0]
 801163a:	4638      	mov	r0, r7
 801163c:	f000 f80e 	bl	801165c <__malloc_unlock>
 8011640:	e797      	b.n	8011572 <_malloc_r+0x22>
 8011642:	6025      	str	r5, [r4, #0]
 8011644:	e7dc      	b.n	8011600 <_malloc_r+0xb0>
 8011646:	605b      	str	r3, [r3, #4]
 8011648:	deff      	udf	#255	; 0xff
 801164a:	bf00      	nop
 801164c:	240009a8 	.word	0x240009a8

08011650 <__malloc_lock>:
 8011650:	4801      	ldr	r0, [pc, #4]	; (8011658 <__malloc_lock+0x8>)
 8011652:	f7ff b902 	b.w	801085a <__retarget_lock_acquire_recursive>
 8011656:	bf00      	nop
 8011658:	240009a4 	.word	0x240009a4

0801165c <__malloc_unlock>:
 801165c:	4801      	ldr	r0, [pc, #4]	; (8011664 <__malloc_unlock+0x8>)
 801165e:	f7ff b8fd 	b.w	801085c <__retarget_lock_release_recursive>
 8011662:	bf00      	nop
 8011664:	240009a4 	.word	0x240009a4

08011668 <_Balloc>:
 8011668:	b570      	push	{r4, r5, r6, lr}
 801166a:	69c6      	ldr	r6, [r0, #28]
 801166c:	4604      	mov	r4, r0
 801166e:	460d      	mov	r5, r1
 8011670:	b976      	cbnz	r6, 8011690 <_Balloc+0x28>
 8011672:	2010      	movs	r0, #16
 8011674:	f7ff ff44 	bl	8011500 <malloc>
 8011678:	4602      	mov	r2, r0
 801167a:	61e0      	str	r0, [r4, #28]
 801167c:	b920      	cbnz	r0, 8011688 <_Balloc+0x20>
 801167e:	4b18      	ldr	r3, [pc, #96]	; (80116e0 <_Balloc+0x78>)
 8011680:	4818      	ldr	r0, [pc, #96]	; (80116e4 <_Balloc+0x7c>)
 8011682:	216b      	movs	r1, #107	; 0x6b
 8011684:	f000 fd9c 	bl	80121c0 <__assert_func>
 8011688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801168c:	6006      	str	r6, [r0, #0]
 801168e:	60c6      	str	r6, [r0, #12]
 8011690:	69e6      	ldr	r6, [r4, #28]
 8011692:	68f3      	ldr	r3, [r6, #12]
 8011694:	b183      	cbz	r3, 80116b8 <_Balloc+0x50>
 8011696:	69e3      	ldr	r3, [r4, #28]
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801169e:	b9b8      	cbnz	r0, 80116d0 <_Balloc+0x68>
 80116a0:	2101      	movs	r1, #1
 80116a2:	fa01 f605 	lsl.w	r6, r1, r5
 80116a6:	1d72      	adds	r2, r6, #5
 80116a8:	0092      	lsls	r2, r2, #2
 80116aa:	4620      	mov	r0, r4
 80116ac:	f000 fda6 	bl	80121fc <_calloc_r>
 80116b0:	b160      	cbz	r0, 80116cc <_Balloc+0x64>
 80116b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80116b6:	e00e      	b.n	80116d6 <_Balloc+0x6e>
 80116b8:	2221      	movs	r2, #33	; 0x21
 80116ba:	2104      	movs	r1, #4
 80116bc:	4620      	mov	r0, r4
 80116be:	f000 fd9d 	bl	80121fc <_calloc_r>
 80116c2:	69e3      	ldr	r3, [r4, #28]
 80116c4:	60f0      	str	r0, [r6, #12]
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d1e4      	bne.n	8011696 <_Balloc+0x2e>
 80116cc:	2000      	movs	r0, #0
 80116ce:	bd70      	pop	{r4, r5, r6, pc}
 80116d0:	6802      	ldr	r2, [r0, #0]
 80116d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80116d6:	2300      	movs	r3, #0
 80116d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80116dc:	e7f7      	b.n	80116ce <_Balloc+0x66>
 80116de:	bf00      	nop
 80116e0:	08012a89 	.word	0x08012a89
 80116e4:	08012b09 	.word	0x08012b09

080116e8 <_Bfree>:
 80116e8:	b570      	push	{r4, r5, r6, lr}
 80116ea:	69c6      	ldr	r6, [r0, #28]
 80116ec:	4605      	mov	r5, r0
 80116ee:	460c      	mov	r4, r1
 80116f0:	b976      	cbnz	r6, 8011710 <_Bfree+0x28>
 80116f2:	2010      	movs	r0, #16
 80116f4:	f7ff ff04 	bl	8011500 <malloc>
 80116f8:	4602      	mov	r2, r0
 80116fa:	61e8      	str	r0, [r5, #28]
 80116fc:	b920      	cbnz	r0, 8011708 <_Bfree+0x20>
 80116fe:	4b09      	ldr	r3, [pc, #36]	; (8011724 <_Bfree+0x3c>)
 8011700:	4809      	ldr	r0, [pc, #36]	; (8011728 <_Bfree+0x40>)
 8011702:	218f      	movs	r1, #143	; 0x8f
 8011704:	f000 fd5c 	bl	80121c0 <__assert_func>
 8011708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801170c:	6006      	str	r6, [r0, #0]
 801170e:	60c6      	str	r6, [r0, #12]
 8011710:	b13c      	cbz	r4, 8011722 <_Bfree+0x3a>
 8011712:	69eb      	ldr	r3, [r5, #28]
 8011714:	6862      	ldr	r2, [r4, #4]
 8011716:	68db      	ldr	r3, [r3, #12]
 8011718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801171c:	6021      	str	r1, [r4, #0]
 801171e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011722:	bd70      	pop	{r4, r5, r6, pc}
 8011724:	08012a89 	.word	0x08012a89
 8011728:	08012b09 	.word	0x08012b09

0801172c <__multadd>:
 801172c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011730:	690d      	ldr	r5, [r1, #16]
 8011732:	4607      	mov	r7, r0
 8011734:	460c      	mov	r4, r1
 8011736:	461e      	mov	r6, r3
 8011738:	f101 0c14 	add.w	ip, r1, #20
 801173c:	2000      	movs	r0, #0
 801173e:	f8dc 3000 	ldr.w	r3, [ip]
 8011742:	b299      	uxth	r1, r3
 8011744:	fb02 6101 	mla	r1, r2, r1, r6
 8011748:	0c1e      	lsrs	r6, r3, #16
 801174a:	0c0b      	lsrs	r3, r1, #16
 801174c:	fb02 3306 	mla	r3, r2, r6, r3
 8011750:	b289      	uxth	r1, r1
 8011752:	3001      	adds	r0, #1
 8011754:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011758:	4285      	cmp	r5, r0
 801175a:	f84c 1b04 	str.w	r1, [ip], #4
 801175e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011762:	dcec      	bgt.n	801173e <__multadd+0x12>
 8011764:	b30e      	cbz	r6, 80117aa <__multadd+0x7e>
 8011766:	68a3      	ldr	r3, [r4, #8]
 8011768:	42ab      	cmp	r3, r5
 801176a:	dc19      	bgt.n	80117a0 <__multadd+0x74>
 801176c:	6861      	ldr	r1, [r4, #4]
 801176e:	4638      	mov	r0, r7
 8011770:	3101      	adds	r1, #1
 8011772:	f7ff ff79 	bl	8011668 <_Balloc>
 8011776:	4680      	mov	r8, r0
 8011778:	b928      	cbnz	r0, 8011786 <__multadd+0x5a>
 801177a:	4602      	mov	r2, r0
 801177c:	4b0c      	ldr	r3, [pc, #48]	; (80117b0 <__multadd+0x84>)
 801177e:	480d      	ldr	r0, [pc, #52]	; (80117b4 <__multadd+0x88>)
 8011780:	21ba      	movs	r1, #186	; 0xba
 8011782:	f000 fd1d 	bl	80121c0 <__assert_func>
 8011786:	6922      	ldr	r2, [r4, #16]
 8011788:	3202      	adds	r2, #2
 801178a:	f104 010c 	add.w	r1, r4, #12
 801178e:	0092      	lsls	r2, r2, #2
 8011790:	300c      	adds	r0, #12
 8011792:	f7ff f864 	bl	801085e <memcpy>
 8011796:	4621      	mov	r1, r4
 8011798:	4638      	mov	r0, r7
 801179a:	f7ff ffa5 	bl	80116e8 <_Bfree>
 801179e:	4644      	mov	r4, r8
 80117a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80117a4:	3501      	adds	r5, #1
 80117a6:	615e      	str	r6, [r3, #20]
 80117a8:	6125      	str	r5, [r4, #16]
 80117aa:	4620      	mov	r0, r4
 80117ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117b0:	08012af8 	.word	0x08012af8
 80117b4:	08012b09 	.word	0x08012b09

080117b8 <__hi0bits>:
 80117b8:	0c03      	lsrs	r3, r0, #16
 80117ba:	041b      	lsls	r3, r3, #16
 80117bc:	b9d3      	cbnz	r3, 80117f4 <__hi0bits+0x3c>
 80117be:	0400      	lsls	r0, r0, #16
 80117c0:	2310      	movs	r3, #16
 80117c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80117c6:	bf04      	itt	eq
 80117c8:	0200      	lsleq	r0, r0, #8
 80117ca:	3308      	addeq	r3, #8
 80117cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80117d0:	bf04      	itt	eq
 80117d2:	0100      	lsleq	r0, r0, #4
 80117d4:	3304      	addeq	r3, #4
 80117d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80117da:	bf04      	itt	eq
 80117dc:	0080      	lsleq	r0, r0, #2
 80117de:	3302      	addeq	r3, #2
 80117e0:	2800      	cmp	r0, #0
 80117e2:	db05      	blt.n	80117f0 <__hi0bits+0x38>
 80117e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80117e8:	f103 0301 	add.w	r3, r3, #1
 80117ec:	bf08      	it	eq
 80117ee:	2320      	moveq	r3, #32
 80117f0:	4618      	mov	r0, r3
 80117f2:	4770      	bx	lr
 80117f4:	2300      	movs	r3, #0
 80117f6:	e7e4      	b.n	80117c2 <__hi0bits+0xa>

080117f8 <__lo0bits>:
 80117f8:	6803      	ldr	r3, [r0, #0]
 80117fa:	f013 0207 	ands.w	r2, r3, #7
 80117fe:	d00c      	beq.n	801181a <__lo0bits+0x22>
 8011800:	07d9      	lsls	r1, r3, #31
 8011802:	d422      	bmi.n	801184a <__lo0bits+0x52>
 8011804:	079a      	lsls	r2, r3, #30
 8011806:	bf49      	itett	mi
 8011808:	085b      	lsrmi	r3, r3, #1
 801180a:	089b      	lsrpl	r3, r3, #2
 801180c:	6003      	strmi	r3, [r0, #0]
 801180e:	2201      	movmi	r2, #1
 8011810:	bf5c      	itt	pl
 8011812:	6003      	strpl	r3, [r0, #0]
 8011814:	2202      	movpl	r2, #2
 8011816:	4610      	mov	r0, r2
 8011818:	4770      	bx	lr
 801181a:	b299      	uxth	r1, r3
 801181c:	b909      	cbnz	r1, 8011822 <__lo0bits+0x2a>
 801181e:	0c1b      	lsrs	r3, r3, #16
 8011820:	2210      	movs	r2, #16
 8011822:	b2d9      	uxtb	r1, r3
 8011824:	b909      	cbnz	r1, 801182a <__lo0bits+0x32>
 8011826:	3208      	adds	r2, #8
 8011828:	0a1b      	lsrs	r3, r3, #8
 801182a:	0719      	lsls	r1, r3, #28
 801182c:	bf04      	itt	eq
 801182e:	091b      	lsreq	r3, r3, #4
 8011830:	3204      	addeq	r2, #4
 8011832:	0799      	lsls	r1, r3, #30
 8011834:	bf04      	itt	eq
 8011836:	089b      	lsreq	r3, r3, #2
 8011838:	3202      	addeq	r2, #2
 801183a:	07d9      	lsls	r1, r3, #31
 801183c:	d403      	bmi.n	8011846 <__lo0bits+0x4e>
 801183e:	085b      	lsrs	r3, r3, #1
 8011840:	f102 0201 	add.w	r2, r2, #1
 8011844:	d003      	beq.n	801184e <__lo0bits+0x56>
 8011846:	6003      	str	r3, [r0, #0]
 8011848:	e7e5      	b.n	8011816 <__lo0bits+0x1e>
 801184a:	2200      	movs	r2, #0
 801184c:	e7e3      	b.n	8011816 <__lo0bits+0x1e>
 801184e:	2220      	movs	r2, #32
 8011850:	e7e1      	b.n	8011816 <__lo0bits+0x1e>
	...

08011854 <__i2b>:
 8011854:	b510      	push	{r4, lr}
 8011856:	460c      	mov	r4, r1
 8011858:	2101      	movs	r1, #1
 801185a:	f7ff ff05 	bl	8011668 <_Balloc>
 801185e:	4602      	mov	r2, r0
 8011860:	b928      	cbnz	r0, 801186e <__i2b+0x1a>
 8011862:	4b05      	ldr	r3, [pc, #20]	; (8011878 <__i2b+0x24>)
 8011864:	4805      	ldr	r0, [pc, #20]	; (801187c <__i2b+0x28>)
 8011866:	f240 1145 	movw	r1, #325	; 0x145
 801186a:	f000 fca9 	bl	80121c0 <__assert_func>
 801186e:	2301      	movs	r3, #1
 8011870:	6144      	str	r4, [r0, #20]
 8011872:	6103      	str	r3, [r0, #16]
 8011874:	bd10      	pop	{r4, pc}
 8011876:	bf00      	nop
 8011878:	08012af8 	.word	0x08012af8
 801187c:	08012b09 	.word	0x08012b09

08011880 <__multiply>:
 8011880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011884:	4691      	mov	r9, r2
 8011886:	690a      	ldr	r2, [r1, #16]
 8011888:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801188c:	429a      	cmp	r2, r3
 801188e:	bfb8      	it	lt
 8011890:	460b      	movlt	r3, r1
 8011892:	460c      	mov	r4, r1
 8011894:	bfbc      	itt	lt
 8011896:	464c      	movlt	r4, r9
 8011898:	4699      	movlt	r9, r3
 801189a:	6927      	ldr	r7, [r4, #16]
 801189c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80118a0:	68a3      	ldr	r3, [r4, #8]
 80118a2:	6861      	ldr	r1, [r4, #4]
 80118a4:	eb07 060a 	add.w	r6, r7, sl
 80118a8:	42b3      	cmp	r3, r6
 80118aa:	b085      	sub	sp, #20
 80118ac:	bfb8      	it	lt
 80118ae:	3101      	addlt	r1, #1
 80118b0:	f7ff feda 	bl	8011668 <_Balloc>
 80118b4:	b930      	cbnz	r0, 80118c4 <__multiply+0x44>
 80118b6:	4602      	mov	r2, r0
 80118b8:	4b44      	ldr	r3, [pc, #272]	; (80119cc <__multiply+0x14c>)
 80118ba:	4845      	ldr	r0, [pc, #276]	; (80119d0 <__multiply+0x150>)
 80118bc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80118c0:	f000 fc7e 	bl	80121c0 <__assert_func>
 80118c4:	f100 0514 	add.w	r5, r0, #20
 80118c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80118cc:	462b      	mov	r3, r5
 80118ce:	2200      	movs	r2, #0
 80118d0:	4543      	cmp	r3, r8
 80118d2:	d321      	bcc.n	8011918 <__multiply+0x98>
 80118d4:	f104 0314 	add.w	r3, r4, #20
 80118d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80118dc:	f109 0314 	add.w	r3, r9, #20
 80118e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80118e4:	9202      	str	r2, [sp, #8]
 80118e6:	1b3a      	subs	r2, r7, r4
 80118e8:	3a15      	subs	r2, #21
 80118ea:	f022 0203 	bic.w	r2, r2, #3
 80118ee:	3204      	adds	r2, #4
 80118f0:	f104 0115 	add.w	r1, r4, #21
 80118f4:	428f      	cmp	r7, r1
 80118f6:	bf38      	it	cc
 80118f8:	2204      	movcc	r2, #4
 80118fa:	9201      	str	r2, [sp, #4]
 80118fc:	9a02      	ldr	r2, [sp, #8]
 80118fe:	9303      	str	r3, [sp, #12]
 8011900:	429a      	cmp	r2, r3
 8011902:	d80c      	bhi.n	801191e <__multiply+0x9e>
 8011904:	2e00      	cmp	r6, #0
 8011906:	dd03      	ble.n	8011910 <__multiply+0x90>
 8011908:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801190c:	2b00      	cmp	r3, #0
 801190e:	d05b      	beq.n	80119c8 <__multiply+0x148>
 8011910:	6106      	str	r6, [r0, #16]
 8011912:	b005      	add	sp, #20
 8011914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011918:	f843 2b04 	str.w	r2, [r3], #4
 801191c:	e7d8      	b.n	80118d0 <__multiply+0x50>
 801191e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011922:	f1ba 0f00 	cmp.w	sl, #0
 8011926:	d024      	beq.n	8011972 <__multiply+0xf2>
 8011928:	f104 0e14 	add.w	lr, r4, #20
 801192c:	46a9      	mov	r9, r5
 801192e:	f04f 0c00 	mov.w	ip, #0
 8011932:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011936:	f8d9 1000 	ldr.w	r1, [r9]
 801193a:	fa1f fb82 	uxth.w	fp, r2
 801193e:	b289      	uxth	r1, r1
 8011940:	fb0a 110b 	mla	r1, sl, fp, r1
 8011944:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011948:	f8d9 2000 	ldr.w	r2, [r9]
 801194c:	4461      	add	r1, ip
 801194e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011952:	fb0a c20b 	mla	r2, sl, fp, ip
 8011956:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801195a:	b289      	uxth	r1, r1
 801195c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011960:	4577      	cmp	r7, lr
 8011962:	f849 1b04 	str.w	r1, [r9], #4
 8011966:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801196a:	d8e2      	bhi.n	8011932 <__multiply+0xb2>
 801196c:	9a01      	ldr	r2, [sp, #4]
 801196e:	f845 c002 	str.w	ip, [r5, r2]
 8011972:	9a03      	ldr	r2, [sp, #12]
 8011974:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011978:	3304      	adds	r3, #4
 801197a:	f1b9 0f00 	cmp.w	r9, #0
 801197e:	d021      	beq.n	80119c4 <__multiply+0x144>
 8011980:	6829      	ldr	r1, [r5, #0]
 8011982:	f104 0c14 	add.w	ip, r4, #20
 8011986:	46ae      	mov	lr, r5
 8011988:	f04f 0a00 	mov.w	sl, #0
 801198c:	f8bc b000 	ldrh.w	fp, [ip]
 8011990:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011994:	fb09 220b 	mla	r2, r9, fp, r2
 8011998:	4452      	add	r2, sl
 801199a:	b289      	uxth	r1, r1
 801199c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80119a0:	f84e 1b04 	str.w	r1, [lr], #4
 80119a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80119a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80119ac:	f8be 1000 	ldrh.w	r1, [lr]
 80119b0:	fb09 110a 	mla	r1, r9, sl, r1
 80119b4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80119b8:	4567      	cmp	r7, ip
 80119ba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80119be:	d8e5      	bhi.n	801198c <__multiply+0x10c>
 80119c0:	9a01      	ldr	r2, [sp, #4]
 80119c2:	50a9      	str	r1, [r5, r2]
 80119c4:	3504      	adds	r5, #4
 80119c6:	e799      	b.n	80118fc <__multiply+0x7c>
 80119c8:	3e01      	subs	r6, #1
 80119ca:	e79b      	b.n	8011904 <__multiply+0x84>
 80119cc:	08012af8 	.word	0x08012af8
 80119d0:	08012b09 	.word	0x08012b09

080119d4 <__pow5mult>:
 80119d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119d8:	4615      	mov	r5, r2
 80119da:	f012 0203 	ands.w	r2, r2, #3
 80119de:	4606      	mov	r6, r0
 80119e0:	460f      	mov	r7, r1
 80119e2:	d007      	beq.n	80119f4 <__pow5mult+0x20>
 80119e4:	4c25      	ldr	r4, [pc, #148]	; (8011a7c <__pow5mult+0xa8>)
 80119e6:	3a01      	subs	r2, #1
 80119e8:	2300      	movs	r3, #0
 80119ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80119ee:	f7ff fe9d 	bl	801172c <__multadd>
 80119f2:	4607      	mov	r7, r0
 80119f4:	10ad      	asrs	r5, r5, #2
 80119f6:	d03d      	beq.n	8011a74 <__pow5mult+0xa0>
 80119f8:	69f4      	ldr	r4, [r6, #28]
 80119fa:	b97c      	cbnz	r4, 8011a1c <__pow5mult+0x48>
 80119fc:	2010      	movs	r0, #16
 80119fe:	f7ff fd7f 	bl	8011500 <malloc>
 8011a02:	4602      	mov	r2, r0
 8011a04:	61f0      	str	r0, [r6, #28]
 8011a06:	b928      	cbnz	r0, 8011a14 <__pow5mult+0x40>
 8011a08:	4b1d      	ldr	r3, [pc, #116]	; (8011a80 <__pow5mult+0xac>)
 8011a0a:	481e      	ldr	r0, [pc, #120]	; (8011a84 <__pow5mult+0xb0>)
 8011a0c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011a10:	f000 fbd6 	bl	80121c0 <__assert_func>
 8011a14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a18:	6004      	str	r4, [r0, #0]
 8011a1a:	60c4      	str	r4, [r0, #12]
 8011a1c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011a20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a24:	b94c      	cbnz	r4, 8011a3a <__pow5mult+0x66>
 8011a26:	f240 2171 	movw	r1, #625	; 0x271
 8011a2a:	4630      	mov	r0, r6
 8011a2c:	f7ff ff12 	bl	8011854 <__i2b>
 8011a30:	2300      	movs	r3, #0
 8011a32:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a36:	4604      	mov	r4, r0
 8011a38:	6003      	str	r3, [r0, #0]
 8011a3a:	f04f 0900 	mov.w	r9, #0
 8011a3e:	07eb      	lsls	r3, r5, #31
 8011a40:	d50a      	bpl.n	8011a58 <__pow5mult+0x84>
 8011a42:	4639      	mov	r1, r7
 8011a44:	4622      	mov	r2, r4
 8011a46:	4630      	mov	r0, r6
 8011a48:	f7ff ff1a 	bl	8011880 <__multiply>
 8011a4c:	4639      	mov	r1, r7
 8011a4e:	4680      	mov	r8, r0
 8011a50:	4630      	mov	r0, r6
 8011a52:	f7ff fe49 	bl	80116e8 <_Bfree>
 8011a56:	4647      	mov	r7, r8
 8011a58:	106d      	asrs	r5, r5, #1
 8011a5a:	d00b      	beq.n	8011a74 <__pow5mult+0xa0>
 8011a5c:	6820      	ldr	r0, [r4, #0]
 8011a5e:	b938      	cbnz	r0, 8011a70 <__pow5mult+0x9c>
 8011a60:	4622      	mov	r2, r4
 8011a62:	4621      	mov	r1, r4
 8011a64:	4630      	mov	r0, r6
 8011a66:	f7ff ff0b 	bl	8011880 <__multiply>
 8011a6a:	6020      	str	r0, [r4, #0]
 8011a6c:	f8c0 9000 	str.w	r9, [r0]
 8011a70:	4604      	mov	r4, r0
 8011a72:	e7e4      	b.n	8011a3e <__pow5mult+0x6a>
 8011a74:	4638      	mov	r0, r7
 8011a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a7a:	bf00      	nop
 8011a7c:	08012c58 	.word	0x08012c58
 8011a80:	08012a89 	.word	0x08012a89
 8011a84:	08012b09 	.word	0x08012b09

08011a88 <__lshift>:
 8011a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a8c:	460c      	mov	r4, r1
 8011a8e:	6849      	ldr	r1, [r1, #4]
 8011a90:	6923      	ldr	r3, [r4, #16]
 8011a92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011a96:	68a3      	ldr	r3, [r4, #8]
 8011a98:	4607      	mov	r7, r0
 8011a9a:	4691      	mov	r9, r2
 8011a9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011aa0:	f108 0601 	add.w	r6, r8, #1
 8011aa4:	42b3      	cmp	r3, r6
 8011aa6:	db0b      	blt.n	8011ac0 <__lshift+0x38>
 8011aa8:	4638      	mov	r0, r7
 8011aaa:	f7ff fddd 	bl	8011668 <_Balloc>
 8011aae:	4605      	mov	r5, r0
 8011ab0:	b948      	cbnz	r0, 8011ac6 <__lshift+0x3e>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	4b28      	ldr	r3, [pc, #160]	; (8011b58 <__lshift+0xd0>)
 8011ab6:	4829      	ldr	r0, [pc, #164]	; (8011b5c <__lshift+0xd4>)
 8011ab8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011abc:	f000 fb80 	bl	80121c0 <__assert_func>
 8011ac0:	3101      	adds	r1, #1
 8011ac2:	005b      	lsls	r3, r3, #1
 8011ac4:	e7ee      	b.n	8011aa4 <__lshift+0x1c>
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	f100 0114 	add.w	r1, r0, #20
 8011acc:	f100 0210 	add.w	r2, r0, #16
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	4553      	cmp	r3, sl
 8011ad4:	db33      	blt.n	8011b3e <__lshift+0xb6>
 8011ad6:	6920      	ldr	r0, [r4, #16]
 8011ad8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011adc:	f104 0314 	add.w	r3, r4, #20
 8011ae0:	f019 091f 	ands.w	r9, r9, #31
 8011ae4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011ae8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011aec:	d02b      	beq.n	8011b46 <__lshift+0xbe>
 8011aee:	f1c9 0e20 	rsb	lr, r9, #32
 8011af2:	468a      	mov	sl, r1
 8011af4:	2200      	movs	r2, #0
 8011af6:	6818      	ldr	r0, [r3, #0]
 8011af8:	fa00 f009 	lsl.w	r0, r0, r9
 8011afc:	4310      	orrs	r0, r2
 8011afe:	f84a 0b04 	str.w	r0, [sl], #4
 8011b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b06:	459c      	cmp	ip, r3
 8011b08:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b0c:	d8f3      	bhi.n	8011af6 <__lshift+0x6e>
 8011b0e:	ebac 0304 	sub.w	r3, ip, r4
 8011b12:	3b15      	subs	r3, #21
 8011b14:	f023 0303 	bic.w	r3, r3, #3
 8011b18:	3304      	adds	r3, #4
 8011b1a:	f104 0015 	add.w	r0, r4, #21
 8011b1e:	4584      	cmp	ip, r0
 8011b20:	bf38      	it	cc
 8011b22:	2304      	movcc	r3, #4
 8011b24:	50ca      	str	r2, [r1, r3]
 8011b26:	b10a      	cbz	r2, 8011b2c <__lshift+0xa4>
 8011b28:	f108 0602 	add.w	r6, r8, #2
 8011b2c:	3e01      	subs	r6, #1
 8011b2e:	4638      	mov	r0, r7
 8011b30:	612e      	str	r6, [r5, #16]
 8011b32:	4621      	mov	r1, r4
 8011b34:	f7ff fdd8 	bl	80116e8 <_Bfree>
 8011b38:	4628      	mov	r0, r5
 8011b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011b42:	3301      	adds	r3, #1
 8011b44:	e7c5      	b.n	8011ad2 <__lshift+0x4a>
 8011b46:	3904      	subs	r1, #4
 8011b48:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b50:	459c      	cmp	ip, r3
 8011b52:	d8f9      	bhi.n	8011b48 <__lshift+0xc0>
 8011b54:	e7ea      	b.n	8011b2c <__lshift+0xa4>
 8011b56:	bf00      	nop
 8011b58:	08012af8 	.word	0x08012af8
 8011b5c:	08012b09 	.word	0x08012b09

08011b60 <__mcmp>:
 8011b60:	b530      	push	{r4, r5, lr}
 8011b62:	6902      	ldr	r2, [r0, #16]
 8011b64:	690c      	ldr	r4, [r1, #16]
 8011b66:	1b12      	subs	r2, r2, r4
 8011b68:	d10e      	bne.n	8011b88 <__mcmp+0x28>
 8011b6a:	f100 0314 	add.w	r3, r0, #20
 8011b6e:	3114      	adds	r1, #20
 8011b70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011b74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011b78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011b7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011b80:	42a5      	cmp	r5, r4
 8011b82:	d003      	beq.n	8011b8c <__mcmp+0x2c>
 8011b84:	d305      	bcc.n	8011b92 <__mcmp+0x32>
 8011b86:	2201      	movs	r2, #1
 8011b88:	4610      	mov	r0, r2
 8011b8a:	bd30      	pop	{r4, r5, pc}
 8011b8c:	4283      	cmp	r3, r0
 8011b8e:	d3f3      	bcc.n	8011b78 <__mcmp+0x18>
 8011b90:	e7fa      	b.n	8011b88 <__mcmp+0x28>
 8011b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b96:	e7f7      	b.n	8011b88 <__mcmp+0x28>

08011b98 <__mdiff>:
 8011b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b9c:	460c      	mov	r4, r1
 8011b9e:	4606      	mov	r6, r0
 8011ba0:	4611      	mov	r1, r2
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	4690      	mov	r8, r2
 8011ba6:	f7ff ffdb 	bl	8011b60 <__mcmp>
 8011baa:	1e05      	subs	r5, r0, #0
 8011bac:	d110      	bne.n	8011bd0 <__mdiff+0x38>
 8011bae:	4629      	mov	r1, r5
 8011bb0:	4630      	mov	r0, r6
 8011bb2:	f7ff fd59 	bl	8011668 <_Balloc>
 8011bb6:	b930      	cbnz	r0, 8011bc6 <__mdiff+0x2e>
 8011bb8:	4b3a      	ldr	r3, [pc, #232]	; (8011ca4 <__mdiff+0x10c>)
 8011bba:	4602      	mov	r2, r0
 8011bbc:	f240 2137 	movw	r1, #567	; 0x237
 8011bc0:	4839      	ldr	r0, [pc, #228]	; (8011ca8 <__mdiff+0x110>)
 8011bc2:	f000 fafd 	bl	80121c0 <__assert_func>
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011bcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bd0:	bfa4      	itt	ge
 8011bd2:	4643      	movge	r3, r8
 8011bd4:	46a0      	movge	r8, r4
 8011bd6:	4630      	mov	r0, r6
 8011bd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011bdc:	bfa6      	itte	ge
 8011bde:	461c      	movge	r4, r3
 8011be0:	2500      	movge	r5, #0
 8011be2:	2501      	movlt	r5, #1
 8011be4:	f7ff fd40 	bl	8011668 <_Balloc>
 8011be8:	b920      	cbnz	r0, 8011bf4 <__mdiff+0x5c>
 8011bea:	4b2e      	ldr	r3, [pc, #184]	; (8011ca4 <__mdiff+0x10c>)
 8011bec:	4602      	mov	r2, r0
 8011bee:	f240 2145 	movw	r1, #581	; 0x245
 8011bf2:	e7e5      	b.n	8011bc0 <__mdiff+0x28>
 8011bf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011bf8:	6926      	ldr	r6, [r4, #16]
 8011bfa:	60c5      	str	r5, [r0, #12]
 8011bfc:	f104 0914 	add.w	r9, r4, #20
 8011c00:	f108 0514 	add.w	r5, r8, #20
 8011c04:	f100 0e14 	add.w	lr, r0, #20
 8011c08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011c0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011c10:	f108 0210 	add.w	r2, r8, #16
 8011c14:	46f2      	mov	sl, lr
 8011c16:	2100      	movs	r1, #0
 8011c18:	f859 3b04 	ldr.w	r3, [r9], #4
 8011c1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011c20:	fa11 f88b 	uxtah	r8, r1, fp
 8011c24:	b299      	uxth	r1, r3
 8011c26:	0c1b      	lsrs	r3, r3, #16
 8011c28:	eba8 0801 	sub.w	r8, r8, r1
 8011c2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011c30:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011c34:	fa1f f888 	uxth.w	r8, r8
 8011c38:	1419      	asrs	r1, r3, #16
 8011c3a:	454e      	cmp	r6, r9
 8011c3c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011c40:	f84a 3b04 	str.w	r3, [sl], #4
 8011c44:	d8e8      	bhi.n	8011c18 <__mdiff+0x80>
 8011c46:	1b33      	subs	r3, r6, r4
 8011c48:	3b15      	subs	r3, #21
 8011c4a:	f023 0303 	bic.w	r3, r3, #3
 8011c4e:	3304      	adds	r3, #4
 8011c50:	3415      	adds	r4, #21
 8011c52:	42a6      	cmp	r6, r4
 8011c54:	bf38      	it	cc
 8011c56:	2304      	movcc	r3, #4
 8011c58:	441d      	add	r5, r3
 8011c5a:	4473      	add	r3, lr
 8011c5c:	469e      	mov	lr, r3
 8011c5e:	462e      	mov	r6, r5
 8011c60:	4566      	cmp	r6, ip
 8011c62:	d30e      	bcc.n	8011c82 <__mdiff+0xea>
 8011c64:	f10c 0203 	add.w	r2, ip, #3
 8011c68:	1b52      	subs	r2, r2, r5
 8011c6a:	f022 0203 	bic.w	r2, r2, #3
 8011c6e:	3d03      	subs	r5, #3
 8011c70:	45ac      	cmp	ip, r5
 8011c72:	bf38      	it	cc
 8011c74:	2200      	movcc	r2, #0
 8011c76:	4413      	add	r3, r2
 8011c78:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011c7c:	b17a      	cbz	r2, 8011c9e <__mdiff+0x106>
 8011c7e:	6107      	str	r7, [r0, #16]
 8011c80:	e7a4      	b.n	8011bcc <__mdiff+0x34>
 8011c82:	f856 8b04 	ldr.w	r8, [r6], #4
 8011c86:	fa11 f288 	uxtah	r2, r1, r8
 8011c8a:	1414      	asrs	r4, r2, #16
 8011c8c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011c90:	b292      	uxth	r2, r2
 8011c92:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011c96:	f84e 2b04 	str.w	r2, [lr], #4
 8011c9a:	1421      	asrs	r1, r4, #16
 8011c9c:	e7e0      	b.n	8011c60 <__mdiff+0xc8>
 8011c9e:	3f01      	subs	r7, #1
 8011ca0:	e7ea      	b.n	8011c78 <__mdiff+0xe0>
 8011ca2:	bf00      	nop
 8011ca4:	08012af8 	.word	0x08012af8
 8011ca8:	08012b09 	.word	0x08012b09

08011cac <__d2b>:
 8011cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cb0:	460f      	mov	r7, r1
 8011cb2:	2101      	movs	r1, #1
 8011cb4:	ec59 8b10 	vmov	r8, r9, d0
 8011cb8:	4616      	mov	r6, r2
 8011cba:	f7ff fcd5 	bl	8011668 <_Balloc>
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	b930      	cbnz	r0, 8011cd0 <__d2b+0x24>
 8011cc2:	4602      	mov	r2, r0
 8011cc4:	4b24      	ldr	r3, [pc, #144]	; (8011d58 <__d2b+0xac>)
 8011cc6:	4825      	ldr	r0, [pc, #148]	; (8011d5c <__d2b+0xb0>)
 8011cc8:	f240 310f 	movw	r1, #783	; 0x30f
 8011ccc:	f000 fa78 	bl	80121c0 <__assert_func>
 8011cd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011cd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011cd8:	bb2d      	cbnz	r5, 8011d26 <__d2b+0x7a>
 8011cda:	9301      	str	r3, [sp, #4]
 8011cdc:	f1b8 0300 	subs.w	r3, r8, #0
 8011ce0:	d026      	beq.n	8011d30 <__d2b+0x84>
 8011ce2:	4668      	mov	r0, sp
 8011ce4:	9300      	str	r3, [sp, #0]
 8011ce6:	f7ff fd87 	bl	80117f8 <__lo0bits>
 8011cea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011cee:	b1e8      	cbz	r0, 8011d2c <__d2b+0x80>
 8011cf0:	f1c0 0320 	rsb	r3, r0, #32
 8011cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8011cf8:	430b      	orrs	r3, r1
 8011cfa:	40c2      	lsrs	r2, r0
 8011cfc:	6163      	str	r3, [r4, #20]
 8011cfe:	9201      	str	r2, [sp, #4]
 8011d00:	9b01      	ldr	r3, [sp, #4]
 8011d02:	61a3      	str	r3, [r4, #24]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	bf14      	ite	ne
 8011d08:	2202      	movne	r2, #2
 8011d0a:	2201      	moveq	r2, #1
 8011d0c:	6122      	str	r2, [r4, #16]
 8011d0e:	b1bd      	cbz	r5, 8011d40 <__d2b+0x94>
 8011d10:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011d14:	4405      	add	r5, r0
 8011d16:	603d      	str	r5, [r7, #0]
 8011d18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d1c:	6030      	str	r0, [r6, #0]
 8011d1e:	4620      	mov	r0, r4
 8011d20:	b003      	add	sp, #12
 8011d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d2a:	e7d6      	b.n	8011cda <__d2b+0x2e>
 8011d2c:	6161      	str	r1, [r4, #20]
 8011d2e:	e7e7      	b.n	8011d00 <__d2b+0x54>
 8011d30:	a801      	add	r0, sp, #4
 8011d32:	f7ff fd61 	bl	80117f8 <__lo0bits>
 8011d36:	9b01      	ldr	r3, [sp, #4]
 8011d38:	6163      	str	r3, [r4, #20]
 8011d3a:	3020      	adds	r0, #32
 8011d3c:	2201      	movs	r2, #1
 8011d3e:	e7e5      	b.n	8011d0c <__d2b+0x60>
 8011d40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011d48:	6038      	str	r0, [r7, #0]
 8011d4a:	6918      	ldr	r0, [r3, #16]
 8011d4c:	f7ff fd34 	bl	80117b8 <__hi0bits>
 8011d50:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d54:	e7e2      	b.n	8011d1c <__d2b+0x70>
 8011d56:	bf00      	nop
 8011d58:	08012af8 	.word	0x08012af8
 8011d5c:	08012b09 	.word	0x08012b09

08011d60 <__ssputs_r>:
 8011d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d64:	688e      	ldr	r6, [r1, #8]
 8011d66:	461f      	mov	r7, r3
 8011d68:	42be      	cmp	r6, r7
 8011d6a:	680b      	ldr	r3, [r1, #0]
 8011d6c:	4682      	mov	sl, r0
 8011d6e:	460c      	mov	r4, r1
 8011d70:	4690      	mov	r8, r2
 8011d72:	d82c      	bhi.n	8011dce <__ssputs_r+0x6e>
 8011d74:	898a      	ldrh	r2, [r1, #12]
 8011d76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d7a:	d026      	beq.n	8011dca <__ssputs_r+0x6a>
 8011d7c:	6965      	ldr	r5, [r4, #20]
 8011d7e:	6909      	ldr	r1, [r1, #16]
 8011d80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d84:	eba3 0901 	sub.w	r9, r3, r1
 8011d88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d8c:	1c7b      	adds	r3, r7, #1
 8011d8e:	444b      	add	r3, r9
 8011d90:	106d      	asrs	r5, r5, #1
 8011d92:	429d      	cmp	r5, r3
 8011d94:	bf38      	it	cc
 8011d96:	461d      	movcc	r5, r3
 8011d98:	0553      	lsls	r3, r2, #21
 8011d9a:	d527      	bpl.n	8011dec <__ssputs_r+0x8c>
 8011d9c:	4629      	mov	r1, r5
 8011d9e:	f7ff fbd7 	bl	8011550 <_malloc_r>
 8011da2:	4606      	mov	r6, r0
 8011da4:	b360      	cbz	r0, 8011e00 <__ssputs_r+0xa0>
 8011da6:	6921      	ldr	r1, [r4, #16]
 8011da8:	464a      	mov	r2, r9
 8011daa:	f7fe fd58 	bl	801085e <memcpy>
 8011dae:	89a3      	ldrh	r3, [r4, #12]
 8011db0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011db8:	81a3      	strh	r3, [r4, #12]
 8011dba:	6126      	str	r6, [r4, #16]
 8011dbc:	6165      	str	r5, [r4, #20]
 8011dbe:	444e      	add	r6, r9
 8011dc0:	eba5 0509 	sub.w	r5, r5, r9
 8011dc4:	6026      	str	r6, [r4, #0]
 8011dc6:	60a5      	str	r5, [r4, #8]
 8011dc8:	463e      	mov	r6, r7
 8011dca:	42be      	cmp	r6, r7
 8011dcc:	d900      	bls.n	8011dd0 <__ssputs_r+0x70>
 8011dce:	463e      	mov	r6, r7
 8011dd0:	6820      	ldr	r0, [r4, #0]
 8011dd2:	4632      	mov	r2, r6
 8011dd4:	4641      	mov	r1, r8
 8011dd6:	f000 f9c9 	bl	801216c <memmove>
 8011dda:	68a3      	ldr	r3, [r4, #8]
 8011ddc:	1b9b      	subs	r3, r3, r6
 8011dde:	60a3      	str	r3, [r4, #8]
 8011de0:	6823      	ldr	r3, [r4, #0]
 8011de2:	4433      	add	r3, r6
 8011de4:	6023      	str	r3, [r4, #0]
 8011de6:	2000      	movs	r0, #0
 8011de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dec:	462a      	mov	r2, r5
 8011dee:	f000 fa2d 	bl	801224c <_realloc_r>
 8011df2:	4606      	mov	r6, r0
 8011df4:	2800      	cmp	r0, #0
 8011df6:	d1e0      	bne.n	8011dba <__ssputs_r+0x5a>
 8011df8:	6921      	ldr	r1, [r4, #16]
 8011dfa:	4650      	mov	r0, sl
 8011dfc:	f7ff fb34 	bl	8011468 <_free_r>
 8011e00:	230c      	movs	r3, #12
 8011e02:	f8ca 3000 	str.w	r3, [sl]
 8011e06:	89a3      	ldrh	r3, [r4, #12]
 8011e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e0c:	81a3      	strh	r3, [r4, #12]
 8011e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e12:	e7e9      	b.n	8011de8 <__ssputs_r+0x88>

08011e14 <_svfiprintf_r>:
 8011e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e18:	4698      	mov	r8, r3
 8011e1a:	898b      	ldrh	r3, [r1, #12]
 8011e1c:	061b      	lsls	r3, r3, #24
 8011e1e:	b09d      	sub	sp, #116	; 0x74
 8011e20:	4607      	mov	r7, r0
 8011e22:	460d      	mov	r5, r1
 8011e24:	4614      	mov	r4, r2
 8011e26:	d50e      	bpl.n	8011e46 <_svfiprintf_r+0x32>
 8011e28:	690b      	ldr	r3, [r1, #16]
 8011e2a:	b963      	cbnz	r3, 8011e46 <_svfiprintf_r+0x32>
 8011e2c:	2140      	movs	r1, #64	; 0x40
 8011e2e:	f7ff fb8f 	bl	8011550 <_malloc_r>
 8011e32:	6028      	str	r0, [r5, #0]
 8011e34:	6128      	str	r0, [r5, #16]
 8011e36:	b920      	cbnz	r0, 8011e42 <_svfiprintf_r+0x2e>
 8011e38:	230c      	movs	r3, #12
 8011e3a:	603b      	str	r3, [r7, #0]
 8011e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e40:	e0d0      	b.n	8011fe4 <_svfiprintf_r+0x1d0>
 8011e42:	2340      	movs	r3, #64	; 0x40
 8011e44:	616b      	str	r3, [r5, #20]
 8011e46:	2300      	movs	r3, #0
 8011e48:	9309      	str	r3, [sp, #36]	; 0x24
 8011e4a:	2320      	movs	r3, #32
 8011e4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e50:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e54:	2330      	movs	r3, #48	; 0x30
 8011e56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011ffc <_svfiprintf_r+0x1e8>
 8011e5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e5e:	f04f 0901 	mov.w	r9, #1
 8011e62:	4623      	mov	r3, r4
 8011e64:	469a      	mov	sl, r3
 8011e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e6a:	b10a      	cbz	r2, 8011e70 <_svfiprintf_r+0x5c>
 8011e6c:	2a25      	cmp	r2, #37	; 0x25
 8011e6e:	d1f9      	bne.n	8011e64 <_svfiprintf_r+0x50>
 8011e70:	ebba 0b04 	subs.w	fp, sl, r4
 8011e74:	d00b      	beq.n	8011e8e <_svfiprintf_r+0x7a>
 8011e76:	465b      	mov	r3, fp
 8011e78:	4622      	mov	r2, r4
 8011e7a:	4629      	mov	r1, r5
 8011e7c:	4638      	mov	r0, r7
 8011e7e:	f7ff ff6f 	bl	8011d60 <__ssputs_r>
 8011e82:	3001      	adds	r0, #1
 8011e84:	f000 80a9 	beq.w	8011fda <_svfiprintf_r+0x1c6>
 8011e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e8a:	445a      	add	r2, fp
 8011e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8011e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	f000 80a1 	beq.w	8011fda <_svfiprintf_r+0x1c6>
 8011e98:	2300      	movs	r3, #0
 8011e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ea2:	f10a 0a01 	add.w	sl, sl, #1
 8011ea6:	9304      	str	r3, [sp, #16]
 8011ea8:	9307      	str	r3, [sp, #28]
 8011eaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011eae:	931a      	str	r3, [sp, #104]	; 0x68
 8011eb0:	4654      	mov	r4, sl
 8011eb2:	2205      	movs	r2, #5
 8011eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eb8:	4850      	ldr	r0, [pc, #320]	; (8011ffc <_svfiprintf_r+0x1e8>)
 8011eba:	f7ee fa11 	bl	80002e0 <memchr>
 8011ebe:	9a04      	ldr	r2, [sp, #16]
 8011ec0:	b9d8      	cbnz	r0, 8011efa <_svfiprintf_r+0xe6>
 8011ec2:	06d0      	lsls	r0, r2, #27
 8011ec4:	bf44      	itt	mi
 8011ec6:	2320      	movmi	r3, #32
 8011ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ecc:	0711      	lsls	r1, r2, #28
 8011ece:	bf44      	itt	mi
 8011ed0:	232b      	movmi	r3, #43	; 0x2b
 8011ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8011eda:	2b2a      	cmp	r3, #42	; 0x2a
 8011edc:	d015      	beq.n	8011f0a <_svfiprintf_r+0xf6>
 8011ede:	9a07      	ldr	r2, [sp, #28]
 8011ee0:	4654      	mov	r4, sl
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	f04f 0c0a 	mov.w	ip, #10
 8011ee8:	4621      	mov	r1, r4
 8011eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011eee:	3b30      	subs	r3, #48	; 0x30
 8011ef0:	2b09      	cmp	r3, #9
 8011ef2:	d94d      	bls.n	8011f90 <_svfiprintf_r+0x17c>
 8011ef4:	b1b0      	cbz	r0, 8011f24 <_svfiprintf_r+0x110>
 8011ef6:	9207      	str	r2, [sp, #28]
 8011ef8:	e014      	b.n	8011f24 <_svfiprintf_r+0x110>
 8011efa:	eba0 0308 	sub.w	r3, r0, r8
 8011efe:	fa09 f303 	lsl.w	r3, r9, r3
 8011f02:	4313      	orrs	r3, r2
 8011f04:	9304      	str	r3, [sp, #16]
 8011f06:	46a2      	mov	sl, r4
 8011f08:	e7d2      	b.n	8011eb0 <_svfiprintf_r+0x9c>
 8011f0a:	9b03      	ldr	r3, [sp, #12]
 8011f0c:	1d19      	adds	r1, r3, #4
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	9103      	str	r1, [sp, #12]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	bfbb      	ittet	lt
 8011f16:	425b      	neglt	r3, r3
 8011f18:	f042 0202 	orrlt.w	r2, r2, #2
 8011f1c:	9307      	strge	r3, [sp, #28]
 8011f1e:	9307      	strlt	r3, [sp, #28]
 8011f20:	bfb8      	it	lt
 8011f22:	9204      	strlt	r2, [sp, #16]
 8011f24:	7823      	ldrb	r3, [r4, #0]
 8011f26:	2b2e      	cmp	r3, #46	; 0x2e
 8011f28:	d10c      	bne.n	8011f44 <_svfiprintf_r+0x130>
 8011f2a:	7863      	ldrb	r3, [r4, #1]
 8011f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8011f2e:	d134      	bne.n	8011f9a <_svfiprintf_r+0x186>
 8011f30:	9b03      	ldr	r3, [sp, #12]
 8011f32:	1d1a      	adds	r2, r3, #4
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	9203      	str	r2, [sp, #12]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	bfb8      	it	lt
 8011f3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011f40:	3402      	adds	r4, #2
 8011f42:	9305      	str	r3, [sp, #20]
 8011f44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801200c <_svfiprintf_r+0x1f8>
 8011f48:	7821      	ldrb	r1, [r4, #0]
 8011f4a:	2203      	movs	r2, #3
 8011f4c:	4650      	mov	r0, sl
 8011f4e:	f7ee f9c7 	bl	80002e0 <memchr>
 8011f52:	b138      	cbz	r0, 8011f64 <_svfiprintf_r+0x150>
 8011f54:	9b04      	ldr	r3, [sp, #16]
 8011f56:	eba0 000a 	sub.w	r0, r0, sl
 8011f5a:	2240      	movs	r2, #64	; 0x40
 8011f5c:	4082      	lsls	r2, r0
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	3401      	adds	r4, #1
 8011f62:	9304      	str	r3, [sp, #16]
 8011f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f68:	4825      	ldr	r0, [pc, #148]	; (8012000 <_svfiprintf_r+0x1ec>)
 8011f6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f6e:	2206      	movs	r2, #6
 8011f70:	f7ee f9b6 	bl	80002e0 <memchr>
 8011f74:	2800      	cmp	r0, #0
 8011f76:	d038      	beq.n	8011fea <_svfiprintf_r+0x1d6>
 8011f78:	4b22      	ldr	r3, [pc, #136]	; (8012004 <_svfiprintf_r+0x1f0>)
 8011f7a:	bb1b      	cbnz	r3, 8011fc4 <_svfiprintf_r+0x1b0>
 8011f7c:	9b03      	ldr	r3, [sp, #12]
 8011f7e:	3307      	adds	r3, #7
 8011f80:	f023 0307 	bic.w	r3, r3, #7
 8011f84:	3308      	adds	r3, #8
 8011f86:	9303      	str	r3, [sp, #12]
 8011f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f8a:	4433      	add	r3, r6
 8011f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8011f8e:	e768      	b.n	8011e62 <_svfiprintf_r+0x4e>
 8011f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f94:	460c      	mov	r4, r1
 8011f96:	2001      	movs	r0, #1
 8011f98:	e7a6      	b.n	8011ee8 <_svfiprintf_r+0xd4>
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	3401      	adds	r4, #1
 8011f9e:	9305      	str	r3, [sp, #20]
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	f04f 0c0a 	mov.w	ip, #10
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fac:	3a30      	subs	r2, #48	; 0x30
 8011fae:	2a09      	cmp	r2, #9
 8011fb0:	d903      	bls.n	8011fba <_svfiprintf_r+0x1a6>
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d0c6      	beq.n	8011f44 <_svfiprintf_r+0x130>
 8011fb6:	9105      	str	r1, [sp, #20]
 8011fb8:	e7c4      	b.n	8011f44 <_svfiprintf_r+0x130>
 8011fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fbe:	4604      	mov	r4, r0
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	e7f0      	b.n	8011fa6 <_svfiprintf_r+0x192>
 8011fc4:	ab03      	add	r3, sp, #12
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	462a      	mov	r2, r5
 8011fca:	4b0f      	ldr	r3, [pc, #60]	; (8012008 <_svfiprintf_r+0x1f4>)
 8011fcc:	a904      	add	r1, sp, #16
 8011fce:	4638      	mov	r0, r7
 8011fd0:	f7fd fef6 	bl	800fdc0 <_printf_float>
 8011fd4:	1c42      	adds	r2, r0, #1
 8011fd6:	4606      	mov	r6, r0
 8011fd8:	d1d6      	bne.n	8011f88 <_svfiprintf_r+0x174>
 8011fda:	89ab      	ldrh	r3, [r5, #12]
 8011fdc:	065b      	lsls	r3, r3, #25
 8011fde:	f53f af2d 	bmi.w	8011e3c <_svfiprintf_r+0x28>
 8011fe2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011fe4:	b01d      	add	sp, #116	; 0x74
 8011fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fea:	ab03      	add	r3, sp, #12
 8011fec:	9300      	str	r3, [sp, #0]
 8011fee:	462a      	mov	r2, r5
 8011ff0:	4b05      	ldr	r3, [pc, #20]	; (8012008 <_svfiprintf_r+0x1f4>)
 8011ff2:	a904      	add	r1, sp, #16
 8011ff4:	4638      	mov	r0, r7
 8011ff6:	f7fe f96b 	bl	80102d0 <_printf_i>
 8011ffa:	e7eb      	b.n	8011fd4 <_svfiprintf_r+0x1c0>
 8011ffc:	08012c64 	.word	0x08012c64
 8012000:	08012c6e 	.word	0x08012c6e
 8012004:	0800fdc1 	.word	0x0800fdc1
 8012008:	08011d61 	.word	0x08011d61
 801200c:	08012c6a 	.word	0x08012c6a

08012010 <__sflush_r>:
 8012010:	898a      	ldrh	r2, [r1, #12]
 8012012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012016:	4605      	mov	r5, r0
 8012018:	0710      	lsls	r0, r2, #28
 801201a:	460c      	mov	r4, r1
 801201c:	d458      	bmi.n	80120d0 <__sflush_r+0xc0>
 801201e:	684b      	ldr	r3, [r1, #4]
 8012020:	2b00      	cmp	r3, #0
 8012022:	dc05      	bgt.n	8012030 <__sflush_r+0x20>
 8012024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012026:	2b00      	cmp	r3, #0
 8012028:	dc02      	bgt.n	8012030 <__sflush_r+0x20>
 801202a:	2000      	movs	r0, #0
 801202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012032:	2e00      	cmp	r6, #0
 8012034:	d0f9      	beq.n	801202a <__sflush_r+0x1a>
 8012036:	2300      	movs	r3, #0
 8012038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801203c:	682f      	ldr	r7, [r5, #0]
 801203e:	6a21      	ldr	r1, [r4, #32]
 8012040:	602b      	str	r3, [r5, #0]
 8012042:	d032      	beq.n	80120aa <__sflush_r+0x9a>
 8012044:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012046:	89a3      	ldrh	r3, [r4, #12]
 8012048:	075a      	lsls	r2, r3, #29
 801204a:	d505      	bpl.n	8012058 <__sflush_r+0x48>
 801204c:	6863      	ldr	r3, [r4, #4]
 801204e:	1ac0      	subs	r0, r0, r3
 8012050:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012052:	b10b      	cbz	r3, 8012058 <__sflush_r+0x48>
 8012054:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012056:	1ac0      	subs	r0, r0, r3
 8012058:	2300      	movs	r3, #0
 801205a:	4602      	mov	r2, r0
 801205c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801205e:	6a21      	ldr	r1, [r4, #32]
 8012060:	4628      	mov	r0, r5
 8012062:	47b0      	blx	r6
 8012064:	1c43      	adds	r3, r0, #1
 8012066:	89a3      	ldrh	r3, [r4, #12]
 8012068:	d106      	bne.n	8012078 <__sflush_r+0x68>
 801206a:	6829      	ldr	r1, [r5, #0]
 801206c:	291d      	cmp	r1, #29
 801206e:	d82b      	bhi.n	80120c8 <__sflush_r+0xb8>
 8012070:	4a29      	ldr	r2, [pc, #164]	; (8012118 <__sflush_r+0x108>)
 8012072:	410a      	asrs	r2, r1
 8012074:	07d6      	lsls	r6, r2, #31
 8012076:	d427      	bmi.n	80120c8 <__sflush_r+0xb8>
 8012078:	2200      	movs	r2, #0
 801207a:	6062      	str	r2, [r4, #4]
 801207c:	04d9      	lsls	r1, r3, #19
 801207e:	6922      	ldr	r2, [r4, #16]
 8012080:	6022      	str	r2, [r4, #0]
 8012082:	d504      	bpl.n	801208e <__sflush_r+0x7e>
 8012084:	1c42      	adds	r2, r0, #1
 8012086:	d101      	bne.n	801208c <__sflush_r+0x7c>
 8012088:	682b      	ldr	r3, [r5, #0]
 801208a:	b903      	cbnz	r3, 801208e <__sflush_r+0x7e>
 801208c:	6560      	str	r0, [r4, #84]	; 0x54
 801208e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012090:	602f      	str	r7, [r5, #0]
 8012092:	2900      	cmp	r1, #0
 8012094:	d0c9      	beq.n	801202a <__sflush_r+0x1a>
 8012096:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801209a:	4299      	cmp	r1, r3
 801209c:	d002      	beq.n	80120a4 <__sflush_r+0x94>
 801209e:	4628      	mov	r0, r5
 80120a0:	f7ff f9e2 	bl	8011468 <_free_r>
 80120a4:	2000      	movs	r0, #0
 80120a6:	6360      	str	r0, [r4, #52]	; 0x34
 80120a8:	e7c0      	b.n	801202c <__sflush_r+0x1c>
 80120aa:	2301      	movs	r3, #1
 80120ac:	4628      	mov	r0, r5
 80120ae:	47b0      	blx	r6
 80120b0:	1c41      	adds	r1, r0, #1
 80120b2:	d1c8      	bne.n	8012046 <__sflush_r+0x36>
 80120b4:	682b      	ldr	r3, [r5, #0]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d0c5      	beq.n	8012046 <__sflush_r+0x36>
 80120ba:	2b1d      	cmp	r3, #29
 80120bc:	d001      	beq.n	80120c2 <__sflush_r+0xb2>
 80120be:	2b16      	cmp	r3, #22
 80120c0:	d101      	bne.n	80120c6 <__sflush_r+0xb6>
 80120c2:	602f      	str	r7, [r5, #0]
 80120c4:	e7b1      	b.n	801202a <__sflush_r+0x1a>
 80120c6:	89a3      	ldrh	r3, [r4, #12]
 80120c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120cc:	81a3      	strh	r3, [r4, #12]
 80120ce:	e7ad      	b.n	801202c <__sflush_r+0x1c>
 80120d0:	690f      	ldr	r7, [r1, #16]
 80120d2:	2f00      	cmp	r7, #0
 80120d4:	d0a9      	beq.n	801202a <__sflush_r+0x1a>
 80120d6:	0793      	lsls	r3, r2, #30
 80120d8:	680e      	ldr	r6, [r1, #0]
 80120da:	bf08      	it	eq
 80120dc:	694b      	ldreq	r3, [r1, #20]
 80120de:	600f      	str	r7, [r1, #0]
 80120e0:	bf18      	it	ne
 80120e2:	2300      	movne	r3, #0
 80120e4:	eba6 0807 	sub.w	r8, r6, r7
 80120e8:	608b      	str	r3, [r1, #8]
 80120ea:	f1b8 0f00 	cmp.w	r8, #0
 80120ee:	dd9c      	ble.n	801202a <__sflush_r+0x1a>
 80120f0:	6a21      	ldr	r1, [r4, #32]
 80120f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80120f4:	4643      	mov	r3, r8
 80120f6:	463a      	mov	r2, r7
 80120f8:	4628      	mov	r0, r5
 80120fa:	47b0      	blx	r6
 80120fc:	2800      	cmp	r0, #0
 80120fe:	dc06      	bgt.n	801210e <__sflush_r+0xfe>
 8012100:	89a3      	ldrh	r3, [r4, #12]
 8012102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012106:	81a3      	strh	r3, [r4, #12]
 8012108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801210c:	e78e      	b.n	801202c <__sflush_r+0x1c>
 801210e:	4407      	add	r7, r0
 8012110:	eba8 0800 	sub.w	r8, r8, r0
 8012114:	e7e9      	b.n	80120ea <__sflush_r+0xda>
 8012116:	bf00      	nop
 8012118:	dfbffffe 	.word	0xdfbffffe

0801211c <_fflush_r>:
 801211c:	b538      	push	{r3, r4, r5, lr}
 801211e:	690b      	ldr	r3, [r1, #16]
 8012120:	4605      	mov	r5, r0
 8012122:	460c      	mov	r4, r1
 8012124:	b913      	cbnz	r3, 801212c <_fflush_r+0x10>
 8012126:	2500      	movs	r5, #0
 8012128:	4628      	mov	r0, r5
 801212a:	bd38      	pop	{r3, r4, r5, pc}
 801212c:	b118      	cbz	r0, 8012136 <_fflush_r+0x1a>
 801212e:	6a03      	ldr	r3, [r0, #32]
 8012130:	b90b      	cbnz	r3, 8012136 <_fflush_r+0x1a>
 8012132:	f7fe fa7b 	bl	801062c <__sinit>
 8012136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d0f3      	beq.n	8012126 <_fflush_r+0xa>
 801213e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012140:	07d0      	lsls	r0, r2, #31
 8012142:	d404      	bmi.n	801214e <_fflush_r+0x32>
 8012144:	0599      	lsls	r1, r3, #22
 8012146:	d402      	bmi.n	801214e <_fflush_r+0x32>
 8012148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801214a:	f7fe fb86 	bl	801085a <__retarget_lock_acquire_recursive>
 801214e:	4628      	mov	r0, r5
 8012150:	4621      	mov	r1, r4
 8012152:	f7ff ff5d 	bl	8012010 <__sflush_r>
 8012156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012158:	07da      	lsls	r2, r3, #31
 801215a:	4605      	mov	r5, r0
 801215c:	d4e4      	bmi.n	8012128 <_fflush_r+0xc>
 801215e:	89a3      	ldrh	r3, [r4, #12]
 8012160:	059b      	lsls	r3, r3, #22
 8012162:	d4e1      	bmi.n	8012128 <_fflush_r+0xc>
 8012164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012166:	f7fe fb79 	bl	801085c <__retarget_lock_release_recursive>
 801216a:	e7dd      	b.n	8012128 <_fflush_r+0xc>

0801216c <memmove>:
 801216c:	4288      	cmp	r0, r1
 801216e:	b510      	push	{r4, lr}
 8012170:	eb01 0402 	add.w	r4, r1, r2
 8012174:	d902      	bls.n	801217c <memmove+0x10>
 8012176:	4284      	cmp	r4, r0
 8012178:	4623      	mov	r3, r4
 801217a:	d807      	bhi.n	801218c <memmove+0x20>
 801217c:	1e43      	subs	r3, r0, #1
 801217e:	42a1      	cmp	r1, r4
 8012180:	d008      	beq.n	8012194 <memmove+0x28>
 8012182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012186:	f803 2f01 	strb.w	r2, [r3, #1]!
 801218a:	e7f8      	b.n	801217e <memmove+0x12>
 801218c:	4402      	add	r2, r0
 801218e:	4601      	mov	r1, r0
 8012190:	428a      	cmp	r2, r1
 8012192:	d100      	bne.n	8012196 <memmove+0x2a>
 8012194:	bd10      	pop	{r4, pc}
 8012196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801219a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801219e:	e7f7      	b.n	8012190 <memmove+0x24>

080121a0 <_sbrk_r>:
 80121a0:	b538      	push	{r3, r4, r5, lr}
 80121a2:	4d06      	ldr	r5, [pc, #24]	; (80121bc <_sbrk_r+0x1c>)
 80121a4:	2300      	movs	r3, #0
 80121a6:	4604      	mov	r4, r0
 80121a8:	4608      	mov	r0, r1
 80121aa:	602b      	str	r3, [r5, #0]
 80121ac:	f7f0 fbf2 	bl	8002994 <_sbrk>
 80121b0:	1c43      	adds	r3, r0, #1
 80121b2:	d102      	bne.n	80121ba <_sbrk_r+0x1a>
 80121b4:	682b      	ldr	r3, [r5, #0]
 80121b6:	b103      	cbz	r3, 80121ba <_sbrk_r+0x1a>
 80121b8:	6023      	str	r3, [r4, #0]
 80121ba:	bd38      	pop	{r3, r4, r5, pc}
 80121bc:	240009a0 	.word	0x240009a0

080121c0 <__assert_func>:
 80121c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121c2:	4614      	mov	r4, r2
 80121c4:	461a      	mov	r2, r3
 80121c6:	4b09      	ldr	r3, [pc, #36]	; (80121ec <__assert_func+0x2c>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4605      	mov	r5, r0
 80121cc:	68d8      	ldr	r0, [r3, #12]
 80121ce:	b14c      	cbz	r4, 80121e4 <__assert_func+0x24>
 80121d0:	4b07      	ldr	r3, [pc, #28]	; (80121f0 <__assert_func+0x30>)
 80121d2:	9100      	str	r1, [sp, #0]
 80121d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80121d8:	4906      	ldr	r1, [pc, #24]	; (80121f4 <__assert_func+0x34>)
 80121da:	462b      	mov	r3, r5
 80121dc:	f000 f872 	bl	80122c4 <fiprintf>
 80121e0:	f000 f882 	bl	80122e8 <abort>
 80121e4:	4b04      	ldr	r3, [pc, #16]	; (80121f8 <__assert_func+0x38>)
 80121e6:	461c      	mov	r4, r3
 80121e8:	e7f3      	b.n	80121d2 <__assert_func+0x12>
 80121ea:	bf00      	nop
 80121ec:	2400006c 	.word	0x2400006c
 80121f0:	08012c7f 	.word	0x08012c7f
 80121f4:	08012c8c 	.word	0x08012c8c
 80121f8:	08012cba 	.word	0x08012cba

080121fc <_calloc_r>:
 80121fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121fe:	fba1 2402 	umull	r2, r4, r1, r2
 8012202:	b94c      	cbnz	r4, 8012218 <_calloc_r+0x1c>
 8012204:	4611      	mov	r1, r2
 8012206:	9201      	str	r2, [sp, #4]
 8012208:	f7ff f9a2 	bl	8011550 <_malloc_r>
 801220c:	9a01      	ldr	r2, [sp, #4]
 801220e:	4605      	mov	r5, r0
 8012210:	b930      	cbnz	r0, 8012220 <_calloc_r+0x24>
 8012212:	4628      	mov	r0, r5
 8012214:	b003      	add	sp, #12
 8012216:	bd30      	pop	{r4, r5, pc}
 8012218:	220c      	movs	r2, #12
 801221a:	6002      	str	r2, [r0, #0]
 801221c:	2500      	movs	r5, #0
 801221e:	e7f8      	b.n	8012212 <_calloc_r+0x16>
 8012220:	4621      	mov	r1, r4
 8012222:	f7fe fa9c 	bl	801075e <memset>
 8012226:	e7f4      	b.n	8012212 <_calloc_r+0x16>

08012228 <__ascii_mbtowc>:
 8012228:	b082      	sub	sp, #8
 801222a:	b901      	cbnz	r1, 801222e <__ascii_mbtowc+0x6>
 801222c:	a901      	add	r1, sp, #4
 801222e:	b142      	cbz	r2, 8012242 <__ascii_mbtowc+0x1a>
 8012230:	b14b      	cbz	r3, 8012246 <__ascii_mbtowc+0x1e>
 8012232:	7813      	ldrb	r3, [r2, #0]
 8012234:	600b      	str	r3, [r1, #0]
 8012236:	7812      	ldrb	r2, [r2, #0]
 8012238:	1e10      	subs	r0, r2, #0
 801223a:	bf18      	it	ne
 801223c:	2001      	movne	r0, #1
 801223e:	b002      	add	sp, #8
 8012240:	4770      	bx	lr
 8012242:	4610      	mov	r0, r2
 8012244:	e7fb      	b.n	801223e <__ascii_mbtowc+0x16>
 8012246:	f06f 0001 	mvn.w	r0, #1
 801224a:	e7f8      	b.n	801223e <__ascii_mbtowc+0x16>

0801224c <_realloc_r>:
 801224c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012250:	4680      	mov	r8, r0
 8012252:	4614      	mov	r4, r2
 8012254:	460e      	mov	r6, r1
 8012256:	b921      	cbnz	r1, 8012262 <_realloc_r+0x16>
 8012258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801225c:	4611      	mov	r1, r2
 801225e:	f7ff b977 	b.w	8011550 <_malloc_r>
 8012262:	b92a      	cbnz	r2, 8012270 <_realloc_r+0x24>
 8012264:	f7ff f900 	bl	8011468 <_free_r>
 8012268:	4625      	mov	r5, r4
 801226a:	4628      	mov	r0, r5
 801226c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012270:	f000 f841 	bl	80122f6 <_malloc_usable_size_r>
 8012274:	4284      	cmp	r4, r0
 8012276:	4607      	mov	r7, r0
 8012278:	d802      	bhi.n	8012280 <_realloc_r+0x34>
 801227a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801227e:	d812      	bhi.n	80122a6 <_realloc_r+0x5a>
 8012280:	4621      	mov	r1, r4
 8012282:	4640      	mov	r0, r8
 8012284:	f7ff f964 	bl	8011550 <_malloc_r>
 8012288:	4605      	mov	r5, r0
 801228a:	2800      	cmp	r0, #0
 801228c:	d0ed      	beq.n	801226a <_realloc_r+0x1e>
 801228e:	42bc      	cmp	r4, r7
 8012290:	4622      	mov	r2, r4
 8012292:	4631      	mov	r1, r6
 8012294:	bf28      	it	cs
 8012296:	463a      	movcs	r2, r7
 8012298:	f7fe fae1 	bl	801085e <memcpy>
 801229c:	4631      	mov	r1, r6
 801229e:	4640      	mov	r0, r8
 80122a0:	f7ff f8e2 	bl	8011468 <_free_r>
 80122a4:	e7e1      	b.n	801226a <_realloc_r+0x1e>
 80122a6:	4635      	mov	r5, r6
 80122a8:	e7df      	b.n	801226a <_realloc_r+0x1e>

080122aa <__ascii_wctomb>:
 80122aa:	b149      	cbz	r1, 80122c0 <__ascii_wctomb+0x16>
 80122ac:	2aff      	cmp	r2, #255	; 0xff
 80122ae:	bf85      	ittet	hi
 80122b0:	238a      	movhi	r3, #138	; 0x8a
 80122b2:	6003      	strhi	r3, [r0, #0]
 80122b4:	700a      	strbls	r2, [r1, #0]
 80122b6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80122ba:	bf98      	it	ls
 80122bc:	2001      	movls	r0, #1
 80122be:	4770      	bx	lr
 80122c0:	4608      	mov	r0, r1
 80122c2:	4770      	bx	lr

080122c4 <fiprintf>:
 80122c4:	b40e      	push	{r1, r2, r3}
 80122c6:	b503      	push	{r0, r1, lr}
 80122c8:	4601      	mov	r1, r0
 80122ca:	ab03      	add	r3, sp, #12
 80122cc:	4805      	ldr	r0, [pc, #20]	; (80122e4 <fiprintf+0x20>)
 80122ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80122d2:	6800      	ldr	r0, [r0, #0]
 80122d4:	9301      	str	r3, [sp, #4]
 80122d6:	f000 f83f 	bl	8012358 <_vfiprintf_r>
 80122da:	b002      	add	sp, #8
 80122dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80122e0:	b003      	add	sp, #12
 80122e2:	4770      	bx	lr
 80122e4:	2400006c 	.word	0x2400006c

080122e8 <abort>:
 80122e8:	b508      	push	{r3, lr}
 80122ea:	2006      	movs	r0, #6
 80122ec:	f000 fa0c 	bl	8012708 <raise>
 80122f0:	2001      	movs	r0, #1
 80122f2:	f7f0 fad7 	bl	80028a4 <_exit>

080122f6 <_malloc_usable_size_r>:
 80122f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122fa:	1f18      	subs	r0, r3, #4
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	bfbc      	itt	lt
 8012300:	580b      	ldrlt	r3, [r1, r0]
 8012302:	18c0      	addlt	r0, r0, r3
 8012304:	4770      	bx	lr

08012306 <__sfputc_r>:
 8012306:	6893      	ldr	r3, [r2, #8]
 8012308:	3b01      	subs	r3, #1
 801230a:	2b00      	cmp	r3, #0
 801230c:	b410      	push	{r4}
 801230e:	6093      	str	r3, [r2, #8]
 8012310:	da08      	bge.n	8012324 <__sfputc_r+0x1e>
 8012312:	6994      	ldr	r4, [r2, #24]
 8012314:	42a3      	cmp	r3, r4
 8012316:	db01      	blt.n	801231c <__sfputc_r+0x16>
 8012318:	290a      	cmp	r1, #10
 801231a:	d103      	bne.n	8012324 <__sfputc_r+0x1e>
 801231c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012320:	f000 b934 	b.w	801258c <__swbuf_r>
 8012324:	6813      	ldr	r3, [r2, #0]
 8012326:	1c58      	adds	r0, r3, #1
 8012328:	6010      	str	r0, [r2, #0]
 801232a:	7019      	strb	r1, [r3, #0]
 801232c:	4608      	mov	r0, r1
 801232e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012332:	4770      	bx	lr

08012334 <__sfputs_r>:
 8012334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012336:	4606      	mov	r6, r0
 8012338:	460f      	mov	r7, r1
 801233a:	4614      	mov	r4, r2
 801233c:	18d5      	adds	r5, r2, r3
 801233e:	42ac      	cmp	r4, r5
 8012340:	d101      	bne.n	8012346 <__sfputs_r+0x12>
 8012342:	2000      	movs	r0, #0
 8012344:	e007      	b.n	8012356 <__sfputs_r+0x22>
 8012346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801234a:	463a      	mov	r2, r7
 801234c:	4630      	mov	r0, r6
 801234e:	f7ff ffda 	bl	8012306 <__sfputc_r>
 8012352:	1c43      	adds	r3, r0, #1
 8012354:	d1f3      	bne.n	801233e <__sfputs_r+0xa>
 8012356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012358 <_vfiprintf_r>:
 8012358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801235c:	460d      	mov	r5, r1
 801235e:	b09d      	sub	sp, #116	; 0x74
 8012360:	4614      	mov	r4, r2
 8012362:	4698      	mov	r8, r3
 8012364:	4606      	mov	r6, r0
 8012366:	b118      	cbz	r0, 8012370 <_vfiprintf_r+0x18>
 8012368:	6a03      	ldr	r3, [r0, #32]
 801236a:	b90b      	cbnz	r3, 8012370 <_vfiprintf_r+0x18>
 801236c:	f7fe f95e 	bl	801062c <__sinit>
 8012370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012372:	07d9      	lsls	r1, r3, #31
 8012374:	d405      	bmi.n	8012382 <_vfiprintf_r+0x2a>
 8012376:	89ab      	ldrh	r3, [r5, #12]
 8012378:	059a      	lsls	r2, r3, #22
 801237a:	d402      	bmi.n	8012382 <_vfiprintf_r+0x2a>
 801237c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801237e:	f7fe fa6c 	bl	801085a <__retarget_lock_acquire_recursive>
 8012382:	89ab      	ldrh	r3, [r5, #12]
 8012384:	071b      	lsls	r3, r3, #28
 8012386:	d501      	bpl.n	801238c <_vfiprintf_r+0x34>
 8012388:	692b      	ldr	r3, [r5, #16]
 801238a:	b99b      	cbnz	r3, 80123b4 <_vfiprintf_r+0x5c>
 801238c:	4629      	mov	r1, r5
 801238e:	4630      	mov	r0, r6
 8012390:	f000 f93a 	bl	8012608 <__swsetup_r>
 8012394:	b170      	cbz	r0, 80123b4 <_vfiprintf_r+0x5c>
 8012396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012398:	07dc      	lsls	r4, r3, #31
 801239a:	d504      	bpl.n	80123a6 <_vfiprintf_r+0x4e>
 801239c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123a0:	b01d      	add	sp, #116	; 0x74
 80123a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a6:	89ab      	ldrh	r3, [r5, #12]
 80123a8:	0598      	lsls	r0, r3, #22
 80123aa:	d4f7      	bmi.n	801239c <_vfiprintf_r+0x44>
 80123ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123ae:	f7fe fa55 	bl	801085c <__retarget_lock_release_recursive>
 80123b2:	e7f3      	b.n	801239c <_vfiprintf_r+0x44>
 80123b4:	2300      	movs	r3, #0
 80123b6:	9309      	str	r3, [sp, #36]	; 0x24
 80123b8:	2320      	movs	r3, #32
 80123ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123be:	f8cd 800c 	str.w	r8, [sp, #12]
 80123c2:	2330      	movs	r3, #48	; 0x30
 80123c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012578 <_vfiprintf_r+0x220>
 80123c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123cc:	f04f 0901 	mov.w	r9, #1
 80123d0:	4623      	mov	r3, r4
 80123d2:	469a      	mov	sl, r3
 80123d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123d8:	b10a      	cbz	r2, 80123de <_vfiprintf_r+0x86>
 80123da:	2a25      	cmp	r2, #37	; 0x25
 80123dc:	d1f9      	bne.n	80123d2 <_vfiprintf_r+0x7a>
 80123de:	ebba 0b04 	subs.w	fp, sl, r4
 80123e2:	d00b      	beq.n	80123fc <_vfiprintf_r+0xa4>
 80123e4:	465b      	mov	r3, fp
 80123e6:	4622      	mov	r2, r4
 80123e8:	4629      	mov	r1, r5
 80123ea:	4630      	mov	r0, r6
 80123ec:	f7ff ffa2 	bl	8012334 <__sfputs_r>
 80123f0:	3001      	adds	r0, #1
 80123f2:	f000 80a9 	beq.w	8012548 <_vfiprintf_r+0x1f0>
 80123f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123f8:	445a      	add	r2, fp
 80123fa:	9209      	str	r2, [sp, #36]	; 0x24
 80123fc:	f89a 3000 	ldrb.w	r3, [sl]
 8012400:	2b00      	cmp	r3, #0
 8012402:	f000 80a1 	beq.w	8012548 <_vfiprintf_r+0x1f0>
 8012406:	2300      	movs	r3, #0
 8012408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801240c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012410:	f10a 0a01 	add.w	sl, sl, #1
 8012414:	9304      	str	r3, [sp, #16]
 8012416:	9307      	str	r3, [sp, #28]
 8012418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801241c:	931a      	str	r3, [sp, #104]	; 0x68
 801241e:	4654      	mov	r4, sl
 8012420:	2205      	movs	r2, #5
 8012422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012426:	4854      	ldr	r0, [pc, #336]	; (8012578 <_vfiprintf_r+0x220>)
 8012428:	f7ed ff5a 	bl	80002e0 <memchr>
 801242c:	9a04      	ldr	r2, [sp, #16]
 801242e:	b9d8      	cbnz	r0, 8012468 <_vfiprintf_r+0x110>
 8012430:	06d1      	lsls	r1, r2, #27
 8012432:	bf44      	itt	mi
 8012434:	2320      	movmi	r3, #32
 8012436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801243a:	0713      	lsls	r3, r2, #28
 801243c:	bf44      	itt	mi
 801243e:	232b      	movmi	r3, #43	; 0x2b
 8012440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012444:	f89a 3000 	ldrb.w	r3, [sl]
 8012448:	2b2a      	cmp	r3, #42	; 0x2a
 801244a:	d015      	beq.n	8012478 <_vfiprintf_r+0x120>
 801244c:	9a07      	ldr	r2, [sp, #28]
 801244e:	4654      	mov	r4, sl
 8012450:	2000      	movs	r0, #0
 8012452:	f04f 0c0a 	mov.w	ip, #10
 8012456:	4621      	mov	r1, r4
 8012458:	f811 3b01 	ldrb.w	r3, [r1], #1
 801245c:	3b30      	subs	r3, #48	; 0x30
 801245e:	2b09      	cmp	r3, #9
 8012460:	d94d      	bls.n	80124fe <_vfiprintf_r+0x1a6>
 8012462:	b1b0      	cbz	r0, 8012492 <_vfiprintf_r+0x13a>
 8012464:	9207      	str	r2, [sp, #28]
 8012466:	e014      	b.n	8012492 <_vfiprintf_r+0x13a>
 8012468:	eba0 0308 	sub.w	r3, r0, r8
 801246c:	fa09 f303 	lsl.w	r3, r9, r3
 8012470:	4313      	orrs	r3, r2
 8012472:	9304      	str	r3, [sp, #16]
 8012474:	46a2      	mov	sl, r4
 8012476:	e7d2      	b.n	801241e <_vfiprintf_r+0xc6>
 8012478:	9b03      	ldr	r3, [sp, #12]
 801247a:	1d19      	adds	r1, r3, #4
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	9103      	str	r1, [sp, #12]
 8012480:	2b00      	cmp	r3, #0
 8012482:	bfbb      	ittet	lt
 8012484:	425b      	neglt	r3, r3
 8012486:	f042 0202 	orrlt.w	r2, r2, #2
 801248a:	9307      	strge	r3, [sp, #28]
 801248c:	9307      	strlt	r3, [sp, #28]
 801248e:	bfb8      	it	lt
 8012490:	9204      	strlt	r2, [sp, #16]
 8012492:	7823      	ldrb	r3, [r4, #0]
 8012494:	2b2e      	cmp	r3, #46	; 0x2e
 8012496:	d10c      	bne.n	80124b2 <_vfiprintf_r+0x15a>
 8012498:	7863      	ldrb	r3, [r4, #1]
 801249a:	2b2a      	cmp	r3, #42	; 0x2a
 801249c:	d134      	bne.n	8012508 <_vfiprintf_r+0x1b0>
 801249e:	9b03      	ldr	r3, [sp, #12]
 80124a0:	1d1a      	adds	r2, r3, #4
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	9203      	str	r2, [sp, #12]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	bfb8      	it	lt
 80124aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80124ae:	3402      	adds	r4, #2
 80124b0:	9305      	str	r3, [sp, #20]
 80124b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012588 <_vfiprintf_r+0x230>
 80124b6:	7821      	ldrb	r1, [r4, #0]
 80124b8:	2203      	movs	r2, #3
 80124ba:	4650      	mov	r0, sl
 80124bc:	f7ed ff10 	bl	80002e0 <memchr>
 80124c0:	b138      	cbz	r0, 80124d2 <_vfiprintf_r+0x17a>
 80124c2:	9b04      	ldr	r3, [sp, #16]
 80124c4:	eba0 000a 	sub.w	r0, r0, sl
 80124c8:	2240      	movs	r2, #64	; 0x40
 80124ca:	4082      	lsls	r2, r0
 80124cc:	4313      	orrs	r3, r2
 80124ce:	3401      	adds	r4, #1
 80124d0:	9304      	str	r3, [sp, #16]
 80124d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124d6:	4829      	ldr	r0, [pc, #164]	; (801257c <_vfiprintf_r+0x224>)
 80124d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124dc:	2206      	movs	r2, #6
 80124de:	f7ed feff 	bl	80002e0 <memchr>
 80124e2:	2800      	cmp	r0, #0
 80124e4:	d03f      	beq.n	8012566 <_vfiprintf_r+0x20e>
 80124e6:	4b26      	ldr	r3, [pc, #152]	; (8012580 <_vfiprintf_r+0x228>)
 80124e8:	bb1b      	cbnz	r3, 8012532 <_vfiprintf_r+0x1da>
 80124ea:	9b03      	ldr	r3, [sp, #12]
 80124ec:	3307      	adds	r3, #7
 80124ee:	f023 0307 	bic.w	r3, r3, #7
 80124f2:	3308      	adds	r3, #8
 80124f4:	9303      	str	r3, [sp, #12]
 80124f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124f8:	443b      	add	r3, r7
 80124fa:	9309      	str	r3, [sp, #36]	; 0x24
 80124fc:	e768      	b.n	80123d0 <_vfiprintf_r+0x78>
 80124fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8012502:	460c      	mov	r4, r1
 8012504:	2001      	movs	r0, #1
 8012506:	e7a6      	b.n	8012456 <_vfiprintf_r+0xfe>
 8012508:	2300      	movs	r3, #0
 801250a:	3401      	adds	r4, #1
 801250c:	9305      	str	r3, [sp, #20]
 801250e:	4619      	mov	r1, r3
 8012510:	f04f 0c0a 	mov.w	ip, #10
 8012514:	4620      	mov	r0, r4
 8012516:	f810 2b01 	ldrb.w	r2, [r0], #1
 801251a:	3a30      	subs	r2, #48	; 0x30
 801251c:	2a09      	cmp	r2, #9
 801251e:	d903      	bls.n	8012528 <_vfiprintf_r+0x1d0>
 8012520:	2b00      	cmp	r3, #0
 8012522:	d0c6      	beq.n	80124b2 <_vfiprintf_r+0x15a>
 8012524:	9105      	str	r1, [sp, #20]
 8012526:	e7c4      	b.n	80124b2 <_vfiprintf_r+0x15a>
 8012528:	fb0c 2101 	mla	r1, ip, r1, r2
 801252c:	4604      	mov	r4, r0
 801252e:	2301      	movs	r3, #1
 8012530:	e7f0      	b.n	8012514 <_vfiprintf_r+0x1bc>
 8012532:	ab03      	add	r3, sp, #12
 8012534:	9300      	str	r3, [sp, #0]
 8012536:	462a      	mov	r2, r5
 8012538:	4b12      	ldr	r3, [pc, #72]	; (8012584 <_vfiprintf_r+0x22c>)
 801253a:	a904      	add	r1, sp, #16
 801253c:	4630      	mov	r0, r6
 801253e:	f7fd fc3f 	bl	800fdc0 <_printf_float>
 8012542:	4607      	mov	r7, r0
 8012544:	1c78      	adds	r0, r7, #1
 8012546:	d1d6      	bne.n	80124f6 <_vfiprintf_r+0x19e>
 8012548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801254a:	07d9      	lsls	r1, r3, #31
 801254c:	d405      	bmi.n	801255a <_vfiprintf_r+0x202>
 801254e:	89ab      	ldrh	r3, [r5, #12]
 8012550:	059a      	lsls	r2, r3, #22
 8012552:	d402      	bmi.n	801255a <_vfiprintf_r+0x202>
 8012554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012556:	f7fe f981 	bl	801085c <__retarget_lock_release_recursive>
 801255a:	89ab      	ldrh	r3, [r5, #12]
 801255c:	065b      	lsls	r3, r3, #25
 801255e:	f53f af1d 	bmi.w	801239c <_vfiprintf_r+0x44>
 8012562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012564:	e71c      	b.n	80123a0 <_vfiprintf_r+0x48>
 8012566:	ab03      	add	r3, sp, #12
 8012568:	9300      	str	r3, [sp, #0]
 801256a:	462a      	mov	r2, r5
 801256c:	4b05      	ldr	r3, [pc, #20]	; (8012584 <_vfiprintf_r+0x22c>)
 801256e:	a904      	add	r1, sp, #16
 8012570:	4630      	mov	r0, r6
 8012572:	f7fd fead 	bl	80102d0 <_printf_i>
 8012576:	e7e4      	b.n	8012542 <_vfiprintf_r+0x1ea>
 8012578:	08012c64 	.word	0x08012c64
 801257c:	08012c6e 	.word	0x08012c6e
 8012580:	0800fdc1 	.word	0x0800fdc1
 8012584:	08012335 	.word	0x08012335
 8012588:	08012c6a 	.word	0x08012c6a

0801258c <__swbuf_r>:
 801258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801258e:	460e      	mov	r6, r1
 8012590:	4614      	mov	r4, r2
 8012592:	4605      	mov	r5, r0
 8012594:	b118      	cbz	r0, 801259e <__swbuf_r+0x12>
 8012596:	6a03      	ldr	r3, [r0, #32]
 8012598:	b90b      	cbnz	r3, 801259e <__swbuf_r+0x12>
 801259a:	f7fe f847 	bl	801062c <__sinit>
 801259e:	69a3      	ldr	r3, [r4, #24]
 80125a0:	60a3      	str	r3, [r4, #8]
 80125a2:	89a3      	ldrh	r3, [r4, #12]
 80125a4:	071a      	lsls	r2, r3, #28
 80125a6:	d525      	bpl.n	80125f4 <__swbuf_r+0x68>
 80125a8:	6923      	ldr	r3, [r4, #16]
 80125aa:	b31b      	cbz	r3, 80125f4 <__swbuf_r+0x68>
 80125ac:	6823      	ldr	r3, [r4, #0]
 80125ae:	6922      	ldr	r2, [r4, #16]
 80125b0:	1a98      	subs	r0, r3, r2
 80125b2:	6963      	ldr	r3, [r4, #20]
 80125b4:	b2f6      	uxtb	r6, r6
 80125b6:	4283      	cmp	r3, r0
 80125b8:	4637      	mov	r7, r6
 80125ba:	dc04      	bgt.n	80125c6 <__swbuf_r+0x3a>
 80125bc:	4621      	mov	r1, r4
 80125be:	4628      	mov	r0, r5
 80125c0:	f7ff fdac 	bl	801211c <_fflush_r>
 80125c4:	b9e0      	cbnz	r0, 8012600 <__swbuf_r+0x74>
 80125c6:	68a3      	ldr	r3, [r4, #8]
 80125c8:	3b01      	subs	r3, #1
 80125ca:	60a3      	str	r3, [r4, #8]
 80125cc:	6823      	ldr	r3, [r4, #0]
 80125ce:	1c5a      	adds	r2, r3, #1
 80125d0:	6022      	str	r2, [r4, #0]
 80125d2:	701e      	strb	r6, [r3, #0]
 80125d4:	6962      	ldr	r2, [r4, #20]
 80125d6:	1c43      	adds	r3, r0, #1
 80125d8:	429a      	cmp	r2, r3
 80125da:	d004      	beq.n	80125e6 <__swbuf_r+0x5a>
 80125dc:	89a3      	ldrh	r3, [r4, #12]
 80125de:	07db      	lsls	r3, r3, #31
 80125e0:	d506      	bpl.n	80125f0 <__swbuf_r+0x64>
 80125e2:	2e0a      	cmp	r6, #10
 80125e4:	d104      	bne.n	80125f0 <__swbuf_r+0x64>
 80125e6:	4621      	mov	r1, r4
 80125e8:	4628      	mov	r0, r5
 80125ea:	f7ff fd97 	bl	801211c <_fflush_r>
 80125ee:	b938      	cbnz	r0, 8012600 <__swbuf_r+0x74>
 80125f0:	4638      	mov	r0, r7
 80125f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125f4:	4621      	mov	r1, r4
 80125f6:	4628      	mov	r0, r5
 80125f8:	f000 f806 	bl	8012608 <__swsetup_r>
 80125fc:	2800      	cmp	r0, #0
 80125fe:	d0d5      	beq.n	80125ac <__swbuf_r+0x20>
 8012600:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012604:	e7f4      	b.n	80125f0 <__swbuf_r+0x64>
	...

08012608 <__swsetup_r>:
 8012608:	b538      	push	{r3, r4, r5, lr}
 801260a:	4b2a      	ldr	r3, [pc, #168]	; (80126b4 <__swsetup_r+0xac>)
 801260c:	4605      	mov	r5, r0
 801260e:	6818      	ldr	r0, [r3, #0]
 8012610:	460c      	mov	r4, r1
 8012612:	b118      	cbz	r0, 801261c <__swsetup_r+0x14>
 8012614:	6a03      	ldr	r3, [r0, #32]
 8012616:	b90b      	cbnz	r3, 801261c <__swsetup_r+0x14>
 8012618:	f7fe f808 	bl	801062c <__sinit>
 801261c:	89a3      	ldrh	r3, [r4, #12]
 801261e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012622:	0718      	lsls	r0, r3, #28
 8012624:	d422      	bmi.n	801266c <__swsetup_r+0x64>
 8012626:	06d9      	lsls	r1, r3, #27
 8012628:	d407      	bmi.n	801263a <__swsetup_r+0x32>
 801262a:	2309      	movs	r3, #9
 801262c:	602b      	str	r3, [r5, #0]
 801262e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012632:	81a3      	strh	r3, [r4, #12]
 8012634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012638:	e034      	b.n	80126a4 <__swsetup_r+0x9c>
 801263a:	0758      	lsls	r0, r3, #29
 801263c:	d512      	bpl.n	8012664 <__swsetup_r+0x5c>
 801263e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012640:	b141      	cbz	r1, 8012654 <__swsetup_r+0x4c>
 8012642:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012646:	4299      	cmp	r1, r3
 8012648:	d002      	beq.n	8012650 <__swsetup_r+0x48>
 801264a:	4628      	mov	r0, r5
 801264c:	f7fe ff0c 	bl	8011468 <_free_r>
 8012650:	2300      	movs	r3, #0
 8012652:	6363      	str	r3, [r4, #52]	; 0x34
 8012654:	89a3      	ldrh	r3, [r4, #12]
 8012656:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801265a:	81a3      	strh	r3, [r4, #12]
 801265c:	2300      	movs	r3, #0
 801265e:	6063      	str	r3, [r4, #4]
 8012660:	6923      	ldr	r3, [r4, #16]
 8012662:	6023      	str	r3, [r4, #0]
 8012664:	89a3      	ldrh	r3, [r4, #12]
 8012666:	f043 0308 	orr.w	r3, r3, #8
 801266a:	81a3      	strh	r3, [r4, #12]
 801266c:	6923      	ldr	r3, [r4, #16]
 801266e:	b94b      	cbnz	r3, 8012684 <__swsetup_r+0x7c>
 8012670:	89a3      	ldrh	r3, [r4, #12]
 8012672:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801267a:	d003      	beq.n	8012684 <__swsetup_r+0x7c>
 801267c:	4621      	mov	r1, r4
 801267e:	4628      	mov	r0, r5
 8012680:	f000 f884 	bl	801278c <__smakebuf_r>
 8012684:	89a0      	ldrh	r0, [r4, #12]
 8012686:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801268a:	f010 0301 	ands.w	r3, r0, #1
 801268e:	d00a      	beq.n	80126a6 <__swsetup_r+0x9e>
 8012690:	2300      	movs	r3, #0
 8012692:	60a3      	str	r3, [r4, #8]
 8012694:	6963      	ldr	r3, [r4, #20]
 8012696:	425b      	negs	r3, r3
 8012698:	61a3      	str	r3, [r4, #24]
 801269a:	6923      	ldr	r3, [r4, #16]
 801269c:	b943      	cbnz	r3, 80126b0 <__swsetup_r+0xa8>
 801269e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80126a2:	d1c4      	bne.n	801262e <__swsetup_r+0x26>
 80126a4:	bd38      	pop	{r3, r4, r5, pc}
 80126a6:	0781      	lsls	r1, r0, #30
 80126a8:	bf58      	it	pl
 80126aa:	6963      	ldrpl	r3, [r4, #20]
 80126ac:	60a3      	str	r3, [r4, #8]
 80126ae:	e7f4      	b.n	801269a <__swsetup_r+0x92>
 80126b0:	2000      	movs	r0, #0
 80126b2:	e7f7      	b.n	80126a4 <__swsetup_r+0x9c>
 80126b4:	2400006c 	.word	0x2400006c

080126b8 <_raise_r>:
 80126b8:	291f      	cmp	r1, #31
 80126ba:	b538      	push	{r3, r4, r5, lr}
 80126bc:	4604      	mov	r4, r0
 80126be:	460d      	mov	r5, r1
 80126c0:	d904      	bls.n	80126cc <_raise_r+0x14>
 80126c2:	2316      	movs	r3, #22
 80126c4:	6003      	str	r3, [r0, #0]
 80126c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126ca:	bd38      	pop	{r3, r4, r5, pc}
 80126cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80126ce:	b112      	cbz	r2, 80126d6 <_raise_r+0x1e>
 80126d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126d4:	b94b      	cbnz	r3, 80126ea <_raise_r+0x32>
 80126d6:	4620      	mov	r0, r4
 80126d8:	f000 f830 	bl	801273c <_getpid_r>
 80126dc:	462a      	mov	r2, r5
 80126de:	4601      	mov	r1, r0
 80126e0:	4620      	mov	r0, r4
 80126e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126e6:	f000 b817 	b.w	8012718 <_kill_r>
 80126ea:	2b01      	cmp	r3, #1
 80126ec:	d00a      	beq.n	8012704 <_raise_r+0x4c>
 80126ee:	1c59      	adds	r1, r3, #1
 80126f0:	d103      	bne.n	80126fa <_raise_r+0x42>
 80126f2:	2316      	movs	r3, #22
 80126f4:	6003      	str	r3, [r0, #0]
 80126f6:	2001      	movs	r0, #1
 80126f8:	e7e7      	b.n	80126ca <_raise_r+0x12>
 80126fa:	2400      	movs	r4, #0
 80126fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012700:	4628      	mov	r0, r5
 8012702:	4798      	blx	r3
 8012704:	2000      	movs	r0, #0
 8012706:	e7e0      	b.n	80126ca <_raise_r+0x12>

08012708 <raise>:
 8012708:	4b02      	ldr	r3, [pc, #8]	; (8012714 <raise+0xc>)
 801270a:	4601      	mov	r1, r0
 801270c:	6818      	ldr	r0, [r3, #0]
 801270e:	f7ff bfd3 	b.w	80126b8 <_raise_r>
 8012712:	bf00      	nop
 8012714:	2400006c 	.word	0x2400006c

08012718 <_kill_r>:
 8012718:	b538      	push	{r3, r4, r5, lr}
 801271a:	4d07      	ldr	r5, [pc, #28]	; (8012738 <_kill_r+0x20>)
 801271c:	2300      	movs	r3, #0
 801271e:	4604      	mov	r4, r0
 8012720:	4608      	mov	r0, r1
 8012722:	4611      	mov	r1, r2
 8012724:	602b      	str	r3, [r5, #0]
 8012726:	f7f0 f8ad 	bl	8002884 <_kill>
 801272a:	1c43      	adds	r3, r0, #1
 801272c:	d102      	bne.n	8012734 <_kill_r+0x1c>
 801272e:	682b      	ldr	r3, [r5, #0]
 8012730:	b103      	cbz	r3, 8012734 <_kill_r+0x1c>
 8012732:	6023      	str	r3, [r4, #0]
 8012734:	bd38      	pop	{r3, r4, r5, pc}
 8012736:	bf00      	nop
 8012738:	240009a0 	.word	0x240009a0

0801273c <_getpid_r>:
 801273c:	f7f0 b89a 	b.w	8002874 <_getpid>

08012740 <__swhatbuf_r>:
 8012740:	b570      	push	{r4, r5, r6, lr}
 8012742:	460c      	mov	r4, r1
 8012744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012748:	2900      	cmp	r1, #0
 801274a:	b096      	sub	sp, #88	; 0x58
 801274c:	4615      	mov	r5, r2
 801274e:	461e      	mov	r6, r3
 8012750:	da0d      	bge.n	801276e <__swhatbuf_r+0x2e>
 8012752:	89a3      	ldrh	r3, [r4, #12]
 8012754:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012758:	f04f 0100 	mov.w	r1, #0
 801275c:	bf0c      	ite	eq
 801275e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012762:	2340      	movne	r3, #64	; 0x40
 8012764:	2000      	movs	r0, #0
 8012766:	6031      	str	r1, [r6, #0]
 8012768:	602b      	str	r3, [r5, #0]
 801276a:	b016      	add	sp, #88	; 0x58
 801276c:	bd70      	pop	{r4, r5, r6, pc}
 801276e:	466a      	mov	r2, sp
 8012770:	f000 f848 	bl	8012804 <_fstat_r>
 8012774:	2800      	cmp	r0, #0
 8012776:	dbec      	blt.n	8012752 <__swhatbuf_r+0x12>
 8012778:	9901      	ldr	r1, [sp, #4]
 801277a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801277e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012782:	4259      	negs	r1, r3
 8012784:	4159      	adcs	r1, r3
 8012786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801278a:	e7eb      	b.n	8012764 <__swhatbuf_r+0x24>

0801278c <__smakebuf_r>:
 801278c:	898b      	ldrh	r3, [r1, #12]
 801278e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012790:	079d      	lsls	r5, r3, #30
 8012792:	4606      	mov	r6, r0
 8012794:	460c      	mov	r4, r1
 8012796:	d507      	bpl.n	80127a8 <__smakebuf_r+0x1c>
 8012798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801279c:	6023      	str	r3, [r4, #0]
 801279e:	6123      	str	r3, [r4, #16]
 80127a0:	2301      	movs	r3, #1
 80127a2:	6163      	str	r3, [r4, #20]
 80127a4:	b002      	add	sp, #8
 80127a6:	bd70      	pop	{r4, r5, r6, pc}
 80127a8:	ab01      	add	r3, sp, #4
 80127aa:	466a      	mov	r2, sp
 80127ac:	f7ff ffc8 	bl	8012740 <__swhatbuf_r>
 80127b0:	9900      	ldr	r1, [sp, #0]
 80127b2:	4605      	mov	r5, r0
 80127b4:	4630      	mov	r0, r6
 80127b6:	f7fe fecb 	bl	8011550 <_malloc_r>
 80127ba:	b948      	cbnz	r0, 80127d0 <__smakebuf_r+0x44>
 80127bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127c0:	059a      	lsls	r2, r3, #22
 80127c2:	d4ef      	bmi.n	80127a4 <__smakebuf_r+0x18>
 80127c4:	f023 0303 	bic.w	r3, r3, #3
 80127c8:	f043 0302 	orr.w	r3, r3, #2
 80127cc:	81a3      	strh	r3, [r4, #12]
 80127ce:	e7e3      	b.n	8012798 <__smakebuf_r+0xc>
 80127d0:	89a3      	ldrh	r3, [r4, #12]
 80127d2:	6020      	str	r0, [r4, #0]
 80127d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127d8:	81a3      	strh	r3, [r4, #12]
 80127da:	9b00      	ldr	r3, [sp, #0]
 80127dc:	6163      	str	r3, [r4, #20]
 80127de:	9b01      	ldr	r3, [sp, #4]
 80127e0:	6120      	str	r0, [r4, #16]
 80127e2:	b15b      	cbz	r3, 80127fc <__smakebuf_r+0x70>
 80127e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127e8:	4630      	mov	r0, r6
 80127ea:	f000 f81d 	bl	8012828 <_isatty_r>
 80127ee:	b128      	cbz	r0, 80127fc <__smakebuf_r+0x70>
 80127f0:	89a3      	ldrh	r3, [r4, #12]
 80127f2:	f023 0303 	bic.w	r3, r3, #3
 80127f6:	f043 0301 	orr.w	r3, r3, #1
 80127fa:	81a3      	strh	r3, [r4, #12]
 80127fc:	89a3      	ldrh	r3, [r4, #12]
 80127fe:	431d      	orrs	r5, r3
 8012800:	81a5      	strh	r5, [r4, #12]
 8012802:	e7cf      	b.n	80127a4 <__smakebuf_r+0x18>

08012804 <_fstat_r>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	4d07      	ldr	r5, [pc, #28]	; (8012824 <_fstat_r+0x20>)
 8012808:	2300      	movs	r3, #0
 801280a:	4604      	mov	r4, r0
 801280c:	4608      	mov	r0, r1
 801280e:	4611      	mov	r1, r2
 8012810:	602b      	str	r3, [r5, #0]
 8012812:	f7f0 f896 	bl	8002942 <_fstat>
 8012816:	1c43      	adds	r3, r0, #1
 8012818:	d102      	bne.n	8012820 <_fstat_r+0x1c>
 801281a:	682b      	ldr	r3, [r5, #0]
 801281c:	b103      	cbz	r3, 8012820 <_fstat_r+0x1c>
 801281e:	6023      	str	r3, [r4, #0]
 8012820:	bd38      	pop	{r3, r4, r5, pc}
 8012822:	bf00      	nop
 8012824:	240009a0 	.word	0x240009a0

08012828 <_isatty_r>:
 8012828:	b538      	push	{r3, r4, r5, lr}
 801282a:	4d06      	ldr	r5, [pc, #24]	; (8012844 <_isatty_r+0x1c>)
 801282c:	2300      	movs	r3, #0
 801282e:	4604      	mov	r4, r0
 8012830:	4608      	mov	r0, r1
 8012832:	602b      	str	r3, [r5, #0]
 8012834:	f7f0 f895 	bl	8002962 <_isatty>
 8012838:	1c43      	adds	r3, r0, #1
 801283a:	d102      	bne.n	8012842 <_isatty_r+0x1a>
 801283c:	682b      	ldr	r3, [r5, #0]
 801283e:	b103      	cbz	r3, 8012842 <_isatty_r+0x1a>
 8012840:	6023      	str	r3, [r4, #0]
 8012842:	bd38      	pop	{r3, r4, r5, pc}
 8012844:	240009a0 	.word	0x240009a0

08012848 <_init>:
 8012848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801284a:	bf00      	nop
 801284c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801284e:	bc08      	pop	{r3}
 8012850:	469e      	mov	lr, r3
 8012852:	4770      	bx	lr

08012854 <_fini>:
 8012854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012856:	bf00      	nop
 8012858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801285a:	bc08      	pop	{r3}
 801285c:	469e      	mov	lr, r3
 801285e:	4770      	bx	lr
