
racecar_pcb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000960c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080098ac  080098ac  000198ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009930  08009930  00019930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009938  08009938  00019938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800993c  0800993c  0001993c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08009940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000390  24000060  080099a0  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003f0  080099a0  000203f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012e0b  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000023c1  00000000  00000000  00032edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000b20  00000000  00000000  000352a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000088d  00000000  00000000  00035dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039615  00000000  00000000  0003664d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010f02  00000000  00000000  0006fc62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015b419  00000000  00000000  00080b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003220  00000000  00000000  001dbf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  001df1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009894 	.word	0x08009894

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08009894 	.word	0x08009894

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f000 fc96 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f80e 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 f93e 	bl	8000908 <MX_GPIO_Init>
  MX_DMA_Init();
 800068c:	f000 f91c 	bl	80008c8 <MX_DMA_Init>
  MX_UART5_Init();
 8000690:	f000 f8ce 	bl	8000830 <MX_UART5_Init>
  MX_LPUART1_UART_Init();
 8000694:	f000 f880 	bl	8000798 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8000698:	f000 fa0a 	bl	8000ab0 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 800069c:	f000 fa18 	bl	8000ad0 <loop>
  {
 80006a0:	e7fc      	b.n	800069c <main+0x20>
	...

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b09c      	sub	sp, #112	; 0x70
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ae:	224c      	movs	r2, #76	; 0x4c
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f008 fc6a 	bl	8008f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2220      	movs	r2, #32
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f008 fc64 	bl	8008f8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006c4:	2002      	movs	r0, #2
 80006c6:	f003 fe31 	bl	800432c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b30      	ldr	r3, [pc, #192]	; (8000790 <SystemClock_Config+0xec>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	4a2f      	ldr	r2, [pc, #188]	; (8000790 <SystemClock_Config+0xec>)
 80006d4:	f023 0301 	bic.w	r3, r3, #1
 80006d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemClock_Config+0xec>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <SystemClock_Config+0xf0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a2a      	ldr	r2, [pc, #168]	; (8000794 <SystemClock_Config+0xf0>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xf0>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006fc:	bf00      	nop
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xf0>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800070a:	d1f8      	bne.n	80006fe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	2302      	movs	r3, #2
 800071c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800071e:	2305      	movs	r3, #5
 8000720:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000722:	23a0      	movs	r3, #160	; 0xa0
 8000724:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 800072e:	2308      	movs	r3, #8
 8000730:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000732:	2308      	movs	r3, #8
 8000734:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000736:	2300      	movs	r3, #0
 8000738:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fe2c 	bl	80043a0 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800074e:	f000 f923 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	233f      	movs	r3, #63	; 0x3f
 8000754:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2303      	movs	r3, #3
 8000758:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800075e:	2309      	movs	r3, #9
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2101      	movs	r1, #1
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fa6c 	bl	8004c54 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000782:	f000 f909 	bl	8000998 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3770      	adds	r7, #112	; 0x70
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	58000400 	.word	0x58000400
 8000794:	58024800 	.word	0x58024800

08000798 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <MX_LPUART1_UART_Init+0x94>)
 80007a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007e0:	4811      	ldr	r0, [pc, #68]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007e2:	f006 fbef 	bl	8006fc4 <HAL_UART_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80007ec:	f000 f8d4 	bl	8000998 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007f4:	f008 fadf 	bl	8008db6 <HAL_UARTEx_SetTxFifoThreshold>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007fe:	f000 f8cb 	bl	8000998 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 8000806:	f008 fb14 	bl	8008e32 <HAL_UARTEx_SetRxFifoThreshold>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000810:	f000 f8c2 	bl	8000998 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 8000816:	f008 fa95 	bl	8008d44 <HAL_UARTEx_DisableFifoMode>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000820:	f000 f8ba 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2400007c 	.word	0x2400007c
 800082c:	58000c00 	.word	0x58000c00

08000830 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_UART5_Init+0x90>)
 8000836:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <MX_UART5_Init+0x94>)
 8000838:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <MX_UART5_Init+0x90>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_UART5_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_UART5_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_UART5_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_UART5_Init+0x90>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_UART5_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_UART5_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_UART5_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_UART5_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_UART5_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000878:	4811      	ldr	r0, [pc, #68]	; (80008c0 <MX_UART5_Init+0x90>)
 800087a:	f006 fba3 	bl	8006fc4 <HAL_UART_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000884:	f000 f888 	bl	8000998 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_UART5_Init+0x90>)
 800088c:	f008 fa93 	bl	8008db6 <HAL_UARTEx_SetTxFifoThreshold>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000896:	f000 f87f 	bl	8000998 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4808      	ldr	r0, [pc, #32]	; (80008c0 <MX_UART5_Init+0x90>)
 800089e:	f008 fac8 	bl	8008e32 <HAL_UARTEx_SetRxFifoThreshold>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80008a8:	f000 f876 	bl	8000998 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_UART5_Init+0x90>)
 80008ae:	f008 fa49 	bl	8008d44 <HAL_UARTEx_DisableFifoMode>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80008b8:	f000 f86e 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	24000110 	.word	0x24000110
 80008c4:	40005000 	.word	0x40005000

080008c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_DMA_Init+0x3c>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008d4:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <MX_DMA_Init+0x3c>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_DMA_Init+0x3c>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	200b      	movs	r0, #11
 80008f2:	f000 fcfa 	bl	80012ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008f6:	200b      	movs	r0, #11
 80008f8:	f000 fd11 	bl	800131e <HAL_NVIC_EnableIRQ>

}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58024400 	.word	0x58024400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <MX_GPIO_Init+0x8c>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <MX_GPIO_Init+0x8c>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091e:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_GPIO_Init+0x8c>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_GPIO_Init+0x8c>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <MX_GPIO_Init+0x8c>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_GPIO_Init+0x8c>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_GPIO_Init+0x8c>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <MX_GPIO_Init+0x8c>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_GPIO_Init+0x8c>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <MX_GPIO_Init+0x8c>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <MX_GPIO_Init+0x8c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_GPIO_Init+0x8c>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	58024400 	.word	0x58024400

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <_ZL8DWT_Initv>:
#define INC_UTILITY_H_

#include "main.h"

static inline void DWT_Init(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <_ZL8DWT_Initv+0x28>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <_ZL8DWT_Initv+0x28>)
 80009ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009b2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <_ZL8DWT_Initv+0x2c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <_ZL8DWT_Initv+0x2c>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000edf0 	.word	0xe000edf0
 80009d0:	e0001000 	.word	0xe0001000

080009d4 <_Z15read_speed_datav>:
const uint32_t acsr = ('A'<<24) | ('C'<<16) | ('S'<<8) | 'R';
uint32_t received_speed[SPEED_PIN_COUNT+1];
uint32_t speed[SPEED_PIN_COUNT];
//uint8_t speed_index=0;

HAL_StatusTypeDef read_speed_data(){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80009da:	2300      	movs	r3, #0
 80009dc:	71fb      	strb	r3, [r7, #7]
 80009de:	e009      	b.n	80009f4 <_Z15read_speed_datav+0x20>
		if(received_speed[i]==acsr)break;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <_Z15read_speed_datav+0x78>)
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <_Z15read_speed_datav+0x7c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d006      	beq.n	80009fc <_Z15read_speed_datav+0x28>
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	3301      	adds	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b10      	cmp	r3, #16
 80009f8:	d9f2      	bls.n	80009e0 <_Z15read_speed_datav+0xc>
 80009fa:	e000      	b.n	80009fe <_Z15read_speed_datav+0x2a>
		if(received_speed[i]==acsr)break;
 80009fc:	bf00      	nop
	}
	if(i==SPEED_PIN_COUNT+1)return HAL_ERROR;
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b11      	cmp	r3, #17
 8000a02:	d101      	bne.n	8000a08 <_Z15read_speed_datav+0x34>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e01c      	b.n	8000a42 <_Z15read_speed_datav+0x6e>

	memcpy(speed,&received_speed[i+1],(SPEED_PIN_COUNT-i)*sizeof(uint32_t));
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <_Z15read_speed_datav+0x78>)
 8000a10:	1899      	adds	r1, r3, r2
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f1c3 0310 	rsb	r3, r3, #16
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <_Z15read_speed_datav+0x80>)
 8000a1e:	f008 fae9 	bl	8008ff4 <memcpy>
	if(i){
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d00b      	beq.n	8000a40 <_Z15read_speed_datav+0x6c>
		memcpy(&speed[SPEED_PIN_COUNT-i],received_speed,i*sizeof(uint32_t));
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f1c3 0310 	rsb	r3, r3, #16
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <_Z15read_speed_datav+0x80>)
 8000a32:	1898      	adds	r0, r3, r2
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4904      	ldr	r1, [pc, #16]	; (8000a4c <_Z15read_speed_datav+0x78>)
 8000a3c:	f008 fada 	bl	8008ff4 <memcpy>
	}
	return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2400021c 	.word	0x2400021c
 8000a50:	41435352 	.word	0x41435352
 8000a54:	24000260 	.word	0x24000260

08000a58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5){
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <HAL_UART_RxCpltCallback+0x24>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d103      	bne.n	8000a72 <HAL_UART_RxCpltCallback+0x1a>
		if(read_speed_data()==HAL_OK){
 8000a6a:	f7ff ffb3 	bl	80009d4 <_Z15read_speed_datav>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0

		}
	}
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40005000 	.word	0x40005000

08000a80 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==UART5) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <HAL_UART_ErrorCallback+0x24>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d104      	bne.n	8000a9c <HAL_UART_ErrorCallback+0x1c>
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8000a92:	2244      	movs	r2, #68	; 0x44
 8000a94:	4904      	ldr	r1, [pc, #16]	; (8000aa8 <HAL_UART_ErrorCallback+0x28>)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <HAL_UART_ErrorCallback+0x2c>)
 8000a98:	f006 fb72 	bl	8007180 <HAL_UART_Receive_DMA>
    }
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40005000 	.word	0x40005000
 8000aa8:	2400021c 	.word	0x2400021c
 8000aac:	24000110 	.word	0x24000110

08000ab0 <setup>:

void setup(){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	DWT_Init();
 8000ab4:	f7ff ff76 	bl	80009a4 <_ZL8DWT_Initv>
	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8000ab8:	2244      	movs	r2, #68	; 0x44
 8000aba:	4903      	ldr	r1, [pc, #12]	; (8000ac8 <setup+0x18>)
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <setup+0x1c>)
 8000abe:	f006 fb5f 	bl	8007180 <HAL_UART_Receive_DMA>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2400021c 	.word	0x2400021c
 8000acc:	24000110 	.word	0x24000110

08000ad0 <loop>:

void loop(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
	char send_data[5];
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Speed ", 6, 10);
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	2206      	movs	r2, #6
 8000ada:	4916      	ldr	r1, [pc, #88]	; (8000b34 <loop+0x64>)
 8000adc:	4816      	ldr	r0, [pc, #88]	; (8000b38 <loop+0x68>)
 8000ade:	f006 fac1 	bl	8007064 <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	e011      	b.n	8000b0c <loop+0x3c>
		sprintf(send_data,"%04lu ",speed[i]);
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <loop+0x6c>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4913      	ldr	r1, [pc, #76]	; (8000b40 <loop+0x70>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f008 fa29 	bl	8008f4c <siprintf>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)send_data, 5, 10);
 8000afa:	1d39      	adds	r1, r7, #4
 8000afc:	230a      	movs	r3, #10
 8000afe:	2205      	movs	r2, #5
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <loop+0x68>)
 8000b02:	f006 faaf 	bl	8007064 <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	ddea      	ble.n	8000ae8 <loop+0x18>
	}
	uint8_t lf[]={10};
 8000b12:	230a      	movs	r3, #10
 8000b14:	703b      	strb	r3, [r7, #0]
	HAL_UART_Transmit(&hlpuart1, lf, 1, 10);
 8000b16:	4639      	mov	r1, r7
 8000b18:	230a      	movs	r3, #10
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4806      	ldr	r0, [pc, #24]	; (8000b38 <loop+0x68>)
 8000b1e:	f006 faa1 	bl	8007064 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000b22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b26:	f000 fad5 	bl	80010d4 <HAL_Delay>

}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	080098ac 	.word	0x080098ac
 8000b38:	2400007c 	.word	0x2400007c
 8000b3c:	24000260 	.word	0x24000260
 8000b40:	080098b4 	.word	0x080098b4

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_MspInit+0x30>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_MspInit+0x30>)
 8000b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	58024400 	.word	0x58024400

08000b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0bc      	sub	sp, #240	; 0xf0
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	22c0      	movs	r2, #192	; 0xc0
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f008 f9f7 	bl	8008f8c <memset>
  if(huart->Instance==LPUART1)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a69      	ldr	r2, [pc, #420]	; (8000d48 <HAL_UART_MspInit+0x1d0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d147      	bne.n	8000c38 <HAL_UART_MspInit+0xc0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ba8:	f04f 0204 	mov.w	r2, #4
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bba:	f107 0318 	add.w	r3, r7, #24
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 fbd4 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000bca:	f7ff fee5 	bl	8000998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bce:	4b5f      	ldr	r3, [pc, #380]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd4:	4a5d      	ldr	r2, [pc, #372]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bde:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b57      	ldr	r3, [pc, #348]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a56      	ldr	r2, [pc, #344]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b53      	ldr	r3, [pc, #332]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000c24:	2303      	movs	r3, #3
 8000c26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4847      	ldr	r0, [pc, #284]	; (8000d50 <HAL_UART_MspInit+0x1d8>)
 8000c32:	f003 f9cb 	bl	8003fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000c36:	e082      	b.n	8000d3e <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a45      	ldr	r2, [pc, #276]	; (8000d54 <HAL_UART_MspInit+0x1dc>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d17d      	bne.n	8000d3e <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000c42:	f04f 0202 	mov.w	r2, #2
 8000c46:	f04f 0300 	mov.w	r3, #0
 8000c4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 fb87 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000c64:	f7ff fe98 	bl	8000998 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c68:	4b38      	ldr	r3, [pc, #224]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000c6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c6e:	4a37      	ldr	r2, [pc, #220]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000c7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <HAL_UART_MspInit+0x1d4>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ca4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ca8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000cbe:	230e      	movs	r3, #14
 8000cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4823      	ldr	r0, [pc, #140]	; (8000d58 <HAL_UART_MspInit+0x1e0>)
 8000ccc:	f003 f97e 	bl	8003fcc <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <HAL_UART_MspInit+0x1e8>)
 8000cd4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000cd8:	2241      	movs	r2, #65	; 0x41
 8000cda:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cee:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d02:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000d10:	4812      	ldr	r0, [pc, #72]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000d12:	f000 fb1f 	bl	8001354 <HAL_DMA_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8000d1c:	f7ff fe3c 	bl	8000998 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000d28:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <HAL_UART_MspInit+0x1e4>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2035      	movs	r0, #53	; 0x35
 8000d34:	f000 fad9 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000d38:	2035      	movs	r0, #53	; 0x35
 8000d3a:	f000 faf0 	bl	800131e <HAL_NVIC_EnableIRQ>
}
 8000d3e:	bf00      	nop
 8000d40:	37f0      	adds	r7, #240	; 0xf0
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	58000c00 	.word	0x58000c00
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58020000 	.word	0x58020000
 8000d54:	40005000 	.word	0x40005000
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	240001a4 	.word	0x240001a4
 8000d60:	40020010 	.word	0x40020010

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 f970 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <DMA1_Stream0_IRQHandler+0x10>)
 8000dbe:	f001 fdf3 	bl	80029a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	240001a4 	.word	0x240001a4

08000dcc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <UART5_IRQHandler+0x10>)
 8000dd2:	f006 fa21 	bl	8007218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	24000110 	.word	0x24000110

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f008 f8c4 	bl	8008f9c <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	24080000 	.word	0x24080000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	240002a0 	.word	0x240002a0
 8000e48:	240003f0 	.word	0x240003f0

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <SystemInit+0xe4>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a36      	ldr	r2, [pc, #216]	; (8000f30 <SystemInit+0xe4>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <SystemInit+0xe8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	2b06      	cmp	r3, #6
 8000e6a:	d807      	bhi.n	8000e7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e6c:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <SystemInit+0xe8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f023 030f 	bic.w	r3, r3, #15
 8000e74:	4a2f      	ldr	r2, [pc, #188]	; (8000f34 <SystemInit+0xe8>)
 8000e76:	f043 0307 	orr.w	r3, r3, #7
 8000e7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <SystemInit+0xec>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a2d      	ldr	r2, [pc, #180]	; (8000f38 <SystemInit+0xec>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <SystemInit+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <SystemInit+0xec>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4929      	ldr	r1, [pc, #164]	; (8000f38 <SystemInit+0xec>)
 8000e94:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <SystemInit+0xf0>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e9a:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <SystemInit+0xe8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d007      	beq.n	8000eb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ea6:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <SystemInit+0xe8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f023 030f 	bic.w	r3, r3, #15
 8000eae:	4a21      	ldr	r2, [pc, #132]	; (8000f34 <SystemInit+0xe8>)
 8000eb0:	f043 0307 	orr.w	r3, r3, #7
 8000eb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <SystemInit+0xec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <SystemInit+0xec>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <SystemInit+0xec>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <SystemInit+0xec>)
 8000eca:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <SystemInit+0xf4>)
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <SystemInit+0xec>)
 8000ed0:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <SystemInit+0xf8>)
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <SystemInit+0xec>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <SystemInit+0xfc>)
 8000ed8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <SystemInit+0xec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <SystemInit+0xec>)
 8000ee2:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <SystemInit+0xfc>)
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <SystemInit+0xec>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <SystemInit+0xec>)
 8000eee:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <SystemInit+0xfc>)
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <SystemInit+0xec>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <SystemInit+0xec>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <SystemInit+0xec>)
 8000efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <SystemInit+0xec>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <SystemInit+0x100>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <SystemInit+0x104>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f16:	d202      	bcs.n	8000f1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <SystemInit+0x108>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <SystemInit+0x10c>)
 8000f20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00
 8000f34:	52002000 	.word	0x52002000
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f40:	02020200 	.word	0x02020200
 8000f44:	01ff0000 	.word	0x01ff0000
 8000f48:	01010280 	.word	0x01010280
 8000f4c:	5c001000 	.word	0x5c001000
 8000f50:	ffff0000 	.word	0xffff0000
 8000f54:	51008108 	.word	0x51008108
 8000f58:	52004000 	.word	0x52004000

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f60:	f7ff ff74 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	; (8000f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	; (8000fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f008 f80d 	bl	8008fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fb75 	bl	800067c <main>
  bx  lr
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f9c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000fa0:	08009940 	.word	0x08009940
  ldr r2, =_sbss
 8000fa4:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000fa8:	240003f0 	.word	0x240003f0

08000fac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC3_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f000 f98c 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fbc:	f004 f800 	bl	8004fc0 <HAL_RCC_GetSysClockFreq>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_Init+0x68>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	4913      	ldr	r1, [pc, #76]	; (800101c <HAL_Init+0x6c>)
 8000fce:	5ccb      	ldrb	r3, [r1, r3]
 8000fd0:	f003 031f 	and.w	r3, r3, #31
 8000fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_Init+0x68>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_Init+0x6c>)
 8000fe4:	5cd3      	ldrb	r3, [r2, r3]
 8000fe6:	f003 031f 	and.w	r3, r3, #31
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HAL_Init+0x70>)
 8000ff2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_Init+0x74>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffa:	200f      	movs	r0, #15
 8000ffc:	f000 f814 	bl	8001028 <HAL_InitTick>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e002      	b.n	8001010 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800100a:	f7ff fd9b 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	58024400 	.word	0x58024400
 800101c:	080098bc 	.word	0x080098bc
 8001020:	24000004 	.word	0x24000004
 8001024:	24000000 	.word	0x24000000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_InitTick+0x60>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e021      	b.n	8001080 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_InitTick+0x64>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_InitTick+0x60>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f971 	bl	800133a <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001070:	f000 f93b 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <HAL_InitTick+0x68>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2400000c 	.word	0x2400000c
 800108c:	24000000 	.word	0x24000000
 8001090:	24000008 	.word	0x24000008

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	2400000c 	.word	0x2400000c
 80010b8:	240002a4 	.word	0x240002a4

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	240002a4 	.word	0x240002a4

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2400000c 	.word	0x2400000c

0800111c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetREVID+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0c1b      	lsrs	r3, r3, #16
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	5c001000 	.word	0x5c001000

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	4313      	orrs	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0000 	.word	0x05fa0000

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff40 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff90 	bl	8001228 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5f 	bl	80011d4 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff33 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa4 	bl	8001290 <SysTick_Config>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff feae 	bl	80010bc <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e316      	b.n	800199a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a66      	ldr	r2, [pc, #408]	; (800150c <HAL_DMA_Init+0x1b8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d04a      	beq.n	800140c <HAL_DMA_Init+0xb8>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a65      	ldr	r2, [pc, #404]	; (8001510 <HAL_DMA_Init+0x1bc>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d045      	beq.n	800140c <HAL_DMA_Init+0xb8>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a63      	ldr	r2, [pc, #396]	; (8001514 <HAL_DMA_Init+0x1c0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d040      	beq.n	800140c <HAL_DMA_Init+0xb8>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a62      	ldr	r2, [pc, #392]	; (8001518 <HAL_DMA_Init+0x1c4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d03b      	beq.n	800140c <HAL_DMA_Init+0xb8>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a60      	ldr	r2, [pc, #384]	; (800151c <HAL_DMA_Init+0x1c8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d036      	beq.n	800140c <HAL_DMA_Init+0xb8>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a5f      	ldr	r2, [pc, #380]	; (8001520 <HAL_DMA_Init+0x1cc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d031      	beq.n	800140c <HAL_DMA_Init+0xb8>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a5d      	ldr	r2, [pc, #372]	; (8001524 <HAL_DMA_Init+0x1d0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d02c      	beq.n	800140c <HAL_DMA_Init+0xb8>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a5c      	ldr	r2, [pc, #368]	; (8001528 <HAL_DMA_Init+0x1d4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d027      	beq.n	800140c <HAL_DMA_Init+0xb8>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a5a      	ldr	r2, [pc, #360]	; (800152c <HAL_DMA_Init+0x1d8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d022      	beq.n	800140c <HAL_DMA_Init+0xb8>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a59      	ldr	r2, [pc, #356]	; (8001530 <HAL_DMA_Init+0x1dc>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d01d      	beq.n	800140c <HAL_DMA_Init+0xb8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a57      	ldr	r2, [pc, #348]	; (8001534 <HAL_DMA_Init+0x1e0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d018      	beq.n	800140c <HAL_DMA_Init+0xb8>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a56      	ldr	r2, [pc, #344]	; (8001538 <HAL_DMA_Init+0x1e4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_DMA_Init+0xb8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a54      	ldr	r2, [pc, #336]	; (800153c <HAL_DMA_Init+0x1e8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00e      	beq.n	800140c <HAL_DMA_Init+0xb8>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a53      	ldr	r2, [pc, #332]	; (8001540 <HAL_DMA_Init+0x1ec>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d009      	beq.n	800140c <HAL_DMA_Init+0xb8>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a51      	ldr	r2, [pc, #324]	; (8001544 <HAL_DMA_Init+0x1f0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d004      	beq.n	800140c <HAL_DMA_Init+0xb8>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a50      	ldr	r2, [pc, #320]	; (8001548 <HAL_DMA_Init+0x1f4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d101      	bne.n	8001410 <HAL_DMA_Init+0xbc>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <HAL_DMA_Init+0xbe>
 8001410:	2300      	movs	r3, #0
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 813b 	beq.w	800168e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a37      	ldr	r2, [pc, #220]	; (800150c <HAL_DMA_Init+0x1b8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d04a      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a36      	ldr	r2, [pc, #216]	; (8001510 <HAL_DMA_Init+0x1bc>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d045      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a34      	ldr	r2, [pc, #208]	; (8001514 <HAL_DMA_Init+0x1c0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d040      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a33      	ldr	r2, [pc, #204]	; (8001518 <HAL_DMA_Init+0x1c4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d03b      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a31      	ldr	r2, [pc, #196]	; (800151c <HAL_DMA_Init+0x1c8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d036      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a30      	ldr	r2, [pc, #192]	; (8001520 <HAL_DMA_Init+0x1cc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d031      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <HAL_DMA_Init+0x1d0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d02c      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <HAL_DMA_Init+0x1d4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d027      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a2b      	ldr	r2, [pc, #172]	; (800152c <HAL_DMA_Init+0x1d8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d022      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a2a      	ldr	r2, [pc, #168]	; (8001530 <HAL_DMA_Init+0x1dc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d01d      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a28      	ldr	r2, [pc, #160]	; (8001534 <HAL_DMA_Init+0x1e0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d018      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a27      	ldr	r2, [pc, #156]	; (8001538 <HAL_DMA_Init+0x1e4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d013      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a25      	ldr	r2, [pc, #148]	; (800153c <HAL_DMA_Init+0x1e8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00e      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a24      	ldr	r2, [pc, #144]	; (8001540 <HAL_DMA_Init+0x1ec>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d009      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a22      	ldr	r2, [pc, #136]	; (8001544 <HAL_DMA_Init+0x1f0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d004      	beq.n	80014c8 <HAL_DMA_Init+0x174>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a21      	ldr	r2, [pc, #132]	; (8001548 <HAL_DMA_Init+0x1f4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d108      	bne.n	80014da <HAL_DMA_Init+0x186>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e007      	b.n	80014ea <HAL_DMA_Init+0x196>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0201 	bic.w	r2, r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014ea:	e02f      	b.n	800154c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ec:	f7ff fde6 	bl	80010bc <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d928      	bls.n	800154c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2220      	movs	r2, #32
 80014fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2203      	movs	r2, #3
 8001504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e246      	b.n	800199a <HAL_DMA_Init+0x646>
 800150c:	40020010 	.word	0x40020010
 8001510:	40020028 	.word	0x40020028
 8001514:	40020040 	.word	0x40020040
 8001518:	40020058 	.word	0x40020058
 800151c:	40020070 	.word	0x40020070
 8001520:	40020088 	.word	0x40020088
 8001524:	400200a0 	.word	0x400200a0
 8001528:	400200b8 	.word	0x400200b8
 800152c:	40020410 	.word	0x40020410
 8001530:	40020428 	.word	0x40020428
 8001534:	40020440 	.word	0x40020440
 8001538:	40020458 	.word	0x40020458
 800153c:	40020470 	.word	0x40020470
 8001540:	40020488 	.word	0x40020488
 8001544:	400204a0 	.word	0x400204a0
 8001548:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1c8      	bne.n	80014ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4b83      	ldr	r3, [pc, #524]	; (8001774 <HAL_DMA_Init+0x420>)
 8001566:	4013      	ands	r3, r2
 8001568:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001572:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4313      	orrs	r3, r2
 8001596:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	2b04      	cmp	r3, #4
 800159e:	d107      	bne.n	80015b0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	4313      	orrs	r3, r2
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80015b0:	4b71      	ldr	r3, [pc, #452]	; (8001778 <HAL_DMA_Init+0x424>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b71      	ldr	r3, [pc, #452]	; (800177c <HAL_DMA_Init+0x428>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015bc:	d328      	bcc.n	8001610 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b28      	cmp	r3, #40	; 0x28
 80015c4:	d903      	bls.n	80015ce <HAL_DMA_Init+0x27a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b2e      	cmp	r3, #46	; 0x2e
 80015cc:	d917      	bls.n	80015fe <HAL_DMA_Init+0x2aa>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b3e      	cmp	r3, #62	; 0x3e
 80015d4:	d903      	bls.n	80015de <HAL_DMA_Init+0x28a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b42      	cmp	r3, #66	; 0x42
 80015dc:	d90f      	bls.n	80015fe <HAL_DMA_Init+0x2aa>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b46      	cmp	r3, #70	; 0x46
 80015e4:	d903      	bls.n	80015ee <HAL_DMA_Init+0x29a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b48      	cmp	r3, #72	; 0x48
 80015ec:	d907      	bls.n	80015fe <HAL_DMA_Init+0x2aa>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b4e      	cmp	r3, #78	; 0x4e
 80015f4:	d905      	bls.n	8001602 <HAL_DMA_Init+0x2ae>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b52      	cmp	r3, #82	; 0x52
 80015fc:	d801      	bhi.n	8001602 <HAL_DMA_Init+0x2ae>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_DMA_Init+0x2b0>
 8001602:	2300      	movs	r3, #0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800160e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f023 0307 	bic.w	r3, r3, #7
 8001626:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	2b04      	cmp	r3, #4
 8001638:	d117      	bne.n	800166a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4313      	orrs	r3, r2
 8001642:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00e      	beq.n	800166a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f002 fb33 	bl	8003cb8 <DMA_CheckFifoParam>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2240      	movs	r2, #64	; 0x40
 800165c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e197      	b.n	800199a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f002 fa6e 	bl	8003b54 <DMA_CalcBaseAndBitshift>
 8001678:	4603      	mov	r3, r0
 800167a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	223f      	movs	r2, #63	; 0x3f
 8001686:	409a      	lsls	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	e0cd      	b.n	800182a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a3b      	ldr	r2, [pc, #236]	; (8001780 <HAL_DMA_Init+0x42c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d022      	beq.n	80016de <HAL_DMA_Init+0x38a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a39      	ldr	r2, [pc, #228]	; (8001784 <HAL_DMA_Init+0x430>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01d      	beq.n	80016de <HAL_DMA_Init+0x38a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a38      	ldr	r2, [pc, #224]	; (8001788 <HAL_DMA_Init+0x434>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d018      	beq.n	80016de <HAL_DMA_Init+0x38a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a36      	ldr	r2, [pc, #216]	; (800178c <HAL_DMA_Init+0x438>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_DMA_Init+0x38a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a35      	ldr	r2, [pc, #212]	; (8001790 <HAL_DMA_Init+0x43c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00e      	beq.n	80016de <HAL_DMA_Init+0x38a>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a33      	ldr	r2, [pc, #204]	; (8001794 <HAL_DMA_Init+0x440>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d009      	beq.n	80016de <HAL_DMA_Init+0x38a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a32      	ldr	r2, [pc, #200]	; (8001798 <HAL_DMA_Init+0x444>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d004      	beq.n	80016de <HAL_DMA_Init+0x38a>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a30      	ldr	r2, [pc, #192]	; (800179c <HAL_DMA_Init+0x448>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_DMA_Init+0x38e>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_DMA_Init+0x390>
 80016e2:	2300      	movs	r3, #0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8097 	beq.w	8001818 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a24      	ldr	r2, [pc, #144]	; (8001780 <HAL_DMA_Init+0x42c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d021      	beq.n	8001738 <HAL_DMA_Init+0x3e4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <HAL_DMA_Init+0x430>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01c      	beq.n	8001738 <HAL_DMA_Init+0x3e4>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a21      	ldr	r2, [pc, #132]	; (8001788 <HAL_DMA_Init+0x434>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d017      	beq.n	8001738 <HAL_DMA_Init+0x3e4>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1f      	ldr	r2, [pc, #124]	; (800178c <HAL_DMA_Init+0x438>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d012      	beq.n	8001738 <HAL_DMA_Init+0x3e4>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_DMA_Init+0x43c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00d      	beq.n	8001738 <HAL_DMA_Init+0x3e4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_DMA_Init+0x440>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d008      	beq.n	8001738 <HAL_DMA_Init+0x3e4>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_DMA_Init+0x444>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d003      	beq.n	8001738 <HAL_DMA_Init+0x3e4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	; (800179c <HAL_DMA_Init+0x448>)
 8001736:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2202      	movs	r2, #2
 800173c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_DMA_Init+0x44c>)
 8001754:	4013      	ands	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b40      	cmp	r3, #64	; 0x40
 800175e:	d021      	beq.n	80017a4 <HAL_DMA_Init+0x450>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b80      	cmp	r3, #128	; 0x80
 8001766:	d102      	bne.n	800176e <HAL_DMA_Init+0x41a>
 8001768:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800176c:	e01b      	b.n	80017a6 <HAL_DMA_Init+0x452>
 800176e:	2300      	movs	r3, #0
 8001770:	e019      	b.n	80017a6 <HAL_DMA_Init+0x452>
 8001772:	bf00      	nop
 8001774:	fe10803f 	.word	0xfe10803f
 8001778:	5c001000 	.word	0x5c001000
 800177c:	ffff0000 	.word	0xffff0000
 8001780:	58025408 	.word	0x58025408
 8001784:	5802541c 	.word	0x5802541c
 8001788:	58025430 	.word	0x58025430
 800178c:	58025444 	.word	0x58025444
 8001790:	58025458 	.word	0x58025458
 8001794:	5802546c 	.word	0x5802546c
 8001798:	58025480 	.word	0x58025480
 800179c:	58025494 	.word	0x58025494
 80017a0:	fffe000f 	.word	0xfffe000f
 80017a4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68d2      	ldr	r2, [r2, #12]
 80017aa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80017d4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4313      	orrs	r3, r2
 80017da:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <HAL_DMA_Init+0x650>)
 80017ec:	4413      	add	r3, r2
 80017ee:	4a6e      	ldr	r2, [pc, #440]	; (80019a8 <HAL_DMA_Init+0x654>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	009a      	lsls	r2, r3, #2
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f002 f9a9 	bl	8003b54 <DMA_CalcBaseAndBitshift>
 8001802:	4603      	mov	r3, r0
 8001804:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	2201      	movs	r2, #1
 8001810:	409a      	lsls	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	e008      	b.n	800182a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2203      	movs	r2, #3
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0b7      	b.n	800199a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a5f      	ldr	r2, [pc, #380]	; (80019ac <HAL_DMA_Init+0x658>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d072      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5d      	ldr	r2, [pc, #372]	; (80019b0 <HAL_DMA_Init+0x65c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d06d      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a5c      	ldr	r2, [pc, #368]	; (80019b4 <HAL_DMA_Init+0x660>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d068      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a5a      	ldr	r2, [pc, #360]	; (80019b8 <HAL_DMA_Init+0x664>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d063      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a59      	ldr	r2, [pc, #356]	; (80019bc <HAL_DMA_Init+0x668>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d05e      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a57      	ldr	r2, [pc, #348]	; (80019c0 <HAL_DMA_Init+0x66c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d059      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a56      	ldr	r2, [pc, #344]	; (80019c4 <HAL_DMA_Init+0x670>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d054      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a54      	ldr	r2, [pc, #336]	; (80019c8 <HAL_DMA_Init+0x674>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d04f      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a53      	ldr	r2, [pc, #332]	; (80019cc <HAL_DMA_Init+0x678>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d04a      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a51      	ldr	r2, [pc, #324]	; (80019d0 <HAL_DMA_Init+0x67c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d045      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <HAL_DMA_Init+0x680>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d040      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a4e      	ldr	r2, [pc, #312]	; (80019d8 <HAL_DMA_Init+0x684>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d03b      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a4d      	ldr	r2, [pc, #308]	; (80019dc <HAL_DMA_Init+0x688>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d036      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_DMA_Init+0x68c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d031      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_DMA_Init+0x690>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d02c      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <HAL_DMA_Init+0x694>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d027      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a47      	ldr	r2, [pc, #284]	; (80019ec <HAL_DMA_Init+0x698>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d022      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a45      	ldr	r2, [pc, #276]	; (80019f0 <HAL_DMA_Init+0x69c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01d      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a44      	ldr	r2, [pc, #272]	; (80019f4 <HAL_DMA_Init+0x6a0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d018      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a42      	ldr	r2, [pc, #264]	; (80019f8 <HAL_DMA_Init+0x6a4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a41      	ldr	r2, [pc, #260]	; (80019fc <HAL_DMA_Init+0x6a8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00e      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a3f      	ldr	r2, [pc, #252]	; (8001a00 <HAL_DMA_Init+0x6ac>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d009      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a3e      	ldr	r2, [pc, #248]	; (8001a04 <HAL_DMA_Init+0x6b0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d004      	beq.n	800191a <HAL_DMA_Init+0x5c6>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a3c      	ldr	r2, [pc, #240]	; (8001a08 <HAL_DMA_Init+0x6b4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_DMA_Init+0x5ca>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_DMA_Init+0x5cc>
 800191e:	2300      	movs	r3, #0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d032      	beq.n	800198a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f002 fa43 	bl	8003db0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b80      	cmp	r3, #128	; 0x80
 8001930:	d102      	bne.n	8001938 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800194c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d010      	beq.n	8001978 <HAL_DMA_Init+0x624>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b08      	cmp	r3, #8
 800195c:	d80c      	bhi.n	8001978 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f002 fac0 	bl	8003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	e008      	b.n	800198a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	a7fdabf8 	.word	0xa7fdabf8
 80019a8:	cccccccd 	.word	0xcccccccd
 80019ac:	40020010 	.word	0x40020010
 80019b0:	40020028 	.word	0x40020028
 80019b4:	40020040 	.word	0x40020040
 80019b8:	40020058 	.word	0x40020058
 80019bc:	40020070 	.word	0x40020070
 80019c0:	40020088 	.word	0x40020088
 80019c4:	400200a0 	.word	0x400200a0
 80019c8:	400200b8 	.word	0x400200b8
 80019cc:	40020410 	.word	0x40020410
 80019d0:	40020428 	.word	0x40020428
 80019d4:	40020440 	.word	0x40020440
 80019d8:	40020458 	.word	0x40020458
 80019dc:	40020470 	.word	0x40020470
 80019e0:	40020488 	.word	0x40020488
 80019e4:	400204a0 	.word	0x400204a0
 80019e8:	400204b8 	.word	0x400204b8
 80019ec:	58025408 	.word	0x58025408
 80019f0:	5802541c 	.word	0x5802541c
 80019f4:	58025430 	.word	0x58025430
 80019f8:	58025444 	.word	0x58025444
 80019fc:	58025458 	.word	0x58025458
 8001a00:	5802546c 	.word	0x5802546c
 8001a04:	58025480 	.word	0x58025480
 8001a08:	58025494 	.word	0x58025494

08001a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e226      	b.n	8001e76 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_DMA_Start_IT+0x2a>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e21f      	b.n	8001e76 <HAL_DMA_Start_IT+0x46a>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	f040 820a 	bne.w	8001e60 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a68      	ldr	r2, [pc, #416]	; (8001c00 <HAL_DMA_Start_IT+0x1f4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d04a      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a66      	ldr	r2, [pc, #408]	; (8001c04 <HAL_DMA_Start_IT+0x1f8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d045      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a65      	ldr	r2, [pc, #404]	; (8001c08 <HAL_DMA_Start_IT+0x1fc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d040      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a63      	ldr	r2, [pc, #396]	; (8001c0c <HAL_DMA_Start_IT+0x200>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d03b      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a62      	ldr	r2, [pc, #392]	; (8001c10 <HAL_DMA_Start_IT+0x204>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d036      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a60      	ldr	r2, [pc, #384]	; (8001c14 <HAL_DMA_Start_IT+0x208>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d031      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a5f      	ldr	r2, [pc, #380]	; (8001c18 <HAL_DMA_Start_IT+0x20c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d02c      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a5d      	ldr	r2, [pc, #372]	; (8001c1c <HAL_DMA_Start_IT+0x210>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d027      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <HAL_DMA_Start_IT+0x214>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d022      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <HAL_DMA_Start_IT+0x218>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d01d      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a59      	ldr	r2, [pc, #356]	; (8001c28 <HAL_DMA_Start_IT+0x21c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d018      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_DMA_Start_IT+0x220>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d013      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a56      	ldr	r2, [pc, #344]	; (8001c30 <HAL_DMA_Start_IT+0x224>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d00e      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a54      	ldr	r2, [pc, #336]	; (8001c34 <HAL_DMA_Start_IT+0x228>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d009      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a53      	ldr	r2, [pc, #332]	; (8001c38 <HAL_DMA_Start_IT+0x22c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d004      	beq.n	8001afa <HAL_DMA_Start_IT+0xee>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a51      	ldr	r2, [pc, #324]	; (8001c3c <HAL_DMA_Start_IT+0x230>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d108      	bne.n	8001b0c <HAL_DMA_Start_IT+0x100>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0201 	bic.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e007      	b.n	8001b1c <HAL_DMA_Start_IT+0x110>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f001 fe6a 	bl	80037fc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a34      	ldr	r2, [pc, #208]	; (8001c00 <HAL_DMA_Start_IT+0x1f4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d04a      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a33      	ldr	r2, [pc, #204]	; (8001c04 <HAL_DMA_Start_IT+0x1f8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d045      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a31      	ldr	r2, [pc, #196]	; (8001c08 <HAL_DMA_Start_IT+0x1fc>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d040      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <HAL_DMA_Start_IT+0x200>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d03b      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2e      	ldr	r2, [pc, #184]	; (8001c10 <HAL_DMA_Start_IT+0x204>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d036      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a2d      	ldr	r2, [pc, #180]	; (8001c14 <HAL_DMA_Start_IT+0x208>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d031      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a2b      	ldr	r2, [pc, #172]	; (8001c18 <HAL_DMA_Start_IT+0x20c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d02c      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a2a      	ldr	r2, [pc, #168]	; (8001c1c <HAL_DMA_Start_IT+0x210>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d027      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <HAL_DMA_Start_IT+0x214>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d022      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a27      	ldr	r2, [pc, #156]	; (8001c24 <HAL_DMA_Start_IT+0x218>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d01d      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <HAL_DMA_Start_IT+0x21c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d018      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a24      	ldr	r2, [pc, #144]	; (8001c2c <HAL_DMA_Start_IT+0x220>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d013      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a22      	ldr	r2, [pc, #136]	; (8001c30 <HAL_DMA_Start_IT+0x224>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00e      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_DMA_Start_IT+0x228>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d009      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_DMA_Start_IT+0x22c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d004      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x1bc>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <HAL_DMA_Start_IT+0x230>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d101      	bne.n	8001bcc <HAL_DMA_Start_IT+0x1c0>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_DMA_Start_IT+0x1c2>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d036      	beq.n	8001c40 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 021e 	bic.w	r2, r3, #30
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0216 	orr.w	r2, r2, #22
 8001be4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03e      	beq.n	8001c6c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0208 	orr.w	r2, r2, #8
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e035      	b.n	8001c6c <HAL_DMA_Start_IT+0x260>
 8001c00:	40020010 	.word	0x40020010
 8001c04:	40020028 	.word	0x40020028
 8001c08:	40020040 	.word	0x40020040
 8001c0c:	40020058 	.word	0x40020058
 8001c10:	40020070 	.word	0x40020070
 8001c14:	40020088 	.word	0x40020088
 8001c18:	400200a0 	.word	0x400200a0
 8001c1c:	400200b8 	.word	0x400200b8
 8001c20:	40020410 	.word	0x40020410
 8001c24:	40020428 	.word	0x40020428
 8001c28:	40020440 	.word	0x40020440
 8001c2c:	40020458 	.word	0x40020458
 8001c30:	40020470 	.word	0x40020470
 8001c34:	40020488 	.word	0x40020488
 8001c38:	400204a0 	.word	0x400204a0
 8001c3c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 020e 	bic.w	r2, r3, #14
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 020a 	orr.w	r2, r2, #10
 8001c52:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0204 	orr.w	r2, r2, #4
 8001c6a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a83      	ldr	r2, [pc, #524]	; (8001e80 <HAL_DMA_Start_IT+0x474>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d072      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a82      	ldr	r2, [pc, #520]	; (8001e84 <HAL_DMA_Start_IT+0x478>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d06d      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a80      	ldr	r2, [pc, #512]	; (8001e88 <HAL_DMA_Start_IT+0x47c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d068      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a7f      	ldr	r2, [pc, #508]	; (8001e8c <HAL_DMA_Start_IT+0x480>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d063      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a7d      	ldr	r2, [pc, #500]	; (8001e90 <HAL_DMA_Start_IT+0x484>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d05e      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7c      	ldr	r2, [pc, #496]	; (8001e94 <HAL_DMA_Start_IT+0x488>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d059      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a7a      	ldr	r2, [pc, #488]	; (8001e98 <HAL_DMA_Start_IT+0x48c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d054      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a79      	ldr	r2, [pc, #484]	; (8001e9c <HAL_DMA_Start_IT+0x490>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d04f      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a77      	ldr	r2, [pc, #476]	; (8001ea0 <HAL_DMA_Start_IT+0x494>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d04a      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a76      	ldr	r2, [pc, #472]	; (8001ea4 <HAL_DMA_Start_IT+0x498>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d045      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a74      	ldr	r2, [pc, #464]	; (8001ea8 <HAL_DMA_Start_IT+0x49c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d040      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a73      	ldr	r2, [pc, #460]	; (8001eac <HAL_DMA_Start_IT+0x4a0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d03b      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a71      	ldr	r2, [pc, #452]	; (8001eb0 <HAL_DMA_Start_IT+0x4a4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d036      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a70      	ldr	r2, [pc, #448]	; (8001eb4 <HAL_DMA_Start_IT+0x4a8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d031      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a6e      	ldr	r2, [pc, #440]	; (8001eb8 <HAL_DMA_Start_IT+0x4ac>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d02c      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a6d      	ldr	r2, [pc, #436]	; (8001ebc <HAL_DMA_Start_IT+0x4b0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d027      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a6b      	ldr	r2, [pc, #428]	; (8001ec0 <HAL_DMA_Start_IT+0x4b4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d022      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6a      	ldr	r2, [pc, #424]	; (8001ec4 <HAL_DMA_Start_IT+0x4b8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d01d      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a68      	ldr	r2, [pc, #416]	; (8001ec8 <HAL_DMA_Start_IT+0x4bc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d018      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a67      	ldr	r2, [pc, #412]	; (8001ecc <HAL_DMA_Start_IT+0x4c0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a65      	ldr	r2, [pc, #404]	; (8001ed0 <HAL_DMA_Start_IT+0x4c4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00e      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a64      	ldr	r2, [pc, #400]	; (8001ed4 <HAL_DMA_Start_IT+0x4c8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a62      	ldr	r2, [pc, #392]	; (8001ed8 <HAL_DMA_Start_IT+0x4cc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_DMA_Start_IT+0x350>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a61      	ldr	r2, [pc, #388]	; (8001edc <HAL_DMA_Start_IT+0x4d0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_DMA_Start_IT+0x354>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_DMA_Start_IT+0x356>
 8001d60:	2300      	movs	r3, #0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01a      	beq.n	8001d9c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d82:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d9a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a37      	ldr	r2, [pc, #220]	; (8001e80 <HAL_DMA_Start_IT+0x474>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d04a      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a36      	ldr	r2, [pc, #216]	; (8001e84 <HAL_DMA_Start_IT+0x478>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d045      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a34      	ldr	r2, [pc, #208]	; (8001e88 <HAL_DMA_Start_IT+0x47c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d040      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a33      	ldr	r2, [pc, #204]	; (8001e8c <HAL_DMA_Start_IT+0x480>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d03b      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a31      	ldr	r2, [pc, #196]	; (8001e90 <HAL_DMA_Start_IT+0x484>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d036      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a30      	ldr	r2, [pc, #192]	; (8001e94 <HAL_DMA_Start_IT+0x488>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d031      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a2e      	ldr	r2, [pc, #184]	; (8001e98 <HAL_DMA_Start_IT+0x48c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d02c      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <HAL_DMA_Start_IT+0x490>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d027      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2b      	ldr	r2, [pc, #172]	; (8001ea0 <HAL_DMA_Start_IT+0x494>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d022      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <HAL_DMA_Start_IT+0x498>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d01d      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <HAL_DMA_Start_IT+0x49c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d018      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a27      	ldr	r2, [pc, #156]	; (8001eac <HAL_DMA_Start_IT+0x4a0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d013      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <HAL_DMA_Start_IT+0x4a4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00e      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a24      	ldr	r2, [pc, #144]	; (8001eb4 <HAL_DMA_Start_IT+0x4a8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d009      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <HAL_DMA_Start_IT+0x4ac>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d004      	beq.n	8001e3c <HAL_DMA_Start_IT+0x430>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <HAL_DMA_Start_IT+0x4b0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d108      	bne.n	8001e4e <HAL_DMA_Start_IT+0x442>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e012      	b.n	8001e74 <HAL_DMA_Start_IT+0x468>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 0201 	orr.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e009      	b.n	8001e74 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40020010 	.word	0x40020010
 8001e84:	40020028 	.word	0x40020028
 8001e88:	40020040 	.word	0x40020040
 8001e8c:	40020058 	.word	0x40020058
 8001e90:	40020070 	.word	0x40020070
 8001e94:	40020088 	.word	0x40020088
 8001e98:	400200a0 	.word	0x400200a0
 8001e9c:	400200b8 	.word	0x400200b8
 8001ea0:	40020410 	.word	0x40020410
 8001ea4:	40020428 	.word	0x40020428
 8001ea8:	40020440 	.word	0x40020440
 8001eac:	40020458 	.word	0x40020458
 8001eb0:	40020470 	.word	0x40020470
 8001eb4:	40020488 	.word	0x40020488
 8001eb8:	400204a0 	.word	0x400204a0
 8001ebc:	400204b8 	.word	0x400204b8
 8001ec0:	58025408 	.word	0x58025408
 8001ec4:	5802541c 	.word	0x5802541c
 8001ec8:	58025430 	.word	0x58025430
 8001ecc:	58025444 	.word	0x58025444
 8001ed0:	58025458 	.word	0x58025458
 8001ed4:	5802546c 	.word	0x5802546c
 8001ed8:	58025480 	.word	0x58025480
 8001edc:	58025494 	.word	0x58025494

08001ee0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff f8e8 	bl	80010bc <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e2dc      	b.n	80024b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d008      	beq.n	8001f16 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e2cd      	b.n	80024b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a76      	ldr	r2, [pc, #472]	; (80020f4 <HAL_DMA_Abort+0x214>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d04a      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a74      	ldr	r2, [pc, #464]	; (80020f8 <HAL_DMA_Abort+0x218>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d045      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a73      	ldr	r2, [pc, #460]	; (80020fc <HAL_DMA_Abort+0x21c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d040      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a71      	ldr	r2, [pc, #452]	; (8002100 <HAL_DMA_Abort+0x220>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d03b      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a70      	ldr	r2, [pc, #448]	; (8002104 <HAL_DMA_Abort+0x224>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d036      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a6e      	ldr	r2, [pc, #440]	; (8002108 <HAL_DMA_Abort+0x228>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d031      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a6d      	ldr	r2, [pc, #436]	; (800210c <HAL_DMA_Abort+0x22c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d02c      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a6b      	ldr	r2, [pc, #428]	; (8002110 <HAL_DMA_Abort+0x230>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d027      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6a      	ldr	r2, [pc, #424]	; (8002114 <HAL_DMA_Abort+0x234>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d022      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a68      	ldr	r2, [pc, #416]	; (8002118 <HAL_DMA_Abort+0x238>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01d      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a67      	ldr	r2, [pc, #412]	; (800211c <HAL_DMA_Abort+0x23c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d018      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a65      	ldr	r2, [pc, #404]	; (8002120 <HAL_DMA_Abort+0x240>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a64      	ldr	r2, [pc, #400]	; (8002124 <HAL_DMA_Abort+0x244>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00e      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a62      	ldr	r2, [pc, #392]	; (8002128 <HAL_DMA_Abort+0x248>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d009      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a61      	ldr	r2, [pc, #388]	; (800212c <HAL_DMA_Abort+0x24c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d004      	beq.n	8001fb6 <HAL_DMA_Abort+0xd6>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a5f      	ldr	r2, [pc, #380]	; (8002130 <HAL_DMA_Abort+0x250>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_DMA_Abort+0xda>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_DMA_Abort+0xdc>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 021e 	bic.w	r2, r2, #30
 8001fce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fde:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e00a      	b.n	8001ffe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 020e 	bic.w	r2, r2, #14
 8001ff6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a3c      	ldr	r2, [pc, #240]	; (80020f4 <HAL_DMA_Abort+0x214>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d072      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a3a      	ldr	r2, [pc, #232]	; (80020f8 <HAL_DMA_Abort+0x218>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d06d      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a39      	ldr	r2, [pc, #228]	; (80020fc <HAL_DMA_Abort+0x21c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d068      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a37      	ldr	r2, [pc, #220]	; (8002100 <HAL_DMA_Abort+0x220>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d063      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a36      	ldr	r2, [pc, #216]	; (8002104 <HAL_DMA_Abort+0x224>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d05e      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a34      	ldr	r2, [pc, #208]	; (8002108 <HAL_DMA_Abort+0x228>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d059      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a33      	ldr	r2, [pc, #204]	; (800210c <HAL_DMA_Abort+0x22c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d054      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a31      	ldr	r2, [pc, #196]	; (8002110 <HAL_DMA_Abort+0x230>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d04f      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a30      	ldr	r2, [pc, #192]	; (8002114 <HAL_DMA_Abort+0x234>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d04a      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a2e      	ldr	r2, [pc, #184]	; (8002118 <HAL_DMA_Abort+0x238>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d045      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a2d      	ldr	r2, [pc, #180]	; (800211c <HAL_DMA_Abort+0x23c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d040      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <HAL_DMA_Abort+0x240>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d03b      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <HAL_DMA_Abort+0x244>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d036      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a28      	ldr	r2, [pc, #160]	; (8002128 <HAL_DMA_Abort+0x248>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d031      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a27      	ldr	r2, [pc, #156]	; (800212c <HAL_DMA_Abort+0x24c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d02c      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a25      	ldr	r2, [pc, #148]	; (8002130 <HAL_DMA_Abort+0x250>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d027      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_DMA_Abort+0x254>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d022      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_DMA_Abort+0x258>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01d      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a21      	ldr	r2, [pc, #132]	; (800213c <HAL_DMA_Abort+0x25c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1f      	ldr	r2, [pc, #124]	; (8002140 <HAL_DMA_Abort+0x260>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_DMA_Abort+0x264>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00e      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <HAL_DMA_Abort+0x268>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d009      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_DMA_Abort+0x26c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d004      	beq.n	80020ee <HAL_DMA_Abort+0x20e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a19      	ldr	r2, [pc, #100]	; (8002150 <HAL_DMA_Abort+0x270>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d132      	bne.n	8002154 <HAL_DMA_Abort+0x274>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e031      	b.n	8002156 <HAL_DMA_Abort+0x276>
 80020f2:	bf00      	nop
 80020f4:	40020010 	.word	0x40020010
 80020f8:	40020028 	.word	0x40020028
 80020fc:	40020040 	.word	0x40020040
 8002100:	40020058 	.word	0x40020058
 8002104:	40020070 	.word	0x40020070
 8002108:	40020088 	.word	0x40020088
 800210c:	400200a0 	.word	0x400200a0
 8002110:	400200b8 	.word	0x400200b8
 8002114:	40020410 	.word	0x40020410
 8002118:	40020428 	.word	0x40020428
 800211c:	40020440 	.word	0x40020440
 8002120:	40020458 	.word	0x40020458
 8002124:	40020470 	.word	0x40020470
 8002128:	40020488 	.word	0x40020488
 800212c:	400204a0 	.word	0x400204a0
 8002130:	400204b8 	.word	0x400204b8
 8002134:	58025408 	.word	0x58025408
 8002138:	5802541c 	.word	0x5802541c
 800213c:	58025430 	.word	0x58025430
 8002140:	58025444 	.word	0x58025444
 8002144:	58025458 	.word	0x58025458
 8002148:	5802546c 	.word	0x5802546c
 800214c:	58025480 	.word	0x58025480
 8002150:	58025494 	.word	0x58025494
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002168:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a6d      	ldr	r2, [pc, #436]	; (8002324 <HAL_DMA_Abort+0x444>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d04a      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6b      	ldr	r2, [pc, #428]	; (8002328 <HAL_DMA_Abort+0x448>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d045      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6a      	ldr	r2, [pc, #424]	; (800232c <HAL_DMA_Abort+0x44c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d040      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a68      	ldr	r2, [pc, #416]	; (8002330 <HAL_DMA_Abort+0x450>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d03b      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a67      	ldr	r2, [pc, #412]	; (8002334 <HAL_DMA_Abort+0x454>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d036      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a65      	ldr	r2, [pc, #404]	; (8002338 <HAL_DMA_Abort+0x458>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d031      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a64      	ldr	r2, [pc, #400]	; (800233c <HAL_DMA_Abort+0x45c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d02c      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a62      	ldr	r2, [pc, #392]	; (8002340 <HAL_DMA_Abort+0x460>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d027      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a61      	ldr	r2, [pc, #388]	; (8002344 <HAL_DMA_Abort+0x464>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d022      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a5f      	ldr	r2, [pc, #380]	; (8002348 <HAL_DMA_Abort+0x468>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01d      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5e      	ldr	r2, [pc, #376]	; (800234c <HAL_DMA_Abort+0x46c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d018      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a5c      	ldr	r2, [pc, #368]	; (8002350 <HAL_DMA_Abort+0x470>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5b      	ldr	r2, [pc, #364]	; (8002354 <HAL_DMA_Abort+0x474>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00e      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a59      	ldr	r2, [pc, #356]	; (8002358 <HAL_DMA_Abort+0x478>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_DMA_Abort+0x47c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_DMA_Abort+0x32a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a56      	ldr	r2, [pc, #344]	; (8002360 <HAL_DMA_Abort+0x480>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <HAL_DMA_Abort+0x33c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e007      	b.n	800222c <HAL_DMA_Abort+0x34c>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800222c:	e013      	b.n	8002256 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800222e:	f7fe ff45 	bl	80010bc <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b05      	cmp	r3, #5
 800223a:	d90c      	bls.n	8002256 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2203      	movs	r2, #3
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e12d      	b.n	80024b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1e5      	bne.n	800222e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a2f      	ldr	r2, [pc, #188]	; (8002324 <HAL_DMA_Abort+0x444>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d04a      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a2d      	ldr	r2, [pc, #180]	; (8002328 <HAL_DMA_Abort+0x448>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d045      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a2c      	ldr	r2, [pc, #176]	; (800232c <HAL_DMA_Abort+0x44c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d040      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2a      	ldr	r2, [pc, #168]	; (8002330 <HAL_DMA_Abort+0x450>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d03b      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a29      	ldr	r2, [pc, #164]	; (8002334 <HAL_DMA_Abort+0x454>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d036      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a27      	ldr	r2, [pc, #156]	; (8002338 <HAL_DMA_Abort+0x458>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d031      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a26      	ldr	r2, [pc, #152]	; (800233c <HAL_DMA_Abort+0x45c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d02c      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a24      	ldr	r2, [pc, #144]	; (8002340 <HAL_DMA_Abort+0x460>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d027      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a23      	ldr	r2, [pc, #140]	; (8002344 <HAL_DMA_Abort+0x464>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a21      	ldr	r2, [pc, #132]	; (8002348 <HAL_DMA_Abort+0x468>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01d      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a20      	ldr	r2, [pc, #128]	; (800234c <HAL_DMA_Abort+0x46c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d018      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_DMA_Abort+0x470>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1d      	ldr	r2, [pc, #116]	; (8002354 <HAL_DMA_Abort+0x474>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <HAL_DMA_Abort+0x478>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1a      	ldr	r2, [pc, #104]	; (800235c <HAL_DMA_Abort+0x47c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_DMA_Abort+0x422>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_DMA_Abort+0x480>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_DMA_Abort+0x426>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_DMA_Abort+0x428>
 8002306:	2300      	movs	r3, #0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02b      	beq.n	8002364 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	223f      	movs	r2, #63	; 0x3f
 800231c:	409a      	lsls	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	e02a      	b.n	800237a <HAL_DMA_Abort+0x49a>
 8002324:	40020010 	.word	0x40020010
 8002328:	40020028 	.word	0x40020028
 800232c:	40020040 	.word	0x40020040
 8002330:	40020058 	.word	0x40020058
 8002334:	40020070 	.word	0x40020070
 8002338:	40020088 	.word	0x40020088
 800233c:	400200a0 	.word	0x400200a0
 8002340:	400200b8 	.word	0x400200b8
 8002344:	40020410 	.word	0x40020410
 8002348:	40020428 	.word	0x40020428
 800234c:	40020440 	.word	0x40020440
 8002350:	40020458 	.word	0x40020458
 8002354:	40020470 	.word	0x40020470
 8002358:	40020488 	.word	0x40020488
 800235c:	400204a0 	.word	0x400204a0
 8002360:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2201      	movs	r2, #1
 8002374:	409a      	lsls	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a4f      	ldr	r2, [pc, #316]	; (80024bc <HAL_DMA_Abort+0x5dc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d072      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_DMA_Abort+0x5e0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d06d      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <HAL_DMA_Abort+0x5e4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d068      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a4a      	ldr	r2, [pc, #296]	; (80024c8 <HAL_DMA_Abort+0x5e8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d063      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a49      	ldr	r2, [pc, #292]	; (80024cc <HAL_DMA_Abort+0x5ec>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d05e      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a47      	ldr	r2, [pc, #284]	; (80024d0 <HAL_DMA_Abort+0x5f0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d059      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a46      	ldr	r2, [pc, #280]	; (80024d4 <HAL_DMA_Abort+0x5f4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d054      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a44      	ldr	r2, [pc, #272]	; (80024d8 <HAL_DMA_Abort+0x5f8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d04f      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a43      	ldr	r2, [pc, #268]	; (80024dc <HAL_DMA_Abort+0x5fc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d04a      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a41      	ldr	r2, [pc, #260]	; (80024e0 <HAL_DMA_Abort+0x600>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d045      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a40      	ldr	r2, [pc, #256]	; (80024e4 <HAL_DMA_Abort+0x604>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d040      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a3e      	ldr	r2, [pc, #248]	; (80024e8 <HAL_DMA_Abort+0x608>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d03b      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a3d      	ldr	r2, [pc, #244]	; (80024ec <HAL_DMA_Abort+0x60c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d036      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a3b      	ldr	r2, [pc, #236]	; (80024f0 <HAL_DMA_Abort+0x610>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d031      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a3a      	ldr	r2, [pc, #232]	; (80024f4 <HAL_DMA_Abort+0x614>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d02c      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a38      	ldr	r2, [pc, #224]	; (80024f8 <HAL_DMA_Abort+0x618>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d027      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a37      	ldr	r2, [pc, #220]	; (80024fc <HAL_DMA_Abort+0x61c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a35      	ldr	r2, [pc, #212]	; (8002500 <HAL_DMA_Abort+0x620>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01d      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a34      	ldr	r2, [pc, #208]	; (8002504 <HAL_DMA_Abort+0x624>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d018      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a32      	ldr	r2, [pc, #200]	; (8002508 <HAL_DMA_Abort+0x628>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a31      	ldr	r2, [pc, #196]	; (800250c <HAL_DMA_Abort+0x62c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00e      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a2f      	ldr	r2, [pc, #188]	; (8002510 <HAL_DMA_Abort+0x630>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a2e      	ldr	r2, [pc, #184]	; (8002514 <HAL_DMA_Abort+0x634>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_DMA_Abort+0x58a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2c      	ldr	r2, [pc, #176]	; (8002518 <HAL_DMA_Abort+0x638>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_DMA_Abort+0x58e>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_DMA_Abort+0x590>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d015      	beq.n	80024a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800247c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00c      	beq.n	80024a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002494:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800249e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40020010 	.word	0x40020010
 80024c0:	40020028 	.word	0x40020028
 80024c4:	40020040 	.word	0x40020040
 80024c8:	40020058 	.word	0x40020058
 80024cc:	40020070 	.word	0x40020070
 80024d0:	40020088 	.word	0x40020088
 80024d4:	400200a0 	.word	0x400200a0
 80024d8:	400200b8 	.word	0x400200b8
 80024dc:	40020410 	.word	0x40020410
 80024e0:	40020428 	.word	0x40020428
 80024e4:	40020440 	.word	0x40020440
 80024e8:	40020458 	.word	0x40020458
 80024ec:	40020470 	.word	0x40020470
 80024f0:	40020488 	.word	0x40020488
 80024f4:	400204a0 	.word	0x400204a0
 80024f8:	400204b8 	.word	0x400204b8
 80024fc:	58025408 	.word	0x58025408
 8002500:	5802541c 	.word	0x5802541c
 8002504:	58025430 	.word	0x58025430
 8002508:	58025444 	.word	0x58025444
 800250c:	58025458 	.word	0x58025458
 8002510:	5802546c 	.word	0x5802546c
 8002514:	58025480 	.word	0x58025480
 8002518:	58025494 	.word	0x58025494

0800251c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e237      	b.n	800299e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d004      	beq.n	8002544 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e22c      	b.n	800299e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a5c      	ldr	r2, [pc, #368]	; (80026bc <HAL_DMA_Abort_IT+0x1a0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d04a      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a5b      	ldr	r2, [pc, #364]	; (80026c0 <HAL_DMA_Abort_IT+0x1a4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d045      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a59      	ldr	r2, [pc, #356]	; (80026c4 <HAL_DMA_Abort_IT+0x1a8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d040      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_DMA_Abort_IT+0x1ac>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d03b      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a56      	ldr	r2, [pc, #344]	; (80026cc <HAL_DMA_Abort_IT+0x1b0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d036      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a55      	ldr	r2, [pc, #340]	; (80026d0 <HAL_DMA_Abort_IT+0x1b4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d031      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a53      	ldr	r2, [pc, #332]	; (80026d4 <HAL_DMA_Abort_IT+0x1b8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d02c      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a52      	ldr	r2, [pc, #328]	; (80026d8 <HAL_DMA_Abort_IT+0x1bc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d027      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a50      	ldr	r2, [pc, #320]	; (80026dc <HAL_DMA_Abort_IT+0x1c0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d022      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a4f      	ldr	r2, [pc, #316]	; (80026e0 <HAL_DMA_Abort_IT+0x1c4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d01d      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a4d      	ldr	r2, [pc, #308]	; (80026e4 <HAL_DMA_Abort_IT+0x1c8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d018      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a4c      	ldr	r2, [pc, #304]	; (80026e8 <HAL_DMA_Abort_IT+0x1cc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a4a      	ldr	r2, [pc, #296]	; (80026ec <HAL_DMA_Abort_IT+0x1d0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00e      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a49      	ldr	r2, [pc, #292]	; (80026f0 <HAL_DMA_Abort_IT+0x1d4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a47      	ldr	r2, [pc, #284]	; (80026f4 <HAL_DMA_Abort_IT+0x1d8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d004      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xc8>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a46      	ldr	r2, [pc, #280]	; (80026f8 <HAL_DMA_Abort_IT+0x1dc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_DMA_Abort_IT+0xcc>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_DMA_Abort_IT+0xce>
 80025e8:	2300      	movs	r3, #0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 8086 	beq.w	80026fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2204      	movs	r2, #4
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_DMA_Abort_IT+0x1a0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d04a      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <HAL_DMA_Abort_IT+0x1a4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d045      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2c      	ldr	r2, [pc, #176]	; (80026c4 <HAL_DMA_Abort_IT+0x1a8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d040      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a2b      	ldr	r2, [pc, #172]	; (80026c8 <HAL_DMA_Abort_IT+0x1ac>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d03b      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a29      	ldr	r2, [pc, #164]	; (80026cc <HAL_DMA_Abort_IT+0x1b0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d036      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a28      	ldr	r2, [pc, #160]	; (80026d0 <HAL_DMA_Abort_IT+0x1b4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d031      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a26      	ldr	r2, [pc, #152]	; (80026d4 <HAL_DMA_Abort_IT+0x1b8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02c      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <HAL_DMA_Abort_IT+0x1bc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d027      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a23      	ldr	r2, [pc, #140]	; (80026dc <HAL_DMA_Abort_IT+0x1c0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d022      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <HAL_DMA_Abort_IT+0x1c4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d01d      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a20      	ldr	r2, [pc, #128]	; (80026e4 <HAL_DMA_Abort_IT+0x1c8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d018      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <HAL_DMA_Abort_IT+0x1cc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <HAL_DMA_Abort_IT+0x1d0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <HAL_DMA_Abort_IT+0x1d4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <HAL_DMA_Abort_IT+0x1d8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_DMA_Abort_IT+0x17c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_DMA_Abort_IT+0x1dc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d108      	bne.n	80026aa <HAL_DMA_Abort_IT+0x18e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	e178      	b.n	800299c <HAL_DMA_Abort_IT+0x480>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e16f      	b.n	800299c <HAL_DMA_Abort_IT+0x480>
 80026bc:	40020010 	.word	0x40020010
 80026c0:	40020028 	.word	0x40020028
 80026c4:	40020040 	.word	0x40020040
 80026c8:	40020058 	.word	0x40020058
 80026cc:	40020070 	.word	0x40020070
 80026d0:	40020088 	.word	0x40020088
 80026d4:	400200a0 	.word	0x400200a0
 80026d8:	400200b8 	.word	0x400200b8
 80026dc:	40020410 	.word	0x40020410
 80026e0:	40020428 	.word	0x40020428
 80026e4:	40020440 	.word	0x40020440
 80026e8:	40020458 	.word	0x40020458
 80026ec:	40020470 	.word	0x40020470
 80026f0:	40020488 	.word	0x40020488
 80026f4:	400204a0 	.word	0x400204a0
 80026f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 020e 	bic.w	r2, r2, #14
 800270a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a6c      	ldr	r2, [pc, #432]	; (80028c4 <HAL_DMA_Abort_IT+0x3a8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d04a      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6b      	ldr	r2, [pc, #428]	; (80028c8 <HAL_DMA_Abort_IT+0x3ac>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d045      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a69      	ldr	r2, [pc, #420]	; (80028cc <HAL_DMA_Abort_IT+0x3b0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d040      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a68      	ldr	r2, [pc, #416]	; (80028d0 <HAL_DMA_Abort_IT+0x3b4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d03b      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a66      	ldr	r2, [pc, #408]	; (80028d4 <HAL_DMA_Abort_IT+0x3b8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d036      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a65      	ldr	r2, [pc, #404]	; (80028d8 <HAL_DMA_Abort_IT+0x3bc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d031      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a63      	ldr	r2, [pc, #396]	; (80028dc <HAL_DMA_Abort_IT+0x3c0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02c      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a62      	ldr	r2, [pc, #392]	; (80028e0 <HAL_DMA_Abort_IT+0x3c4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d027      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a60      	ldr	r2, [pc, #384]	; (80028e4 <HAL_DMA_Abort_IT+0x3c8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d022      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a5f      	ldr	r2, [pc, #380]	; (80028e8 <HAL_DMA_Abort_IT+0x3cc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d01d      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a5d      	ldr	r2, [pc, #372]	; (80028ec <HAL_DMA_Abort_IT+0x3d0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d018      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a5c      	ldr	r2, [pc, #368]	; (80028f0 <HAL_DMA_Abort_IT+0x3d4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d013      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a5a      	ldr	r2, [pc, #360]	; (80028f4 <HAL_DMA_Abort_IT+0x3d8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00e      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a59      	ldr	r2, [pc, #356]	; (80028f8 <HAL_DMA_Abort_IT+0x3dc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d009      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a57      	ldr	r2, [pc, #348]	; (80028fc <HAL_DMA_Abort_IT+0x3e0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_DMA_Abort_IT+0x290>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a56      	ldr	r2, [pc, #344]	; (8002900 <HAL_DMA_Abort_IT+0x3e4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d108      	bne.n	80027be <HAL_DMA_Abort_IT+0x2a2>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e007      	b.n	80027ce <HAL_DMA_Abort_IT+0x2b2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a3c      	ldr	r2, [pc, #240]	; (80028c4 <HAL_DMA_Abort_IT+0x3a8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d072      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a3a      	ldr	r2, [pc, #232]	; (80028c8 <HAL_DMA_Abort_IT+0x3ac>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d06d      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a39      	ldr	r2, [pc, #228]	; (80028cc <HAL_DMA_Abort_IT+0x3b0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d068      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a37      	ldr	r2, [pc, #220]	; (80028d0 <HAL_DMA_Abort_IT+0x3b4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d063      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a36      	ldr	r2, [pc, #216]	; (80028d4 <HAL_DMA_Abort_IT+0x3b8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d05e      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <HAL_DMA_Abort_IT+0x3bc>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d059      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a33      	ldr	r2, [pc, #204]	; (80028dc <HAL_DMA_Abort_IT+0x3c0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d054      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a31      	ldr	r2, [pc, #196]	; (80028e0 <HAL_DMA_Abort_IT+0x3c4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d04f      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a30      	ldr	r2, [pc, #192]	; (80028e4 <HAL_DMA_Abort_IT+0x3c8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d04a      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2e      	ldr	r2, [pc, #184]	; (80028e8 <HAL_DMA_Abort_IT+0x3cc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d045      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2d      	ldr	r2, [pc, #180]	; (80028ec <HAL_DMA_Abort_IT+0x3d0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d040      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2b      	ldr	r2, [pc, #172]	; (80028f0 <HAL_DMA_Abort_IT+0x3d4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d03b      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2a      	ldr	r2, [pc, #168]	; (80028f4 <HAL_DMA_Abort_IT+0x3d8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d036      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <HAL_DMA_Abort_IT+0x3dc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d031      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_DMA_Abort_IT+0x3e0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d02c      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a25      	ldr	r2, [pc, #148]	; (8002900 <HAL_DMA_Abort_IT+0x3e4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d027      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a24      	ldr	r2, [pc, #144]	; (8002904 <HAL_DMA_Abort_IT+0x3e8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d022      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a22      	ldr	r2, [pc, #136]	; (8002908 <HAL_DMA_Abort_IT+0x3ec>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01d      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a21      	ldr	r2, [pc, #132]	; (800290c <HAL_DMA_Abort_IT+0x3f0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d018      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_DMA_Abort_IT+0x3f4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <HAL_DMA_Abort_IT+0x3f8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00e      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <HAL_DMA_Abort_IT+0x3fc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d009      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_DMA_Abort_IT+0x400>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d004      	beq.n	80028be <HAL_DMA_Abort_IT+0x3a2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_DMA_Abort_IT+0x404>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d132      	bne.n	8002924 <HAL_DMA_Abort_IT+0x408>
 80028be:	2301      	movs	r3, #1
 80028c0:	e031      	b.n	8002926 <HAL_DMA_Abort_IT+0x40a>
 80028c2:	bf00      	nop
 80028c4:	40020010 	.word	0x40020010
 80028c8:	40020028 	.word	0x40020028
 80028cc:	40020040 	.word	0x40020040
 80028d0:	40020058 	.word	0x40020058
 80028d4:	40020070 	.word	0x40020070
 80028d8:	40020088 	.word	0x40020088
 80028dc:	400200a0 	.word	0x400200a0
 80028e0:	400200b8 	.word	0x400200b8
 80028e4:	40020410 	.word	0x40020410
 80028e8:	40020428 	.word	0x40020428
 80028ec:	40020440 	.word	0x40020440
 80028f0:	40020458 	.word	0x40020458
 80028f4:	40020470 	.word	0x40020470
 80028f8:	40020488 	.word	0x40020488
 80028fc:	400204a0 	.word	0x400204a0
 8002900:	400204b8 	.word	0x400204b8
 8002904:	58025408 	.word	0x58025408
 8002908:	5802541c 	.word	0x5802541c
 800290c:	58025430 	.word	0x58025430
 8002910:	58025444 	.word	0x58025444
 8002914:	58025458 	.word	0x58025458
 8002918:	5802546c 	.word	0x5802546c
 800291c:	58025480 	.word	0x58025480
 8002920:	58025494 	.word	0x58025494
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d028      	beq.n	800297c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002938:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2201      	movs	r2, #1
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002958:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800296c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002970:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800297a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop

080029a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029b4:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <HAL_DMA_IRQHandler+0x1ac>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a67      	ldr	r2, [pc, #412]	; (8002b58 <HAL_DMA_IRQHandler+0x1b0>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	0a9b      	lsrs	r3, r3, #10
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a5f      	ldr	r2, [pc, #380]	; (8002b5c <HAL_DMA_IRQHandler+0x1b4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d04a      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a5d      	ldr	r2, [pc, #372]	; (8002b60 <HAL_DMA_IRQHandler+0x1b8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d045      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a5c      	ldr	r2, [pc, #368]	; (8002b64 <HAL_DMA_IRQHandler+0x1bc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d040      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a5a      	ldr	r2, [pc, #360]	; (8002b68 <HAL_DMA_IRQHandler+0x1c0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d03b      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a59      	ldr	r2, [pc, #356]	; (8002b6c <HAL_DMA_IRQHandler+0x1c4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d036      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a57      	ldr	r2, [pc, #348]	; (8002b70 <HAL_DMA_IRQHandler+0x1c8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d031      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a56      	ldr	r2, [pc, #344]	; (8002b74 <HAL_DMA_IRQHandler+0x1cc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d02c      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a54      	ldr	r2, [pc, #336]	; (8002b78 <HAL_DMA_IRQHandler+0x1d0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d027      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a53      	ldr	r2, [pc, #332]	; (8002b7c <HAL_DMA_IRQHandler+0x1d4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d022      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a51      	ldr	r2, [pc, #324]	; (8002b80 <HAL_DMA_IRQHandler+0x1d8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01d      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a50      	ldr	r2, [pc, #320]	; (8002b84 <HAL_DMA_IRQHandler+0x1dc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d018      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a4e      	ldr	r2, [pc, #312]	; (8002b88 <HAL_DMA_IRQHandler+0x1e0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a4d      	ldr	r2, [pc, #308]	; (8002b8c <HAL_DMA_IRQHandler+0x1e4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00e      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a4b      	ldr	r2, [pc, #300]	; (8002b90 <HAL_DMA_IRQHandler+0x1e8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a4a      	ldr	r2, [pc, #296]	; (8002b94 <HAL_DMA_IRQHandler+0x1ec>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xd2>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a48      	ldr	r2, [pc, #288]	; (8002b98 <HAL_DMA_IRQHandler+0x1f0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_DMA_IRQHandler+0xd6>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_DMA_IRQHandler+0xd8>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 842b 	beq.w	80032dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	2208      	movs	r2, #8
 8002a90:	409a      	lsls	r2, r3
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80a2 	beq.w	8002be0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2e      	ldr	r2, [pc, #184]	; (8002b5c <HAL_DMA_IRQHandler+0x1b4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d04a      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a2d      	ldr	r2, [pc, #180]	; (8002b60 <HAL_DMA_IRQHandler+0x1b8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d045      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <HAL_DMA_IRQHandler+0x1bc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d040      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <HAL_DMA_IRQHandler+0x1c0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d03b      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <HAL_DMA_IRQHandler+0x1c4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d036      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a27      	ldr	r2, [pc, #156]	; (8002b70 <HAL_DMA_IRQHandler+0x1c8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d031      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <HAL_DMA_IRQHandler+0x1cc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02c      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <HAL_DMA_IRQHandler+0x1d0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d027      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_DMA_IRQHandler+0x1d4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d022      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a21      	ldr	r2, [pc, #132]	; (8002b80 <HAL_DMA_IRQHandler+0x1d8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d01d      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <HAL_DMA_IRQHandler+0x1dc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d018      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <HAL_DMA_IRQHandler+0x1e0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d013      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <HAL_DMA_IRQHandler+0x1e4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00e      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_DMA_IRQHandler+0x1e8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d009      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_DMA_IRQHandler+0x1ec>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x194>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a18      	ldr	r2, [pc, #96]	; (8002b98 <HAL_DMA_IRQHandler+0x1f0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d12f      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x1f4>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf14      	ite	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	2300      	moveq	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	e02e      	b.n	8002bb0 <HAL_DMA_IRQHandler+0x208>
 8002b52:	bf00      	nop
 8002b54:	24000000 	.word	0x24000000
 8002b58:	1b4e81b5 	.word	0x1b4e81b5
 8002b5c:	40020010 	.word	0x40020010
 8002b60:	40020028 	.word	0x40020028
 8002b64:	40020040 	.word	0x40020040
 8002b68:	40020058 	.word	0x40020058
 8002b6c:	40020070 	.word	0x40020070
 8002b70:	40020088 	.word	0x40020088
 8002b74:	400200a0 	.word	0x400200a0
 8002b78:	400200b8 	.word	0x400200b8
 8002b7c:	40020410 	.word	0x40020410
 8002b80:	40020428 	.word	0x40020428
 8002b84:	40020440 	.word	0x40020440
 8002b88:	40020458 	.word	0x40020458
 8002b8c:	40020470 	.word	0x40020470
 8002b90:	40020488 	.word	0x40020488
 8002b94:	400204a0 	.word	0x400204a0
 8002b98:	400204b8 	.word	0x400204b8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d015      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0204 	bic.w	r2, r2, #4
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2208      	movs	r2, #8
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d06e      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a69      	ldr	r2, [pc, #420]	; (8002da0 <HAL_DMA_IRQHandler+0x3f8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d04a      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a67      	ldr	r2, [pc, #412]	; (8002da4 <HAL_DMA_IRQHandler+0x3fc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d045      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a66      	ldr	r2, [pc, #408]	; (8002da8 <HAL_DMA_IRQHandler+0x400>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d040      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a64      	ldr	r2, [pc, #400]	; (8002dac <HAL_DMA_IRQHandler+0x404>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d03b      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a63      	ldr	r2, [pc, #396]	; (8002db0 <HAL_DMA_IRQHandler+0x408>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d036      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a61      	ldr	r2, [pc, #388]	; (8002db4 <HAL_DMA_IRQHandler+0x40c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d031      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a60      	ldr	r2, [pc, #384]	; (8002db8 <HAL_DMA_IRQHandler+0x410>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d02c      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a5e      	ldr	r2, [pc, #376]	; (8002dbc <HAL_DMA_IRQHandler+0x414>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d027      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a5d      	ldr	r2, [pc, #372]	; (8002dc0 <HAL_DMA_IRQHandler+0x418>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d022      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a5b      	ldr	r2, [pc, #364]	; (8002dc4 <HAL_DMA_IRQHandler+0x41c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01d      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a5a      	ldr	r2, [pc, #360]	; (8002dc8 <HAL_DMA_IRQHandler+0x420>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d018      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <HAL_DMA_IRQHandler+0x424>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a57      	ldr	r2, [pc, #348]	; (8002dd0 <HAL_DMA_IRQHandler+0x428>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00e      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a55      	ldr	r2, [pc, #340]	; (8002dd4 <HAL_DMA_IRQHandler+0x42c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d009      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a54      	ldr	r2, [pc, #336]	; (8002dd8 <HAL_DMA_IRQHandler+0x430>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d004      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2ee>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <HAL_DMA_IRQHandler+0x434>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d10a      	bne.n	8002cac <HAL_DMA_IRQHandler+0x304>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf14      	ite	ne
 8002ca4:	2301      	movne	r3, #1
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e003      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x30c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ccc:	f043 0202 	orr.w	r2, r3, #2
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2204      	movs	r2, #4
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 808f 	beq.w	8002e08 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2c      	ldr	r2, [pc, #176]	; (8002da0 <HAL_DMA_IRQHandler+0x3f8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d04a      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2a      	ldr	r2, [pc, #168]	; (8002da4 <HAL_DMA_IRQHandler+0x3fc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d045      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a29      	ldr	r2, [pc, #164]	; (8002da8 <HAL_DMA_IRQHandler+0x400>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d040      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a27      	ldr	r2, [pc, #156]	; (8002dac <HAL_DMA_IRQHandler+0x404>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d03b      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a26      	ldr	r2, [pc, #152]	; (8002db0 <HAL_DMA_IRQHandler+0x408>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d036      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <HAL_DMA_IRQHandler+0x40c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d031      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <HAL_DMA_IRQHandler+0x410>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d02c      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <HAL_DMA_IRQHandler+0x414>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d027      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a20      	ldr	r2, [pc, #128]	; (8002dc0 <HAL_DMA_IRQHandler+0x418>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1e      	ldr	r2, [pc, #120]	; (8002dc4 <HAL_DMA_IRQHandler+0x41c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01d      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <HAL_DMA_IRQHandler+0x420>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d018      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1b      	ldr	r2, [pc, #108]	; (8002dcc <HAL_DMA_IRQHandler+0x424>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1a      	ldr	r2, [pc, #104]	; (8002dd0 <HAL_DMA_IRQHandler+0x428>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00e      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <HAL_DMA_IRQHandler+0x42c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d009      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_DMA_IRQHandler+0x430>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d004      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x3e2>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <HAL_DMA_IRQHandler+0x434>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d12a      	bne.n	8002de0 <HAL_DMA_IRQHandler+0x438>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e023      	b.n	8002de8 <HAL_DMA_IRQHandler+0x440>
 8002da0:	40020010 	.word	0x40020010
 8002da4:	40020028 	.word	0x40020028
 8002da8:	40020040 	.word	0x40020040
 8002dac:	40020058 	.word	0x40020058
 8002db0:	40020070 	.word	0x40020070
 8002db4:	40020088 	.word	0x40020088
 8002db8:	400200a0 	.word	0x400200a0
 8002dbc:	400200b8 	.word	0x400200b8
 8002dc0:	40020410 	.word	0x40020410
 8002dc4:	40020428 	.word	0x40020428
 8002dc8:	40020440 	.word	0x40020440
 8002dcc:	40020458 	.word	0x40020458
 8002dd0:	40020470 	.word	0x40020470
 8002dd4:	40020488 	.word	0x40020488
 8002dd8:	400204a0 	.word	0x400204a0
 8002ddc:	400204b8 	.word	0x400204b8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00d      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	2204      	movs	r2, #4
 8002df6:	409a      	lsls	r2, r3
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	f043 0204 	orr.w	r2, r3, #4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2210      	movs	r2, #16
 8002e12:	409a      	lsls	r2, r3
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80a6 	beq.w	8002f6a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a85      	ldr	r2, [pc, #532]	; (8003038 <HAL_DMA_IRQHandler+0x690>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d04a      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a83      	ldr	r2, [pc, #524]	; (800303c <HAL_DMA_IRQHandler+0x694>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d045      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a82      	ldr	r2, [pc, #520]	; (8003040 <HAL_DMA_IRQHandler+0x698>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d040      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a80      	ldr	r2, [pc, #512]	; (8003044 <HAL_DMA_IRQHandler+0x69c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d03b      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7f      	ldr	r2, [pc, #508]	; (8003048 <HAL_DMA_IRQHandler+0x6a0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d036      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a7d      	ldr	r2, [pc, #500]	; (800304c <HAL_DMA_IRQHandler+0x6a4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d031      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a7c      	ldr	r2, [pc, #496]	; (8003050 <HAL_DMA_IRQHandler+0x6a8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d02c      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a7a      	ldr	r2, [pc, #488]	; (8003054 <HAL_DMA_IRQHandler+0x6ac>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d027      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a79      	ldr	r2, [pc, #484]	; (8003058 <HAL_DMA_IRQHandler+0x6b0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a77      	ldr	r2, [pc, #476]	; (800305c <HAL_DMA_IRQHandler+0x6b4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01d      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a76      	ldr	r2, [pc, #472]	; (8003060 <HAL_DMA_IRQHandler+0x6b8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d018      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a74      	ldr	r2, [pc, #464]	; (8003064 <HAL_DMA_IRQHandler+0x6bc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a73      	ldr	r2, [pc, #460]	; (8003068 <HAL_DMA_IRQHandler+0x6c0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00e      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a71      	ldr	r2, [pc, #452]	; (800306c <HAL_DMA_IRQHandler+0x6c4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d009      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a70      	ldr	r2, [pc, #448]	; (8003070 <HAL_DMA_IRQHandler+0x6c8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x516>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a6e      	ldr	r2, [pc, #440]	; (8003074 <HAL_DMA_IRQHandler+0x6cc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x52c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e009      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x540>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf14      	ite	ne
 8002ee2:	2301      	movne	r3, #1
 8002ee4:	2300      	moveq	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d03e      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d018      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d108      	bne.n	8002f2a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d024      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
 8002f28:	e01f      	b.n	8002f6a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01b      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
 8002f3a:	e016      	b.n	8002f6a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d107      	bne.n	8002f5a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0208 	bic.w	r2, r2, #8
 8002f58:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2220      	movs	r2, #32
 8002f74:	409a      	lsls	r2, r3
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8110 	beq.w	80031a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2c      	ldr	r2, [pc, #176]	; (8003038 <HAL_DMA_IRQHandler+0x690>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d04a      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2b      	ldr	r2, [pc, #172]	; (800303c <HAL_DMA_IRQHandler+0x694>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d045      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a29      	ldr	r2, [pc, #164]	; (8003040 <HAL_DMA_IRQHandler+0x698>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d040      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a28      	ldr	r2, [pc, #160]	; (8003044 <HAL_DMA_IRQHandler+0x69c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d03b      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a26      	ldr	r2, [pc, #152]	; (8003048 <HAL_DMA_IRQHandler+0x6a0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d036      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a25      	ldr	r2, [pc, #148]	; (800304c <HAL_DMA_IRQHandler+0x6a4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d031      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a23      	ldr	r2, [pc, #140]	; (8003050 <HAL_DMA_IRQHandler+0x6a8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d02c      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a22      	ldr	r2, [pc, #136]	; (8003054 <HAL_DMA_IRQHandler+0x6ac>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d027      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a20      	ldr	r2, [pc, #128]	; (8003058 <HAL_DMA_IRQHandler+0x6b0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d022      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1f      	ldr	r2, [pc, #124]	; (800305c <HAL_DMA_IRQHandler+0x6b4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d01d      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <HAL_DMA_IRQHandler+0x6b8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d018      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <HAL_DMA_IRQHandler+0x6bc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1a      	ldr	r2, [pc, #104]	; (8003068 <HAL_DMA_IRQHandler+0x6c0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00e      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a19      	ldr	r2, [pc, #100]	; (800306c <HAL_DMA_IRQHandler+0x6c4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a17      	ldr	r2, [pc, #92]	; (8003070 <HAL_DMA_IRQHandler+0x6c8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_DMA_IRQHandler+0x678>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a16      	ldr	r2, [pc, #88]	; (8003074 <HAL_DMA_IRQHandler+0x6cc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d12b      	bne.n	8003078 <HAL_DMA_IRQHandler+0x6d0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf14      	ite	ne
 800302e:	2301      	movne	r3, #1
 8003030:	2300      	moveq	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	e02a      	b.n	800308c <HAL_DMA_IRQHandler+0x6e4>
 8003036:	bf00      	nop
 8003038:	40020010 	.word	0x40020010
 800303c:	40020028 	.word	0x40020028
 8003040:	40020040 	.word	0x40020040
 8003044:	40020058 	.word	0x40020058
 8003048:	40020070 	.word	0x40020070
 800304c:	40020088 	.word	0x40020088
 8003050:	400200a0 	.word	0x400200a0
 8003054:	400200b8 	.word	0x400200b8
 8003058:	40020410 	.word	0x40020410
 800305c:	40020428 	.word	0x40020428
 8003060:	40020440 	.word	0x40020440
 8003064:	40020458 	.word	0x40020458
 8003068:	40020470 	.word	0x40020470
 800306c:	40020488 	.word	0x40020488
 8003070:	400204a0 	.word	0x400204a0
 8003074:	400204b8 	.word	0x400204b8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8087 	beq.w	80031a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	2220      	movs	r2, #32
 800309c:	409a      	lsls	r2, r3
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d139      	bne.n	8003122 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0216 	bic.w	r2, r2, #22
 80030bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_DMA_IRQHandler+0x736>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0208 	bic.w	r2, r2, #8
 80030ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	223f      	movs	r2, #63	; 0x3f
 80030f8:	409a      	lsls	r2, r3
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 834a 	beq.w	80037ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
          }
          return;
 8003120:	e344      	b.n	80037ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d018      	beq.n	8003162 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	2b00      	cmp	r3, #0
 8003144:	d02c      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
 800314e:	e027      	b.n	80031a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d023      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
 8003160:	e01e      	b.n	80031a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10f      	bne.n	8003190 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0210 	bic.w	r2, r2, #16
 800317e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8306 	beq.w	80037b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8088 	beq.w	80032c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2204      	movs	r2, #4
 80031bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a7a      	ldr	r2, [pc, #488]	; (80033b0 <HAL_DMA_IRQHandler+0xa08>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d04a      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a79      	ldr	r2, [pc, #484]	; (80033b4 <HAL_DMA_IRQHandler+0xa0c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d045      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a77      	ldr	r2, [pc, #476]	; (80033b8 <HAL_DMA_IRQHandler+0xa10>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d040      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a76      	ldr	r2, [pc, #472]	; (80033bc <HAL_DMA_IRQHandler+0xa14>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d03b      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a74      	ldr	r2, [pc, #464]	; (80033c0 <HAL_DMA_IRQHandler+0xa18>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d036      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a73      	ldr	r2, [pc, #460]	; (80033c4 <HAL_DMA_IRQHandler+0xa1c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d031      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a71      	ldr	r2, [pc, #452]	; (80033c8 <HAL_DMA_IRQHandler+0xa20>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d02c      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a70      	ldr	r2, [pc, #448]	; (80033cc <HAL_DMA_IRQHandler+0xa24>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d027      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a6e      	ldr	r2, [pc, #440]	; (80033d0 <HAL_DMA_IRQHandler+0xa28>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d022      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6d      	ldr	r2, [pc, #436]	; (80033d4 <HAL_DMA_IRQHandler+0xa2c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d01d      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a6b      	ldr	r2, [pc, #428]	; (80033d8 <HAL_DMA_IRQHandler+0xa30>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d018      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a6a      	ldr	r2, [pc, #424]	; (80033dc <HAL_DMA_IRQHandler+0xa34>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d013      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a68      	ldr	r2, [pc, #416]	; (80033e0 <HAL_DMA_IRQHandler+0xa38>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00e      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a67      	ldr	r2, [pc, #412]	; (80033e4 <HAL_DMA_IRQHandler+0xa3c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d009      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a65      	ldr	r2, [pc, #404]	; (80033e8 <HAL_DMA_IRQHandler+0xa40>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_DMA_IRQHandler+0x8b8>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a64      	ldr	r2, [pc, #400]	; (80033ec <HAL_DMA_IRQHandler+0xa44>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d108      	bne.n	8003272 <HAL_DMA_IRQHandler+0x8ca>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e007      	b.n	8003282 <HAL_DMA_IRQHandler+0x8da>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0201 	bic.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3301      	adds	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328a:	429a      	cmp	r2, r3
 800328c:	d307      	bcc.n	800329e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f2      	bne.n	8003282 <HAL_DMA_IRQHandler+0x8da>
 800329c:	e000      	b.n	80032a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800329e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80032b6:	e003      	b.n	80032c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8272 	beq.w	80037b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
 80032da:	e26c      	b.n	80037b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a43      	ldr	r2, [pc, #268]	; (80033f0 <HAL_DMA_IRQHandler+0xa48>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d022      	beq.n	800332c <HAL_DMA_IRQHandler+0x984>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a42      	ldr	r2, [pc, #264]	; (80033f4 <HAL_DMA_IRQHandler+0xa4c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d01d      	beq.n	800332c <HAL_DMA_IRQHandler+0x984>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a40      	ldr	r2, [pc, #256]	; (80033f8 <HAL_DMA_IRQHandler+0xa50>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <HAL_DMA_IRQHandler+0x984>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3f      	ldr	r2, [pc, #252]	; (80033fc <HAL_DMA_IRQHandler+0xa54>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <HAL_DMA_IRQHandler+0x984>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3d      	ldr	r2, [pc, #244]	; (8003400 <HAL_DMA_IRQHandler+0xa58>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <HAL_DMA_IRQHandler+0x984>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a3c      	ldr	r2, [pc, #240]	; (8003404 <HAL_DMA_IRQHandler+0xa5c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_DMA_IRQHandler+0x984>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a3a      	ldr	r2, [pc, #232]	; (8003408 <HAL_DMA_IRQHandler+0xa60>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_DMA_IRQHandler+0x984>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a39      	ldr	r2, [pc, #228]	; (800340c <HAL_DMA_IRQHandler+0xa64>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <HAL_DMA_IRQHandler+0x988>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <HAL_DMA_IRQHandler+0x98a>
 8003330:	2300      	movs	r3, #0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 823f 	beq.w	80037b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2204      	movs	r2, #4
 800334a:	409a      	lsls	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80cd 	beq.w	80034f0 <HAL_DMA_IRQHandler+0xb48>
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80c7 	beq.w	80034f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2204      	movs	r2, #4
 800336c:	409a      	lsls	r2, r3
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d049      	beq.n	8003410 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 8210 	beq.w	80037b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003398:	e20a      	b.n	80037b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8206 	beq.w	80037b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033ac:	e200      	b.n	80037b0 <HAL_DMA_IRQHandler+0xe08>
 80033ae:	bf00      	nop
 80033b0:	40020010 	.word	0x40020010
 80033b4:	40020028 	.word	0x40020028
 80033b8:	40020040 	.word	0x40020040
 80033bc:	40020058 	.word	0x40020058
 80033c0:	40020070 	.word	0x40020070
 80033c4:	40020088 	.word	0x40020088
 80033c8:	400200a0 	.word	0x400200a0
 80033cc:	400200b8 	.word	0x400200b8
 80033d0:	40020410 	.word	0x40020410
 80033d4:	40020428 	.word	0x40020428
 80033d8:	40020440 	.word	0x40020440
 80033dc:	40020458 	.word	0x40020458
 80033e0:	40020470 	.word	0x40020470
 80033e4:	40020488 	.word	0x40020488
 80033e8:	400204a0 	.word	0x400204a0
 80033ec:	400204b8 	.word	0x400204b8
 80033f0:	58025408 	.word	0x58025408
 80033f4:	5802541c 	.word	0x5802541c
 80033f8:	58025430 	.word	0x58025430
 80033fc:	58025444 	.word	0x58025444
 8003400:	58025458 	.word	0x58025458
 8003404:	5802546c 	.word	0x5802546c
 8003408:	58025480 	.word	0x58025480
 800340c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d160      	bne.n	80034dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7f      	ldr	r2, [pc, #508]	; (800361c <HAL_DMA_IRQHandler+0xc74>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d04a      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a7d      	ldr	r2, [pc, #500]	; (8003620 <HAL_DMA_IRQHandler+0xc78>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d045      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a7c      	ldr	r2, [pc, #496]	; (8003624 <HAL_DMA_IRQHandler+0xc7c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d040      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a7a      	ldr	r2, [pc, #488]	; (8003628 <HAL_DMA_IRQHandler+0xc80>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d03b      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a79      	ldr	r2, [pc, #484]	; (800362c <HAL_DMA_IRQHandler+0xc84>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d036      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a77      	ldr	r2, [pc, #476]	; (8003630 <HAL_DMA_IRQHandler+0xc88>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d031      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a76      	ldr	r2, [pc, #472]	; (8003634 <HAL_DMA_IRQHandler+0xc8c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d02c      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a74      	ldr	r2, [pc, #464]	; (8003638 <HAL_DMA_IRQHandler+0xc90>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d027      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a73      	ldr	r2, [pc, #460]	; (800363c <HAL_DMA_IRQHandler+0xc94>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d022      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a71      	ldr	r2, [pc, #452]	; (8003640 <HAL_DMA_IRQHandler+0xc98>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01d      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a70      	ldr	r2, [pc, #448]	; (8003644 <HAL_DMA_IRQHandler+0xc9c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d018      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6e      	ldr	r2, [pc, #440]	; (8003648 <HAL_DMA_IRQHandler+0xca0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a6d      	ldr	r2, [pc, #436]	; (800364c <HAL_DMA_IRQHandler+0xca4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00e      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6b      	ldr	r2, [pc, #428]	; (8003650 <HAL_DMA_IRQHandler+0xca8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d009      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6a      	ldr	r2, [pc, #424]	; (8003654 <HAL_DMA_IRQHandler+0xcac>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <HAL_DMA_IRQHandler+0xb12>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a68      	ldr	r2, [pc, #416]	; (8003658 <HAL_DMA_IRQHandler+0xcb0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d108      	bne.n	80034cc <HAL_DMA_IRQHandler+0xb24>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0208 	bic.w	r2, r2, #8
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e007      	b.n	80034dc <HAL_DMA_IRQHandler+0xb34>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0204 	bic.w	r2, r2, #4
 80034da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8165 	beq.w	80037b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ee:	e15f      	b.n	80037b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2202      	movs	r2, #2
 80034fa:	409a      	lsls	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80c5 	beq.w	8003690 <HAL_DMA_IRQHandler+0xce8>
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80bf 	beq.w	8003690 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	2202      	movs	r2, #2
 800351c:	409a      	lsls	r2, r3
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d018      	beq.n	800355e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 813a 	beq.w	80037b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003548:	e134      	b.n	80037b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8130 	beq.w	80037b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800355c:	e12a      	b.n	80037b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	f040 8089 	bne.w	800367c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2b      	ldr	r2, [pc, #172]	; (800361c <HAL_DMA_IRQHandler+0xc74>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d04a      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a29      	ldr	r2, [pc, #164]	; (8003620 <HAL_DMA_IRQHandler+0xc78>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d045      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a28      	ldr	r2, [pc, #160]	; (8003624 <HAL_DMA_IRQHandler+0xc7c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d040      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a26      	ldr	r2, [pc, #152]	; (8003628 <HAL_DMA_IRQHandler+0xc80>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d03b      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a25      	ldr	r2, [pc, #148]	; (800362c <HAL_DMA_IRQHandler+0xc84>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d036      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a23      	ldr	r2, [pc, #140]	; (8003630 <HAL_DMA_IRQHandler+0xc88>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d031      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a22      	ldr	r2, [pc, #136]	; (8003634 <HAL_DMA_IRQHandler+0xc8c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d02c      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a20      	ldr	r2, [pc, #128]	; (8003638 <HAL_DMA_IRQHandler+0xc90>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d027      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1f      	ldr	r2, [pc, #124]	; (800363c <HAL_DMA_IRQHandler+0xc94>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <HAL_DMA_IRQHandler+0xc98>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01d      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <HAL_DMA_IRQHandler+0xc9c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1a      	ldr	r2, [pc, #104]	; (8003648 <HAL_DMA_IRQHandler+0xca0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a19      	ldr	r2, [pc, #100]	; (800364c <HAL_DMA_IRQHandler+0xca4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a17      	ldr	r2, [pc, #92]	; (8003650 <HAL_DMA_IRQHandler+0xca8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a16      	ldr	r2, [pc, #88]	; (8003654 <HAL_DMA_IRQHandler+0xcac>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_DMA_IRQHandler+0xc62>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a14      	ldr	r2, [pc, #80]	; (8003658 <HAL_DMA_IRQHandler+0xcb0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d128      	bne.n	800365c <HAL_DMA_IRQHandler+0xcb4>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0214 	bic.w	r2, r2, #20
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	e027      	b.n	800366c <HAL_DMA_IRQHandler+0xcc4>
 800361c:	40020010 	.word	0x40020010
 8003620:	40020028 	.word	0x40020028
 8003624:	40020040 	.word	0x40020040
 8003628:	40020058 	.word	0x40020058
 800362c:	40020070 	.word	0x40020070
 8003630:	40020088 	.word	0x40020088
 8003634:	400200a0 	.word	0x400200a0
 8003638:	400200b8 	.word	0x400200b8
 800363c:	40020410 	.word	0x40020410
 8003640:	40020428 	.word	0x40020428
 8003644:	40020440 	.word	0x40020440
 8003648:	40020458 	.word	0x40020458
 800364c:	40020470 	.word	0x40020470
 8003650:	40020488 	.word	0x40020488
 8003654:	400204a0 	.word	0x400204a0
 8003658:	400204b8 	.word	0x400204b8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 020a 	bic.w	r2, r2, #10
 800366a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8097 	beq.w	80037b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800368e:	e091      	b.n	80037b4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2208      	movs	r2, #8
 800369a:	409a      	lsls	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8088 	beq.w	80037b6 <HAL_DMA_IRQHandler+0xe0e>
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8082 	beq.w	80037b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a41      	ldr	r2, [pc, #260]	; (80037bc <HAL_DMA_IRQHandler+0xe14>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d04a      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a3f      	ldr	r2, [pc, #252]	; (80037c0 <HAL_DMA_IRQHandler+0xe18>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d045      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a3e      	ldr	r2, [pc, #248]	; (80037c4 <HAL_DMA_IRQHandler+0xe1c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d040      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a3c      	ldr	r2, [pc, #240]	; (80037c8 <HAL_DMA_IRQHandler+0xe20>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d03b      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3b      	ldr	r2, [pc, #236]	; (80037cc <HAL_DMA_IRQHandler+0xe24>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d036      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a39      	ldr	r2, [pc, #228]	; (80037d0 <HAL_DMA_IRQHandler+0xe28>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d031      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a38      	ldr	r2, [pc, #224]	; (80037d4 <HAL_DMA_IRQHandler+0xe2c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d02c      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a36      	ldr	r2, [pc, #216]	; (80037d8 <HAL_DMA_IRQHandler+0xe30>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d027      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a35      	ldr	r2, [pc, #212]	; (80037dc <HAL_DMA_IRQHandler+0xe34>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a33      	ldr	r2, [pc, #204]	; (80037e0 <HAL_DMA_IRQHandler+0xe38>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01d      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a32      	ldr	r2, [pc, #200]	; (80037e4 <HAL_DMA_IRQHandler+0xe3c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d018      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a30      	ldr	r2, [pc, #192]	; (80037e8 <HAL_DMA_IRQHandler+0xe40>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a2f      	ldr	r2, [pc, #188]	; (80037ec <HAL_DMA_IRQHandler+0xe44>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00e      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2d      	ldr	r2, [pc, #180]	; (80037f0 <HAL_DMA_IRQHandler+0xe48>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <HAL_DMA_IRQHandler+0xe4c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_DMA_IRQHandler+0xdaa>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2a      	ldr	r2, [pc, #168]	; (80037f8 <HAL_DMA_IRQHandler+0xe50>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d108      	bne.n	8003764 <HAL_DMA_IRQHandler+0xdbc>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 021c 	bic.w	r2, r2, #28
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e007      	b.n	8003774 <HAL_DMA_IRQHandler+0xdcc>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 020e 	bic.w	r2, r2, #14
 8003772:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	2201      	movs	r2, #1
 800377e:	409a      	lsls	r2, r3
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	4798      	blx	r3
 80037aa:	e004      	b.n	80037b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80037ac:	bf00      	nop
 80037ae:	e002      	b.n	80037b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037b0:	bf00      	nop
 80037b2:	e000      	b.n	80037b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037b6:	3728      	adds	r7, #40	; 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40020010 	.word	0x40020010
 80037c0:	40020028 	.word	0x40020028
 80037c4:	40020040 	.word	0x40020040
 80037c8:	40020058 	.word	0x40020058
 80037cc:	40020070 	.word	0x40020070
 80037d0:	40020088 	.word	0x40020088
 80037d4:	400200a0 	.word	0x400200a0
 80037d8:	400200b8 	.word	0x400200b8
 80037dc:	40020410 	.word	0x40020410
 80037e0:	40020428 	.word	0x40020428
 80037e4:	40020440 	.word	0x40020440
 80037e8:	40020458 	.word	0x40020458
 80037ec:	40020470 	.word	0x40020470
 80037f0:	40020488 	.word	0x40020488
 80037f4:	400204a0 	.word	0x400204a0
 80037f8:	400204b8 	.word	0x400204b8

080037fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a7f      	ldr	r2, [pc, #508]	; (8003a18 <DMA_SetConfig+0x21c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d072      	beq.n	8003906 <DMA_SetConfig+0x10a>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a7d      	ldr	r2, [pc, #500]	; (8003a1c <DMA_SetConfig+0x220>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d06d      	beq.n	8003906 <DMA_SetConfig+0x10a>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7c      	ldr	r2, [pc, #496]	; (8003a20 <DMA_SetConfig+0x224>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d068      	beq.n	8003906 <DMA_SetConfig+0x10a>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a7a      	ldr	r2, [pc, #488]	; (8003a24 <DMA_SetConfig+0x228>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d063      	beq.n	8003906 <DMA_SetConfig+0x10a>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a79      	ldr	r2, [pc, #484]	; (8003a28 <DMA_SetConfig+0x22c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d05e      	beq.n	8003906 <DMA_SetConfig+0x10a>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a77      	ldr	r2, [pc, #476]	; (8003a2c <DMA_SetConfig+0x230>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d059      	beq.n	8003906 <DMA_SetConfig+0x10a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a76      	ldr	r2, [pc, #472]	; (8003a30 <DMA_SetConfig+0x234>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d054      	beq.n	8003906 <DMA_SetConfig+0x10a>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a74      	ldr	r2, [pc, #464]	; (8003a34 <DMA_SetConfig+0x238>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d04f      	beq.n	8003906 <DMA_SetConfig+0x10a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a73      	ldr	r2, [pc, #460]	; (8003a38 <DMA_SetConfig+0x23c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d04a      	beq.n	8003906 <DMA_SetConfig+0x10a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a71      	ldr	r2, [pc, #452]	; (8003a3c <DMA_SetConfig+0x240>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d045      	beq.n	8003906 <DMA_SetConfig+0x10a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a70      	ldr	r2, [pc, #448]	; (8003a40 <DMA_SetConfig+0x244>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d040      	beq.n	8003906 <DMA_SetConfig+0x10a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6e      	ldr	r2, [pc, #440]	; (8003a44 <DMA_SetConfig+0x248>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d03b      	beq.n	8003906 <DMA_SetConfig+0x10a>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6d      	ldr	r2, [pc, #436]	; (8003a48 <DMA_SetConfig+0x24c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d036      	beq.n	8003906 <DMA_SetConfig+0x10a>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6b      	ldr	r2, [pc, #428]	; (8003a4c <DMA_SetConfig+0x250>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d031      	beq.n	8003906 <DMA_SetConfig+0x10a>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6a      	ldr	r2, [pc, #424]	; (8003a50 <DMA_SetConfig+0x254>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d02c      	beq.n	8003906 <DMA_SetConfig+0x10a>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a68      	ldr	r2, [pc, #416]	; (8003a54 <DMA_SetConfig+0x258>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d027      	beq.n	8003906 <DMA_SetConfig+0x10a>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a67      	ldr	r2, [pc, #412]	; (8003a58 <DMA_SetConfig+0x25c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <DMA_SetConfig+0x10a>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a65      	ldr	r2, [pc, #404]	; (8003a5c <DMA_SetConfig+0x260>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01d      	beq.n	8003906 <DMA_SetConfig+0x10a>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a64      	ldr	r2, [pc, #400]	; (8003a60 <DMA_SetConfig+0x264>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <DMA_SetConfig+0x10a>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a62      	ldr	r2, [pc, #392]	; (8003a64 <DMA_SetConfig+0x268>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <DMA_SetConfig+0x10a>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a61      	ldr	r2, [pc, #388]	; (8003a68 <DMA_SetConfig+0x26c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <DMA_SetConfig+0x10a>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5f      	ldr	r2, [pc, #380]	; (8003a6c <DMA_SetConfig+0x270>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <DMA_SetConfig+0x10a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5e      	ldr	r2, [pc, #376]	; (8003a70 <DMA_SetConfig+0x274>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <DMA_SetConfig+0x10a>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5c      	ldr	r2, [pc, #368]	; (8003a74 <DMA_SetConfig+0x278>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <DMA_SetConfig+0x10e>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <DMA_SetConfig+0x110>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003918:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d004      	beq.n	800392c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800392a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a39      	ldr	r2, [pc, #228]	; (8003a18 <DMA_SetConfig+0x21c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d04a      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a38      	ldr	r2, [pc, #224]	; (8003a1c <DMA_SetConfig+0x220>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d045      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a36      	ldr	r2, [pc, #216]	; (8003a20 <DMA_SetConfig+0x224>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d040      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a35      	ldr	r2, [pc, #212]	; (8003a24 <DMA_SetConfig+0x228>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d03b      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a33      	ldr	r2, [pc, #204]	; (8003a28 <DMA_SetConfig+0x22c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d036      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a32      	ldr	r2, [pc, #200]	; (8003a2c <DMA_SetConfig+0x230>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d031      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a30      	ldr	r2, [pc, #192]	; (8003a30 <DMA_SetConfig+0x234>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d02c      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2f      	ldr	r2, [pc, #188]	; (8003a34 <DMA_SetConfig+0x238>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d027      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2d      	ldr	r2, [pc, #180]	; (8003a38 <DMA_SetConfig+0x23c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d022      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2c      	ldr	r2, [pc, #176]	; (8003a3c <DMA_SetConfig+0x240>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d01d      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2a      	ldr	r2, [pc, #168]	; (8003a40 <DMA_SetConfig+0x244>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d018      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <DMA_SetConfig+0x248>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <DMA_SetConfig+0x24c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00e      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a26      	ldr	r2, [pc, #152]	; (8003a4c <DMA_SetConfig+0x250>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a24      	ldr	r2, [pc, #144]	; (8003a50 <DMA_SetConfig+0x254>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <DMA_SetConfig+0x1d0>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a23      	ldr	r2, [pc, #140]	; (8003a54 <DMA_SetConfig+0x258>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <DMA_SetConfig+0x1d4>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <DMA_SetConfig+0x1d6>
 80039d0:	2300      	movs	r3, #0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d059      	beq.n	8003a8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	223f      	movs	r2, #63	; 0x3f
 80039e0:	409a      	lsls	r2, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039f4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d138      	bne.n	8003a78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a16:	e086      	b.n	8003b26 <DMA_SetConfig+0x32a>
 8003a18:	40020010 	.word	0x40020010
 8003a1c:	40020028 	.word	0x40020028
 8003a20:	40020040 	.word	0x40020040
 8003a24:	40020058 	.word	0x40020058
 8003a28:	40020070 	.word	0x40020070
 8003a2c:	40020088 	.word	0x40020088
 8003a30:	400200a0 	.word	0x400200a0
 8003a34:	400200b8 	.word	0x400200b8
 8003a38:	40020410 	.word	0x40020410
 8003a3c:	40020428 	.word	0x40020428
 8003a40:	40020440 	.word	0x40020440
 8003a44:	40020458 	.word	0x40020458
 8003a48:	40020470 	.word	0x40020470
 8003a4c:	40020488 	.word	0x40020488
 8003a50:	400204a0 	.word	0x400204a0
 8003a54:	400204b8 	.word	0x400204b8
 8003a58:	58025408 	.word	0x58025408
 8003a5c:	5802541c 	.word	0x5802541c
 8003a60:	58025430 	.word	0x58025430
 8003a64:	58025444 	.word	0x58025444
 8003a68:	58025458 	.word	0x58025458
 8003a6c:	5802546c 	.word	0x5802546c
 8003a70:	58025480 	.word	0x58025480
 8003a74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
}
 8003a88:	e04d      	b.n	8003b26 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <DMA_SetConfig+0x338>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d022      	beq.n	8003ada <DMA_SetConfig+0x2de>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a27      	ldr	r2, [pc, #156]	; (8003b38 <DMA_SetConfig+0x33c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01d      	beq.n	8003ada <DMA_SetConfig+0x2de>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a26      	ldr	r2, [pc, #152]	; (8003b3c <DMA_SetConfig+0x340>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d018      	beq.n	8003ada <DMA_SetConfig+0x2de>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <DMA_SetConfig+0x344>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <DMA_SetConfig+0x2de>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <DMA_SetConfig+0x348>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00e      	beq.n	8003ada <DMA_SetConfig+0x2de>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <DMA_SetConfig+0x34c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <DMA_SetConfig+0x2de>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a20      	ldr	r2, [pc, #128]	; (8003b4c <DMA_SetConfig+0x350>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <DMA_SetConfig+0x2de>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <DMA_SetConfig+0x354>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <DMA_SetConfig+0x2e2>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <DMA_SetConfig+0x2e4>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d020      	beq.n	8003b26 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2201      	movs	r2, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d108      	bne.n	8003b16 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	60da      	str	r2, [r3, #12]
}
 8003b14:	e007      	b.n	8003b26 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	60da      	str	r2, [r3, #12]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	58025408 	.word	0x58025408
 8003b38:	5802541c 	.word	0x5802541c
 8003b3c:	58025430 	.word	0x58025430
 8003b40:	58025444 	.word	0x58025444
 8003b44:	58025458 	.word	0x58025458
 8003b48:	5802546c 	.word	0x5802546c
 8003b4c:	58025480 	.word	0x58025480
 8003b50:	58025494 	.word	0x58025494

08003b54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a42      	ldr	r2, [pc, #264]	; (8003c6c <DMA_CalcBaseAndBitshift+0x118>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d04a      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a41      	ldr	r2, [pc, #260]	; (8003c70 <DMA_CalcBaseAndBitshift+0x11c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d045      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3f      	ldr	r2, [pc, #252]	; (8003c74 <DMA_CalcBaseAndBitshift+0x120>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d040      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a3e      	ldr	r2, [pc, #248]	; (8003c78 <DMA_CalcBaseAndBitshift+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d03b      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a3c      	ldr	r2, [pc, #240]	; (8003c7c <DMA_CalcBaseAndBitshift+0x128>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d036      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a3b      	ldr	r2, [pc, #236]	; (8003c80 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d031      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a39      	ldr	r2, [pc, #228]	; (8003c84 <DMA_CalcBaseAndBitshift+0x130>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d02c      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a38      	ldr	r2, [pc, #224]	; (8003c88 <DMA_CalcBaseAndBitshift+0x134>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d027      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a36      	ldr	r2, [pc, #216]	; (8003c8c <DMA_CalcBaseAndBitshift+0x138>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d022      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a35      	ldr	r2, [pc, #212]	; (8003c90 <DMA_CalcBaseAndBitshift+0x13c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d01d      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a33      	ldr	r2, [pc, #204]	; (8003c94 <DMA_CalcBaseAndBitshift+0x140>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d018      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a32      	ldr	r2, [pc, #200]	; (8003c98 <DMA_CalcBaseAndBitshift+0x144>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a30      	ldr	r2, [pc, #192]	; (8003c9c <DMA_CalcBaseAndBitshift+0x148>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2f      	ldr	r2, [pc, #188]	; (8003ca0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <DMA_CalcBaseAndBitshift+0x150>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2c      	ldr	r2, [pc, #176]	; (8003ca8 <DMA_CalcBaseAndBitshift+0x154>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d101      	bne.n	8003c00 <DMA_CalcBaseAndBitshift+0xac>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <DMA_CalcBaseAndBitshift+0xae>
 8003c00:	2300      	movs	r3, #0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d024      	beq.n	8003c50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	3b10      	subs	r3, #16
 8003c0e:	4a27      	ldr	r2, [pc, #156]	; (8003cac <DMA_CalcBaseAndBitshift+0x158>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	4a24      	ldr	r2, [pc, #144]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003c20:	5cd3      	ldrb	r3, [r2, r3]
 8003c22:	461a      	mov	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d908      	bls.n	8003c40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b1f      	ldr	r3, [pc, #124]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x160>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	1d1a      	adds	r2, r3, #4
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	659a      	str	r2, [r3, #88]	; 0x58
 8003c3e:	e00d      	b.n	8003c5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x160>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c4e:	e005      	b.n	8003c5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40020010 	.word	0x40020010
 8003c70:	40020028 	.word	0x40020028
 8003c74:	40020040 	.word	0x40020040
 8003c78:	40020058 	.word	0x40020058
 8003c7c:	40020070 	.word	0x40020070
 8003c80:	40020088 	.word	0x40020088
 8003c84:	400200a0 	.word	0x400200a0
 8003c88:	400200b8 	.word	0x400200b8
 8003c8c:	40020410 	.word	0x40020410
 8003c90:	40020428 	.word	0x40020428
 8003c94:	40020440 	.word	0x40020440
 8003c98:	40020458 	.word	0x40020458
 8003c9c:	40020470 	.word	0x40020470
 8003ca0:	40020488 	.word	0x40020488
 8003ca4:	400204a0 	.word	0x400204a0
 8003ca8:	400204b8 	.word	0x400204b8
 8003cac:	aaaaaaab 	.word	0xaaaaaaab
 8003cb0:	080098cc 	.word	0x080098cc
 8003cb4:	fffffc00 	.word	0xfffffc00

08003cb8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d120      	bne.n	8003d0e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d858      	bhi.n	8003d86 <DMA_CheckFifoParam+0xce>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <DMA_CheckFifoParam+0x24>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003cff 	.word	0x08003cff
 8003ce4:	08003ced 	.word	0x08003ced
 8003ce8:	08003d87 	.word	0x08003d87
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d048      	beq.n	8003d8a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cfc:	e045      	b.n	8003d8a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d06:	d142      	bne.n	8003d8e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d0c:	e03f      	b.n	8003d8e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d16:	d123      	bne.n	8003d60 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d838      	bhi.n	8003d92 <DMA_CheckFifoParam+0xda>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <DMA_CheckFifoParam+0x70>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003d3f 	.word	0x08003d3f
 8003d30:	08003d39 	.word	0x08003d39
 8003d34:	08003d51 	.word	0x08003d51
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
        break;
 8003d3c:	e030      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d025      	beq.n	8003d96 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d4e:	e022      	b.n	8003d96 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d58:	d11f      	bne.n	8003d9a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d5e:	e01c      	b.n	8003d9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d902      	bls.n	8003d6e <DMA_CheckFifoParam+0xb6>
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d003      	beq.n	8003d74 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d6c:	e018      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
        break;
 8003d72:	e015      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00e      	beq.n	8003d9e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
    break;
 8003d84:	e00b      	b.n	8003d9e <DMA_CheckFifoParam+0xe6>
        break;
 8003d86:	bf00      	nop
 8003d88:	e00a      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        break;
 8003d8a:	bf00      	nop
 8003d8c:	e008      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        break;
 8003d8e:	bf00      	nop
 8003d90:	e006      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        break;
 8003d92:	bf00      	nop
 8003d94:	e004      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
    break;
 8003d9e:	bf00      	nop
    }
  }

  return status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop

08003db0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a38      	ldr	r2, [pc, #224]	; (8003ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d022      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a36      	ldr	r2, [pc, #216]	; (8003ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01d      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a35      	ldr	r2, [pc, #212]	; (8003eac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d018      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a33      	ldr	r2, [pc, #204]	; (8003eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a32      	ldr	r2, [pc, #200]	; (8003eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00e      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a30      	ldr	r2, [pc, #192]	; (8003eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d009      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2f      	ldr	r2, [pc, #188]	; (8003ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d004      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2d      	ldr	r2, [pc, #180]	; (8003ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e12:	2300      	movs	r3, #0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01a      	beq.n	8003e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	3b08      	subs	r3, #8
 8003e20:	4a28      	ldr	r2, [pc, #160]	; (8003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	461a      	mov	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	2201      	movs	r2, #1
 8003e46:	409a      	lsls	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e4c:	e024      	b.n	8003e98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	3b10      	subs	r3, #16
 8003e56:	4a1e      	ldr	r2, [pc, #120]	; (8003ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d806      	bhi.n	8003e76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d902      	bls.n	8003e76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3308      	adds	r3, #8
 8003e74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4b18      	ldr	r3, [pc, #96]	; (8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2201      	movs	r2, #1
 8003e92:	409a      	lsls	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	58025408 	.word	0x58025408
 8003ea8:	5802541c 	.word	0x5802541c
 8003eac:	58025430 	.word	0x58025430
 8003eb0:	58025444 	.word	0x58025444
 8003eb4:	58025458 	.word	0x58025458
 8003eb8:	5802546c 	.word	0x5802546c
 8003ebc:	58025480 	.word	0x58025480
 8003ec0:	58025494 	.word	0x58025494
 8003ec4:	cccccccd 	.word	0xcccccccd
 8003ec8:	16009600 	.word	0x16009600
 8003ecc:	58025880 	.word	0x58025880
 8003ed0:	aaaaaaab 	.word	0xaaaaaaab
 8003ed4:	400204b8 	.word	0x400204b8
 8003ed8:	4002040f 	.word	0x4002040f
 8003edc:	10008200 	.word	0x10008200
 8003ee0:	40020880 	.word	0x40020880

08003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d04a      	beq.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d847      	bhi.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a25      	ldr	r2, [pc, #148]	; (8003f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d022      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d01d      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d018      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1f      	ldr	r2, [pc, #124]	; (8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00e      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d009      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d004      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	461a      	mov	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f6c:	671a      	str	r2, [r3, #112]	; 0x70
 8003f6e:	e009      	b.n	8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f82:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	2201      	movs	r2, #1
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	58025408 	.word	0x58025408
 8003fa0:	5802541c 	.word	0x5802541c
 8003fa4:	58025430 	.word	0x58025430
 8003fa8:	58025444 	.word	0x58025444
 8003fac:	58025458 	.word	0x58025458
 8003fb0:	5802546c 	.word	0x5802546c
 8003fb4:	58025480 	.word	0x58025480
 8003fb8:	58025494 	.word	0x58025494
 8003fbc:	1600963f 	.word	0x1600963f
 8003fc0:	58025940 	.word	0x58025940
 8003fc4:	1000823f 	.word	0x1000823f
 8003fc8:	40020940 	.word	0x40020940

08003fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	; 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003fda:	4b89      	ldr	r3, [pc, #548]	; (8004200 <HAL_GPIO_Init+0x234>)
 8003fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fde:	e194      	b.n	800430a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8186 	beq.w	8004304 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d005      	beq.n	8004010 <HAL_GPIO_Init+0x44>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d130      	bne.n	8004072 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	2203      	movs	r2, #3
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4313      	orrs	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004046:	2201      	movs	r2, #1
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	f003 0201 	and.w	r2, r3, #1
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4313      	orrs	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b03      	cmp	r3, #3
 800407c:	d017      	beq.n	80040ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	2203      	movs	r2, #3
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d123      	bne.n	8004102 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	08da      	lsrs	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3208      	adds	r2, #8
 80040c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	220f      	movs	r2, #15
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	08da      	lsrs	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3208      	adds	r2, #8
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	2203      	movs	r2, #3
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 0203 	and.w	r2, r3, #3
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80e0 	beq.w	8004304 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004144:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <HAL_GPIO_Init+0x238>)
 8004146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800414a:	4a2e      	ldr	r2, [pc, #184]	; (8004204 <HAL_GPIO_Init+0x238>)
 800414c:	f043 0302 	orr.w	r3, r3, #2
 8004150:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004154:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <HAL_GPIO_Init+0x238>)
 8004156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004162:	4a29      	ldr	r2, [pc, #164]	; (8004208 <HAL_GPIO_Init+0x23c>)
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	089b      	lsrs	r3, r3, #2
 8004168:	3302      	adds	r3, #2
 800416a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	220f      	movs	r2, #15
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4013      	ands	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a20      	ldr	r2, [pc, #128]	; (800420c <HAL_GPIO_Init+0x240>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d052      	beq.n	8004234 <HAL_GPIO_Init+0x268>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <HAL_GPIO_Init+0x244>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d031      	beq.n	80041fa <HAL_GPIO_Init+0x22e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <HAL_GPIO_Init+0x248>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02b      	beq.n	80041f6 <HAL_GPIO_Init+0x22a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <HAL_GPIO_Init+0x24c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d025      	beq.n	80041f2 <HAL_GPIO_Init+0x226>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1c      	ldr	r2, [pc, #112]	; (800421c <HAL_GPIO_Init+0x250>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <HAL_GPIO_Init+0x222>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <HAL_GPIO_Init+0x254>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d019      	beq.n	80041ea <HAL_GPIO_Init+0x21e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <HAL_GPIO_Init+0x258>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0x21a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a19      	ldr	r2, [pc, #100]	; (8004228 <HAL_GPIO_Init+0x25c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00d      	beq.n	80041e2 <HAL_GPIO_Init+0x216>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a18      	ldr	r2, [pc, #96]	; (800422c <HAL_GPIO_Init+0x260>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x212>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a17      	ldr	r2, [pc, #92]	; (8004230 <HAL_GPIO_Init+0x264>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_GPIO_Init+0x20e>
 80041d6:	2309      	movs	r3, #9
 80041d8:	e02d      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041da:	230a      	movs	r3, #10
 80041dc:	e02b      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041de:	2308      	movs	r3, #8
 80041e0:	e029      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041e2:	2307      	movs	r3, #7
 80041e4:	e027      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041e6:	2306      	movs	r3, #6
 80041e8:	e025      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041ea:	2305      	movs	r3, #5
 80041ec:	e023      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041ee:	2304      	movs	r3, #4
 80041f0:	e021      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041f2:	2303      	movs	r3, #3
 80041f4:	e01f      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e01d      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e01b      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041fe:	bf00      	nop
 8004200:	58000080 	.word	0x58000080
 8004204:	58024400 	.word	0x58024400
 8004208:	58000400 	.word	0x58000400
 800420c:	58020000 	.word	0x58020000
 8004210:	58020400 	.word	0x58020400
 8004214:	58020800 	.word	0x58020800
 8004218:	58020c00 	.word	0x58020c00
 800421c:	58021000 	.word	0x58021000
 8004220:	58021400 	.word	0x58021400
 8004224:	58021800 	.word	0x58021800
 8004228:	58021c00 	.word	0x58021c00
 800422c:	58022000 	.word	0x58022000
 8004230:	58022400 	.word	0x58022400
 8004234:	2300      	movs	r3, #0
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	f002 0203 	and.w	r2, r2, #3
 800423c:	0092      	lsls	r2, r2, #2
 800423e:	4093      	lsls	r3, r2
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004246:	4938      	ldr	r1, [pc, #224]	; (8004328 <HAL_GPIO_Init+0x35c>)
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	089b      	lsrs	r3, r3, #2
 800424c:	3302      	adds	r3, #2
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800427a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	43db      	mvns	r3, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4013      	ands	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	43db      	mvns	r3, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4013      	ands	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	3301      	adds	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	f47f ae63 	bne.w	8003fe0 <HAL_GPIO_Init+0x14>
  }
}
 800431a:	bf00      	nop
 800431c:	bf00      	nop
 800431e:	3724      	adds	r7, #36	; 0x24
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	58000400 	.word	0x58000400

0800432c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004334:	4b19      	ldr	r3, [pc, #100]	; (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b04      	cmp	r3, #4
 800433e:	d00a      	beq.n	8004356 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004340:	4b16      	ldr	r3, [pc, #88]	; (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d001      	beq.n	8004352 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e01f      	b.n	8004392 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e01d      	b.n	8004392 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f023 0207 	bic.w	r2, r3, #7
 800435e:	490f      	ldr	r1, [pc, #60]	; (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4313      	orrs	r3, r2
 8004364:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004366:	f7fc fea9 	bl	80010bc <HAL_GetTick>
 800436a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800436c:	e009      	b.n	8004382 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800436e:	f7fc fea5 	bl	80010bc <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800437c:	d901      	bls.n	8004382 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e007      	b.n	8004392 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438e:	d1ee      	bne.n	800436e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	58024800 	.word	0x58024800

080043a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08c      	sub	sp, #48	; 0x30
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	f000 bc48 	b.w	8004c44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8088 	beq.w	80044d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c2:	4b99      	ldr	r3, [pc, #612]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043cc:	4b96      	ldr	r3, [pc, #600]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d007      	beq.n	80043e8 <HAL_RCC_OscConfig+0x48>
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	2b18      	cmp	r3, #24
 80043dc:	d111      	bne.n	8004402 <HAL_RCC_OscConfig+0x62>
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d10c      	bne.n	8004402 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	4b8f      	ldr	r3, [pc, #572]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d06d      	beq.n	80044d0 <HAL_RCC_OscConfig+0x130>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d169      	bne.n	80044d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f000 bc21 	b.w	8004c44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440a:	d106      	bne.n	800441a <HAL_RCC_OscConfig+0x7a>
 800440c:	4b86      	ldr	r3, [pc, #536]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a85      	ldr	r2, [pc, #532]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e02e      	b.n	8004478 <HAL_RCC_OscConfig+0xd8>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_RCC_OscConfig+0x9c>
 8004422:	4b81      	ldr	r3, [pc, #516]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a80      	ldr	r2, [pc, #512]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b7e      	ldr	r3, [pc, #504]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7d      	ldr	r2, [pc, #500]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e01d      	b.n	8004478 <HAL_RCC_OscConfig+0xd8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004444:	d10c      	bne.n	8004460 <HAL_RCC_OscConfig+0xc0>
 8004446:	4b78      	ldr	r3, [pc, #480]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a77      	ldr	r2, [pc, #476]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800444c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	4b75      	ldr	r3, [pc, #468]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a74      	ldr	r2, [pc, #464]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e00b      	b.n	8004478 <HAL_RCC_OscConfig+0xd8>
 8004460:	4b71      	ldr	r3, [pc, #452]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a70      	ldr	r2, [pc, #448]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b6e      	ldr	r3, [pc, #440]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a6d      	ldr	r2, [pc, #436]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d013      	beq.n	80044a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fc fe1c 	bl	80010bc <HAL_GetTick>
 8004484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004488:	f7fc fe18 	bl	80010bc <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	; 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e3d4      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800449a:	4b63      	ldr	r3, [pc, #396]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0xe8>
 80044a6:	e014      	b.n	80044d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fc fe08 	bl	80010bc <HAL_GetTick>
 80044ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fc fe04 	bl	80010bc <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e3c0      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044c2:	4b59      	ldr	r3, [pc, #356]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x110>
 80044ce:	e000      	b.n	80044d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 80ca 	beq.w	8004674 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044e0:	4b51      	ldr	r3, [pc, #324]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044ea:	4b4f      	ldr	r3, [pc, #316]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <HAL_RCC_OscConfig+0x166>
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	2b18      	cmp	r3, #24
 80044fa:	d156      	bne.n	80045aa <HAL_RCC_OscConfig+0x20a>
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d151      	bne.n	80045aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004506:	4b48      	ldr	r3, [pc, #288]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_RCC_OscConfig+0x17e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e392      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800451e:	4b42      	ldr	r3, [pc, #264]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 0219 	bic.w	r2, r3, #25
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	493f      	ldr	r1, [pc, #252]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800452c:	4313      	orrs	r3, r2
 800452e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fc fdc4 	bl	80010bc <HAL_GetTick>
 8004534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004538:	f7fc fdc0 	bl	80010bc <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e37c      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800454a:	4b37      	ldr	r3, [pc, #220]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004556:	f7fc fde1 	bl	800111c <HAL_GetREVID>
 800455a:	4603      	mov	r3, r0
 800455c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004560:	4293      	cmp	r3, r2
 8004562:	d817      	bhi.n	8004594 <HAL_RCC_OscConfig+0x1f4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d108      	bne.n	800457e <HAL_RCC_OscConfig+0x1de>
 800456c:	4b2e      	ldr	r3, [pc, #184]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004574:	4a2c      	ldr	r2, [pc, #176]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800457c:	e07a      	b.n	8004674 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b2a      	ldr	r3, [pc, #168]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	031b      	lsls	r3, r3, #12
 800458c:	4926      	ldr	r1, [pc, #152]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800458e:	4313      	orrs	r3, r2
 8004590:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004592:	e06f      	b.n	8004674 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004594:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	4921      	ldr	r1, [pc, #132]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a8:	e064      	b.n	8004674 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d047      	beq.n	8004642 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045b2:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 0219 	bic.w	r2, r3, #25
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	491a      	ldr	r1, [pc, #104]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fc fd7a 	bl	80010bc <HAL_GetTick>
 80045c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fc fd76 	bl	80010bc <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e332      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ea:	f7fc fd97 	bl	800111c <HAL_GetREVID>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d819      	bhi.n	800462c <HAL_RCC_OscConfig+0x28c>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b40      	cmp	r3, #64	; 0x40
 80045fe:	d108      	bne.n	8004612 <HAL_RCC_OscConfig+0x272>
 8004600:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004608:	4a07      	ldr	r2, [pc, #28]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800460a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460e:	6053      	str	r3, [r2, #4]
 8004610:	e030      	b.n	8004674 <HAL_RCC_OscConfig+0x2d4>
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	031b      	lsls	r3, r3, #12
 8004620:	4901      	ldr	r1, [pc, #4]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004622:	4313      	orrs	r3, r2
 8004624:	604b      	str	r3, [r1, #4]
 8004626:	e025      	b.n	8004674 <HAL_RCC_OscConfig+0x2d4>
 8004628:	58024400 	.word	0x58024400
 800462c:	4b9a      	ldr	r3, [pc, #616]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	4997      	ldr	r1, [pc, #604]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
 8004640:	e018      	b.n	8004674 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004642:	4b95      	ldr	r3, [pc, #596]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a94      	ldr	r2, [pc, #592]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fc fd35 	bl	80010bc <HAL_GetTick>
 8004652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004656:	f7fc fd31 	bl	80010bc <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e2ed      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004668:	4b8b      	ldr	r3, [pc, #556]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80a9 	beq.w	80047d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004682:	4b85      	ldr	r3, [pc, #532]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800468a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800468c:	4b82      	ldr	r3, [pc, #520]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b08      	cmp	r3, #8
 8004696:	d007      	beq.n	80046a8 <HAL_RCC_OscConfig+0x308>
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b18      	cmp	r3, #24
 800469c:	d13a      	bne.n	8004714 <HAL_RCC_OscConfig+0x374>
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d135      	bne.n	8004714 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046a8:	4b7b      	ldr	r3, [pc, #492]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_OscConfig+0x320>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	2b80      	cmp	r3, #128	; 0x80
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e2c1      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046c0:	f7fc fd2c 	bl	800111c <HAL_GetREVID>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d817      	bhi.n	80046fe <HAL_RCC_OscConfig+0x35e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d108      	bne.n	80046e8 <HAL_RCC_OscConfig+0x348>
 80046d6:	4b70      	ldr	r3, [pc, #448]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80046de:	4a6e      	ldr	r2, [pc, #440]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 80046e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046e6:	e075      	b.n	80047d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046e8:	4b6b      	ldr	r3, [pc, #428]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	069b      	lsls	r3, r3, #26
 80046f6:	4968      	ldr	r1, [pc, #416]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046fc:	e06a      	b.n	80047d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046fe:	4b66      	ldr	r3, [pc, #408]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	061b      	lsls	r3, r3, #24
 800470c:	4962      	ldr	r1, [pc, #392]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 800470e:	4313      	orrs	r3, r2
 8004710:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004712:	e05f      	b.n	80047d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d042      	beq.n	80047a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800471c:	4b5e      	ldr	r3, [pc, #376]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a5d      	ldr	r2, [pc, #372]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fc fcc8 	bl	80010bc <HAL_GetTick>
 800472c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004730:	f7fc fcc4 	bl	80010bc <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e280      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004742:	4b55      	ldr	r3, [pc, #340]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800474e:	f7fc fce5 	bl	800111c <HAL_GetREVID>
 8004752:	4603      	mov	r3, r0
 8004754:	f241 0203 	movw	r2, #4099	; 0x1003
 8004758:	4293      	cmp	r3, r2
 800475a:	d817      	bhi.n	800478c <HAL_RCC_OscConfig+0x3ec>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	2b20      	cmp	r3, #32
 8004762:	d108      	bne.n	8004776 <HAL_RCC_OscConfig+0x3d6>
 8004764:	4b4c      	ldr	r3, [pc, #304]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800476c:	4a4a      	ldr	r2, [pc, #296]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 800476e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004772:	6053      	str	r3, [r2, #4]
 8004774:	e02e      	b.n	80047d4 <HAL_RCC_OscConfig+0x434>
 8004776:	4b48      	ldr	r3, [pc, #288]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	069b      	lsls	r3, r3, #26
 8004784:	4944      	ldr	r1, [pc, #272]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004786:	4313      	orrs	r3, r2
 8004788:	604b      	str	r3, [r1, #4]
 800478a:	e023      	b.n	80047d4 <HAL_RCC_OscConfig+0x434>
 800478c:	4b42      	ldr	r3, [pc, #264]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	493f      	ldr	r1, [pc, #252]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	60cb      	str	r3, [r1, #12]
 80047a0:	e018      	b.n	80047d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047a2:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a3c      	ldr	r2, [pc, #240]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 80047a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fc fc85 	bl	80010bc <HAL_GetTick>
 80047b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047b6:	f7fc fc81 	bl	80010bc <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e23d      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047c8:	4b33      	ldr	r3, [pc, #204]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d036      	beq.n	800484e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d019      	beq.n	800481c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e8:	4b2b      	ldr	r3, [pc, #172]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 80047ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ec:	4a2a      	ldr	r2, [pc, #168]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fc fc62 	bl	80010bc <HAL_GetTick>
 80047f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047fc:	f7fc fc5e 	bl	80010bc <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e21a      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800480e:	4b22      	ldr	r3, [pc, #136]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x45c>
 800481a:	e018      	b.n	800484e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800481c:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 800481e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004820:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004822:	f023 0301 	bic.w	r3, r3, #1
 8004826:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004828:	f7fc fc48 	bl	80010bc <HAL_GetTick>
 800482c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004830:	f7fc fc44 	bl	80010bc <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e200      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004842:	4b15      	ldr	r3, [pc, #84]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d039      	beq.n	80048ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01c      	beq.n	800489c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004862:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a0c      	ldr	r2, [pc, #48]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 8004868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800486c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800486e:	f7fc fc25 	bl	80010bc <HAL_GetTick>
 8004872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004876:	f7fc fc21 	bl	80010bc <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e1dd      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCC_OscConfig+0x4f8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x4d6>
 8004894:	e01b      	b.n	80048ce <HAL_RCC_OscConfig+0x52e>
 8004896:	bf00      	nop
 8004898:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800489c:	4b9b      	ldr	r3, [pc, #620]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a9a      	ldr	r2, [pc, #616]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 80048a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048a8:	f7fc fc08 	bl	80010bc <HAL_GetTick>
 80048ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b0:	f7fc fc04 	bl	80010bc <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1c0      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048c2:	4b92      	ldr	r3, [pc, #584]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8081 	beq.w	80049de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048dc:	4b8c      	ldr	r3, [pc, #560]	; (8004b10 <HAL_RCC_OscConfig+0x770>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a8b      	ldr	r2, [pc, #556]	; (8004b10 <HAL_RCC_OscConfig+0x770>)
 80048e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048e8:	f7fc fbe8 	bl	80010bc <HAL_GetTick>
 80048ec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f0:	f7fc fbe4 	bl	80010bc <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e1a0      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004902:	4b83      	ldr	r3, [pc, #524]	; (8004b10 <HAL_RCC_OscConfig+0x770>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d106      	bne.n	8004924 <HAL_RCC_OscConfig+0x584>
 8004916:	4b7d      	ldr	r3, [pc, #500]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	4a7c      	ldr	r2, [pc, #496]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6713      	str	r3, [r2, #112]	; 0x70
 8004922:	e02d      	b.n	8004980 <HAL_RCC_OscConfig+0x5e0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10c      	bne.n	8004946 <HAL_RCC_OscConfig+0x5a6>
 800492c:	4b77      	ldr	r3, [pc, #476]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004930:	4a76      	ldr	r2, [pc, #472]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	6713      	str	r3, [r2, #112]	; 0x70
 8004938:	4b74      	ldr	r3, [pc, #464]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493c:	4a73      	ldr	r2, [pc, #460]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 800493e:	f023 0304 	bic.w	r3, r3, #4
 8004942:	6713      	str	r3, [r2, #112]	; 0x70
 8004944:	e01c      	b.n	8004980 <HAL_RCC_OscConfig+0x5e0>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b05      	cmp	r3, #5
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0x5c8>
 800494e:	4b6f      	ldr	r3, [pc, #444]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	4a6e      	ldr	r2, [pc, #440]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004954:	f043 0304 	orr.w	r3, r3, #4
 8004958:	6713      	str	r3, [r2, #112]	; 0x70
 800495a:	4b6c      	ldr	r3, [pc, #432]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	4a6b      	ldr	r2, [pc, #428]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	6713      	str	r3, [r2, #112]	; 0x70
 8004966:	e00b      	b.n	8004980 <HAL_RCC_OscConfig+0x5e0>
 8004968:	4b68      	ldr	r3, [pc, #416]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a67      	ldr	r2, [pc, #412]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
 8004974:	4b65      	ldr	r3, [pc, #404]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	4a64      	ldr	r2, [pc, #400]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 800497a:	f023 0304 	bic.w	r3, r3, #4
 800497e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7fc fb98 	bl	80010bc <HAL_GetTick>
 800498c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004990:	f7fc fb94 	bl	80010bc <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	; 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e14e      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049a6:	4b59      	ldr	r3, [pc, #356]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0ee      	beq.n	8004990 <HAL_RCC_OscConfig+0x5f0>
 80049b2:	e014      	b.n	80049de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fc fb82 	bl	80010bc <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049bc:	f7fc fb7e 	bl	80010bc <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e138      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049d2:	4b4e      	ldr	r3, [pc, #312]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1ee      	bne.n	80049bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 812d 	beq.w	8004c42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80049e8:	4b48      	ldr	r3, [pc, #288]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f0:	2b18      	cmp	r3, #24
 80049f2:	f000 80bd 	beq.w	8004b70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	f040 809e 	bne.w	8004b3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a00:	4b42      	ldr	r3, [pc, #264]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a41      	ldr	r2, [pc, #260]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fc fb56 	bl	80010bc <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fc fb52 	bl	80010bc <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e10e      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a26:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a32:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a36:	4b37      	ldr	r3, [pc, #220]	; (8004b14 <HAL_RCC_OscConfig+0x774>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a42:	0112      	lsls	r2, r2, #4
 8004a44:	430a      	orrs	r2, r1
 8004a46:	4931      	ldr	r1, [pc, #196]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	3b01      	subs	r3, #1
 8004a52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	025b      	lsls	r3, r3, #9
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	3b01      	subs	r3, #1
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a74:	3b01      	subs	r3, #1
 8004a76:	061b      	lsls	r3, r3, #24
 8004a78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a7c:	4923      	ldr	r1, [pc, #140]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a82:	4b22      	ldr	r3, [pc, #136]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	4a21      	ldr	r2, [pc, #132]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a8e:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a92:	4b21      	ldr	r3, [pc, #132]	; (8004b18 <HAL_RCC_OscConfig+0x778>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a9a:	00d2      	lsls	r2, r2, #3
 8004a9c:	491b      	ldr	r1, [pc, #108]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004aa2:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	f023 020c 	bic.w	r2, r3, #12
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4917      	ldr	r1, [pc, #92]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ab4:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	f023 0202 	bic.w	r2, r3, #2
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	4912      	ldr	r1, [pc, #72]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ac6:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad2:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	4a0d      	ldr	r2, [pc, #52]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004aea:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004af6:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a04      	ldr	r2, [pc, #16]	; (8004b0c <HAL_RCC_OscConfig+0x76c>)
 8004afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b02:	f7fc fadb 	bl	80010bc <HAL_GetTick>
 8004b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b08:	e011      	b.n	8004b2e <HAL_RCC_OscConfig+0x78e>
 8004b0a:	bf00      	nop
 8004b0c:	58024400 	.word	0x58024400
 8004b10:	58024800 	.word	0x58024800
 8004b14:	fffffc0c 	.word	0xfffffc0c
 8004b18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fc face 	bl	80010bc <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e08a      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b2e:	4b47      	ldr	r3, [pc, #284]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0x77c>
 8004b3a:	e082      	b.n	8004c42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3c:	4b43      	ldr	r3, [pc, #268]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a42      	ldr	r2, [pc, #264]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fc fab8 	bl	80010bc <HAL_GetTick>
 8004b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fc fab4 	bl	80010bc <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e070      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b62:	4b3a      	ldr	r3, [pc, #232]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x7b0>
 8004b6e:	e068      	b.n	8004c42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b70:	4b36      	ldr	r3, [pc, #216]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b76:	4b35      	ldr	r3, [pc, #212]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d031      	beq.n	8004be8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f003 0203 	and.w	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d12a      	bne.n	8004be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d122      	bne.n	8004be8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d11a      	bne.n	8004be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	0a5b      	lsrs	r3, r3, #9
 8004bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d111      	bne.n	8004be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	0c1b      	lsrs	r3, r3, #16
 8004bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d108      	bne.n	8004be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	0e1b      	lsrs	r3, r3, #24
 8004bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e02b      	b.n	8004c44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004bec:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf0:	08db      	lsrs	r3, r3, #3
 8004bf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bf6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d01f      	beq.n	8004c42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	4a11      	ldr	r2, [pc, #68]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c0e:	f7fc fa55 	bl	80010bc <HAL_GetTick>
 8004c12:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c14:	bf00      	nop
 8004c16:	f7fc fa51 	bl	80010bc <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d0f9      	beq.n	8004c16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c22:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <HAL_RCC_OscConfig+0x8b0>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c2e:	00d2      	lsls	r2, r2, #3
 8004c30:	4906      	ldr	r1, [pc, #24]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	4a04      	ldr	r2, [pc, #16]	; (8004c4c <HAL_RCC_OscConfig+0x8ac>)
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3730      	adds	r7, #48	; 0x30
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	58024400 	.word	0x58024400
 8004c50:	ffff0007 	.word	0xffff0007

08004c54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e19c      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c68:	4b8a      	ldr	r3, [pc, #552]	; (8004e94 <HAL_RCC_ClockConfig+0x240>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d910      	bls.n	8004c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c76:	4b87      	ldr	r3, [pc, #540]	; (8004e94 <HAL_RCC_ClockConfig+0x240>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 020f 	bic.w	r2, r3, #15
 8004c7e:	4985      	ldr	r1, [pc, #532]	; (8004e94 <HAL_RCC_ClockConfig+0x240>)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c86:	4b83      	ldr	r3, [pc, #524]	; (8004e94 <HAL_RCC_ClockConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d001      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e184      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d010      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	4b7b      	ldr	r3, [pc, #492]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d908      	bls.n	8004cc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cb4:	4b78      	ldr	r3, [pc, #480]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	4975      	ldr	r1, [pc, #468]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d010      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695a      	ldr	r2, [r3, #20]
 8004cd6:	4b70      	ldr	r3, [pc, #448]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d908      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ce2:	4b6d      	ldr	r3, [pc, #436]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	496a      	ldr	r1, [pc, #424]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d010      	beq.n	8004d22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699a      	ldr	r2, [r3, #24]
 8004d04:	4b64      	ldr	r3, [pc, #400]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d908      	bls.n	8004d22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d10:	4b61      	ldr	r3, [pc, #388]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	495e      	ldr	r1, [pc, #376]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69da      	ldr	r2, [r3, #28]
 8004d32:	4b59      	ldr	r3, [pc, #356]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d908      	bls.n	8004d50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d3e:	4b56      	ldr	r3, [pc, #344]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	4953      	ldr	r1, [pc, #332]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d010      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	4b4d      	ldr	r3, [pc, #308]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d908      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d6c:	4b4a      	ldr	r3, [pc, #296]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	f023 020f 	bic.w	r2, r3, #15
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4947      	ldr	r1, [pc, #284]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d055      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d8a:	4b43      	ldr	r3, [pc, #268]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	4940      	ldr	r1, [pc, #256]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d107      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004da4:	4b3c      	ldr	r3, [pc, #240]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d121      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0f6      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d107      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dbc:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d115      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0ea      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d107      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dd4:	4b30      	ldr	r3, [pc, #192]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d109      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0de      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004de4:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0d6      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004df4:	4b28      	ldr	r3, [pc, #160]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f023 0207 	bic.w	r2, r3, #7
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4925      	ldr	r1, [pc, #148]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e06:	f7fc f959 	bl	80010bc <HAL_GetTick>
 8004e0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e0e:	f7fc f955 	bl	80010bc <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0be      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e24:	4b1c      	ldr	r3, [pc, #112]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d1eb      	bne.n	8004e0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d010      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d208      	bcs.n	8004e64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f023 020f 	bic.w	r2, r3, #15
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	490e      	ldr	r1, [pc, #56]	; (8004e98 <HAL_RCC_ClockConfig+0x244>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_RCC_ClockConfig+0x240>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d214      	bcs.n	8004e9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <HAL_RCC_ClockConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 020f 	bic.w	r2, r3, #15
 8004e7a:	4906      	ldr	r1, [pc, #24]	; (8004e94 <HAL_RCC_ClockConfig+0x240>)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <HAL_RCC_ClockConfig+0x240>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e086      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x34e>
 8004e94:	52002000 	.word	0x52002000
 8004e98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d010      	beq.n	8004eca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	4b3f      	ldr	r3, [pc, #252]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d208      	bcs.n	8004eca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004eb8:	4b3c      	ldr	r3, [pc, #240]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	4939      	ldr	r1, [pc, #228]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d010      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695a      	ldr	r2, [r3, #20]
 8004eda:	4b34      	ldr	r3, [pc, #208]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d208      	bcs.n	8004ef8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ee6:	4b31      	ldr	r3, [pc, #196]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	492e      	ldr	r1, [pc, #184]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	4b28      	ldr	r3, [pc, #160]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d208      	bcs.n	8004f26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	4922      	ldr	r1, [pc, #136]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d010      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69da      	ldr	r2, [r3, #28]
 8004f36:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d208      	bcs.n	8004f54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f42:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	4917      	ldr	r1, [pc, #92]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f54:	f000 f834 	bl	8004fc0 <HAL_RCC_GetSysClockFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b14      	ldr	r3, [pc, #80]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	4912      	ldr	r1, [pc, #72]	; (8004fb0 <HAL_RCC_ClockConfig+0x35c>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f72:	4b0e      	ldr	r3, [pc, #56]	; (8004fac <HAL_RCC_ClockConfig+0x358>)
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	4a0d      	ldr	r2, [pc, #52]	; (8004fb0 <HAL_RCC_ClockConfig+0x35c>)
 8004f7c:	5cd3      	ldrb	r3, [r2, r3]
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
 8004f88:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <HAL_RCC_ClockConfig+0x360>)
 8004f8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f8c:	4a0a      	ldr	r2, [pc, #40]	; (8004fb8 <HAL_RCC_ClockConfig+0x364>)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <HAL_RCC_ClockConfig+0x368>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fc f846 	bl	8001028 <HAL_InitTick>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	080098bc 	.word	0x080098bc
 8004fb4:	24000004 	.word	0x24000004
 8004fb8:	24000000 	.word	0x24000000
 8004fbc:	24000008 	.word	0x24000008

08004fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	; 0x24
 8004fc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fc6:	4bb3      	ldr	r3, [pc, #716]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fce:	2b18      	cmp	r3, #24
 8004fd0:	f200 8155 	bhi.w	800527e <HAL_RCC_GetSysClockFreq+0x2be>
 8004fd4:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08005041 	.word	0x08005041
 8004fe0:	0800527f 	.word	0x0800527f
 8004fe4:	0800527f 	.word	0x0800527f
 8004fe8:	0800527f 	.word	0x0800527f
 8004fec:	0800527f 	.word	0x0800527f
 8004ff0:	0800527f 	.word	0x0800527f
 8004ff4:	0800527f 	.word	0x0800527f
 8004ff8:	0800527f 	.word	0x0800527f
 8004ffc:	08005067 	.word	0x08005067
 8005000:	0800527f 	.word	0x0800527f
 8005004:	0800527f 	.word	0x0800527f
 8005008:	0800527f 	.word	0x0800527f
 800500c:	0800527f 	.word	0x0800527f
 8005010:	0800527f 	.word	0x0800527f
 8005014:	0800527f 	.word	0x0800527f
 8005018:	0800527f 	.word	0x0800527f
 800501c:	0800506d 	.word	0x0800506d
 8005020:	0800527f 	.word	0x0800527f
 8005024:	0800527f 	.word	0x0800527f
 8005028:	0800527f 	.word	0x0800527f
 800502c:	0800527f 	.word	0x0800527f
 8005030:	0800527f 	.word	0x0800527f
 8005034:	0800527f 	.word	0x0800527f
 8005038:	0800527f 	.word	0x0800527f
 800503c:	08005073 	.word	0x08005073
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005040:	4b94      	ldr	r3, [pc, #592]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d009      	beq.n	8005060 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800504c:	4b91      	ldr	r3, [pc, #580]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	08db      	lsrs	r3, r3, #3
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	4a90      	ldr	r2, [pc, #576]	; (8005298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
 800505c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800505e:	e111      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005060:	4b8d      	ldr	r3, [pc, #564]	; (8005298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005062:	61bb      	str	r3, [r7, #24]
      break;
 8005064:	e10e      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005066:	4b8d      	ldr	r3, [pc, #564]	; (800529c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005068:	61bb      	str	r3, [r7, #24]
      break;
 800506a:	e10b      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800506c:	4b8c      	ldr	r3, [pc, #560]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800506e:	61bb      	str	r3, [r7, #24]
      break;
 8005070:	e108      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005072:	4b88      	ldr	r3, [pc, #544]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800507c:	4b85      	ldr	r3, [pc, #532]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005086:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005088:	4b82      	ldr	r3, [pc, #520]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005092:	4b80      	ldr	r3, [pc, #512]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	08db      	lsrs	r3, r3, #3
 8005098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80e1 	beq.w	8005278 <HAL_RCC_GetSysClockFreq+0x2b8>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	f000 8083 	beq.w	80051c4 <HAL_RCC_GetSysClockFreq+0x204>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	f200 80a1 	bhi.w	8005208 <HAL_RCC_GetSysClockFreq+0x248>
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_RCC_GetSysClockFreq+0x114>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d056      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x1c0>
 80050d2:	e099      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d4:	4b6f      	ldr	r3, [pc, #444]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d02d      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050e0:	4b6c      	ldr	r3, [pc, #432]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	08db      	lsrs	r3, r3, #3
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	4a6b      	ldr	r2, [pc, #428]	; (8005298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
 80050f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	ee07 3a90 	vmov	s15, r3
 80050f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510a:	4b62      	ldr	r3, [pc, #392]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511a:	ed97 6a02 	vldr	s12, [r7, #8]
 800511e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80052a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800512e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005136:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800513a:	e087      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005146:	eddf 6a58 	vldr	s13, [pc, #352]	; 80052a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800514a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514e:	4b51      	ldr	r3, [pc, #324]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005162:	eddf 5a50 	vldr	s11, [pc, #320]	; 80052a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800517e:	e065      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80052ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800518e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005192:	4b40      	ldr	r3, [pc, #256]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80052a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051c2:	e043      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80052b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80051d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d6:	4b2f      	ldr	r3, [pc, #188]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80052a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005206:	e021      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	eddf 6a26 	vldr	s13, [pc, #152]	; 80052ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521a:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522a:	ed97 6a02 	vldr	s12, [r7, #8]
 800522e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800523e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800524a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800524c:	4b11      	ldr	r3, [pc, #68]	; (8005294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	0a5b      	lsrs	r3, r3, #9
 8005252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005256:	3301      	adds	r3, #1
 8005258:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	ee07 3a90 	vmov	s15, r3
 8005260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005264:	edd7 6a07 	vldr	s13, [r7, #28]
 8005268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005270:	ee17 3a90 	vmov	r3, s15
 8005274:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005276:	e005      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	61bb      	str	r3, [r7, #24]
      break;
 800527c:	e002      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005280:	61bb      	str	r3, [r7, #24]
      break;
 8005282:	bf00      	nop
  }

  return sysclockfreq;
 8005284:	69bb      	ldr	r3, [r7, #24]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3724      	adds	r7, #36	; 0x24
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	58024400 	.word	0x58024400
 8005298:	03d09000 	.word	0x03d09000
 800529c:	003d0900 	.word	0x003d0900
 80052a0:	017d7840 	.word	0x017d7840
 80052a4:	46000000 	.word	0x46000000
 80052a8:	4c742400 	.word	0x4c742400
 80052ac:	4a742400 	.word	0x4a742400
 80052b0:	4bbebc20 	.word	0x4bbebc20

080052b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80052ba:	f7ff fe81 	bl	8004fc0 <HAL_RCC_GetSysClockFreq>
 80052be:	4602      	mov	r2, r0
 80052c0:	4b10      	ldr	r3, [pc, #64]	; (8005304 <HAL_RCC_GetHCLKFreq+0x50>)
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	0a1b      	lsrs	r3, r3, #8
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	490f      	ldr	r1, [pc, #60]	; (8005308 <HAL_RCC_GetHCLKFreq+0x54>)
 80052cc:	5ccb      	ldrb	r3, [r1, r3]
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	fa22 f303 	lsr.w	r3, r2, r3
 80052d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <HAL_RCC_GetHCLKFreq+0x50>)
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	4a09      	ldr	r2, [pc, #36]	; (8005308 <HAL_RCC_GetHCLKFreq+0x54>)
 80052e2:	5cd3      	ldrb	r3, [r2, r3]
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	fa22 f303 	lsr.w	r3, r2, r3
 80052ee:	4a07      	ldr	r2, [pc, #28]	; (800530c <HAL_RCC_GetHCLKFreq+0x58>)
 80052f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052f2:	4a07      	ldr	r2, [pc, #28]	; (8005310 <HAL_RCC_GetHCLKFreq+0x5c>)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80052f8:	4b04      	ldr	r3, [pc, #16]	; (800530c <HAL_RCC_GetHCLKFreq+0x58>)
 80052fa:	681b      	ldr	r3, [r3, #0]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	58024400 	.word	0x58024400
 8005308:	080098bc 	.word	0x080098bc
 800530c:	24000004 	.word	0x24000004
 8005310:	24000000 	.word	0x24000000

08005314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005318:	f7ff ffcc 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4904      	ldr	r1, [pc, #16]	; (800533c <HAL_RCC_GetPCLK1Freq+0x28>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005334:	4618      	mov	r0, r3
 8005336:	bd80      	pop	{r7, pc}
 8005338:	58024400 	.word	0x58024400
 800533c:	080098bc 	.word	0x080098bc

08005340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005344:	f7ff ffb6 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 8005348:	4602      	mov	r2, r0
 800534a:	4b06      	ldr	r3, [pc, #24]	; (8005364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	4904      	ldr	r1, [pc, #16]	; (8005368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005356:	5ccb      	ldrb	r3, [r1, r3]
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005360:	4618      	mov	r0, r3
 8005362:	bd80      	pop	{r7, pc}
 8005364:	58024400 	.word	0x58024400
 8005368:	080098bc 	.word	0x080098bc

0800536c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800536c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005370:	b0ca      	sub	sp, #296	; 0x128
 8005372:	af00      	add	r7, sp, #0
 8005374:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005378:	2300      	movs	r3, #0
 800537a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800537e:	2300      	movs	r3, #0
 8005380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005390:	2500      	movs	r5, #0
 8005392:	ea54 0305 	orrs.w	r3, r4, r5
 8005396:	d049      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800539e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053a2:	d02f      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80053a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053a8:	d828      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ae:	d01a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053b4:	d822      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80053ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053be:	d007      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053c0:	e01c      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053c2:	4bb8      	ldr	r3, [pc, #736]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	4ab7      	ldr	r2, [pc, #732]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053ce:	e01a      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d4:	3308      	adds	r3, #8
 80053d6:	2102      	movs	r1, #2
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 fc8f 	bl	8006cfc <RCCEx_PLL2_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053e4:	e00f      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ea:	3328      	adds	r3, #40	; 0x28
 80053ec:	2102      	movs	r1, #2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 fd36 	bl	8006e60 <RCCEx_PLL3_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053fa:	e004      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005402:	e000      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800540e:	4ba5      	ldr	r3, [pc, #660]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005412:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800541c:	4aa1      	ldr	r2, [pc, #644]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800541e:	430b      	orrs	r3, r1
 8005420:	6513      	str	r3, [r2, #80]	; 0x50
 8005422:	e003      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005428:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005438:	f04f 0900 	mov.w	r9, #0
 800543c:	ea58 0309 	orrs.w	r3, r8, r9
 8005440:	d047      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005448:	2b04      	cmp	r3, #4
 800544a:	d82a      	bhi.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800544c:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	08005469 	.word	0x08005469
 8005458:	08005477 	.word	0x08005477
 800545c:	0800548d 	.word	0x0800548d
 8005460:	080054ab 	.word	0x080054ab
 8005464:	080054ab 	.word	0x080054ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005468:	4b8e      	ldr	r3, [pc, #568]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	4a8d      	ldr	r2, [pc, #564]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800546e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005474:	e01a      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	3308      	adds	r3, #8
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f001 fc3c 	bl	8006cfc <RCCEx_PLL2_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800548a:	e00f      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005490:	3328      	adds	r3, #40	; 0x28
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f001 fce3 	bl	8006e60 <RCCEx_PLL3_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054a0:	e004      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054a8:	e000      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80054aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054b4:	4b7b      	ldr	r3, [pc, #492]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b8:	f023 0107 	bic.w	r1, r3, #7
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c2:	4a78      	ldr	r2, [pc, #480]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6513      	str	r3, [r2, #80]	; 0x50
 80054c8:	e003      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80054de:	f04f 0b00 	mov.w	fp, #0
 80054e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80054e6:	d04c      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80054e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f2:	d030      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80054f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f8:	d829      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054fa:	2bc0      	cmp	r3, #192	; 0xc0
 80054fc:	d02d      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80054fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005500:	d825      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005502:	2b80      	cmp	r3, #128	; 0x80
 8005504:	d018      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d821      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800550e:	2b40      	cmp	r3, #64	; 0x40
 8005510:	d007      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005512:	e01c      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005514:	4b63      	ldr	r3, [pc, #396]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4a62      	ldr	r2, [pc, #392]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800551a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800551e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005520:	e01c      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005526:	3308      	adds	r3, #8
 8005528:	2100      	movs	r1, #0
 800552a:	4618      	mov	r0, r3
 800552c:	f001 fbe6 	bl	8006cfc <RCCEx_PLL2_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005536:	e011      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553c:	3328      	adds	r3, #40	; 0x28
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f001 fc8d 	bl	8006e60 <RCCEx_PLL3_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005554:	e002      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800555a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005564:	4b4f      	ldr	r3, [pc, #316]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005568:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005572:	4a4c      	ldr	r2, [pc, #304]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005574:	430b      	orrs	r3, r1
 8005576:	6513      	str	r3, [r2, #80]	; 0x50
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800557e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800558e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005592:	2300      	movs	r3, #0
 8005594:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005598:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800559c:	460b      	mov	r3, r1
 800559e:	4313      	orrs	r3, r2
 80055a0:	d053      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ae:	d035      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80055b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055b4:	d82e      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055ba:	d031      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80055bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055c0:	d828      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c6:	d01a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80055c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055cc:	d822      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80055d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055d6:	d007      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80055d8:	e01c      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055da:	4b32      	ldr	r3, [pc, #200]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	4a31      	ldr	r2, [pc, #196]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055e6:	e01c      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ec:	3308      	adds	r3, #8
 80055ee:	2100      	movs	r1, #0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 fb83 	bl	8006cfc <RCCEx_PLL2_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80055fc:	e011      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005602:	3328      	adds	r3, #40	; 0x28
 8005604:	2100      	movs	r1, #0
 8005606:	4618      	mov	r0, r3
 8005608:	f001 fc2a 	bl	8006e60 <RCCEx_PLL3_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005612:	e006      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800561a:	e002      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800561c:	bf00      	nop
 800561e:	e000      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10b      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800562a:	4b1e      	ldr	r3, [pc, #120]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005636:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800563a:	4a1a      	ldr	r2, [pc, #104]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800563c:	430b      	orrs	r3, r1
 800563e:	6593      	str	r3, [r2, #88]	; 0x58
 8005640:	e003      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800564a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005656:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800565a:	2300      	movs	r3, #0
 800565c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005660:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005664:	460b      	mov	r3, r1
 8005666:	4313      	orrs	r3, r2
 8005668:	d056      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005672:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005676:	d038      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800567c:	d831      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800567e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005682:	d034      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005684:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005688:	d82b      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800568a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800568e:	d01d      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005694:	d825      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d006      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800569a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800569e:	d00a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80056a0:	e01f      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056a2:	bf00      	nop
 80056a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a8:	4ba2      	ldr	r3, [pc, #648]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	4aa1      	ldr	r2, [pc, #644]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056b4:	e01c      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ba:	3308      	adds	r3, #8
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 fb1c 	bl	8006cfc <RCCEx_PLL2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80056ca:	e011      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d0:	3328      	adds	r3, #40	; 0x28
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 fbc3 	bl	8006e60 <RCCEx_PLL3_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056e0:	e006      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056e8:	e002      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80056ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80056f8:	4b8e      	ldr	r3, [pc, #568]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005704:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005708:	4a8a      	ldr	r2, [pc, #552]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800570a:	430b      	orrs	r3, r1
 800570c:	6593      	str	r3, [r2, #88]	; 0x58
 800570e:	e003      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005714:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005724:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800572e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005732:	460b      	mov	r3, r1
 8005734:	4313      	orrs	r3, r2
 8005736:	d03a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573e:	2b30      	cmp	r3, #48	; 0x30
 8005740:	d01f      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005742:	2b30      	cmp	r3, #48	; 0x30
 8005744:	d819      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005746:	2b20      	cmp	r3, #32
 8005748:	d00c      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800574a:	2b20      	cmp	r3, #32
 800574c:	d815      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d019      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005752:	2b10      	cmp	r3, #16
 8005754:	d111      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005756:	4b77      	ldr	r3, [pc, #476]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	4a76      	ldr	r2, [pc, #472]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800575c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005760:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005762:	e011      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005768:	3308      	adds	r3, #8
 800576a:	2102      	movs	r1, #2
 800576c:	4618      	mov	r0, r3
 800576e:	f001 fac5 	bl	8006cfc <RCCEx_PLL2_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005778:	e006      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005780:	e002      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005790:	4b68      	ldr	r3, [pc, #416]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005794:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579e:	4a65      	ldr	r2, [pc, #404]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057a0:	430b      	orrs	r3, r1
 80057a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057a4:	e003      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80057ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057be:	2300      	movs	r3, #0
 80057c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4313      	orrs	r3, r2
 80057cc:	d051      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d8:	d035      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80057da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057de:	d82e      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057e4:	d031      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80057e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057ea:	d828      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f0:	d01a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80057f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f6:	d822      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80057fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005800:	d007      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005802:	e01c      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005804:	4b4b      	ldr	r3, [pc, #300]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	4a4a      	ldr	r2, [pc, #296]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800580a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800580e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005810:	e01c      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005816:	3308      	adds	r3, #8
 8005818:	2100      	movs	r1, #0
 800581a:	4618      	mov	r0, r3
 800581c:	f001 fa6e 	bl	8006cfc <RCCEx_PLL2_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005826:	e011      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800582c:	3328      	adds	r3, #40	; 0x28
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f001 fb15 	bl	8006e60 <RCCEx_PLL3_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800583c:	e006      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005844:	e002      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800584a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005854:	4b37      	ldr	r3, [pc, #220]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005858:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800585c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005862:	4a34      	ldr	r2, [pc, #208]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005864:	430b      	orrs	r3, r1
 8005866:	6513      	str	r3, [r2, #80]	; 0x50
 8005868:	e003      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800586e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800587e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005882:	2300      	movs	r3, #0
 8005884:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005888:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800588c:	460b      	mov	r3, r1
 800588e:	4313      	orrs	r3, r2
 8005890:	d056      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800589c:	d033      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800589e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058a2:	d82c      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058a8:	d02f      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80058aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058ae:	d826      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058b4:	d02b      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80058b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058ba:	d820      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058c0:	d012      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80058c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058c6:	d81a      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d022      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d0:	d115      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d6:	3308      	adds	r3, #8
 80058d8:	2101      	movs	r1, #1
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 fa0e 	bl	8006cfc <RCCEx_PLL2_Config>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058e6:	e015      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ec:	3328      	adds	r3, #40	; 0x28
 80058ee:	2101      	movs	r1, #1
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 fab5 	bl	8006e60 <RCCEx_PLL3_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058fc:	e00a      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005904:	e006      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005906:	bf00      	nop
 8005908:	e004      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800590a:	bf00      	nop
 800590c:	e002      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800590e:	bf00      	nop
 8005910:	e000      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10d      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800592a:	4a02      	ldr	r2, [pc, #8]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800592c:	430b      	orrs	r3, r1
 800592e:	6513      	str	r3, [r2, #80]	; 0x50
 8005930:	e006      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005932:	bf00      	nop
 8005934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005938:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800593c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800594c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005950:	2300      	movs	r3, #0
 8005952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005956:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800595a:	460b      	mov	r3, r1
 800595c:	4313      	orrs	r3, r2
 800595e:	d055      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800596c:	d033      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800596e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005972:	d82c      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005978:	d02f      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597e:	d826      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005980:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005984:	d02b      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005986:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800598a:	d820      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800598c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005990:	d012      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005996:	d81a      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d022      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800599c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059a0:	d115      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a6:	3308      	adds	r3, #8
 80059a8:	2101      	movs	r1, #1
 80059aa:	4618      	mov	r0, r3
 80059ac:	f001 f9a6 	bl	8006cfc <RCCEx_PLL2_Config>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059b6:	e015      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059bc:	3328      	adds	r3, #40	; 0x28
 80059be:	2101      	movs	r1, #1
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 fa4d 	bl	8006e60 <RCCEx_PLL3_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059cc:	e00a      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059d4:	e006      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059d6:	bf00      	nop
 80059d8:	e004      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059da:	bf00      	nop
 80059dc:	e002      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059de:	bf00      	nop
 80059e0:	e000      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10b      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80059ec:	4ba3      	ldr	r3, [pc, #652]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80059f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059fc:	4a9f      	ldr	r2, [pc, #636]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059fe:	430b      	orrs	r3, r1
 8005a00:	6593      	str	r3, [r2, #88]	; 0x58
 8005a02:	e003      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a26:	460b      	mov	r3, r1
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	d037      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a36:	d00e      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a3c:	d816      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d018      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a46:	d111      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a48:	4b8c      	ldr	r3, [pc, #560]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	4a8b      	ldr	r2, [pc, #556]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a54:	e00f      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f94c 	bl	8006cfc <RCCEx_PLL2_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a6a:	e004      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a72:	e000      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a7e:	4b7f      	ldr	r3, [pc, #508]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	4a7b      	ldr	r2, [pc, #492]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	6513      	str	r3, [r2, #80]	; 0x50
 8005a92:	e003      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ab2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	d039      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d81c      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005b09 	.word	0x08005b09
 8005ad0:	08005add 	.word	0x08005add
 8005ad4:	08005aeb 	.word	0x08005aeb
 8005ad8:	08005b09 	.word	0x08005b09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005adc:	4b67      	ldr	r3, [pc, #412]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	4a66      	ldr	r2, [pc, #408]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ae8:	e00f      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aee:	3308      	adds	r3, #8
 8005af0:	2102      	movs	r1, #2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 f902 	bl	8006cfc <RCCEx_PLL2_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005afe:	e004      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b06:	e000      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b12:	4b5a      	ldr	r3, [pc, #360]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b16:	f023 0103 	bic.w	r1, r3, #3
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b20:	4a56      	ldr	r2, [pc, #344]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b22:	430b      	orrs	r3, r1
 8005b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b26:	e003      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b40:	2300      	movs	r3, #0
 8005b42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f000 809f 	beq.w	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b52:	4b4b      	ldr	r3, [pc, #300]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a4a      	ldr	r2, [pc, #296]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b5e:	f7fb faad 	bl	80010bc <HAL_GetTick>
 8005b62:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b66:	e00b      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b68:	f7fb faa8 	bl	80010bc <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b64      	cmp	r3, #100	; 0x64
 8005b76:	d903      	bls.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b7e:	e005      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b80:	4b3f      	ldr	r3, [pc, #252]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ed      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d179      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b94:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ba0:	4053      	eors	r3, r2
 8005ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d015      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005baa:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bb6:	4b31      	ldr	r3, [pc, #196]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bba:	4a30      	ldr	r2, [pc, #192]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bc2:	4b2e      	ldr	r3, [pc, #184]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	4a2d      	ldr	r2, [pc, #180]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bcc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005bce:	4a2b      	ldr	r2, [pc, #172]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bd4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be2:	d118      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fb fa6a 	bl	80010bc <HAL_GetTick>
 8005be8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bec:	e00d      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bee:	f7fb fa65 	bl	80010bc <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bf8:	1ad2      	subs	r2, r2, r3
 8005bfa:	f241 3388 	movw	r3, #5000	; 0x1388
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d903      	bls.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005c08:	e005      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c0a:	4b1c      	ldr	r3, [pc, #112]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0eb      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d129      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c2e:	d10e      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005c30:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c40:	091a      	lsrs	r2, r3, #4
 8005c42:	4b10      	ldr	r3, [pc, #64]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	4a0d      	ldr	r2, [pc, #52]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6113      	str	r3, [r2, #16]
 8005c4c:	e005      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c58:	6113      	str	r3, [r2, #16]
 8005c5a:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6a:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c70:	e00e      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005c7a:	e009      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005c7c:	58024400 	.word	0x58024400
 8005c80:	58024800 	.word	0x58024800
 8005c84:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	f002 0301 	and.w	r3, r2, #1
 8005c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ca6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f000 8089 	beq.w	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cb8:	2b28      	cmp	r3, #40	; 0x28
 8005cba:	d86b      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005d9d 	.word	0x08005d9d
 8005cc8:	08005d95 	.word	0x08005d95
 8005ccc:	08005d95 	.word	0x08005d95
 8005cd0:	08005d95 	.word	0x08005d95
 8005cd4:	08005d95 	.word	0x08005d95
 8005cd8:	08005d95 	.word	0x08005d95
 8005cdc:	08005d95 	.word	0x08005d95
 8005ce0:	08005d95 	.word	0x08005d95
 8005ce4:	08005d69 	.word	0x08005d69
 8005ce8:	08005d95 	.word	0x08005d95
 8005cec:	08005d95 	.word	0x08005d95
 8005cf0:	08005d95 	.word	0x08005d95
 8005cf4:	08005d95 	.word	0x08005d95
 8005cf8:	08005d95 	.word	0x08005d95
 8005cfc:	08005d95 	.word	0x08005d95
 8005d00:	08005d95 	.word	0x08005d95
 8005d04:	08005d7f 	.word	0x08005d7f
 8005d08:	08005d95 	.word	0x08005d95
 8005d0c:	08005d95 	.word	0x08005d95
 8005d10:	08005d95 	.word	0x08005d95
 8005d14:	08005d95 	.word	0x08005d95
 8005d18:	08005d95 	.word	0x08005d95
 8005d1c:	08005d95 	.word	0x08005d95
 8005d20:	08005d95 	.word	0x08005d95
 8005d24:	08005d9d 	.word	0x08005d9d
 8005d28:	08005d95 	.word	0x08005d95
 8005d2c:	08005d95 	.word	0x08005d95
 8005d30:	08005d95 	.word	0x08005d95
 8005d34:	08005d95 	.word	0x08005d95
 8005d38:	08005d95 	.word	0x08005d95
 8005d3c:	08005d95 	.word	0x08005d95
 8005d40:	08005d95 	.word	0x08005d95
 8005d44:	08005d9d 	.word	0x08005d9d
 8005d48:	08005d95 	.word	0x08005d95
 8005d4c:	08005d95 	.word	0x08005d95
 8005d50:	08005d95 	.word	0x08005d95
 8005d54:	08005d95 	.word	0x08005d95
 8005d58:	08005d95 	.word	0x08005d95
 8005d5c:	08005d95 	.word	0x08005d95
 8005d60:	08005d95 	.word	0x08005d95
 8005d64:	08005d9d 	.word	0x08005d9d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	2101      	movs	r1, #1
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 ffc3 	bl	8006cfc <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d7c:	e00f      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d82:	3328      	adds	r3, #40	; 0x28
 8005d84:	2101      	movs	r1, #1
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 f86a 	bl	8006e60 <RCCEx_PLL3_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d92:	e004      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d9a:	e000      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005da6:	4bbf      	ldr	r3, [pc, #764]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db4:	4abb      	ldr	r2, [pc, #748]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005db6:	430b      	orrs	r3, r1
 8005db8:	6553      	str	r3, [r2, #84]	; 0x54
 8005dba:	e003      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f002 0302 	and.w	r3, r2, #2
 8005dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005dda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005dde:	460b      	mov	r3, r1
 8005de0:	4313      	orrs	r3, r2
 8005de2:	d041      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d824      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005dee:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df4:	08005e41 	.word	0x08005e41
 8005df8:	08005e0d 	.word	0x08005e0d
 8005dfc:	08005e23 	.word	0x08005e23
 8005e00:	08005e41 	.word	0x08005e41
 8005e04:	08005e41 	.word	0x08005e41
 8005e08:	08005e41 	.word	0x08005e41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e10:	3308      	adds	r3, #8
 8005e12:	2101      	movs	r1, #1
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 ff71 	bl	8006cfc <RCCEx_PLL2_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e20:	e00f      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e26:	3328      	adds	r3, #40	; 0x28
 8005e28:	2101      	movs	r1, #1
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 f818 	bl	8006e60 <RCCEx_PLL3_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e36:	e004      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e3e:	e000      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e4a:	4b96      	ldr	r3, [pc, #600]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	f023 0107 	bic.w	r1, r3, #7
 8005e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e58:	4a92      	ldr	r2, [pc, #584]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e5a:	430b      	orrs	r3, r1
 8005e5c:	6553      	str	r3, [r2, #84]	; 0x54
 8005e5e:	e003      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f002 0304 	and.w	r3, r2, #4
 8005e74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4313      	orrs	r3, r2
 8005e86:	d044      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e90:	2b05      	cmp	r3, #5
 8005e92:	d825      	bhi.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005e94:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	08005ee9 	.word	0x08005ee9
 8005ea0:	08005eb5 	.word	0x08005eb5
 8005ea4:	08005ecb 	.word	0x08005ecb
 8005ea8:	08005ee9 	.word	0x08005ee9
 8005eac:	08005ee9 	.word	0x08005ee9
 8005eb0:	08005ee9 	.word	0x08005ee9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb8:	3308      	adds	r3, #8
 8005eba:	2101      	movs	r1, #1
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 ff1d 	bl	8006cfc <RCCEx_PLL2_Config>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ec8:	e00f      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ece:	3328      	adds	r3, #40	; 0x28
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 ffc4 	bl	8006e60 <RCCEx_PLL3_Config>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ede:	e004      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ee6:	e000      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10b      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ef2:	4b6c      	ldr	r3, [pc, #432]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef6:	f023 0107 	bic.w	r1, r3, #7
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f02:	4a68      	ldr	r2, [pc, #416]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6593      	str	r3, [r2, #88]	; 0x58
 8005f08:	e003      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f002 0320 	and.w	r3, r2, #32
 8005f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f22:	2300      	movs	r3, #0
 8005f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	d055      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f3e:	d033      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f44:	d82c      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d02f      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f50:	d826      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f56:	d02b      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005f58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f5c:	d820      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f62:	d012      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f68:	d81a      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d022      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f72:	d115      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f78:	3308      	adds	r3, #8
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 febd 	bl	8006cfc <RCCEx_PLL2_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f88:	e015      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8e:	3328      	adds	r3, #40	; 0x28
 8005f90:	2102      	movs	r1, #2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 ff64 	bl	8006e60 <RCCEx_PLL3_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f9e:	e00a      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fa6:	e006      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fa8:	bf00      	nop
 8005faa:	e004      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fac:	bf00      	nop
 8005fae:	e002      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fb0:	bf00      	nop
 8005fb2:	e000      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10b      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fbe:	4b39      	ldr	r3, [pc, #228]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fce:	4a35      	ldr	r2, [pc, #212]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	6553      	str	r3, [r2, #84]	; 0x54
 8005fd4:	e003      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ff4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	d058      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006006:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800600a:	d033      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800600c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006010:	d82c      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006016:	d02f      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601c:	d826      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800601e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006022:	d02b      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006024:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006028:	d820      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800602a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602e:	d012      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006034:	d81a      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d022      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800603a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603e:	d115      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006044:	3308      	adds	r3, #8
 8006046:	2100      	movs	r1, #0
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fe57 	bl	8006cfc <RCCEx_PLL2_Config>
 800604e:	4603      	mov	r3, r0
 8006050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006054:	e015      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800605a:	3328      	adds	r3, #40	; 0x28
 800605c:	2102      	movs	r1, #2
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fefe 	bl	8006e60 <RCCEx_PLL3_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800606a:	e00a      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006072:	e006      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006074:	bf00      	nop
 8006076:	e004      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006078:	bf00      	nop
 800607a:	e002      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10e      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800608a:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006096:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800609a:	4a02      	ldr	r2, [pc, #8]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800609c:	430b      	orrs	r3, r1
 800609e:	6593      	str	r3, [r2, #88]	; 0x58
 80060a0:	e006      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80060a2:	bf00      	nop
 80060a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80060b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80060bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060c0:	2300      	movs	r3, #0
 80060c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80060ca:	460b      	mov	r3, r1
 80060cc:	4313      	orrs	r3, r2
 80060ce:	d055      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80060d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060dc:	d033      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80060de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060e2:	d82c      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e8:	d02f      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80060ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ee:	d826      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060f4:	d02b      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80060f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060fa:	d820      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006100:	d012      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006106:	d81a      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d022      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800610c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006110:	d115      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006116:	3308      	adds	r3, #8
 8006118:	2100      	movs	r1, #0
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fdee 	bl	8006cfc <RCCEx_PLL2_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006126:	e015      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612c:	3328      	adds	r3, #40	; 0x28
 800612e:	2102      	movs	r1, #2
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fe95 	bl	8006e60 <RCCEx_PLL3_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800613c:	e00a      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006144:	e006      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006146:	bf00      	nop
 8006148:	e004      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800614a:	bf00      	nop
 800614c:	e002      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800614e:	bf00      	nop
 8006150:	e000      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800615c:	4ba1      	ldr	r3, [pc, #644]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800615e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006160:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006168:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800616c:	4a9d      	ldr	r2, [pc, #628]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800616e:	430b      	orrs	r3, r1
 8006170:	6593      	str	r3, [r2, #88]	; 0x58
 8006172:	e003      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006178:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f002 0308 	and.w	r3, r2, #8
 8006188:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800618c:	2300      	movs	r3, #0
 800618e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006192:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006196:	460b      	mov	r3, r1
 8006198:	4313      	orrs	r3, r2
 800619a:	d01e      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a8:	d10c      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ae:	3328      	adds	r3, #40	; 0x28
 80061b0:	2102      	movs	r1, #2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fe54 	bl	8006e60 <RCCEx_PLL3_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80061c4:	4b87      	ldr	r3, [pc, #540]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061d4:	4a83      	ldr	r2, [pc, #524]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d6:	430b      	orrs	r3, r1
 80061d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f002 0310 	and.w	r3, r2, #16
 80061e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061ea:	2300      	movs	r3, #0
 80061ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80061f4:	460b      	mov	r3, r1
 80061f6:	4313      	orrs	r3, r2
 80061f8:	d01e      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006206:	d10c      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800620c:	3328      	adds	r3, #40	; 0x28
 800620e:	2102      	movs	r1, #2
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fe25 	bl	8006e60 <RCCEx_PLL3_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006222:	4b70      	ldr	r3, [pc, #448]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006232:	4a6c      	ldr	r2, [pc, #432]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006234:	430b      	orrs	r3, r1
 8006236:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006248:	2300      	movs	r3, #0
 800624a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800624e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006252:	460b      	mov	r3, r1
 8006254:	4313      	orrs	r3, r2
 8006256:	d03e      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006264:	d022      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800626a:	d81b      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006274:	d00b      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006276:	e015      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627c:	3308      	adds	r3, #8
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fd3b 	bl	8006cfc <RCCEx_PLL2_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800628c:	e00f      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800628e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006292:	3328      	adds	r3, #40	; 0x28
 8006294:	2102      	movs	r1, #2
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fde2 	bl	8006e60 <RCCEx_PLL3_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80062a2:	e004      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062aa:	e000      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80062ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10b      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062b6:	4b4b      	ldr	r3, [pc, #300]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062c6:	4a47      	ldr	r2, [pc, #284]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6593      	str	r3, [r2, #88]	; 0x58
 80062cc:	e003      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80062e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80062e4:	2300      	movs	r3, #0
 80062e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80062ec:	460b      	mov	r3, r1
 80062ee:	4313      	orrs	r3, r2
 80062f0:	d03b      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062fe:	d01f      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006300:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006304:	d818      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630a:	d003      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800630c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006310:	d007      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006312:	e011      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006314:	4b33      	ldr	r3, [pc, #204]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	4a32      	ldr	r2, [pc, #200]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800631a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006320:	e00f      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006326:	3328      	adds	r3, #40	; 0x28
 8006328:	2101      	movs	r1, #1
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fd98 	bl	8006e60 <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006336:	e004      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800633e:	e000      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10b      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800634a:	4b26      	ldr	r3, [pc, #152]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635a:	4a22      	ldr	r2, [pc, #136]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800635c:	430b      	orrs	r3, r1
 800635e:	6553      	str	r3, [r2, #84]	; 0x54
 8006360:	e003      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800636a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006376:	673b      	str	r3, [r7, #112]	; 0x70
 8006378:	2300      	movs	r3, #0
 800637a:	677b      	str	r3, [r7, #116]	; 0x74
 800637c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006380:	460b      	mov	r3, r1
 8006382:	4313      	orrs	r3, r2
 8006384:	d034      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006394:	d007      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006396:	e011      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006398:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	4a11      	ldr	r2, [pc, #68]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800639e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063a4:	e00e      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063aa:	3308      	adds	r3, #8
 80063ac:	2102      	movs	r1, #2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fca4 	bl	8006cfc <RCCEx_PLL2_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063ba:	e003      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10d      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063da:	4a02      	ldr	r2, [pc, #8]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063dc:	430b      	orrs	r3, r1
 80063de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063e0:	e006      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80063e2:	bf00      	nop
 80063e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80063fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80063fe:	2300      	movs	r3, #0
 8006400:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006402:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006406:	460b      	mov	r3, r1
 8006408:	4313      	orrs	r3, r2
 800640a:	d00c      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800640c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006410:	3328      	adds	r3, #40	; 0x28
 8006412:	2102      	movs	r1, #2
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fd23 	bl	8006e60 <RCCEx_PLL3_Config>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006432:	663b      	str	r3, [r7, #96]	; 0x60
 8006434:	2300      	movs	r3, #0
 8006436:	667b      	str	r3, [r7, #100]	; 0x64
 8006438:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800643c:	460b      	mov	r3, r1
 800643e:	4313      	orrs	r3, r2
 8006440:	d038      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800644e:	d018      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006454:	d811      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800645a:	d014      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800645c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006460:	d80b      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d011      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646a:	d106      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800646c:	4bc3      	ldr	r3, [pc, #780]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	4ac2      	ldr	r2, [pc, #776]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006478:	e008      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006480:	e004      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006482:	bf00      	nop
 8006484:	e002      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006486:	bf00      	nop
 8006488:	e000      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800648a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800648c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10b      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006494:	4bb9      	ldr	r3, [pc, #740]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006498:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064a4:	4ab5      	ldr	r2, [pc, #724]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a6:	430b      	orrs	r3, r1
 80064a8:	6553      	str	r3, [r2, #84]	; 0x54
 80064aa:	e003      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80064c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80064c2:	2300      	movs	r3, #0
 80064c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80064ca:	460b      	mov	r3, r1
 80064cc:	4313      	orrs	r3, r2
 80064ce:	d009      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064d0:	4baa      	ldr	r3, [pc, #680]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064de:	4aa7      	ldr	r2, [pc, #668]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80064e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80064f0:	653b      	str	r3, [r7, #80]	; 0x50
 80064f2:	2300      	movs	r3, #0
 80064f4:	657b      	str	r3, [r7, #84]	; 0x54
 80064f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80064fa:	460b      	mov	r3, r1
 80064fc:	4313      	orrs	r3, r2
 80064fe:	d00a      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006500:	4b9e      	ldr	r3, [pc, #632]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006510:	4a9a      	ldr	r2, [pc, #616]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006512:	430b      	orrs	r3, r1
 8006514:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006522:	64bb      	str	r3, [r7, #72]	; 0x48
 8006524:	2300      	movs	r3, #0
 8006526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006528:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800652c:	460b      	mov	r3, r1
 800652e:	4313      	orrs	r3, r2
 8006530:	d009      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006532:	4b92      	ldr	r3, [pc, #584]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006536:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800653e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006540:	4a8e      	ldr	r2, [pc, #568]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006542:	430b      	orrs	r3, r1
 8006544:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006552:	643b      	str	r3, [r7, #64]	; 0x40
 8006554:	2300      	movs	r3, #0
 8006556:	647b      	str	r3, [r7, #68]	; 0x44
 8006558:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800655c:	460b      	mov	r3, r1
 800655e:	4313      	orrs	r3, r2
 8006560:	d00e      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006562:	4b86      	ldr	r3, [pc, #536]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	4a85      	ldr	r2, [pc, #532]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800656c:	6113      	str	r3, [r2, #16]
 800656e:	4b83      	ldr	r3, [pc, #524]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006570:	6919      	ldr	r1, [r3, #16]
 8006572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006576:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800657a:	4a80      	ldr	r2, [pc, #512]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800657c:	430b      	orrs	r3, r1
 800657e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800658c:	63bb      	str	r3, [r7, #56]	; 0x38
 800658e:	2300      	movs	r3, #0
 8006590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006592:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006596:	460b      	mov	r3, r1
 8006598:	4313      	orrs	r3, r2
 800659a:	d009      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800659c:	4b77      	ldr	r3, [pc, #476]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800659e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80065a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065aa:	4a74      	ldr	r2, [pc, #464]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ac:	430b      	orrs	r3, r1
 80065ae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30
 80065be:	2300      	movs	r3, #0
 80065c0:	637b      	str	r3, [r7, #52]	; 0x34
 80065c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80065c6:	460b      	mov	r3, r1
 80065c8:	4313      	orrs	r3, r2
 80065ca:	d00a      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065cc:	4b6b      	ldr	r3, [pc, #428]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80065d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065dc:	4a67      	ldr	r2, [pc, #412]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065de:	430b      	orrs	r3, r1
 80065e0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	2100      	movs	r1, #0
 80065ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80065f8:	460b      	mov	r3, r1
 80065fa:	4313      	orrs	r3, r2
 80065fc:	d011      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006602:	3308      	adds	r3, #8
 8006604:	2100      	movs	r1, #0
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fb78 	bl	8006cfc <RCCEx_PLL2_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800661a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800661e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	2100      	movs	r1, #0
 800662c:	6239      	str	r1, [r7, #32]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
 8006634:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006638:	460b      	mov	r3, r1
 800663a:	4313      	orrs	r3, r2
 800663c:	d011      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006642:	3308      	adds	r3, #8
 8006644:	2101      	movs	r1, #1
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fb58 	bl	8006cfc <RCCEx_PLL2_Config>
 800664c:	4603      	mov	r3, r0
 800664e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800665e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	2100      	movs	r1, #0
 800666c:	61b9      	str	r1, [r7, #24]
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006678:	460b      	mov	r3, r1
 800667a:	4313      	orrs	r3, r2
 800667c:	d011      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800667e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006682:	3308      	adds	r3, #8
 8006684:	2102      	movs	r1, #2
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fb38 	bl	8006cfc <RCCEx_PLL2_Config>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800669e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066aa:	2100      	movs	r1, #0
 80066ac:	6139      	str	r1, [r7, #16]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80066b8:	460b      	mov	r3, r1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	d011      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c2:	3328      	adds	r3, #40	; 0x28
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fbca 	bl	8006e60 <RCCEx_PLL3_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80066d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	2100      	movs	r1, #0
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066f8:	460b      	mov	r3, r1
 80066fa:	4313      	orrs	r3, r2
 80066fc:	d011      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006702:	3328      	adds	r3, #40	; 0x28
 8006704:	2101      	movs	r1, #1
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fbaa 	bl	8006e60 <RCCEx_PLL3_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800671e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	2100      	movs	r1, #0
 800672c:	6039      	str	r1, [r7, #0]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	607b      	str	r3, [r7, #4]
 8006734:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006738:	460b      	mov	r3, r1
 800673a:	4313      	orrs	r3, r2
 800673c:	d011      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006742:	3328      	adds	r3, #40	; 0x28
 8006744:	2102      	movs	r1, #2
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fb8a 	bl	8006e60 <RCCEx_PLL3_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800675e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006762:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	e000      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
}
 8006770:	4618      	mov	r0, r3
 8006772:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006776:	46bd      	mov	sp, r7
 8006778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800677c:	58024400 	.word	0x58024400

08006780 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006784:	f7fe fd96 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 8006788:	4602      	mov	r2, r0
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	091b      	lsrs	r3, r3, #4
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	4904      	ldr	r1, [pc, #16]	; (80067a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006796:	5ccb      	ldrb	r3, [r1, r3]
 8006798:	f003 031f 	and.w	r3, r3, #31
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	58024400 	.word	0x58024400
 80067a8:	080098bc 	.word	0x080098bc

080067ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b089      	sub	sp, #36	; 0x24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067b4:	4ba1      	ldr	r3, [pc, #644]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80067be:	4b9f      	ldr	r3, [pc, #636]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	0b1b      	lsrs	r3, r3, #12
 80067c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80067ca:	4b9c      	ldr	r3, [pc, #624]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	091b      	lsrs	r3, r3, #4
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80067d6:	4b99      	ldr	r3, [pc, #612]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067da:	08db      	lsrs	r3, r3, #3
 80067dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	fb02 f303 	mul.w	r3, r2, r3
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8111 	beq.w	8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	f000 8083 	beq.w	8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b02      	cmp	r3, #2
 8006806:	f200 80a1 	bhi.w	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d056      	beq.n	80068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006816:	e099      	b.n	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006818:	4b88      	ldr	r3, [pc, #544]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b00      	cmp	r3, #0
 8006822:	d02d      	beq.n	8006880 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006824:	4b85      	ldr	r3, [pc, #532]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	08db      	lsrs	r3, r3, #3
 800682a:	f003 0303 	and.w	r3, r3, #3
 800682e:	4a84      	ldr	r2, [pc, #528]	; (8006a40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
 8006834:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	ee07 3a90 	vmov	s15, r3
 800683c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684e:	4b7b      	ldr	r3, [pc, #492]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006862:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800687e:	e087      	b.n	8006990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800688e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006892:	4b6a      	ldr	r3, [pc, #424]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068c2:	e065      	b.n	8006990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d6:	4b59      	ldr	r3, [pc, #356]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006906:	e043      	b.n	8006990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691a:	4b48      	ldr	r3, [pc, #288]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692a:	ed97 6a03 	vldr	s12, [r7, #12]
 800692e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800693e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800694a:	e021      	b.n	8006990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006956:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800695a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695e:	4b37      	ldr	r3, [pc, #220]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006972:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800697e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800698e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006990:	4b2a      	ldr	r3, [pc, #168]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	0a5b      	lsrs	r3, r3, #9
 8006996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80069ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069b6:	ee17 2a90 	vmov	r2, s15
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80069be:	4b1f      	ldr	r3, [pc, #124]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	0c1b      	lsrs	r3, r3, #16
 80069c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80069dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069e4:	ee17 2a90 	vmov	r2, s15
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80069ec:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	0e1b      	lsrs	r3, r3, #24
 80069f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a12:	ee17 2a90 	vmov	r2, s15
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a1a:	e008      	b.n	8006a2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	609a      	str	r2, [r3, #8]
}
 8006a2e:	bf00      	nop
 8006a30:	3724      	adds	r7, #36	; 0x24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	58024400 	.word	0x58024400
 8006a40:	03d09000 	.word	0x03d09000
 8006a44:	46000000 	.word	0x46000000
 8006a48:	4c742400 	.word	0x4c742400
 8006a4c:	4a742400 	.word	0x4a742400
 8006a50:	4bbebc20 	.word	0x4bbebc20

08006a54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b089      	sub	sp, #36	; 0x24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a5c:	4ba1      	ldr	r3, [pc, #644]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a60:	f003 0303 	and.w	r3, r3, #3
 8006a64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a66:	4b9f      	ldr	r3, [pc, #636]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6a:	0d1b      	lsrs	r3, r3, #20
 8006a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a72:	4b9c      	ldr	r3, [pc, #624]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	0a1b      	lsrs	r3, r3, #8
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a7e:	4b99      	ldr	r3, [pc, #612]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a82:	08db      	lsrs	r3, r3, #3
 8006a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	fb02 f303 	mul.w	r3, r2, r3
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 8111 	beq.w	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	f000 8083 	beq.w	8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	f200 80a1 	bhi.w	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d056      	beq.n	8006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006abe:	e099      	b.n	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac0:	4b88      	ldr	r3, [pc, #544]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d02d      	beq.n	8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006acc:	4b85      	ldr	r3, [pc, #532]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	08db      	lsrs	r3, r3, #3
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	4a84      	ldr	r2, [pc, #528]	; (8006ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8006adc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af6:	4b7b      	ldr	r3, [pc, #492]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b26:	e087      	b.n	8006c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3a:	4b6a      	ldr	r3, [pc, #424]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b6a:	e065      	b.n	8006c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7e:	4b59      	ldr	r3, [pc, #356]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bae:	e043      	b.n	8006c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc2:	4b48      	ldr	r3, [pc, #288]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bf2:	e021      	b.n	8006c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c06:	4b37      	ldr	r3, [pc, #220]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006c38:	4b2a      	ldr	r3, [pc, #168]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	0a5b      	lsrs	r3, r3, #9
 8006c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c5e:	ee17 2a90 	vmov	r2, s15
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c66:	4b1f      	ldr	r3, [pc, #124]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	0c1b      	lsrs	r3, r3, #16
 8006c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c8c:	ee17 2a90 	vmov	r2, s15
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c94:	4b13      	ldr	r3, [pc, #76]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	0e1b      	lsrs	r3, r3, #24
 8006c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cba:	ee17 2a90 	vmov	r2, s15
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	609a      	str	r2, [r3, #8]
}
 8006cd6:	bf00      	nop
 8006cd8:	3724      	adds	r7, #36	; 0x24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	58024400 	.word	0x58024400
 8006ce8:	03d09000 	.word	0x03d09000
 8006cec:	46000000 	.word	0x46000000
 8006cf0:	4c742400 	.word	0x4c742400
 8006cf4:	4a742400 	.word	0x4a742400
 8006cf8:	4bbebc20 	.word	0x4bbebc20

08006cfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d0a:	4b53      	ldr	r3, [pc, #332]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d101      	bne.n	8006d1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e099      	b.n	8006e4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d1a:	4b4f      	ldr	r3, [pc, #316]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a4e      	ldr	r2, [pc, #312]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d26:	f7fa f9c9 	bl	80010bc <HAL_GetTick>
 8006d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d2c:	e008      	b.n	8006d40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d2e:	f7fa f9c5 	bl	80010bc <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e086      	b.n	8006e4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d40:	4b45      	ldr	r3, [pc, #276]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f0      	bne.n	8006d2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d4c:	4b42      	ldr	r3, [pc, #264]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	031b      	lsls	r3, r3, #12
 8006d5a:	493f      	ldr	r1, [pc, #252]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	628b      	str	r3, [r1, #40]	; 0x28
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	025b      	lsls	r3, r3, #9
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	041b      	lsls	r3, r3, #16
 8006d7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	061b      	lsls	r3, r3, #24
 8006d8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d90:	4931      	ldr	r1, [pc, #196]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d96:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	492d      	ldr	r1, [pc, #180]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006da8:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	f023 0220 	bic.w	r2, r3, #32
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	4928      	ldr	r1, [pc, #160]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006dba:	4b27      	ldr	r3, [pc, #156]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	4a26      	ldr	r2, [pc, #152]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006dc0:	f023 0310 	bic.w	r3, r3, #16
 8006dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006dc6:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dca:	4b24      	ldr	r3, [pc, #144]	; (8006e5c <RCCEx_PLL2_Config+0x160>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	69d2      	ldr	r2, [r2, #28]
 8006dd2:	00d2      	lsls	r2, r2, #3
 8006dd4:	4920      	ldr	r1, [pc, #128]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006dda:	4b1f      	ldr	r3, [pc, #124]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006de0:	f043 0310 	orr.w	r3, r3, #16
 8006de4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d106      	bne.n	8006dfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006dec:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	4a19      	ldr	r2, [pc, #100]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006df6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006df8:	e00f      	b.n	8006e1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d106      	bne.n	8006e0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e00:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	4a14      	ldr	r2, [pc, #80]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e0c:	e005      	b.n	8006e1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	4a11      	ldr	r2, [pc, #68]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e1a:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a0e      	ldr	r2, [pc, #56]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e26:	f7fa f949 	bl	80010bc <HAL_GetTick>
 8006e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e2c:	e008      	b.n	8006e40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e2e:	f7fa f945 	bl	80010bc <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e006      	b.n	8006e4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0f0      	beq.n	8006e2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	ffff0007 	.word	0xffff0007

08006e60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e6e:	4b53      	ldr	r3, [pc, #332]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d101      	bne.n	8006e7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e099      	b.n	8006fb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e7e:	4b4f      	ldr	r3, [pc, #316]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a4e      	ldr	r2, [pc, #312]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e8a:	f7fa f917 	bl	80010bc <HAL_GetTick>
 8006e8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e90:	e008      	b.n	8006ea4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e92:	f7fa f913 	bl	80010bc <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d901      	bls.n	8006ea4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e086      	b.n	8006fb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ea4:	4b45      	ldr	r3, [pc, #276]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1f0      	bne.n	8006e92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006eb0:	4b42      	ldr	r3, [pc, #264]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	051b      	lsls	r3, r3, #20
 8006ebe:	493f      	ldr	r1, [pc, #252]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	025b      	lsls	r3, r3, #9
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	061b      	lsls	r3, r3, #24
 8006ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ef4:	4931      	ldr	r1, [pc, #196]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006efa:	4b30      	ldr	r3, [pc, #192]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	492d      	ldr	r1, [pc, #180]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f0c:	4b2b      	ldr	r3, [pc, #172]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	4928      	ldr	r1, [pc, #160]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f1e:	4b27      	ldr	r3, [pc, #156]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	4a26      	ldr	r2, [pc, #152]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f2a:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2e:	4b24      	ldr	r3, [pc, #144]	; (8006fc0 <RCCEx_PLL3_Config+0x160>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	69d2      	ldr	r2, [r2, #28]
 8006f36:	00d2      	lsls	r2, r2, #3
 8006f38:	4920      	ldr	r1, [pc, #128]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f3e:	4b1f      	ldr	r3, [pc, #124]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	4a1e      	ldr	r2, [pc, #120]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f50:	4b1a      	ldr	r3, [pc, #104]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f5c:	e00f      	b.n	8006f7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d106      	bne.n	8006f72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f64:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	4a14      	ldr	r2, [pc, #80]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f70:	e005      	b.n	8006f7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f72:	4b12      	ldr	r3, [pc, #72]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	4a11      	ldr	r2, [pc, #68]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a0e      	ldr	r2, [pc, #56]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f8a:	f7fa f897 	bl	80010bc <HAL_GetTick>
 8006f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f90:	e008      	b.n	8006fa4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f92:	f7fa f893 	bl	80010bc <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e006      	b.n	8006fb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0f0      	beq.n	8006f92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	58024400 	.word	0x58024400
 8006fc0:	ffff0007 	.word	0xffff0007

08006fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e042      	b.n	800705c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d106      	bne.n	8006fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7f9 fdc5 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2224      	movs	r2, #36	; 0x24
 8006ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0201 	bic.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fce0 	bl	80079cc <UART_SetConfig>
 800700c:	4603      	mov	r3, r0
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e022      	b.n	800705c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fa3c 	bl	800849c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0201 	orr.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 fac3 	bl	80085e0 <UART_CheckIdleState>
 800705a:	4603      	mov	r3, r0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08a      	sub	sp, #40	; 0x28
 8007068:	af02      	add	r7, sp, #8
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	4613      	mov	r3, r2
 8007072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707a:	2b20      	cmp	r3, #32
 800707c:	d17b      	bne.n	8007176 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HAL_UART_Transmit+0x26>
 8007084:	88fb      	ldrh	r3, [r7, #6]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e074      	b.n	8007178 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2221      	movs	r2, #33	; 0x21
 800709a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800709e:	f7fa f80d 	bl	80010bc <HAL_GetTick>
 80070a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	88fa      	ldrh	r2, [r7, #6]
 80070a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	88fa      	ldrh	r2, [r7, #6]
 80070b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070bc:	d108      	bne.n	80070d0 <HAL_UART_Transmit+0x6c>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d104      	bne.n	80070d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	61bb      	str	r3, [r7, #24]
 80070ce:	e003      	b.n	80070d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070d4:	2300      	movs	r3, #0
 80070d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070d8:	e030      	b.n	800713c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2200      	movs	r2, #0
 80070e2:	2180      	movs	r1, #128	; 0x80
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f001 fb25 	bl	8008734 <UART_WaitOnFlagUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e03d      	b.n	8007178 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10b      	bne.n	800711a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007110:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	3302      	adds	r3, #2
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	e007      	b.n	800712a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	781a      	ldrb	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	3301      	adds	r3, #1
 8007128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007130:	b29b      	uxth	r3, r3
 8007132:	3b01      	subs	r3, #1
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007142:	b29b      	uxth	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1c8      	bne.n	80070da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2200      	movs	r2, #0
 8007150:	2140      	movs	r1, #64	; 0x40
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f001 faee 	bl	8008734 <UART_WaitOnFlagUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2220      	movs	r2, #32
 8007162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e006      	b.n	8007178 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	e000      	b.n	8007178 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007176:	2302      	movs	r3, #2
  }
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08a      	sub	sp, #40	; 0x28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	4613      	mov	r3, r2
 800718c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007194:	2b20      	cmp	r3, #32
 8007196:	d137      	bne.n	8007208 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <HAL_UART_Receive_DMA+0x24>
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e030      	b.n	800720a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a18      	ldr	r2, [pc, #96]	; (8007214 <HAL_UART_Receive_DMA+0x94>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d01f      	beq.n	80071f8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d018      	beq.n	80071f8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	613b      	str	r3, [r7, #16]
   return(result);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	623b      	str	r3, [r7, #32]
 80071e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	69f9      	ldr	r1, [r7, #28]
 80071ea:	6a3a      	ldr	r2, [r7, #32]
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e6      	bne.n	80071c6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80071f8:	88fb      	ldrh	r3, [r7, #6]
 80071fa:	461a      	mov	r2, r3
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f001 fb00 	bl	8008804 <UART_Start_Receive_DMA>
 8007204:	4603      	mov	r3, r0
 8007206:	e000      	b.n	800720a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007208:	2302      	movs	r3, #2
  }
}
 800720a:	4618      	mov	r0, r3
 800720c:	3728      	adds	r7, #40	; 0x28
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	58000c00 	.word	0x58000c00

08007218 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b0ba      	sub	sp, #232	; 0xe8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800723e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007242:	f640 030f 	movw	r3, #2063	; 0x80f
 8007246:	4013      	ands	r3, r2
 8007248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800724c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007250:	2b00      	cmp	r3, #0
 8007252:	d11b      	bne.n	800728c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b00      	cmp	r3, #0
 800725e:	d015      	beq.n	800728c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007264:	f003 0320 	and.w	r3, r3, #32
 8007268:	2b00      	cmp	r3, #0
 800726a:	d105      	bne.n	8007278 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800726c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d009      	beq.n	800728c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8377 	beq.w	8007970 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
      }
      return;
 800728a:	e371      	b.n	8007970 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800728c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 8123 	beq.w	80074dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007296:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800729a:	4b8d      	ldr	r3, [pc, #564]	; (80074d0 <HAL_UART_IRQHandler+0x2b8>)
 800729c:	4013      	ands	r3, r2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80072a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80072a6:	4b8b      	ldr	r3, [pc, #556]	; (80074d4 <HAL_UART_IRQHandler+0x2bc>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8116 	beq.w	80074dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d011      	beq.n	80072e0 <HAL_UART_IRQHandler+0xc8>
 80072bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00b      	beq.n	80072e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2201      	movs	r2, #1
 80072ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d6:	f043 0201 	orr.w	r2, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d011      	beq.n	8007310 <HAL_UART_IRQHandler+0xf8>
 80072ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2202      	movs	r2, #2
 80072fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007306:	f043 0204 	orr.w	r2, r3, #4
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d011      	beq.n	8007340 <HAL_UART_IRQHandler+0x128>
 800731c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00b      	beq.n	8007340 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2204      	movs	r2, #4
 800732e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007336:	f043 0202 	orr.w	r2, r3, #2
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007344:	f003 0308 	and.w	r3, r3, #8
 8007348:	2b00      	cmp	r3, #0
 800734a:	d017      	beq.n	800737c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800734c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b00      	cmp	r3, #0
 8007356:	d105      	bne.n	8007364 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007358:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800735c:	4b5c      	ldr	r3, [pc, #368]	; (80074d0 <HAL_UART_IRQHandler+0x2b8>)
 800735e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2208      	movs	r2, #8
 800736a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007372:	f043 0208 	orr.w	r2, r3, #8
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800737c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007384:	2b00      	cmp	r3, #0
 8007386:	d012      	beq.n	80073ae <HAL_UART_IRQHandler+0x196>
 8007388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800738c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00c      	beq.n	80073ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800739c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a4:	f043 0220 	orr.w	r2, r3, #32
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 82dd 	beq.w	8007974 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d013      	beq.n	80073ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d105      	bne.n	80073de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	d005      	beq.n	8007412 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800740a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800740e:	2b00      	cmp	r3, #0
 8007410:	d054      	beq.n	80074bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fade 	bl	80089d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d146      	bne.n	80074b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3308      	adds	r3, #8
 800742c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800743c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3308      	adds	r3, #8
 800744e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007452:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800745e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800746a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1d9      	bne.n	8007426 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007478:	2b00      	cmp	r3, #0
 800747a:	d017      	beq.n	80074ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007482:	4a15      	ldr	r2, [pc, #84]	; (80074d8 <HAL_UART_IRQHandler+0x2c0>)
 8007484:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800748c:	4618      	mov	r0, r3
 800748e:	f7fb f845 	bl	800251c <HAL_DMA_Abort_IT>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d019      	beq.n	80074cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800749e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80074a6:	4610      	mov	r0, r2
 80074a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074aa:	e00f      	b.n	80074cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7f9 fae7 	bl	8000a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b2:	e00b      	b.n	80074cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7f9 fae3 	bl	8000a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ba:	e007      	b.n	80074cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7f9 fadf 	bl	8000a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80074ca:	e253      	b.n	8007974 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074cc:	bf00      	nop
    return;
 80074ce:	e251      	b.n	8007974 <HAL_UART_IRQHandler+0x75c>
 80074d0:	10000001 	.word	0x10000001
 80074d4:	04000120 	.word	0x04000120
 80074d8:	08008c87 	.word	0x08008c87

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	f040 81e7 	bne.w	80078b4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80074e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ea:	f003 0310 	and.w	r3, r3, #16
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 81e0 	beq.w	80078b4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 81d9 	beq.w	80078b4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2210      	movs	r2, #16
 8007508:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	f040 8151 	bne.w	80077bc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a96      	ldr	r2, [pc, #600]	; (800777c <HAL_UART_IRQHandler+0x564>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d068      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a93      	ldr	r2, [pc, #588]	; (8007780 <HAL_UART_IRQHandler+0x568>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d061      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a91      	ldr	r2, [pc, #580]	; (8007784 <HAL_UART_IRQHandler+0x56c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d05a      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a8e      	ldr	r2, [pc, #568]	; (8007788 <HAL_UART_IRQHandler+0x570>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d053      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a8c      	ldr	r2, [pc, #560]	; (800778c <HAL_UART_IRQHandler+0x574>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d04c      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a89      	ldr	r2, [pc, #548]	; (8007790 <HAL_UART_IRQHandler+0x578>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d045      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a87      	ldr	r2, [pc, #540]	; (8007794 <HAL_UART_IRQHandler+0x57c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d03e      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a84      	ldr	r2, [pc, #528]	; (8007798 <HAL_UART_IRQHandler+0x580>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d037      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a82      	ldr	r2, [pc, #520]	; (800779c <HAL_UART_IRQHandler+0x584>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d030      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a7f      	ldr	r2, [pc, #508]	; (80077a0 <HAL_UART_IRQHandler+0x588>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d029      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a7d      	ldr	r2, [pc, #500]	; (80077a4 <HAL_UART_IRQHandler+0x58c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d022      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a7a      	ldr	r2, [pc, #488]	; (80077a8 <HAL_UART_IRQHandler+0x590>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d01b      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a78      	ldr	r2, [pc, #480]	; (80077ac <HAL_UART_IRQHandler+0x594>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d014      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a75      	ldr	r2, [pc, #468]	; (80077b0 <HAL_UART_IRQHandler+0x598>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00d      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a73      	ldr	r2, [pc, #460]	; (80077b4 <HAL_UART_IRQHandler+0x59c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d006      	beq.n	80075fa <HAL_UART_IRQHandler+0x3e2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a70      	ldr	r2, [pc, #448]	; (80077b8 <HAL_UART_IRQHandler+0x5a0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d106      	bne.n	8007608 <HAL_UART_IRQHandler+0x3f0>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	b29b      	uxth	r3, r3
 8007606:	e005      	b.n	8007614 <HAL_UART_IRQHandler+0x3fc>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007618:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 81ab 	beq.w	8007978 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007628:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800762c:	429a      	cmp	r2, r3
 800762e:	f080 81a3 	bcs.w	8007978 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007648:	f000 8087 	beq.w	800775a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800767a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800768e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1da      	bne.n	800764c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076a8:	f023 0301 	bic.w	r3, r3, #1
 80076ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e1      	bne.n	8007696 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3308      	adds	r3, #8
 80076d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3308      	adds	r3, #8
 80076f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e3      	bne.n	80076d2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2220      	movs	r2, #32
 800770e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007728:	f023 0310 	bic.w	r3, r3, #16
 800772c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800773a:	65bb      	str	r3, [r7, #88]	; 0x58
 800773c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e4      	bne.n	8007718 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007754:	4618      	mov	r0, r3
 8007756:	f7fa fbc3 	bl	8001ee0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800776c:	b29b      	uxth	r3, r3
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	b29b      	uxth	r3, r3
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f91d 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800777a:	e0fd      	b.n	8007978 <HAL_UART_IRQHandler+0x760>
 800777c:	40020010 	.word	0x40020010
 8007780:	40020028 	.word	0x40020028
 8007784:	40020040 	.word	0x40020040
 8007788:	40020058 	.word	0x40020058
 800778c:	40020070 	.word	0x40020070
 8007790:	40020088 	.word	0x40020088
 8007794:	400200a0 	.word	0x400200a0
 8007798:	400200b8 	.word	0x400200b8
 800779c:	40020410 	.word	0x40020410
 80077a0:	40020428 	.word	0x40020428
 80077a4:	40020440 	.word	0x40020440
 80077a8:	40020458 	.word	0x40020458
 80077ac:	40020470 	.word	0x40020470
 80077b0:	40020488 	.word	0x40020488
 80077b4:	400204a0 	.word	0x400204a0
 80077b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80cf 	beq.w	800797c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80077de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80ca 	beq.w	800797c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800780a:	647b      	str	r3, [r7, #68]	; 0x44
 800780c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e4      	bne.n	80077e8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	623b      	str	r3, [r7, #32]
   return(result);
 800782e:	6a3a      	ldr	r2, [r7, #32]
 8007830:	4b55      	ldr	r3, [pc, #340]	; (8007988 <HAL_UART_IRQHandler+0x770>)
 8007832:	4013      	ands	r3, r2
 8007834:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3308      	adds	r3, #8
 800783e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007842:	633a      	str	r2, [r7, #48]	; 0x30
 8007844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e3      	bne.n	800781e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	60fb      	str	r3, [r7, #12]
   return(result);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0310 	bic.w	r3, r3, #16
 800787e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800788c:	61fb      	str	r3, [r7, #28]
 800788e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	69b9      	ldr	r1, [r7, #24]
 8007892:	69fa      	ldr	r2, [r7, #28]
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	617b      	str	r3, [r7, #20]
   return(result);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e4      	bne.n	800786a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f881 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078b2:	e063      	b.n	800797c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00e      	beq.n	80078de <HAL_UART_IRQHandler+0x6c6>
 80078c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d008      	beq.n	80078de <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80078d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 fa16 	bl	8008d08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078dc:	e051      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d014      	beq.n	8007914 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d105      	bne.n	8007902 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007906:	2b00      	cmp	r3, #0
 8007908:	d03a      	beq.n	8007980 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
    }
    return;
 8007912:	e035      	b.n	8007980 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d009      	beq.n	8007934 <HAL_UART_IRQHandler+0x71c>
 8007920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 f9c0 	bl	8008cb2 <UART_EndTransmit_IT>
    return;
 8007932:	e026      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d009      	beq.n	8007954 <HAL_UART_IRQHandler+0x73c>
 8007940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 f9ef 	bl	8008d30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007952:	e016      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d010      	beq.n	8007982 <HAL_UART_IRQHandler+0x76a>
 8007960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007964:	2b00      	cmp	r3, #0
 8007966:	da0c      	bge.n	8007982 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 f9d7 	bl	8008d1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800796e:	e008      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
      return;
 8007970:	bf00      	nop
 8007972:	e006      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
    return;
 8007974:	bf00      	nop
 8007976:	e004      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
      return;
 8007978:	bf00      	nop
 800797a:	e002      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
      return;
 800797c:	bf00      	nop
 800797e:	e000      	b.n	8007982 <HAL_UART_IRQHandler+0x76a>
    return;
 8007980:	bf00      	nop
  }
}
 8007982:	37e8      	adds	r7, #232	; 0xe8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	effffffe 	.word	0xeffffffe

0800798c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079d0:	b092      	sub	sp, #72	; 0x48
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	431a      	orrs	r2, r3
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4bbe      	ldr	r3, [pc, #760]	; (8007cf4 <UART_SetConfig+0x328>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	6812      	ldr	r2, [r2, #0]
 8007a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4ab3      	ldr	r2, [pc, #716]	; (8007cf8 <UART_SetConfig+0x32c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d004      	beq.n	8007a38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a34:	4313      	orrs	r3, r2
 8007a36:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	4baf      	ldr	r3, [pc, #700]	; (8007cfc <UART_SetConfig+0x330>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a52:	f023 010f 	bic.w	r1, r3, #15
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4aa6      	ldr	r2, [pc, #664]	; (8007d00 <UART_SetConfig+0x334>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d177      	bne.n	8007b5c <UART_SetConfig+0x190>
 8007a6c:	4ba5      	ldr	r3, [pc, #660]	; (8007d04 <UART_SetConfig+0x338>)
 8007a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a74:	2b28      	cmp	r3, #40	; 0x28
 8007a76:	d86d      	bhi.n	8007b54 <UART_SetConfig+0x188>
 8007a78:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <UART_SetConfig+0xb4>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007b25 	.word	0x08007b25
 8007a84:	08007b55 	.word	0x08007b55
 8007a88:	08007b55 	.word	0x08007b55
 8007a8c:	08007b55 	.word	0x08007b55
 8007a90:	08007b55 	.word	0x08007b55
 8007a94:	08007b55 	.word	0x08007b55
 8007a98:	08007b55 	.word	0x08007b55
 8007a9c:	08007b55 	.word	0x08007b55
 8007aa0:	08007b2d 	.word	0x08007b2d
 8007aa4:	08007b55 	.word	0x08007b55
 8007aa8:	08007b55 	.word	0x08007b55
 8007aac:	08007b55 	.word	0x08007b55
 8007ab0:	08007b55 	.word	0x08007b55
 8007ab4:	08007b55 	.word	0x08007b55
 8007ab8:	08007b55 	.word	0x08007b55
 8007abc:	08007b55 	.word	0x08007b55
 8007ac0:	08007b35 	.word	0x08007b35
 8007ac4:	08007b55 	.word	0x08007b55
 8007ac8:	08007b55 	.word	0x08007b55
 8007acc:	08007b55 	.word	0x08007b55
 8007ad0:	08007b55 	.word	0x08007b55
 8007ad4:	08007b55 	.word	0x08007b55
 8007ad8:	08007b55 	.word	0x08007b55
 8007adc:	08007b55 	.word	0x08007b55
 8007ae0:	08007b3d 	.word	0x08007b3d
 8007ae4:	08007b55 	.word	0x08007b55
 8007ae8:	08007b55 	.word	0x08007b55
 8007aec:	08007b55 	.word	0x08007b55
 8007af0:	08007b55 	.word	0x08007b55
 8007af4:	08007b55 	.word	0x08007b55
 8007af8:	08007b55 	.word	0x08007b55
 8007afc:	08007b55 	.word	0x08007b55
 8007b00:	08007b45 	.word	0x08007b45
 8007b04:	08007b55 	.word	0x08007b55
 8007b08:	08007b55 	.word	0x08007b55
 8007b0c:	08007b55 	.word	0x08007b55
 8007b10:	08007b55 	.word	0x08007b55
 8007b14:	08007b55 	.word	0x08007b55
 8007b18:	08007b55 	.word	0x08007b55
 8007b1c:	08007b55 	.word	0x08007b55
 8007b20:	08007b4d 	.word	0x08007b4d
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2a:	e222      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007b2c:	2304      	movs	r3, #4
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b32:	e21e      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007b34:	2308      	movs	r3, #8
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3a:	e21a      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b42:	e216      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007b44:	2320      	movs	r3, #32
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4a:	e212      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007b4c:	2340      	movs	r3, #64	; 0x40
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b52:	e20e      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007b54:	2380      	movs	r3, #128	; 0x80
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5a:	e20a      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a69      	ldr	r2, [pc, #420]	; (8007d08 <UART_SetConfig+0x33c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d130      	bne.n	8007bc8 <UART_SetConfig+0x1fc>
 8007b66:	4b67      	ldr	r3, [pc, #412]	; (8007d04 <UART_SetConfig+0x338>)
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	2b05      	cmp	r3, #5
 8007b70:	d826      	bhi.n	8007bc0 <UART_SetConfig+0x1f4>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <UART_SetConfig+0x1ac>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007b91 	.word	0x08007b91
 8007b7c:	08007b99 	.word	0x08007b99
 8007b80:	08007ba1 	.word	0x08007ba1
 8007b84:	08007ba9 	.word	0x08007ba9
 8007b88:	08007bb1 	.word	0x08007bb1
 8007b8c:	08007bb9 	.word	0x08007bb9
 8007b90:	2300      	movs	r3, #0
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b96:	e1ec      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007b98:	2304      	movs	r3, #4
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9e:	e1e8      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007ba0:	2308      	movs	r3, #8
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba6:	e1e4      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007ba8:	2310      	movs	r3, #16
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bae:	e1e0      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007bb0:	2320      	movs	r3, #32
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb6:	e1dc      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bbe:	e1d8      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007bc0:	2380      	movs	r3, #128	; 0x80
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc6:	e1d4      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a4f      	ldr	r2, [pc, #316]	; (8007d0c <UART_SetConfig+0x340>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d130      	bne.n	8007c34 <UART_SetConfig+0x268>
 8007bd2:	4b4c      	ldr	r3, [pc, #304]	; (8007d04 <UART_SetConfig+0x338>)
 8007bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	2b05      	cmp	r3, #5
 8007bdc:	d826      	bhi.n	8007c2c <UART_SetConfig+0x260>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <UART_SetConfig+0x218>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007bfd 	.word	0x08007bfd
 8007be8:	08007c05 	.word	0x08007c05
 8007bec:	08007c0d 	.word	0x08007c0d
 8007bf0:	08007c15 	.word	0x08007c15
 8007bf4:	08007c1d 	.word	0x08007c1d
 8007bf8:	08007c25 	.word	0x08007c25
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e1b6      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c04:	2304      	movs	r3, #4
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e1b2      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e1ae      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c14:	2310      	movs	r3, #16
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1a:	e1aa      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c22:	e1a6      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c24:	2340      	movs	r3, #64	; 0x40
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2a:	e1a2      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c2c:	2380      	movs	r3, #128	; 0x80
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c32:	e19e      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a35      	ldr	r2, [pc, #212]	; (8007d10 <UART_SetConfig+0x344>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d130      	bne.n	8007ca0 <UART_SetConfig+0x2d4>
 8007c3e:	4b31      	ldr	r3, [pc, #196]	; (8007d04 <UART_SetConfig+0x338>)
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	d826      	bhi.n	8007c98 <UART_SetConfig+0x2cc>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0x284>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c69 	.word	0x08007c69
 8007c54:	08007c71 	.word	0x08007c71
 8007c58:	08007c79 	.word	0x08007c79
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c89 	.word	0x08007c89
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e180      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e17c      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e178      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c86:	e174      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c88:	2320      	movs	r3, #32
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e170      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c90:	2340      	movs	r3, #64	; 0x40
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c96:	e16c      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007c98:	2380      	movs	r3, #128	; 0x80
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9e:	e168      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1b      	ldr	r2, [pc, #108]	; (8007d14 <UART_SetConfig+0x348>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d142      	bne.n	8007d30 <UART_SetConfig+0x364>
 8007caa:	4b16      	ldr	r3, [pc, #88]	; (8007d04 <UART_SetConfig+0x338>)
 8007cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	d838      	bhi.n	8007d28 <UART_SetConfig+0x35c>
 8007cb6:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <UART_SetConfig+0x2f0>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007cd5 	.word	0x08007cd5
 8007cc0:	08007cdd 	.word	0x08007cdd
 8007cc4:	08007ce5 	.word	0x08007ce5
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007d19 	.word	0x08007d19
 8007cd0:	08007d21 	.word	0x08007d21
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e14a      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007cdc:	2304      	movs	r3, #4
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e146      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cea:	e142      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007cec:	2310      	movs	r3, #16
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cf2:	e13e      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007cf4:	cfff69f3 	.word	0xcfff69f3
 8007cf8:	58000c00 	.word	0x58000c00
 8007cfc:	11fff4ff 	.word	0x11fff4ff
 8007d00:	40011000 	.word	0x40011000
 8007d04:	58024400 	.word	0x58024400
 8007d08:	40004400 	.word	0x40004400
 8007d0c:	40004800 	.word	0x40004800
 8007d10:	40004c00 	.word	0x40004c00
 8007d14:	40005000 	.word	0x40005000
 8007d18:	2320      	movs	r3, #32
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1e:	e128      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007d20:	2340      	movs	r3, #64	; 0x40
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e124      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007d28:	2380      	movs	r3, #128	; 0x80
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e120      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4acb      	ldr	r2, [pc, #812]	; (8008064 <UART_SetConfig+0x698>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d176      	bne.n	8007e28 <UART_SetConfig+0x45c>
 8007d3a:	4bcb      	ldr	r3, [pc, #812]	; (8008068 <UART_SetConfig+0x69c>)
 8007d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d42:	2b28      	cmp	r3, #40	; 0x28
 8007d44:	d86c      	bhi.n	8007e20 <UART_SetConfig+0x454>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <UART_SetConfig+0x380>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007df1 	.word	0x08007df1
 8007d50:	08007e21 	.word	0x08007e21
 8007d54:	08007e21 	.word	0x08007e21
 8007d58:	08007e21 	.word	0x08007e21
 8007d5c:	08007e21 	.word	0x08007e21
 8007d60:	08007e21 	.word	0x08007e21
 8007d64:	08007e21 	.word	0x08007e21
 8007d68:	08007e21 	.word	0x08007e21
 8007d6c:	08007df9 	.word	0x08007df9
 8007d70:	08007e21 	.word	0x08007e21
 8007d74:	08007e21 	.word	0x08007e21
 8007d78:	08007e21 	.word	0x08007e21
 8007d7c:	08007e21 	.word	0x08007e21
 8007d80:	08007e21 	.word	0x08007e21
 8007d84:	08007e21 	.word	0x08007e21
 8007d88:	08007e21 	.word	0x08007e21
 8007d8c:	08007e01 	.word	0x08007e01
 8007d90:	08007e21 	.word	0x08007e21
 8007d94:	08007e21 	.word	0x08007e21
 8007d98:	08007e21 	.word	0x08007e21
 8007d9c:	08007e21 	.word	0x08007e21
 8007da0:	08007e21 	.word	0x08007e21
 8007da4:	08007e21 	.word	0x08007e21
 8007da8:	08007e21 	.word	0x08007e21
 8007dac:	08007e09 	.word	0x08007e09
 8007db0:	08007e21 	.word	0x08007e21
 8007db4:	08007e21 	.word	0x08007e21
 8007db8:	08007e21 	.word	0x08007e21
 8007dbc:	08007e21 	.word	0x08007e21
 8007dc0:	08007e21 	.word	0x08007e21
 8007dc4:	08007e21 	.word	0x08007e21
 8007dc8:	08007e21 	.word	0x08007e21
 8007dcc:	08007e11 	.word	0x08007e11
 8007dd0:	08007e21 	.word	0x08007e21
 8007dd4:	08007e21 	.word	0x08007e21
 8007dd8:	08007e21 	.word	0x08007e21
 8007ddc:	08007e21 	.word	0x08007e21
 8007de0:	08007e21 	.word	0x08007e21
 8007de4:	08007e21 	.word	0x08007e21
 8007de8:	08007e21 	.word	0x08007e21
 8007dec:	08007e19 	.word	0x08007e19
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df6:	e0bc      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e0b8      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e0b4      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e0b0      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e10:	2320      	movs	r3, #32
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e0ac      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e18:	2340      	movs	r3, #64	; 0x40
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e0a8      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e20:	2380      	movs	r3, #128	; 0x80
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e0a4      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a8f      	ldr	r2, [pc, #572]	; (800806c <UART_SetConfig+0x6a0>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d130      	bne.n	8007e94 <UART_SetConfig+0x4c8>
 8007e32:	4b8d      	ldr	r3, [pc, #564]	; (8008068 <UART_SetConfig+0x69c>)
 8007e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	d826      	bhi.n	8007e8c <UART_SetConfig+0x4c0>
 8007e3e:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <UART_SetConfig+0x478>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e5d 	.word	0x08007e5d
 8007e48:	08007e65 	.word	0x08007e65
 8007e4c:	08007e6d 	.word	0x08007e6d
 8007e50:	08007e75 	.word	0x08007e75
 8007e54:	08007e7d 	.word	0x08007e7d
 8007e58:	08007e85 	.word	0x08007e85
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e62:	e086      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e64:	2304      	movs	r3, #4
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6a:	e082      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e6c:	2308      	movs	r3, #8
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e72:	e07e      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e74:	2310      	movs	r3, #16
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7a:	e07a      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e7c:	2320      	movs	r3, #32
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e82:	e076      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e84:	2340      	movs	r3, #64	; 0x40
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e8a:	e072      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e8c:	2380      	movs	r3, #128	; 0x80
 8007e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e92:	e06e      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a75      	ldr	r2, [pc, #468]	; (8008070 <UART_SetConfig+0x6a4>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d130      	bne.n	8007f00 <UART_SetConfig+0x534>
 8007e9e:	4b72      	ldr	r3, [pc, #456]	; (8008068 <UART_SetConfig+0x69c>)
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	2b05      	cmp	r3, #5
 8007ea8:	d826      	bhi.n	8007ef8 <UART_SetConfig+0x52c>
 8007eaa:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <UART_SetConfig+0x4e4>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007ec9 	.word	0x08007ec9
 8007eb4:	08007ed1 	.word	0x08007ed1
 8007eb8:	08007ed9 	.word	0x08007ed9
 8007ebc:	08007ee1 	.word	0x08007ee1
 8007ec0:	08007ee9 	.word	0x08007ee9
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ece:	e050      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007ed0:	2304      	movs	r3, #4
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed6:	e04c      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e048      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee6:	e044      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007ee8:	2320      	movs	r3, #32
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eee:	e040      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007ef0:	2340      	movs	r3, #64	; 0x40
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ef6:	e03c      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007ef8:	2380      	movs	r3, #128	; 0x80
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007efe:	e038      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a5b      	ldr	r2, [pc, #364]	; (8008074 <UART_SetConfig+0x6a8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d130      	bne.n	8007f6c <UART_SetConfig+0x5a0>
 8007f0a:	4b57      	ldr	r3, [pc, #348]	; (8008068 <UART_SetConfig+0x69c>)
 8007f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d826      	bhi.n	8007f64 <UART_SetConfig+0x598>
 8007f16:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <UART_SetConfig+0x550>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08007f35 	.word	0x08007f35
 8007f20:	08007f3d 	.word	0x08007f3d
 8007f24:	08007f45 	.word	0x08007f45
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f55 	.word	0x08007f55
 8007f30:	08007f5d 	.word	0x08007f5d
 8007f34:	2302      	movs	r3, #2
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3a:	e01a      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f42:	e016      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007f44:	2308      	movs	r3, #8
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4a:	e012      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f52:	e00e      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007f54:	2320      	movs	r3, #32
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f5a:	e00a      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007f5c:	2340      	movs	r3, #64	; 0x40
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f62:	e006      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007f64:	2380      	movs	r3, #128	; 0x80
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f6a:	e002      	b.n	8007f72 <UART_SetConfig+0x5a6>
 8007f6c:	2380      	movs	r3, #128	; 0x80
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a3f      	ldr	r2, [pc, #252]	; (8008074 <UART_SetConfig+0x6a8>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	f040 80f8 	bne.w	800816e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	dc46      	bgt.n	8008014 <UART_SetConfig+0x648>
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	f2c0 8082 	blt.w	8008090 <UART_SetConfig+0x6c4>
 8007f8c:	3b02      	subs	r3, #2
 8007f8e:	2b1e      	cmp	r3, #30
 8007f90:	d87e      	bhi.n	8008090 <UART_SetConfig+0x6c4>
 8007f92:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <UART_SetConfig+0x5cc>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	0800801b 	.word	0x0800801b
 8007f9c:	08008091 	.word	0x08008091
 8007fa0:	08008023 	.word	0x08008023
 8007fa4:	08008091 	.word	0x08008091
 8007fa8:	08008091 	.word	0x08008091
 8007fac:	08008091 	.word	0x08008091
 8007fb0:	08008033 	.word	0x08008033
 8007fb4:	08008091 	.word	0x08008091
 8007fb8:	08008091 	.word	0x08008091
 8007fbc:	08008091 	.word	0x08008091
 8007fc0:	08008091 	.word	0x08008091
 8007fc4:	08008091 	.word	0x08008091
 8007fc8:	08008091 	.word	0x08008091
 8007fcc:	08008091 	.word	0x08008091
 8007fd0:	08008043 	.word	0x08008043
 8007fd4:	08008091 	.word	0x08008091
 8007fd8:	08008091 	.word	0x08008091
 8007fdc:	08008091 	.word	0x08008091
 8007fe0:	08008091 	.word	0x08008091
 8007fe4:	08008091 	.word	0x08008091
 8007fe8:	08008091 	.word	0x08008091
 8007fec:	08008091 	.word	0x08008091
 8007ff0:	08008091 	.word	0x08008091
 8007ff4:	08008091 	.word	0x08008091
 8007ff8:	08008091 	.word	0x08008091
 8007ffc:	08008091 	.word	0x08008091
 8008000:	08008091 	.word	0x08008091
 8008004:	08008091 	.word	0x08008091
 8008008:	08008091 	.word	0x08008091
 800800c:	08008091 	.word	0x08008091
 8008010:	08008083 	.word	0x08008083
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d037      	beq.n	8008088 <UART_SetConfig+0x6bc>
 8008018:	e03a      	b.n	8008090 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800801a:	f7fe fbb1 	bl	8006780 <HAL_RCCEx_GetD3PCLK1Freq>
 800801e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008020:	e03c      	b.n	800809c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fbc0 	bl	80067ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008030:	e034      	b.n	800809c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008032:	f107 0318 	add.w	r3, r7, #24
 8008036:	4618      	mov	r0, r3
 8008038:	f7fe fd0c 	bl	8006a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008040:	e02c      	b.n	800809c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008042:	4b09      	ldr	r3, [pc, #36]	; (8008068 <UART_SetConfig+0x69c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d016      	beq.n	800807c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800804e:	4b06      	ldr	r3, [pc, #24]	; (8008068 <UART_SetConfig+0x69c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	08db      	lsrs	r3, r3, #3
 8008054:	f003 0303 	and.w	r3, r3, #3
 8008058:	4a07      	ldr	r2, [pc, #28]	; (8008078 <UART_SetConfig+0x6ac>)
 800805a:	fa22 f303 	lsr.w	r3, r2, r3
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008060:	e01c      	b.n	800809c <UART_SetConfig+0x6d0>
 8008062:	bf00      	nop
 8008064:	40011400 	.word	0x40011400
 8008068:	58024400 	.word	0x58024400
 800806c:	40007800 	.word	0x40007800
 8008070:	40007c00 	.word	0x40007c00
 8008074:	58000c00 	.word	0x58000c00
 8008078:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800807c:	4b9d      	ldr	r3, [pc, #628]	; (80082f4 <UART_SetConfig+0x928>)
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008080:	e00c      	b.n	800809c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008082:	4b9d      	ldr	r3, [pc, #628]	; (80082f8 <UART_SetConfig+0x92c>)
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008086:	e009      	b.n	800809c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800808e:	e005      	b.n	800809c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800809a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800809c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 81de 	beq.w	8008460 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	4a94      	ldr	r2, [pc, #592]	; (80082fc <UART_SetConfig+0x930>)
 80080aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ae:	461a      	mov	r2, r3
 80080b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	4613      	mov	r3, r2
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	4413      	add	r3, r2
 80080c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d305      	bcc.n	80080d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d903      	bls.n	80080dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80080da:	e1c1      	b.n	8008460 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080de:	2200      	movs	r2, #0
 80080e0:	60bb      	str	r3, [r7, #8]
 80080e2:	60fa      	str	r2, [r7, #12]
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	4a84      	ldr	r2, [pc, #528]	; (80082fc <UART_SetConfig+0x930>)
 80080ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	2200      	movs	r2, #0
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	607a      	str	r2, [r7, #4]
 80080f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080fe:	f7f8 f93f 	bl	8000380 <__aeabi_uldivmod>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4610      	mov	r0, r2
 8008108:	4619      	mov	r1, r3
 800810a:	f04f 0200 	mov.w	r2, #0
 800810e:	f04f 0300 	mov.w	r3, #0
 8008112:	020b      	lsls	r3, r1, #8
 8008114:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008118:	0202      	lsls	r2, r0, #8
 800811a:	6979      	ldr	r1, [r7, #20]
 800811c:	6849      	ldr	r1, [r1, #4]
 800811e:	0849      	lsrs	r1, r1, #1
 8008120:	2000      	movs	r0, #0
 8008122:	460c      	mov	r4, r1
 8008124:	4605      	mov	r5, r0
 8008126:	eb12 0804 	adds.w	r8, r2, r4
 800812a:	eb43 0905 	adc.w	r9, r3, r5
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	469a      	mov	sl, r3
 8008136:	4693      	mov	fp, r2
 8008138:	4652      	mov	r2, sl
 800813a:	465b      	mov	r3, fp
 800813c:	4640      	mov	r0, r8
 800813e:	4649      	mov	r1, r9
 8008140:	f7f8 f91e 	bl	8000380 <__aeabi_uldivmod>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4613      	mov	r3, r2
 800814a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008152:	d308      	bcc.n	8008166 <UART_SetConfig+0x79a>
 8008154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800815a:	d204      	bcs.n	8008166 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008162:	60da      	str	r2, [r3, #12]
 8008164:	e17c      	b.n	8008460 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800816c:	e178      	b.n	8008460 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008176:	f040 80c5 	bne.w	8008304 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800817a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800817e:	2b20      	cmp	r3, #32
 8008180:	dc48      	bgt.n	8008214 <UART_SetConfig+0x848>
 8008182:	2b00      	cmp	r3, #0
 8008184:	db7b      	blt.n	800827e <UART_SetConfig+0x8b2>
 8008186:	2b20      	cmp	r3, #32
 8008188:	d879      	bhi.n	800827e <UART_SetConfig+0x8b2>
 800818a:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <UART_SetConfig+0x7c4>)
 800818c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008190:	0800821b 	.word	0x0800821b
 8008194:	08008223 	.word	0x08008223
 8008198:	0800827f 	.word	0x0800827f
 800819c:	0800827f 	.word	0x0800827f
 80081a0:	0800822b 	.word	0x0800822b
 80081a4:	0800827f 	.word	0x0800827f
 80081a8:	0800827f 	.word	0x0800827f
 80081ac:	0800827f 	.word	0x0800827f
 80081b0:	0800823b 	.word	0x0800823b
 80081b4:	0800827f 	.word	0x0800827f
 80081b8:	0800827f 	.word	0x0800827f
 80081bc:	0800827f 	.word	0x0800827f
 80081c0:	0800827f 	.word	0x0800827f
 80081c4:	0800827f 	.word	0x0800827f
 80081c8:	0800827f 	.word	0x0800827f
 80081cc:	0800827f 	.word	0x0800827f
 80081d0:	0800824b 	.word	0x0800824b
 80081d4:	0800827f 	.word	0x0800827f
 80081d8:	0800827f 	.word	0x0800827f
 80081dc:	0800827f 	.word	0x0800827f
 80081e0:	0800827f 	.word	0x0800827f
 80081e4:	0800827f 	.word	0x0800827f
 80081e8:	0800827f 	.word	0x0800827f
 80081ec:	0800827f 	.word	0x0800827f
 80081f0:	0800827f 	.word	0x0800827f
 80081f4:	0800827f 	.word	0x0800827f
 80081f8:	0800827f 	.word	0x0800827f
 80081fc:	0800827f 	.word	0x0800827f
 8008200:	0800827f 	.word	0x0800827f
 8008204:	0800827f 	.word	0x0800827f
 8008208:	0800827f 	.word	0x0800827f
 800820c:	0800827f 	.word	0x0800827f
 8008210:	08008271 	.word	0x08008271
 8008214:	2b40      	cmp	r3, #64	; 0x40
 8008216:	d02e      	beq.n	8008276 <UART_SetConfig+0x8aa>
 8008218:	e031      	b.n	800827e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800821a:	f7fd f87b 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 800821e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008220:	e033      	b.n	800828a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008222:	f7fd f88d 	bl	8005340 <HAL_RCC_GetPCLK2Freq>
 8008226:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008228:	e02f      	b.n	800828a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800822a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800822e:	4618      	mov	r0, r3
 8008230:	f7fe fabc 	bl	80067ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008238:	e027      	b.n	800828a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800823a:	f107 0318 	add.w	r3, r7, #24
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fc08 	bl	8006a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008248:	e01f      	b.n	800828a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800824a:	4b2d      	ldr	r3, [pc, #180]	; (8008300 <UART_SetConfig+0x934>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	d009      	beq.n	800826a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008256:	4b2a      	ldr	r3, [pc, #168]	; (8008300 <UART_SetConfig+0x934>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	08db      	lsrs	r3, r3, #3
 800825c:	f003 0303 	and.w	r3, r3, #3
 8008260:	4a24      	ldr	r2, [pc, #144]	; (80082f4 <UART_SetConfig+0x928>)
 8008262:	fa22 f303 	lsr.w	r3, r2, r3
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008268:	e00f      	b.n	800828a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800826a:	4b22      	ldr	r3, [pc, #136]	; (80082f4 <UART_SetConfig+0x928>)
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826e:	e00c      	b.n	800828a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008270:	4b21      	ldr	r3, [pc, #132]	; (80082f8 <UART_SetConfig+0x92c>)
 8008272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008274:	e009      	b.n	800828a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800827c:	e005      	b.n	800828a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800828a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 80e7 	beq.w	8008460 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	4a19      	ldr	r2, [pc, #100]	; (80082fc <UART_SetConfig+0x930>)
 8008298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800829c:	461a      	mov	r2, r3
 800829e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80082a4:	005a      	lsls	r2, r3, #1
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	085b      	lsrs	r3, r3, #1
 80082ac:	441a      	add	r2, r3
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ba:	2b0f      	cmp	r3, #15
 80082bc:	d916      	bls.n	80082ec <UART_SetConfig+0x920>
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c4:	d212      	bcs.n	80082ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	f023 030f 	bic.w	r3, r3, #15
 80082ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	085b      	lsrs	r3, r3, #1
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	b29a      	uxth	r2, r3
 80082dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082de:	4313      	orrs	r3, r2
 80082e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80082e8:	60da      	str	r2, [r3, #12]
 80082ea:	e0b9      	b.n	8008460 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80082f2:	e0b5      	b.n	8008460 <UART_SetConfig+0xa94>
 80082f4:	03d09000 	.word	0x03d09000
 80082f8:	003d0900 	.word	0x003d0900
 80082fc:	080098d4 	.word	0x080098d4
 8008300:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008304:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008308:	2b20      	cmp	r3, #32
 800830a:	dc49      	bgt.n	80083a0 <UART_SetConfig+0x9d4>
 800830c:	2b00      	cmp	r3, #0
 800830e:	db7c      	blt.n	800840a <UART_SetConfig+0xa3e>
 8008310:	2b20      	cmp	r3, #32
 8008312:	d87a      	bhi.n	800840a <UART_SetConfig+0xa3e>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <UART_SetConfig+0x950>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	080083a7 	.word	0x080083a7
 8008320:	080083af 	.word	0x080083af
 8008324:	0800840b 	.word	0x0800840b
 8008328:	0800840b 	.word	0x0800840b
 800832c:	080083b7 	.word	0x080083b7
 8008330:	0800840b 	.word	0x0800840b
 8008334:	0800840b 	.word	0x0800840b
 8008338:	0800840b 	.word	0x0800840b
 800833c:	080083c7 	.word	0x080083c7
 8008340:	0800840b 	.word	0x0800840b
 8008344:	0800840b 	.word	0x0800840b
 8008348:	0800840b 	.word	0x0800840b
 800834c:	0800840b 	.word	0x0800840b
 8008350:	0800840b 	.word	0x0800840b
 8008354:	0800840b 	.word	0x0800840b
 8008358:	0800840b 	.word	0x0800840b
 800835c:	080083d7 	.word	0x080083d7
 8008360:	0800840b 	.word	0x0800840b
 8008364:	0800840b 	.word	0x0800840b
 8008368:	0800840b 	.word	0x0800840b
 800836c:	0800840b 	.word	0x0800840b
 8008370:	0800840b 	.word	0x0800840b
 8008374:	0800840b 	.word	0x0800840b
 8008378:	0800840b 	.word	0x0800840b
 800837c:	0800840b 	.word	0x0800840b
 8008380:	0800840b 	.word	0x0800840b
 8008384:	0800840b 	.word	0x0800840b
 8008388:	0800840b 	.word	0x0800840b
 800838c:	0800840b 	.word	0x0800840b
 8008390:	0800840b 	.word	0x0800840b
 8008394:	0800840b 	.word	0x0800840b
 8008398:	0800840b 	.word	0x0800840b
 800839c:	080083fd 	.word	0x080083fd
 80083a0:	2b40      	cmp	r3, #64	; 0x40
 80083a2:	d02e      	beq.n	8008402 <UART_SetConfig+0xa36>
 80083a4:	e031      	b.n	800840a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a6:	f7fc ffb5 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 80083aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083ac:	e033      	b.n	8008416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083ae:	f7fc ffc7 	bl	8005340 <HAL_RCC_GetPCLK2Freq>
 80083b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083b4:	e02f      	b.n	8008416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe f9f6 	bl	80067ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c4:	e027      	b.n	8008416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083c6:	f107 0318 	add.w	r3, r7, #24
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe fb42 	bl	8006a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d4:	e01f      	b.n	8008416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083d6:	4b2d      	ldr	r3, [pc, #180]	; (800848c <UART_SetConfig+0xac0>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083e2:	4b2a      	ldr	r3, [pc, #168]	; (800848c <UART_SetConfig+0xac0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	08db      	lsrs	r3, r3, #3
 80083e8:	f003 0303 	and.w	r3, r3, #3
 80083ec:	4a28      	ldr	r2, [pc, #160]	; (8008490 <UART_SetConfig+0xac4>)
 80083ee:	fa22 f303 	lsr.w	r3, r2, r3
 80083f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083f4:	e00f      	b.n	8008416 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80083f6:	4b26      	ldr	r3, [pc, #152]	; (8008490 <UART_SetConfig+0xac4>)
 80083f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083fa:	e00c      	b.n	8008416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083fc:	4b25      	ldr	r3, [pc, #148]	; (8008494 <UART_SetConfig+0xac8>)
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008400:	e009      	b.n	8008416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008408:	e005      	b.n	8008416 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008414:	bf00      	nop
    }

    if (pclk != 0U)
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d021      	beq.n	8008460 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	4a1d      	ldr	r2, [pc, #116]	; (8008498 <UART_SetConfig+0xacc>)
 8008422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008426:	461a      	mov	r2, r3
 8008428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800842a:	fbb3 f2f2 	udiv	r2, r3, r2
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	441a      	add	r2, r3
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	fbb2 f3f3 	udiv	r3, r2, r3
 800843e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	2b0f      	cmp	r3, #15
 8008444:	d909      	bls.n	800845a <UART_SetConfig+0xa8e>
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800844c:	d205      	bcs.n	800845a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008450:	b29a      	uxth	r2, r3
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	60da      	str	r2, [r3, #12]
 8008458:	e002      	b.n	8008460 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2201      	movs	r2, #1
 8008464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2201      	movs	r2, #1
 800846c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2200      	movs	r2, #0
 8008474:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2200      	movs	r2, #0
 800847a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800847c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008480:	4618      	mov	r0, r3
 8008482:	3748      	adds	r7, #72	; 0x48
 8008484:	46bd      	mov	sp, r7
 8008486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800848a:	bf00      	nop
 800848c:	58024400 	.word	0x58024400
 8008490:	03d09000 	.word	0x03d09000
 8008494:	003d0900 	.word	0x003d0900
 8008498:	080098d4 	.word	0x080098d4

0800849c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00a      	beq.n	80084c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00a      	beq.n	80084e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008530:	f003 0310 	and.w	r3, r3, #16
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00a      	beq.n	800854e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008552:	f003 0320 	and.w	r3, r3, #32
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	430a      	orrs	r2, r1
 800856e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01a      	beq.n	80085b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800859a:	d10a      	bne.n	80085b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	605a      	str	r2, [r3, #4]
  }
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b098      	sub	sp, #96	; 0x60
 80085e4:	af02      	add	r7, sp, #8
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085f0:	f7f8 fd64 	bl	80010bc <HAL_GetTick>
 80085f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0308 	and.w	r3, r3, #8
 8008600:	2b08      	cmp	r3, #8
 8008602:	d12f      	bne.n	8008664 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800860c:	2200      	movs	r2, #0
 800860e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f88e 	bl	8008734 <UART_WaitOnFlagUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d022      	beq.n	8008664 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800862c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008632:	653b      	str	r3, [r7, #80]	; 0x50
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800863c:	647b      	str	r3, [r7, #68]	; 0x44
 800863e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800864a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e6      	bne.n	800861e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2220      	movs	r2, #32
 8008654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e063      	b.n	800872c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0304 	and.w	r3, r3, #4
 800866e:	2b04      	cmp	r3, #4
 8008670:	d149      	bne.n	8008706 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800867a:	2200      	movs	r2, #0
 800867c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f857 	bl	8008734 <UART_WaitOnFlagUntilTimeout>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d03c      	beq.n	8008706 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	623b      	str	r3, [r7, #32]
   return(result);
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086aa:	633b      	str	r3, [r7, #48]	; 0x30
 80086ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e6      	bne.n	800868c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3308      	adds	r3, #8
 80086c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f023 0301 	bic.w	r3, r3, #1
 80086d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3308      	adds	r3, #8
 80086dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086de:	61fa      	str	r2, [r7, #28]
 80086e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	69b9      	ldr	r1, [r7, #24]
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	617b      	str	r3, [r7, #20]
   return(result);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e5      	bne.n	80086be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e012      	b.n	800872c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2220      	movs	r2, #32
 800870a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3758      	adds	r7, #88	; 0x58
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	4613      	mov	r3, r2
 8008742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008744:	e049      	b.n	80087da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800874c:	d045      	beq.n	80087da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800874e:	f7f8 fcb5 	bl	80010bc <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	429a      	cmp	r2, r3
 800875c:	d302      	bcc.n	8008764 <UART_WaitOnFlagUntilTimeout+0x30>
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e048      	b.n	80087fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	d031      	beq.n	80087da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	69db      	ldr	r3, [r3, #28]
 800877c:	f003 0308 	and.w	r3, r3, #8
 8008780:	2b08      	cmp	r3, #8
 8008782:	d110      	bne.n	80087a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2208      	movs	r2, #8
 800878a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f921 	bl	80089d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2208      	movs	r2, #8
 8008796:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e029      	b.n	80087fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b4:	d111      	bne.n	80087da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f907 	bl	80089d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e00f      	b.n	80087fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69da      	ldr	r2, [r3, #28]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4013      	ands	r3, r2
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	bf0c      	ite	eq
 80087ea:	2301      	moveq	r3, #1
 80087ec:	2300      	movne	r3, #0
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	461a      	mov	r2, r3
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d0a6      	beq.n	8008746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b096      	sub	sp, #88	; 0x58
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	88fa      	ldrh	r2, [r7, #6]
 800881c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2222      	movs	r2, #34	; 0x22
 800882c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008836:	2b00      	cmp	r3, #0
 8008838:	d02d      	beq.n	8008896 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008840:	4a40      	ldr	r2, [pc, #256]	; (8008944 <UART_Start_Receive_DMA+0x140>)
 8008842:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800884a:	4a3f      	ldr	r2, [pc, #252]	; (8008948 <UART_Start_Receive_DMA+0x144>)
 800884c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008854:	4a3d      	ldr	r2, [pc, #244]	; (800894c <UART_Start_Receive_DMA+0x148>)
 8008856:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800885e:	2200      	movs	r2, #0
 8008860:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3324      	adds	r3, #36	; 0x24
 800886e:	4619      	mov	r1, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008874:	461a      	mov	r2, r3
 8008876:	88fb      	ldrh	r3, [r7, #6]
 8008878:	f7f9 f8c8 	bl	8001a0c <HAL_DMA_Start_IT>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d009      	beq.n	8008896 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2210      	movs	r2, #16
 8008886:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2220      	movs	r2, #32
 800888e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e051      	b.n	800893a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d018      	beq.n	80088d0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a6:	e853 3f00 	ldrex	r3, [r3]
 80088aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088b2:	657b      	str	r3, [r7, #84]	; 0x54
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80088be:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088c4:	e841 2300 	strex	r3, r2, [r1]
 80088c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1e6      	bne.n	800889e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3308      	adds	r3, #8
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	f043 0301 	orr.w	r3, r3, #1
 80088e6:	653b      	str	r3, [r7, #80]	; 0x50
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3308      	adds	r3, #8
 80088ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088f0:	637a      	str	r2, [r7, #52]	; 0x34
 80088f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e5      	bne.n	80088d0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3308      	adds	r3, #8
 800890a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	613b      	str	r3, [r7, #16]
   return(result);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800891a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3308      	adds	r3, #8
 8008922:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008924:	623a      	str	r2, [r7, #32]
 8008926:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	69f9      	ldr	r1, [r7, #28]
 800892a:	6a3a      	ldr	r2, [r7, #32]
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	61bb      	str	r3, [r7, #24]
   return(result);
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e5      	bne.n	8008904 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3758      	adds	r7, #88	; 0x58
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	08008aa1 	.word	0x08008aa1
 8008948:	08008bc9 	.word	0x08008bc9
 800894c:	08008c07 	.word	0x08008c07

08008950 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008950:	b480      	push	{r7}
 8008952:	b08f      	sub	sp, #60	; 0x3c
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	61fb      	str	r3, [r7, #28]
   return(result);
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800896c:	637b      	str	r3, [r7, #52]	; 0x34
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008978:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800897c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e6      	bne.n	8008958 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3308      	adds	r3, #8
 8008990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	60bb      	str	r3, [r7, #8]
   return(result);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80089a0:	633b      	str	r3, [r7, #48]	; 0x30
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3308      	adds	r3, #8
 80089a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089aa:	61ba      	str	r2, [r7, #24]
 80089ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ae:	6979      	ldr	r1, [r7, #20]
 80089b0:	69ba      	ldr	r2, [r7, #24]
 80089b2:	e841 2300 	strex	r3, r2, [r1]
 80089b6:	613b      	str	r3, [r7, #16]
   return(result);
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e5      	bne.n	800898a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80089c6:	bf00      	nop
 80089c8:	373c      	adds	r7, #60	; 0x3c
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
	...

080089d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b095      	sub	sp, #84	; 0x54
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e4:	e853 3f00 	ldrex	r3, [r3]
 80089e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089fa:	643b      	str	r3, [r7, #64]	; 0x40
 80089fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a02:	e841 2300 	strex	r3, r2, [r1]
 8008a06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1e6      	bne.n	80089dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3308      	adds	r3, #8
 8008a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	4b1e      	ldr	r3, [pc, #120]	; (8008a9c <UART_EndRxTransfer+0xc8>)
 8008a22:	4013      	ands	r3, r2
 8008a24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e5      	bne.n	8008a0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d118      	bne.n	8008a7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f023 0310 	bic.w	r3, r3, #16
 8008a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	461a      	mov	r2, r3
 8008a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a68:	61bb      	str	r3, [r7, #24]
 8008a6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6c:	6979      	ldr	r1, [r7, #20]
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	e841 2300 	strex	r3, r2, [r1]
 8008a74:	613b      	str	r3, [r7, #16]
   return(result);
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e6      	bne.n	8008a4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008a90:	bf00      	nop
 8008a92:	3754      	adds	r7, #84	; 0x54
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	effffffe 	.word	0xeffffffe

08008aa0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b09c      	sub	sp, #112	; 0x70
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab6:	d071      	beq.n	8008b9c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ade:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ae0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e6      	bne.n	8008ac0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3308      	adds	r3, #8
 8008af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b04:	f023 0301 	bic.w	r3, r3, #1
 8008b08:	667b      	str	r3, [r7, #100]	; 0x64
 8008b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	3308      	adds	r3, #8
 8008b10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b12:	647a      	str	r2, [r7, #68]	; 0x44
 8008b14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e5      	bne.n	8008af2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	623b      	str	r3, [r7, #32]
   return(result);
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b3c:	663b      	str	r3, [r7, #96]	; 0x60
 8008b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3308      	adds	r3, #8
 8008b44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b46:	633a      	str	r2, [r7, #48]	; 0x30
 8008b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e5      	bne.n	8008b26 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d118      	bne.n	8008b9c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	e853 3f00 	ldrex	r3, [r3]
 8008b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f023 0310 	bic.w	r3, r3, #16
 8008b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b88:	61fb      	str	r3, [r7, #28]
 8008b8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	69b9      	ldr	r1, [r7, #24]
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	e841 2300 	strex	r3, r2, [r1]
 8008b94:	617b      	str	r3, [r7, #20]
   return(result);
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e6      	bne.n	8008b6a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d107      	bne.n	8008bba <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008bb4:	f7fe fefe 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bb8:	e002      	b.n	8008bc0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008bba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008bbc:	f7f7 ff4c 	bl	8000a58 <HAL_UART_RxCpltCallback>
}
 8008bc0:	bf00      	nop
 8008bc2:	3770      	adds	r7, #112	; 0x70
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d109      	bne.n	8008bf8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	4619      	mov	r1, r3
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7fe fedf 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bf6:	e002      	b.n	8008bfe <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7fe fed1 	bl	80079a0 <HAL_UART_RxHalfCpltCallback>
}
 8008bfe:	bf00      	nop
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b086      	sub	sp, #24
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c1a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2e:	2b80      	cmp	r3, #128	; 0x80
 8008c30:	d109      	bne.n	8008c46 <UART_DMAError+0x40>
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	2b21      	cmp	r3, #33	; 0x21
 8008c36:	d106      	bne.n	8008c46 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008c40:	6978      	ldr	r0, [r7, #20]
 8008c42:	f7ff fe85 	bl	8008950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c50:	2b40      	cmp	r3, #64	; 0x40
 8008c52:	d109      	bne.n	8008c68 <UART_DMAError+0x62>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b22      	cmp	r3, #34	; 0x22
 8008c58:	d106      	bne.n	8008c68 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008c62:	6978      	ldr	r0, [r7, #20]
 8008c64:	f7ff feb6 	bl	80089d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c6e:	f043 0210 	orr.w	r2, r3, #16
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c78:	6978      	ldr	r0, [r7, #20]
 8008c7a:	f7f7 ff01 	bl	8000a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c7e:	bf00      	nop
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f7f7 feeb 	bl	8000a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008caa:	bf00      	nop
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b088      	sub	sp, #32
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	e853 3f00 	ldrex	r3, [r3]
 8008cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cce:	61fb      	str	r3, [r7, #28]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	61bb      	str	r3, [r7, #24]
 8008cda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	6979      	ldr	r1, [r7, #20]
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	e841 2300 	strex	r3, r2, [r1]
 8008ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e6      	bne.n	8008cba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7fe fe46 	bl	800798c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d00:	bf00      	nop
 8008d02:	3720      	adds	r7, #32
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d101      	bne.n	8008d5a <HAL_UARTEx_DisableFifoMode+0x16>
 8008d56:	2302      	movs	r3, #2
 8008d58:	e027      	b.n	8008daa <HAL_UARTEx_DisableFifoMode+0x66>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2224      	movs	r2, #36	; 0x24
 8008d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0201 	bic.w	r2, r2, #1
 8008d80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d101      	bne.n	8008dce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e02d      	b.n	8008e2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2224      	movs	r2, #36	; 0x24
 8008dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 0201 	bic.w	r2, r2, #1
 8008df4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f850 	bl	8008eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e46:	2302      	movs	r3, #2
 8008e48:	e02d      	b.n	8008ea6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2224      	movs	r2, #36	; 0x24
 8008e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0201 	bic.w	r2, r2, #1
 8008e70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f812 	bl	8008eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2220      	movs	r2, #32
 8008e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d108      	bne.n	8008ed2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ed0:	e031      	b.n	8008f36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ed2:	2310      	movs	r3, #16
 8008ed4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ed6:	2310      	movs	r3, #16
 8008ed8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	0e5b      	lsrs	r3, r3, #25
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	0f5b      	lsrs	r3, r3, #29
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f003 0307 	and.w	r3, r3, #7
 8008ef8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	7b3a      	ldrb	r2, [r7, #12]
 8008efe:	4911      	ldr	r1, [pc, #68]	; (8008f44 <UARTEx_SetNbDataToProcess+0x94>)
 8008f00:	5c8a      	ldrb	r2, [r1, r2]
 8008f02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f06:	7b3a      	ldrb	r2, [r7, #12]
 8008f08:	490f      	ldr	r1, [pc, #60]	; (8008f48 <UARTEx_SetNbDataToProcess+0x98>)
 8008f0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	7b7a      	ldrb	r2, [r7, #13]
 8008f1c:	4909      	ldr	r1, [pc, #36]	; (8008f44 <UARTEx_SetNbDataToProcess+0x94>)
 8008f1e:	5c8a      	ldrb	r2, [r1, r2]
 8008f20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f24:	7b7a      	ldrb	r2, [r7, #13]
 8008f26:	4908      	ldr	r1, [pc, #32]	; (8008f48 <UARTEx_SetNbDataToProcess+0x98>)
 8008f28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f36:	bf00      	nop
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	080098ec 	.word	0x080098ec
 8008f48:	080098f4 	.word	0x080098f4

08008f4c <siprintf>:
 8008f4c:	b40e      	push	{r1, r2, r3}
 8008f4e:	b500      	push	{lr}
 8008f50:	b09c      	sub	sp, #112	; 0x70
 8008f52:	ab1d      	add	r3, sp, #116	; 0x74
 8008f54:	9002      	str	r0, [sp, #8]
 8008f56:	9006      	str	r0, [sp, #24]
 8008f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f5c:	4809      	ldr	r0, [pc, #36]	; (8008f84 <siprintf+0x38>)
 8008f5e:	9107      	str	r1, [sp, #28]
 8008f60:	9104      	str	r1, [sp, #16]
 8008f62:	4909      	ldr	r1, [pc, #36]	; (8008f88 <siprintf+0x3c>)
 8008f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f68:	9105      	str	r1, [sp, #20]
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	a902      	add	r1, sp, #8
 8008f70:	f000 f9a0 	bl	80092b4 <_svfiprintf_r>
 8008f74:	9b02      	ldr	r3, [sp, #8]
 8008f76:	2200      	movs	r2, #0
 8008f78:	701a      	strb	r2, [r3, #0]
 8008f7a:	b01c      	add	sp, #112	; 0x70
 8008f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f80:	b003      	add	sp, #12
 8008f82:	4770      	bx	lr
 8008f84:	2400005c 	.word	0x2400005c
 8008f88:	ffff0208 	.word	0xffff0208

08008f8c <memset>:
 8008f8c:	4402      	add	r2, r0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d100      	bne.n	8008f96 <memset+0xa>
 8008f94:	4770      	bx	lr
 8008f96:	f803 1b01 	strb.w	r1, [r3], #1
 8008f9a:	e7f9      	b.n	8008f90 <memset+0x4>

08008f9c <__errno>:
 8008f9c:	4b01      	ldr	r3, [pc, #4]	; (8008fa4 <__errno+0x8>)
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	2400005c 	.word	0x2400005c

08008fa8 <__libc_init_array>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	4d0d      	ldr	r5, [pc, #52]	; (8008fe0 <__libc_init_array+0x38>)
 8008fac:	4c0d      	ldr	r4, [pc, #52]	; (8008fe4 <__libc_init_array+0x3c>)
 8008fae:	1b64      	subs	r4, r4, r5
 8008fb0:	10a4      	asrs	r4, r4, #2
 8008fb2:	2600      	movs	r6, #0
 8008fb4:	42a6      	cmp	r6, r4
 8008fb6:	d109      	bne.n	8008fcc <__libc_init_array+0x24>
 8008fb8:	4d0b      	ldr	r5, [pc, #44]	; (8008fe8 <__libc_init_array+0x40>)
 8008fba:	4c0c      	ldr	r4, [pc, #48]	; (8008fec <__libc_init_array+0x44>)
 8008fbc:	f000 fc6a 	bl	8009894 <_init>
 8008fc0:	1b64      	subs	r4, r4, r5
 8008fc2:	10a4      	asrs	r4, r4, #2
 8008fc4:	2600      	movs	r6, #0
 8008fc6:	42a6      	cmp	r6, r4
 8008fc8:	d105      	bne.n	8008fd6 <__libc_init_array+0x2e>
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fd0:	4798      	blx	r3
 8008fd2:	3601      	adds	r6, #1
 8008fd4:	e7ee      	b.n	8008fb4 <__libc_init_array+0xc>
 8008fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fda:	4798      	blx	r3
 8008fdc:	3601      	adds	r6, #1
 8008fde:	e7f2      	b.n	8008fc6 <__libc_init_array+0x1e>
 8008fe0:	08009938 	.word	0x08009938
 8008fe4:	08009938 	.word	0x08009938
 8008fe8:	08009938 	.word	0x08009938
 8008fec:	0800993c 	.word	0x0800993c

08008ff0 <__retarget_lock_acquire_recursive>:
 8008ff0:	4770      	bx	lr

08008ff2 <__retarget_lock_release_recursive>:
 8008ff2:	4770      	bx	lr

08008ff4 <memcpy>:
 8008ff4:	440a      	add	r2, r1
 8008ff6:	4291      	cmp	r1, r2
 8008ff8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ffc:	d100      	bne.n	8009000 <memcpy+0xc>
 8008ffe:	4770      	bx	lr
 8009000:	b510      	push	{r4, lr}
 8009002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800900a:	4291      	cmp	r1, r2
 800900c:	d1f9      	bne.n	8009002 <memcpy+0xe>
 800900e:	bd10      	pop	{r4, pc}

08009010 <_free_r>:
 8009010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009012:	2900      	cmp	r1, #0
 8009014:	d044      	beq.n	80090a0 <_free_r+0x90>
 8009016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800901a:	9001      	str	r0, [sp, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	f1a1 0404 	sub.w	r4, r1, #4
 8009022:	bfb8      	it	lt
 8009024:	18e4      	addlt	r4, r4, r3
 8009026:	f000 f8df 	bl	80091e8 <__malloc_lock>
 800902a:	4a1e      	ldr	r2, [pc, #120]	; (80090a4 <_free_r+0x94>)
 800902c:	9801      	ldr	r0, [sp, #4]
 800902e:	6813      	ldr	r3, [r2, #0]
 8009030:	b933      	cbnz	r3, 8009040 <_free_r+0x30>
 8009032:	6063      	str	r3, [r4, #4]
 8009034:	6014      	str	r4, [r2, #0]
 8009036:	b003      	add	sp, #12
 8009038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800903c:	f000 b8da 	b.w	80091f4 <__malloc_unlock>
 8009040:	42a3      	cmp	r3, r4
 8009042:	d908      	bls.n	8009056 <_free_r+0x46>
 8009044:	6825      	ldr	r5, [r4, #0]
 8009046:	1961      	adds	r1, r4, r5
 8009048:	428b      	cmp	r3, r1
 800904a:	bf01      	itttt	eq
 800904c:	6819      	ldreq	r1, [r3, #0]
 800904e:	685b      	ldreq	r3, [r3, #4]
 8009050:	1949      	addeq	r1, r1, r5
 8009052:	6021      	streq	r1, [r4, #0]
 8009054:	e7ed      	b.n	8009032 <_free_r+0x22>
 8009056:	461a      	mov	r2, r3
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	b10b      	cbz	r3, 8009060 <_free_r+0x50>
 800905c:	42a3      	cmp	r3, r4
 800905e:	d9fa      	bls.n	8009056 <_free_r+0x46>
 8009060:	6811      	ldr	r1, [r2, #0]
 8009062:	1855      	adds	r5, r2, r1
 8009064:	42a5      	cmp	r5, r4
 8009066:	d10b      	bne.n	8009080 <_free_r+0x70>
 8009068:	6824      	ldr	r4, [r4, #0]
 800906a:	4421      	add	r1, r4
 800906c:	1854      	adds	r4, r2, r1
 800906e:	42a3      	cmp	r3, r4
 8009070:	6011      	str	r1, [r2, #0]
 8009072:	d1e0      	bne.n	8009036 <_free_r+0x26>
 8009074:	681c      	ldr	r4, [r3, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	6053      	str	r3, [r2, #4]
 800907a:	440c      	add	r4, r1
 800907c:	6014      	str	r4, [r2, #0]
 800907e:	e7da      	b.n	8009036 <_free_r+0x26>
 8009080:	d902      	bls.n	8009088 <_free_r+0x78>
 8009082:	230c      	movs	r3, #12
 8009084:	6003      	str	r3, [r0, #0]
 8009086:	e7d6      	b.n	8009036 <_free_r+0x26>
 8009088:	6825      	ldr	r5, [r4, #0]
 800908a:	1961      	adds	r1, r4, r5
 800908c:	428b      	cmp	r3, r1
 800908e:	bf04      	itt	eq
 8009090:	6819      	ldreq	r1, [r3, #0]
 8009092:	685b      	ldreq	r3, [r3, #4]
 8009094:	6063      	str	r3, [r4, #4]
 8009096:	bf04      	itt	eq
 8009098:	1949      	addeq	r1, r1, r5
 800909a:	6021      	streq	r1, [r4, #0]
 800909c:	6054      	str	r4, [r2, #4]
 800909e:	e7ca      	b.n	8009036 <_free_r+0x26>
 80090a0:	b003      	add	sp, #12
 80090a2:	bd30      	pop	{r4, r5, pc}
 80090a4:	240003e8 	.word	0x240003e8

080090a8 <sbrk_aligned>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4e0e      	ldr	r6, [pc, #56]	; (80090e4 <sbrk_aligned+0x3c>)
 80090ac:	460c      	mov	r4, r1
 80090ae:	6831      	ldr	r1, [r6, #0]
 80090b0:	4605      	mov	r5, r0
 80090b2:	b911      	cbnz	r1, 80090ba <sbrk_aligned+0x12>
 80090b4:	f000 fba6 	bl	8009804 <_sbrk_r>
 80090b8:	6030      	str	r0, [r6, #0]
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 fba1 	bl	8009804 <_sbrk_r>
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	d00a      	beq.n	80090dc <sbrk_aligned+0x34>
 80090c6:	1cc4      	adds	r4, r0, #3
 80090c8:	f024 0403 	bic.w	r4, r4, #3
 80090cc:	42a0      	cmp	r0, r4
 80090ce:	d007      	beq.n	80090e0 <sbrk_aligned+0x38>
 80090d0:	1a21      	subs	r1, r4, r0
 80090d2:	4628      	mov	r0, r5
 80090d4:	f000 fb96 	bl	8009804 <_sbrk_r>
 80090d8:	3001      	adds	r0, #1
 80090da:	d101      	bne.n	80090e0 <sbrk_aligned+0x38>
 80090dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80090e0:	4620      	mov	r0, r4
 80090e2:	bd70      	pop	{r4, r5, r6, pc}
 80090e4:	240003ec 	.word	0x240003ec

080090e8 <_malloc_r>:
 80090e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ec:	1ccd      	adds	r5, r1, #3
 80090ee:	f025 0503 	bic.w	r5, r5, #3
 80090f2:	3508      	adds	r5, #8
 80090f4:	2d0c      	cmp	r5, #12
 80090f6:	bf38      	it	cc
 80090f8:	250c      	movcc	r5, #12
 80090fa:	2d00      	cmp	r5, #0
 80090fc:	4607      	mov	r7, r0
 80090fe:	db01      	blt.n	8009104 <_malloc_r+0x1c>
 8009100:	42a9      	cmp	r1, r5
 8009102:	d905      	bls.n	8009110 <_malloc_r+0x28>
 8009104:	230c      	movs	r3, #12
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	2600      	movs	r6, #0
 800910a:	4630      	mov	r0, r6
 800910c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009110:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80091e4 <_malloc_r+0xfc>
 8009114:	f000 f868 	bl	80091e8 <__malloc_lock>
 8009118:	f8d8 3000 	ldr.w	r3, [r8]
 800911c:	461c      	mov	r4, r3
 800911e:	bb5c      	cbnz	r4, 8009178 <_malloc_r+0x90>
 8009120:	4629      	mov	r1, r5
 8009122:	4638      	mov	r0, r7
 8009124:	f7ff ffc0 	bl	80090a8 <sbrk_aligned>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	4604      	mov	r4, r0
 800912c:	d155      	bne.n	80091da <_malloc_r+0xf2>
 800912e:	f8d8 4000 	ldr.w	r4, [r8]
 8009132:	4626      	mov	r6, r4
 8009134:	2e00      	cmp	r6, #0
 8009136:	d145      	bne.n	80091c4 <_malloc_r+0xdc>
 8009138:	2c00      	cmp	r4, #0
 800913a:	d048      	beq.n	80091ce <_malloc_r+0xe6>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	4631      	mov	r1, r6
 8009140:	4638      	mov	r0, r7
 8009142:	eb04 0903 	add.w	r9, r4, r3
 8009146:	f000 fb5d 	bl	8009804 <_sbrk_r>
 800914a:	4581      	cmp	r9, r0
 800914c:	d13f      	bne.n	80091ce <_malloc_r+0xe6>
 800914e:	6821      	ldr	r1, [r4, #0]
 8009150:	1a6d      	subs	r5, r5, r1
 8009152:	4629      	mov	r1, r5
 8009154:	4638      	mov	r0, r7
 8009156:	f7ff ffa7 	bl	80090a8 <sbrk_aligned>
 800915a:	3001      	adds	r0, #1
 800915c:	d037      	beq.n	80091ce <_malloc_r+0xe6>
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	442b      	add	r3, r5
 8009162:	6023      	str	r3, [r4, #0]
 8009164:	f8d8 3000 	ldr.w	r3, [r8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d038      	beq.n	80091de <_malloc_r+0xf6>
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	42a2      	cmp	r2, r4
 8009170:	d12b      	bne.n	80091ca <_malloc_r+0xe2>
 8009172:	2200      	movs	r2, #0
 8009174:	605a      	str	r2, [r3, #4]
 8009176:	e00f      	b.n	8009198 <_malloc_r+0xb0>
 8009178:	6822      	ldr	r2, [r4, #0]
 800917a:	1b52      	subs	r2, r2, r5
 800917c:	d41f      	bmi.n	80091be <_malloc_r+0xd6>
 800917e:	2a0b      	cmp	r2, #11
 8009180:	d917      	bls.n	80091b2 <_malloc_r+0xca>
 8009182:	1961      	adds	r1, r4, r5
 8009184:	42a3      	cmp	r3, r4
 8009186:	6025      	str	r5, [r4, #0]
 8009188:	bf18      	it	ne
 800918a:	6059      	strne	r1, [r3, #4]
 800918c:	6863      	ldr	r3, [r4, #4]
 800918e:	bf08      	it	eq
 8009190:	f8c8 1000 	streq.w	r1, [r8]
 8009194:	5162      	str	r2, [r4, r5]
 8009196:	604b      	str	r3, [r1, #4]
 8009198:	4638      	mov	r0, r7
 800919a:	f104 060b 	add.w	r6, r4, #11
 800919e:	f000 f829 	bl	80091f4 <__malloc_unlock>
 80091a2:	f026 0607 	bic.w	r6, r6, #7
 80091a6:	1d23      	adds	r3, r4, #4
 80091a8:	1af2      	subs	r2, r6, r3
 80091aa:	d0ae      	beq.n	800910a <_malloc_r+0x22>
 80091ac:	1b9b      	subs	r3, r3, r6
 80091ae:	50a3      	str	r3, [r4, r2]
 80091b0:	e7ab      	b.n	800910a <_malloc_r+0x22>
 80091b2:	42a3      	cmp	r3, r4
 80091b4:	6862      	ldr	r2, [r4, #4]
 80091b6:	d1dd      	bne.n	8009174 <_malloc_r+0x8c>
 80091b8:	f8c8 2000 	str.w	r2, [r8]
 80091bc:	e7ec      	b.n	8009198 <_malloc_r+0xb0>
 80091be:	4623      	mov	r3, r4
 80091c0:	6864      	ldr	r4, [r4, #4]
 80091c2:	e7ac      	b.n	800911e <_malloc_r+0x36>
 80091c4:	4634      	mov	r4, r6
 80091c6:	6876      	ldr	r6, [r6, #4]
 80091c8:	e7b4      	b.n	8009134 <_malloc_r+0x4c>
 80091ca:	4613      	mov	r3, r2
 80091cc:	e7cc      	b.n	8009168 <_malloc_r+0x80>
 80091ce:	230c      	movs	r3, #12
 80091d0:	603b      	str	r3, [r7, #0]
 80091d2:	4638      	mov	r0, r7
 80091d4:	f000 f80e 	bl	80091f4 <__malloc_unlock>
 80091d8:	e797      	b.n	800910a <_malloc_r+0x22>
 80091da:	6025      	str	r5, [r4, #0]
 80091dc:	e7dc      	b.n	8009198 <_malloc_r+0xb0>
 80091de:	605b      	str	r3, [r3, #4]
 80091e0:	deff      	udf	#255	; 0xff
 80091e2:	bf00      	nop
 80091e4:	240003e8 	.word	0x240003e8

080091e8 <__malloc_lock>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__malloc_lock+0x8>)
 80091ea:	f7ff bf01 	b.w	8008ff0 <__retarget_lock_acquire_recursive>
 80091ee:	bf00      	nop
 80091f0:	240003e4 	.word	0x240003e4

080091f4 <__malloc_unlock>:
 80091f4:	4801      	ldr	r0, [pc, #4]	; (80091fc <__malloc_unlock+0x8>)
 80091f6:	f7ff befc 	b.w	8008ff2 <__retarget_lock_release_recursive>
 80091fa:	bf00      	nop
 80091fc:	240003e4 	.word	0x240003e4

08009200 <__ssputs_r>:
 8009200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009204:	688e      	ldr	r6, [r1, #8]
 8009206:	461f      	mov	r7, r3
 8009208:	42be      	cmp	r6, r7
 800920a:	680b      	ldr	r3, [r1, #0]
 800920c:	4682      	mov	sl, r0
 800920e:	460c      	mov	r4, r1
 8009210:	4690      	mov	r8, r2
 8009212:	d82c      	bhi.n	800926e <__ssputs_r+0x6e>
 8009214:	898a      	ldrh	r2, [r1, #12]
 8009216:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800921a:	d026      	beq.n	800926a <__ssputs_r+0x6a>
 800921c:	6965      	ldr	r5, [r4, #20]
 800921e:	6909      	ldr	r1, [r1, #16]
 8009220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009224:	eba3 0901 	sub.w	r9, r3, r1
 8009228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800922c:	1c7b      	adds	r3, r7, #1
 800922e:	444b      	add	r3, r9
 8009230:	106d      	asrs	r5, r5, #1
 8009232:	429d      	cmp	r5, r3
 8009234:	bf38      	it	cc
 8009236:	461d      	movcc	r5, r3
 8009238:	0553      	lsls	r3, r2, #21
 800923a:	d527      	bpl.n	800928c <__ssputs_r+0x8c>
 800923c:	4629      	mov	r1, r5
 800923e:	f7ff ff53 	bl	80090e8 <_malloc_r>
 8009242:	4606      	mov	r6, r0
 8009244:	b360      	cbz	r0, 80092a0 <__ssputs_r+0xa0>
 8009246:	6921      	ldr	r1, [r4, #16]
 8009248:	464a      	mov	r2, r9
 800924a:	f7ff fed3 	bl	8008ff4 <memcpy>
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009258:	81a3      	strh	r3, [r4, #12]
 800925a:	6126      	str	r6, [r4, #16]
 800925c:	6165      	str	r5, [r4, #20]
 800925e:	444e      	add	r6, r9
 8009260:	eba5 0509 	sub.w	r5, r5, r9
 8009264:	6026      	str	r6, [r4, #0]
 8009266:	60a5      	str	r5, [r4, #8]
 8009268:	463e      	mov	r6, r7
 800926a:	42be      	cmp	r6, r7
 800926c:	d900      	bls.n	8009270 <__ssputs_r+0x70>
 800926e:	463e      	mov	r6, r7
 8009270:	6820      	ldr	r0, [r4, #0]
 8009272:	4632      	mov	r2, r6
 8009274:	4641      	mov	r1, r8
 8009276:	f000 faab 	bl	80097d0 <memmove>
 800927a:	68a3      	ldr	r3, [r4, #8]
 800927c:	1b9b      	subs	r3, r3, r6
 800927e:	60a3      	str	r3, [r4, #8]
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	4433      	add	r3, r6
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	2000      	movs	r0, #0
 8009288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928c:	462a      	mov	r2, r5
 800928e:	f000 fac9 	bl	8009824 <_realloc_r>
 8009292:	4606      	mov	r6, r0
 8009294:	2800      	cmp	r0, #0
 8009296:	d1e0      	bne.n	800925a <__ssputs_r+0x5a>
 8009298:	6921      	ldr	r1, [r4, #16]
 800929a:	4650      	mov	r0, sl
 800929c:	f7ff feb8 	bl	8009010 <_free_r>
 80092a0:	230c      	movs	r3, #12
 80092a2:	f8ca 3000 	str.w	r3, [sl]
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ac:	81a3      	strh	r3, [r4, #12]
 80092ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092b2:	e7e9      	b.n	8009288 <__ssputs_r+0x88>

080092b4 <_svfiprintf_r>:
 80092b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b8:	4698      	mov	r8, r3
 80092ba:	898b      	ldrh	r3, [r1, #12]
 80092bc:	061b      	lsls	r3, r3, #24
 80092be:	b09d      	sub	sp, #116	; 0x74
 80092c0:	4607      	mov	r7, r0
 80092c2:	460d      	mov	r5, r1
 80092c4:	4614      	mov	r4, r2
 80092c6:	d50e      	bpl.n	80092e6 <_svfiprintf_r+0x32>
 80092c8:	690b      	ldr	r3, [r1, #16]
 80092ca:	b963      	cbnz	r3, 80092e6 <_svfiprintf_r+0x32>
 80092cc:	2140      	movs	r1, #64	; 0x40
 80092ce:	f7ff ff0b 	bl	80090e8 <_malloc_r>
 80092d2:	6028      	str	r0, [r5, #0]
 80092d4:	6128      	str	r0, [r5, #16]
 80092d6:	b920      	cbnz	r0, 80092e2 <_svfiprintf_r+0x2e>
 80092d8:	230c      	movs	r3, #12
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092e0:	e0d0      	b.n	8009484 <_svfiprintf_r+0x1d0>
 80092e2:	2340      	movs	r3, #64	; 0x40
 80092e4:	616b      	str	r3, [r5, #20]
 80092e6:	2300      	movs	r3, #0
 80092e8:	9309      	str	r3, [sp, #36]	; 0x24
 80092ea:	2320      	movs	r3, #32
 80092ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092f4:	2330      	movs	r3, #48	; 0x30
 80092f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800949c <_svfiprintf_r+0x1e8>
 80092fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092fe:	f04f 0901 	mov.w	r9, #1
 8009302:	4623      	mov	r3, r4
 8009304:	469a      	mov	sl, r3
 8009306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930a:	b10a      	cbz	r2, 8009310 <_svfiprintf_r+0x5c>
 800930c:	2a25      	cmp	r2, #37	; 0x25
 800930e:	d1f9      	bne.n	8009304 <_svfiprintf_r+0x50>
 8009310:	ebba 0b04 	subs.w	fp, sl, r4
 8009314:	d00b      	beq.n	800932e <_svfiprintf_r+0x7a>
 8009316:	465b      	mov	r3, fp
 8009318:	4622      	mov	r2, r4
 800931a:	4629      	mov	r1, r5
 800931c:	4638      	mov	r0, r7
 800931e:	f7ff ff6f 	bl	8009200 <__ssputs_r>
 8009322:	3001      	adds	r0, #1
 8009324:	f000 80a9 	beq.w	800947a <_svfiprintf_r+0x1c6>
 8009328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800932a:	445a      	add	r2, fp
 800932c:	9209      	str	r2, [sp, #36]	; 0x24
 800932e:	f89a 3000 	ldrb.w	r3, [sl]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 80a1 	beq.w	800947a <_svfiprintf_r+0x1c6>
 8009338:	2300      	movs	r3, #0
 800933a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800933e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009342:	f10a 0a01 	add.w	sl, sl, #1
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	9307      	str	r3, [sp, #28]
 800934a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800934e:	931a      	str	r3, [sp, #104]	; 0x68
 8009350:	4654      	mov	r4, sl
 8009352:	2205      	movs	r2, #5
 8009354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009358:	4850      	ldr	r0, [pc, #320]	; (800949c <_svfiprintf_r+0x1e8>)
 800935a:	f7f6 ffc1 	bl	80002e0 <memchr>
 800935e:	9a04      	ldr	r2, [sp, #16]
 8009360:	b9d8      	cbnz	r0, 800939a <_svfiprintf_r+0xe6>
 8009362:	06d0      	lsls	r0, r2, #27
 8009364:	bf44      	itt	mi
 8009366:	2320      	movmi	r3, #32
 8009368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800936c:	0711      	lsls	r1, r2, #28
 800936e:	bf44      	itt	mi
 8009370:	232b      	movmi	r3, #43	; 0x2b
 8009372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009376:	f89a 3000 	ldrb.w	r3, [sl]
 800937a:	2b2a      	cmp	r3, #42	; 0x2a
 800937c:	d015      	beq.n	80093aa <_svfiprintf_r+0xf6>
 800937e:	9a07      	ldr	r2, [sp, #28]
 8009380:	4654      	mov	r4, sl
 8009382:	2000      	movs	r0, #0
 8009384:	f04f 0c0a 	mov.w	ip, #10
 8009388:	4621      	mov	r1, r4
 800938a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800938e:	3b30      	subs	r3, #48	; 0x30
 8009390:	2b09      	cmp	r3, #9
 8009392:	d94d      	bls.n	8009430 <_svfiprintf_r+0x17c>
 8009394:	b1b0      	cbz	r0, 80093c4 <_svfiprintf_r+0x110>
 8009396:	9207      	str	r2, [sp, #28]
 8009398:	e014      	b.n	80093c4 <_svfiprintf_r+0x110>
 800939a:	eba0 0308 	sub.w	r3, r0, r8
 800939e:	fa09 f303 	lsl.w	r3, r9, r3
 80093a2:	4313      	orrs	r3, r2
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	46a2      	mov	sl, r4
 80093a8:	e7d2      	b.n	8009350 <_svfiprintf_r+0x9c>
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	1d19      	adds	r1, r3, #4
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	9103      	str	r1, [sp, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	bfbb      	ittet	lt
 80093b6:	425b      	neglt	r3, r3
 80093b8:	f042 0202 	orrlt.w	r2, r2, #2
 80093bc:	9307      	strge	r3, [sp, #28]
 80093be:	9307      	strlt	r3, [sp, #28]
 80093c0:	bfb8      	it	lt
 80093c2:	9204      	strlt	r2, [sp, #16]
 80093c4:	7823      	ldrb	r3, [r4, #0]
 80093c6:	2b2e      	cmp	r3, #46	; 0x2e
 80093c8:	d10c      	bne.n	80093e4 <_svfiprintf_r+0x130>
 80093ca:	7863      	ldrb	r3, [r4, #1]
 80093cc:	2b2a      	cmp	r3, #42	; 0x2a
 80093ce:	d134      	bne.n	800943a <_svfiprintf_r+0x186>
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	1d1a      	adds	r2, r3, #4
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	9203      	str	r2, [sp, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	bfb8      	it	lt
 80093dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80093e0:	3402      	adds	r4, #2
 80093e2:	9305      	str	r3, [sp, #20]
 80093e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80094ac <_svfiprintf_r+0x1f8>
 80093e8:	7821      	ldrb	r1, [r4, #0]
 80093ea:	2203      	movs	r2, #3
 80093ec:	4650      	mov	r0, sl
 80093ee:	f7f6 ff77 	bl	80002e0 <memchr>
 80093f2:	b138      	cbz	r0, 8009404 <_svfiprintf_r+0x150>
 80093f4:	9b04      	ldr	r3, [sp, #16]
 80093f6:	eba0 000a 	sub.w	r0, r0, sl
 80093fa:	2240      	movs	r2, #64	; 0x40
 80093fc:	4082      	lsls	r2, r0
 80093fe:	4313      	orrs	r3, r2
 8009400:	3401      	adds	r4, #1
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009408:	4825      	ldr	r0, [pc, #148]	; (80094a0 <_svfiprintf_r+0x1ec>)
 800940a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800940e:	2206      	movs	r2, #6
 8009410:	f7f6 ff66 	bl	80002e0 <memchr>
 8009414:	2800      	cmp	r0, #0
 8009416:	d038      	beq.n	800948a <_svfiprintf_r+0x1d6>
 8009418:	4b22      	ldr	r3, [pc, #136]	; (80094a4 <_svfiprintf_r+0x1f0>)
 800941a:	bb1b      	cbnz	r3, 8009464 <_svfiprintf_r+0x1b0>
 800941c:	9b03      	ldr	r3, [sp, #12]
 800941e:	3307      	adds	r3, #7
 8009420:	f023 0307 	bic.w	r3, r3, #7
 8009424:	3308      	adds	r3, #8
 8009426:	9303      	str	r3, [sp, #12]
 8009428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942a:	4433      	add	r3, r6
 800942c:	9309      	str	r3, [sp, #36]	; 0x24
 800942e:	e768      	b.n	8009302 <_svfiprintf_r+0x4e>
 8009430:	fb0c 3202 	mla	r2, ip, r2, r3
 8009434:	460c      	mov	r4, r1
 8009436:	2001      	movs	r0, #1
 8009438:	e7a6      	b.n	8009388 <_svfiprintf_r+0xd4>
 800943a:	2300      	movs	r3, #0
 800943c:	3401      	adds	r4, #1
 800943e:	9305      	str	r3, [sp, #20]
 8009440:	4619      	mov	r1, r3
 8009442:	f04f 0c0a 	mov.w	ip, #10
 8009446:	4620      	mov	r0, r4
 8009448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800944c:	3a30      	subs	r2, #48	; 0x30
 800944e:	2a09      	cmp	r2, #9
 8009450:	d903      	bls.n	800945a <_svfiprintf_r+0x1a6>
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0c6      	beq.n	80093e4 <_svfiprintf_r+0x130>
 8009456:	9105      	str	r1, [sp, #20]
 8009458:	e7c4      	b.n	80093e4 <_svfiprintf_r+0x130>
 800945a:	fb0c 2101 	mla	r1, ip, r1, r2
 800945e:	4604      	mov	r4, r0
 8009460:	2301      	movs	r3, #1
 8009462:	e7f0      	b.n	8009446 <_svfiprintf_r+0x192>
 8009464:	ab03      	add	r3, sp, #12
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	462a      	mov	r2, r5
 800946a:	4b0f      	ldr	r3, [pc, #60]	; (80094a8 <_svfiprintf_r+0x1f4>)
 800946c:	a904      	add	r1, sp, #16
 800946e:	4638      	mov	r0, r7
 8009470:	f3af 8000 	nop.w
 8009474:	1c42      	adds	r2, r0, #1
 8009476:	4606      	mov	r6, r0
 8009478:	d1d6      	bne.n	8009428 <_svfiprintf_r+0x174>
 800947a:	89ab      	ldrh	r3, [r5, #12]
 800947c:	065b      	lsls	r3, r3, #25
 800947e:	f53f af2d 	bmi.w	80092dc <_svfiprintf_r+0x28>
 8009482:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009484:	b01d      	add	sp, #116	; 0x74
 8009486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948a:	ab03      	add	r3, sp, #12
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	462a      	mov	r2, r5
 8009490:	4b05      	ldr	r3, [pc, #20]	; (80094a8 <_svfiprintf_r+0x1f4>)
 8009492:	a904      	add	r1, sp, #16
 8009494:	4638      	mov	r0, r7
 8009496:	f000 f879 	bl	800958c <_printf_i>
 800949a:	e7eb      	b.n	8009474 <_svfiprintf_r+0x1c0>
 800949c:	080098fc 	.word	0x080098fc
 80094a0:	08009906 	.word	0x08009906
 80094a4:	00000000 	.word	0x00000000
 80094a8:	08009201 	.word	0x08009201
 80094ac:	08009902 	.word	0x08009902

080094b0 <_printf_common>:
 80094b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b4:	4616      	mov	r6, r2
 80094b6:	4699      	mov	r9, r3
 80094b8:	688a      	ldr	r2, [r1, #8]
 80094ba:	690b      	ldr	r3, [r1, #16]
 80094bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094c0:	4293      	cmp	r3, r2
 80094c2:	bfb8      	it	lt
 80094c4:	4613      	movlt	r3, r2
 80094c6:	6033      	str	r3, [r6, #0]
 80094c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094cc:	4607      	mov	r7, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	b10a      	cbz	r2, 80094d6 <_printf_common+0x26>
 80094d2:	3301      	adds	r3, #1
 80094d4:	6033      	str	r3, [r6, #0]
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	0699      	lsls	r1, r3, #26
 80094da:	bf42      	ittt	mi
 80094dc:	6833      	ldrmi	r3, [r6, #0]
 80094de:	3302      	addmi	r3, #2
 80094e0:	6033      	strmi	r3, [r6, #0]
 80094e2:	6825      	ldr	r5, [r4, #0]
 80094e4:	f015 0506 	ands.w	r5, r5, #6
 80094e8:	d106      	bne.n	80094f8 <_printf_common+0x48>
 80094ea:	f104 0a19 	add.w	sl, r4, #25
 80094ee:	68e3      	ldr	r3, [r4, #12]
 80094f0:	6832      	ldr	r2, [r6, #0]
 80094f2:	1a9b      	subs	r3, r3, r2
 80094f4:	42ab      	cmp	r3, r5
 80094f6:	dc26      	bgt.n	8009546 <_printf_common+0x96>
 80094f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094fc:	1e13      	subs	r3, r2, #0
 80094fe:	6822      	ldr	r2, [r4, #0]
 8009500:	bf18      	it	ne
 8009502:	2301      	movne	r3, #1
 8009504:	0692      	lsls	r2, r2, #26
 8009506:	d42b      	bmi.n	8009560 <_printf_common+0xb0>
 8009508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800950c:	4649      	mov	r1, r9
 800950e:	4638      	mov	r0, r7
 8009510:	47c0      	blx	r8
 8009512:	3001      	adds	r0, #1
 8009514:	d01e      	beq.n	8009554 <_printf_common+0xa4>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	6922      	ldr	r2, [r4, #16]
 800951a:	f003 0306 	and.w	r3, r3, #6
 800951e:	2b04      	cmp	r3, #4
 8009520:	bf02      	ittt	eq
 8009522:	68e5      	ldreq	r5, [r4, #12]
 8009524:	6833      	ldreq	r3, [r6, #0]
 8009526:	1aed      	subeq	r5, r5, r3
 8009528:	68a3      	ldr	r3, [r4, #8]
 800952a:	bf0c      	ite	eq
 800952c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009530:	2500      	movne	r5, #0
 8009532:	4293      	cmp	r3, r2
 8009534:	bfc4      	itt	gt
 8009536:	1a9b      	subgt	r3, r3, r2
 8009538:	18ed      	addgt	r5, r5, r3
 800953a:	2600      	movs	r6, #0
 800953c:	341a      	adds	r4, #26
 800953e:	42b5      	cmp	r5, r6
 8009540:	d11a      	bne.n	8009578 <_printf_common+0xc8>
 8009542:	2000      	movs	r0, #0
 8009544:	e008      	b.n	8009558 <_printf_common+0xa8>
 8009546:	2301      	movs	r3, #1
 8009548:	4652      	mov	r2, sl
 800954a:	4649      	mov	r1, r9
 800954c:	4638      	mov	r0, r7
 800954e:	47c0      	blx	r8
 8009550:	3001      	adds	r0, #1
 8009552:	d103      	bne.n	800955c <_printf_common+0xac>
 8009554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955c:	3501      	adds	r5, #1
 800955e:	e7c6      	b.n	80094ee <_printf_common+0x3e>
 8009560:	18e1      	adds	r1, r4, r3
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	2030      	movs	r0, #48	; 0x30
 8009566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800956a:	4422      	add	r2, r4
 800956c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009574:	3302      	adds	r3, #2
 8009576:	e7c7      	b.n	8009508 <_printf_common+0x58>
 8009578:	2301      	movs	r3, #1
 800957a:	4622      	mov	r2, r4
 800957c:	4649      	mov	r1, r9
 800957e:	4638      	mov	r0, r7
 8009580:	47c0      	blx	r8
 8009582:	3001      	adds	r0, #1
 8009584:	d0e6      	beq.n	8009554 <_printf_common+0xa4>
 8009586:	3601      	adds	r6, #1
 8009588:	e7d9      	b.n	800953e <_printf_common+0x8e>
	...

0800958c <_printf_i>:
 800958c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009590:	7e0f      	ldrb	r7, [r1, #24]
 8009592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009594:	2f78      	cmp	r7, #120	; 0x78
 8009596:	4691      	mov	r9, r2
 8009598:	4680      	mov	r8, r0
 800959a:	460c      	mov	r4, r1
 800959c:	469a      	mov	sl, r3
 800959e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095a2:	d807      	bhi.n	80095b4 <_printf_i+0x28>
 80095a4:	2f62      	cmp	r7, #98	; 0x62
 80095a6:	d80a      	bhi.n	80095be <_printf_i+0x32>
 80095a8:	2f00      	cmp	r7, #0
 80095aa:	f000 80d4 	beq.w	8009756 <_printf_i+0x1ca>
 80095ae:	2f58      	cmp	r7, #88	; 0x58
 80095b0:	f000 80c0 	beq.w	8009734 <_printf_i+0x1a8>
 80095b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095bc:	e03a      	b.n	8009634 <_printf_i+0xa8>
 80095be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095c2:	2b15      	cmp	r3, #21
 80095c4:	d8f6      	bhi.n	80095b4 <_printf_i+0x28>
 80095c6:	a101      	add	r1, pc, #4	; (adr r1, 80095cc <_printf_i+0x40>)
 80095c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095cc:	08009625 	.word	0x08009625
 80095d0:	08009639 	.word	0x08009639
 80095d4:	080095b5 	.word	0x080095b5
 80095d8:	080095b5 	.word	0x080095b5
 80095dc:	080095b5 	.word	0x080095b5
 80095e0:	080095b5 	.word	0x080095b5
 80095e4:	08009639 	.word	0x08009639
 80095e8:	080095b5 	.word	0x080095b5
 80095ec:	080095b5 	.word	0x080095b5
 80095f0:	080095b5 	.word	0x080095b5
 80095f4:	080095b5 	.word	0x080095b5
 80095f8:	0800973d 	.word	0x0800973d
 80095fc:	08009665 	.word	0x08009665
 8009600:	080096f7 	.word	0x080096f7
 8009604:	080095b5 	.word	0x080095b5
 8009608:	080095b5 	.word	0x080095b5
 800960c:	0800975f 	.word	0x0800975f
 8009610:	080095b5 	.word	0x080095b5
 8009614:	08009665 	.word	0x08009665
 8009618:	080095b5 	.word	0x080095b5
 800961c:	080095b5 	.word	0x080095b5
 8009620:	080096ff 	.word	0x080096ff
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	1d1a      	adds	r2, r3, #4
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	602a      	str	r2, [r5, #0]
 800962c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009634:	2301      	movs	r3, #1
 8009636:	e09f      	b.n	8009778 <_printf_i+0x1ec>
 8009638:	6820      	ldr	r0, [r4, #0]
 800963a:	682b      	ldr	r3, [r5, #0]
 800963c:	0607      	lsls	r7, r0, #24
 800963e:	f103 0104 	add.w	r1, r3, #4
 8009642:	6029      	str	r1, [r5, #0]
 8009644:	d501      	bpl.n	800964a <_printf_i+0xbe>
 8009646:	681e      	ldr	r6, [r3, #0]
 8009648:	e003      	b.n	8009652 <_printf_i+0xc6>
 800964a:	0646      	lsls	r6, r0, #25
 800964c:	d5fb      	bpl.n	8009646 <_printf_i+0xba>
 800964e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009652:	2e00      	cmp	r6, #0
 8009654:	da03      	bge.n	800965e <_printf_i+0xd2>
 8009656:	232d      	movs	r3, #45	; 0x2d
 8009658:	4276      	negs	r6, r6
 800965a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800965e:	485a      	ldr	r0, [pc, #360]	; (80097c8 <_printf_i+0x23c>)
 8009660:	230a      	movs	r3, #10
 8009662:	e012      	b.n	800968a <_printf_i+0xfe>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	6820      	ldr	r0, [r4, #0]
 8009668:	1d19      	adds	r1, r3, #4
 800966a:	6029      	str	r1, [r5, #0]
 800966c:	0605      	lsls	r5, r0, #24
 800966e:	d501      	bpl.n	8009674 <_printf_i+0xe8>
 8009670:	681e      	ldr	r6, [r3, #0]
 8009672:	e002      	b.n	800967a <_printf_i+0xee>
 8009674:	0641      	lsls	r1, r0, #25
 8009676:	d5fb      	bpl.n	8009670 <_printf_i+0xe4>
 8009678:	881e      	ldrh	r6, [r3, #0]
 800967a:	4853      	ldr	r0, [pc, #332]	; (80097c8 <_printf_i+0x23c>)
 800967c:	2f6f      	cmp	r7, #111	; 0x6f
 800967e:	bf0c      	ite	eq
 8009680:	2308      	moveq	r3, #8
 8009682:	230a      	movne	r3, #10
 8009684:	2100      	movs	r1, #0
 8009686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800968a:	6865      	ldr	r5, [r4, #4]
 800968c:	60a5      	str	r5, [r4, #8]
 800968e:	2d00      	cmp	r5, #0
 8009690:	bfa2      	ittt	ge
 8009692:	6821      	ldrge	r1, [r4, #0]
 8009694:	f021 0104 	bicge.w	r1, r1, #4
 8009698:	6021      	strge	r1, [r4, #0]
 800969a:	b90e      	cbnz	r6, 80096a0 <_printf_i+0x114>
 800969c:	2d00      	cmp	r5, #0
 800969e:	d04b      	beq.n	8009738 <_printf_i+0x1ac>
 80096a0:	4615      	mov	r5, r2
 80096a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80096a6:	fb03 6711 	mls	r7, r3, r1, r6
 80096aa:	5dc7      	ldrb	r7, [r0, r7]
 80096ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096b0:	4637      	mov	r7, r6
 80096b2:	42bb      	cmp	r3, r7
 80096b4:	460e      	mov	r6, r1
 80096b6:	d9f4      	bls.n	80096a2 <_printf_i+0x116>
 80096b8:	2b08      	cmp	r3, #8
 80096ba:	d10b      	bne.n	80096d4 <_printf_i+0x148>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	07de      	lsls	r6, r3, #31
 80096c0:	d508      	bpl.n	80096d4 <_printf_i+0x148>
 80096c2:	6923      	ldr	r3, [r4, #16]
 80096c4:	6861      	ldr	r1, [r4, #4]
 80096c6:	4299      	cmp	r1, r3
 80096c8:	bfde      	ittt	le
 80096ca:	2330      	movle	r3, #48	; 0x30
 80096cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80096d4:	1b52      	subs	r2, r2, r5
 80096d6:	6122      	str	r2, [r4, #16]
 80096d8:	f8cd a000 	str.w	sl, [sp]
 80096dc:	464b      	mov	r3, r9
 80096de:	aa03      	add	r2, sp, #12
 80096e0:	4621      	mov	r1, r4
 80096e2:	4640      	mov	r0, r8
 80096e4:	f7ff fee4 	bl	80094b0 <_printf_common>
 80096e8:	3001      	adds	r0, #1
 80096ea:	d14a      	bne.n	8009782 <_printf_i+0x1f6>
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096f0:	b004      	add	sp, #16
 80096f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	f043 0320 	orr.w	r3, r3, #32
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	4833      	ldr	r0, [pc, #204]	; (80097cc <_printf_i+0x240>)
 8009700:	2778      	movs	r7, #120	; 0x78
 8009702:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	6829      	ldr	r1, [r5, #0]
 800970a:	061f      	lsls	r7, r3, #24
 800970c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009710:	d402      	bmi.n	8009718 <_printf_i+0x18c>
 8009712:	065f      	lsls	r7, r3, #25
 8009714:	bf48      	it	mi
 8009716:	b2b6      	uxthmi	r6, r6
 8009718:	07df      	lsls	r7, r3, #31
 800971a:	bf48      	it	mi
 800971c:	f043 0320 	orrmi.w	r3, r3, #32
 8009720:	6029      	str	r1, [r5, #0]
 8009722:	bf48      	it	mi
 8009724:	6023      	strmi	r3, [r4, #0]
 8009726:	b91e      	cbnz	r6, 8009730 <_printf_i+0x1a4>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	f023 0320 	bic.w	r3, r3, #32
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	2310      	movs	r3, #16
 8009732:	e7a7      	b.n	8009684 <_printf_i+0xf8>
 8009734:	4824      	ldr	r0, [pc, #144]	; (80097c8 <_printf_i+0x23c>)
 8009736:	e7e4      	b.n	8009702 <_printf_i+0x176>
 8009738:	4615      	mov	r5, r2
 800973a:	e7bd      	b.n	80096b8 <_printf_i+0x12c>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	6826      	ldr	r6, [r4, #0]
 8009740:	6961      	ldr	r1, [r4, #20]
 8009742:	1d18      	adds	r0, r3, #4
 8009744:	6028      	str	r0, [r5, #0]
 8009746:	0635      	lsls	r5, r6, #24
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	d501      	bpl.n	8009750 <_printf_i+0x1c4>
 800974c:	6019      	str	r1, [r3, #0]
 800974e:	e002      	b.n	8009756 <_printf_i+0x1ca>
 8009750:	0670      	lsls	r0, r6, #25
 8009752:	d5fb      	bpl.n	800974c <_printf_i+0x1c0>
 8009754:	8019      	strh	r1, [r3, #0]
 8009756:	2300      	movs	r3, #0
 8009758:	6123      	str	r3, [r4, #16]
 800975a:	4615      	mov	r5, r2
 800975c:	e7bc      	b.n	80096d8 <_printf_i+0x14c>
 800975e:	682b      	ldr	r3, [r5, #0]
 8009760:	1d1a      	adds	r2, r3, #4
 8009762:	602a      	str	r2, [r5, #0]
 8009764:	681d      	ldr	r5, [r3, #0]
 8009766:	6862      	ldr	r2, [r4, #4]
 8009768:	2100      	movs	r1, #0
 800976a:	4628      	mov	r0, r5
 800976c:	f7f6 fdb8 	bl	80002e0 <memchr>
 8009770:	b108      	cbz	r0, 8009776 <_printf_i+0x1ea>
 8009772:	1b40      	subs	r0, r0, r5
 8009774:	6060      	str	r0, [r4, #4]
 8009776:	6863      	ldr	r3, [r4, #4]
 8009778:	6123      	str	r3, [r4, #16]
 800977a:	2300      	movs	r3, #0
 800977c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009780:	e7aa      	b.n	80096d8 <_printf_i+0x14c>
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	462a      	mov	r2, r5
 8009786:	4649      	mov	r1, r9
 8009788:	4640      	mov	r0, r8
 800978a:	47d0      	blx	sl
 800978c:	3001      	adds	r0, #1
 800978e:	d0ad      	beq.n	80096ec <_printf_i+0x160>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	079b      	lsls	r3, r3, #30
 8009794:	d413      	bmi.n	80097be <_printf_i+0x232>
 8009796:	68e0      	ldr	r0, [r4, #12]
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	4298      	cmp	r0, r3
 800979c:	bfb8      	it	lt
 800979e:	4618      	movlt	r0, r3
 80097a0:	e7a6      	b.n	80096f0 <_printf_i+0x164>
 80097a2:	2301      	movs	r3, #1
 80097a4:	4632      	mov	r2, r6
 80097a6:	4649      	mov	r1, r9
 80097a8:	4640      	mov	r0, r8
 80097aa:	47d0      	blx	sl
 80097ac:	3001      	adds	r0, #1
 80097ae:	d09d      	beq.n	80096ec <_printf_i+0x160>
 80097b0:	3501      	adds	r5, #1
 80097b2:	68e3      	ldr	r3, [r4, #12]
 80097b4:	9903      	ldr	r1, [sp, #12]
 80097b6:	1a5b      	subs	r3, r3, r1
 80097b8:	42ab      	cmp	r3, r5
 80097ba:	dcf2      	bgt.n	80097a2 <_printf_i+0x216>
 80097bc:	e7eb      	b.n	8009796 <_printf_i+0x20a>
 80097be:	2500      	movs	r5, #0
 80097c0:	f104 0619 	add.w	r6, r4, #25
 80097c4:	e7f5      	b.n	80097b2 <_printf_i+0x226>
 80097c6:	bf00      	nop
 80097c8:	0800990d 	.word	0x0800990d
 80097cc:	0800991e 	.word	0x0800991e

080097d0 <memmove>:
 80097d0:	4288      	cmp	r0, r1
 80097d2:	b510      	push	{r4, lr}
 80097d4:	eb01 0402 	add.w	r4, r1, r2
 80097d8:	d902      	bls.n	80097e0 <memmove+0x10>
 80097da:	4284      	cmp	r4, r0
 80097dc:	4623      	mov	r3, r4
 80097de:	d807      	bhi.n	80097f0 <memmove+0x20>
 80097e0:	1e43      	subs	r3, r0, #1
 80097e2:	42a1      	cmp	r1, r4
 80097e4:	d008      	beq.n	80097f8 <memmove+0x28>
 80097e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097ee:	e7f8      	b.n	80097e2 <memmove+0x12>
 80097f0:	4402      	add	r2, r0
 80097f2:	4601      	mov	r1, r0
 80097f4:	428a      	cmp	r2, r1
 80097f6:	d100      	bne.n	80097fa <memmove+0x2a>
 80097f8:	bd10      	pop	{r4, pc}
 80097fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009802:	e7f7      	b.n	80097f4 <memmove+0x24>

08009804 <_sbrk_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4d06      	ldr	r5, [pc, #24]	; (8009820 <_sbrk_r+0x1c>)
 8009808:	2300      	movs	r3, #0
 800980a:	4604      	mov	r4, r0
 800980c:	4608      	mov	r0, r1
 800980e:	602b      	str	r3, [r5, #0]
 8009810:	f7f7 fae6 	bl	8000de0 <_sbrk>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d102      	bne.n	800981e <_sbrk_r+0x1a>
 8009818:	682b      	ldr	r3, [r5, #0]
 800981a:	b103      	cbz	r3, 800981e <_sbrk_r+0x1a>
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	bd38      	pop	{r3, r4, r5, pc}
 8009820:	240003e0 	.word	0x240003e0

08009824 <_realloc_r>:
 8009824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009828:	4680      	mov	r8, r0
 800982a:	4614      	mov	r4, r2
 800982c:	460e      	mov	r6, r1
 800982e:	b921      	cbnz	r1, 800983a <_realloc_r+0x16>
 8009830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009834:	4611      	mov	r1, r2
 8009836:	f7ff bc57 	b.w	80090e8 <_malloc_r>
 800983a:	b92a      	cbnz	r2, 8009848 <_realloc_r+0x24>
 800983c:	f7ff fbe8 	bl	8009010 <_free_r>
 8009840:	4625      	mov	r5, r4
 8009842:	4628      	mov	r0, r5
 8009844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009848:	f000 f81b 	bl	8009882 <_malloc_usable_size_r>
 800984c:	4284      	cmp	r4, r0
 800984e:	4607      	mov	r7, r0
 8009850:	d802      	bhi.n	8009858 <_realloc_r+0x34>
 8009852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009856:	d812      	bhi.n	800987e <_realloc_r+0x5a>
 8009858:	4621      	mov	r1, r4
 800985a:	4640      	mov	r0, r8
 800985c:	f7ff fc44 	bl	80090e8 <_malloc_r>
 8009860:	4605      	mov	r5, r0
 8009862:	2800      	cmp	r0, #0
 8009864:	d0ed      	beq.n	8009842 <_realloc_r+0x1e>
 8009866:	42bc      	cmp	r4, r7
 8009868:	4622      	mov	r2, r4
 800986a:	4631      	mov	r1, r6
 800986c:	bf28      	it	cs
 800986e:	463a      	movcs	r2, r7
 8009870:	f7ff fbc0 	bl	8008ff4 <memcpy>
 8009874:	4631      	mov	r1, r6
 8009876:	4640      	mov	r0, r8
 8009878:	f7ff fbca 	bl	8009010 <_free_r>
 800987c:	e7e1      	b.n	8009842 <_realloc_r+0x1e>
 800987e:	4635      	mov	r5, r6
 8009880:	e7df      	b.n	8009842 <_realloc_r+0x1e>

08009882 <_malloc_usable_size_r>:
 8009882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009886:	1f18      	subs	r0, r3, #4
 8009888:	2b00      	cmp	r3, #0
 800988a:	bfbc      	itt	lt
 800988c:	580b      	ldrlt	r3, [r1, r0]
 800988e:	18c0      	addlt	r0, r0, r3
 8009890:	4770      	bx	lr
	...

08009894 <_init>:
 8009894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009896:	bf00      	nop
 8009898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989a:	bc08      	pop	{r3}
 800989c:	469e      	mov	lr, r3
 800989e:	4770      	bx	lr

080098a0 <_fini>:
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	bf00      	nop
 80098a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a6:	bc08      	pop	{r3}
 80098a8:	469e      	mov	lr, r3
 80098aa:	4770      	bx	lr
