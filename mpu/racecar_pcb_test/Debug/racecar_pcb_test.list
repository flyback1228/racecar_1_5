
racecar_pcb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012698  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08012938  08012938  00022938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012e94  08012e94  00022e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012e9c  08012e9c  00022e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012ea0  08012ea0  00022ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  08012ea4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007d4  240001dc  08013080  000301dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009b0  08013080  000309b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022525  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003672  00000000  00000000  00052772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001920  00000000  00000000  00055de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000013be  00000000  00000000  00057708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e1a3  00000000  00000000  00058ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00020fa3  00000000  00000000  00096c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017f157  00000000  00000000  000b7c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007c30  00000000  00000000  00236d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0023e994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012920 	.word	0x08012920

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	08012920 	.word	0x08012920

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f002 fad2 	bl	8002c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f822 	bl	80006dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000698:	f000 f89e 	bl	80007d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 fdbc 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a0:	f000 fd8a 	bl	80011b8 <MX_DMA_Init>
  MX_UART5_Init();
 80006a4:	f000 fa70 	bl	8000b88 <MX_UART5_Init>
  MX_LPUART1_UART_Init();
 80006a8:	f000 fa22 	bl	8000af0 <MX_LPUART1_UART_Init>
  MX_UART7_Init();
 80006ac:	f000 fab8 	bl	8000c20 <MX_UART7_Init>
  MX_I2C1_Init();
 80006b0:	f000 f99e 	bl	80009f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006b4:	f000 f9dc 	bl	8000a70 <MX_I2C2_Init>
  MX_TIM2_Init();
 80006b8:	f000 fafe 	bl	8000cb8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006bc:	f000 fb94 	bl	8000de8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006c0:	f000 fc14 	bl	8000eec <MX_TIM5_Init>
  MX_TIM15_Init();
 80006c4:	f000 fcb0 	bl	8001028 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006c8:	f000 fd50 	bl	800116c <MX_TIM16_Init>
  MX_ADC1_Init();
 80006cc:	f000 f8a2 	bl	8000814 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  setup();
 80006d0:	f001 fb42 	bl	8001d58 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80006d4:	f001 fc00 	bl	8001ed8 <loop>
  {
 80006d8:	e7fc      	b.n	80006d4 <main+0x48>
	...

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09c      	sub	sp, #112	; 0x70
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	224c      	movs	r2, #76	; 0x4c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f010 f8a3 	bl	8010836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2220      	movs	r2, #32
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f010 f89d 	bl	8010836 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006fc:	2002      	movs	r0, #2
 80006fe:	f007 fca3 	bl	8008048 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <SystemClock_Config+0xf4>)
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	4a31      	ldr	r2, [pc, #196]	; (80007d0 <SystemClock_Config+0xf4>)
 800070c:	f023 0301 	bic.w	r3, r3, #1
 8000710:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000712:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <SystemClock_Config+0xf4>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <SystemClock_Config+0xf8>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <SystemClock_Config+0xf8>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <SystemClock_Config+0xf8>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000734:	bf00      	nop
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <SystemClock_Config+0xf8>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000742:	d1f8      	bne.n	8000736 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000744:	2303      	movs	r3, #3
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800074e:	2301      	movs	r3, #1
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	2302      	movs	r3, #2
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800075e:	2305      	movs	r3, #5
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000762:	23a0      	movs	r3, #160	; 0xa0
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 800076e:	2308      	movs	r3, #8
 8000770:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000772:	2308      	movs	r3, #8
 8000774:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000776:	2300      	movs	r3, #0
 8000778:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4618      	mov	r0, r3
 8000784:	f007 fc9a 	bl	80080bc <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800078e:	f000 fe0b 	bl	80013a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	233f      	movs	r3, #63	; 0x3f
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2303      	movs	r3, #3
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800079e:	2309      	movs	r3, #9
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f008 f8da 	bl	8008970 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80007c2:	f000 fdf1 	bl	80013a8 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3770      	adds	r7, #112	; 0x70
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800

080007d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0b0      	sub	sp, #192	; 0xc0
 80007dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	22c0      	movs	r2, #192	; 0xc0
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f010 f826 	bl	8010836 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80007ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80007ee:	f04f 0300 	mov.w	r3, #0
 80007f2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80007f6:	2300      	movs	r3, #0
 80007f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4618      	mov	r0, r3
 80007fe:	f008 fc43 	bl	8009088 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000808:	f000 fdce 	bl	80013a8 <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	37c0      	adds	r7, #192	; 0xc0
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]
 8000836:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000838:	4b63      	ldr	r3, [pc, #396]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800083a:	4a64      	ldr	r2, [pc, #400]	; (80009cc <MX_ADC1_Init+0x1b8>)
 800083c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800083e:	4b62      	ldr	r3, [pc, #392]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000840:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000846:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b5e      	ldr	r3, [pc, #376]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b5d      	ldr	r3, [pc, #372]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b5b      	ldr	r3, [pc, #364]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800085e:	4b5a      	ldr	r3, [pc, #360]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 8000864:	4b58      	ldr	r3, [pc, #352]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000866:	2208      	movs	r2, #8
 8000868:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b57      	ldr	r3, [pc, #348]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b55      	ldr	r3, [pc, #340]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b54      	ldr	r3, [pc, #336]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b52      	ldr	r3, [pc, #328]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000882:	4b51      	ldr	r3, [pc, #324]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000884:	2200      	movs	r2, #0
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000888:	4b4f      	ldr	r3, [pc, #316]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800088a:	2200      	movs	r2, #0
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800088e:	4b4e      	ldr	r3, [pc, #312]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000896:	484c      	ldr	r0, [pc, #304]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000898:	f002 fc98 	bl	80031cc <HAL_ADC_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008a2:	f000 fd81 	bl	80013a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4845      	ldr	r0, [pc, #276]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80008b2:	f003 ff25 	bl	8004700 <HAL_ADCEx_MultiModeConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008bc:	f000 fd74 	bl	80013a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008c0:	4b43      	ldr	r3, [pc, #268]	; (80009d0 <MX_ADC1_Init+0x1bc>)
 80008c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c4:	2306      	movs	r3, #6
 80008c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80008c8:	2304      	movs	r3, #4
 80008ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d2:	2304      	movs	r3, #4
 80008d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4839      	ldr	r0, [pc, #228]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80008e4:	f003 f93a 	bl	8003b5c <HAL_ADC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008ee:	f000 fd5b 	bl	80013a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <MX_ADC1_Init+0x1c0>)
 80008f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008f6:	230c      	movs	r3, #12
 80008f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4832      	ldr	r0, [pc, #200]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000900:	f003 f92c 	bl	8003b5c <HAL_ADC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800090a:	f000 fd4d 	bl	80013a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800090e:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MX_ADC1_Init+0x1c4>)
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000912:	2312      	movs	r3, #18
 8000914:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	4619      	mov	r1, r3
 800091a:	482b      	ldr	r0, [pc, #172]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800091c:	f003 f91e 	bl	8003b5c <HAL_ADC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000926:	f000 fd3f 	bl	80013a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_ADC1_Init+0x1c8>)
 800092c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800092e:	2318      	movs	r3, #24
 8000930:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4824      	ldr	r0, [pc, #144]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000938:	f003 f910 	bl	8003b5c <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000942:	f000 fd31 	bl	80013a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_ADC1_Init+0x1cc>)
 8000948:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800094a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	481c      	ldr	r0, [pc, #112]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000956:	f003 f901 	bl	8003b5c <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000960:	f000 fd22 	bl	80013a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_ADC1_Init+0x1d0>)
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000968:	f44f 7383 	mov.w	r3, #262	; 0x106
 800096c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4815      	ldr	r0, [pc, #84]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000974:	f003 f8f2 	bl	8003b5c <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800097e:	f000 fd13 	bl	80013a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_ADC1_Init+0x1d4>)
 8000984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000986:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000992:	f003 f8e3 	bl	8003b5c <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800099c:	f000 fd04 	bl	80013a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_ADC1_Init+0x1d8>)
 80009a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009a4:	f44f 7389 	mov.w	r3, #274	; 0x112
 80009a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80009b0:	f003 f8d4 	bl	8003b5c <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80009ba:	f000 fcf5 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	240001f8 	.word	0x240001f8
 80009cc:	40022000 	.word	0x40022000
 80009d0:	0c900008 	.word	0x0c900008
 80009d4:	10c00010 	.word	0x10c00010
 80009d8:	14f00020 	.word	0x14f00020
 80009dc:	21800100 	.word	0x21800100
 80009e0:	25b00200 	.word	0x25b00200
 80009e4:	2a000400 	.word	0x2a000400
 80009e8:	2e300800 	.word	0x2e300800
 80009ec:	4b840000 	.word	0x4b840000

080009f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f007 f88e 	bl	8007b4c <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 fcb7 	bl	80013a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f007 fa6c 	bl	8007f1a <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fcae 	bl	80013a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f007 faae 	bl	8007fb0 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fca5 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	240002d4 	.word	0x240002d4
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	10c0ecff 	.word	0x10c0ecff

08000a70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_I2C2_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <MX_I2C2_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aac:	f007 f84e 	bl	8007b4c <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 fc77 	bl	80013a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000abe:	f007 fa2c 	bl	8007f1a <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fc6e 	bl	80013a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000ad0:	f007 fa6e 	bl	8007fb0 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fc65 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000328 	.word	0x24000328
 8000ae8:	40005800 	.word	0x40005800
 8000aec:	10c0ecff 	.word	0x10c0ecff

08000af0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <MX_LPUART1_UART_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b3a:	f00d f957 	bl	800ddec <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 fc30 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b4c:	f00f f847 	bl	800fbde <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 fc27 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b5e:	f00f f87c 	bl	800fc5a <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 fc1e 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b6e:	f00e fffd 	bl	800fb6c <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 fc16 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2400037c 	.word	0x2400037c
 8000b84:	58000c00 	.word	0x58000c00

08000b88 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_UART5_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_UART5_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_UART5_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bd2:	f00d f90b 	bl	800ddec <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 fbe4 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_UART5_Init+0x90>)
 8000be4:	f00e fffb 	bl	800fbde <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 fbdb 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bf6:	f00f f830 	bl	800fc5a <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 fbd2 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_UART5_Init+0x90>)
 8000c06:	f00e ffb1 	bl	800fb6c <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 fbca 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000410 	.word	0x24000410
 8000c1c:	40005000 	.word	0x40005000

08000c20 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <MX_UART7_Init+0x94>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c6a:	f00d f8bf 	bl	800ddec <HAL_UART_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000c74:	f000 fb98 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c7c:	f00e ffaf 	bl	800fbde <HAL_UARTEx_SetTxFifoThreshold>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000c86:	f000 fb8f 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c8e:	f00e ffe4 	bl	800fc5a <HAL_UARTEx_SetRxFifoThreshold>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000c98:	f000 fb86 	bl	80013a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c9e:	f00e ff65 	bl	800fb6c <HAL_UARTEx_DisableFifoMode>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000ca8:	f000 fb7e 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240004a4 	.word	0x240004a4
 8000cb4:	40007800 	.word	0x40007800

08000cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
 8000ce6:	615a      	str	r2, [r3, #20]
 8000ce8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cea:	4b3e      	ldr	r3, [pc, #248]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000d00:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d02:	2263      	movs	r2, #99	; 0x63
 8000d04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d12:	4834      	ldr	r0, [pc, #208]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d14:	f00a feb6 	bl	800ba84 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d1e:	f000 fb43 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482d      	ldr	r0, [pc, #180]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d30:	f00b ffcc 	bl	800cccc <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d3a:	f000 fb35 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d3e:	4829      	ldr	r0, [pc, #164]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d40:	f00a ff9f 	bl	800bc82 <HAL_TIM_PWM_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d4a:	f000 fb2d 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4821      	ldr	r0, [pc, #132]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d5e:	f00c ff99 	bl	800dc94 <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d68:	f000 fb1e 	bl	80013a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d84:	f00b fe8e 	bl	800caa4 <HAL_TIM_PWM_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d8e:	f000 fb0b 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	2204      	movs	r2, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4812      	ldr	r0, [pc, #72]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d9a:	f00b fe83 	bl	800caa4 <HAL_TIM_PWM_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000da4:	f000 fb00 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	2208      	movs	r2, #8
 8000dac:	4619      	mov	r1, r3
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000db0:	f00b fe78 	bl	800caa4 <HAL_TIM_PWM_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000dba:	f000 faf5 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000dc6:	f00b fe6d 	bl	800caa4 <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000dd0:	f000 faea 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000dd6:	f001 fcd1 	bl	800277c <HAL_TIM_MspPostInit>

}
 8000dda:	bf00      	nop
 8000ddc:	3738      	adds	r7, #56	; 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	24000628 	.word	0x24000628

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1a:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e1c:	4a32      	ldr	r2, [pc, #200]	; (8000ee8 <MX_TIM3_Init+0x100>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000e20:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e22:	2263      	movs	r2, #99	; 0x63
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e2e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e40:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e42:	f00a fe1f 	bl	800ba84 <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e4c:	f000 faac 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4821      	ldr	r0, [pc, #132]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e5e:	f00b ff35 	bl	800cccc <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e68:	f000 fa9e 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6c:	481d      	ldr	r0, [pc, #116]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e6e:	f00a ff08 	bl	800bc82 <HAL_TIM_PWM_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e78:	f000 fa96 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e8c:	f00c ff02 	bl	800dc94 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e96:	f000 fa87 	bl	80013a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9a:	2360      	movs	r3, #96	; 0x60
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000eb2:	f00b fdf7 	bl	800caa4 <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ebc:	f000 fa74 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000ec8:	f00b fdec 	bl	800caa4 <HAL_TIM_PWM_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000ed2:	f000 fa69 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000ed8:	f001 fc50 	bl	800277c <HAL_TIM_MspPostInit>

}
 8000edc:	bf00      	nop
 8000ede:	3738      	adds	r7, #56	; 0x38
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	24000674 	.word	0x24000674
 8000ee8:	40000400 	.word	0x40000400

08000eec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b090      	sub	sp, #64	; 0x40
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f28:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f2a:	4a3e      	ldr	r2, [pc, #248]	; (8001024 <MX_TIM5_Init+0x138>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f30:	2263      	movs	r2, #99	; 0x63
 8000f32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b37      	ldr	r3, [pc, #220]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f4e:	4834      	ldr	r0, [pc, #208]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f50:	f00a fd98 	bl	800ba84 <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000f5a:	f000 fa25 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f68:	4619      	mov	r1, r3
 8000f6a:	482d      	ldr	r0, [pc, #180]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f6c:	f00b feae 	bl	800cccc <HAL_TIM_ConfigClockSource>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000f76:	f000 fa17 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000f7a:	4829      	ldr	r0, [pc, #164]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f7c:	f00a fff0 	bl	800bf60 <HAL_TIM_IC_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000f86:	f000 fa0f 	bl	80013a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f8e:	2350      	movs	r3, #80	; 0x50
 8000f90:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481e      	ldr	r0, [pc, #120]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fa6:	f00b ff89 	bl	800cebc <HAL_TIM_SlaveConfigSynchro>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000fb0:	f000 f9fa 	bl	80013a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fce:	f00b fccc 	bl	800c96a <HAL_TIM_IC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8000fd8:	f000 f9e6 	bl	80013a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fee:	f00b fcbc 	bl	800c96a <HAL_TIM_IC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8000ff8:	f000 f9d6 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_TIM5_Init+0x134>)
 800100a:	f00c fe43 	bl	800dc94 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8001014:	f000 f9c8 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3740      	adds	r7, #64	; 0x40
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	240006c0 	.word	0x240006c0
 8001024:	40000c00 	.word	0x40000c00

08001028 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	; 0x40
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001064:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001066:	4a40      	ldr	r2, [pc, #256]	; (8001168 <MX_TIM15_Init+0x140>)
 8001068:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 800106a:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <MX_TIM15_Init+0x13c>)
 800106c:	2263      	movs	r2, #99	; 0x63
 800106e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001084:	4b37      	ldr	r3, [pc, #220]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <MX_TIM15_Init+0x13c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001090:	4834      	ldr	r0, [pc, #208]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001092:	f00a fcf7 	bl	800ba84 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800109c:	f000 f984 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010aa:	4619      	mov	r1, r3
 80010ac:	482d      	ldr	r0, [pc, #180]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010ae:	f00b fe0d 	bl	800cccc <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80010b8:	f000 f976 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80010bc:	4829      	ldr	r0, [pc, #164]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010be:	f00a ff4f 	bl	800bf60 <HAL_TIM_IC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 80010c8:	f000 f96e 	bl	80013a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010cc:	2304      	movs	r3, #4
 80010ce:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80010d0:	2350      	movs	r3, #80	; 0x50
 80010d2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	481f      	ldr	r0, [pc, #124]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010e8:	f00b fee8 	bl	800cebc <HAL_TIM_SlaveConfigSynchro>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80010f2:	f000 f959 	bl	80013a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010fa:	2301      	movs	r3, #1
 80010fc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4815      	ldr	r0, [pc, #84]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001110:	f00b fc2b 	bl	800c96a <HAL_TIM_IC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800111a:	f000 f945 	bl	80013a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800111e:	2302      	movs	r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2204      	movs	r2, #4
 800112c:	4619      	mov	r1, r3
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001130:	f00b fc1b 	bl	800c96a <HAL_TIM_IC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 800113a:	f000 f935 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_TIM15_Init+0x13c>)
 800114c:	f00c fda2 	bl	800dc94 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001156:	f000 f927 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3740      	adds	r7, #64	; 0x40
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2400070c 	.word	0x2400070c
 8001168:	40014000 	.word	0x40014000

0800116c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <MX_TIM16_Init+0x48>)
 8001174:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 99;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001178:	2263      	movs	r2, #99	; 0x63
 800117a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_TIM16_Init+0x44>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001188:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_TIM16_Init+0x44>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_TIM16_Init+0x44>)
 800119e:	f00a fc71 	bl	800ba84 <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80011a8:	f000 f8fe 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	24000758 	.word	0x24000758
 80011b4:	40014400 	.word	0x40014400

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_DMA_Init+0x5c>)
 80011c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011c4:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_DMA_Init+0x5c>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_DMA_Init+0x5c>)
 80011d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	200b      	movs	r0, #11
 80011e2:	f003 fc46 	bl	8004a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011e6:	200b      	movs	r0, #11
 80011e8:	f003 fc5d 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	200c      	movs	r0, #12
 80011f2:	f003 fc3e 	bl	8004a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011f6:	200c      	movs	r0, #12
 80011f8:	f003 fc55 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	200d      	movs	r0, #13
 8001202:	f003 fc36 	bl	8004a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001206:	200d      	movs	r0, #13
 8001208:	f003 fc4d 	bl	8004aa6 <HAL_NVIC_EnableIRQ>

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58024400 	.word	0x58024400

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b5a      	ldr	r3, [pc, #360]	; (8001398 <MX_GPIO_Init+0x180>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a58      	ldr	r2, [pc, #352]	; (8001398 <MX_GPIO_Init+0x180>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b56      	ldr	r3, [pc, #344]	; (8001398 <MX_GPIO_Init+0x180>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b52      	ldr	r3, [pc, #328]	; (8001398 <MX_GPIO_Init+0x180>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a51      	ldr	r2, [pc, #324]	; (8001398 <MX_GPIO_Init+0x180>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b4e      	ldr	r3, [pc, #312]	; (8001398 <MX_GPIO_Init+0x180>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	4b4b      	ldr	r3, [pc, #300]	; (8001398 <MX_GPIO_Init+0x180>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a49      	ldr	r2, [pc, #292]	; (8001398 <MX_GPIO_Init+0x180>)
 8001272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <MX_GPIO_Init+0x180>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b43      	ldr	r3, [pc, #268]	; (8001398 <MX_GPIO_Init+0x180>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	4a42      	ldr	r2, [pc, #264]	; (8001398 <MX_GPIO_Init+0x180>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001298:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <MX_GPIO_Init+0x180>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <MX_GPIO_Init+0x180>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <MX_GPIO_Init+0x180>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b38      	ldr	r3, [pc, #224]	; (8001398 <MX_GPIO_Init+0x180>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <MX_GPIO_Init+0x180>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	4a33      	ldr	r2, [pc, #204]	; (8001398 <MX_GPIO_Init+0x180>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <MX_GPIO_Init+0x180>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e8:	482c      	ldr	r0, [pc, #176]	; (800139c <MX_GPIO_Init+0x184>)
 80012ea:	f006 fbfb 	bl	8007ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f24c 0120 	movw	r1, #49184	; 0xc020
 80012f4:	482a      	ldr	r0, [pc, #168]	; (80013a0 <MX_GPIO_Init+0x188>)
 80012f6:	f006 fbf5 	bl	8007ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|LED_BLUE_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001300:	4828      	ldr	r0, [pc, #160]	; (80013a4 <MX_GPIO_Init+0x18c>)
 8001302:	f006 fbef 	bl	8007ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4820      	ldr	r0, [pc, #128]	; (800139c <MX_GPIO_Init+0x184>)
 800131a:	f006 fa1b 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800131e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <MX_GPIO_Init+0x184>)
 8001338:	f006 fa0c 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin Manual_Output_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin;
 800133c:	f24c 0320 	movw	r3, #49184	; 0xc020
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4812      	ldr	r0, [pc, #72]	; (80013a0 <MX_GPIO_Init+0x188>)
 8001356:	f006 f9fd 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin LED_BLUE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin|LED_BLUE_Pin|LED_YELLOW_Pin;
 800135a:	f44f 734a 	mov.w	r3, #808	; 0x328
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_GPIO_Init+0x18c>)
 8001374:	f006 f9ee 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_GPIO_Init+0x188>)
 800138c:	f006 f9e2 	bl	8007754 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001390:	bf00      	nop
 8001392:	3730      	adds	r7, #48	; 0x30
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	58024400 	.word	0x58024400
 800139c:	58021000 	.word	0x58021000
 80013a0:	58020400 	.word	0x58020400
 80013a4:	58020c00 	.word	0x58020c00

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <Error_Handler+0x8>
	...

080013b4 <_ZL8DWT_Initv>:
#define INC_UTILITY_H_

#include "main.h"

static inline void DWT_Init(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_ZL8DWT_Initv+0x28>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <_ZL8DWT_Initv+0x28>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <_ZL8DWT_Initv+0x2c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <_ZL8DWT_Initv+0x2c>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000edf0 	.word	0xe000edf0
 80013e0:	e0001000 	.word	0xe0001000

080013e4 <_Z15read_speed_datav>:
uint8_t ch3_cnt=0,ch4_cnt=99;

uint32_t servo_duty,esc_duty,freq;
uint32_t force_raw[8];

HAL_StatusTypeDef read_speed_data(){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80013ea:	2300      	movs	r3, #0
 80013ec:	71fb      	strb	r3, [r7, #7]
 80013ee:	e009      	b.n	8001404 <_Z15read_speed_datav+0x20>
		if(received_speed[i]==acsr)break;
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4a1a      	ldr	r2, [pc, #104]	; (800145c <_Z15read_speed_datav+0x78>)
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	4a19      	ldr	r2, [pc, #100]	; (8001460 <_Z15read_speed_datav+0x7c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d006      	beq.n	800140c <_Z15read_speed_datav+0x28>
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	3301      	adds	r3, #1
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b10      	cmp	r3, #16
 8001408:	d9f2      	bls.n	80013f0 <_Z15read_speed_datav+0xc>
 800140a:	e000      	b.n	800140e <_Z15read_speed_datav+0x2a>
		if(received_speed[i]==acsr)break;
 800140c:	bf00      	nop
	}
	if(i==SPEED_PIN_COUNT+1)return HAL_ERROR;
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b11      	cmp	r3, #17
 8001412:	d101      	bne.n	8001418 <_Z15read_speed_datav+0x34>
 8001414:	2301      	movs	r3, #1
 8001416:	e01c      	b.n	8001452 <_Z15read_speed_datav+0x6e>

	memcpy(speed,&received_speed[i+1],(SPEED_PIN_COUNT-i)*sizeof(uint32_t));
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	3301      	adds	r3, #1
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <_Z15read_speed_datav+0x78>)
 8001420:	1899      	adds	r1, r3, r2
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f1c3 0310 	rsb	r3, r3, #16
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	461a      	mov	r2, r3
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <_Z15read_speed_datav+0x80>)
 800142e:	f00f fa82 	bl	8010936 <memcpy>
	if(i){
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00b      	beq.n	8001450 <_Z15read_speed_datav+0x6c>
		memcpy(&speed[SPEED_PIN_COUNT-i],received_speed,i*sizeof(uint32_t));
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f1c3 0310 	rsb	r3, r3, #16
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4a08      	ldr	r2, [pc, #32]	; (8001464 <_Z15read_speed_datav+0x80>)
 8001442:	1898      	adds	r0, r3, r2
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	461a      	mov	r2, r3
 800144a:	4904      	ldr	r1, [pc, #16]	; (800145c <_Z15read_speed_datav+0x78>)
 800144c:	f00f fa73 	bl	8010936 <memcpy>
	}
	return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	240007a8 	.word	0x240007a8
 8001460:	41435352 	.word	0x41435352
 8001464:	240007ec 	.word	0x240007ec

08001468 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5){
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a46      	ldr	r2, [pc, #280]	; (8001590 <HAL_UART_RxCpltCallback+0x128>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10f      	bne.n	800149a <HAL_UART_RxCpltCallback+0x32>
		if(read_speed_data()==HAL_ERROR){
 800147a:	f7ff ffb3 	bl	80013e4 <_Z15read_speed_datav>
 800147e:	4603      	mov	r3, r0
 8001480:	2b01      	cmp	r3, #1
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d07b      	beq.n	8001586 <HAL_UART_RxCpltCallback+0x11e>
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 800148e:	2244      	movs	r2, #68	; 0x44
 8001490:	4940      	ldr	r1, [pc, #256]	; (8001594 <HAL_UART_RxCpltCallback+0x12c>)
 8001492:	4841      	ldr	r0, [pc, #260]	; (8001598 <HAL_UART_RxCpltCallback+0x130>)
 8001494:	f00c fd88 	bl	800dfa8 <HAL_UART_Receive_DMA>
			break;
		default:
			break;
		}
	}
}
 8001498:	e075      	b.n	8001586 <HAL_UART_RxCpltCallback+0x11e>
	}else if(huart->Instance==UART7){
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a3f      	ldr	r2, [pc, #252]	; (800159c <HAL_UART_RxCpltCallback+0x134>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d170      	bne.n	8001586 <HAL_UART_RxCpltCallback+0x11e>
		switch(led_state){
 80014a4:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <HAL_UART_RxCpltCallback+0x138>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b42      	cmp	r3, #66	; 0x42
 80014aa:	d061      	beq.n	8001570 <HAL_UART_RxCpltCallback+0x108>
 80014ac:	2b42      	cmp	r3, #66	; 0x42
 80014ae:	db69      	blt.n	8001584 <HAL_UART_RxCpltCallback+0x11c>
 80014b0:	2b79      	cmp	r3, #121	; 0x79
 80014b2:	dc67      	bgt.n	8001584 <HAL_UART_RxCpltCallback+0x11c>
 80014b4:	2b52      	cmp	r3, #82	; 0x52
 80014b6:	db65      	blt.n	8001584 <HAL_UART_RxCpltCallback+0x11c>
 80014b8:	3b52      	subs	r3, #82	; 0x52
 80014ba:	2b27      	cmp	r3, #39	; 0x27
 80014bc:	d862      	bhi.n	8001584 <HAL_UART_RxCpltCallback+0x11c>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <HAL_UART_RxCpltCallback+0x5c>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	08001565 	.word	0x08001565
 80014c8:	08001585 	.word	0x08001585
 80014cc:	08001585 	.word	0x08001585
 80014d0:	08001585 	.word	0x08001585
 80014d4:	08001585 	.word	0x08001585
 80014d8:	08001585 	.word	0x08001585
 80014dc:	08001585 	.word	0x08001585
 80014e0:	0800157b 	.word	0x0800157b
 80014e4:	08001585 	.word	0x08001585
 80014e8:	08001585 	.word	0x08001585
 80014ec:	08001585 	.word	0x08001585
 80014f0:	08001585 	.word	0x08001585
 80014f4:	08001585 	.word	0x08001585
 80014f8:	08001585 	.word	0x08001585
 80014fc:	08001585 	.word	0x08001585
 8001500:	08001585 	.word	0x08001585
 8001504:	08001571 	.word	0x08001571
 8001508:	08001585 	.word	0x08001585
 800150c:	08001585 	.word	0x08001585
 8001510:	08001585 	.word	0x08001585
 8001514:	08001585 	.word	0x08001585
 8001518:	08001585 	.word	0x08001585
 800151c:	08001585 	.word	0x08001585
 8001520:	08001585 	.word	0x08001585
 8001524:	08001585 	.word	0x08001585
 8001528:	08001585 	.word	0x08001585
 800152c:	08001585 	.word	0x08001585
 8001530:	08001585 	.word	0x08001585
 8001534:	08001585 	.word	0x08001585
 8001538:	08001585 	.word	0x08001585
 800153c:	08001585 	.word	0x08001585
 8001540:	08001585 	.word	0x08001585
 8001544:	08001565 	.word	0x08001565
 8001548:	08001585 	.word	0x08001585
 800154c:	08001585 	.word	0x08001585
 8001550:	08001585 	.word	0x08001585
 8001554:	08001585 	.word	0x08001585
 8001558:	08001585 	.word	0x08001585
 800155c:	08001585 	.word	0x08001585
 8001560:	0800157b 	.word	0x0800157b
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001568:	480e      	ldr	r0, [pc, #56]	; (80015a4 <HAL_UART_RxCpltCallback+0x13c>)
 800156a:	f006 fad4 	bl	8007b16 <HAL_GPIO_TogglePin>
			break;
 800156e:	e00a      	b.n	8001586 <HAL_UART_RxCpltCallback+0x11e>
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001570:	2108      	movs	r1, #8
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <HAL_UART_RxCpltCallback+0x140>)
 8001574:	f006 facf 	bl	8007b16 <HAL_GPIO_TogglePin>
			break;
 8001578:	e005      	b.n	8001586 <HAL_UART_RxCpltCallback+0x11e>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800157a:	2120      	movs	r1, #32
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <HAL_UART_RxCpltCallback+0x140>)
 800157e:	f006 faca 	bl	8007b16 <HAL_GPIO_TogglePin>
			break;
 8001582:	e000      	b.n	8001586 <HAL_UART_RxCpltCallback+0x11e>
			break;
 8001584:	bf00      	nop
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40005000 	.word	0x40005000
 8001594:	240007a8 	.word	0x240007a8
 8001598:	24000410 	.word	0x24000410
 800159c:	40007800 	.word	0x40007800
 80015a0:	2400082c 	.word	0x2400082c
 80015a4:	58021000 	.word	0x58021000
 80015a8:	58020c00 	.word	0x58020c00

080015ac <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==UART5) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <HAL_UART_ErrorCallback+0x24>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d104      	bne.n	80015c8 <HAL_UART_ErrorCallback+0x1c>
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 80015be:	2244      	movs	r2, #68	; 0x44
 80015c0:	4904      	ldr	r1, [pc, #16]	; (80015d4 <HAL_UART_ErrorCallback+0x28>)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_UART_ErrorCallback+0x2c>)
 80015c4:	f00c fcf0 	bl	800dfa8 <HAL_UART_Receive_DMA>
    }
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40005000 	.word	0x40005000
 80015d4:	240007a8 	.word	0x240007a8
 80015d8:	24000410 	.word	0x24000410

080015dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM16){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d113      	bne.n	8001616 <HAL_TIM_PeriodElapsedCallback+0x3a>
		if(input_mode==Manual){
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d10f      	bne.n	8001616 <HAL_TIM_PeriodElapsedCallback+0x3a>
			esc_duty=0;
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
			servo_duty=0;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,esc_duty);
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a09      	ldr	r2, [pc, #36]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,servo_duty);
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40014400 	.word	0x40014400
 8001628:	240007a4 	.word	0x240007a4
 800162c:	24000834 	.word	0x24000834
 8001630:	24000830 	.word	0x24000830
 8001634:	24000674 	.word	0x24000674

08001638 <HAL_TIM_IC_CaptureCallback>:
	char msg[100]={0};
	sprintf(msg,"Force: %0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f\n",force[0],force[1],force[2],force[3],force[4],force[5],force[6],force[7]);

}*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

//	if(input_mode==Auto)return;

	uint32_t temp_freq;
	if(htim->Instance==TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a35      	ldr	r2, [pc, #212]	; (800171c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d121      	bne.n	800168e <HAL_TIM_IC_CaptureCallback+0x56>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7f1b      	ldrb	r3, [r3, #28]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d11d      	bne.n	800168e <HAL_TIM_IC_CaptureCallback+0x56>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001652:	2100      	movs	r1, #0
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f00b fc73 	bl	800cf40 <HAL_TIM_ReadCapturedValue>
 800165a:	60f8      	str	r0, [r7, #12]
		servo_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800165c:	2104      	movs	r1, #4
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f00b fc6e 	bl	800cf40 <HAL_TIM_ReadCapturedValue>
 8001664:	4603      	mov	r3, r0
 8001666:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001668:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_duty);
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_TIM_IC_CaptureCallback+0xec>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a2c      	ldr	r2, [pc, #176]	; (8001720 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCounter(htim,0);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800167c:	2100      	movs	r1, #0
 800167e:	482a      	ldr	r0, [pc, #168]	; (8001728 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001680:	f00a fe46 	bl	800c310 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001684:	2104      	movs	r1, #4
 8001686:	4828      	ldr	r0, [pc, #160]	; (8001728 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001688:	f00a fccc 	bl	800c024 <HAL_TIM_IC_Start>
 800168c:	e025      	b.n	80016da <HAL_TIM_IC_CaptureCallback+0xa2>

	}else if(htim->Instance==TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a26      	ldr	r2, [pc, #152]	; (800172c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d120      	bne.n	80016da <HAL_TIM_IC_CaptureCallback+0xa2>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7f1b      	ldrb	r3, [r3, #28]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d11c      	bne.n	80016da <HAL_TIM_IC_CaptureCallback+0xa2>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80016a0:	2100      	movs	r1, #0
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f00b fc4c 	bl	800cf40 <HAL_TIM_ReadCapturedValue>
 80016a8:	60f8      	str	r0, [r7, #12]
		esc_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80016aa:	2104      	movs	r1, #4
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f00b fc47 	bl	800cf40 <HAL_TIM_ReadCapturedValue>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80016b6:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_duty);
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_TIM_IC_CaptureCallback+0xec>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCounter(htim,0);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80016ca:	2100      	movs	r1, #0
 80016cc:	4819      	ldr	r0, [pc, #100]	; (8001734 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80016ce:	f00a fe1f 	bl	800c310 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 80016d2:	2104      	movs	r1, #4
 80016d4:	4817      	ldr	r0, [pc, #92]	; (8001734 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80016d6:	f00a fca5 	bl	800c024 <HAL_TIM_IC_Start>

	}
	if(freq<1000 || abs((int)temp_freq-(int)freq)>50){
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_TIM_IC_CaptureCallback+0x100>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e2:	d308      	bcc.n	80016f6 <HAL_TIM_IC_CaptureCallback+0xbe>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4a14      	ldr	r2, [pc, #80]	; (8001738 <HAL_TIM_IC_CaptureCallback+0x100>)
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bfb8      	it	lt
 80016f0:	425b      	neglt	r3, r3
 80016f2:	2b32      	cmp	r3, #50	; 0x32
 80016f4:	dd09      	ble.n	800170a <HAL_TIM_IC_CaptureCallback+0xd2>
		freq=temp_freq;
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_TIM_IC_CaptureCallback+0x100>)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_TIM_IC_CaptureCallback+0xec>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	60d3      	str	r3, [r2, #12]
	}
	__HAL_TIM_SetCounter(&htim16,0);
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_TIM_IC_CaptureCallback+0x104>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40000c00 	.word	0x40000c00
 8001720:	24000830 	.word	0x24000830
 8001724:	24000674 	.word	0x24000674
 8001728:	240006c0 	.word	0x240006c0
 800172c:	40014000 	.word	0x40014000
 8001730:	24000834 	.word	0x24000834
 8001734:	2400070c 	.word	0x2400070c
 8001738:	24000838 	.word	0x24000838
 800173c:	24000758 	.word	0x24000758

08001740 <_Z8test_i2cv>:

void test_cp2101(){

}

void test_i2c(){
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b091      	sub	sp, #68	; 0x44
 8001744:	af00      	add	r7, sp, #0

    uint8_t i;
    HAL_StatusTypeDef ret;
    uint8_t address[10];
    uint8_t length=0;
 8001746:	2300      	movs	r3, #0
 8001748:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 800174c:	2301      	movs	r3, #1
 800174e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001752:	e020      	b.n	8001796 <_Z8test_i2cv+0x56>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8001754:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001758:	b29b      	uxth	r3, r3
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	b299      	uxth	r1, r3
 800175e:	2305      	movs	r3, #5
 8001760:	2203      	movs	r2, #3
 8001762:	4865      	ldr	r0, [pc, #404]	; (80018f8 <_Z8test_i2cv+0x1b8>)
 8001764:	f006 fa82 	bl	8007c6c <HAL_I2C_IsDeviceReady>
 8001768:	4603      	mov	r3, r0
 800176a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        if(ret == HAL_OK)
 800176e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10a      	bne.n	800178c <_Z8test_i2cv+0x4c>
        {
            address[length++]=i;
 8001776:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001780:	3340      	adds	r3, #64	; 0x40
 8001782:	443b      	add	r3, r7
 8001784:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001788:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 800178c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001790:	3301      	adds	r3, #1
 8001792:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001796:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800179a:	2b00      	cmp	r3, #0
 800179c:	dada      	bge.n	8001754 <_Z8test_i2cv+0x14>
        }
    }
    uint8_t i2c_start_msg1[] = "I2C Scanning:\n";
 800179e:	4b57      	ldr	r3, [pc, #348]	; (80018fc <_Z8test_i2cv+0x1bc>)
 80017a0:	f107 0420 	add.w	r4, r7, #32
 80017a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a6:	c407      	stmia	r4!, {r0, r1, r2}
 80017a8:	8023      	strh	r3, [r4, #0]
 80017aa:	3402      	adds	r4, #2
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	7023      	strb	r3, [r4, #0]

	char buffer[25] = {0};
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
 80017c4:	751a      	strb	r2, [r3, #20]
	HAL_UART_Transmit(&huart7, i2c_start_msg1, sizeof(i2c_start_msg1)-1, 10);
 80017c6:	f107 0120 	add.w	r1, r7, #32
 80017ca:	230a      	movs	r3, #10
 80017cc:	220e      	movs	r2, #14
 80017ce:	484c      	ldr	r0, [pc, #304]	; (8001900 <_Z8test_i2cv+0x1c0>)
 80017d0:	f00c fb5c 	bl	800de8c <HAL_UART_Transmit>

	if(length==2){
 80017d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d10f      	bne.n	80017fc <_Z8test_i2cv+0xbc>
		sprintf(buffer, "\tI2C1 Address:0x%02X,0x%02X\n", address[0],address[1]);
 80017dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017e0:	461a      	mov	r2, r3
 80017e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80017e6:	1d38      	adds	r0, r7, #4
 80017e8:	4946      	ldr	r1, [pc, #280]	; (8001904 <_Z8test_i2cv+0x1c4>)
 80017ea:	f00e ffc1 	bl	8010770 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 80017ee:	1d39      	adds	r1, r7, #4
 80017f0:	230a      	movs	r3, #10
 80017f2:	2218      	movs	r2, #24
 80017f4:	4842      	ldr	r0, [pc, #264]	; (8001900 <_Z8test_i2cv+0x1c0>)
 80017f6:	f00c fb49 	bl	800de8c <HAL_UART_Transmit>
 80017fa:	e01c      	b.n	8001836 <_Z8test_i2cv+0xf6>
	}else if(length==1){
 80017fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001800:	2b01      	cmp	r3, #1
 8001802:	d10e      	bne.n	8001822 <_Z8test_i2cv+0xe2>
		sprintf(buffer, "\tI2C1 Address:0x%02X\n", address[0]);
 8001804:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001808:	461a      	mov	r2, r3
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	493e      	ldr	r1, [pc, #248]	; (8001908 <_Z8test_i2cv+0x1c8>)
 800180e:	4618      	mov	r0, r3
 8001810:	f00e ffae 	bl	8010770 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 8001814:	1d39      	adds	r1, r7, #4
 8001816:	230a      	movs	r3, #10
 8001818:	2213      	movs	r2, #19
 800181a:	4839      	ldr	r0, [pc, #228]	; (8001900 <_Z8test_i2cv+0x1c0>)
 800181c:	f00c fb36 	bl	800de8c <HAL_UART_Transmit>
 8001820:	e009      	b.n	8001836 <_Z8test_i2cv+0xf6>
	}else if(length==0){
 8001822:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001826:	2b00      	cmp	r3, #0
 8001828:	d105      	bne.n	8001836 <_Z8test_i2cv+0xf6>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C1\n", 25, 10);
 800182a:	230a      	movs	r3, #10
 800182c:	2219      	movs	r2, #25
 800182e:	4937      	ldr	r1, [pc, #220]	; (800190c <_Z8test_i2cv+0x1cc>)
 8001830:	4833      	ldr	r0, [pc, #204]	; (8001900 <_Z8test_i2cv+0x1c0>)
 8001832:	f00c fb2b 	bl	800de8c <HAL_UART_Transmit>
	}

    length=0;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 800183c:	2301      	movs	r3, #1
 800183e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001842:	e020      	b.n	8001886 <_Z8test_i2cv+0x146>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8001844:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001848:	b29b      	uxth	r3, r3
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	b299      	uxth	r1, r3
 800184e:	2305      	movs	r3, #5
 8001850:	2203      	movs	r2, #3
 8001852:	482f      	ldr	r0, [pc, #188]	; (8001910 <_Z8test_i2cv+0x1d0>)
 8001854:	f006 fa0a 	bl	8007c6c <HAL_I2C_IsDeviceReady>
 8001858:	4603      	mov	r3, r0
 800185a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if(ret == HAL_OK)
 800185e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10a      	bne.n	800187c <_Z8test_i2cv+0x13c>
		{
			address[length++]=i;
 8001866:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001870:	3340      	adds	r3, #64	; 0x40
 8001872:	443b      	add	r3, r7
 8001874:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001878:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 800187c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001880:	3301      	adds	r3, #1
 8001882:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001886:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800188a:	2b00      	cmp	r3, #0
 800188c:	dada      	bge.n	8001844 <_Z8test_i2cv+0x104>
		}
	}
    if(length==2){
 800188e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001892:	2b02      	cmp	r3, #2
 8001894:	d10f      	bne.n	80018b6 <_Z8test_i2cv+0x176>
		sprintf(buffer, "\tI2C2 Address:0x%02X,0x%02X\n", address[0],address[1]);
 8001896:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800189a:	461a      	mov	r2, r3
 800189c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80018a0:	1d38      	adds	r0, r7, #4
 80018a2:	491c      	ldr	r1, [pc, #112]	; (8001914 <_Z8test_i2cv+0x1d4>)
 80018a4:	f00e ff64 	bl	8010770 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 80018a8:	1d39      	adds	r1, r7, #4
 80018aa:	230a      	movs	r3, #10
 80018ac:	2218      	movs	r2, #24
 80018ae:	4814      	ldr	r0, [pc, #80]	; (8001900 <_Z8test_i2cv+0x1c0>)
 80018b0:	f00c faec 	bl	800de8c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
	}else if(length==0){
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
	}

}
 80018b4:	e01c      	b.n	80018f0 <_Z8test_i2cv+0x1b0>
	}else if(length==1){
 80018b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d10e      	bne.n	80018dc <_Z8test_i2cv+0x19c>
		sprintf(buffer, "\tI2C2 Address:0x%02X\n", address[0]);
 80018be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018c2:	461a      	mov	r2, r3
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4914      	ldr	r1, [pc, #80]	; (8001918 <_Z8test_i2cv+0x1d8>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00e ff51 	bl	8010770 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 80018ce:	1d39      	adds	r1, r7, #4
 80018d0:	230a      	movs	r3, #10
 80018d2:	2213      	movs	r2, #19
 80018d4:	480a      	ldr	r0, [pc, #40]	; (8001900 <_Z8test_i2cv+0x1c0>)
 80018d6:	f00c fad9 	bl	800de8c <HAL_UART_Transmit>
}
 80018da:	e009      	b.n	80018f0 <_Z8test_i2cv+0x1b0>
	}else if(length==0){
 80018dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <_Z8test_i2cv+0x1b0>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
 80018e4:	230a      	movs	r3, #10
 80018e6:	2219      	movs	r2, #25
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <_Z8test_i2cv+0x1dc>)
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <_Z8test_i2cv+0x1c0>)
 80018ec:	f00c face 	bl	800de8c <HAL_UART_Transmit>
}
 80018f0:	bf00      	nop
 80018f2:	3744      	adds	r7, #68	; 0x44
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	240002d4 	.word	0x240002d4
 80018fc:	080129e0 	.word	0x080129e0
 8001900:	240004a4 	.word	0x240004a4
 8001904:	08012938 	.word	0x08012938
 8001908:	08012958 	.word	0x08012958
 800190c:	08012970 	.word	0x08012970
 8001910:	24000328 	.word	0x24000328
 8001914:	0801298c 	.word	0x0801298c
 8001918:	080129ac 	.word	0x080129ac
 800191c:	080129c4 	.word	0x080129c4

08001920 <_Z10test_speedv>:

void test_speed(){
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
	char send_data[7];
	HAL_UART_Transmit(&huart7, (uint8_t*)"Speed: ", 7, 10);
 8001926:	230a      	movs	r3, #10
 8001928:	2207      	movs	r2, #7
 800192a:	4914      	ldr	r1, [pc, #80]	; (800197c <_Z10test_speedv+0x5c>)
 800192c:	4814      	ldr	r0, [pc, #80]	; (8001980 <_Z10test_speedv+0x60>)
 800192e:	f00c faad 	bl	800de8c <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e011      	b.n	800195c <_Z10test_speedv+0x3c>
		sprintf(send_data,"%04lu ",speed[i]);
 8001938:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_Z10test_speedv+0x64>)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	4911      	ldr	r1, [pc, #68]	; (8001988 <_Z10test_speedv+0x68>)
 8001944:	4618      	mov	r0, r3
 8001946:	f00e ff13 	bl	8010770 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)send_data, 5, 10);
 800194a:	1d39      	adds	r1, r7, #4
 800194c:	230a      	movs	r3, #10
 800194e:	2205      	movs	r2, #5
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <_Z10test_speedv+0x60>)
 8001952:	f00c fa9b 	bl	800de8c <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	ddea      	ble.n	8001938 <_Z10test_speedv+0x18>
	}
	uint8_t lf[]={10};
 8001962:	230a      	movs	r3, #10
 8001964:	703b      	strb	r3, [r7, #0]
	HAL_UART_Transmit(&huart7, lf, 1, 10);
 8001966:	4639      	mov	r1, r7
 8001968:	230a      	movs	r3, #10
 800196a:	2201      	movs	r2, #1
 800196c:	4804      	ldr	r0, [pc, #16]	; (8001980 <_Z10test_speedv+0x60>)
 800196e:	f00c fa8d 	bl	800de8c <HAL_UART_Transmit>

}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	080129f0 	.word	0x080129f0
 8001980:	240004a4 	.word	0x240004a4
 8001984:	240007ec 	.word	0x240007ec
 8001988:	080129f8 	.word	0x080129f8

0800198c <_Z10test_brakev>:

void test_brake(){
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,ch3_cnt++);
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <_Z10test_brakev+0x50>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	b2d1      	uxtb	r1, r2
 8001998:	4a10      	ldr	r2, [pc, #64]	; (80019dc <_Z10test_brakev+0x50>)
 800199a:	7011      	strb	r1, [r2, #0]
 800199c:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <_Z10test_brakev+0x54>)
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,ch4_cnt--);
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_Z10test_brakev+0x58>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	1e5a      	subs	r2, r3, #1
 80019a8:	b2d1      	uxtb	r1, r2
 80019aa:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <_Z10test_brakev+0x58>)
 80019ac:	7011      	strb	r1, [r2, #0]
 80019ae:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <_Z10test_brakev+0x54>)
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
	if(ch3_cnt==99)ch3_cnt=0;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <_Z10test_brakev+0x50>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b63      	cmp	r3, #99	; 0x63
 80019ba:	d102      	bne.n	80019c2 <_Z10test_brakev+0x36>
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <_Z10test_brakev+0x50>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
	if(ch4_cnt==0)ch4_cnt=99;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_Z10test_brakev+0x58>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <_Z10test_brakev+0x44>
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <_Z10test_brakev+0x58>)
 80019cc:	2263      	movs	r2, #99	; 0x63
 80019ce:	701a      	strb	r2, [r3, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	2400082d 	.word	0x2400082d
 80019e0:	24000628 	.word	0x24000628
 80019e4:	24000000 	.word	0x24000000

080019e8 <_Z10input_testv>:


void input_test(){
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b0b9      	sub	sp, #228	; 0xe4
 80019ec:	af02      	add	r7, sp, #8
	InputMode mode = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin)==GPIO_PIN_RESET?Auto:Manual;
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	4867      	ldr	r0, [pc, #412]	; (8001b90 <_Z10input_testv+0x1a8>)
 80019f2:	f006 f85f 	bl	8007ab4 <HAL_GPIO_ReadPin>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	if(input_mode!=mode){
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <_Z10input_testv+0x1ac>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	f897 20d6 	ldrb.w	r2, [r7, #214]	; 0xd6
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d044      	beq.n	8001a9c <_Z10input_testv+0xb4>
		input_mode=mode;
 8001a12:	4a60      	ldr	r2, [pc, #384]	; (8001b94 <_Z10input_testv+0x1ac>)
 8001a14:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001a18:	7013      	strb	r3, [r2, #0]
		if(input_mode==Manual){
 8001a1a:	4b5e      	ldr	r3, [pc, #376]	; (8001b94 <_Z10input_testv+0x1ac>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d113      	bne.n	8001a4a <_Z10input_testv+0x62>
			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001a22:	2100      	movs	r1, #0
 8001a24:	485c      	ldr	r0, [pc, #368]	; (8001b98 <_Z10input_testv+0x1b0>)
 8001a26:	f00a fc73 	bl	800c310 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	485a      	ldr	r0, [pc, #360]	; (8001b98 <_Z10input_testv+0x1b0>)
 8001a2e:	f00a faf9 	bl	800c024 <HAL_TIM_IC_Start>
			HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001a32:	2100      	movs	r1, #0
 8001a34:	4859      	ldr	r0, [pc, #356]	; (8001b9c <_Z10input_testv+0x1b4>)
 8001a36:	f00a fc6b 	bl	800c310 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	4857      	ldr	r0, [pc, #348]	; (8001b9c <_Z10input_testv+0x1b4>)
 8001a3e:	f00a faf1 	bl	800c024 <HAL_TIM_IC_Start>

			HAL_TIM_Base_Start_IT(&htim16);
 8001a42:	4857      	ldr	r0, [pc, #348]	; (8001ba0 <_Z10input_testv+0x1b8>)
 8001a44:	f00a f876 	bl	800bb34 <HAL_TIM_Base_Start_IT>
 8001a48:	e028      	b.n	8001a9c <_Z10input_testv+0xb4>
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
		}else{
			freq=0;
 8001a4a:	4b56      	ldr	r3, [pc, #344]	; (8001ba4 <_Z10input_testv+0x1bc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8001a50:	2100      	movs	r1, #0
 8001a52:	4851      	ldr	r0, [pc, #324]	; (8001b98 <_Z10input_testv+0x1b0>)
 8001a54:	f00a fdac 	bl	800c5b0 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_2);
 8001a58:	2104      	movs	r1, #4
 8001a5a:	484f      	ldr	r0, [pc, #316]	; (8001b98 <_Z10input_testv+0x1b0>)
 8001a5c:	f00a fbe6 	bl	800c22c <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop_IT(&htim15, TIM_CHANNEL_1);
 8001a60:	2100      	movs	r1, #0
 8001a62:	484e      	ldr	r0, [pc, #312]	; (8001b9c <_Z10input_testv+0x1b4>)
 8001a64:	f00a fda4 	bl	800c5b0 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop(&htim15, TIM_CHANNEL_2);
 8001a68:	2104      	movs	r1, #4
 8001a6a:	484c      	ldr	r0, [pc, #304]	; (8001b9c <_Z10input_testv+0x1b4>)
 8001a6c:	f00a fbde 	bl	800c22c <HAL_TIM_IC_Stop>

			HAL_TIM_Base_Stop_IT(&htim16);
 8001a70:	484b      	ldr	r0, [pc, #300]	; (8001ba0 <_Z10input_testv+0x1b8>)
 8001a72:	f00a f8d7 	bl	800bc24 <HAL_TIM_Base_Stop_IT>

			__HAL_TIM_SET_AUTORELOAD(&htim3,20000-1);
 8001a76:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <_Z10input_testv+0x1c0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a80:	4b49      	ldr	r3, [pc, #292]	; (8001ba8 <_Z10input_testv+0x1c0>)
 8001a82:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a86:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,5000-1);
 8001a88:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <_Z10input_testv+0x1c0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a90:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,10000-1);
 8001a92:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <_Z10input_testv+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a9a:	639a      	str	r2, [r3, #56]	; 0x38
//			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
		}
	}
	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8001a9c:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <_Z10input_testv+0x1c0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	uint32_t esc_cnt = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 8001aa6:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <_Z10input_testv+0x1c0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	uint32_t servo_cnt = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2);
 8001ab0:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <_Z10input_testv+0x1c0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	char str[200]={0};
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	22c4      	movs	r2, #196	; 0xc4
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00e feb6 	bl	8010836 <memset>
	if(mode==Auto){
 8001aca:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d11e      	bne.n	8001b10 <_Z10input_testv+0x128>
		sprintf(str,"Input Mode: Auto, Frequency: %u Hz, ESC DutyCycle: %u%%, SERVO DutyCycle: %u%%\n",1000000/arr,esc_cnt*100/arr,servo_cnt*100/arr);
 8001ad2:	4a36      	ldr	r2, [pc, #216]	; (8001bac <_Z10input_testv+0x1c4>)
 8001ad4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ad8:	fbb2 f1f3 	udiv	r1, r2, r3
 8001adc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ae0:	2264      	movs	r2, #100	; 0x64
 8001ae2:	fb03 f202 	mul.w	r2, r3, r2
 8001ae6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aea:	fbb2 f4f3 	udiv	r4, r2, r3
 8001aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001af2:	2264      	movs	r2, #100	; 0x64
 8001af4:	fb03 f202 	mul.w	r2, r3, r2
 8001af8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b00:	4638      	mov	r0, r7
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4623      	mov	r3, r4
 8001b06:	460a      	mov	r2, r1
 8001b08:	4929      	ldr	r1, [pc, #164]	; (8001bb0 <_Z10input_testv+0x1c8>)
 8001b0a:	f00e fe31 	bl	8010770 <siprintf>
 8001b0e:	e01d      	b.n	8001b4c <_Z10input_testv+0x164>
	}else{
		sprintf(str,"Input Mode: Manual, Frequency: %u Hz, ESC DutyCycle: %u%%, SERVO DutyCycle: %u%%\n",1000000/arr,esc_cnt*100/arr,servo_cnt*100/arr);
 8001b10:	4a26      	ldr	r2, [pc, #152]	; (8001bac <_Z10input_testv+0x1c4>)
 8001b12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b16:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b1e:	2264      	movs	r2, #100	; 0x64
 8001b20:	fb03 f202 	mul.w	r2, r3, r2
 8001b24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b28:	fbb2 f4f3 	udiv	r4, r2, r3
 8001b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b30:	2264      	movs	r2, #100	; 0x64
 8001b32:	fb03 f202 	mul.w	r2, r3, r2
 8001b36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	4638      	mov	r0, r7
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	4623      	mov	r3, r4
 8001b44:	460a      	mov	r2, r1
 8001b46:	491b      	ldr	r1, [pc, #108]	; (8001bb4 <_Z10input_testv+0x1cc>)
 8001b48:	f00e fe12 	bl	8010770 <siprintf>
	}
	uint8_t i=0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	while(str[i]!=0 && i<200){
 8001b52:	e00c      	b.n	8001b6e <_Z10input_testv+0x186>
		HAL_UART_Transmit(&huart7, (uint8_t*)(&str[i++]), 1, 1);
 8001b54:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	f887 20d7 	strb.w	r2, [r7, #215]	; 0xd7
 8001b5e:	461a      	mov	r2, r3
 8001b60:	463b      	mov	r3, r7
 8001b62:	1899      	adds	r1, r3, r2
 8001b64:	2301      	movs	r3, #1
 8001b66:	2201      	movs	r2, #1
 8001b68:	4813      	ldr	r0, [pc, #76]	; (8001bb8 <_Z10input_testv+0x1d0>)
 8001b6a:	f00c f98f 	bl	800de8c <HAL_UART_Transmit>
	while(str[i]!=0 && i<200){
 8001b6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b72:	33d8      	adds	r3, #216	; 0xd8
 8001b74:	443b      	add	r3, r7
 8001b76:	f813 3cd8 	ldrb.w	r3, [r3, #-216]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <_Z10input_testv+0x19e>
 8001b7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b82:	2bc7      	cmp	r3, #199	; 0xc7
 8001b84:	d9e6      	bls.n	8001b54 <_Z10input_testv+0x16c>
	}

}
 8001b86:	bf00      	nop
 8001b88:	37dc      	adds	r7, #220	; 0xdc
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd90      	pop	{r4, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	58020400 	.word	0x58020400
 8001b94:	240007a4 	.word	0x240007a4
 8001b98:	240006c0 	.word	0x240006c0
 8001b9c:	2400070c 	.word	0x2400070c
 8001ba0:	24000758 	.word	0x24000758
 8001ba4:	24000838 	.word	0x24000838
 8001ba8:	24000674 	.word	0x24000674
 8001bac:	000f4240 	.word	0x000f4240
 8001bb0:	08012a00 	.word	0x08012a00
 8001bb4:	08012a50 	.word	0x08012a50
 8001bb8:	240004a4 	.word	0x240004a4
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <_Z10force_testv>:

void force_test(){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0b0      	sub	sp, #192	; 0xc0
 8001bc4:	af0e      	add	r7, sp, #56	; 0x38
	float force[8];
	for(uint8_t i=0;i<8;++i){
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001bcc:	e021      	b.n	8001c12 <_Z10force_testv+0x52>
		force[i]=(float)force_raw[i]*3.3/0xFFFF;
 8001bce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bd2:	4a45      	ldr	r2, [pc, #276]	; (8001ce8 <_Z10force_testv+0x128>)
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001be4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001cd8 <_Z10force_testv+0x118>
 8001be8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bec:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8001ce0 <_Z10force_testv+0x120>
 8001bf0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001bf4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bf8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	3388      	adds	r3, #136	; 0x88
 8001c00:	443b      	add	r3, r7
 8001c02:	3b24      	subs	r3, #36	; 0x24
 8001c04:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<8;++i){
 8001c08:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001c12:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c16:	2b07      	cmp	r3, #7
 8001c18:	d9d9      	bls.n	8001bce <_Z10force_testv+0xe>
	}
	char msg[100]={0};
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2260      	movs	r2, #96	; 0x60
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00e fe06 	bl	8010836 <memset>
	sprintf(msg,"Force: %0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f\n",force[0],force[1],force[2],force[3],force[4],force[5],force[6],force[7]);
 8001c2a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001c2e:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
 8001c32:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c3a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001c3e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001c42:	edd7 5a1c 	vldr	s11, [r7, #112]	; 0x70
 8001c46:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001c4a:	edd7 4a1d 	vldr	s9, [r7, #116]	; 0x74
 8001c4e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001c52:	edd7 3a1e 	vldr	s7, [r7, #120]	; 0x78
 8001c56:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8001c5a:	edd7 2a1f 	vldr	s5, [r7, #124]	; 0x7c
 8001c5e:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8001c62:	edd7 1a20 	vldr	s3, [r7, #128]	; 0x80
 8001c66:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8001c70:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8001c74:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001c78:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001c7c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001c80:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001c84:	ed8d 7b00 	vstr	d7, [sp]
 8001c88:	ec53 2b10 	vmov	r2, r3, d0
 8001c8c:	4917      	ldr	r1, [pc, #92]	; (8001cec <_Z10force_testv+0x12c>)
 8001c8e:	f00e fd6f 	bl	8010770 <siprintf>
	uint8_t i=0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	while(msg[i]!=0 && i<100){
 8001c98:	e00c      	b.n	8001cb4 <_Z10force_testv+0xf4>
		HAL_UART_Transmit(&huart7, (uint8_t*)(&msg[i++]), 1, 1);
 8001c9a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	1899      	adds	r1, r3, r2
 8001caa:	2301      	movs	r3, #1
 8001cac:	2201      	movs	r2, #1
 8001cae:	4810      	ldr	r0, [pc, #64]	; (8001cf0 <_Z10force_testv+0x130>)
 8001cb0:	f00c f8ec 	bl	800de8c <HAL_UART_Transmit>
	while(msg[i]!=0 && i<100){
 8001cb4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001cb8:	3388      	adds	r3, #136	; 0x88
 8001cba:	443b      	add	r3, r7
 8001cbc:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <_Z10force_testv+0x10c>
 8001cc4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001cc8:	2b63      	cmp	r3, #99	; 0x63
 8001cca:	d9e6      	bls.n	8001c9a <_Z10force_testv+0xda>
	}
}
 8001ccc:	bf00      	nop
 8001cce:	3788      	adds	r7, #136	; 0x88
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	66666666 	.word	0x66666666
 8001cdc:	400a6666 	.word	0x400a6666
 8001ce0:	00000000 	.word	0x00000000
 8001ce4:	40efffe0 	.word	0x40efffe0
 8001ce8:	2400083c 	.word	0x2400083c
 8001cec:	08012aa4 	.word	0x08012aa4
 8001cf0:	240004a4 	.word	0x240004a4

08001cf4 <_Z12BNO085_setupv>:

void BNO085_setup(){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BNO_P0_GPIO_Port, BNO_P0_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cfe:	4814      	ldr	r0, [pc, #80]	; (8001d50 <_Z12BNO085_setupv+0x5c>)
 8001d00:	f005 fef0 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BNO_P1_GPIO_Port, BNO_P1_Pin, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d0a:	4811      	ldr	r0, [pc, #68]	; (8001d50 <_Z12BNO085_setupv+0x5c>)
 8001d0c:	f005 feea 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BNO_BOOTN_GPIO_Port, BNO_BOOTN_Pin, GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d16:	480f      	ldr	r0, [pc, #60]	; (8001d54 <_Z12BNO085_setupv+0x60>)
 8001d18:	f005 fee4 	bl	8007ae4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d22:	480c      	ldr	r0, [pc, #48]	; (8001d54 <_Z12BNO085_setupv+0x60>)
 8001d24:	f005 fede 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f001 f817 	bl	8002d5c <HAL_Delay>
	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <_Z12BNO085_setupv+0x60>)
 8001d36:	f005 fed5 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f001 f80e 	bl	8002d5c <HAL_Delay>
	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_SET);
 8001d40:	2201      	movs	r2, #1
 8001d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <_Z12BNO085_setupv+0x60>)
 8001d48:	f005 fecc 	bl	8007ae4 <HAL_GPIO_WritePin>

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	58020c00 	.word	0x58020c00
 8001d54:	58020400 	.word	0x58020400

08001d58 <setup>:

void setup(){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	DWT_Init();
 8001d5c:	f7ff fb2a 	bl	80013b4 <_ZL8DWT_Initv>
//	HAL_ADC_Start_DMA(&hadc1, force_raw, 8);
	HAL_ADC_Start_DMA(&hadc1,force_raw,8);
 8001d60:	2208      	movs	r2, #8
 8001d62:	494b      	ldr	r1, [pc, #300]	; (8001e90 <setup+0x138>)
 8001d64:	484b      	ldr	r0, [pc, #300]	; (8001e94 <setup+0x13c>)
 8001d66:	f001 fbd3 	bl	8003510 <HAL_ADC_Start_DMA>
	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8001d6a:	2244      	movs	r2, #68	; 0x44
 8001d6c:	494a      	ldr	r1, [pc, #296]	; (8001e98 <setup+0x140>)
 8001d6e:	484b      	ldr	r0, [pc, #300]	; (8001e9c <setup+0x144>)
 8001d70:	f00c f91a 	bl	800dfa8 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart7, (uint8_t*)&led_state, 1);
 8001d74:	2201      	movs	r2, #1
 8001d76:	494a      	ldr	r1, [pc, #296]	; (8001ea0 <setup+0x148>)
 8001d78:	484a      	ldr	r0, [pc, #296]	; (8001ea4 <setup+0x14c>)
 8001d7a:	f00c f915 	bl	800dfa8 <HAL_UART_Receive_DMA>

	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2108      	movs	r1, #8
 8001d82:	4849      	ldr	r0, [pc, #292]	; (8001ea8 <setup+0x150>)
 8001d84:	f005 feae 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2120      	movs	r1, #32
 8001d8c:	4846      	ldr	r0, [pc, #280]	; (8001ea8 <setup+0x150>)
 8001d8e:	f005 fea9 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001d92:	2201      	movs	r2, #1
 8001d94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d98:	4844      	ldr	r0, [pc, #272]	; (8001eac <setup+0x154>)
 8001d9a:	f005 fea3 	bl	8007ae4 <HAL_GPIO_WritePin>

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,33);
 8001d9e:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <setup+0x158>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2221      	movs	r2, #33	; 0x21
 8001da4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2,67);
 8001da6:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <setup+0x158>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2243      	movs	r2, #67	; 0x43
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,ch3_cnt++);
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <setup+0x15c>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	b2d1      	uxtb	r1, r2
 8001db6:	4a3f      	ldr	r2, [pc, #252]	; (8001eb4 <setup+0x15c>)
 8001db8:	7011      	strb	r1, [r2, #0]
 8001dba:	4a3d      	ldr	r2, [pc, #244]	; (8001eb0 <setup+0x158>)
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,ch4_cnt--);
 8001dc0:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <setup+0x160>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	1e5a      	subs	r2, r3, #1
 8001dc6:	b2d1      	uxtb	r1, r2
 8001dc8:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <setup+0x160>)
 8001dca:	7011      	strb	r1, [r2, #0]
 8001dcc:	4a38      	ldr	r2, [pc, #224]	; (8001eb0 <setup+0x158>)
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40

	HAL_TIM_Base_Start_IT(&htim2);
 8001dd2:	4837      	ldr	r0, [pc, #220]	; (8001eb0 <setup+0x158>)
 8001dd4:	f009 feae 	bl	800bb34 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4835      	ldr	r0, [pc, #212]	; (8001eb0 <setup+0x158>)
 8001ddc:	f009 ffb2 	bl	800bd44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001de0:	2104      	movs	r1, #4
 8001de2:	4833      	ldr	r0, [pc, #204]	; (8001eb0 <setup+0x158>)
 8001de4:	f009 ffae 	bl	800bd44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001de8:	2108      	movs	r1, #8
 8001dea:	4831      	ldr	r0, [pc, #196]	; (8001eb0 <setup+0x158>)
 8001dec:	f009 ffaa 	bl	800bd44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001df0:	210c      	movs	r1, #12
 8001df2:	482f      	ldr	r0, [pc, #188]	; (8001eb0 <setup+0x158>)
 8001df4:	f009 ffa6 	bl	800bd44 <HAL_TIM_PWM_Start>


	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2120      	movs	r1, #32
 8001dfc:	482f      	ldr	r0, [pc, #188]	; (8001ebc <setup+0x164>)
 8001dfe:	f005 fe71 	bl	8007ae4 <HAL_GPIO_WritePin>
	freq = 0;
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <setup+0x168>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
	input_mode = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin)==GPIO_PIN_RESET?Auto:Manual;
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	482c      	ldr	r0, [pc, #176]	; (8001ebc <setup+0x164>)
 8001e0c:	f005 fe52 	bl	8007ab4 <HAL_GPIO_ReadPin>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf14      	ite	ne
 8001e16:	2301      	movne	r3, #1
 8001e18:	2300      	moveq	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <setup+0x16c>)
 8001e20:	701a      	strb	r2, [r3, #0]
	if(input_mode==Manual){
 8001e22:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <setup+0x16c>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d112      	bne.n	8001e50 <setup+0xf8>
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4826      	ldr	r0, [pc, #152]	; (8001ec8 <setup+0x170>)
 8001e2e:	f00a fa6f 	bl	800c310 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001e32:	2104      	movs	r1, #4
 8001e34:	4824      	ldr	r0, [pc, #144]	; (8001ec8 <setup+0x170>)
 8001e36:	f00a f8f5 	bl	800c024 <HAL_TIM_IC_Start>
		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4823      	ldr	r0, [pc, #140]	; (8001ecc <setup+0x174>)
 8001e3e:	f00a fa67 	bl	800c310 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8001e42:	2104      	movs	r1, #4
 8001e44:	4821      	ldr	r0, [pc, #132]	; (8001ecc <setup+0x174>)
 8001e46:	f00a f8ed 	bl	800c024 <HAL_TIM_IC_Start>

		HAL_TIM_Base_Start_IT(&htim16);
 8001e4a:	4821      	ldr	r0, [pc, #132]	; (8001ed0 <setup+0x178>)
 8001e4c:	f009 fe72 	bl	800bb34 <HAL_TIM_Base_Start_IT>
	}

	__HAL_TIM_SET_AUTORELOAD(&htim3,20000-1);
 8001e50:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <setup+0x17c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <setup+0x17c>)
 8001e5c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001e60:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,5000-1);
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <setup+0x17c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f241 3287 	movw	r2, #4999	; 0x1387
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,10000-1);
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <setup+0x17c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e74:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e76:	2100      	movs	r1, #0
 8001e78:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <setup+0x17c>)
 8001e7a:	f009 ff63 	bl	800bd44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001e7e:	2104      	movs	r1, #4
 8001e80:	4814      	ldr	r0, [pc, #80]	; (8001ed4 <setup+0x17c>)
 8001e82:	f009 ff5f 	bl	800bd44 <HAL_TIM_PWM_Start>

	BNO085_setup();
 8001e86:	f7ff ff35 	bl	8001cf4 <_Z12BNO085_setupv>

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2400083c 	.word	0x2400083c
 8001e94:	240001f8 	.word	0x240001f8
 8001e98:	240007a8 	.word	0x240007a8
 8001e9c:	24000410 	.word	0x24000410
 8001ea0:	2400082c 	.word	0x2400082c
 8001ea4:	240004a4 	.word	0x240004a4
 8001ea8:	58020c00 	.word	0x58020c00
 8001eac:	58021000 	.word	0x58021000
 8001eb0:	24000628 	.word	0x24000628
 8001eb4:	2400082d 	.word	0x2400082d
 8001eb8:	24000000 	.word	0x24000000
 8001ebc:	58020400 	.word	0x58020400
 8001ec0:	24000838 	.word	0x24000838
 8001ec4:	240007a4 	.word	0x240007a4
 8001ec8:	240006c0 	.word	0x240006c0
 8001ecc:	2400070c 	.word	0x2400070c
 8001ed0:	24000758 	.word	0x24000758
 8001ed4:	24000674 	.word	0x24000674

08001ed8 <loop>:




void loop(){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart7, (uint8_t*)("\n\n"), 2, 1);
 8001edc:	2301      	movs	r3, #1
 8001ede:	2202      	movs	r2, #2
 8001ee0:	4909      	ldr	r1, [pc, #36]	; (8001f08 <loop+0x30>)
 8001ee2:	480a      	ldr	r0, [pc, #40]	; (8001f0c <loop+0x34>)
 8001ee4:	f00b ffd2 	bl	800de8c <HAL_UART_Transmit>
	force_test();
 8001ee8:	f7ff fe6a 	bl	8001bc0 <_Z10force_testv>
	input_test();
 8001eec:	f7ff fd7c 	bl	80019e8 <_Z10input_testv>
	test_speed();
 8001ef0:	f7ff fd16 	bl	8001920 <_Z10test_speedv>
	test_i2c();
 8001ef4:	f7ff fc24 	bl	8001740 <_Z8test_i2cv>
	test_brake();
 8001ef8:	f7ff fd48 	bl	800198c <_Z10test_brakev>
	HAL_Delay(1000);
 8001efc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f00:	f000 ff2c 	bl	8002d5c <HAL_Delay>


}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	08012adc 	.word	0x08012adc
 8001f0c:	240004a4 	.word	0x240004a4

08001f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_MspInit+0x30>)
 8001f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f1c:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <HAL_MspInit+0x30>)
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_MspInit+0x30>)
 8001f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	58024400 	.word	0x58024400

08001f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0bc      	sub	sp, #240	; 0xf0
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	22c0      	movs	r2, #192	; 0xc0
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f00e fc66 	bl	8010836 <memset>
  if(hadc->Instance==ADC1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a5e      	ldr	r2, [pc, #376]	; (80020e8 <HAL_ADC_MspInit+0x1a4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	f040 80b5 	bne.w	80020e0 <HAL_ADC_MspInit+0x19c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001f82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8a:	f107 0318 	add.w	r3, r7, #24
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f007 f87a 	bl	8009088 <HAL_RCCEx_PeriphCLKConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8001f9a:	f7ff fa05 	bl	80013a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f9e:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 8001fa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fa4:	4a51      	ldr	r2, [pc, #324]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 8001fa6:	f043 0320 	orr.w	r3, r3, #32
 8001faa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fae:	4b4f      	ldr	r3, [pc, #316]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 8001fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbc:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 8001fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc2:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fcc:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 8001fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	4b44      	ldr	r3, [pc, #272]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 8001fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe0:	4a42      	ldr	r2, [pc, #264]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fea:	4b40      	ldr	r3, [pc, #256]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 8001ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffe:	4a3b      	ldr	r2, [pc, #236]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002008:	4b38      	ldr	r3, [pc, #224]	; (80020ec <HAL_ADC_MspInit+0x1a8>)
 800200a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8002016:	2333      	movs	r3, #51	; 0x33
 8002018:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201c:	2303      	movs	r3, #3
 800201e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002028:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800202c:	4619      	mov	r1, r3
 800202e:	4830      	ldr	r0, [pc, #192]	; (80020f0 <HAL_ADC_MspInit+0x1ac>)
 8002030:	f005 fb90 	bl	8007754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 8002034:	2350      	movs	r3, #80	; 0x50
 8002036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203a:	2303      	movs	r3, #3
 800203c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800204a:	4619      	mov	r1, r3
 800204c:	4829      	ldr	r0, [pc, #164]	; (80020f4 <HAL_ADC_MspInit+0x1b0>)
 800204e:	f005 fb81 	bl	8007754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 8002052:	2303      	movs	r3, #3
 8002054:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002058:	2303      	movs	r3, #3
 800205a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002068:	4619      	mov	r1, r3
 800206a:	4823      	ldr	r0, [pc, #140]	; (80020f8 <HAL_ADC_MspInit+0x1b4>)
 800206c:	f005 fb72 	bl	8007754 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 8002072:	4a23      	ldr	r2, [pc, #140]	; (8002100 <HAL_ADC_MspInit+0x1bc>)
 8002074:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002076:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 8002078:	2209      	movs	r2, #9
 800207a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002088:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 800208a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800208e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 8002092:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002096:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 800209a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800209e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 80020a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020b4:	4811      	ldr	r0, [pc, #68]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 80020b6:	f002 fd11 	bl	8004adc <HAL_DMA_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_ADC_MspInit+0x180>
    {
      Error_Handler();
 80020c0:	f7ff f972 	bl	80013a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 80020c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <HAL_ADC_MspInit+0x1b8>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	2012      	movs	r0, #18
 80020d6:	f002 fccc 	bl	8004a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020da:	2012      	movs	r0, #18
 80020dc:	f002 fce3 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020e0:	bf00      	nop
 80020e2:	37f0      	adds	r7, #240	; 0xf0
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40022000 	.word	0x40022000
 80020ec:	58024400 	.word	0x58024400
 80020f0:	58020800 	.word	0x58020800
 80020f4:	58020000 	.word	0x58020000
 80020f8:	58020400 	.word	0x58020400
 80020fc:	2400025c 	.word	0x2400025c
 8002100:	40020040 	.word	0x40020040

08002104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0bc      	sub	sp, #240	; 0xf0
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800211c:	f107 0318 	add.w	r3, r7, #24
 8002120:	22c0      	movs	r2, #192	; 0xc0
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f00e fb86 	bl	8010836 <memset>
  if(hi2c->Instance==I2C1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a4d      	ldr	r2, [pc, #308]	; (8002264 <HAL_I2C_MspInit+0x160>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d147      	bne.n	80021c4 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002134:	f04f 0208 	mov.w	r2, #8
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002146:	f107 0318 	add.w	r3, r7, #24
 800214a:	4618      	mov	r0, r3
 800214c:	f006 ff9c 	bl	8009088 <HAL_RCCEx_PeriphCLKConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002156:	f7ff f927 	bl	80013a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	4b43      	ldr	r3, [pc, #268]	; (8002268 <HAL_I2C_MspInit+0x164>)
 800215c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002160:	4a41      	ldr	r2, [pc, #260]	; (8002268 <HAL_I2C_MspInit+0x164>)
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800216a:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <HAL_I2C_MspInit+0x164>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002178:	f44f 7340 	mov.w	r3, #768	; 0x300
 800217c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002180:	2312      	movs	r3, #18
 8002182:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002192:	2304      	movs	r3, #4
 8002194:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800219c:	4619      	mov	r1, r3
 800219e:	4833      	ldr	r0, [pc, #204]	; (800226c <HAL_I2C_MspInit+0x168>)
 80021a0:	f005 fad8 	bl	8007754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021a4:	4b30      	ldr	r3, [pc, #192]	; (8002268 <HAL_I2C_MspInit+0x164>)
 80021a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021aa:	4a2f      	ldr	r2, [pc, #188]	; (8002268 <HAL_I2C_MspInit+0x164>)
 80021ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021b4:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <HAL_I2C_MspInit+0x164>)
 80021b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021c2:	e04b      	b.n	800225c <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a29      	ldr	r2, [pc, #164]	; (8002270 <HAL_I2C_MspInit+0x16c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d146      	bne.n	800225c <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80021ce:	f04f 0208 	mov.w	r2, #8
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e0:	f107 0318 	add.w	r3, r7, #24
 80021e4:	4618      	mov	r0, r3
 80021e6:	f006 ff4f 	bl	8009088 <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80021f0:	f7ff f8da 	bl	80013a8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_I2C_MspInit+0x164>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fa:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_I2C_MspInit+0x164>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_I2C_MspInit+0x164>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002212:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800221a:	2312      	movs	r3, #18
 800221c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800222c:	2304      	movs	r3, #4
 800222e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002236:	4619      	mov	r1, r3
 8002238:	480c      	ldr	r0, [pc, #48]	; (800226c <HAL_I2C_MspInit+0x168>)
 800223a:	f005 fa8b 	bl	8007754 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_I2C_MspInit+0x164>)
 8002240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002244:	4a08      	ldr	r2, [pc, #32]	; (8002268 <HAL_I2C_MspInit+0x164>)
 8002246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800224a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_I2C_MspInit+0x164>)
 8002250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
}
 800225c:	bf00      	nop
 800225e:	37f0      	adds	r7, #240	; 0xf0
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40005400 	.word	0x40005400
 8002268:	58024400 	.word	0x58024400
 800226c:	58020400 	.word	0x58020400
 8002270:	40005800 	.word	0x40005800

08002274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0c0      	sub	sp, #256	; 0x100
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002290:	22c0      	movs	r2, #192	; 0xc0
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00e face 	bl	8010836 <memset>
  if(huart->Instance==LPUART1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4abe      	ldr	r2, [pc, #760]	; (8002598 <HAL_UART_MspInit+0x324>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d147      	bne.n	8002334 <HAL_UART_MspInit+0xc0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80022a4:	f04f 0204 	mov.w	r2, #4
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ba:	4618      	mov	r0, r3
 80022bc:	f006 fee4 	bl	8009088 <HAL_RCCEx_PeriphCLKConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022c6:	f7ff f86f 	bl	80013a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80022ca:	4bb4      	ldr	r3, [pc, #720]	; (800259c <HAL_UART_MspInit+0x328>)
 80022cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022d0:	4ab2      	ldr	r2, [pc, #712]	; (800259c <HAL_UART_MspInit+0x328>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022da:	4bb0      	ldr	r3, [pc, #704]	; (800259c <HAL_UART_MspInit+0x328>)
 80022dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	4bac      	ldr	r3, [pc, #688]	; (800259c <HAL_UART_MspInit+0x328>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ee:	4aab      	ldr	r2, [pc, #684]	; (800259c <HAL_UART_MspInit+0x328>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f8:	4ba8      	ldr	r3, [pc, #672]	; (800259c <HAL_UART_MspInit+0x328>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	623b      	str	r3, [r7, #32]
 8002304:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002306:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800230a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8002320:	2303      	movs	r3, #3
 8002322:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800232a:	4619      	mov	r1, r3
 800232c:	489c      	ldr	r0, [pc, #624]	; (80025a0 <HAL_UART_MspInit+0x32c>)
 800232e:	f005 fa11 	bl	8007754 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002332:	e12c      	b.n	800258e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART5)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a9a      	ldr	r2, [pc, #616]	; (80025a4 <HAL_UART_MspInit+0x330>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d17e      	bne.n	800243c <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800233e:	f04f 0202 	mov.w	r2, #2
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002354:	4618      	mov	r0, r3
 8002356:	f006 fe97 	bl	8009088 <HAL_RCCEx_PeriphCLKConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002360:	f7ff f822 	bl	80013a8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002364:	4b8d      	ldr	r3, [pc, #564]	; (800259c <HAL_UART_MspInit+0x328>)
 8002366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800236a:	4a8c      	ldr	r2, [pc, #560]	; (800259c <HAL_UART_MspInit+0x328>)
 800236c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002370:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002374:	4b89      	ldr	r3, [pc, #548]	; (800259c <HAL_UART_MspInit+0x328>)
 8002376:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800237a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	4b86      	ldr	r3, [pc, #536]	; (800259c <HAL_UART_MspInit+0x328>)
 8002384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002388:	4a84      	ldr	r2, [pc, #528]	; (800259c <HAL_UART_MspInit+0x328>)
 800238a:	f043 0302 	orr.w	r3, r3, #2
 800238e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002392:	4b82      	ldr	r3, [pc, #520]	; (800259c <HAL_UART_MspInit+0x328>)
 8002394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80023a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80023a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80023ba:	230e      	movs	r3, #14
 80023bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023c4:	4619      	mov	r1, r3
 80023c6:	4878      	ldr	r0, [pc, #480]	; (80025a8 <HAL_UART_MspInit+0x334>)
 80023c8:	f005 f9c4 	bl	8007754 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80023cc:	4b77      	ldr	r3, [pc, #476]	; (80025ac <HAL_UART_MspInit+0x338>)
 80023ce:	4a78      	ldr	r2, [pc, #480]	; (80025b0 <HAL_UART_MspInit+0x33c>)
 80023d0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80023d2:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_UART_MspInit+0x338>)
 80023d4:	2241      	movs	r2, #65	; 0x41
 80023d6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d8:	4b74      	ldr	r3, [pc, #464]	; (80025ac <HAL_UART_MspInit+0x338>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023de:	4b73      	ldr	r3, [pc, #460]	; (80025ac <HAL_UART_MspInit+0x338>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023e4:	4b71      	ldr	r3, [pc, #452]	; (80025ac <HAL_UART_MspInit+0x338>)
 80023e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ea:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ec:	4b6f      	ldr	r3, [pc, #444]	; (80025ac <HAL_UART_MspInit+0x338>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f2:	4b6e      	ldr	r3, [pc, #440]	; (80025ac <HAL_UART_MspInit+0x338>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80023f8:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <HAL_UART_MspInit+0x338>)
 80023fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023fe:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002400:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <HAL_UART_MspInit+0x338>)
 8002402:	2200      	movs	r2, #0
 8002404:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002406:	4b69      	ldr	r3, [pc, #420]	; (80025ac <HAL_UART_MspInit+0x338>)
 8002408:	2200      	movs	r2, #0
 800240a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800240c:	4867      	ldr	r0, [pc, #412]	; (80025ac <HAL_UART_MspInit+0x338>)
 800240e:	f002 fb65 	bl	8004adc <HAL_DMA_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002418:	f7fe ffc6 	bl	80013a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a63      	ldr	r2, [pc, #396]	; (80025ac <HAL_UART_MspInit+0x338>)
 8002420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002424:	4a61      	ldr	r2, [pc, #388]	; (80025ac <HAL_UART_MspInit+0x338>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	2035      	movs	r0, #53	; 0x35
 8002430:	f002 fb1f 	bl	8004a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002434:	2035      	movs	r0, #53	; 0x35
 8002436:	f002 fb36 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
}
 800243a:	e0a8      	b.n	800258e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART7)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a5c      	ldr	r2, [pc, #368]	; (80025b4 <HAL_UART_MspInit+0x340>)
 8002442:	4293      	cmp	r3, r2
 8002444:	f040 80a3 	bne.w	800258e <HAL_UART_MspInit+0x31a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002448:	f04f 0202 	mov.w	r2, #2
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800245e:	4618      	mov	r0, r3
 8002460:	f006 fe12 	bl	8009088 <HAL_RCCEx_PeriphCLKConfig>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 800246a:	f7fe ff9d 	bl	80013a8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800246e:	4b4b      	ldr	r3, [pc, #300]	; (800259c <HAL_UART_MspInit+0x328>)
 8002470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002474:	4a49      	ldr	r2, [pc, #292]	; (800259c <HAL_UART_MspInit+0x328>)
 8002476:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800247a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_UART_MspInit+0x328>)
 8002480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002484:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800248c:	4b43      	ldr	r3, [pc, #268]	; (800259c <HAL_UART_MspInit+0x328>)
 800248e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002492:	4a42      	ldr	r2, [pc, #264]	; (800259c <HAL_UART_MspInit+0x328>)
 8002494:	f043 0310 	orr.w	r3, r3, #16
 8002498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <HAL_UART_MspInit+0x328>)
 800249e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	4b3c      	ldr	r3, [pc, #240]	; (800259c <HAL_UART_MspInit+0x328>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b0:	4a3a      	ldr	r2, [pc, #232]	; (800259c <HAL_UART_MspInit+0x328>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ba:	4b38      	ldr	r3, [pc, #224]	; (800259c <HAL_UART_MspInit+0x328>)
 80024bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80024e2:	2307      	movs	r3, #7
 80024e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024ec:	4619      	mov	r1, r3
 80024ee:	4832      	ldr	r0, [pc, #200]	; (80025b8 <HAL_UART_MspInit+0x344>)
 80024f0:	f005 f930 	bl	8007754 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 800250e:	230b      	movs	r3, #11
 8002510:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002518:	4619      	mov	r1, r3
 800251a:	4821      	ldr	r0, [pc, #132]	; (80025a0 <HAL_UART_MspInit+0x32c>)
 800251c:	f005 f91a 	bl	8007754 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream1;
 8002520:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_UART_MspInit+0x348>)
 8002522:	4a27      	ldr	r2, [pc, #156]	; (80025c0 <HAL_UART_MspInit+0x34c>)
 8002524:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002526:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_UART_MspInit+0x348>)
 8002528:	224f      	movs	r2, #79	; 0x4f
 800252a:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <HAL_UART_MspInit+0x348>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_UART_MspInit+0x348>)
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002538:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_UART_MspInit+0x348>)
 800253a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253e:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_UART_MspInit+0x348>)
 8002542:	2200      	movs	r2, #0
 8002544:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_UART_MspInit+0x348>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_UART_MspInit+0x348>)
 800254e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002552:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_UART_MspInit+0x348>)
 8002556:	2200      	movs	r2, #0
 8002558:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800255a:	4b18      	ldr	r3, [pc, #96]	; (80025bc <HAL_UART_MspInit+0x348>)
 800255c:	2200      	movs	r2, #0
 800255e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002560:	4816      	ldr	r0, [pc, #88]	; (80025bc <HAL_UART_MspInit+0x348>)
 8002562:	f002 fabb 	bl	8004adc <HAL_DMA_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 800256c:	f7fe ff1c 	bl	80013a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <HAL_UART_MspInit+0x348>)
 8002574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002578:	4a10      	ldr	r2, [pc, #64]	; (80025bc <HAL_UART_MspInit+0x348>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	2052      	movs	r0, #82	; 0x52
 8002584:	f002 fa75 	bl	8004a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002588:	2052      	movs	r0, #82	; 0x52
 800258a:	f002 fa8c 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	58000c00 	.word	0x58000c00
 800259c:	58024400 	.word	0x58024400
 80025a0:	58020000 	.word	0x58020000
 80025a4:	40005000 	.word	0x40005000
 80025a8:	58020400 	.word	0x58020400
 80025ac:	24000538 	.word	0x24000538
 80025b0:	40020010 	.word	0x40020010
 80025b4:	40007800 	.word	0x40007800
 80025b8:	58021000 	.word	0x58021000
 80025bc:	240005b0 	.word	0x240005b0
 80025c0:	40020028 	.word	0x40020028

080025c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08e      	sub	sp, #56	; 0x38
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e4:	d10f      	bne.n	8002606 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025e6:	4b5e      	ldr	r3, [pc, #376]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 80025e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ec:	4a5c      	ldr	r2, [pc, #368]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025f6:	4b5a      	ldr	r3, [pc, #360]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 80025f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	623b      	str	r3, [r7, #32]
 8002602:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002604:	e0a8      	b.n	8002758 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM3)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a56      	ldr	r2, [pc, #344]	; (8002764 <HAL_TIM_Base_MspInit+0x1a0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10f      	bne.n	8002630 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002610:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 8002612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002616:	4a52      	ldr	r2, [pc, #328]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002620:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 8002622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
}
 800262e:	e093      	b.n	8002758 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM5)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a4c      	ldr	r2, [pc, #304]	; (8002768 <HAL_TIM_Base_MspInit+0x1a4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d136      	bne.n	80026a8 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800263a:	4b49      	ldr	r3, [pc, #292]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 800263c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002640:	4a47      	ldr	r2, [pc, #284]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 8002642:	f043 0308 	orr.w	r3, r3, #8
 8002646:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800264a:	4b45      	ldr	r3, [pc, #276]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 800264c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	4b41      	ldr	r3, [pc, #260]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 800265a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265e:	4a40      	ldr	r2, [pc, #256]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002668:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 800266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002676:	2301      	movs	r3, #1
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002686:	2302      	movs	r3, #2
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800268e:	4619      	mov	r1, r3
 8002690:	4836      	ldr	r0, [pc, #216]	; (800276c <HAL_TIM_Base_MspInit+0x1a8>)
 8002692:	f005 f85f 	bl	8007754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	2032      	movs	r0, #50	; 0x32
 800269c:	f002 f9e9 	bl	8004a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80026a0:	2032      	movs	r0, #50	; 0x32
 80026a2:	f002 fa00 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
}
 80026a6:	e057      	b.n	8002758 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM15)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a30      	ldr	r2, [pc, #192]	; (8002770 <HAL_TIM_Base_MspInit+0x1ac>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d136      	bne.n	8002720 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80026b2:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 80026b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026b8:	4a29      	ldr	r2, [pc, #164]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026c2:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 80026c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026d0:	4b23      	ldr	r3, [pc, #140]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 80026d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d6:	4a22      	ldr	r2, [pc, #136]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 80026d8:	f043 0310 	orr.w	r3, r3, #16
 80026dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 80026e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026ee:	2320      	movs	r3, #32
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80026fe:	2304      	movs	r3, #4
 8002700:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002706:	4619      	mov	r1, r3
 8002708:	481a      	ldr	r0, [pc, #104]	; (8002774 <HAL_TIM_Base_MspInit+0x1b0>)
 800270a:	f005 f823 	bl	8007754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	2074      	movs	r0, #116	; 0x74
 8002714:	f002 f9ad 	bl	8004a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002718:	2074      	movs	r0, #116	; 0x74
 800271a:	f002 f9c4 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
}
 800271e:	e01b      	b.n	8002758 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM16)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <HAL_TIM_Base_MspInit+0x1b4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d116      	bne.n	8002758 <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 800272c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002730:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 8002732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002736:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_TIM_Base_MspInit+0x19c>)
 800273c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	2075      	movs	r0, #117	; 0x75
 800274e:	f002 f990 	bl	8004a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002752:	2075      	movs	r0, #117	; 0x75
 8002754:	f002 f9a7 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
}
 8002758:	bf00      	nop
 800275a:	3738      	adds	r7, #56	; 0x38
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	58024400 	.word	0x58024400
 8002764:	40000400 	.word	0x40000400
 8002768:	40000c00 	.word	0x40000c00
 800276c:	58020000 	.word	0x58020000
 8002770:	40014000 	.word	0x40014000
 8002774:	58021000 	.word	0x58021000
 8002778:	40014400 	.word	0x40014400

0800277c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279c:	d120      	bne.n	80027e0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <HAL_TIM_MspPostInit+0xb4>)
 80027a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a4:	4a22      	ldr	r2, [pc, #136]	; (8002830 <HAL_TIM_MspPostInit+0xb4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_TIM_MspPostInit+0xb4>)
 80027b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80027bc:	f248 030e 	movw	r3, #32782	; 0x800e
 80027c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ce:	2301      	movs	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	4816      	ldr	r0, [pc, #88]	; (8002834 <HAL_TIM_MspPostInit+0xb8>)
 80027da:	f004 ffbb 	bl	8007754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027de:	e023      	b.n	8002828 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a14      	ldr	r2, [pc, #80]	; (8002838 <HAL_TIM_MspPostInit+0xbc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d11e      	bne.n	8002828 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <HAL_TIM_MspPostInit+0xb4>)
 80027ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f0:	4a0f      	ldr	r2, [pc, #60]	; (8002830 <HAL_TIM_MspPostInit+0xb4>)
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_TIM_MspPostInit+0xb4>)
 80027fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002808:	23c0      	movs	r3, #192	; 0xc0
 800280a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002818:	2302      	movs	r3, #2
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4619      	mov	r1, r3
 8002822:	4806      	ldr	r0, [pc, #24]	; (800283c <HAL_TIM_MspPostInit+0xc0>)
 8002824:	f004 ff96 	bl	8007754 <HAL_GPIO_Init>
}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	58024400 	.word	0x58024400
 8002834:	58020000 	.word	0x58020000
 8002838:	40000400 	.word	0x40000400
 800283c:	58020800 	.word	0x58020800

08002840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002844:	e7fe      	b.n	8002844 <NMI_Handler+0x4>

08002846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800284a:	e7fe      	b.n	800284a <HardFault_Handler+0x4>

0800284c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002850:	e7fe      	b.n	8002850 <MemManage_Handler+0x4>

08002852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002856:	e7fe      	b.n	8002856 <BusFault_Handler+0x4>

08002858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800285c:	e7fe      	b.n	800285c <UsageFault_Handler+0x4>

0800285e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800288c:	f000 fa46 	bl	8002d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}

08002894 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002898:	4802      	ldr	r0, [pc, #8]	; (80028a4 <DMA1_Stream0_IRQHandler+0x10>)
 800289a:	f003 fc49 	bl	8006130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	24000538 	.word	0x24000538

080028a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80028ac:	4802      	ldr	r0, [pc, #8]	; (80028b8 <DMA1_Stream1_IRQHandler+0x10>)
 80028ae:	f003 fc3f 	bl	8006130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	240005b0 	.word	0x240005b0

080028bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <DMA1_Stream2_IRQHandler+0x10>)
 80028c2:	f003 fc35 	bl	8006130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2400025c 	.word	0x2400025c

080028d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <ADC_IRQHandler+0x10>)
 80028d6:	f000 fedf 	bl	8003698 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	240001f8 	.word	0x240001f8

080028e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <TIM5_IRQHandler+0x10>)
 80028ea:	f009 ff1f 	bl	800c72c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	240006c0 	.word	0x240006c0

080028f8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <UART5_IRQHandler+0x10>)
 80028fe:	f00b fb9f 	bl	800e040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	24000410 	.word	0x24000410

0800290c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <UART7_IRQHandler+0x10>)
 8002912:	f00b fb95 	bl	800e040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	240004a4 	.word	0x240004a4

08002920 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <TIM15_IRQHandler+0x10>)
 8002926:	f009 ff01 	bl	800c72c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	2400070c 	.word	0x2400070c

08002934 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <TIM16_IRQHandler+0x10>)
 800293a:	f009 fef7 	bl	800c72c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	24000758 	.word	0x24000758

08002948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return 1;
 800294c:	2301      	movs	r3, #1
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <_kill>:

int _kill(int pid, int sig)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002962:	f00d ffbb 	bl	80108dc <__errno>
 8002966:	4603      	mov	r3, r0
 8002968:	2216      	movs	r2, #22
 800296a:	601a      	str	r2, [r3, #0]
  return -1;
 800296c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_exit>:

void _exit (int status)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ffe7 	bl	8002958 <_kill>
  while (1) {}    /* Make sure we hang here */
 800298a:	e7fe      	b.n	800298a <_exit+0x12>

0800298c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e00a      	b.n	80029b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800299e:	f3af 8000 	nop.w
 80029a2:	4601      	mov	r1, r0
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	60ba      	str	r2, [r7, #8]
 80029aa:	b2ca      	uxtb	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	dbf0      	blt.n	800299e <_read+0x12>
  }

  return len;
 80029bc:	687b      	ldr	r3, [r7, #4]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e009      	b.n	80029ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	60ba      	str	r2, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3301      	adds	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	dbf1      	blt.n	80029d8 <_write+0x12>
  }
  return len;
 80029f4:	687b      	ldr	r3, [r7, #4]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_close>:

int _close(int file)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a26:	605a      	str	r2, [r3, #4]
  return 0;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <_isatty>:

int _isatty(int file)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a70:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <_sbrk+0x5c>)
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <_sbrk+0x60>)
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <_sbrk+0x64>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <_sbrk+0x64>)
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <_sbrk+0x68>)
 8002a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <_sbrk+0x64>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d207      	bcs.n	8002aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a98:	f00d ff20 	bl	80108dc <__errno>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa6:	e009      	b.n	8002abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <_sbrk+0x64>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <_sbrk+0x64>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <_sbrk+0x64>)
 8002ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aba:	68fb      	ldr	r3, [r7, #12]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	24080000 	.word	0x24080000
 8002ac8:	00000400 	.word	0x00000400
 8002acc:	2400085c 	.word	0x2400085c
 8002ad0:	240009b0 	.word	0x240009b0

08002ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ad8:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <SystemInit+0xe4>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	4a36      	ldr	r2, [pc, #216]	; (8002bb8 <SystemInit+0xe4>)
 8002ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <SystemInit+0xe8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d807      	bhi.n	8002b04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002af4:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <SystemInit+0xe8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 030f 	bic.w	r3, r3, #15
 8002afc:	4a2f      	ldr	r2, [pc, #188]	; (8002bbc <SystemInit+0xe8>)
 8002afe:	f043 0307 	orr.w	r3, r3, #7
 8002b02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b04:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <SystemInit+0xec>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2d      	ldr	r2, [pc, #180]	; (8002bc0 <SystemInit+0xec>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <SystemInit+0xec>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b16:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <SystemInit+0xec>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4929      	ldr	r1, [pc, #164]	; (8002bc0 <SystemInit+0xec>)
 8002b1c:	4b29      	ldr	r3, [pc, #164]	; (8002bc4 <SystemInit+0xf0>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <SystemInit+0xe8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b2e:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <SystemInit+0xe8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 030f 	bic.w	r3, r3, #15
 8002b36:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <SystemInit+0xe8>)
 8002b38:	f043 0307 	orr.w	r3, r3, #7
 8002b3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <SystemInit+0xec>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002b44:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <SystemInit+0xec>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <SystemInit+0xec>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <SystemInit+0xec>)
 8002b52:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <SystemInit+0xf4>)
 8002b54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <SystemInit+0xec>)
 8002b58:	4a1c      	ldr	r2, [pc, #112]	; (8002bcc <SystemInit+0xf8>)
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <SystemInit+0xec>)
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <SystemInit+0xfc>)
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <SystemInit+0xec>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b68:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <SystemInit+0xec>)
 8002b6a:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <SystemInit+0xfc>)
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <SystemInit+0xec>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <SystemInit+0xec>)
 8002b76:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <SystemInit+0xfc>)
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <SystemInit+0xec>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <SystemInit+0xec>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <SystemInit+0xec>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <SystemInit+0xec>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <SystemInit+0x100>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <SystemInit+0x104>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b9e:	d202      	bcs.n	8002ba6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <SystemInit+0x108>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <SystemInit+0x10c>)
 8002ba8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002bac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00
 8002bbc:	52002000 	.word	0x52002000
 8002bc0:	58024400 	.word	0x58024400
 8002bc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8002bc8:	02020200 	.word	0x02020200
 8002bcc:	01ff0000 	.word	0x01ff0000
 8002bd0:	01010280 	.word	0x01010280
 8002bd4:	5c001000 	.word	0x5c001000
 8002bd8:	ffff0000 	.word	0xffff0000
 8002bdc:	51008108 	.word	0x51008108
 8002be0:	52004000 	.word	0x52004000

08002be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002be8:	f7ff ff74 	bl	8002ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bec:	480c      	ldr	r0, [pc, #48]	; (8002c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bee:	490d      	ldr	r1, [pc, #52]	; (8002c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf4:	e002      	b.n	8002bfc <LoopCopyDataInit>

08002bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfa:	3304      	adds	r3, #4

08002bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c00:	d3f9      	bcc.n	8002bf6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c04:	4c0a      	ldr	r4, [pc, #40]	; (8002c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c08:	e001      	b.n	8002c0e <LoopFillZerobss>

08002c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c0c:	3204      	adds	r2, #4

08002c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c10:	d3fb      	bcc.n	8002c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c12:	f00d fe69 	bl	80108e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c16:	f7fd fd39 	bl	800068c <main>
  bx  lr
 8002c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002c20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002c24:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002c28:	08012ea4 	.word	0x08012ea4
  ldr r2, =_sbss
 8002c2c:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8002c30:	240009b0 	.word	0x240009b0

08002c34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c34:	e7fe      	b.n	8002c34 <ADC3_IRQHandler>
	...

08002c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3e:	2003      	movs	r0, #3
 8002c40:	f001 ff0c 	bl	8004a5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c44:	f006 f84a 	bl	8008cdc <HAL_RCC_GetSysClockFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_Init+0x68>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	4913      	ldr	r1, [pc, #76]	; (8002ca4 <HAL_Init+0x6c>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_Init+0x68>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <HAL_Init+0x6c>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
 8002c78:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <HAL_Init+0x70>)
 8002c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c7c:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <HAL_Init+0x74>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c82:	200f      	movs	r0, #15
 8002c84:	f000 f814 	bl	8002cb0 <HAL_InitTick>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e002      	b.n	8002c98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c92:	f7ff f93d 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	58024400 	.word	0x58024400
 8002ca4:	08012ae0 	.word	0x08012ae0
 8002ca8:	24000008 	.word	0x24000008
 8002cac:	24000004 	.word	0x24000004

08002cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_InitTick+0x60>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e021      	b.n	8002d08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002cc4:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <HAL_InitTick+0x64>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_InitTick+0x60>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 fef1 	bl	8004ac2 <HAL_SYSTICK_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00e      	b.n	8002d08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d80a      	bhi.n	8002d06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cf8:	f001 febb 	bl	8004a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <HAL_InitTick+0x68>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	24000010 	.word	0x24000010
 8002d14:	24000004 	.word	0x24000004
 8002d18:	2400000c 	.word	0x2400000c

08002d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x24>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_IncTick+0x24>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	24000010 	.word	0x24000010
 8002d40:	24000860 	.word	0x24000860

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	24000860 	.word	0x24000860

08002d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7ff ffee 	bl	8002d44 <HAL_GetTick>
 8002d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d74:	d005      	beq.n	8002d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_Delay+0x44>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d82:	bf00      	nop
 8002d84:	f7ff ffde 	bl	8002d44 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d8f7      	bhi.n	8002d84 <HAL_Delay+0x28>
  {
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	24000010 	.word	0x24000010

08002da4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_GetREVID+0x14>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0c1b      	lsrs	r3, r3, #16
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	5c001000 	.word	0x5c001000

08002dbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3360      	adds	r3, #96	; 0x60
 8002e36:	461a      	mov	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	611a      	str	r2, [r3, #16]
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b087      	sub	sp, #28
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3360      	adds	r3, #96	; 0x60
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	601a      	str	r2, [r3, #0]
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b087      	sub	sp, #28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3330      	adds	r3, #48	; 0x30
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	4413      	add	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	211f      	movs	r1, #31
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	401a      	ands	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0e9b      	lsrs	r3, r3, #26
 8002f2a:	f003 011f 	and.w	r1, r3, #31
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f023 0203 	bic.w	r2, r3, #3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b087      	sub	sp, #28
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3314      	adds	r3, #20
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	0e5b      	lsrs	r3, r3, #25
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	4413      	add	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	0d1b      	lsrs	r3, r3, #20
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	2107      	movs	r1, #7
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	401a      	ands	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	0d1b      	lsrs	r3, r3, #20
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003004:	43db      	mvns	r3, r3
 8003006:	401a      	ands	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0318 	and.w	r3, r3, #24
 800300e:	4908      	ldr	r1, [pc, #32]	; (8003030 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003010:	40d9      	lsrs	r1, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	400b      	ands	r3, r1
 8003016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800301a:	431a      	orrs	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	000fffff 	.word	0x000fffff

08003034 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 031f 	and.w	r3, r3, #31
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <LL_ADC_DisableDeepPowerDown+0x20>)
 800307a:	4013      	ands	r3, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6093      	str	r3, [r2, #8]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	5fffffc0 	.word	0x5fffffc0

08003090 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a4:	d101      	bne.n	80030aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <LL_ADC_EnableInternalRegulator+0x24>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	6fffffc0 	.word	0x6fffffc0

080030e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030f4:	d101      	bne.n	80030fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <LL_ADC_Enable+0x24>)
 8003116:	4013      	ands	r3, r2
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	7fffffc0 	.word	0x7fffffc0

08003130 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <LL_ADC_IsEnabled+0x18>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <LL_ADC_IsEnabled+0x1a>
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <LL_ADC_REG_StartConversion+0x24>)
 8003166:	4013      	ands	r3, r2
 8003168:	f043 0204 	orr.w	r2, r3, #4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	7fffffc0 	.word	0x7fffffc0

08003180 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b04      	cmp	r3, #4
 8003192:	d101      	bne.n	8003198 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d101      	bne.n	80031be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e18f      	b.n	8003506 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7fe fea5 	bl	8001f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff3f 	bl	8003090 <LL_ADC_IsDeepPowerDownEnabled>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d004      	beq.n	8003222 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff25 	bl	800306c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ff5a 	bl	80030e0 <LL_ADC_IsInternalRegulatorEnabled>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d114      	bne.n	800325c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ff3e 	bl	80030b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800323c:	4b87      	ldr	r3, [pc, #540]	; (800345c <HAL_ADC_Init+0x290>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	4a87      	ldr	r2, [pc, #540]	; (8003460 <HAL_ADC_Init+0x294>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	3301      	adds	r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800324e:	e002      	b.n	8003256 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	3b01      	subs	r3, #1
 8003254:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f9      	bne.n	8003250 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff3d 	bl	80030e0 <LL_ADC_IsInternalRegulatorEnabled>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10d      	bne.n	8003288 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f043 0210 	orr.w	r2, r3, #16
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff77 	bl	8003180 <LL_ADC_REG_IsConversionOngoing>
 8003292:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 8129 	bne.w	80034f4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f040 8125 	bne.w	80034f4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032b2:	f043 0202 	orr.w	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff ff36 	bl	8003130 <LL_ADC_IsEnabled>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d136      	bne.n	8003338 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a65      	ldr	r2, [pc, #404]	; (8003464 <HAL_ADC_Init+0x298>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d004      	beq.n	80032de <HAL_ADC_Init+0x112>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a63      	ldr	r2, [pc, #396]	; (8003468 <HAL_ADC_Init+0x29c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d10e      	bne.n	80032fc <HAL_ADC_Init+0x130>
 80032de:	4861      	ldr	r0, [pc, #388]	; (8003464 <HAL_ADC_Init+0x298>)
 80032e0:	f7ff ff26 	bl	8003130 <LL_ADC_IsEnabled>
 80032e4:	4604      	mov	r4, r0
 80032e6:	4860      	ldr	r0, [pc, #384]	; (8003468 <HAL_ADC_Init+0x29c>)
 80032e8:	f7ff ff22 	bl	8003130 <LL_ADC_IsEnabled>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4323      	orrs	r3, r4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e008      	b.n	800330e <HAL_ADC_Init+0x142>
 80032fc:	485b      	ldr	r0, [pc, #364]	; (800346c <HAL_ADC_Init+0x2a0>)
 80032fe:	f7ff ff17 	bl	8003130 <LL_ADC_IsEnabled>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d012      	beq.n	8003338 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a53      	ldr	r2, [pc, #332]	; (8003464 <HAL_ADC_Init+0x298>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_ADC_Init+0x15a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a51      	ldr	r2, [pc, #324]	; (8003468 <HAL_ADC_Init+0x29c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_ADC_Init+0x15e>
 8003326:	4a52      	ldr	r2, [pc, #328]	; (8003470 <HAL_ADC_Init+0x2a4>)
 8003328:	e000      	b.n	800332c <HAL_ADC_Init+0x160>
 800332a:	4a52      	ldr	r2, [pc, #328]	; (8003474 <HAL_ADC_Init+0x2a8>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f7ff fd42 	bl	8002dbc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003338:	f7ff fd34 	bl	8002da4 <HAL_GetREVID>
 800333c:	4603      	mov	r3, r0
 800333e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003342:	4293      	cmp	r3, r2
 8003344:	d914      	bls.n	8003370 <HAL_ADC_Init+0x1a4>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b10      	cmp	r3, #16
 800334c:	d110      	bne.n	8003370 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7d5b      	ldrb	r3, [r3, #21]
 8003352:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003358:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800335e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7f1b      	ldrb	r3, [r3, #28]
 8003364:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003366:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003368:	f043 030c 	orr.w	r3, r3, #12
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	e00d      	b.n	800338c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7d5b      	ldrb	r3, [r3, #21]
 8003374:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800337a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003380:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7f1b      	ldrb	r3, [r3, #28]
 8003386:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	7f1b      	ldrb	r3, [r3, #28]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d106      	bne.n	80033a2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	3b01      	subs	r3, #1
 800339a:	045b      	lsls	r3, r3, #17
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	4b2c      	ldr	r3, [pc, #176]	; (8003478 <HAL_ADC_Init+0x2ac>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	69b9      	ldr	r1, [r7, #24]
 80033ce:	430b      	orrs	r3, r1
 80033d0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fed2 	bl	8003180 <LL_ADC_REG_IsConversionOngoing>
 80033dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fedf 	bl	80031a6 <LL_ADC_INJ_IsConversionOngoing>
 80033e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d15f      	bne.n	80034b0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d15c      	bne.n	80034b0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7d1b      	ldrb	r3, [r3, #20]
 80033fa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	4b1c      	ldr	r3, [pc, #112]	; (800347c <HAL_ADC_Init+0x2b0>)
 800340c:	4013      	ands	r3, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6812      	ldr	r2, [r2, #0]
 8003412:	69b9      	ldr	r1, [r7, #24]
 8003414:	430b      	orrs	r3, r1
 8003416:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800341e:	2b01      	cmp	r3, #1
 8003420:	d130      	bne.n	8003484 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	4b14      	ldr	r3, [pc, #80]	; (8003480 <HAL_ADC_Init+0x2b4>)
 8003430:	4013      	ands	r3, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003436:	3a01      	subs	r2, #1
 8003438:	0411      	lsls	r1, r2, #16
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003444:	4311      	orrs	r1, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800344a:	430a      	orrs	r2, r1
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	611a      	str	r2, [r3, #16]
 8003458:	e01c      	b.n	8003494 <HAL_ADC_Init+0x2c8>
 800345a:	bf00      	nop
 800345c:	24000004 	.word	0x24000004
 8003460:	053e2d63 	.word	0x053e2d63
 8003464:	40022000 	.word	0x40022000
 8003468:	40022100 	.word	0x40022100
 800346c:	58026000 	.word	0x58026000
 8003470:	40022300 	.word	0x40022300
 8003474:	58026300 	.word	0x58026300
 8003478:	fff0c003 	.word	0xfff0c003
 800347c:	ffffbffc 	.word	0xffffbffc
 8003480:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 ffc4 	bl	8004438 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d10c      	bne.n	80034d2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f023 010f 	bic.w	r1, r3, #15
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	1e5a      	subs	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
 80034d0:	e007      	b.n	80034e2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 020f 	bic.w	r2, r2, #15
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	f043 0201 	orr.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
 80034f2:	e007      	b.n	8003504 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	f043 0210 	orr.w	r2, r3, #16
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003504:	7ffb      	ldrb	r3, [r7, #31]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	; 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd90      	pop	{r4, r7, pc}
 800350e:	bf00      	nop

08003510 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a55      	ldr	r2, [pc, #340]	; (8003678 <HAL_ADC_Start_DMA+0x168>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_ADC_Start_DMA+0x20>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a54      	ldr	r2, [pc, #336]	; (800367c <HAL_ADC_Start_DMA+0x16c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <HAL_ADC_Start_DMA+0x24>
 8003530:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HAL_ADC_Start_DMA+0x170>)
 8003532:	e000      	b.n	8003536 <HAL_ADC_Start_DMA+0x26>
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_ADC_Start_DMA+0x174>)
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fd7c 	bl	8003034 <LL_ADC_GetMultimode>
 800353c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fe1c 	bl	8003180 <LL_ADC_REG_IsConversionOngoing>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 808c 	bne.w	8003668 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_ADC_Start_DMA+0x4e>
 800355a:	2302      	movs	r3, #2
 800355c:	e087      	b.n	800366e <HAL_ADC_Start_DMA+0x15e>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d002      	beq.n	8003578 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b09      	cmp	r3, #9
 8003576:	d170      	bne.n	800365a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fe3f 	bl	80041fc <ADC_Enable>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d163      	bne.n	8003650 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800358c:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <HAL_ADC_Start_DMA+0x178>)
 800358e:	4013      	ands	r3, r2
 8003590:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a37      	ldr	r2, [pc, #220]	; (800367c <HAL_ADC_Start_DMA+0x16c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d002      	beq.n	80035a8 <HAL_ADC_Start_DMA+0x98>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	e000      	b.n	80035aa <HAL_ADC_Start_DMA+0x9a>
 80035a8:	4b33      	ldr	r3, [pc, #204]	; (8003678 <HAL_ADC_Start_DMA+0x168>)
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d002      	beq.n	80035b8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d006      	beq.n	80035de <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	f023 0206 	bic.w	r2, r3, #6
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	659a      	str	r2, [r3, #88]	; 0x58
 80035dc:	e002      	b.n	80035e4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e8:	4a28      	ldr	r2, [pc, #160]	; (800368c <HAL_ADC_Start_DMA+0x17c>)
 80035ea:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f0:	4a27      	ldr	r2, [pc, #156]	; (8003690 <HAL_ADC_Start_DMA+0x180>)
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f8:	4a26      	ldr	r2, [pc, #152]	; (8003694 <HAL_ADC_Start_DMA+0x184>)
 80035fa:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	221c      	movs	r2, #28
 8003602:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0210 	orr.w	r2, r2, #16
 800361a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f7ff fc8f 	bl	8002f4a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3340      	adds	r3, #64	; 0x40
 8003636:	4619      	mov	r1, r3
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f001 fdaa 	bl	8005194 <HAL_DMA_Start_IT>
 8003640:	4603      	mov	r3, r0
 8003642:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fd85 	bl	8003158 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800364e:	e00d      	b.n	800366c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003658:	e008      	b.n	800366c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003666:	e001      	b.n	800366c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003668:	2302      	movs	r3, #2
 800366a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40022000 	.word	0x40022000
 800367c:	40022100 	.word	0x40022100
 8003680:	40022300 	.word	0x40022300
 8003684:	58026300 	.word	0x58026300
 8003688:	fffff0fe 	.word	0xfffff0fe
 800368c:	08004311 	.word	0x08004311
 8003690:	080043e9 	.word	0x080043e9
 8003694:	08004405 	.word	0x08004405

08003698 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a87      	ldr	r2, [pc, #540]	; (80038d8 <HAL_ADC_IRQHandler+0x240>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_ADC_IRQHandler+0x30>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a86      	ldr	r2, [pc, #536]	; (80038dc <HAL_ADC_IRQHandler+0x244>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_ADC_IRQHandler+0x34>
 80036c8:	4b85      	ldr	r3, [pc, #532]	; (80038e0 <HAL_ADC_IRQHandler+0x248>)
 80036ca:	e000      	b.n	80036ce <HAL_ADC_IRQHandler+0x36>
 80036cc:	4b85      	ldr	r3, [pc, #532]	; (80038e4 <HAL_ADC_IRQHandler+0x24c>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fcb0 	bl	8003034 <LL_ADC_GetMultimode>
 80036d4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d017      	beq.n	8003710 <HAL_ADC_IRQHandler+0x78>
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d012      	beq.n	8003710 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d105      	bne.n	8003702 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fff2 	bl	80046ec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2202      	movs	r2, #2
 800370e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <HAL_ADC_IRQHandler+0x8c>
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8083 	beq.w	8003836 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d07d      	beq.n	8003836 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b00      	cmp	r3, #0
 8003744:	d105      	bne.n	8003752 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fbb8 	bl	8002ecc <LL_ADC_REG_IsTriggerSourceSWStart>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d062      	beq.n	8003828 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a5d      	ldr	r2, [pc, #372]	; (80038dc <HAL_ADC_IRQHandler+0x244>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d002      	beq.n	8003772 <HAL_ADC_IRQHandler+0xda>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	e000      	b.n	8003774 <HAL_ADC_IRQHandler+0xdc>
 8003772:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_ADC_IRQHandler+0x240>)
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	4293      	cmp	r3, r2
 800377a:	d008      	beq.n	800378e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d002      	beq.n	800378e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b09      	cmp	r3, #9
 800378c:	d104      	bne.n	8003798 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	623b      	str	r3, [r7, #32]
 8003796:	e00c      	b.n	80037b2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a4f      	ldr	r2, [pc, #316]	; (80038dc <HAL_ADC_IRQHandler+0x244>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d002      	beq.n	80037a8 <HAL_ADC_IRQHandler+0x110>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	e000      	b.n	80037aa <HAL_ADC_IRQHandler+0x112>
 80037a8:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <HAL_ADC_IRQHandler+0x240>)
 80037aa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d135      	bne.n	8003828 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d12e      	bne.n	8003828 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fcd6 	bl	8003180 <LL_ADC_REG_IsConversionOngoing>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11a      	bne.n	8003810 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 020c 	bic.w	r2, r2, #12
 80037e8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d112      	bne.n	8003828 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
 800380e:	e00b      	b.n	8003828 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f043 0210 	orr.w	r2, r3, #16
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f96f 	bl	8003b0c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	220c      	movs	r2, #12
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <HAL_ADC_IRQHandler+0x1b2>
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a0 	beq.w	8003996 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 809a 	beq.w	8003996 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d105      	bne.n	800387a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fb76 	bl	8002f70 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003884:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fb1e 	bl	8002ecc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003890:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a11      	ldr	r2, [pc, #68]	; (80038dc <HAL_ADC_IRQHandler+0x244>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d002      	beq.n	80038a2 <HAL_ADC_IRQHandler+0x20a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	e000      	b.n	80038a4 <HAL_ADC_IRQHandler+0x20c>
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_ADC_IRQHandler+0x240>)
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d008      	beq.n	80038be <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b06      	cmp	r3, #6
 80038b6:	d002      	beq.n	80038be <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b07      	cmp	r3, #7
 80038bc:	d104      	bne.n	80038c8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	623b      	str	r3, [r7, #32]
 80038c6:	e014      	b.n	80038f2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a03      	ldr	r2, [pc, #12]	; (80038dc <HAL_ADC_IRQHandler+0x244>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00a      	beq.n	80038e8 <HAL_ADC_IRQHandler+0x250>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	e008      	b.n	80038ea <HAL_ADC_IRQHandler+0x252>
 80038d8:	40022000 	.word	0x40022000
 80038dc:	40022100 	.word	0x40022100
 80038e0:	40022300 	.word	0x40022300
 80038e4:	58026300 	.word	0x58026300
 80038e8:	4b84      	ldr	r3, [pc, #528]	; (8003afc <HAL_ADC_IRQHandler+0x464>)
 80038ea:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d047      	beq.n	8003988 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_ADC_IRQHandler+0x27a>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d03f      	beq.n	8003988 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800390e:	2b00      	cmp	r3, #0
 8003910:	d13a      	bne.n	8003988 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d133      	bne.n	8003988 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d12e      	bne.n	8003988 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fc39 	bl	80031a6 <LL_ADC_INJ_IsConversionOngoing>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d11a      	bne.n	8003970 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003948:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d112      	bne.n	8003988 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
 800396e:	e00b      	b.n	8003988 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f043 0210 	orr.w	r2, r3, #16
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fe87 	bl	800469c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2260      	movs	r2, #96	; 0x60
 8003994:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d011      	beq.n	80039c4 <HAL_ADC_IRQHandler+0x32c>
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f8bc 	bl	8003b34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d012      	beq.n	80039f4 <HAL_ADC_IRQHandler+0x35c>
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00d      	beq.n	80039f4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fe6d 	bl	80046c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d012      	beq.n	8003a24 <HAL_ADC_IRQHandler+0x38c>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00d      	beq.n	8003a24 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fe5f 	bl	80046d8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d043      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x41e>
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03e      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003a40:	2301      	movs	r3, #1
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
 8003a44:	e021      	b.n	8003a8a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a2a      	ldr	r2, [pc, #168]	; (8003afc <HAL_ADC_IRQHandler+0x464>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_ADC_IRQHandler+0x3c8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <HAL_ADC_IRQHandler+0x468>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_ADC_IRQHandler+0x3cc>
 8003a60:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <HAL_ADC_IRQHandler+0x46c>)
 8003a62:	e000      	b.n	8003a66 <HAL_ADC_IRQHandler+0x3ce>
 8003a64:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <HAL_ADC_IRQHandler+0x470>)
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff faf2 	bl	8003050 <LL_ADC_GetMultiDMATransfer>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003a72:	2301      	movs	r3, #1
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
 8003a76:	e008      	b.n	8003a8a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003a86:	2301      	movs	r3, #1
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d10e      	bne.n	8003aae <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	f043 0202 	orr.w	r2, r3, #2
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f84d 	bl	8003b48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d018      	beq.n	8003af2 <HAL_ADC_IRQHandler+0x45a>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d013      	beq.n	8003af2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ace:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	f043 0208 	orr.w	r2, r3, #8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aea:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fddf 	bl	80046b0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003af2:	bf00      	nop
 8003af4:	3728      	adds	r7, #40	; 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40022000 	.word	0x40022000
 8003b00:	40022100 	.word	0x40022100
 8003b04:	40022300 	.word	0x40022300
 8003b08:	58026300 	.word	0x58026300

08003b0c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b0a1      	sub	sp, #132	; 0x84
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a9d      	ldr	r2, [pc, #628]	; (8003dec <HAL_ADC_ConfigChannel+0x290>)
 8003b76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x2a>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e321      	b.n	80041ca <HAL_ADC_ConfigChannel+0x66e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff faf4 	bl	8003180 <LL_ADC_REG_IsConversionOngoing>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f040 8306 	bne.w	80041ac <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d108      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x62>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0e9b      	lsrs	r3, r3, #26
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	e016      	b.n	8003bec <HAL_ADC_ConfigChannel+0x90>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bce:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003bd6:	2320      	movs	r3, #32
 8003bd8:	e003      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bdc:	fab3 f383 	clz	r3, r3
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	2201      	movs	r2, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	69d1      	ldr	r1, [r2, #28]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6859      	ldr	r1, [r3, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f7ff f973 	bl	8002ef2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fab5 	bl	8003180 <LL_ADC_REG_IsConversionOngoing>
 8003c16:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fac2 	bl	80031a6 <LL_ADC_INJ_IsConversionOngoing>
 8003c22:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f040 80b3 	bne.w	8003d92 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 80af 	bne.w	8003d92 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6819      	ldr	r1, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	461a      	mov	r2, r3
 8003c42:	f7ff f9a8 	bl	8002f96 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c46:	4b6a      	ldr	r3, [pc, #424]	; (8003df0 <HAL_ADC_ConfigChannel+0x294>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c52:	d10b      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x110>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	695a      	ldr	r2, [r3, #20]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	e01d      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x14c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x136>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	089b      	lsrs	r3, r3, #2
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	e00a      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x14c>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d027      	beq.n	8003d02 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6919      	ldr	r1, [r3, #16]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cc0:	f7ff f8b0 	bl	8002e24 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	6919      	ldr	r1, [r3, #16]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	7e5b      	ldrb	r3, [r3, #25]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d102      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x17e>
 8003cd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003cd8:	e000      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x180>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f7ff f8da 	bl	8002e96 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	7e1b      	ldrb	r3, [r3, #24]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d102      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x19c>
 8003cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cf6:	e000      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x19e>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f7ff f8b2 	bl	8002e64 <LL_ADC_SetDataRightShift>
 8003d00:	e047      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	069b      	lsls	r3, r3, #26
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d107      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d24:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	069b      	lsls	r3, r3, #26
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d107      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d48:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	069b      	lsls	r3, r3, #26
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d107      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d6c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	069b      	lsls	r3, r3, #26
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d107      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d90:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff f9ca 	bl	8003130 <LL_ADC_IsEnabled>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f040 820d 	bne.w	80041be <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6819      	ldr	r1, [r3, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	461a      	mov	r2, r3
 8003db2:	f7ff f91b 	bl	8002fec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	4a0c      	ldr	r2, [pc, #48]	; (8003dec <HAL_ADC_ConfigChannel+0x290>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	f040 8133 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d110      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x298>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	0e9b      	lsrs	r3, r3, #26
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2b09      	cmp	r3, #9
 8003de0:	bf94      	ite	ls
 8003de2:	2301      	movls	r3, #1
 8003de4:	2300      	movhi	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	e01e      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x2cc>
 8003dea:	bf00      	nop
 8003dec:	47ff0000 	.word	0x47ff0000
 8003df0:	5c001000 	.word	0x5c001000
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dfc:	fa93 f3a3 	rbit	r3, r3
 8003e00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	e003      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e12:	fab3 f383 	clz	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	2b09      	cmp	r3, #9
 8003e20:	bf94      	ite	ls
 8003e22:	2301      	movls	r3, #1
 8003e24:	2300      	movhi	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d079      	beq.n	8003f20 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x2ec>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	3301      	adds	r3, #1
 8003e40:	069b      	lsls	r3, r3, #26
 8003e42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e46:	e015      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x318>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e58:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003e60:	2320      	movs	r3, #32
 8003e62:	e003      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	069b      	lsls	r3, r3, #26
 8003e70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x338>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	3301      	adds	r3, #1
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	e017      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x368>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003eac:	2320      	movs	r3, #32
 8003eae:	e003      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	ea42 0103 	orr.w	r1, r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x38e>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	0e9b      	lsrs	r3, r3, #26
 8003eda:	3301      	adds	r3, #1
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	051b      	lsls	r3, r3, #20
 8003ee8:	e018      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x3c0>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003f02:	2320      	movs	r3, #32
 8003f04:	e003      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	e07e      	b.n	800401e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d107      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x3e0>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	3301      	adds	r3, #1
 8003f34:	069b      	lsls	r3, r3, #26
 8003f36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f3a:	e015      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x40c>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003f54:	2320      	movs	r3, #32
 8003f56:	e003      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	fab3 f383 	clz	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	3301      	adds	r3, #1
 8003f62:	069b      	lsls	r3, r3, #26
 8003f64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x42c>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	0e9b      	lsrs	r3, r3, #26
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	2101      	movs	r1, #1
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	e017      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x45c>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	61bb      	str	r3, [r7, #24]
  return result;
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	e003      	b.n	8003fac <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3301      	adds	r3, #1
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb8:	ea42 0103 	orr.w	r1, r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10d      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x488>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	0e9b      	lsrs	r3, r3, #26
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f003 021f 	and.w	r2, r3, #31
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	3b1e      	subs	r3, #30
 8003fdc:	051b      	lsls	r3, r3, #20
 8003fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	e01b      	b.n	800401c <HAL_ADC_ConfigChannel+0x4c0>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	60fb      	str	r3, [r7, #12]
  return result;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	e003      	b.n	8004008 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	fab3 f383 	clz	r3, r3
 8004006:	b2db      	uxtb	r3, r3
 8004008:	3301      	adds	r3, #1
 800400a:	f003 021f 	and.w	r2, r3, #31
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	3b1e      	subs	r3, #30
 8004016:	051b      	lsls	r3, r3, #20
 8004018:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800401c:	430b      	orrs	r3, r1
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	6892      	ldr	r2, [r2, #8]
 8004022:	4619      	mov	r1, r3
 8004024:	f7fe ffb7 	bl	8002f96 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f280 80c6 	bge.w	80041be <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a67      	ldr	r2, [pc, #412]	; (80041d4 <HAL_ADC_ConfigChannel+0x678>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_ADC_ConfigChannel+0x4ea>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a65      	ldr	r2, [pc, #404]	; (80041d8 <HAL_ADC_ConfigChannel+0x67c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_ADC_ConfigChannel+0x4ee>
 8004046:	4b65      	ldr	r3, [pc, #404]	; (80041dc <HAL_ADC_ConfigChannel+0x680>)
 8004048:	e000      	b.n	800404c <HAL_ADC_ConfigChannel+0x4f0>
 800404a:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_ADC_ConfigChannel+0x684>)
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe fedb 	bl	8002e08 <LL_ADC_GetCommonPathInternalCh>
 8004052:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a5e      	ldr	r2, [pc, #376]	; (80041d4 <HAL_ADC_ConfigChannel+0x678>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_ADC_ConfigChannel+0x50c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a5d      	ldr	r2, [pc, #372]	; (80041d8 <HAL_ADC_ConfigChannel+0x67c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d10e      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x52a>
 8004068:	485a      	ldr	r0, [pc, #360]	; (80041d4 <HAL_ADC_ConfigChannel+0x678>)
 800406a:	f7ff f861 	bl	8003130 <LL_ADC_IsEnabled>
 800406e:	4604      	mov	r4, r0
 8004070:	4859      	ldr	r0, [pc, #356]	; (80041d8 <HAL_ADC_ConfigChannel+0x67c>)
 8004072:	f7ff f85d 	bl	8003130 <LL_ADC_IsEnabled>
 8004076:	4603      	mov	r3, r0
 8004078:	4323      	orrs	r3, r4
 800407a:	2b00      	cmp	r3, #0
 800407c:	bf0c      	ite	eq
 800407e:	2301      	moveq	r3, #1
 8004080:	2300      	movne	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	e008      	b.n	8004098 <HAL_ADC_ConfigChannel+0x53c>
 8004086:	4857      	ldr	r0, [pc, #348]	; (80041e4 <HAL_ADC_ConfigChannel+0x688>)
 8004088:	f7ff f852 	bl	8003130 <LL_ADC_IsEnabled>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d07d      	beq.n	8004198 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a51      	ldr	r2, [pc, #324]	; (80041e8 <HAL_ADC_ConfigChannel+0x68c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d130      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x5ac>
 80040a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d12b      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a4b      	ldr	r2, [pc, #300]	; (80041e4 <HAL_ADC_ConfigChannel+0x688>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	f040 8081 	bne.w	80041be <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a44      	ldr	r2, [pc, #272]	; (80041d4 <HAL_ADC_ConfigChannel+0x678>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_ADC_ConfigChannel+0x574>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a43      	ldr	r2, [pc, #268]	; (80041d8 <HAL_ADC_ConfigChannel+0x67c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x578>
 80040d0:	4a42      	ldr	r2, [pc, #264]	; (80041dc <HAL_ADC_ConfigChannel+0x680>)
 80040d2:	e000      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x57a>
 80040d4:	4a42      	ldr	r2, [pc, #264]	; (80041e0 <HAL_ADC_ConfigChannel+0x684>)
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040dc:	4619      	mov	r1, r3
 80040de:	4610      	mov	r0, r2
 80040e0:	f7fe fe7f 	bl	8002de2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040e4:	4b41      	ldr	r3, [pc, #260]	; (80041ec <HAL_ADC_ConfigChannel+0x690>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	099b      	lsrs	r3, r3, #6
 80040ea:	4a41      	ldr	r2, [pc, #260]	; (80041f0 <HAL_ADC_ConfigChannel+0x694>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	099b      	lsrs	r3, r3, #6
 80040f2:	3301      	adds	r3, #1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80040f8:	e002      	b.n	8004100 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f9      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004106:	e05a      	b.n	80041be <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a39      	ldr	r2, [pc, #228]	; (80041f4 <HAL_ADC_ConfigChannel+0x698>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d11e      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x5f4>
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d119      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a30      	ldr	r2, [pc, #192]	; (80041e4 <HAL_ADC_ConfigChannel+0x688>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d14b      	bne.n	80041be <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2a      	ldr	r2, [pc, #168]	; (80041d4 <HAL_ADC_ConfigChannel+0x678>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_ADC_ConfigChannel+0x5de>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a28      	ldr	r2, [pc, #160]	; (80041d8 <HAL_ADC_ConfigChannel+0x67c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_ADC_ConfigChannel+0x5e2>
 800413a:	4a28      	ldr	r2, [pc, #160]	; (80041dc <HAL_ADC_ConfigChannel+0x680>)
 800413c:	e000      	b.n	8004140 <HAL_ADC_ConfigChannel+0x5e4>
 800413e:	4a28      	ldr	r2, [pc, #160]	; (80041e0 <HAL_ADC_ConfigChannel+0x684>)
 8004140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f7fe fe4a 	bl	8002de2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800414e:	e036      	b.n	80041be <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a28      	ldr	r2, [pc, #160]	; (80041f8 <HAL_ADC_ConfigChannel+0x69c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d131      	bne.n	80041be <HAL_ADC_ConfigChannel+0x662>
 800415a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d12c      	bne.n	80041be <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1e      	ldr	r2, [pc, #120]	; (80041e4 <HAL_ADC_ConfigChannel+0x688>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d127      	bne.n	80041be <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <HAL_ADC_ConfigChannel+0x678>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <HAL_ADC_ConfigChannel+0x626>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <HAL_ADC_ConfigChannel+0x67c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x62a>
 8004182:	4a16      	ldr	r2, [pc, #88]	; (80041dc <HAL_ADC_ConfigChannel+0x680>)
 8004184:	e000      	b.n	8004188 <HAL_ADC_ConfigChannel+0x62c>
 8004186:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <HAL_ADC_ConfigChannel+0x684>)
 8004188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f7fe fe26 	bl	8002de2 <LL_ADC_SetCommonPathInternalCh>
 8004196:	e012      	b.n	80041be <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80041aa:	e008      	b.n	80041be <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f043 0220 	orr.w	r2, r3, #32
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3784      	adds	r7, #132	; 0x84
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd90      	pop	{r4, r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40022000 	.word	0x40022000
 80041d8:	40022100 	.word	0x40022100
 80041dc:	40022300 	.word	0x40022300
 80041e0:	58026300 	.word	0x58026300
 80041e4:	58026000 	.word	0x58026000
 80041e8:	cb840000 	.word	0xcb840000
 80041ec:	24000004 	.word	0x24000004
 80041f0:	053e2d63 	.word	0x053e2d63
 80041f4:	c7520000 	.word	0xc7520000
 80041f8:	cfb80000 	.word	0xcfb80000

080041fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe ff91 	bl	8003130 <LL_ADC_IsEnabled>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d16e      	bne.n	80042f2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	4b38      	ldr	r3, [pc, #224]	; (80042fc <ADC_Enable+0x100>)
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	f043 0210 	orr.w	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e05a      	b.n	80042f4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe ff60 	bl	8003108 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004248:	f7fe fd7c 	bl	8002d44 <HAL_GetTick>
 800424c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <ADC_Enable+0x104>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d004      	beq.n	8004262 <ADC_Enable+0x66>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a29      	ldr	r2, [pc, #164]	; (8004304 <ADC_Enable+0x108>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d101      	bne.n	8004266 <ADC_Enable+0x6a>
 8004262:	4b29      	ldr	r3, [pc, #164]	; (8004308 <ADC_Enable+0x10c>)
 8004264:	e000      	b.n	8004268 <ADC_Enable+0x6c>
 8004266:	4b29      	ldr	r3, [pc, #164]	; (800430c <ADC_Enable+0x110>)
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe fee3 	bl	8003034 <LL_ADC_GetMultimode>
 800426e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a23      	ldr	r2, [pc, #140]	; (8004304 <ADC_Enable+0x108>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d002      	beq.n	8004280 <ADC_Enable+0x84>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	e000      	b.n	8004282 <ADC_Enable+0x86>
 8004280:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <ADC_Enable+0x104>)
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	4293      	cmp	r3, r2
 8004288:	d02c      	beq.n	80042e4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d130      	bne.n	80042f2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004290:	e028      	b.n	80042e4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe ff4a 	bl	8003130 <LL_ADC_IsEnabled>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe ff2e 	bl	8003108 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042ac:	f7fe fd4a 	bl	8002d44 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d914      	bls.n	80042e4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d00d      	beq.n	80042e4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	f043 0210 	orr.w	r2, r3, #16
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	f043 0201 	orr.w	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e007      	b.n	80042f4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d1cf      	bne.n	8004292 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	8000003f 	.word	0x8000003f
 8004300:	40022000 	.word	0x40022000
 8004304:	40022100 	.word	0x40022100
 8004308:	40022300 	.word	0x40022300
 800430c:	58026300 	.word	0x58026300

08004310 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004326:	2b00      	cmp	r3, #0
 8004328:	d14b      	bne.n	80043c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d021      	beq.n	8004388 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fdbf 	bl	8002ecc <LL_ADC_REG_IsTriggerSourceSWStart>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d032      	beq.n	80043ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d12b      	bne.n	80043ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11f      	bne.n	80043ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	f043 0201 	orr.w	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	655a      	str	r2, [r3, #84]	; 0x54
 8004386:	e018      	b.n	80043ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d111      	bne.n	80043ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d105      	bne.n	80043ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff fba6 	bl	8003b0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043c0:	e00e      	b.n	80043e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff fbba 	bl	8003b48 <HAL_ADC_ErrorCallback>
}
 80043d4:	e004      	b.n	80043e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7ff fb92 	bl	8003b20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	f043 0204 	orr.w	r2, r3, #4
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7ff fb8c 	bl	8003b48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7a      	ldr	r2, [pc, #488]	; (8004630 <ADC_ConfigureBoostMode+0x1f8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <ADC_ConfigureBoostMode+0x1c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a79      	ldr	r2, [pc, #484]	; (8004634 <ADC_ConfigureBoostMode+0x1fc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d109      	bne.n	8004468 <ADC_ConfigureBoostMode+0x30>
 8004454:	4b78      	ldr	r3, [pc, #480]	; (8004638 <ADC_ConfigureBoostMode+0x200>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800445c:	2b00      	cmp	r3, #0
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	e008      	b.n	800447a <ADC_ConfigureBoostMode+0x42>
 8004468:	4b74      	ldr	r3, [pc, #464]	; (800463c <ADC_ConfigureBoostMode+0x204>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf14      	ite	ne
 8004474:	2301      	movne	r3, #1
 8004476:	2300      	moveq	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01c      	beq.n	80044b8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800447e:	f004 fda7 	bl	8008fd0 <HAL_RCC_GetHCLKFreq>
 8004482:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800448c:	d010      	beq.n	80044b0 <ADC_ConfigureBoostMode+0x78>
 800448e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004492:	d873      	bhi.n	800457c <ADC_ConfigureBoostMode+0x144>
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d002      	beq.n	80044a0 <ADC_ConfigureBoostMode+0x68>
 800449a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800449e:	d16d      	bne.n	800457c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ac:	60fb      	str	r3, [r7, #12]
        break;
 80044ae:	e068      	b.n	8004582 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	60fb      	str	r3, [r7, #12]
        break;
 80044b6:	e064      	b.n	8004582 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80044b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	f005 ffec 	bl	800a49c <HAL_RCCEx_GetPeriphCLKFreq>
 80044c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044ce:	d051      	beq.n	8004574 <ADC_ConfigureBoostMode+0x13c>
 80044d0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044d4:	d854      	bhi.n	8004580 <ADC_ConfigureBoostMode+0x148>
 80044d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044da:	d047      	beq.n	800456c <ADC_ConfigureBoostMode+0x134>
 80044dc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044e0:	d84e      	bhi.n	8004580 <ADC_ConfigureBoostMode+0x148>
 80044e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044e6:	d03d      	beq.n	8004564 <ADC_ConfigureBoostMode+0x12c>
 80044e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044ec:	d848      	bhi.n	8004580 <ADC_ConfigureBoostMode+0x148>
 80044ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f2:	d033      	beq.n	800455c <ADC_ConfigureBoostMode+0x124>
 80044f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f8:	d842      	bhi.n	8004580 <ADC_ConfigureBoostMode+0x148>
 80044fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044fe:	d029      	beq.n	8004554 <ADC_ConfigureBoostMode+0x11c>
 8004500:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004504:	d83c      	bhi.n	8004580 <ADC_ConfigureBoostMode+0x148>
 8004506:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800450a:	d01a      	beq.n	8004542 <ADC_ConfigureBoostMode+0x10a>
 800450c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004510:	d836      	bhi.n	8004580 <ADC_ConfigureBoostMode+0x148>
 8004512:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004516:	d014      	beq.n	8004542 <ADC_ConfigureBoostMode+0x10a>
 8004518:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800451c:	d830      	bhi.n	8004580 <ADC_ConfigureBoostMode+0x148>
 800451e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004522:	d00e      	beq.n	8004542 <ADC_ConfigureBoostMode+0x10a>
 8004524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004528:	d82a      	bhi.n	8004580 <ADC_ConfigureBoostMode+0x148>
 800452a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800452e:	d008      	beq.n	8004542 <ADC_ConfigureBoostMode+0x10a>
 8004530:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004534:	d824      	bhi.n	8004580 <ADC_ConfigureBoostMode+0x148>
 8004536:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800453a:	d002      	beq.n	8004542 <ADC_ConfigureBoostMode+0x10a>
 800453c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004540:	d11e      	bne.n	8004580 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	0c9b      	lsrs	r3, r3, #18
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	60fb      	str	r3, [r7, #12]
        break;
 8004552:	e016      	b.n	8004582 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	60fb      	str	r3, [r7, #12]
        break;
 800455a:	e012      	b.n	8004582 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	60fb      	str	r3, [r7, #12]
        break;
 8004562:	e00e      	b.n	8004582 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	60fb      	str	r3, [r7, #12]
        break;
 800456a:	e00a      	b.n	8004582 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	09db      	lsrs	r3, r3, #7
 8004570:	60fb      	str	r3, [r7, #12]
        break;
 8004572:	e006      	b.n	8004582 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	60fb      	str	r3, [r7, #12]
        break;
 800457a:	e002      	b.n	8004582 <ADC_ConfigureBoostMode+0x14a>
        break;
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004580:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004582:	f7fe fc0f 	bl	8002da4 <HAL_GetREVID>
 8004586:	4603      	mov	r3, r0
 8004588:	f241 0203 	movw	r2, #4099	; 0x1003
 800458c:	4293      	cmp	r3, r2
 800458e:	d815      	bhi.n	80045bc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a2b      	ldr	r2, [pc, #172]	; (8004640 <ADC_ConfigureBoostMode+0x208>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d908      	bls.n	80045aa <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80045a8:	e03e      	b.n	8004628 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045b8:	609a      	str	r2, [r3, #8]
}
 80045ba:	e035      	b.n	8004628 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	085b      	lsrs	r3, r3, #1
 80045c0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <ADC_ConfigureBoostMode+0x20c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d808      	bhi.n	80045dc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045d8:	609a      	str	r2, [r3, #8]
}
 80045da:	e025      	b.n	8004628 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a1a      	ldr	r2, [pc, #104]	; (8004648 <ADC_ConfigureBoostMode+0x210>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d80a      	bhi.n	80045fa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	e016      	b.n	8004628 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a13      	ldr	r2, [pc, #76]	; (800464c <ADC_ConfigureBoostMode+0x214>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d80a      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004614:	609a      	str	r2, [r3, #8]
}
 8004616:	e007      	b.n	8004628 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004626:	609a      	str	r2, [r3, #8]
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40022000 	.word	0x40022000
 8004634:	40022100 	.word	0x40022100
 8004638:	40022300 	.word	0x40022300
 800463c:	58026300 	.word	0x58026300
 8004640:	01312d00 	.word	0x01312d00
 8004644:	005f5e10 	.word	0x005f5e10
 8004648:	00bebc20 	.word	0x00bebc20
 800464c:	017d7840 	.word	0x017d7840

08004650 <LL_ADC_IsEnabled>:
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <LL_ADC_IsEnabled+0x18>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <LL_ADC_IsEnabled+0x1a>
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <LL_ADC_REG_IsConversionOngoing>:
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b04      	cmp	r3, #4
 8004688:	d101      	bne.n	800468e <LL_ADC_REG_IsConversionOngoing+0x18>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004700:	b590      	push	{r4, r7, lr}
 8004702:	b09f      	sub	sp, #124	; 0x7c
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800471a:	2302      	movs	r3, #2
 800471c:	e0be      	b.n	800489c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800472a:	2300      	movs	r3, #0
 800472c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a5c      	ldr	r2, [pc, #368]	; (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d102      	bne.n	800473e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004738:	4b5b      	ldr	r3, [pc, #364]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	e001      	b.n	8004742 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e09d      	b.n	800489c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff ff87 	bl	8004676 <LL_ADC_REG_IsConversionOngoing>
 8004768:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff ff81 	bl	8004676 <LL_ADC_REG_IsConversionOngoing>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d17f      	bne.n	800487a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800477a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800477c:	2b00      	cmp	r3, #0
 800477e:	d17c      	bne.n	800487a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a47      	ldr	r2, [pc, #284]	; (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a46      	ldr	r2, [pc, #280]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d101      	bne.n	8004798 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004794:	4b45      	ldr	r3, [pc, #276]	; (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004796:	e000      	b.n	800479a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004798:	4b45      	ldr	r3, [pc, #276]	; (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800479a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d039      	beq.n	8004818 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a3a      	ldr	r2, [pc, #232]	; (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a38      	ldr	r2, [pc, #224]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10e      	bne.n	80047e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80047ca:	4836      	ldr	r0, [pc, #216]	; (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047cc:	f7ff ff40 	bl	8004650 <LL_ADC_IsEnabled>
 80047d0:	4604      	mov	r4, r0
 80047d2:	4835      	ldr	r0, [pc, #212]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047d4:	f7ff ff3c 	bl	8004650 <LL_ADC_IsEnabled>
 80047d8:	4603      	mov	r3, r0
 80047da:	4323      	orrs	r3, r4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e008      	b.n	80047fa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80047e8:	4832      	ldr	r0, [pc, #200]	; (80048b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80047ea:	f7ff ff31 	bl	8004650 <LL_ADC_IsEnabled>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bf0c      	ite	eq
 80047f4:	2301      	moveq	r3, #1
 80047f6:	2300      	movne	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d047      	beq.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	4b2d      	ldr	r3, [pc, #180]	; (80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004804:	4013      	ands	r3, r2
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	6811      	ldr	r1, [r2, #0]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	6892      	ldr	r2, [r2, #8]
 800480e:	430a      	orrs	r2, r1
 8004810:	431a      	orrs	r2, r3
 8004812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004814:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004816:	e03a      	b.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004822:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d10e      	bne.n	8004856 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004838:	481a      	ldr	r0, [pc, #104]	; (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800483a:	f7ff ff09 	bl	8004650 <LL_ADC_IsEnabled>
 800483e:	4604      	mov	r4, r0
 8004840:	4819      	ldr	r0, [pc, #100]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004842:	f7ff ff05 	bl	8004650 <LL_ADC_IsEnabled>
 8004846:	4603      	mov	r3, r0
 8004848:	4323      	orrs	r3, r4
 800484a:	2b00      	cmp	r3, #0
 800484c:	bf0c      	ite	eq
 800484e:	2301      	moveq	r3, #1
 8004850:	2300      	movne	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	e008      	b.n	8004868 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004856:	4817      	ldr	r0, [pc, #92]	; (80048b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004858:	f7ff fefa 	bl	8004650 <LL_ADC_IsEnabled>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d010      	beq.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800486c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004872:	4013      	ands	r3, r2
 8004874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004876:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004878:	e009      	b.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800488c:	e000      	b.n	8004890 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800488e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004898:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800489c:	4618      	mov	r0, r3
 800489e:	377c      	adds	r7, #124	; 0x7c
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd90      	pop	{r4, r7, pc}
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40022100 	.word	0x40022100
 80048ac:	40022300 	.word	0x40022300
 80048b0:	58026300 	.word	0x58026300
 80048b4:	58026000 	.word	0x58026000
 80048b8:	fffff0e0 	.word	0xfffff0e0

080048bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <__NVIC_SetPriorityGrouping+0x40>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ea:	4a04      	ldr	r2, [pc, #16]	; (80048fc <__NVIC_SetPriorityGrouping+0x40>)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	60d3      	str	r3, [r2, #12]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000ed00 	.word	0xe000ed00
 8004900:	05fa0000 	.word	0x05fa0000

08004904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <__NVIC_GetPriorityGrouping+0x18>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f003 0307 	and.w	r3, r3, #7
}
 8004912:	4618      	mov	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800492a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800492e:	2b00      	cmp	r3, #0
 8004930:	db0b      	blt.n	800494a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	4907      	ldr	r1, [pc, #28]	; (8004958 <__NVIC_EnableIRQ+0x38>)
 800493a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2001      	movs	r0, #1
 8004942:	fa00 f202 	lsl.w	r2, r0, r2
 8004946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	e000e100 	.word	0xe000e100

0800495c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	6039      	str	r1, [r7, #0]
 8004966:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	db0a      	blt.n	8004986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	b2da      	uxtb	r2, r3
 8004974:	490c      	ldr	r1, [pc, #48]	; (80049a8 <__NVIC_SetPriority+0x4c>)
 8004976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800497a:	0112      	lsls	r2, r2, #4
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	440b      	add	r3, r1
 8004980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004984:	e00a      	b.n	800499c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	4908      	ldr	r1, [pc, #32]	; (80049ac <__NVIC_SetPriority+0x50>)
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	3b04      	subs	r3, #4
 8004994:	0112      	lsls	r2, r2, #4
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	440b      	add	r3, r1
 800499a:	761a      	strb	r2, [r3, #24]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000e100 	.word	0xe000e100
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b089      	sub	sp, #36	; 0x24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f1c3 0307 	rsb	r3, r3, #7
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	bf28      	it	cs
 80049ce:	2304      	movcs	r3, #4
 80049d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d902      	bls.n	80049e0 <NVIC_EncodePriority+0x30>
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3b03      	subs	r3, #3
 80049de:	e000      	b.n	80049e2 <NVIC_EncodePriority+0x32>
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43da      	mvns	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	401a      	ands	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004a02:	43d9      	mvns	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a08:	4313      	orrs	r3, r2
         );
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3724      	adds	r7, #36	; 0x24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a28:	d301      	bcc.n	8004a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e00f      	b.n	8004a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <SysTick_Config+0x40>)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a36:	210f      	movs	r1, #15
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a3c:	f7ff ff8e 	bl	800495c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <SysTick_Config+0x40>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a46:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <SysTick_Config+0x40>)
 8004a48:	2207      	movs	r2, #7
 8004a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	e000e010 	.word	0xe000e010

08004a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff ff29 	bl	80048bc <__NVIC_SetPriorityGrouping>
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b086      	sub	sp, #24
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	4603      	mov	r3, r0
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a80:	f7ff ff40 	bl	8004904 <__NVIC_GetPriorityGrouping>
 8004a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	6978      	ldr	r0, [r7, #20]
 8004a8c:	f7ff ff90 	bl	80049b0 <NVIC_EncodePriority>
 8004a90:	4602      	mov	r2, r0
 8004a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a96:	4611      	mov	r1, r2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff ff5f 	bl	800495c <__NVIC_SetPriority>
}
 8004a9e:	bf00      	nop
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	4603      	mov	r3, r0
 8004aae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff33 	bl	8004920 <__NVIC_EnableIRQ>
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ffa4 	bl	8004a18 <SysTick_Config>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004ae4:	f7fe f92e 	bl	8002d44 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e316      	b.n	8005122 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a66      	ldr	r2, [pc, #408]	; (8004c94 <HAL_DMA_Init+0x1b8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d04a      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a65      	ldr	r2, [pc, #404]	; (8004c98 <HAL_DMA_Init+0x1bc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d045      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a63      	ldr	r2, [pc, #396]	; (8004c9c <HAL_DMA_Init+0x1c0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d040      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a62      	ldr	r2, [pc, #392]	; (8004ca0 <HAL_DMA_Init+0x1c4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d03b      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a60      	ldr	r2, [pc, #384]	; (8004ca4 <HAL_DMA_Init+0x1c8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d036      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a5f      	ldr	r2, [pc, #380]	; (8004ca8 <HAL_DMA_Init+0x1cc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d031      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a5d      	ldr	r2, [pc, #372]	; (8004cac <HAL_DMA_Init+0x1d0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d02c      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a5c      	ldr	r2, [pc, #368]	; (8004cb0 <HAL_DMA_Init+0x1d4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d027      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a5a      	ldr	r2, [pc, #360]	; (8004cb4 <HAL_DMA_Init+0x1d8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a59      	ldr	r2, [pc, #356]	; (8004cb8 <HAL_DMA_Init+0x1dc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d01d      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a57      	ldr	r2, [pc, #348]	; (8004cbc <HAL_DMA_Init+0x1e0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a56      	ldr	r2, [pc, #344]	; (8004cc0 <HAL_DMA_Init+0x1e4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a54      	ldr	r2, [pc, #336]	; (8004cc4 <HAL_DMA_Init+0x1e8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a53      	ldr	r2, [pc, #332]	; (8004cc8 <HAL_DMA_Init+0x1ec>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a51      	ldr	r2, [pc, #324]	; (8004ccc <HAL_DMA_Init+0x1f0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_DMA_Init+0xb8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a50      	ldr	r2, [pc, #320]	; (8004cd0 <HAL_DMA_Init+0x1f4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d101      	bne.n	8004b98 <HAL_DMA_Init+0xbc>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_DMA_Init+0xbe>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 813b 	beq.w	8004e16 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a37      	ldr	r2, [pc, #220]	; (8004c94 <HAL_DMA_Init+0x1b8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d04a      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a36      	ldr	r2, [pc, #216]	; (8004c98 <HAL_DMA_Init+0x1bc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d045      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a34      	ldr	r2, [pc, #208]	; (8004c9c <HAL_DMA_Init+0x1c0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d040      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a33      	ldr	r2, [pc, #204]	; (8004ca0 <HAL_DMA_Init+0x1c4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d03b      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a31      	ldr	r2, [pc, #196]	; (8004ca4 <HAL_DMA_Init+0x1c8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d036      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a30      	ldr	r2, [pc, #192]	; (8004ca8 <HAL_DMA_Init+0x1cc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d031      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2e      	ldr	r2, [pc, #184]	; (8004cac <HAL_DMA_Init+0x1d0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d02c      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2d      	ldr	r2, [pc, #180]	; (8004cb0 <HAL_DMA_Init+0x1d4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d027      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2b      	ldr	r2, [pc, #172]	; (8004cb4 <HAL_DMA_Init+0x1d8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d022      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2a      	ldr	r2, [pc, #168]	; (8004cb8 <HAL_DMA_Init+0x1dc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d01d      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a28      	ldr	r2, [pc, #160]	; (8004cbc <HAL_DMA_Init+0x1e0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d018      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a27      	ldr	r2, [pc, #156]	; (8004cc0 <HAL_DMA_Init+0x1e4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d013      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a25      	ldr	r2, [pc, #148]	; (8004cc4 <HAL_DMA_Init+0x1e8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00e      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a24      	ldr	r2, [pc, #144]	; (8004cc8 <HAL_DMA_Init+0x1ec>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a22      	ldr	r2, [pc, #136]	; (8004ccc <HAL_DMA_Init+0x1f0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_DMA_Init+0x174>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a21      	ldr	r2, [pc, #132]	; (8004cd0 <HAL_DMA_Init+0x1f4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d108      	bne.n	8004c62 <HAL_DMA_Init+0x186>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	e007      	b.n	8004c72 <HAL_DMA_Init+0x196>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c72:	e02f      	b.n	8004cd4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c74:	f7fe f866 	bl	8002d44 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d928      	bls.n	8004cd4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e246      	b.n	8005122 <HAL_DMA_Init+0x646>
 8004c94:	40020010 	.word	0x40020010
 8004c98:	40020028 	.word	0x40020028
 8004c9c:	40020040 	.word	0x40020040
 8004ca0:	40020058 	.word	0x40020058
 8004ca4:	40020070 	.word	0x40020070
 8004ca8:	40020088 	.word	0x40020088
 8004cac:	400200a0 	.word	0x400200a0
 8004cb0:	400200b8 	.word	0x400200b8
 8004cb4:	40020410 	.word	0x40020410
 8004cb8:	40020428 	.word	0x40020428
 8004cbc:	40020440 	.word	0x40020440
 8004cc0:	40020458 	.word	0x40020458
 8004cc4:	40020470 	.word	0x40020470
 8004cc8:	40020488 	.word	0x40020488
 8004ccc:	400204a0 	.word	0x400204a0
 8004cd0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1c8      	bne.n	8004c74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4b83      	ldr	r3, [pc, #524]	; (8004efc <HAL_DMA_Init+0x420>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004cfa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d107      	bne.n	8004d38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	4313      	orrs	r3, r2
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d38:	4b71      	ldr	r3, [pc, #452]	; (8004f00 <HAL_DMA_Init+0x424>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b71      	ldr	r3, [pc, #452]	; (8004f04 <HAL_DMA_Init+0x428>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d44:	d328      	bcc.n	8004d98 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b28      	cmp	r3, #40	; 0x28
 8004d4c:	d903      	bls.n	8004d56 <HAL_DMA_Init+0x27a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b2e      	cmp	r3, #46	; 0x2e
 8004d54:	d917      	bls.n	8004d86 <HAL_DMA_Init+0x2aa>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d5c:	d903      	bls.n	8004d66 <HAL_DMA_Init+0x28a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b42      	cmp	r3, #66	; 0x42
 8004d64:	d90f      	bls.n	8004d86 <HAL_DMA_Init+0x2aa>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b46      	cmp	r3, #70	; 0x46
 8004d6c:	d903      	bls.n	8004d76 <HAL_DMA_Init+0x29a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b48      	cmp	r3, #72	; 0x48
 8004d74:	d907      	bls.n	8004d86 <HAL_DMA_Init+0x2aa>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b4e      	cmp	r3, #78	; 0x4e
 8004d7c:	d905      	bls.n	8004d8a <HAL_DMA_Init+0x2ae>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b52      	cmp	r3, #82	; 0x52
 8004d84:	d801      	bhi.n	8004d8a <HAL_DMA_Init+0x2ae>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_DMA_Init+0x2b0>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d96:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0307 	bic.w	r3, r3, #7
 8004dae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d117      	bne.n	8004df2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00e      	beq.n	8004df2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f002 fb33 	bl	8007440 <DMA_CheckFifoParam>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e197      	b.n	8005122 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f002 fa6e 	bl	80072dc <DMA_CalcBaseAndBitshift>
 8004e00:	4603      	mov	r3, r0
 8004e02:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	223f      	movs	r2, #63	; 0x3f
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	e0cd      	b.n	8004fb2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a3b      	ldr	r2, [pc, #236]	; (8004f08 <HAL_DMA_Init+0x42c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d022      	beq.n	8004e66 <HAL_DMA_Init+0x38a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a39      	ldr	r2, [pc, #228]	; (8004f0c <HAL_DMA_Init+0x430>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01d      	beq.n	8004e66 <HAL_DMA_Init+0x38a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a38      	ldr	r2, [pc, #224]	; (8004f10 <HAL_DMA_Init+0x434>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d018      	beq.n	8004e66 <HAL_DMA_Init+0x38a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a36      	ldr	r2, [pc, #216]	; (8004f14 <HAL_DMA_Init+0x438>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_DMA_Init+0x38a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a35      	ldr	r2, [pc, #212]	; (8004f18 <HAL_DMA_Init+0x43c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_DMA_Init+0x38a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a33      	ldr	r2, [pc, #204]	; (8004f1c <HAL_DMA_Init+0x440>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_DMA_Init+0x38a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a32      	ldr	r2, [pc, #200]	; (8004f20 <HAL_DMA_Init+0x444>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_DMA_Init+0x38a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a30      	ldr	r2, [pc, #192]	; (8004f24 <HAL_DMA_Init+0x448>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d101      	bne.n	8004e6a <HAL_DMA_Init+0x38e>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <HAL_DMA_Init+0x390>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8097 	beq.w	8004fa0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a24      	ldr	r2, [pc, #144]	; (8004f08 <HAL_DMA_Init+0x42c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d021      	beq.n	8004ec0 <HAL_DMA_Init+0x3e4>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a22      	ldr	r2, [pc, #136]	; (8004f0c <HAL_DMA_Init+0x430>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01c      	beq.n	8004ec0 <HAL_DMA_Init+0x3e4>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a21      	ldr	r2, [pc, #132]	; (8004f10 <HAL_DMA_Init+0x434>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d017      	beq.n	8004ec0 <HAL_DMA_Init+0x3e4>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1f      	ldr	r2, [pc, #124]	; (8004f14 <HAL_DMA_Init+0x438>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d012      	beq.n	8004ec0 <HAL_DMA_Init+0x3e4>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <HAL_DMA_Init+0x43c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00d      	beq.n	8004ec0 <HAL_DMA_Init+0x3e4>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <HAL_DMA_Init+0x440>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d008      	beq.n	8004ec0 <HAL_DMA_Init+0x3e4>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <HAL_DMA_Init+0x444>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d003      	beq.n	8004ec0 <HAL_DMA_Init+0x3e4>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <HAL_DMA_Init+0x448>)
 8004ebe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <HAL_DMA_Init+0x44c>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d021      	beq.n	8004f2c <HAL_DMA_Init+0x450>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b80      	cmp	r3, #128	; 0x80
 8004eee:	d102      	bne.n	8004ef6 <HAL_DMA_Init+0x41a>
 8004ef0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ef4:	e01b      	b.n	8004f2e <HAL_DMA_Init+0x452>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e019      	b.n	8004f2e <HAL_DMA_Init+0x452>
 8004efa:	bf00      	nop
 8004efc:	fe10803f 	.word	0xfe10803f
 8004f00:	5c001000 	.word	0x5c001000
 8004f04:	ffff0000 	.word	0xffff0000
 8004f08:	58025408 	.word	0x58025408
 8004f0c:	5802541c 	.word	0x5802541c
 8004f10:	58025430 	.word	0x58025430
 8004f14:	58025444 	.word	0x58025444
 8004f18:	58025458 	.word	0x58025458
 8004f1c:	5802546c 	.word	0x5802546c
 8004f20:	58025480 	.word	0x58025480
 8004f24:	58025494 	.word	0x58025494
 8004f28:	fffe000f 	.word	0xfffe000f
 8004f2c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68d2      	ldr	r2, [r2, #12]
 8004f32:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f5c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	4b6e      	ldr	r3, [pc, #440]	; (800512c <HAL_DMA_Init+0x650>)
 8004f74:	4413      	add	r3, r2
 8004f76:	4a6e      	ldr	r2, [pc, #440]	; (8005130 <HAL_DMA_Init+0x654>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	009a      	lsls	r2, r3, #2
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f002 f9a9 	bl	80072dc <DMA_CalcBaseAndBitshift>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	2201      	movs	r2, #1
 8004f98:	409a      	lsls	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	605a      	str	r2, [r3, #4]
 8004f9e:	e008      	b.n	8004fb2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2240      	movs	r2, #64	; 0x40
 8004fa4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2203      	movs	r2, #3
 8004faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e0b7      	b.n	8005122 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5f      	ldr	r2, [pc, #380]	; (8005134 <HAL_DMA_Init+0x658>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d072      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a5d      	ldr	r2, [pc, #372]	; (8005138 <HAL_DMA_Init+0x65c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d06d      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a5c      	ldr	r2, [pc, #368]	; (800513c <HAL_DMA_Init+0x660>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d068      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a5a      	ldr	r2, [pc, #360]	; (8005140 <HAL_DMA_Init+0x664>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d063      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a59      	ldr	r2, [pc, #356]	; (8005144 <HAL_DMA_Init+0x668>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d05e      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a57      	ldr	r2, [pc, #348]	; (8005148 <HAL_DMA_Init+0x66c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d059      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a56      	ldr	r2, [pc, #344]	; (800514c <HAL_DMA_Init+0x670>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d054      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a54      	ldr	r2, [pc, #336]	; (8005150 <HAL_DMA_Init+0x674>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d04f      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a53      	ldr	r2, [pc, #332]	; (8005154 <HAL_DMA_Init+0x678>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d04a      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a51      	ldr	r2, [pc, #324]	; (8005158 <HAL_DMA_Init+0x67c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d045      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a50      	ldr	r2, [pc, #320]	; (800515c <HAL_DMA_Init+0x680>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d040      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a4e      	ldr	r2, [pc, #312]	; (8005160 <HAL_DMA_Init+0x684>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d03b      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a4d      	ldr	r2, [pc, #308]	; (8005164 <HAL_DMA_Init+0x688>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d036      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a4b      	ldr	r2, [pc, #300]	; (8005168 <HAL_DMA_Init+0x68c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d031      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a4a      	ldr	r2, [pc, #296]	; (800516c <HAL_DMA_Init+0x690>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d02c      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a48      	ldr	r2, [pc, #288]	; (8005170 <HAL_DMA_Init+0x694>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d027      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a47      	ldr	r2, [pc, #284]	; (8005174 <HAL_DMA_Init+0x698>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d022      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a45      	ldr	r2, [pc, #276]	; (8005178 <HAL_DMA_Init+0x69c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01d      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a44      	ldr	r2, [pc, #272]	; (800517c <HAL_DMA_Init+0x6a0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d018      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a42      	ldr	r2, [pc, #264]	; (8005180 <HAL_DMA_Init+0x6a4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d013      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a41      	ldr	r2, [pc, #260]	; (8005184 <HAL_DMA_Init+0x6a8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00e      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a3f      	ldr	r2, [pc, #252]	; (8005188 <HAL_DMA_Init+0x6ac>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d009      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a3e      	ldr	r2, [pc, #248]	; (800518c <HAL_DMA_Init+0x6b0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d004      	beq.n	80050a2 <HAL_DMA_Init+0x5c6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a3c      	ldr	r2, [pc, #240]	; (8005190 <HAL_DMA_Init+0x6b4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d101      	bne.n	80050a6 <HAL_DMA_Init+0x5ca>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <HAL_DMA_Init+0x5cc>
 80050a6:	2300      	movs	r3, #0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d032      	beq.n	8005112 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f002 fa43 	bl	8007538 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	d102      	bne.n	80050c0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d010      	beq.n	8005100 <HAL_DMA_Init+0x624>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d80c      	bhi.n	8005100 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f002 fac0 	bl	800766c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	e008      	b.n	8005112 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	a7fdabf8 	.word	0xa7fdabf8
 8005130:	cccccccd 	.word	0xcccccccd
 8005134:	40020010 	.word	0x40020010
 8005138:	40020028 	.word	0x40020028
 800513c:	40020040 	.word	0x40020040
 8005140:	40020058 	.word	0x40020058
 8005144:	40020070 	.word	0x40020070
 8005148:	40020088 	.word	0x40020088
 800514c:	400200a0 	.word	0x400200a0
 8005150:	400200b8 	.word	0x400200b8
 8005154:	40020410 	.word	0x40020410
 8005158:	40020428 	.word	0x40020428
 800515c:	40020440 	.word	0x40020440
 8005160:	40020458 	.word	0x40020458
 8005164:	40020470 	.word	0x40020470
 8005168:	40020488 	.word	0x40020488
 800516c:	400204a0 	.word	0x400204a0
 8005170:	400204b8 	.word	0x400204b8
 8005174:	58025408 	.word	0x58025408
 8005178:	5802541c 	.word	0x5802541c
 800517c:	58025430 	.word	0x58025430
 8005180:	58025444 	.word	0x58025444
 8005184:	58025458 	.word	0x58025458
 8005188:	5802546c 	.word	0x5802546c
 800518c:	58025480 	.word	0x58025480
 8005190:	58025494 	.word	0x58025494

08005194 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e226      	b.n	80055fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_DMA_Start_IT+0x2a>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e21f      	b.n	80055fe <HAL_DMA_Start_IT+0x46a>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	f040 820a 	bne.w	80055e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a68      	ldr	r2, [pc, #416]	; (8005388 <HAL_DMA_Start_IT+0x1f4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d04a      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a66      	ldr	r2, [pc, #408]	; (800538c <HAL_DMA_Start_IT+0x1f8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d045      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a65      	ldr	r2, [pc, #404]	; (8005390 <HAL_DMA_Start_IT+0x1fc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d040      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a63      	ldr	r2, [pc, #396]	; (8005394 <HAL_DMA_Start_IT+0x200>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d03b      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a62      	ldr	r2, [pc, #392]	; (8005398 <HAL_DMA_Start_IT+0x204>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d036      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a60      	ldr	r2, [pc, #384]	; (800539c <HAL_DMA_Start_IT+0x208>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d031      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a5f      	ldr	r2, [pc, #380]	; (80053a0 <HAL_DMA_Start_IT+0x20c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d02c      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a5d      	ldr	r2, [pc, #372]	; (80053a4 <HAL_DMA_Start_IT+0x210>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d027      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a5c      	ldr	r2, [pc, #368]	; (80053a8 <HAL_DMA_Start_IT+0x214>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d022      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a5a      	ldr	r2, [pc, #360]	; (80053ac <HAL_DMA_Start_IT+0x218>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01d      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a59      	ldr	r2, [pc, #356]	; (80053b0 <HAL_DMA_Start_IT+0x21c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d018      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a57      	ldr	r2, [pc, #348]	; (80053b4 <HAL_DMA_Start_IT+0x220>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a56      	ldr	r2, [pc, #344]	; (80053b8 <HAL_DMA_Start_IT+0x224>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a54      	ldr	r2, [pc, #336]	; (80053bc <HAL_DMA_Start_IT+0x228>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a53      	ldr	r2, [pc, #332]	; (80053c0 <HAL_DMA_Start_IT+0x22c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_DMA_Start_IT+0xee>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a51      	ldr	r2, [pc, #324]	; (80053c4 <HAL_DMA_Start_IT+0x230>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d108      	bne.n	8005294 <HAL_DMA_Start_IT+0x100>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e007      	b.n	80052a4 <HAL_DMA_Start_IT+0x110>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f001 fe6a 	bl	8006f84 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a34      	ldr	r2, [pc, #208]	; (8005388 <HAL_DMA_Start_IT+0x1f4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d04a      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a33      	ldr	r2, [pc, #204]	; (800538c <HAL_DMA_Start_IT+0x1f8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d045      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a31      	ldr	r2, [pc, #196]	; (8005390 <HAL_DMA_Start_IT+0x1fc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d040      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a30      	ldr	r2, [pc, #192]	; (8005394 <HAL_DMA_Start_IT+0x200>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d03b      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a2e      	ldr	r2, [pc, #184]	; (8005398 <HAL_DMA_Start_IT+0x204>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d036      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a2d      	ldr	r2, [pc, #180]	; (800539c <HAL_DMA_Start_IT+0x208>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d031      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a2b      	ldr	r2, [pc, #172]	; (80053a0 <HAL_DMA_Start_IT+0x20c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d02c      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a2a      	ldr	r2, [pc, #168]	; (80053a4 <HAL_DMA_Start_IT+0x210>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d027      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a28      	ldr	r2, [pc, #160]	; (80053a8 <HAL_DMA_Start_IT+0x214>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d022      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a27      	ldr	r2, [pc, #156]	; (80053ac <HAL_DMA_Start_IT+0x218>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d01d      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a25      	ldr	r2, [pc, #148]	; (80053b0 <HAL_DMA_Start_IT+0x21c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d018      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <HAL_DMA_Start_IT+0x220>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d013      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a22      	ldr	r2, [pc, #136]	; (80053b8 <HAL_DMA_Start_IT+0x224>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00e      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a21      	ldr	r2, [pc, #132]	; (80053bc <HAL_DMA_Start_IT+0x228>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d009      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <HAL_DMA_Start_IT+0x22c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_DMA_Start_IT+0x1bc>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <HAL_DMA_Start_IT+0x230>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d101      	bne.n	8005354 <HAL_DMA_Start_IT+0x1c0>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <HAL_DMA_Start_IT+0x1c2>
 8005354:	2300      	movs	r3, #0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d036      	beq.n	80053c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f023 021e 	bic.w	r2, r3, #30
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0216 	orr.w	r2, r2, #22
 800536c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d03e      	beq.n	80053f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0208 	orr.w	r2, r2, #8
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e035      	b.n	80053f4 <HAL_DMA_Start_IT+0x260>
 8005388:	40020010 	.word	0x40020010
 800538c:	40020028 	.word	0x40020028
 8005390:	40020040 	.word	0x40020040
 8005394:	40020058 	.word	0x40020058
 8005398:	40020070 	.word	0x40020070
 800539c:	40020088 	.word	0x40020088
 80053a0:	400200a0 	.word	0x400200a0
 80053a4:	400200b8 	.word	0x400200b8
 80053a8:	40020410 	.word	0x40020410
 80053ac:	40020428 	.word	0x40020428
 80053b0:	40020440 	.word	0x40020440
 80053b4:	40020458 	.word	0x40020458
 80053b8:	40020470 	.word	0x40020470
 80053bc:	40020488 	.word	0x40020488
 80053c0:	400204a0 	.word	0x400204a0
 80053c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 020e 	bic.w	r2, r3, #14
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 020a 	orr.w	r2, r2, #10
 80053da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0204 	orr.w	r2, r2, #4
 80053f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a83      	ldr	r2, [pc, #524]	; (8005608 <HAL_DMA_Start_IT+0x474>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d072      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a82      	ldr	r2, [pc, #520]	; (800560c <HAL_DMA_Start_IT+0x478>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d06d      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a80      	ldr	r2, [pc, #512]	; (8005610 <HAL_DMA_Start_IT+0x47c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d068      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a7f      	ldr	r2, [pc, #508]	; (8005614 <HAL_DMA_Start_IT+0x480>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d063      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a7d      	ldr	r2, [pc, #500]	; (8005618 <HAL_DMA_Start_IT+0x484>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d05e      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a7c      	ldr	r2, [pc, #496]	; (800561c <HAL_DMA_Start_IT+0x488>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d059      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a7a      	ldr	r2, [pc, #488]	; (8005620 <HAL_DMA_Start_IT+0x48c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d054      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a79      	ldr	r2, [pc, #484]	; (8005624 <HAL_DMA_Start_IT+0x490>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d04f      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a77      	ldr	r2, [pc, #476]	; (8005628 <HAL_DMA_Start_IT+0x494>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d04a      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a76      	ldr	r2, [pc, #472]	; (800562c <HAL_DMA_Start_IT+0x498>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d045      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a74      	ldr	r2, [pc, #464]	; (8005630 <HAL_DMA_Start_IT+0x49c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d040      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a73      	ldr	r2, [pc, #460]	; (8005634 <HAL_DMA_Start_IT+0x4a0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d03b      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a71      	ldr	r2, [pc, #452]	; (8005638 <HAL_DMA_Start_IT+0x4a4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d036      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a70      	ldr	r2, [pc, #448]	; (800563c <HAL_DMA_Start_IT+0x4a8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d031      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a6e      	ldr	r2, [pc, #440]	; (8005640 <HAL_DMA_Start_IT+0x4ac>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d02c      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a6d      	ldr	r2, [pc, #436]	; (8005644 <HAL_DMA_Start_IT+0x4b0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d027      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a6b      	ldr	r2, [pc, #428]	; (8005648 <HAL_DMA_Start_IT+0x4b4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d022      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a6a      	ldr	r2, [pc, #424]	; (800564c <HAL_DMA_Start_IT+0x4b8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d01d      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a68      	ldr	r2, [pc, #416]	; (8005650 <HAL_DMA_Start_IT+0x4bc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d018      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a67      	ldr	r2, [pc, #412]	; (8005654 <HAL_DMA_Start_IT+0x4c0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a65      	ldr	r2, [pc, #404]	; (8005658 <HAL_DMA_Start_IT+0x4c4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00e      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a64      	ldr	r2, [pc, #400]	; (800565c <HAL_DMA_Start_IT+0x4c8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d009      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a62      	ldr	r2, [pc, #392]	; (8005660 <HAL_DMA_Start_IT+0x4cc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <HAL_DMA_Start_IT+0x350>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a61      	ldr	r2, [pc, #388]	; (8005664 <HAL_DMA_Start_IT+0x4d0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d101      	bne.n	80054e8 <HAL_DMA_Start_IT+0x354>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e000      	b.n	80054ea <HAL_DMA_Start_IT+0x356>
 80054e8:	2300      	movs	r3, #0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d01a      	beq.n	8005524 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800550a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005522:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a37      	ldr	r2, [pc, #220]	; (8005608 <HAL_DMA_Start_IT+0x474>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d04a      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a36      	ldr	r2, [pc, #216]	; (800560c <HAL_DMA_Start_IT+0x478>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d045      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a34      	ldr	r2, [pc, #208]	; (8005610 <HAL_DMA_Start_IT+0x47c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d040      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a33      	ldr	r2, [pc, #204]	; (8005614 <HAL_DMA_Start_IT+0x480>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d03b      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a31      	ldr	r2, [pc, #196]	; (8005618 <HAL_DMA_Start_IT+0x484>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d036      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a30      	ldr	r2, [pc, #192]	; (800561c <HAL_DMA_Start_IT+0x488>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d031      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2e      	ldr	r2, [pc, #184]	; (8005620 <HAL_DMA_Start_IT+0x48c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d02c      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2d      	ldr	r2, [pc, #180]	; (8005624 <HAL_DMA_Start_IT+0x490>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d027      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2b      	ldr	r2, [pc, #172]	; (8005628 <HAL_DMA_Start_IT+0x494>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d022      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2a      	ldr	r2, [pc, #168]	; (800562c <HAL_DMA_Start_IT+0x498>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d01d      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a28      	ldr	r2, [pc, #160]	; (8005630 <HAL_DMA_Start_IT+0x49c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d018      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a27      	ldr	r2, [pc, #156]	; (8005634 <HAL_DMA_Start_IT+0x4a0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d013      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a25      	ldr	r2, [pc, #148]	; (8005638 <HAL_DMA_Start_IT+0x4a4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00e      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a24      	ldr	r2, [pc, #144]	; (800563c <HAL_DMA_Start_IT+0x4a8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d009      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a22      	ldr	r2, [pc, #136]	; (8005640 <HAL_DMA_Start_IT+0x4ac>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <HAL_DMA_Start_IT+0x430>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a21      	ldr	r2, [pc, #132]	; (8005644 <HAL_DMA_Start_IT+0x4b0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d108      	bne.n	80055d6 <HAL_DMA_Start_IT+0x442>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e012      	b.n	80055fc <HAL_DMA_Start_IT+0x468>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0201 	orr.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e009      	b.n	80055fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40020010 	.word	0x40020010
 800560c:	40020028 	.word	0x40020028
 8005610:	40020040 	.word	0x40020040
 8005614:	40020058 	.word	0x40020058
 8005618:	40020070 	.word	0x40020070
 800561c:	40020088 	.word	0x40020088
 8005620:	400200a0 	.word	0x400200a0
 8005624:	400200b8 	.word	0x400200b8
 8005628:	40020410 	.word	0x40020410
 800562c:	40020428 	.word	0x40020428
 8005630:	40020440 	.word	0x40020440
 8005634:	40020458 	.word	0x40020458
 8005638:	40020470 	.word	0x40020470
 800563c:	40020488 	.word	0x40020488
 8005640:	400204a0 	.word	0x400204a0
 8005644:	400204b8 	.word	0x400204b8
 8005648:	58025408 	.word	0x58025408
 800564c:	5802541c 	.word	0x5802541c
 8005650:	58025430 	.word	0x58025430
 8005654:	58025444 	.word	0x58025444
 8005658:	58025458 	.word	0x58025458
 800565c:	5802546c 	.word	0x5802546c
 8005660:	58025480 	.word	0x58025480
 8005664:	58025494 	.word	0x58025494

08005668 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005670:	f7fd fb68 	bl	8002d44 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e2dc      	b.n	8005c3a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d008      	beq.n	800569e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2280      	movs	r2, #128	; 0x80
 8005690:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e2cd      	b.n	8005c3a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a76      	ldr	r2, [pc, #472]	; (800587c <HAL_DMA_Abort+0x214>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d04a      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a74      	ldr	r2, [pc, #464]	; (8005880 <HAL_DMA_Abort+0x218>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d045      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a73      	ldr	r2, [pc, #460]	; (8005884 <HAL_DMA_Abort+0x21c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d040      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a71      	ldr	r2, [pc, #452]	; (8005888 <HAL_DMA_Abort+0x220>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d03b      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a70      	ldr	r2, [pc, #448]	; (800588c <HAL_DMA_Abort+0x224>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d036      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a6e      	ldr	r2, [pc, #440]	; (8005890 <HAL_DMA_Abort+0x228>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d031      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a6d      	ldr	r2, [pc, #436]	; (8005894 <HAL_DMA_Abort+0x22c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d02c      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a6b      	ldr	r2, [pc, #428]	; (8005898 <HAL_DMA_Abort+0x230>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d027      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a6a      	ldr	r2, [pc, #424]	; (800589c <HAL_DMA_Abort+0x234>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d022      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a68      	ldr	r2, [pc, #416]	; (80058a0 <HAL_DMA_Abort+0x238>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01d      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a67      	ldr	r2, [pc, #412]	; (80058a4 <HAL_DMA_Abort+0x23c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d018      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a65      	ldr	r2, [pc, #404]	; (80058a8 <HAL_DMA_Abort+0x240>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a64      	ldr	r2, [pc, #400]	; (80058ac <HAL_DMA_Abort+0x244>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00e      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a62      	ldr	r2, [pc, #392]	; (80058b0 <HAL_DMA_Abort+0x248>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a61      	ldr	r2, [pc, #388]	; (80058b4 <HAL_DMA_Abort+0x24c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_DMA_Abort+0xd6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a5f      	ldr	r2, [pc, #380]	; (80058b8 <HAL_DMA_Abort+0x250>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d101      	bne.n	8005742 <HAL_DMA_Abort+0xda>
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <HAL_DMA_Abort+0xdc>
 8005742:	2300      	movs	r3, #0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d013      	beq.n	8005770 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 021e 	bic.w	r2, r2, #30
 8005756:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005766:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e00a      	b.n	8005786 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 020e 	bic.w	r2, r2, #14
 800577e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a3c      	ldr	r2, [pc, #240]	; (800587c <HAL_DMA_Abort+0x214>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d072      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a3a      	ldr	r2, [pc, #232]	; (8005880 <HAL_DMA_Abort+0x218>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d06d      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a39      	ldr	r2, [pc, #228]	; (8005884 <HAL_DMA_Abort+0x21c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d068      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a37      	ldr	r2, [pc, #220]	; (8005888 <HAL_DMA_Abort+0x220>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d063      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a36      	ldr	r2, [pc, #216]	; (800588c <HAL_DMA_Abort+0x224>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d05e      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a34      	ldr	r2, [pc, #208]	; (8005890 <HAL_DMA_Abort+0x228>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d059      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a33      	ldr	r2, [pc, #204]	; (8005894 <HAL_DMA_Abort+0x22c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d054      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a31      	ldr	r2, [pc, #196]	; (8005898 <HAL_DMA_Abort+0x230>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d04f      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a30      	ldr	r2, [pc, #192]	; (800589c <HAL_DMA_Abort+0x234>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d04a      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a2e      	ldr	r2, [pc, #184]	; (80058a0 <HAL_DMA_Abort+0x238>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d045      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a2d      	ldr	r2, [pc, #180]	; (80058a4 <HAL_DMA_Abort+0x23c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d040      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2b      	ldr	r2, [pc, #172]	; (80058a8 <HAL_DMA_Abort+0x240>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d03b      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2a      	ldr	r2, [pc, #168]	; (80058ac <HAL_DMA_Abort+0x244>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d036      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a28      	ldr	r2, [pc, #160]	; (80058b0 <HAL_DMA_Abort+0x248>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d031      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a27      	ldr	r2, [pc, #156]	; (80058b4 <HAL_DMA_Abort+0x24c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d02c      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a25      	ldr	r2, [pc, #148]	; (80058b8 <HAL_DMA_Abort+0x250>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d027      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a24      	ldr	r2, [pc, #144]	; (80058bc <HAL_DMA_Abort+0x254>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d022      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a22      	ldr	r2, [pc, #136]	; (80058c0 <HAL_DMA_Abort+0x258>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d01d      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <HAL_DMA_Abort+0x25c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d018      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <HAL_DMA_Abort+0x260>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <HAL_DMA_Abort+0x264>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00e      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1c      	ldr	r2, [pc, #112]	; (80058d0 <HAL_DMA_Abort+0x268>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d009      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <HAL_DMA_Abort+0x26c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d004      	beq.n	8005876 <HAL_DMA_Abort+0x20e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a19      	ldr	r2, [pc, #100]	; (80058d8 <HAL_DMA_Abort+0x270>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d132      	bne.n	80058dc <HAL_DMA_Abort+0x274>
 8005876:	2301      	movs	r3, #1
 8005878:	e031      	b.n	80058de <HAL_DMA_Abort+0x276>
 800587a:	bf00      	nop
 800587c:	40020010 	.word	0x40020010
 8005880:	40020028 	.word	0x40020028
 8005884:	40020040 	.word	0x40020040
 8005888:	40020058 	.word	0x40020058
 800588c:	40020070 	.word	0x40020070
 8005890:	40020088 	.word	0x40020088
 8005894:	400200a0 	.word	0x400200a0
 8005898:	400200b8 	.word	0x400200b8
 800589c:	40020410 	.word	0x40020410
 80058a0:	40020428 	.word	0x40020428
 80058a4:	40020440 	.word	0x40020440
 80058a8:	40020458 	.word	0x40020458
 80058ac:	40020470 	.word	0x40020470
 80058b0:	40020488 	.word	0x40020488
 80058b4:	400204a0 	.word	0x400204a0
 80058b8:	400204b8 	.word	0x400204b8
 80058bc:	58025408 	.word	0x58025408
 80058c0:	5802541c 	.word	0x5802541c
 80058c4:	58025430 	.word	0x58025430
 80058c8:	58025444 	.word	0x58025444
 80058cc:	58025458 	.word	0x58025458
 80058d0:	5802546c 	.word	0x5802546c
 80058d4:	58025480 	.word	0x58025480
 80058d8:	58025494 	.word	0x58025494
 80058dc:	2300      	movs	r3, #0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a6d      	ldr	r2, [pc, #436]	; (8005aac <HAL_DMA_Abort+0x444>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d04a      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a6b      	ldr	r2, [pc, #428]	; (8005ab0 <HAL_DMA_Abort+0x448>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d045      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a6a      	ldr	r2, [pc, #424]	; (8005ab4 <HAL_DMA_Abort+0x44c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d040      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a68      	ldr	r2, [pc, #416]	; (8005ab8 <HAL_DMA_Abort+0x450>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d03b      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a67      	ldr	r2, [pc, #412]	; (8005abc <HAL_DMA_Abort+0x454>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d036      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a65      	ldr	r2, [pc, #404]	; (8005ac0 <HAL_DMA_Abort+0x458>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d031      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a64      	ldr	r2, [pc, #400]	; (8005ac4 <HAL_DMA_Abort+0x45c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d02c      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a62      	ldr	r2, [pc, #392]	; (8005ac8 <HAL_DMA_Abort+0x460>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d027      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a61      	ldr	r2, [pc, #388]	; (8005acc <HAL_DMA_Abort+0x464>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d022      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a5f      	ldr	r2, [pc, #380]	; (8005ad0 <HAL_DMA_Abort+0x468>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d01d      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a5e      	ldr	r2, [pc, #376]	; (8005ad4 <HAL_DMA_Abort+0x46c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d018      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a5c      	ldr	r2, [pc, #368]	; (8005ad8 <HAL_DMA_Abort+0x470>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a5b      	ldr	r2, [pc, #364]	; (8005adc <HAL_DMA_Abort+0x474>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00e      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a59      	ldr	r2, [pc, #356]	; (8005ae0 <HAL_DMA_Abort+0x478>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d009      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a58      	ldr	r2, [pc, #352]	; (8005ae4 <HAL_DMA_Abort+0x47c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_DMA_Abort+0x32a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a56      	ldr	r2, [pc, #344]	; (8005ae8 <HAL_DMA_Abort+0x480>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d108      	bne.n	80059a4 <HAL_DMA_Abort+0x33c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	e007      	b.n	80059b4 <HAL_DMA_Abort+0x34c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80059b4:	e013      	b.n	80059de <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059b6:	f7fd f9c5 	bl	8002d44 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b05      	cmp	r3, #5
 80059c2:	d90c      	bls.n	80059de <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2203      	movs	r2, #3
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e12d      	b.n	8005c3a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e5      	bne.n	80059b6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2f      	ldr	r2, [pc, #188]	; (8005aac <HAL_DMA_Abort+0x444>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d04a      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2d      	ldr	r2, [pc, #180]	; (8005ab0 <HAL_DMA_Abort+0x448>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d045      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2c      	ldr	r2, [pc, #176]	; (8005ab4 <HAL_DMA_Abort+0x44c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d040      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2a      	ldr	r2, [pc, #168]	; (8005ab8 <HAL_DMA_Abort+0x450>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d03b      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a29      	ldr	r2, [pc, #164]	; (8005abc <HAL_DMA_Abort+0x454>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d036      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a27      	ldr	r2, [pc, #156]	; (8005ac0 <HAL_DMA_Abort+0x458>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d031      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a26      	ldr	r2, [pc, #152]	; (8005ac4 <HAL_DMA_Abort+0x45c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d02c      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a24      	ldr	r2, [pc, #144]	; (8005ac8 <HAL_DMA_Abort+0x460>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d027      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a23      	ldr	r2, [pc, #140]	; (8005acc <HAL_DMA_Abort+0x464>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d022      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a21      	ldr	r2, [pc, #132]	; (8005ad0 <HAL_DMA_Abort+0x468>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01d      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a20      	ldr	r2, [pc, #128]	; (8005ad4 <HAL_DMA_Abort+0x46c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d018      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1e      	ldr	r2, [pc, #120]	; (8005ad8 <HAL_DMA_Abort+0x470>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <HAL_DMA_Abort+0x474>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00e      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1b      	ldr	r2, [pc, #108]	; (8005ae0 <HAL_DMA_Abort+0x478>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <HAL_DMA_Abort+0x47c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_DMA_Abort+0x422>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <HAL_DMA_Abort+0x480>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d101      	bne.n	8005a8e <HAL_DMA_Abort+0x426>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <HAL_DMA_Abort+0x428>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d02b      	beq.n	8005aec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a98:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	223f      	movs	r2, #63	; 0x3f
 8005aa4:	409a      	lsls	r2, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	609a      	str	r2, [r3, #8]
 8005aaa:	e02a      	b.n	8005b02 <HAL_DMA_Abort+0x49a>
 8005aac:	40020010 	.word	0x40020010
 8005ab0:	40020028 	.word	0x40020028
 8005ab4:	40020040 	.word	0x40020040
 8005ab8:	40020058 	.word	0x40020058
 8005abc:	40020070 	.word	0x40020070
 8005ac0:	40020088 	.word	0x40020088
 8005ac4:	400200a0 	.word	0x400200a0
 8005ac8:	400200b8 	.word	0x400200b8
 8005acc:	40020410 	.word	0x40020410
 8005ad0:	40020428 	.word	0x40020428
 8005ad4:	40020440 	.word	0x40020440
 8005ad8:	40020458 	.word	0x40020458
 8005adc:	40020470 	.word	0x40020470
 8005ae0:	40020488 	.word	0x40020488
 8005ae4:	400204a0 	.word	0x400204a0
 8005ae8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2201      	movs	r2, #1
 8005afc:	409a      	lsls	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a4f      	ldr	r2, [pc, #316]	; (8005c44 <HAL_DMA_Abort+0x5dc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d072      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a4d      	ldr	r2, [pc, #308]	; (8005c48 <HAL_DMA_Abort+0x5e0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d06d      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a4c      	ldr	r2, [pc, #304]	; (8005c4c <HAL_DMA_Abort+0x5e4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d068      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a4a      	ldr	r2, [pc, #296]	; (8005c50 <HAL_DMA_Abort+0x5e8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d063      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a49      	ldr	r2, [pc, #292]	; (8005c54 <HAL_DMA_Abort+0x5ec>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d05e      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a47      	ldr	r2, [pc, #284]	; (8005c58 <HAL_DMA_Abort+0x5f0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d059      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a46      	ldr	r2, [pc, #280]	; (8005c5c <HAL_DMA_Abort+0x5f4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d054      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a44      	ldr	r2, [pc, #272]	; (8005c60 <HAL_DMA_Abort+0x5f8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d04f      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a43      	ldr	r2, [pc, #268]	; (8005c64 <HAL_DMA_Abort+0x5fc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d04a      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a41      	ldr	r2, [pc, #260]	; (8005c68 <HAL_DMA_Abort+0x600>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d045      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a40      	ldr	r2, [pc, #256]	; (8005c6c <HAL_DMA_Abort+0x604>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d040      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a3e      	ldr	r2, [pc, #248]	; (8005c70 <HAL_DMA_Abort+0x608>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d03b      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a3d      	ldr	r2, [pc, #244]	; (8005c74 <HAL_DMA_Abort+0x60c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d036      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3b      	ldr	r2, [pc, #236]	; (8005c78 <HAL_DMA_Abort+0x610>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d031      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a3a      	ldr	r2, [pc, #232]	; (8005c7c <HAL_DMA_Abort+0x614>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d02c      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a38      	ldr	r2, [pc, #224]	; (8005c80 <HAL_DMA_Abort+0x618>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d027      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a37      	ldr	r2, [pc, #220]	; (8005c84 <HAL_DMA_Abort+0x61c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d022      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a35      	ldr	r2, [pc, #212]	; (8005c88 <HAL_DMA_Abort+0x620>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a34      	ldr	r2, [pc, #208]	; (8005c8c <HAL_DMA_Abort+0x624>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d018      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a32      	ldr	r2, [pc, #200]	; (8005c90 <HAL_DMA_Abort+0x628>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d013      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a31      	ldr	r2, [pc, #196]	; (8005c94 <HAL_DMA_Abort+0x62c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00e      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a2f      	ldr	r2, [pc, #188]	; (8005c98 <HAL_DMA_Abort+0x630>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d009      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a2e      	ldr	r2, [pc, #184]	; (8005c9c <HAL_DMA_Abort+0x634>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d004      	beq.n	8005bf2 <HAL_DMA_Abort+0x58a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a2c      	ldr	r2, [pc, #176]	; (8005ca0 <HAL_DMA_Abort+0x638>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d101      	bne.n	8005bf6 <HAL_DMA_Abort+0x58e>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <HAL_DMA_Abort+0x590>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d015      	beq.n	8005c28 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c04:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00c      	beq.n	8005c28 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c1c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c26:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40020010 	.word	0x40020010
 8005c48:	40020028 	.word	0x40020028
 8005c4c:	40020040 	.word	0x40020040
 8005c50:	40020058 	.word	0x40020058
 8005c54:	40020070 	.word	0x40020070
 8005c58:	40020088 	.word	0x40020088
 8005c5c:	400200a0 	.word	0x400200a0
 8005c60:	400200b8 	.word	0x400200b8
 8005c64:	40020410 	.word	0x40020410
 8005c68:	40020428 	.word	0x40020428
 8005c6c:	40020440 	.word	0x40020440
 8005c70:	40020458 	.word	0x40020458
 8005c74:	40020470 	.word	0x40020470
 8005c78:	40020488 	.word	0x40020488
 8005c7c:	400204a0 	.word	0x400204a0
 8005c80:	400204b8 	.word	0x400204b8
 8005c84:	58025408 	.word	0x58025408
 8005c88:	5802541c 	.word	0x5802541c
 8005c8c:	58025430 	.word	0x58025430
 8005c90:	58025444 	.word	0x58025444
 8005c94:	58025458 	.word	0x58025458
 8005c98:	5802546c 	.word	0x5802546c
 8005c9c:	58025480 	.word	0x58025480
 8005ca0:	58025494 	.word	0x58025494

08005ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e237      	b.n	8006126 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d004      	beq.n	8005ccc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2280      	movs	r2, #128	; 0x80
 8005cc6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e22c      	b.n	8006126 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a5c      	ldr	r2, [pc, #368]	; (8005e44 <HAL_DMA_Abort_IT+0x1a0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d04a      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a5b      	ldr	r2, [pc, #364]	; (8005e48 <HAL_DMA_Abort_IT+0x1a4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d045      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a59      	ldr	r2, [pc, #356]	; (8005e4c <HAL_DMA_Abort_IT+0x1a8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d040      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a58      	ldr	r2, [pc, #352]	; (8005e50 <HAL_DMA_Abort_IT+0x1ac>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d03b      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a56      	ldr	r2, [pc, #344]	; (8005e54 <HAL_DMA_Abort_IT+0x1b0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d036      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a55      	ldr	r2, [pc, #340]	; (8005e58 <HAL_DMA_Abort_IT+0x1b4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d031      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a53      	ldr	r2, [pc, #332]	; (8005e5c <HAL_DMA_Abort_IT+0x1b8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d02c      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a52      	ldr	r2, [pc, #328]	; (8005e60 <HAL_DMA_Abort_IT+0x1bc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d027      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a50      	ldr	r2, [pc, #320]	; (8005e64 <HAL_DMA_Abort_IT+0x1c0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d022      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a4f      	ldr	r2, [pc, #316]	; (8005e68 <HAL_DMA_Abort_IT+0x1c4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d01d      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a4d      	ldr	r2, [pc, #308]	; (8005e6c <HAL_DMA_Abort_IT+0x1c8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d018      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a4c      	ldr	r2, [pc, #304]	; (8005e70 <HAL_DMA_Abort_IT+0x1cc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a4a      	ldr	r2, [pc, #296]	; (8005e74 <HAL_DMA_Abort_IT+0x1d0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00e      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a49      	ldr	r2, [pc, #292]	; (8005e78 <HAL_DMA_Abort_IT+0x1d4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d009      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a47      	ldr	r2, [pc, #284]	; (8005e7c <HAL_DMA_Abort_IT+0x1d8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_DMA_Abort_IT+0xc8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a46      	ldr	r2, [pc, #280]	; (8005e80 <HAL_DMA_Abort_IT+0x1dc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d101      	bne.n	8005d70 <HAL_DMA_Abort_IT+0xcc>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <HAL_DMA_Abort_IT+0xce>
 8005d70:	2300      	movs	r3, #0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 8086 	beq.w	8005e84 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a2f      	ldr	r2, [pc, #188]	; (8005e44 <HAL_DMA_Abort_IT+0x1a0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d04a      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a2e      	ldr	r2, [pc, #184]	; (8005e48 <HAL_DMA_Abort_IT+0x1a4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d045      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2c      	ldr	r2, [pc, #176]	; (8005e4c <HAL_DMA_Abort_IT+0x1a8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d040      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2b      	ldr	r2, [pc, #172]	; (8005e50 <HAL_DMA_Abort_IT+0x1ac>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d03b      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a29      	ldr	r2, [pc, #164]	; (8005e54 <HAL_DMA_Abort_IT+0x1b0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d036      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <HAL_DMA_Abort_IT+0x1b4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d031      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a26      	ldr	r2, [pc, #152]	; (8005e5c <HAL_DMA_Abort_IT+0x1b8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d02c      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a25      	ldr	r2, [pc, #148]	; (8005e60 <HAL_DMA_Abort_IT+0x1bc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d027      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a23      	ldr	r2, [pc, #140]	; (8005e64 <HAL_DMA_Abort_IT+0x1c0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d022      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a22      	ldr	r2, [pc, #136]	; (8005e68 <HAL_DMA_Abort_IT+0x1c4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d01d      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a20      	ldr	r2, [pc, #128]	; (8005e6c <HAL_DMA_Abort_IT+0x1c8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d018      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <HAL_DMA_Abort_IT+0x1cc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d013      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1d      	ldr	r2, [pc, #116]	; (8005e74 <HAL_DMA_Abort_IT+0x1d0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00e      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <HAL_DMA_Abort_IT+0x1d4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d009      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1a      	ldr	r2, [pc, #104]	; (8005e7c <HAL_DMA_Abort_IT+0x1d8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x17c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a19      	ldr	r2, [pc, #100]	; (8005e80 <HAL_DMA_Abort_IT+0x1dc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d108      	bne.n	8005e32 <HAL_DMA_Abort_IT+0x18e>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0201 	bic.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e178      	b.n	8006124 <HAL_DMA_Abort_IT+0x480>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e16f      	b.n	8006124 <HAL_DMA_Abort_IT+0x480>
 8005e44:	40020010 	.word	0x40020010
 8005e48:	40020028 	.word	0x40020028
 8005e4c:	40020040 	.word	0x40020040
 8005e50:	40020058 	.word	0x40020058
 8005e54:	40020070 	.word	0x40020070
 8005e58:	40020088 	.word	0x40020088
 8005e5c:	400200a0 	.word	0x400200a0
 8005e60:	400200b8 	.word	0x400200b8
 8005e64:	40020410 	.word	0x40020410
 8005e68:	40020428 	.word	0x40020428
 8005e6c:	40020440 	.word	0x40020440
 8005e70:	40020458 	.word	0x40020458
 8005e74:	40020470 	.word	0x40020470
 8005e78:	40020488 	.word	0x40020488
 8005e7c:	400204a0 	.word	0x400204a0
 8005e80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 020e 	bic.w	r2, r2, #14
 8005e92:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a6c      	ldr	r2, [pc, #432]	; (800604c <HAL_DMA_Abort_IT+0x3a8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d04a      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a6b      	ldr	r2, [pc, #428]	; (8006050 <HAL_DMA_Abort_IT+0x3ac>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d045      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a69      	ldr	r2, [pc, #420]	; (8006054 <HAL_DMA_Abort_IT+0x3b0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d040      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a68      	ldr	r2, [pc, #416]	; (8006058 <HAL_DMA_Abort_IT+0x3b4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d03b      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a66      	ldr	r2, [pc, #408]	; (800605c <HAL_DMA_Abort_IT+0x3b8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d036      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a65      	ldr	r2, [pc, #404]	; (8006060 <HAL_DMA_Abort_IT+0x3bc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d031      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a63      	ldr	r2, [pc, #396]	; (8006064 <HAL_DMA_Abort_IT+0x3c0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d02c      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a62      	ldr	r2, [pc, #392]	; (8006068 <HAL_DMA_Abort_IT+0x3c4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d027      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a60      	ldr	r2, [pc, #384]	; (800606c <HAL_DMA_Abort_IT+0x3c8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d022      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a5f      	ldr	r2, [pc, #380]	; (8006070 <HAL_DMA_Abort_IT+0x3cc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d01d      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a5d      	ldr	r2, [pc, #372]	; (8006074 <HAL_DMA_Abort_IT+0x3d0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d018      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a5c      	ldr	r2, [pc, #368]	; (8006078 <HAL_DMA_Abort_IT+0x3d4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d013      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a5a      	ldr	r2, [pc, #360]	; (800607c <HAL_DMA_Abort_IT+0x3d8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00e      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a59      	ldr	r2, [pc, #356]	; (8006080 <HAL_DMA_Abort_IT+0x3dc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d009      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a57      	ldr	r2, [pc, #348]	; (8006084 <HAL_DMA_Abort_IT+0x3e0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d004      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x290>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a56      	ldr	r2, [pc, #344]	; (8006088 <HAL_DMA_Abort_IT+0x3e4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d108      	bne.n	8005f46 <HAL_DMA_Abort_IT+0x2a2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0201 	bic.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e007      	b.n	8005f56 <HAL_DMA_Abort_IT+0x2b2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a3c      	ldr	r2, [pc, #240]	; (800604c <HAL_DMA_Abort_IT+0x3a8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d072      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a3a      	ldr	r2, [pc, #232]	; (8006050 <HAL_DMA_Abort_IT+0x3ac>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d06d      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a39      	ldr	r2, [pc, #228]	; (8006054 <HAL_DMA_Abort_IT+0x3b0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d068      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a37      	ldr	r2, [pc, #220]	; (8006058 <HAL_DMA_Abort_IT+0x3b4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d063      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a36      	ldr	r2, [pc, #216]	; (800605c <HAL_DMA_Abort_IT+0x3b8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d05e      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a34      	ldr	r2, [pc, #208]	; (8006060 <HAL_DMA_Abort_IT+0x3bc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d059      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a33      	ldr	r2, [pc, #204]	; (8006064 <HAL_DMA_Abort_IT+0x3c0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d054      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a31      	ldr	r2, [pc, #196]	; (8006068 <HAL_DMA_Abort_IT+0x3c4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d04f      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a30      	ldr	r2, [pc, #192]	; (800606c <HAL_DMA_Abort_IT+0x3c8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d04a      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a2e      	ldr	r2, [pc, #184]	; (8006070 <HAL_DMA_Abort_IT+0x3cc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d045      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a2d      	ldr	r2, [pc, #180]	; (8006074 <HAL_DMA_Abort_IT+0x3d0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d040      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2b      	ldr	r2, [pc, #172]	; (8006078 <HAL_DMA_Abort_IT+0x3d4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d03b      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2a      	ldr	r2, [pc, #168]	; (800607c <HAL_DMA_Abort_IT+0x3d8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d036      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a28      	ldr	r2, [pc, #160]	; (8006080 <HAL_DMA_Abort_IT+0x3dc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d031      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a27      	ldr	r2, [pc, #156]	; (8006084 <HAL_DMA_Abort_IT+0x3e0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d02c      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a25      	ldr	r2, [pc, #148]	; (8006088 <HAL_DMA_Abort_IT+0x3e4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d027      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a24      	ldr	r2, [pc, #144]	; (800608c <HAL_DMA_Abort_IT+0x3e8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d022      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a22      	ldr	r2, [pc, #136]	; (8006090 <HAL_DMA_Abort_IT+0x3ec>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01d      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a21      	ldr	r2, [pc, #132]	; (8006094 <HAL_DMA_Abort_IT+0x3f0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d018      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1f      	ldr	r2, [pc, #124]	; (8006098 <HAL_DMA_Abort_IT+0x3f4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1e      	ldr	r2, [pc, #120]	; (800609c <HAL_DMA_Abort_IT+0x3f8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00e      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1c      	ldr	r2, [pc, #112]	; (80060a0 <HAL_DMA_Abort_IT+0x3fc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d009      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1b      	ldr	r2, [pc, #108]	; (80060a4 <HAL_DMA_Abort_IT+0x400>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d004      	beq.n	8006046 <HAL_DMA_Abort_IT+0x3a2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a19      	ldr	r2, [pc, #100]	; (80060a8 <HAL_DMA_Abort_IT+0x404>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d132      	bne.n	80060ac <HAL_DMA_Abort_IT+0x408>
 8006046:	2301      	movs	r3, #1
 8006048:	e031      	b.n	80060ae <HAL_DMA_Abort_IT+0x40a>
 800604a:	bf00      	nop
 800604c:	40020010 	.word	0x40020010
 8006050:	40020028 	.word	0x40020028
 8006054:	40020040 	.word	0x40020040
 8006058:	40020058 	.word	0x40020058
 800605c:	40020070 	.word	0x40020070
 8006060:	40020088 	.word	0x40020088
 8006064:	400200a0 	.word	0x400200a0
 8006068:	400200b8 	.word	0x400200b8
 800606c:	40020410 	.word	0x40020410
 8006070:	40020428 	.word	0x40020428
 8006074:	40020440 	.word	0x40020440
 8006078:	40020458 	.word	0x40020458
 800607c:	40020470 	.word	0x40020470
 8006080:	40020488 	.word	0x40020488
 8006084:	400204a0 	.word	0x400204a0
 8006088:	400204b8 	.word	0x400204b8
 800608c:	58025408 	.word	0x58025408
 8006090:	5802541c 	.word	0x5802541c
 8006094:	58025430 	.word	0x58025430
 8006098:	58025444 	.word	0x58025444
 800609c:	58025458 	.word	0x58025458
 80060a0:	5802546c 	.word	0x5802546c
 80060a4:	58025480 	.word	0x58025480
 80060a8:	58025494 	.word	0x58025494
 80060ac:	2300      	movs	r3, #0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d028      	beq.n	8006104 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060c0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	2201      	movs	r2, #1
 80060d2:	409a      	lsls	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060e0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00c      	beq.n	8006104 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060f8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006102:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop

08006130 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800613c:	4b67      	ldr	r3, [pc, #412]	; (80062dc <HAL_DMA_IRQHandler+0x1ac>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a67      	ldr	r2, [pc, #412]	; (80062e0 <HAL_DMA_IRQHandler+0x1b0>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	0a9b      	lsrs	r3, r3, #10
 8006148:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006154:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a5f      	ldr	r2, [pc, #380]	; (80062e4 <HAL_DMA_IRQHandler+0x1b4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d04a      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a5d      	ldr	r2, [pc, #372]	; (80062e8 <HAL_DMA_IRQHandler+0x1b8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d045      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a5c      	ldr	r2, [pc, #368]	; (80062ec <HAL_DMA_IRQHandler+0x1bc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d040      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a5a      	ldr	r2, [pc, #360]	; (80062f0 <HAL_DMA_IRQHandler+0x1c0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d03b      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a59      	ldr	r2, [pc, #356]	; (80062f4 <HAL_DMA_IRQHandler+0x1c4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d036      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a57      	ldr	r2, [pc, #348]	; (80062f8 <HAL_DMA_IRQHandler+0x1c8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d031      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a56      	ldr	r2, [pc, #344]	; (80062fc <HAL_DMA_IRQHandler+0x1cc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d02c      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a54      	ldr	r2, [pc, #336]	; (8006300 <HAL_DMA_IRQHandler+0x1d0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d027      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a53      	ldr	r2, [pc, #332]	; (8006304 <HAL_DMA_IRQHandler+0x1d4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d022      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a51      	ldr	r2, [pc, #324]	; (8006308 <HAL_DMA_IRQHandler+0x1d8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01d      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a50      	ldr	r2, [pc, #320]	; (800630c <HAL_DMA_IRQHandler+0x1dc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d018      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a4e      	ldr	r2, [pc, #312]	; (8006310 <HAL_DMA_IRQHandler+0x1e0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a4d      	ldr	r2, [pc, #308]	; (8006314 <HAL_DMA_IRQHandler+0x1e4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00e      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a4b      	ldr	r2, [pc, #300]	; (8006318 <HAL_DMA_IRQHandler+0x1e8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d009      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a4a      	ldr	r2, [pc, #296]	; (800631c <HAL_DMA_IRQHandler+0x1ec>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d004      	beq.n	8006202 <HAL_DMA_IRQHandler+0xd2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a48      	ldr	r2, [pc, #288]	; (8006320 <HAL_DMA_IRQHandler+0x1f0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d101      	bne.n	8006206 <HAL_DMA_IRQHandler+0xd6>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <HAL_DMA_IRQHandler+0xd8>
 8006206:	2300      	movs	r3, #0
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 842b 	beq.w	8006a64 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006212:	f003 031f 	and.w	r3, r3, #31
 8006216:	2208      	movs	r2, #8
 8006218:	409a      	lsls	r2, r3
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	4013      	ands	r3, r2
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80a2 	beq.w	8006368 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a2e      	ldr	r2, [pc, #184]	; (80062e4 <HAL_DMA_IRQHandler+0x1b4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d04a      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a2d      	ldr	r2, [pc, #180]	; (80062e8 <HAL_DMA_IRQHandler+0x1b8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d045      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a2b      	ldr	r2, [pc, #172]	; (80062ec <HAL_DMA_IRQHandler+0x1bc>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d040      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a2a      	ldr	r2, [pc, #168]	; (80062f0 <HAL_DMA_IRQHandler+0x1c0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d03b      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a28      	ldr	r2, [pc, #160]	; (80062f4 <HAL_DMA_IRQHandler+0x1c4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d036      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a27      	ldr	r2, [pc, #156]	; (80062f8 <HAL_DMA_IRQHandler+0x1c8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d031      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a25      	ldr	r2, [pc, #148]	; (80062fc <HAL_DMA_IRQHandler+0x1cc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d02c      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a24      	ldr	r2, [pc, #144]	; (8006300 <HAL_DMA_IRQHandler+0x1d0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d027      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a22      	ldr	r2, [pc, #136]	; (8006304 <HAL_DMA_IRQHandler+0x1d4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d022      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a21      	ldr	r2, [pc, #132]	; (8006308 <HAL_DMA_IRQHandler+0x1d8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d01d      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1f      	ldr	r2, [pc, #124]	; (800630c <HAL_DMA_IRQHandler+0x1dc>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d018      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <HAL_DMA_IRQHandler+0x1e0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1c      	ldr	r2, [pc, #112]	; (8006314 <HAL_DMA_IRQHandler+0x1e4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00e      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <HAL_DMA_IRQHandler+0x1e8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d009      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a19      	ldr	r2, [pc, #100]	; (800631c <HAL_DMA_IRQHandler+0x1ec>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d004      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x194>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a18      	ldr	r2, [pc, #96]	; (8006320 <HAL_DMA_IRQHandler+0x1f0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d12f      	bne.n	8006324 <HAL_DMA_IRQHandler+0x1f4>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	bf14      	ite	ne
 80062d2:	2301      	movne	r3, #1
 80062d4:	2300      	moveq	r3, #0
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	e02e      	b.n	8006338 <HAL_DMA_IRQHandler+0x208>
 80062da:	bf00      	nop
 80062dc:	24000004 	.word	0x24000004
 80062e0:	1b4e81b5 	.word	0x1b4e81b5
 80062e4:	40020010 	.word	0x40020010
 80062e8:	40020028 	.word	0x40020028
 80062ec:	40020040 	.word	0x40020040
 80062f0:	40020058 	.word	0x40020058
 80062f4:	40020070 	.word	0x40020070
 80062f8:	40020088 	.word	0x40020088
 80062fc:	400200a0 	.word	0x400200a0
 8006300:	400200b8 	.word	0x400200b8
 8006304:	40020410 	.word	0x40020410
 8006308:	40020428 	.word	0x40020428
 800630c:	40020440 	.word	0x40020440
 8006310:	40020458 	.word	0x40020458
 8006314:	40020470 	.word	0x40020470
 8006318:	40020488 	.word	0x40020488
 800631c:	400204a0 	.word	0x400204a0
 8006320:	400204b8 	.word	0x400204b8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b00      	cmp	r3, #0
 8006330:	bf14      	ite	ne
 8006332:	2301      	movne	r3, #1
 8006334:	2300      	moveq	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d015      	beq.n	8006368 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0204 	bic.w	r2, r2, #4
 800634a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006350:	f003 031f 	and.w	r3, r3, #31
 8006354:	2208      	movs	r2, #8
 8006356:	409a      	lsls	r2, r3
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006360:	f043 0201 	orr.w	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	fa22 f303 	lsr.w	r3, r2, r3
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d06e      	beq.n	800645c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a69      	ldr	r2, [pc, #420]	; (8006528 <HAL_DMA_IRQHandler+0x3f8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d04a      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a67      	ldr	r2, [pc, #412]	; (800652c <HAL_DMA_IRQHandler+0x3fc>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d045      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a66      	ldr	r2, [pc, #408]	; (8006530 <HAL_DMA_IRQHandler+0x400>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d040      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a64      	ldr	r2, [pc, #400]	; (8006534 <HAL_DMA_IRQHandler+0x404>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d03b      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a63      	ldr	r2, [pc, #396]	; (8006538 <HAL_DMA_IRQHandler+0x408>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d036      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a61      	ldr	r2, [pc, #388]	; (800653c <HAL_DMA_IRQHandler+0x40c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d031      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a60      	ldr	r2, [pc, #384]	; (8006540 <HAL_DMA_IRQHandler+0x410>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d02c      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a5e      	ldr	r2, [pc, #376]	; (8006544 <HAL_DMA_IRQHandler+0x414>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d027      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a5d      	ldr	r2, [pc, #372]	; (8006548 <HAL_DMA_IRQHandler+0x418>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d022      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a5b      	ldr	r2, [pc, #364]	; (800654c <HAL_DMA_IRQHandler+0x41c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01d      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a5a      	ldr	r2, [pc, #360]	; (8006550 <HAL_DMA_IRQHandler+0x420>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d018      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a58      	ldr	r2, [pc, #352]	; (8006554 <HAL_DMA_IRQHandler+0x424>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a57      	ldr	r2, [pc, #348]	; (8006558 <HAL_DMA_IRQHandler+0x428>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00e      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a55      	ldr	r2, [pc, #340]	; (800655c <HAL_DMA_IRQHandler+0x42c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d009      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a54      	ldr	r2, [pc, #336]	; (8006560 <HAL_DMA_IRQHandler+0x430>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_DMA_IRQHandler+0x2ee>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a52      	ldr	r2, [pc, #328]	; (8006564 <HAL_DMA_IRQHandler+0x434>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d10a      	bne.n	8006434 <HAL_DMA_IRQHandler+0x304>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006428:	2b00      	cmp	r3, #0
 800642a:	bf14      	ite	ne
 800642c:	2301      	movne	r3, #1
 800642e:	2300      	moveq	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	e003      	b.n	800643c <HAL_DMA_IRQHandler+0x30c>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2300      	movs	r3, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00d      	beq.n	800645c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	2201      	movs	r2, #1
 800644a:	409a      	lsls	r2, r3
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006454:	f043 0202 	orr.w	r2, r3, #2
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006460:	f003 031f 	and.w	r3, r3, #31
 8006464:	2204      	movs	r2, #4
 8006466:	409a      	lsls	r2, r3
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 808f 	beq.w	8006590 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2c      	ldr	r2, [pc, #176]	; (8006528 <HAL_DMA_IRQHandler+0x3f8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d04a      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a2a      	ldr	r2, [pc, #168]	; (800652c <HAL_DMA_IRQHandler+0x3fc>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d045      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a29      	ldr	r2, [pc, #164]	; (8006530 <HAL_DMA_IRQHandler+0x400>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d040      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a27      	ldr	r2, [pc, #156]	; (8006534 <HAL_DMA_IRQHandler+0x404>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d03b      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a26      	ldr	r2, [pc, #152]	; (8006538 <HAL_DMA_IRQHandler+0x408>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d036      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a24      	ldr	r2, [pc, #144]	; (800653c <HAL_DMA_IRQHandler+0x40c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d031      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a23      	ldr	r2, [pc, #140]	; (8006540 <HAL_DMA_IRQHandler+0x410>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d02c      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a21      	ldr	r2, [pc, #132]	; (8006544 <HAL_DMA_IRQHandler+0x414>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d027      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a20      	ldr	r2, [pc, #128]	; (8006548 <HAL_DMA_IRQHandler+0x418>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d022      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1e      	ldr	r2, [pc, #120]	; (800654c <HAL_DMA_IRQHandler+0x41c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d01d      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1d      	ldr	r2, [pc, #116]	; (8006550 <HAL_DMA_IRQHandler+0x420>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d018      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1b      	ldr	r2, [pc, #108]	; (8006554 <HAL_DMA_IRQHandler+0x424>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d013      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1a      	ldr	r2, [pc, #104]	; (8006558 <HAL_DMA_IRQHandler+0x428>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00e      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a18      	ldr	r2, [pc, #96]	; (800655c <HAL_DMA_IRQHandler+0x42c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d009      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a17      	ldr	r2, [pc, #92]	; (8006560 <HAL_DMA_IRQHandler+0x430>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <HAL_DMA_IRQHandler+0x3e2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a15      	ldr	r2, [pc, #84]	; (8006564 <HAL_DMA_IRQHandler+0x434>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d12a      	bne.n	8006568 <HAL_DMA_IRQHandler+0x438>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	bf14      	ite	ne
 8006520:	2301      	movne	r3, #1
 8006522:	2300      	moveq	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	e023      	b.n	8006570 <HAL_DMA_IRQHandler+0x440>
 8006528:	40020010 	.word	0x40020010
 800652c:	40020028 	.word	0x40020028
 8006530:	40020040 	.word	0x40020040
 8006534:	40020058 	.word	0x40020058
 8006538:	40020070 	.word	0x40020070
 800653c:	40020088 	.word	0x40020088
 8006540:	400200a0 	.word	0x400200a0
 8006544:	400200b8 	.word	0x400200b8
 8006548:	40020410 	.word	0x40020410
 800654c:	40020428 	.word	0x40020428
 8006550:	40020440 	.word	0x40020440
 8006554:	40020458 	.word	0x40020458
 8006558:	40020470 	.word	0x40020470
 800655c:	40020488 	.word	0x40020488
 8006560:	400204a0 	.word	0x400204a0
 8006564:	400204b8 	.word	0x400204b8
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2300      	movs	r3, #0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00d      	beq.n	8006590 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	2204      	movs	r2, #4
 800657e:	409a      	lsls	r2, r3
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006588:	f043 0204 	orr.w	r2, r3, #4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006594:	f003 031f 	and.w	r3, r3, #31
 8006598:	2210      	movs	r2, #16
 800659a:	409a      	lsls	r2, r3
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80a6 	beq.w	80066f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a85      	ldr	r2, [pc, #532]	; (80067c0 <HAL_DMA_IRQHandler+0x690>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d04a      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a83      	ldr	r2, [pc, #524]	; (80067c4 <HAL_DMA_IRQHandler+0x694>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d045      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a82      	ldr	r2, [pc, #520]	; (80067c8 <HAL_DMA_IRQHandler+0x698>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d040      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a80      	ldr	r2, [pc, #512]	; (80067cc <HAL_DMA_IRQHandler+0x69c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d03b      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a7f      	ldr	r2, [pc, #508]	; (80067d0 <HAL_DMA_IRQHandler+0x6a0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d036      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a7d      	ldr	r2, [pc, #500]	; (80067d4 <HAL_DMA_IRQHandler+0x6a4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d031      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a7c      	ldr	r2, [pc, #496]	; (80067d8 <HAL_DMA_IRQHandler+0x6a8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d02c      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a7a      	ldr	r2, [pc, #488]	; (80067dc <HAL_DMA_IRQHandler+0x6ac>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d027      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a79      	ldr	r2, [pc, #484]	; (80067e0 <HAL_DMA_IRQHandler+0x6b0>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d022      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a77      	ldr	r2, [pc, #476]	; (80067e4 <HAL_DMA_IRQHandler+0x6b4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01d      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a76      	ldr	r2, [pc, #472]	; (80067e8 <HAL_DMA_IRQHandler+0x6b8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d018      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a74      	ldr	r2, [pc, #464]	; (80067ec <HAL_DMA_IRQHandler+0x6bc>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d013      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a73      	ldr	r2, [pc, #460]	; (80067f0 <HAL_DMA_IRQHandler+0x6c0>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00e      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a71      	ldr	r2, [pc, #452]	; (80067f4 <HAL_DMA_IRQHandler+0x6c4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d009      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a70      	ldr	r2, [pc, #448]	; (80067f8 <HAL_DMA_IRQHandler+0x6c8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_DMA_IRQHandler+0x516>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a6e      	ldr	r2, [pc, #440]	; (80067fc <HAL_DMA_IRQHandler+0x6cc>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d10a      	bne.n	800665c <HAL_DMA_IRQHandler+0x52c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b00      	cmp	r3, #0
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	e009      	b.n	8006670 <HAL_DMA_IRQHandler+0x540>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf14      	ite	ne
 800666a:	2301      	movne	r3, #1
 800666c:	2300      	moveq	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d03e      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	2210      	movs	r2, #16
 800667e:	409a      	lsls	r2, r3
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d018      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d108      	bne.n	80066b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d024      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
 80066b0:	e01f      	b.n	80066f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01b      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
 80066c2:	e016      	b.n	80066f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d107      	bne.n	80066e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0208 	bic.w	r2, r2, #8
 80066e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f6:	f003 031f 	and.w	r3, r3, #31
 80066fa:	2220      	movs	r2, #32
 80066fc:	409a      	lsls	r2, r3
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	4013      	ands	r3, r2
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 8110 	beq.w	8006928 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a2c      	ldr	r2, [pc, #176]	; (80067c0 <HAL_DMA_IRQHandler+0x690>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d04a      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a2b      	ldr	r2, [pc, #172]	; (80067c4 <HAL_DMA_IRQHandler+0x694>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d045      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <HAL_DMA_IRQHandler+0x698>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d040      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a28      	ldr	r2, [pc, #160]	; (80067cc <HAL_DMA_IRQHandler+0x69c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d03b      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a26      	ldr	r2, [pc, #152]	; (80067d0 <HAL_DMA_IRQHandler+0x6a0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d036      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a25      	ldr	r2, [pc, #148]	; (80067d4 <HAL_DMA_IRQHandler+0x6a4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d031      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a23      	ldr	r2, [pc, #140]	; (80067d8 <HAL_DMA_IRQHandler+0x6a8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d02c      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a22      	ldr	r2, [pc, #136]	; (80067dc <HAL_DMA_IRQHandler+0x6ac>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d027      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <HAL_DMA_IRQHandler+0x6b0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d022      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a1f      	ldr	r2, [pc, #124]	; (80067e4 <HAL_DMA_IRQHandler+0x6b4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d01d      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <HAL_DMA_IRQHandler+0x6b8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d018      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <HAL_DMA_IRQHandler+0x6bc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d013      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1a      	ldr	r2, [pc, #104]	; (80067f0 <HAL_DMA_IRQHandler+0x6c0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00e      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a19      	ldr	r2, [pc, #100]	; (80067f4 <HAL_DMA_IRQHandler+0x6c4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d009      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <HAL_DMA_IRQHandler+0x6c8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x678>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a16      	ldr	r2, [pc, #88]	; (80067fc <HAL_DMA_IRQHandler+0x6cc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d12b      	bne.n	8006800 <HAL_DMA_IRQHandler+0x6d0>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0310 	and.w	r3, r3, #16
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bf14      	ite	ne
 80067b6:	2301      	movne	r3, #1
 80067b8:	2300      	moveq	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	e02a      	b.n	8006814 <HAL_DMA_IRQHandler+0x6e4>
 80067be:	bf00      	nop
 80067c0:	40020010 	.word	0x40020010
 80067c4:	40020028 	.word	0x40020028
 80067c8:	40020040 	.word	0x40020040
 80067cc:	40020058 	.word	0x40020058
 80067d0:	40020070 	.word	0x40020070
 80067d4:	40020088 	.word	0x40020088
 80067d8:	400200a0 	.word	0x400200a0
 80067dc:	400200b8 	.word	0x400200b8
 80067e0:	40020410 	.word	0x40020410
 80067e4:	40020428 	.word	0x40020428
 80067e8:	40020440 	.word	0x40020440
 80067ec:	40020458 	.word	0x40020458
 80067f0:	40020470 	.word	0x40020470
 80067f4:	40020488 	.word	0x40020488
 80067f8:	400204a0 	.word	0x400204a0
 80067fc:	400204b8 	.word	0x400204b8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	bf14      	ite	ne
 800680e:	2301      	movne	r3, #1
 8006810:	2300      	moveq	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8087 	beq.w	8006928 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2220      	movs	r2, #32
 8006824:	409a      	lsls	r2, r3
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b04      	cmp	r3, #4
 8006834:	d139      	bne.n	80068aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0216 	bic.w	r2, r2, #22
 8006844:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695a      	ldr	r2, [r3, #20]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006854:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <HAL_DMA_IRQHandler+0x736>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006862:	2b00      	cmp	r3, #0
 8006864:	d007      	beq.n	8006876 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0208 	bic.w	r2, r2, #8
 8006874:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	223f      	movs	r2, #63	; 0x3f
 8006880:	409a      	lsls	r2, r3
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 834a 	beq.w	8006f34 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	4798      	blx	r3
          }
          return;
 80068a8:	e344      	b.n	8006f34 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d018      	beq.n	80068ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d108      	bne.n	80068d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d02c      	beq.n	8006928 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
 80068d6:	e027      	b.n	8006928 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d023      	beq.n	8006928 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
 80068e8:	e01e      	b.n	8006928 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10f      	bne.n	8006918 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0210 	bic.w	r2, r2, #16
 8006906:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 8306 	beq.w	8006f3e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 8088 	beq.w	8006a50 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2204      	movs	r2, #4
 8006944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a7a      	ldr	r2, [pc, #488]	; (8006b38 <HAL_DMA_IRQHandler+0xa08>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d04a      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a79      	ldr	r2, [pc, #484]	; (8006b3c <HAL_DMA_IRQHandler+0xa0c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d045      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a77      	ldr	r2, [pc, #476]	; (8006b40 <HAL_DMA_IRQHandler+0xa10>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d040      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a76      	ldr	r2, [pc, #472]	; (8006b44 <HAL_DMA_IRQHandler+0xa14>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d03b      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a74      	ldr	r2, [pc, #464]	; (8006b48 <HAL_DMA_IRQHandler+0xa18>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d036      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a73      	ldr	r2, [pc, #460]	; (8006b4c <HAL_DMA_IRQHandler+0xa1c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d031      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a71      	ldr	r2, [pc, #452]	; (8006b50 <HAL_DMA_IRQHandler+0xa20>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d02c      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a70      	ldr	r2, [pc, #448]	; (8006b54 <HAL_DMA_IRQHandler+0xa24>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d027      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a6e      	ldr	r2, [pc, #440]	; (8006b58 <HAL_DMA_IRQHandler+0xa28>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d022      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a6d      	ldr	r2, [pc, #436]	; (8006b5c <HAL_DMA_IRQHandler+0xa2c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d01d      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a6b      	ldr	r2, [pc, #428]	; (8006b60 <HAL_DMA_IRQHandler+0xa30>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d018      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a6a      	ldr	r2, [pc, #424]	; (8006b64 <HAL_DMA_IRQHandler+0xa34>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d013      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a68      	ldr	r2, [pc, #416]	; (8006b68 <HAL_DMA_IRQHandler+0xa38>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00e      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a67      	ldr	r2, [pc, #412]	; (8006b6c <HAL_DMA_IRQHandler+0xa3c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d009      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a65      	ldr	r2, [pc, #404]	; (8006b70 <HAL_DMA_IRQHandler+0xa40>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x8b8>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a64      	ldr	r2, [pc, #400]	; (8006b74 <HAL_DMA_IRQHandler+0xa44>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d108      	bne.n	80069fa <HAL_DMA_IRQHandler+0x8ca>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0201 	bic.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	e007      	b.n	8006a0a <HAL_DMA_IRQHandler+0x8da>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 0201 	bic.w	r2, r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d307      	bcc.n	8006a26 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1f2      	bne.n	8006a0a <HAL_DMA_IRQHandler+0x8da>
 8006a24:	e000      	b.n	8006a28 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a26:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d004      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2203      	movs	r2, #3
 8006a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006a3e:	e003      	b.n	8006a48 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8272 	beq.w	8006f3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
 8006a62:	e26c      	b.n	8006f3e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a43      	ldr	r2, [pc, #268]	; (8006b78 <HAL_DMA_IRQHandler+0xa48>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d022      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x984>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a42      	ldr	r2, [pc, #264]	; (8006b7c <HAL_DMA_IRQHandler+0xa4c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d01d      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x984>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a40      	ldr	r2, [pc, #256]	; (8006b80 <HAL_DMA_IRQHandler+0xa50>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d018      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x984>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a3f      	ldr	r2, [pc, #252]	; (8006b84 <HAL_DMA_IRQHandler+0xa54>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x984>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a3d      	ldr	r2, [pc, #244]	; (8006b88 <HAL_DMA_IRQHandler+0xa58>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00e      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x984>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a3c      	ldr	r2, [pc, #240]	; (8006b8c <HAL_DMA_IRQHandler+0xa5c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x984>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a3a      	ldr	r2, [pc, #232]	; (8006b90 <HAL_DMA_IRQHandler+0xa60>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x984>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a39      	ldr	r2, [pc, #228]	; (8006b94 <HAL_DMA_IRQHandler+0xa64>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d101      	bne.n	8006ab8 <HAL_DMA_IRQHandler+0x988>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <HAL_DMA_IRQHandler+0x98a>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 823f 	beq.w	8006f3e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006acc:	f003 031f 	and.w	r3, r3, #31
 8006ad0:	2204      	movs	r2, #4
 8006ad2:	409a      	lsls	r2, r3
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80cd 	beq.w	8006c78 <HAL_DMA_IRQHandler+0xb48>
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80c7 	beq.w	8006c78 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aee:	f003 031f 	and.w	r3, r3, #31
 8006af2:	2204      	movs	r2, #4
 8006af4:	409a      	lsls	r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d049      	beq.n	8006b98 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 8210 	beq.w	8006f38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b20:	e20a      	b.n	8006f38 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8206 	beq.w	8006f38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b34:	e200      	b.n	8006f38 <HAL_DMA_IRQHandler+0xe08>
 8006b36:	bf00      	nop
 8006b38:	40020010 	.word	0x40020010
 8006b3c:	40020028 	.word	0x40020028
 8006b40:	40020040 	.word	0x40020040
 8006b44:	40020058 	.word	0x40020058
 8006b48:	40020070 	.word	0x40020070
 8006b4c:	40020088 	.word	0x40020088
 8006b50:	400200a0 	.word	0x400200a0
 8006b54:	400200b8 	.word	0x400200b8
 8006b58:	40020410 	.word	0x40020410
 8006b5c:	40020428 	.word	0x40020428
 8006b60:	40020440 	.word	0x40020440
 8006b64:	40020458 	.word	0x40020458
 8006b68:	40020470 	.word	0x40020470
 8006b6c:	40020488 	.word	0x40020488
 8006b70:	400204a0 	.word	0x400204a0
 8006b74:	400204b8 	.word	0x400204b8
 8006b78:	58025408 	.word	0x58025408
 8006b7c:	5802541c 	.word	0x5802541c
 8006b80:	58025430 	.word	0x58025430
 8006b84:	58025444 	.word	0x58025444
 8006b88:	58025458 	.word	0x58025458
 8006b8c:	5802546c 	.word	0x5802546c
 8006b90:	58025480 	.word	0x58025480
 8006b94:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d160      	bne.n	8006c64 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a7f      	ldr	r2, [pc, #508]	; (8006da4 <HAL_DMA_IRQHandler+0xc74>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d04a      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a7d      	ldr	r2, [pc, #500]	; (8006da8 <HAL_DMA_IRQHandler+0xc78>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d045      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a7c      	ldr	r2, [pc, #496]	; (8006dac <HAL_DMA_IRQHandler+0xc7c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d040      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a7a      	ldr	r2, [pc, #488]	; (8006db0 <HAL_DMA_IRQHandler+0xc80>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d03b      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a79      	ldr	r2, [pc, #484]	; (8006db4 <HAL_DMA_IRQHandler+0xc84>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d036      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a77      	ldr	r2, [pc, #476]	; (8006db8 <HAL_DMA_IRQHandler+0xc88>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d031      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a76      	ldr	r2, [pc, #472]	; (8006dbc <HAL_DMA_IRQHandler+0xc8c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d02c      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a74      	ldr	r2, [pc, #464]	; (8006dc0 <HAL_DMA_IRQHandler+0xc90>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d027      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a73      	ldr	r2, [pc, #460]	; (8006dc4 <HAL_DMA_IRQHandler+0xc94>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d022      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a71      	ldr	r2, [pc, #452]	; (8006dc8 <HAL_DMA_IRQHandler+0xc98>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01d      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a70      	ldr	r2, [pc, #448]	; (8006dcc <HAL_DMA_IRQHandler+0xc9c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d018      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a6e      	ldr	r2, [pc, #440]	; (8006dd0 <HAL_DMA_IRQHandler+0xca0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d013      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a6d      	ldr	r2, [pc, #436]	; (8006dd4 <HAL_DMA_IRQHandler+0xca4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00e      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a6b      	ldr	r2, [pc, #428]	; (8006dd8 <HAL_DMA_IRQHandler+0xca8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a6a      	ldr	r2, [pc, #424]	; (8006ddc <HAL_DMA_IRQHandler+0xcac>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xb12>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a68      	ldr	r2, [pc, #416]	; (8006de0 <HAL_DMA_IRQHandler+0xcb0>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d108      	bne.n	8006c54 <HAL_DMA_IRQHandler+0xb24>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0208 	bic.w	r2, r2, #8
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	e007      	b.n	8006c64 <HAL_DMA_IRQHandler+0xb34>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0204 	bic.w	r2, r2, #4
 8006c62:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8165 	beq.w	8006f38 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c76:	e15f      	b.n	8006f38 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	2202      	movs	r2, #2
 8006c82:	409a      	lsls	r2, r3
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	4013      	ands	r3, r2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80c5 	beq.w	8006e18 <HAL_DMA_IRQHandler+0xce8>
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80bf 	beq.w	8006e18 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	409a      	lsls	r2, r3
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d018      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d109      	bne.n	8006cd2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 813a 	beq.w	8006f3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cd0:	e134      	b.n	8006f3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 8130 	beq.w	8006f3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ce4:	e12a      	b.n	8006f3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 8089 	bne.w	8006e04 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a2b      	ldr	r2, [pc, #172]	; (8006da4 <HAL_DMA_IRQHandler+0xc74>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d04a      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a29      	ldr	r2, [pc, #164]	; (8006da8 <HAL_DMA_IRQHandler+0xc78>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d045      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a28      	ldr	r2, [pc, #160]	; (8006dac <HAL_DMA_IRQHandler+0xc7c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d040      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <HAL_DMA_IRQHandler+0xc80>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d03b      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a25      	ldr	r2, [pc, #148]	; (8006db4 <HAL_DMA_IRQHandler+0xc84>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d036      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a23      	ldr	r2, [pc, #140]	; (8006db8 <HAL_DMA_IRQHandler+0xc88>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d031      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a22      	ldr	r2, [pc, #136]	; (8006dbc <HAL_DMA_IRQHandler+0xc8c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d02c      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a20      	ldr	r2, [pc, #128]	; (8006dc0 <HAL_DMA_IRQHandler+0xc90>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d027      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1f      	ldr	r2, [pc, #124]	; (8006dc4 <HAL_DMA_IRQHandler+0xc94>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d022      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1d      	ldr	r2, [pc, #116]	; (8006dc8 <HAL_DMA_IRQHandler+0xc98>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d01d      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1c      	ldr	r2, [pc, #112]	; (8006dcc <HAL_DMA_IRQHandler+0xc9c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d018      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1a      	ldr	r2, [pc, #104]	; (8006dd0 <HAL_DMA_IRQHandler+0xca0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a19      	ldr	r2, [pc, #100]	; (8006dd4 <HAL_DMA_IRQHandler+0xca4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a17      	ldr	r2, [pc, #92]	; (8006dd8 <HAL_DMA_IRQHandler+0xca8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a16      	ldr	r2, [pc, #88]	; (8006ddc <HAL_DMA_IRQHandler+0xcac>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xc62>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a14      	ldr	r2, [pc, #80]	; (8006de0 <HAL_DMA_IRQHandler+0xcb0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d128      	bne.n	8006de4 <HAL_DMA_IRQHandler+0xcb4>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0214 	bic.w	r2, r2, #20
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	e027      	b.n	8006df4 <HAL_DMA_IRQHandler+0xcc4>
 8006da4:	40020010 	.word	0x40020010
 8006da8:	40020028 	.word	0x40020028
 8006dac:	40020040 	.word	0x40020040
 8006db0:	40020058 	.word	0x40020058
 8006db4:	40020070 	.word	0x40020070
 8006db8:	40020088 	.word	0x40020088
 8006dbc:	400200a0 	.word	0x400200a0
 8006dc0:	400200b8 	.word	0x400200b8
 8006dc4:	40020410 	.word	0x40020410
 8006dc8:	40020428 	.word	0x40020428
 8006dcc:	40020440 	.word	0x40020440
 8006dd0:	40020458 	.word	0x40020458
 8006dd4:	40020470 	.word	0x40020470
 8006dd8:	40020488 	.word	0x40020488
 8006ddc:	400204a0 	.word	0x400204a0
 8006de0:	400204b8 	.word	0x400204b8
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 020a 	bic.w	r2, r2, #10
 8006df2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8097 	beq.w	8006f3c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e16:	e091      	b.n	8006f3c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1c:	f003 031f 	and.w	r3, r3, #31
 8006e20:	2208      	movs	r2, #8
 8006e22:	409a      	lsls	r2, r3
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	4013      	ands	r3, r2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8088 	beq.w	8006f3e <HAL_DMA_IRQHandler+0xe0e>
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8082 	beq.w	8006f3e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a41      	ldr	r2, [pc, #260]	; (8006f44 <HAL_DMA_IRQHandler+0xe14>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d04a      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a3f      	ldr	r2, [pc, #252]	; (8006f48 <HAL_DMA_IRQHandler+0xe18>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d045      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a3e      	ldr	r2, [pc, #248]	; (8006f4c <HAL_DMA_IRQHandler+0xe1c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d040      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a3c      	ldr	r2, [pc, #240]	; (8006f50 <HAL_DMA_IRQHandler+0xe20>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d03b      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a3b      	ldr	r2, [pc, #236]	; (8006f54 <HAL_DMA_IRQHandler+0xe24>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d036      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a39      	ldr	r2, [pc, #228]	; (8006f58 <HAL_DMA_IRQHandler+0xe28>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d031      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a38      	ldr	r2, [pc, #224]	; (8006f5c <HAL_DMA_IRQHandler+0xe2c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d02c      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a36      	ldr	r2, [pc, #216]	; (8006f60 <HAL_DMA_IRQHandler+0xe30>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d027      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a35      	ldr	r2, [pc, #212]	; (8006f64 <HAL_DMA_IRQHandler+0xe34>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d022      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a33      	ldr	r2, [pc, #204]	; (8006f68 <HAL_DMA_IRQHandler+0xe38>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d01d      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a32      	ldr	r2, [pc, #200]	; (8006f6c <HAL_DMA_IRQHandler+0xe3c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d018      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a30      	ldr	r2, [pc, #192]	; (8006f70 <HAL_DMA_IRQHandler+0xe40>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a2f      	ldr	r2, [pc, #188]	; (8006f74 <HAL_DMA_IRQHandler+0xe44>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00e      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a2d      	ldr	r2, [pc, #180]	; (8006f78 <HAL_DMA_IRQHandler+0xe48>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a2c      	ldr	r2, [pc, #176]	; (8006f7c <HAL_DMA_IRQHandler+0xe4c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_DMA_IRQHandler+0xdaa>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a2a      	ldr	r2, [pc, #168]	; (8006f80 <HAL_DMA_IRQHandler+0xe50>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d108      	bne.n	8006eec <HAL_DMA_IRQHandler+0xdbc>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 021c 	bic.w	r2, r2, #28
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	e007      	b.n	8006efc <HAL_DMA_IRQHandler+0xdcc>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 020e 	bic.w	r2, r2, #14
 8006efa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f00:	f003 031f 	and.w	r3, r3, #31
 8006f04:	2201      	movs	r2, #1
 8006f06:	409a      	lsls	r2, r3
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d009      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4798      	blx	r3
 8006f32:	e004      	b.n	8006f3e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006f34:	bf00      	nop
 8006f36:	e002      	b.n	8006f3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f38:	bf00      	nop
 8006f3a:	e000      	b.n	8006f3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f3c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f3e:	3728      	adds	r7, #40	; 0x28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	40020010 	.word	0x40020010
 8006f48:	40020028 	.word	0x40020028
 8006f4c:	40020040 	.word	0x40020040
 8006f50:	40020058 	.word	0x40020058
 8006f54:	40020070 	.word	0x40020070
 8006f58:	40020088 	.word	0x40020088
 8006f5c:	400200a0 	.word	0x400200a0
 8006f60:	400200b8 	.word	0x400200b8
 8006f64:	40020410 	.word	0x40020410
 8006f68:	40020428 	.word	0x40020428
 8006f6c:	40020440 	.word	0x40020440
 8006f70:	40020458 	.word	0x40020458
 8006f74:	40020470 	.word	0x40020470
 8006f78:	40020488 	.word	0x40020488
 8006f7c:	400204a0 	.word	0x400204a0
 8006f80:	400204b8 	.word	0x400204b8

08006f84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f96:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a7f      	ldr	r2, [pc, #508]	; (80071a0 <DMA_SetConfig+0x21c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d072      	beq.n	800708e <DMA_SetConfig+0x10a>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a7d      	ldr	r2, [pc, #500]	; (80071a4 <DMA_SetConfig+0x220>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d06d      	beq.n	800708e <DMA_SetConfig+0x10a>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a7c      	ldr	r2, [pc, #496]	; (80071a8 <DMA_SetConfig+0x224>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d068      	beq.n	800708e <DMA_SetConfig+0x10a>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a7a      	ldr	r2, [pc, #488]	; (80071ac <DMA_SetConfig+0x228>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d063      	beq.n	800708e <DMA_SetConfig+0x10a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a79      	ldr	r2, [pc, #484]	; (80071b0 <DMA_SetConfig+0x22c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d05e      	beq.n	800708e <DMA_SetConfig+0x10a>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a77      	ldr	r2, [pc, #476]	; (80071b4 <DMA_SetConfig+0x230>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d059      	beq.n	800708e <DMA_SetConfig+0x10a>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a76      	ldr	r2, [pc, #472]	; (80071b8 <DMA_SetConfig+0x234>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d054      	beq.n	800708e <DMA_SetConfig+0x10a>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a74      	ldr	r2, [pc, #464]	; (80071bc <DMA_SetConfig+0x238>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d04f      	beq.n	800708e <DMA_SetConfig+0x10a>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a73      	ldr	r2, [pc, #460]	; (80071c0 <DMA_SetConfig+0x23c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d04a      	beq.n	800708e <DMA_SetConfig+0x10a>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a71      	ldr	r2, [pc, #452]	; (80071c4 <DMA_SetConfig+0x240>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d045      	beq.n	800708e <DMA_SetConfig+0x10a>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a70      	ldr	r2, [pc, #448]	; (80071c8 <DMA_SetConfig+0x244>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d040      	beq.n	800708e <DMA_SetConfig+0x10a>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a6e      	ldr	r2, [pc, #440]	; (80071cc <DMA_SetConfig+0x248>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d03b      	beq.n	800708e <DMA_SetConfig+0x10a>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a6d      	ldr	r2, [pc, #436]	; (80071d0 <DMA_SetConfig+0x24c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d036      	beq.n	800708e <DMA_SetConfig+0x10a>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a6b      	ldr	r2, [pc, #428]	; (80071d4 <DMA_SetConfig+0x250>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d031      	beq.n	800708e <DMA_SetConfig+0x10a>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a6a      	ldr	r2, [pc, #424]	; (80071d8 <DMA_SetConfig+0x254>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d02c      	beq.n	800708e <DMA_SetConfig+0x10a>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a68      	ldr	r2, [pc, #416]	; (80071dc <DMA_SetConfig+0x258>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d027      	beq.n	800708e <DMA_SetConfig+0x10a>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a67      	ldr	r2, [pc, #412]	; (80071e0 <DMA_SetConfig+0x25c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d022      	beq.n	800708e <DMA_SetConfig+0x10a>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a65      	ldr	r2, [pc, #404]	; (80071e4 <DMA_SetConfig+0x260>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d01d      	beq.n	800708e <DMA_SetConfig+0x10a>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a64      	ldr	r2, [pc, #400]	; (80071e8 <DMA_SetConfig+0x264>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d018      	beq.n	800708e <DMA_SetConfig+0x10a>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a62      	ldr	r2, [pc, #392]	; (80071ec <DMA_SetConfig+0x268>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <DMA_SetConfig+0x10a>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a61      	ldr	r2, [pc, #388]	; (80071f0 <DMA_SetConfig+0x26c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00e      	beq.n	800708e <DMA_SetConfig+0x10a>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a5f      	ldr	r2, [pc, #380]	; (80071f4 <DMA_SetConfig+0x270>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d009      	beq.n	800708e <DMA_SetConfig+0x10a>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a5e      	ldr	r2, [pc, #376]	; (80071f8 <DMA_SetConfig+0x274>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d004      	beq.n	800708e <DMA_SetConfig+0x10a>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a5c      	ldr	r2, [pc, #368]	; (80071fc <DMA_SetConfig+0x278>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d101      	bne.n	8007092 <DMA_SetConfig+0x10e>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <DMA_SetConfig+0x110>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00d      	beq.n	80070b4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d004      	beq.n	80070b4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070b2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a39      	ldr	r2, [pc, #228]	; (80071a0 <DMA_SetConfig+0x21c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d04a      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a38      	ldr	r2, [pc, #224]	; (80071a4 <DMA_SetConfig+0x220>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d045      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a36      	ldr	r2, [pc, #216]	; (80071a8 <DMA_SetConfig+0x224>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d040      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a35      	ldr	r2, [pc, #212]	; (80071ac <DMA_SetConfig+0x228>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d03b      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a33      	ldr	r2, [pc, #204]	; (80071b0 <DMA_SetConfig+0x22c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d036      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a32      	ldr	r2, [pc, #200]	; (80071b4 <DMA_SetConfig+0x230>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d031      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a30      	ldr	r2, [pc, #192]	; (80071b8 <DMA_SetConfig+0x234>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d02c      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a2f      	ldr	r2, [pc, #188]	; (80071bc <DMA_SetConfig+0x238>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d027      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a2d      	ldr	r2, [pc, #180]	; (80071c0 <DMA_SetConfig+0x23c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d022      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a2c      	ldr	r2, [pc, #176]	; (80071c4 <DMA_SetConfig+0x240>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d01d      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2a      	ldr	r2, [pc, #168]	; (80071c8 <DMA_SetConfig+0x244>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d018      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a29      	ldr	r2, [pc, #164]	; (80071cc <DMA_SetConfig+0x248>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d013      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a27      	ldr	r2, [pc, #156]	; (80071d0 <DMA_SetConfig+0x24c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00e      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <DMA_SetConfig+0x250>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d009      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a24      	ldr	r2, [pc, #144]	; (80071d8 <DMA_SetConfig+0x254>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <DMA_SetConfig+0x1d0>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a23      	ldr	r2, [pc, #140]	; (80071dc <DMA_SetConfig+0x258>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d101      	bne.n	8007158 <DMA_SetConfig+0x1d4>
 8007154:	2301      	movs	r3, #1
 8007156:	e000      	b.n	800715a <DMA_SetConfig+0x1d6>
 8007158:	2300      	movs	r3, #0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d059      	beq.n	8007212 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	223f      	movs	r2, #63	; 0x3f
 8007168:	409a      	lsls	r2, r3
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800717c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d138      	bne.n	8007200 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800719e:	e086      	b.n	80072ae <DMA_SetConfig+0x32a>
 80071a0:	40020010 	.word	0x40020010
 80071a4:	40020028 	.word	0x40020028
 80071a8:	40020040 	.word	0x40020040
 80071ac:	40020058 	.word	0x40020058
 80071b0:	40020070 	.word	0x40020070
 80071b4:	40020088 	.word	0x40020088
 80071b8:	400200a0 	.word	0x400200a0
 80071bc:	400200b8 	.word	0x400200b8
 80071c0:	40020410 	.word	0x40020410
 80071c4:	40020428 	.word	0x40020428
 80071c8:	40020440 	.word	0x40020440
 80071cc:	40020458 	.word	0x40020458
 80071d0:	40020470 	.word	0x40020470
 80071d4:	40020488 	.word	0x40020488
 80071d8:	400204a0 	.word	0x400204a0
 80071dc:	400204b8 	.word	0x400204b8
 80071e0:	58025408 	.word	0x58025408
 80071e4:	5802541c 	.word	0x5802541c
 80071e8:	58025430 	.word	0x58025430
 80071ec:	58025444 	.word	0x58025444
 80071f0:	58025458 	.word	0x58025458
 80071f4:	5802546c 	.word	0x5802546c
 80071f8:	58025480 	.word	0x58025480
 80071fc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	60da      	str	r2, [r3, #12]
}
 8007210:	e04d      	b.n	80072ae <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a29      	ldr	r2, [pc, #164]	; (80072bc <DMA_SetConfig+0x338>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d022      	beq.n	8007262 <DMA_SetConfig+0x2de>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a27      	ldr	r2, [pc, #156]	; (80072c0 <DMA_SetConfig+0x33c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d01d      	beq.n	8007262 <DMA_SetConfig+0x2de>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a26      	ldr	r2, [pc, #152]	; (80072c4 <DMA_SetConfig+0x340>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d018      	beq.n	8007262 <DMA_SetConfig+0x2de>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a24      	ldr	r2, [pc, #144]	; (80072c8 <DMA_SetConfig+0x344>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d013      	beq.n	8007262 <DMA_SetConfig+0x2de>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a23      	ldr	r2, [pc, #140]	; (80072cc <DMA_SetConfig+0x348>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00e      	beq.n	8007262 <DMA_SetConfig+0x2de>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a21      	ldr	r2, [pc, #132]	; (80072d0 <DMA_SetConfig+0x34c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d009      	beq.n	8007262 <DMA_SetConfig+0x2de>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a20      	ldr	r2, [pc, #128]	; (80072d4 <DMA_SetConfig+0x350>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d004      	beq.n	8007262 <DMA_SetConfig+0x2de>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a1e      	ldr	r2, [pc, #120]	; (80072d8 <DMA_SetConfig+0x354>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d101      	bne.n	8007266 <DMA_SetConfig+0x2e2>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <DMA_SetConfig+0x2e4>
 8007266:	2300      	movs	r3, #0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d020      	beq.n	80072ae <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	2201      	movs	r2, #1
 8007276:	409a      	lsls	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b40      	cmp	r3, #64	; 0x40
 800728a:	d108      	bne.n	800729e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	60da      	str	r2, [r3, #12]
}
 800729c:	e007      	b.n	80072ae <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	60da      	str	r2, [r3, #12]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	58025408 	.word	0x58025408
 80072c0:	5802541c 	.word	0x5802541c
 80072c4:	58025430 	.word	0x58025430
 80072c8:	58025444 	.word	0x58025444
 80072cc:	58025458 	.word	0x58025458
 80072d0:	5802546c 	.word	0x5802546c
 80072d4:	58025480 	.word	0x58025480
 80072d8:	58025494 	.word	0x58025494

080072dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a42      	ldr	r2, [pc, #264]	; (80073f4 <DMA_CalcBaseAndBitshift+0x118>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d04a      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a41      	ldr	r2, [pc, #260]	; (80073f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d045      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a3f      	ldr	r2, [pc, #252]	; (80073fc <DMA_CalcBaseAndBitshift+0x120>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d040      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a3e      	ldr	r2, [pc, #248]	; (8007400 <DMA_CalcBaseAndBitshift+0x124>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d03b      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a3c      	ldr	r2, [pc, #240]	; (8007404 <DMA_CalcBaseAndBitshift+0x128>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d036      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a3b      	ldr	r2, [pc, #236]	; (8007408 <DMA_CalcBaseAndBitshift+0x12c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d031      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a39      	ldr	r2, [pc, #228]	; (800740c <DMA_CalcBaseAndBitshift+0x130>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d02c      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a38      	ldr	r2, [pc, #224]	; (8007410 <DMA_CalcBaseAndBitshift+0x134>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d027      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a36      	ldr	r2, [pc, #216]	; (8007414 <DMA_CalcBaseAndBitshift+0x138>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d022      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a35      	ldr	r2, [pc, #212]	; (8007418 <DMA_CalcBaseAndBitshift+0x13c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d01d      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a33      	ldr	r2, [pc, #204]	; (800741c <DMA_CalcBaseAndBitshift+0x140>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d018      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a32      	ldr	r2, [pc, #200]	; (8007420 <DMA_CalcBaseAndBitshift+0x144>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d013      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a30      	ldr	r2, [pc, #192]	; (8007424 <DMA_CalcBaseAndBitshift+0x148>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00e      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a2f      	ldr	r2, [pc, #188]	; (8007428 <DMA_CalcBaseAndBitshift+0x14c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d009      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a2d      	ldr	r2, [pc, #180]	; (800742c <DMA_CalcBaseAndBitshift+0x150>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d004      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xa8>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a2c      	ldr	r2, [pc, #176]	; (8007430 <DMA_CalcBaseAndBitshift+0x154>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d101      	bne.n	8007388 <DMA_CalcBaseAndBitshift+0xac>
 8007384:	2301      	movs	r3, #1
 8007386:	e000      	b.n	800738a <DMA_CalcBaseAndBitshift+0xae>
 8007388:	2300      	movs	r3, #0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d024      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	b2db      	uxtb	r3, r3
 8007394:	3b10      	subs	r3, #16
 8007396:	4a27      	ldr	r2, [pc, #156]	; (8007434 <DMA_CalcBaseAndBitshift+0x158>)
 8007398:	fba2 2303 	umull	r2, r3, r2, r3
 800739c:	091b      	lsrs	r3, r3, #4
 800739e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	4a24      	ldr	r2, [pc, #144]	; (8007438 <DMA_CalcBaseAndBitshift+0x15c>)
 80073a8:	5cd3      	ldrb	r3, [r2, r3]
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d908      	bls.n	80073c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	4b1f      	ldr	r3, [pc, #124]	; (800743c <DMA_CalcBaseAndBitshift+0x160>)
 80073be:	4013      	ands	r3, r2
 80073c0:	1d1a      	adds	r2, r3, #4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	659a      	str	r2, [r3, #88]	; 0x58
 80073c6:	e00d      	b.n	80073e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	461a      	mov	r2, r3
 80073ce:	4b1b      	ldr	r3, [pc, #108]	; (800743c <DMA_CalcBaseAndBitshift+0x160>)
 80073d0:	4013      	ands	r3, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6593      	str	r3, [r2, #88]	; 0x58
 80073d6:	e005      	b.n	80073e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	40020010 	.word	0x40020010
 80073f8:	40020028 	.word	0x40020028
 80073fc:	40020040 	.word	0x40020040
 8007400:	40020058 	.word	0x40020058
 8007404:	40020070 	.word	0x40020070
 8007408:	40020088 	.word	0x40020088
 800740c:	400200a0 	.word	0x400200a0
 8007410:	400200b8 	.word	0x400200b8
 8007414:	40020410 	.word	0x40020410
 8007418:	40020428 	.word	0x40020428
 800741c:	40020440 	.word	0x40020440
 8007420:	40020458 	.word	0x40020458
 8007424:	40020470 	.word	0x40020470
 8007428:	40020488 	.word	0x40020488
 800742c:	400204a0 	.word	0x400204a0
 8007430:	400204b8 	.word	0x400204b8
 8007434:	aaaaaaab 	.word	0xaaaaaaab
 8007438:	08012af0 	.word	0x08012af0
 800743c:	fffffc00 	.word	0xfffffc00

08007440 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d120      	bne.n	8007496 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007458:	2b03      	cmp	r3, #3
 800745a:	d858      	bhi.n	800750e <DMA_CheckFifoParam+0xce>
 800745c:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <DMA_CheckFifoParam+0x24>)
 800745e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007462:	bf00      	nop
 8007464:	08007475 	.word	0x08007475
 8007468:	08007487 	.word	0x08007487
 800746c:	08007475 	.word	0x08007475
 8007470:	0800750f 	.word	0x0800750f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d048      	beq.n	8007512 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007484:	e045      	b.n	8007512 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800748e:	d142      	bne.n	8007516 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007494:	e03f      	b.n	8007516 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749e:	d123      	bne.n	80074e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d838      	bhi.n	800751a <DMA_CheckFifoParam+0xda>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <DMA_CheckFifoParam+0x70>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074c1 	.word	0x080074c1
 80074b4:	080074c7 	.word	0x080074c7
 80074b8:	080074c1 	.word	0x080074c1
 80074bc:	080074d9 	.word	0x080074d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	73fb      	strb	r3, [r7, #15]
        break;
 80074c4:	e030      	b.n	8007528 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d025      	beq.n	800751e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074d6:	e022      	b.n	800751e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074e0:	d11f      	bne.n	8007522 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074e6:	e01c      	b.n	8007522 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d902      	bls.n	80074f6 <DMA_CheckFifoParam+0xb6>
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d003      	beq.n	80074fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80074f4:	e018      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	73fb      	strb	r3, [r7, #15]
        break;
 80074fa:	e015      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00e      	beq.n	8007526 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	73fb      	strb	r3, [r7, #15]
    break;
 800750c:	e00b      	b.n	8007526 <DMA_CheckFifoParam+0xe6>
        break;
 800750e:	bf00      	nop
 8007510:	e00a      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
        break;
 8007512:	bf00      	nop
 8007514:	e008      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
        break;
 8007516:	bf00      	nop
 8007518:	e006      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
        break;
 800751a:	bf00      	nop
 800751c:	e004      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
        break;
 800751e:	bf00      	nop
 8007520:	e002      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
        break;
 8007522:	bf00      	nop
 8007524:	e000      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
    break;
 8007526:	bf00      	nop
    }
  }

  return status;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop

08007538 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a38      	ldr	r2, [pc, #224]	; (800762c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d022      	beq.n	8007596 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a36      	ldr	r2, [pc, #216]	; (8007630 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d01d      	beq.n	8007596 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a35      	ldr	r2, [pc, #212]	; (8007634 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d018      	beq.n	8007596 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a33      	ldr	r2, [pc, #204]	; (8007638 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a32      	ldr	r2, [pc, #200]	; (800763c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00e      	beq.n	8007596 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a30      	ldr	r2, [pc, #192]	; (8007640 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d009      	beq.n	8007596 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a2f      	ldr	r2, [pc, #188]	; (8007644 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d004      	beq.n	8007596 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a2d      	ldr	r2, [pc, #180]	; (8007648 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d101      	bne.n	800759a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800759a:	2300      	movs	r3, #0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01a      	beq.n	80075d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	3b08      	subs	r3, #8
 80075a8:	4a28      	ldr	r2, [pc, #160]	; (800764c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80075aa:	fba2 2303 	umull	r2, r3, r2, r3
 80075ae:	091b      	lsrs	r3, r3, #4
 80075b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4b26      	ldr	r3, [pc, #152]	; (8007650 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	461a      	mov	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a24      	ldr	r2, [pc, #144]	; (8007654 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80075c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f003 031f 	and.w	r3, r3, #31
 80075cc:	2201      	movs	r2, #1
 80075ce:	409a      	lsls	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80075d4:	e024      	b.n	8007620 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	3b10      	subs	r3, #16
 80075de:	4a1e      	ldr	r2, [pc, #120]	; (8007658 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80075e0:	fba2 2303 	umull	r2, r3, r2, r3
 80075e4:	091b      	lsrs	r3, r3, #4
 80075e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4a1c      	ldr	r2, [pc, #112]	; (800765c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d806      	bhi.n	80075fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	4a1b      	ldr	r2, [pc, #108]	; (8007660 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d902      	bls.n	80075fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3308      	adds	r3, #8
 80075fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4b18      	ldr	r3, [pc, #96]	; (8007664 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	461a      	mov	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a16      	ldr	r2, [pc, #88]	; (8007668 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007610:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f003 031f 	and.w	r3, r3, #31
 8007618:	2201      	movs	r2, #1
 800761a:	409a      	lsls	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	58025408 	.word	0x58025408
 8007630:	5802541c 	.word	0x5802541c
 8007634:	58025430 	.word	0x58025430
 8007638:	58025444 	.word	0x58025444
 800763c:	58025458 	.word	0x58025458
 8007640:	5802546c 	.word	0x5802546c
 8007644:	58025480 	.word	0x58025480
 8007648:	58025494 	.word	0x58025494
 800764c:	cccccccd 	.word	0xcccccccd
 8007650:	16009600 	.word	0x16009600
 8007654:	58025880 	.word	0x58025880
 8007658:	aaaaaaab 	.word	0xaaaaaaab
 800765c:	400204b8 	.word	0x400204b8
 8007660:	4002040f 	.word	0x4002040f
 8007664:	10008200 	.word	0x10008200
 8007668:	40020880 	.word	0x40020880

0800766c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d04a      	beq.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b08      	cmp	r3, #8
 8007686:	d847      	bhi.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a25      	ldr	r2, [pc, #148]	; (8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d022      	beq.n	80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a24      	ldr	r2, [pc, #144]	; (8007728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d01d      	beq.n	80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a22      	ldr	r2, [pc, #136]	; (800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d018      	beq.n	80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a21      	ldr	r2, [pc, #132]	; (8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1f      	ldr	r2, [pc, #124]	; (8007734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00e      	beq.n	80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1e      	ldr	r2, [pc, #120]	; (8007738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d009      	beq.n	80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1c      	ldr	r2, [pc, #112]	; (800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d004      	beq.n	80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1b      	ldr	r2, [pc, #108]	; (8007740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d101      	bne.n	80076dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80076dc:	2300      	movs	r3, #0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4b17      	ldr	r3, [pc, #92]	; (8007744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	461a      	mov	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a15      	ldr	r2, [pc, #84]	; (8007748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80076f4:	671a      	str	r2, [r3, #112]	; 0x70
 80076f6:	e009      	b.n	800770c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4b14      	ldr	r3, [pc, #80]	; (800774c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a11      	ldr	r2, [pc, #68]	; (8007750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800770a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3b01      	subs	r3, #1
 8007710:	2201      	movs	r2, #1
 8007712:	409a      	lsls	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007718:	bf00      	nop
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	58025408 	.word	0x58025408
 8007728:	5802541c 	.word	0x5802541c
 800772c:	58025430 	.word	0x58025430
 8007730:	58025444 	.word	0x58025444
 8007734:	58025458 	.word	0x58025458
 8007738:	5802546c 	.word	0x5802546c
 800773c:	58025480 	.word	0x58025480
 8007740:	58025494 	.word	0x58025494
 8007744:	1600963f 	.word	0x1600963f
 8007748:	58025940 	.word	0x58025940
 800774c:	1000823f 	.word	0x1000823f
 8007750:	40020940 	.word	0x40020940

08007754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007754:	b480      	push	{r7}
 8007756:	b089      	sub	sp, #36	; 0x24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800775e:	2300      	movs	r3, #0
 8007760:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007762:	4b89      	ldr	r3, [pc, #548]	; (8007988 <HAL_GPIO_Init+0x234>)
 8007764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007766:	e194      	b.n	8007a92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	2101      	movs	r1, #1
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	fa01 f303 	lsl.w	r3, r1, r3
 8007774:	4013      	ands	r3, r2
 8007776:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 8186 	beq.w	8007a8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	2b01      	cmp	r3, #1
 800778a:	d005      	beq.n	8007798 <HAL_GPIO_Init+0x44>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	2b02      	cmp	r3, #2
 8007796:	d130      	bne.n	80077fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	2203      	movs	r2, #3
 80077a4:	fa02 f303 	lsl.w	r3, r2, r3
 80077a8:	43db      	mvns	r3, r3
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	4013      	ands	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	4313      	orrs	r3, r2
 80077c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80077ce:	2201      	movs	r2, #1
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	fa02 f303 	lsl.w	r3, r2, r3
 80077d6:	43db      	mvns	r3, r3
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	4013      	ands	r3, r2
 80077dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	091b      	lsrs	r3, r3, #4
 80077e4:	f003 0201 	and.w	r2, r3, #1
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	2b03      	cmp	r3, #3
 8007804:	d017      	beq.n	8007836 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	2203      	movs	r2, #3
 8007812:	fa02 f303 	lsl.w	r3, r2, r3
 8007816:	43db      	mvns	r3, r3
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	4013      	ands	r3, r2
 800781c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	fa02 f303 	lsl.w	r3, r2, r3
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	4313      	orrs	r3, r2
 800782e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f003 0303 	and.w	r3, r3, #3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d123      	bne.n	800788a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	08da      	lsrs	r2, r3, #3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3208      	adds	r2, #8
 800784a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	220f      	movs	r2, #15
 800785a:	fa02 f303 	lsl.w	r3, r2, r3
 800785e:	43db      	mvns	r3, r3
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	4013      	ands	r3, r2
 8007864:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	691a      	ldr	r2, [r3, #16]
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	fa02 f303 	lsl.w	r3, r2, r3
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	4313      	orrs	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	08da      	lsrs	r2, r3, #3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3208      	adds	r2, #8
 8007884:	69b9      	ldr	r1, [r7, #24]
 8007886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	2203      	movs	r2, #3
 8007896:	fa02 f303 	lsl.w	r3, r2, r3
 800789a:	43db      	mvns	r3, r3
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	4013      	ands	r3, r2
 80078a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f003 0203 	and.w	r2, r3, #3
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	fa02 f303 	lsl.w	r3, r2, r3
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 80e0 	beq.w	8007a8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078cc:	4b2f      	ldr	r3, [pc, #188]	; (800798c <HAL_GPIO_Init+0x238>)
 80078ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078d2:	4a2e      	ldr	r2, [pc, #184]	; (800798c <HAL_GPIO_Init+0x238>)
 80078d4:	f043 0302 	orr.w	r3, r3, #2
 80078d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80078dc:	4b2b      	ldr	r3, [pc, #172]	; (800798c <HAL_GPIO_Init+0x238>)
 80078de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078ea:	4a29      	ldr	r2, [pc, #164]	; (8007990 <HAL_GPIO_Init+0x23c>)
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	089b      	lsrs	r3, r3, #2
 80078f0:	3302      	adds	r3, #2
 80078f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	220f      	movs	r2, #15
 8007902:	fa02 f303 	lsl.w	r3, r2, r3
 8007906:	43db      	mvns	r3, r3
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	4013      	ands	r3, r2
 800790c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a20      	ldr	r2, [pc, #128]	; (8007994 <HAL_GPIO_Init+0x240>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d052      	beq.n	80079bc <HAL_GPIO_Init+0x268>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a1f      	ldr	r2, [pc, #124]	; (8007998 <HAL_GPIO_Init+0x244>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d031      	beq.n	8007982 <HAL_GPIO_Init+0x22e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a1e      	ldr	r2, [pc, #120]	; (800799c <HAL_GPIO_Init+0x248>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d02b      	beq.n	800797e <HAL_GPIO_Init+0x22a>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a1d      	ldr	r2, [pc, #116]	; (80079a0 <HAL_GPIO_Init+0x24c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d025      	beq.n	800797a <HAL_GPIO_Init+0x226>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a1c      	ldr	r2, [pc, #112]	; (80079a4 <HAL_GPIO_Init+0x250>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d01f      	beq.n	8007976 <HAL_GPIO_Init+0x222>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a1b      	ldr	r2, [pc, #108]	; (80079a8 <HAL_GPIO_Init+0x254>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d019      	beq.n	8007972 <HAL_GPIO_Init+0x21e>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a1a      	ldr	r2, [pc, #104]	; (80079ac <HAL_GPIO_Init+0x258>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d013      	beq.n	800796e <HAL_GPIO_Init+0x21a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a19      	ldr	r2, [pc, #100]	; (80079b0 <HAL_GPIO_Init+0x25c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00d      	beq.n	800796a <HAL_GPIO_Init+0x216>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a18      	ldr	r2, [pc, #96]	; (80079b4 <HAL_GPIO_Init+0x260>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d007      	beq.n	8007966 <HAL_GPIO_Init+0x212>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <HAL_GPIO_Init+0x264>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d101      	bne.n	8007962 <HAL_GPIO_Init+0x20e>
 800795e:	2309      	movs	r3, #9
 8007960:	e02d      	b.n	80079be <HAL_GPIO_Init+0x26a>
 8007962:	230a      	movs	r3, #10
 8007964:	e02b      	b.n	80079be <HAL_GPIO_Init+0x26a>
 8007966:	2308      	movs	r3, #8
 8007968:	e029      	b.n	80079be <HAL_GPIO_Init+0x26a>
 800796a:	2307      	movs	r3, #7
 800796c:	e027      	b.n	80079be <HAL_GPIO_Init+0x26a>
 800796e:	2306      	movs	r3, #6
 8007970:	e025      	b.n	80079be <HAL_GPIO_Init+0x26a>
 8007972:	2305      	movs	r3, #5
 8007974:	e023      	b.n	80079be <HAL_GPIO_Init+0x26a>
 8007976:	2304      	movs	r3, #4
 8007978:	e021      	b.n	80079be <HAL_GPIO_Init+0x26a>
 800797a:	2303      	movs	r3, #3
 800797c:	e01f      	b.n	80079be <HAL_GPIO_Init+0x26a>
 800797e:	2302      	movs	r3, #2
 8007980:	e01d      	b.n	80079be <HAL_GPIO_Init+0x26a>
 8007982:	2301      	movs	r3, #1
 8007984:	e01b      	b.n	80079be <HAL_GPIO_Init+0x26a>
 8007986:	bf00      	nop
 8007988:	58000080 	.word	0x58000080
 800798c:	58024400 	.word	0x58024400
 8007990:	58000400 	.word	0x58000400
 8007994:	58020000 	.word	0x58020000
 8007998:	58020400 	.word	0x58020400
 800799c:	58020800 	.word	0x58020800
 80079a0:	58020c00 	.word	0x58020c00
 80079a4:	58021000 	.word	0x58021000
 80079a8:	58021400 	.word	0x58021400
 80079ac:	58021800 	.word	0x58021800
 80079b0:	58021c00 	.word	0x58021c00
 80079b4:	58022000 	.word	0x58022000
 80079b8:	58022400 	.word	0x58022400
 80079bc:	2300      	movs	r3, #0
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	f002 0203 	and.w	r2, r2, #3
 80079c4:	0092      	lsls	r2, r2, #2
 80079c6:	4093      	lsls	r3, r2
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079ce:	4938      	ldr	r1, [pc, #224]	; (8007ab0 <HAL_GPIO_Init+0x35c>)
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	089b      	lsrs	r3, r3, #2
 80079d4:	3302      	adds	r3, #2
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80079dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	43db      	mvns	r3, r3
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	4013      	ands	r3, r2
 80079ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	43db      	mvns	r3, r3
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d003      	beq.n	8007a30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	43db      	mvns	r3, r3
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	4013      	ands	r3, r2
 8007a46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	43db      	mvns	r3, r3
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	fa22 f303 	lsr.w	r3, r2, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f47f ae63 	bne.w	8007768 <HAL_GPIO_Init+0x14>
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	3724      	adds	r7, #36	; 0x24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	58000400 	.word	0x58000400

08007ab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	887b      	ldrh	r3, [r7, #2]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007acc:	2301      	movs	r3, #1
 8007ace:	73fb      	strb	r3, [r7, #15]
 8007ad0:	e001      	b.n	8007ad6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	807b      	strh	r3, [r7, #2]
 8007af0:	4613      	mov	r3, r2
 8007af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007af4:	787b      	ldrb	r3, [r7, #1]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007afa:	887a      	ldrh	r2, [r7, #2]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b00:	e003      	b.n	8007b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b02:	887b      	ldrh	r3, [r7, #2]
 8007b04:	041a      	lsls	r2, r3, #16
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	619a      	str	r2, [r3, #24]
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b28:	887a      	ldrh	r2, [r7, #2]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	041a      	lsls	r2, r3, #16
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	43d9      	mvns	r1, r3
 8007b34:	887b      	ldrh	r3, [r7, #2]
 8007b36:	400b      	ands	r3, r1
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	619a      	str	r2, [r3, #24]
}
 8007b3e:	bf00      	nop
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
	...

08007b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e07f      	b.n	8007c5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fa fac6 	bl	8002104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2224      	movs	r2, #36	; 0x24
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d107      	bne.n	8007bc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bc2:	609a      	str	r2, [r3, #8]
 8007bc4:	e006      	b.n	8007bd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007bd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d104      	bne.n	8007be6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007be4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6859      	ldr	r1, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	4b1d      	ldr	r3, [pc, #116]	; (8007c68 <HAL_I2C_Init+0x11c>)
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69d9      	ldr	r1, [r3, #28]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a1a      	ldr	r2, [r3, #32]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0201 	orr.w	r2, r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	02008000 	.word	0x02008000

08007c6c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08a      	sub	sp, #40	; 0x28
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	607a      	str	r2, [r7, #4]
 8007c76:	603b      	str	r3, [r7, #0]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	f040 80ef 	bne.w	8007e6c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c9c:	d101      	bne.n	8007ca2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e0e5      	b.n	8007e6e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_I2C_IsDeviceReady+0x44>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e0de      	b.n	8007e6e <HAL_I2C_IsDeviceReady+0x202>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2224      	movs	r2, #36	; 0x24
 8007cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d105      	bne.n	8007cda <HAL_I2C_IsDeviceReady+0x6e>
 8007cce:	897b      	ldrh	r3, [r7, #10]
 8007cd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007cd4:	4b68      	ldr	r3, [pc, #416]	; (8007e78 <HAL_I2C_IsDeviceReady+0x20c>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	e004      	b.n	8007ce4 <HAL_I2C_IsDeviceReady+0x78>
 8007cda:	897b      	ldrh	r3, [r7, #10]
 8007cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ce0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	6812      	ldr	r2, [r2, #0]
 8007ce8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007cea:	f7fb f82b 	bl	8002d44 <HAL_GetTick>
 8007cee:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	bf0c      	ite	eq
 8007cfe:	2301      	moveq	r3, #1
 8007d00:	2300      	movne	r3, #0
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b10      	cmp	r3, #16
 8007d12:	bf0c      	ite	eq
 8007d14:	2301      	moveq	r3, #1
 8007d16:	2300      	movne	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007d1c:	e034      	b.n	8007d88 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d24:	d01a      	beq.n	8007d5c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d26:	f7fb f80d 	bl	8002d44 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d302      	bcc.n	8007d3c <HAL_I2C_IsDeviceReady+0xd0>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10f      	bne.n	8007d5c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d48:	f043 0220 	orr.w	r2, r3, #32
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e088      	b.n	8007e6e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f003 0320 	and.w	r3, r3, #32
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	bf0c      	ite	eq
 8007d6a:	2301      	moveq	r3, #1
 8007d6c:	2300      	movne	r3, #0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	f003 0310 	and.w	r3, r3, #16
 8007d7c:	2b10      	cmp	r3, #16
 8007d7e:	bf0c      	ite	eq
 8007d80:	2301      	moveq	r3, #1
 8007d82:	2300      	movne	r3, #0
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007d88:	7ffb      	ldrb	r3, [r7, #31]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d102      	bne.n	8007d94 <HAL_I2C_IsDeviceReady+0x128>
 8007d8e:	7fbb      	ldrb	r3, [r7, #30]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d0c4      	beq.n	8007d1e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	f003 0310 	and.w	r3, r3, #16
 8007d9e:	2b10      	cmp	r3, #16
 8007da0:	d01a      	beq.n	8007dd8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2200      	movs	r2, #0
 8007daa:	2120      	movs	r1, #32
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f865 	bl	8007e7c <I2C_WaitOnFlagUntilTimeout>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e058      	b.n	8007e6e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	e04a      	b.n	8007e6e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2200      	movs	r2, #0
 8007de0:	2120      	movs	r1, #32
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 f84a 	bl	8007e7c <I2C_WaitOnFlagUntilTimeout>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e03d      	b.n	8007e6e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2210      	movs	r2, #16
 8007df8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d118      	bne.n	8007e3c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e18:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2200      	movs	r2, #0
 8007e22:	2120      	movs	r1, #32
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f829 	bl	8007e7c <I2C_WaitOnFlagUntilTimeout>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e01c      	b.n	8007e6e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	f63f af3d 	bhi.w	8007cc6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e58:	f043 0220 	orr.w	r2, r3, #32
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8007e6c:	2302      	movs	r3, #2
  }
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3720      	adds	r7, #32
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	02002000 	.word	0x02002000

08007e7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e8c:	e031      	b.n	8007ef2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e94:	d02d      	beq.n	8007ef2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e96:	f7fa ff55 	bl	8002d44 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d302      	bcc.n	8007eac <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d122      	bne.n	8007ef2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d113      	bne.n	8007ef2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ece:	f043 0220 	orr.w	r2, r3, #32
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e00f      	b.n	8007f12 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699a      	ldr	r2, [r3, #24]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4013      	ands	r3, r2
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	bf0c      	ite	eq
 8007f02:	2301      	moveq	r3, #1
 8007f04:	2300      	movne	r3, #0
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	79fb      	ldrb	r3, [r7, #7]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d0be      	beq.n	8007e8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b20      	cmp	r3, #32
 8007f2e:	d138      	bne.n	8007fa2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d101      	bne.n	8007f3e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e032      	b.n	8007fa4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2224      	movs	r2, #36	; 0x24
 8007f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0201 	bic.w	r2, r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f6c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6819      	ldr	r1, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f042 0201 	orr.w	r2, r2, #1
 8007f8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	e000      	b.n	8007fa4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fa2:	2302      	movs	r3, #2
  }
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	d139      	bne.n	800803a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d101      	bne.n	8007fd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	e033      	b.n	800803c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2224      	movs	r2, #36	; 0x24
 8007fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0201 	bic.w	r2, r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008002:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	021b      	lsls	r3, r3, #8
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	4313      	orrs	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0201 	orr.w	r2, r2, #1
 8008024:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2220      	movs	r2, #32
 800802a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	e000      	b.n	800803c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800803a:	2302      	movs	r3, #2
  }
}
 800803c:	4618      	mov	r0, r3
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008050:	4b19      	ldr	r3, [pc, #100]	; (80080b8 <HAL_PWREx_ConfigSupply+0x70>)
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b04      	cmp	r3, #4
 800805a:	d00a      	beq.n	8008072 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800805c:	4b16      	ldr	r3, [pc, #88]	; (80080b8 <HAL_PWREx_ConfigSupply+0x70>)
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	429a      	cmp	r2, r3
 8008068:	d001      	beq.n	800806e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e01f      	b.n	80080ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	e01d      	b.n	80080ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008072:	4b11      	ldr	r3, [pc, #68]	; (80080b8 <HAL_PWREx_ConfigSupply+0x70>)
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f023 0207 	bic.w	r2, r3, #7
 800807a:	490f      	ldr	r1, [pc, #60]	; (80080b8 <HAL_PWREx_ConfigSupply+0x70>)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4313      	orrs	r3, r2
 8008080:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008082:	f7fa fe5f 	bl	8002d44 <HAL_GetTick>
 8008086:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008088:	e009      	b.n	800809e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800808a:	f7fa fe5b 	bl	8002d44 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008098:	d901      	bls.n	800809e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e007      	b.n	80080ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800809e:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <HAL_PWREx_ConfigSupply+0x70>)
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080aa:	d1ee      	bne.n	800808a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	58024800 	.word	0x58024800

080080bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08c      	sub	sp, #48	; 0x30
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f000 bc48 	b.w	8008960 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8088 	beq.w	80081ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080de:	4b99      	ldr	r3, [pc, #612]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080e8:	4b96      	ldr	r3, [pc, #600]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80080ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f0:	2b10      	cmp	r3, #16
 80080f2:	d007      	beq.n	8008104 <HAL_RCC_OscConfig+0x48>
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f6:	2b18      	cmp	r3, #24
 80080f8:	d111      	bne.n	800811e <HAL_RCC_OscConfig+0x62>
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	2b02      	cmp	r3, #2
 8008102:	d10c      	bne.n	800811e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008104:	4b8f      	ldr	r3, [pc, #572]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d06d      	beq.n	80081ec <HAL_RCC_OscConfig+0x130>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d169      	bne.n	80081ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	f000 bc21 	b.w	8008960 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008126:	d106      	bne.n	8008136 <HAL_RCC_OscConfig+0x7a>
 8008128:	4b86      	ldr	r3, [pc, #536]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a85      	ldr	r2, [pc, #532]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 800812e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	e02e      	b.n	8008194 <HAL_RCC_OscConfig+0xd8>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10c      	bne.n	8008158 <HAL_RCC_OscConfig+0x9c>
 800813e:	4b81      	ldr	r3, [pc, #516]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a80      	ldr	r2, [pc, #512]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	4b7e      	ldr	r3, [pc, #504]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a7d      	ldr	r2, [pc, #500]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	e01d      	b.n	8008194 <HAL_RCC_OscConfig+0xd8>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008160:	d10c      	bne.n	800817c <HAL_RCC_OscConfig+0xc0>
 8008162:	4b78      	ldr	r3, [pc, #480]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a77      	ldr	r2, [pc, #476]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	4b75      	ldr	r3, [pc, #468]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a74      	ldr	r2, [pc, #464]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008178:	6013      	str	r3, [r2, #0]
 800817a:	e00b      	b.n	8008194 <HAL_RCC_OscConfig+0xd8>
 800817c:	4b71      	ldr	r3, [pc, #452]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a70      	ldr	r2, [pc, #448]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008186:	6013      	str	r3, [r2, #0]
 8008188:	4b6e      	ldr	r3, [pc, #440]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a6d      	ldr	r2, [pc, #436]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 800818e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d013      	beq.n	80081c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800819c:	f7fa fdd2 	bl	8002d44 <HAL_GetTick>
 80081a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081a2:	e008      	b.n	80081b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081a4:	f7fa fdce 	bl	8002d44 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b64      	cmp	r3, #100	; 0x64
 80081b0:	d901      	bls.n	80081b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e3d4      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081b6:	4b63      	ldr	r3, [pc, #396]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0f0      	beq.n	80081a4 <HAL_RCC_OscConfig+0xe8>
 80081c2:	e014      	b.n	80081ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c4:	f7fa fdbe 	bl	8002d44 <HAL_GetTick>
 80081c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081ca:	e008      	b.n	80081de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081cc:	f7fa fdba 	bl	8002d44 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b64      	cmp	r3, #100	; 0x64
 80081d8:	d901      	bls.n	80081de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e3c0      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081de:	4b59      	ldr	r3, [pc, #356]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1f0      	bne.n	80081cc <HAL_RCC_OscConfig+0x110>
 80081ea:	e000      	b.n	80081ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 80ca 	beq.w	8008390 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081fc:	4b51      	ldr	r3, [pc, #324]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008204:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008206:	4b4f      	ldr	r3, [pc, #316]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d007      	beq.n	8008222 <HAL_RCC_OscConfig+0x166>
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	2b18      	cmp	r3, #24
 8008216:	d156      	bne.n	80082c6 <HAL_RCC_OscConfig+0x20a>
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d151      	bne.n	80082c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008222:	4b48      	ldr	r3, [pc, #288]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <HAL_RCC_OscConfig+0x17e>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e392      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800823a:	4b42      	ldr	r3, [pc, #264]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f023 0219 	bic.w	r2, r3, #25
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	493f      	ldr	r1, [pc, #252]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008248:	4313      	orrs	r3, r2
 800824a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800824c:	f7fa fd7a 	bl	8002d44 <HAL_GetTick>
 8008250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008252:	e008      	b.n	8008266 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008254:	f7fa fd76 	bl	8002d44 <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	2b02      	cmp	r3, #2
 8008260:	d901      	bls.n	8008266 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e37c      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008266:	4b37      	ldr	r3, [pc, #220]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0304 	and.w	r3, r3, #4
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0f0      	beq.n	8008254 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008272:	f7fa fd97 	bl	8002da4 <HAL_GetREVID>
 8008276:	4603      	mov	r3, r0
 8008278:	f241 0203 	movw	r2, #4099	; 0x1003
 800827c:	4293      	cmp	r3, r2
 800827e:	d817      	bhi.n	80082b0 <HAL_RCC_OscConfig+0x1f4>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	2b40      	cmp	r3, #64	; 0x40
 8008286:	d108      	bne.n	800829a <HAL_RCC_OscConfig+0x1de>
 8008288:	4b2e      	ldr	r3, [pc, #184]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008290:	4a2c      	ldr	r2, [pc, #176]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008296:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008298:	e07a      	b.n	8008390 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800829a:	4b2a      	ldr	r3, [pc, #168]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	031b      	lsls	r3, r3, #12
 80082a8:	4926      	ldr	r1, [pc, #152]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082ae:	e06f      	b.n	8008390 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082b0:	4b24      	ldr	r3, [pc, #144]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	061b      	lsls	r3, r3, #24
 80082be:	4921      	ldr	r1, [pc, #132]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082c4:	e064      	b.n	8008390 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d047      	beq.n	800835e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80082ce:	4b1d      	ldr	r3, [pc, #116]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f023 0219 	bic.w	r2, r3, #25
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	491a      	ldr	r1, [pc, #104]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e0:	f7fa fd30 	bl	8002d44 <HAL_GetTick>
 80082e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082e8:	f7fa fd2c 	bl	8002d44 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e332      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082fa:	4b12      	ldr	r3, [pc, #72]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0304 	and.w	r3, r3, #4
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0f0      	beq.n	80082e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008306:	f7fa fd4d 	bl	8002da4 <HAL_GetREVID>
 800830a:	4603      	mov	r3, r0
 800830c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008310:	4293      	cmp	r3, r2
 8008312:	d819      	bhi.n	8008348 <HAL_RCC_OscConfig+0x28c>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	2b40      	cmp	r3, #64	; 0x40
 800831a:	d108      	bne.n	800832e <HAL_RCC_OscConfig+0x272>
 800831c:	4b09      	ldr	r3, [pc, #36]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008324:	4a07      	ldr	r2, [pc, #28]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800832a:	6053      	str	r3, [r2, #4]
 800832c:	e030      	b.n	8008390 <HAL_RCC_OscConfig+0x2d4>
 800832e:	4b05      	ldr	r3, [pc, #20]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	031b      	lsls	r3, r3, #12
 800833c:	4901      	ldr	r1, [pc, #4]	; (8008344 <HAL_RCC_OscConfig+0x288>)
 800833e:	4313      	orrs	r3, r2
 8008340:	604b      	str	r3, [r1, #4]
 8008342:	e025      	b.n	8008390 <HAL_RCC_OscConfig+0x2d4>
 8008344:	58024400 	.word	0x58024400
 8008348:	4b9a      	ldr	r3, [pc, #616]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	061b      	lsls	r3, r3, #24
 8008356:	4997      	ldr	r1, [pc, #604]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008358:	4313      	orrs	r3, r2
 800835a:	604b      	str	r3, [r1, #4]
 800835c:	e018      	b.n	8008390 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800835e:	4b95      	ldr	r3, [pc, #596]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a94      	ldr	r2, [pc, #592]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008364:	f023 0301 	bic.w	r3, r3, #1
 8008368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836a:	f7fa fceb 	bl	8002d44 <HAL_GetTick>
 800836e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008370:	e008      	b.n	8008384 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008372:	f7fa fce7 	bl	8002d44 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d901      	bls.n	8008384 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e2ed      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008384:	4b8b      	ldr	r3, [pc, #556]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1f0      	bne.n	8008372 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 80a9 	beq.w	80084f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800839e:	4b85      	ldr	r3, [pc, #532]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083a8:	4b82      	ldr	r3, [pc, #520]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d007      	beq.n	80083c4 <HAL_RCC_OscConfig+0x308>
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	2b18      	cmp	r3, #24
 80083b8:	d13a      	bne.n	8008430 <HAL_RCC_OscConfig+0x374>
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f003 0303 	and.w	r3, r3, #3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d135      	bne.n	8008430 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083c4:	4b7b      	ldr	r3, [pc, #492]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <HAL_RCC_OscConfig+0x320>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	2b80      	cmp	r3, #128	; 0x80
 80083d6:	d001      	beq.n	80083dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e2c1      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083dc:	f7fa fce2 	bl	8002da4 <HAL_GetREVID>
 80083e0:	4603      	mov	r3, r0
 80083e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d817      	bhi.n	800841a <HAL_RCC_OscConfig+0x35e>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	2b20      	cmp	r3, #32
 80083f0:	d108      	bne.n	8008404 <HAL_RCC_OscConfig+0x348>
 80083f2:	4b70      	ldr	r3, [pc, #448]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80083fa:	4a6e      	ldr	r2, [pc, #440]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80083fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008400:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008402:	e075      	b.n	80084f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008404:	4b6b      	ldr	r3, [pc, #428]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a1b      	ldr	r3, [r3, #32]
 8008410:	069b      	lsls	r3, r3, #26
 8008412:	4968      	ldr	r1, [pc, #416]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008414:	4313      	orrs	r3, r2
 8008416:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008418:	e06a      	b.n	80084f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800841a:	4b66      	ldr	r3, [pc, #408]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	061b      	lsls	r3, r3, #24
 8008428:	4962      	ldr	r1, [pc, #392]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 800842a:	4313      	orrs	r3, r2
 800842c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800842e:	e05f      	b.n	80084f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d042      	beq.n	80084be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008438:	4b5e      	ldr	r3, [pc, #376]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a5d      	ldr	r2, [pc, #372]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 800843e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008444:	f7fa fc7e 	bl	8002d44 <HAL_GetTick>
 8008448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800844a:	e008      	b.n	800845e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800844c:	f7fa fc7a 	bl	8002d44 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b02      	cmp	r3, #2
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e280      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800845e:	4b55      	ldr	r3, [pc, #340]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0f0      	beq.n	800844c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800846a:	f7fa fc9b 	bl	8002da4 <HAL_GetREVID>
 800846e:	4603      	mov	r3, r0
 8008470:	f241 0203 	movw	r2, #4099	; 0x1003
 8008474:	4293      	cmp	r3, r2
 8008476:	d817      	bhi.n	80084a8 <HAL_RCC_OscConfig+0x3ec>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	2b20      	cmp	r3, #32
 800847e:	d108      	bne.n	8008492 <HAL_RCC_OscConfig+0x3d6>
 8008480:	4b4c      	ldr	r3, [pc, #304]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008488:	4a4a      	ldr	r2, [pc, #296]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 800848a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800848e:	6053      	str	r3, [r2, #4]
 8008490:	e02e      	b.n	80084f0 <HAL_RCC_OscConfig+0x434>
 8008492:	4b48      	ldr	r3, [pc, #288]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	069b      	lsls	r3, r3, #26
 80084a0:	4944      	ldr	r1, [pc, #272]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	604b      	str	r3, [r1, #4]
 80084a6:	e023      	b.n	80084f0 <HAL_RCC_OscConfig+0x434>
 80084a8:	4b42      	ldr	r3, [pc, #264]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	061b      	lsls	r3, r3, #24
 80084b6:	493f      	ldr	r1, [pc, #252]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	60cb      	str	r3, [r1, #12]
 80084bc:	e018      	b.n	80084f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80084be:	4b3d      	ldr	r3, [pc, #244]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a3c      	ldr	r2, [pc, #240]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80084c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ca:	f7fa fc3b 	bl	8002d44 <HAL_GetTick>
 80084ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084d0:	e008      	b.n	80084e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80084d2:	f7fa fc37 	bl	8002d44 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d901      	bls.n	80084e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e23d      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084e4:	4b33      	ldr	r3, [pc, #204]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1f0      	bne.n	80084d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0308 	and.w	r3, r3, #8
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d036      	beq.n	800856a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d019      	beq.n	8008538 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008504:	4b2b      	ldr	r3, [pc, #172]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008508:	4a2a      	ldr	r2, [pc, #168]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 800850a:	f043 0301 	orr.w	r3, r3, #1
 800850e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008510:	f7fa fc18 	bl	8002d44 <HAL_GetTick>
 8008514:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008516:	e008      	b.n	800852a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008518:	f7fa fc14 	bl	8002d44 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	2b02      	cmp	r3, #2
 8008524:	d901      	bls.n	800852a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e21a      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800852a:	4b22      	ldr	r3, [pc, #136]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 800852c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0f0      	beq.n	8008518 <HAL_RCC_OscConfig+0x45c>
 8008536:	e018      	b.n	800856a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008538:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 800853a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800853c:	4a1d      	ldr	r2, [pc, #116]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 800853e:	f023 0301 	bic.w	r3, r3, #1
 8008542:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008544:	f7fa fbfe 	bl	8002d44 <HAL_GetTick>
 8008548:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800854c:	f7fa fbfa 	bl	8002d44 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e200      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800855e:	4b15      	ldr	r3, [pc, #84]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f0      	bne.n	800854c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	2b00      	cmp	r3, #0
 8008574:	d039      	beq.n	80085ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d01c      	beq.n	80085b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800857e:	4b0d      	ldr	r3, [pc, #52]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a0c      	ldr	r2, [pc, #48]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 8008584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008588:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800858a:	f7fa fbdb 	bl	8002d44 <HAL_GetTick>
 800858e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008590:	e008      	b.n	80085a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008592:	f7fa fbd7 	bl	8002d44 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e1dd      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085a4:	4b03      	ldr	r3, [pc, #12]	; (80085b4 <HAL_RCC_OscConfig+0x4f8>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0f0      	beq.n	8008592 <HAL_RCC_OscConfig+0x4d6>
 80085b0:	e01b      	b.n	80085ea <HAL_RCC_OscConfig+0x52e>
 80085b2:	bf00      	nop
 80085b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085b8:	4b9b      	ldr	r3, [pc, #620]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a9a      	ldr	r2, [pc, #616]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80085be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085c4:	f7fa fbbe 	bl	8002d44 <HAL_GetTick>
 80085c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085ca:	e008      	b.n	80085de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085cc:	f7fa fbba 	bl	8002d44 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d901      	bls.n	80085de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e1c0      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085de:	4b92      	ldr	r3, [pc, #584]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1f0      	bne.n	80085cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0304 	and.w	r3, r3, #4
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 8081 	beq.w	80086fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80085f8:	4b8c      	ldr	r3, [pc, #560]	; (800882c <HAL_RCC_OscConfig+0x770>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a8b      	ldr	r2, [pc, #556]	; (800882c <HAL_RCC_OscConfig+0x770>)
 80085fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008602:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008604:	f7fa fb9e 	bl	8002d44 <HAL_GetTick>
 8008608:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800860a:	e008      	b.n	800861e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800860c:	f7fa fb9a 	bl	8002d44 <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	2b64      	cmp	r3, #100	; 0x64
 8008618:	d901      	bls.n	800861e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e1a0      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800861e:	4b83      	ldr	r3, [pc, #524]	; (800882c <HAL_RCC_OscConfig+0x770>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0f0      	beq.n	800860c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d106      	bne.n	8008640 <HAL_RCC_OscConfig+0x584>
 8008632:	4b7d      	ldr	r3, [pc, #500]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008636:	4a7c      	ldr	r2, [pc, #496]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008638:	f043 0301 	orr.w	r3, r3, #1
 800863c:	6713      	str	r3, [r2, #112]	; 0x70
 800863e:	e02d      	b.n	800869c <HAL_RCC_OscConfig+0x5e0>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10c      	bne.n	8008662 <HAL_RCC_OscConfig+0x5a6>
 8008648:	4b77      	ldr	r3, [pc, #476]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 800864a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800864c:	4a76      	ldr	r2, [pc, #472]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	6713      	str	r3, [r2, #112]	; 0x70
 8008654:	4b74      	ldr	r3, [pc, #464]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008658:	4a73      	ldr	r2, [pc, #460]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 800865a:	f023 0304 	bic.w	r3, r3, #4
 800865e:	6713      	str	r3, [r2, #112]	; 0x70
 8008660:	e01c      	b.n	800869c <HAL_RCC_OscConfig+0x5e0>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	2b05      	cmp	r3, #5
 8008668:	d10c      	bne.n	8008684 <HAL_RCC_OscConfig+0x5c8>
 800866a:	4b6f      	ldr	r3, [pc, #444]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 800866c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866e:	4a6e      	ldr	r2, [pc, #440]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008670:	f043 0304 	orr.w	r3, r3, #4
 8008674:	6713      	str	r3, [r2, #112]	; 0x70
 8008676:	4b6c      	ldr	r3, [pc, #432]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867a:	4a6b      	ldr	r2, [pc, #428]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 800867c:	f043 0301 	orr.w	r3, r3, #1
 8008680:	6713      	str	r3, [r2, #112]	; 0x70
 8008682:	e00b      	b.n	800869c <HAL_RCC_OscConfig+0x5e0>
 8008684:	4b68      	ldr	r3, [pc, #416]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008688:	4a67      	ldr	r2, [pc, #412]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 800868a:	f023 0301 	bic.w	r3, r3, #1
 800868e:	6713      	str	r3, [r2, #112]	; 0x70
 8008690:	4b65      	ldr	r3, [pc, #404]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008694:	4a64      	ldr	r2, [pc, #400]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008696:	f023 0304 	bic.w	r3, r3, #4
 800869a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d015      	beq.n	80086d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a4:	f7fa fb4e 	bl	8002d44 <HAL_GetTick>
 80086a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086aa:	e00a      	b.n	80086c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ac:	f7fa fb4a 	bl	8002d44 <HAL_GetTick>
 80086b0:	4602      	mov	r2, r0
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e14e      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086c2:	4b59      	ldr	r3, [pc, #356]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80086c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0ee      	beq.n	80086ac <HAL_RCC_OscConfig+0x5f0>
 80086ce:	e014      	b.n	80086fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d0:	f7fa fb38 	bl	8002d44 <HAL_GetTick>
 80086d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80086d6:	e00a      	b.n	80086ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086d8:	f7fa fb34 	bl	8002d44 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d901      	bls.n	80086ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e138      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80086ee:	4b4e      	ldr	r3, [pc, #312]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80086f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1ee      	bne.n	80086d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 812d 	beq.w	800895e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008704:	4b48      	ldr	r3, [pc, #288]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800870c:	2b18      	cmp	r3, #24
 800870e:	f000 80bd 	beq.w	800888c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	2b02      	cmp	r3, #2
 8008718:	f040 809e 	bne.w	8008858 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800871c:	4b42      	ldr	r3, [pc, #264]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a41      	ldr	r2, [pc, #260]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008728:	f7fa fb0c 	bl	8002d44 <HAL_GetTick>
 800872c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800872e:	e008      	b.n	8008742 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008730:	f7fa fb08 	bl	8002d44 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b02      	cmp	r3, #2
 800873c:	d901      	bls.n	8008742 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e10e      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008742:	4b39      	ldr	r3, [pc, #228]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1f0      	bne.n	8008730 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800874e:	4b36      	ldr	r3, [pc, #216]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008752:	4b37      	ldr	r3, [pc, #220]	; (8008830 <HAL_RCC_OscConfig+0x774>)
 8008754:	4013      	ands	r3, r2
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800875e:	0112      	lsls	r2, r2, #4
 8008760:	430a      	orrs	r2, r1
 8008762:	4931      	ldr	r1, [pc, #196]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008764:	4313      	orrs	r3, r2
 8008766:	628b      	str	r3, [r1, #40]	; 0x28
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876c:	3b01      	subs	r3, #1
 800876e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008776:	3b01      	subs	r3, #1
 8008778:	025b      	lsls	r3, r3, #9
 800877a:	b29b      	uxth	r3, r3
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	3b01      	subs	r3, #1
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008790:	3b01      	subs	r3, #1
 8008792:	061b      	lsls	r3, r3, #24
 8008794:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008798:	4923      	ldr	r1, [pc, #140]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 800879a:	4313      	orrs	r3, r2
 800879c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800879e:	4b22      	ldr	r3, [pc, #136]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	4a21      	ldr	r2, [pc, #132]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087a4:	f023 0301 	bic.w	r3, r3, #1
 80087a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80087aa:	4b1f      	ldr	r3, [pc, #124]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ae:	4b21      	ldr	r3, [pc, #132]	; (8008834 <HAL_RCC_OscConfig+0x778>)
 80087b0:	4013      	ands	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80087b6:	00d2      	lsls	r2, r2, #3
 80087b8:	491b      	ldr	r1, [pc, #108]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80087be:	4b1a      	ldr	r3, [pc, #104]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	f023 020c 	bic.w	r2, r3, #12
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	4917      	ldr	r1, [pc, #92]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087cc:	4313      	orrs	r3, r2
 80087ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80087d0:	4b15      	ldr	r3, [pc, #84]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	f023 0202 	bic.w	r2, r3, #2
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087dc:	4912      	ldr	r1, [pc, #72]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80087e2:	4b11      	ldr	r3, [pc, #68]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	4a10      	ldr	r2, [pc, #64]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087ee:	4b0e      	ldr	r3, [pc, #56]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f2:	4a0d      	ldr	r2, [pc, #52]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80087fa:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	4a0a      	ldr	r2, [pc, #40]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008804:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008806:	4b08      	ldr	r3, [pc, #32]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	4a07      	ldr	r2, [pc, #28]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 800880c:	f043 0301 	orr.w	r3, r3, #1
 8008810:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a04      	ldr	r2, [pc, #16]	; (8008828 <HAL_RCC_OscConfig+0x76c>)
 8008818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800881c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881e:	f7fa fa91 	bl	8002d44 <HAL_GetTick>
 8008822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008824:	e011      	b.n	800884a <HAL_RCC_OscConfig+0x78e>
 8008826:	bf00      	nop
 8008828:	58024400 	.word	0x58024400
 800882c:	58024800 	.word	0x58024800
 8008830:	fffffc0c 	.word	0xfffffc0c
 8008834:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008838:	f7fa fa84 	bl	8002d44 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b02      	cmp	r3, #2
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e08a      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800884a:	4b47      	ldr	r3, [pc, #284]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0f0      	beq.n	8008838 <HAL_RCC_OscConfig+0x77c>
 8008856:	e082      	b.n	800895e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008858:	4b43      	ldr	r3, [pc, #268]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a42      	ldr	r2, [pc, #264]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 800885e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008864:	f7fa fa6e 	bl	8002d44 <HAL_GetTick>
 8008868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800886a:	e008      	b.n	800887e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800886c:	f7fa fa6a 	bl	8002d44 <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b02      	cmp	r3, #2
 8008878:	d901      	bls.n	800887e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e070      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800887e:	4b3a      	ldr	r3, [pc, #232]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f0      	bne.n	800886c <HAL_RCC_OscConfig+0x7b0>
 800888a:	e068      	b.n	800895e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800888c:	4b36      	ldr	r3, [pc, #216]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008892:	4b35      	ldr	r3, [pc, #212]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	2b01      	cmp	r3, #1
 800889e:	d031      	beq.n	8008904 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f003 0203 	and.w	r2, r3, #3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d12a      	bne.n	8008904 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	091b      	lsrs	r3, r3, #4
 80088b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d122      	bne.n	8008904 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d11a      	bne.n	8008904 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	0a5b      	lsrs	r3, r3, #9
 80088d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80088dc:	429a      	cmp	r2, r3
 80088de:	d111      	bne.n	8008904 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	0c1b      	lsrs	r3, r3, #16
 80088e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d108      	bne.n	8008904 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	0e1b      	lsrs	r3, r3, #24
 80088f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008900:	429a      	cmp	r2, r3
 8008902:	d001      	beq.n	8008908 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e02b      	b.n	8008960 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008908:	4b17      	ldr	r3, [pc, #92]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 800890a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890c:	08db      	lsrs	r3, r3, #3
 800890e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008912:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	429a      	cmp	r2, r3
 800891c:	d01f      	beq.n	800895e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800891e:	4b12      	ldr	r3, [pc, #72]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 8008920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008922:	4a11      	ldr	r2, [pc, #68]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 8008924:	f023 0301 	bic.w	r3, r3, #1
 8008928:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800892a:	f7fa fa0b 	bl	8002d44 <HAL_GetTick>
 800892e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008930:	bf00      	nop
 8008932:	f7fa fa07 	bl	8002d44 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	4293      	cmp	r3, r2
 800893c:	d0f9      	beq.n	8008932 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800893e:	4b0a      	ldr	r3, [pc, #40]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 8008940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008942:	4b0a      	ldr	r3, [pc, #40]	; (800896c <HAL_RCC_OscConfig+0x8b0>)
 8008944:	4013      	ands	r3, r2
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800894a:	00d2      	lsls	r2, r2, #3
 800894c:	4906      	ldr	r1, [pc, #24]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 800894e:	4313      	orrs	r3, r2
 8008950:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008952:	4b05      	ldr	r3, [pc, #20]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 8008954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008956:	4a04      	ldr	r2, [pc, #16]	; (8008968 <HAL_RCC_OscConfig+0x8ac>)
 8008958:	f043 0301 	orr.w	r3, r3, #1
 800895c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3730      	adds	r7, #48	; 0x30
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	58024400 	.word	0x58024400
 800896c:	ffff0007 	.word	0xffff0007

08008970 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e19c      	b.n	8008cbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008984:	4b8a      	ldr	r3, [pc, #552]	; (8008bb0 <HAL_RCC_ClockConfig+0x240>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d910      	bls.n	80089b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008992:	4b87      	ldr	r3, [pc, #540]	; (8008bb0 <HAL_RCC_ClockConfig+0x240>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f023 020f 	bic.w	r2, r3, #15
 800899a:	4985      	ldr	r1, [pc, #532]	; (8008bb0 <HAL_RCC_ClockConfig+0x240>)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	4313      	orrs	r3, r2
 80089a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089a2:	4b83      	ldr	r3, [pc, #524]	; (8008bb0 <HAL_RCC_ClockConfig+0x240>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d001      	beq.n	80089b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e184      	b.n	8008cbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0304 	and.w	r3, r3, #4
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d010      	beq.n	80089e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	691a      	ldr	r2, [r3, #16]
 80089c4:	4b7b      	ldr	r3, [pc, #492]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d908      	bls.n	80089e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089d0:	4b78      	ldr	r3, [pc, #480]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	4975      	ldr	r1, [pc, #468]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d010      	beq.n	8008a10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695a      	ldr	r2, [r3, #20]
 80089f2:	4b70      	ldr	r3, [pc, #448]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d908      	bls.n	8008a10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089fe:	4b6d      	ldr	r3, [pc, #436]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	496a      	ldr	r1, [pc, #424]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0310 	and.w	r3, r3, #16
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d010      	beq.n	8008a3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699a      	ldr	r2, [r3, #24]
 8008a20:	4b64      	ldr	r3, [pc, #400]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d908      	bls.n	8008a3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a2c:	4b61      	ldr	r3, [pc, #388]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	495e      	ldr	r1, [pc, #376]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0320 	and.w	r3, r3, #32
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d010      	beq.n	8008a6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	69da      	ldr	r2, [r3, #28]
 8008a4e:	4b59      	ldr	r3, [pc, #356]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d908      	bls.n	8008a6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008a5a:	4b56      	ldr	r3, [pc, #344]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	4953      	ldr	r1, [pc, #332]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d010      	beq.n	8008a9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	4b4d      	ldr	r3, [pc, #308]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	f003 030f 	and.w	r3, r3, #15
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d908      	bls.n	8008a9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a88:	4b4a      	ldr	r3, [pc, #296]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f023 020f 	bic.w	r2, r3, #15
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	4947      	ldr	r1, [pc, #284]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d055      	beq.n	8008b52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008aa6:	4b43      	ldr	r3, [pc, #268]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	4940      	ldr	r1, [pc, #256]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d107      	bne.n	8008ad0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ac0:	4b3c      	ldr	r3, [pc, #240]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d121      	bne.n	8008b10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e0f6      	b.n	8008cbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d107      	bne.n	8008ae8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ad8:	4b36      	ldr	r3, [pc, #216]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d115      	bne.n	8008b10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e0ea      	b.n	8008cbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d107      	bne.n	8008b00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008af0:	4b30      	ldr	r3, [pc, #192]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d109      	bne.n	8008b10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e0de      	b.n	8008cbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b00:	4b2c      	ldr	r3, [pc, #176]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e0d6      	b.n	8008cbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b10:	4b28      	ldr	r3, [pc, #160]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	f023 0207 	bic.w	r2, r3, #7
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	4925      	ldr	r1, [pc, #148]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b22:	f7fa f90f 	bl	8002d44 <HAL_GetTick>
 8008b26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b28:	e00a      	b.n	8008b40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b2a:	f7fa f90b 	bl	8002d44 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d901      	bls.n	8008b40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e0be      	b.n	8008cbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b40:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	00db      	lsls	r3, r3, #3
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d1eb      	bne.n	8008b2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d010      	beq.n	8008b80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	4b14      	ldr	r3, [pc, #80]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f003 030f 	and.w	r3, r3, #15
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d208      	bcs.n	8008b80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b6e:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	f023 020f 	bic.w	r2, r3, #15
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	490e      	ldr	r1, [pc, #56]	; (8008bb4 <HAL_RCC_ClockConfig+0x244>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b80:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <HAL_RCC_ClockConfig+0x240>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d214      	bcs.n	8008bb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b8e:	4b08      	ldr	r3, [pc, #32]	; (8008bb0 <HAL_RCC_ClockConfig+0x240>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f023 020f 	bic.w	r2, r3, #15
 8008b96:	4906      	ldr	r1, [pc, #24]	; (8008bb0 <HAL_RCC_ClockConfig+0x240>)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b9e:	4b04      	ldr	r3, [pc, #16]	; (8008bb0 <HAL_RCC_ClockConfig+0x240>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d005      	beq.n	8008bb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e086      	b.n	8008cbe <HAL_RCC_ClockConfig+0x34e>
 8008bb0:	52002000 	.word	0x52002000
 8008bb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 0304 	and.w	r3, r3, #4
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d010      	beq.n	8008be6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	691a      	ldr	r2, [r3, #16]
 8008bc8:	4b3f      	ldr	r3, [pc, #252]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d208      	bcs.n	8008be6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008bd4:	4b3c      	ldr	r3, [pc, #240]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	4939      	ldr	r1, [pc, #228]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0308 	and.w	r3, r3, #8
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d010      	beq.n	8008c14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	695a      	ldr	r2, [r3, #20]
 8008bf6:	4b34      	ldr	r3, [pc, #208]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d208      	bcs.n	8008c14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c02:	4b31      	ldr	r3, [pc, #196]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	492e      	ldr	r1, [pc, #184]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008c10:	4313      	orrs	r3, r2
 8008c12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d010      	beq.n	8008c42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	699a      	ldr	r2, [r3, #24]
 8008c24:	4b28      	ldr	r3, [pc, #160]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d208      	bcs.n	8008c42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c30:	4b25      	ldr	r3, [pc, #148]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	4922      	ldr	r1, [pc, #136]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d010      	beq.n	8008c70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69da      	ldr	r2, [r3, #28]
 8008c52:	4b1d      	ldr	r3, [pc, #116]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d208      	bcs.n	8008c70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c5e:	4b1a      	ldr	r3, [pc, #104]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	4917      	ldr	r1, [pc, #92]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c70:	f000 f834 	bl	8008cdc <HAL_RCC_GetSysClockFreq>
 8008c74:	4602      	mov	r2, r0
 8008c76:	4b14      	ldr	r3, [pc, #80]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	0a1b      	lsrs	r3, r3, #8
 8008c7c:	f003 030f 	and.w	r3, r3, #15
 8008c80:	4912      	ldr	r1, [pc, #72]	; (8008ccc <HAL_RCC_ClockConfig+0x35c>)
 8008c82:	5ccb      	ldrb	r3, [r1, r3]
 8008c84:	f003 031f 	and.w	r3, r3, #31
 8008c88:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c8e:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <HAL_RCC_ClockConfig+0x358>)
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	f003 030f 	and.w	r3, r3, #15
 8008c96:	4a0d      	ldr	r2, [pc, #52]	; (8008ccc <HAL_RCC_ClockConfig+0x35c>)
 8008c98:	5cd3      	ldrb	r3, [r2, r3]
 8008c9a:	f003 031f 	and.w	r3, r3, #31
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca4:	4a0a      	ldr	r2, [pc, #40]	; (8008cd0 <HAL_RCC_ClockConfig+0x360>)
 8008ca6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ca8:	4a0a      	ldr	r2, [pc, #40]	; (8008cd4 <HAL_RCC_ClockConfig+0x364>)
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008cae:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <HAL_RCC_ClockConfig+0x368>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7f9 fffc 	bl	8002cb0 <HAL_InitTick>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	58024400 	.word	0x58024400
 8008ccc:	08012ae0 	.word	0x08012ae0
 8008cd0:	24000008 	.word	0x24000008
 8008cd4:	24000004 	.word	0x24000004
 8008cd8:	2400000c 	.word	0x2400000c

08008cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b089      	sub	sp, #36	; 0x24
 8008ce0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ce2:	4bb3      	ldr	r3, [pc, #716]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cea:	2b18      	cmp	r3, #24
 8008cec:	f200 8155 	bhi.w	8008f9a <HAL_RCC_GetSysClockFreq+0x2be>
 8008cf0:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf6:	bf00      	nop
 8008cf8:	08008d5d 	.word	0x08008d5d
 8008cfc:	08008f9b 	.word	0x08008f9b
 8008d00:	08008f9b 	.word	0x08008f9b
 8008d04:	08008f9b 	.word	0x08008f9b
 8008d08:	08008f9b 	.word	0x08008f9b
 8008d0c:	08008f9b 	.word	0x08008f9b
 8008d10:	08008f9b 	.word	0x08008f9b
 8008d14:	08008f9b 	.word	0x08008f9b
 8008d18:	08008d83 	.word	0x08008d83
 8008d1c:	08008f9b 	.word	0x08008f9b
 8008d20:	08008f9b 	.word	0x08008f9b
 8008d24:	08008f9b 	.word	0x08008f9b
 8008d28:	08008f9b 	.word	0x08008f9b
 8008d2c:	08008f9b 	.word	0x08008f9b
 8008d30:	08008f9b 	.word	0x08008f9b
 8008d34:	08008f9b 	.word	0x08008f9b
 8008d38:	08008d89 	.word	0x08008d89
 8008d3c:	08008f9b 	.word	0x08008f9b
 8008d40:	08008f9b 	.word	0x08008f9b
 8008d44:	08008f9b 	.word	0x08008f9b
 8008d48:	08008f9b 	.word	0x08008f9b
 8008d4c:	08008f9b 	.word	0x08008f9b
 8008d50:	08008f9b 	.word	0x08008f9b
 8008d54:	08008f9b 	.word	0x08008f9b
 8008d58:	08008d8f 	.word	0x08008d8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d5c:	4b94      	ldr	r3, [pc, #592]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0320 	and.w	r3, r3, #32
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d009      	beq.n	8008d7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d68:	4b91      	ldr	r3, [pc, #580]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	08db      	lsrs	r3, r3, #3
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	4a90      	ldr	r2, [pc, #576]	; (8008fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d74:	fa22 f303 	lsr.w	r3, r2, r3
 8008d78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008d7a:	e111      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008d7c:	4b8d      	ldr	r3, [pc, #564]	; (8008fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d7e:	61bb      	str	r3, [r7, #24]
      break;
 8008d80:	e10e      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008d82:	4b8d      	ldr	r3, [pc, #564]	; (8008fb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d84:	61bb      	str	r3, [r7, #24]
      break;
 8008d86:	e10b      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008d88:	4b8c      	ldr	r3, [pc, #560]	; (8008fbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008d8a:	61bb      	str	r3, [r7, #24]
      break;
 8008d8c:	e108      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d8e:	4b88      	ldr	r3, [pc, #544]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008d98:	4b85      	ldr	r3, [pc, #532]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9c:	091b      	lsrs	r3, r3, #4
 8008d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008da2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008da4:	4b82      	ldr	r3, [pc, #520]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008dae:	4b80      	ldr	r3, [pc, #512]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db2:	08db      	lsrs	r3, r3, #3
 8008db4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	fb02 f303 	mul.w	r3, r2, r3
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 80e1 	beq.w	8008f94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	f000 8083 	beq.w	8008ee0 <HAL_RCC_GetSysClockFreq+0x204>
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	f200 80a1 	bhi.w	8008f24 <HAL_RCC_GetSysClockFreq+0x248>
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d003      	beq.n	8008df0 <HAL_RCC_GetSysClockFreq+0x114>
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d056      	beq.n	8008e9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8008dee:	e099      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008df0:	4b6f      	ldr	r3, [pc, #444]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d02d      	beq.n	8008e58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dfc:	4b6c      	ldr	r3, [pc, #432]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	08db      	lsrs	r3, r3, #3
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	4a6b      	ldr	r2, [pc, #428]	; (8008fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e08:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	ee07 3a90 	vmov	s15, r3
 8008e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	ee07 3a90 	vmov	s15, r3
 8008e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e26:	4b62      	ldr	r3, [pc, #392]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008e56:	e087      	b.n	8008f68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008fc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6a:	4b51      	ldr	r3, [pc, #324]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e9a:	e065      	b.n	8008f68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008fc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eae:	4b40      	ldr	r3, [pc, #256]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ec2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ede:	e043      	b.n	8008f68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008fcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8008eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef2:	4b2f      	ldr	r3, [pc, #188]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f22:	e021      	b.n	8008f68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008fc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f36:	4b1e      	ldr	r3, [pc, #120]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008f68:	4b11      	ldr	r3, [pc, #68]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	0a5b      	lsrs	r3, r3, #9
 8008f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f72:	3301      	adds	r3, #1
 8008f74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	ee07 3a90 	vmov	s15, r3
 8008f7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f8c:	ee17 3a90 	vmov	r3, s15
 8008f90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008f92:	e005      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
      break;
 8008f98:	e002      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008f9a:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f9c:	61bb      	str	r3, [r7, #24]
      break;
 8008f9e:	bf00      	nop
  }

  return sysclockfreq;
 8008fa0:	69bb      	ldr	r3, [r7, #24]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3724      	adds	r7, #36	; 0x24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	58024400 	.word	0x58024400
 8008fb4:	03d09000 	.word	0x03d09000
 8008fb8:	003d0900 	.word	0x003d0900
 8008fbc:	017d7840 	.word	0x017d7840
 8008fc0:	46000000 	.word	0x46000000
 8008fc4:	4c742400 	.word	0x4c742400
 8008fc8:	4a742400 	.word	0x4a742400
 8008fcc:	4bbebc20 	.word	0x4bbebc20

08008fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008fd6:	f7ff fe81 	bl	8008cdc <HAL_RCC_GetSysClockFreq>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	4b10      	ldr	r3, [pc, #64]	; (8009020 <HAL_RCC_GetHCLKFreq+0x50>)
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	0a1b      	lsrs	r3, r3, #8
 8008fe2:	f003 030f 	and.w	r3, r3, #15
 8008fe6:	490f      	ldr	r1, [pc, #60]	; (8009024 <HAL_RCC_GetHCLKFreq+0x54>)
 8008fe8:	5ccb      	ldrb	r3, [r1, r3]
 8008fea:	f003 031f 	and.w	r3, r3, #31
 8008fee:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ff4:	4b0a      	ldr	r3, [pc, #40]	; (8009020 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	f003 030f 	and.w	r3, r3, #15
 8008ffc:	4a09      	ldr	r2, [pc, #36]	; (8009024 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ffe:	5cd3      	ldrb	r3, [r2, r3]
 8009000:	f003 031f 	and.w	r3, r3, #31
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	fa22 f303 	lsr.w	r3, r2, r3
 800900a:	4a07      	ldr	r2, [pc, #28]	; (8009028 <HAL_RCC_GetHCLKFreq+0x58>)
 800900c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800900e:	4a07      	ldr	r2, [pc, #28]	; (800902c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009014:	4b04      	ldr	r3, [pc, #16]	; (8009028 <HAL_RCC_GetHCLKFreq+0x58>)
 8009016:	681b      	ldr	r3, [r3, #0]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	58024400 	.word	0x58024400
 8009024:	08012ae0 	.word	0x08012ae0
 8009028:	24000008 	.word	0x24000008
 800902c:	24000004 	.word	0x24000004

08009030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009034:	f7ff ffcc 	bl	8008fd0 <HAL_RCC_GetHCLKFreq>
 8009038:	4602      	mov	r2, r0
 800903a:	4b06      	ldr	r3, [pc, #24]	; (8009054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	091b      	lsrs	r3, r3, #4
 8009040:	f003 0307 	and.w	r3, r3, #7
 8009044:	4904      	ldr	r1, [pc, #16]	; (8009058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009046:	5ccb      	ldrb	r3, [r1, r3]
 8009048:	f003 031f 	and.w	r3, r3, #31
 800904c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009050:	4618      	mov	r0, r3
 8009052:	bd80      	pop	{r7, pc}
 8009054:	58024400 	.word	0x58024400
 8009058:	08012ae0 	.word	0x08012ae0

0800905c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009060:	f7ff ffb6 	bl	8008fd0 <HAL_RCC_GetHCLKFreq>
 8009064:	4602      	mov	r2, r0
 8009066:	4b06      	ldr	r3, [pc, #24]	; (8009080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	0a1b      	lsrs	r3, r3, #8
 800906c:	f003 0307 	and.w	r3, r3, #7
 8009070:	4904      	ldr	r1, [pc, #16]	; (8009084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009072:	5ccb      	ldrb	r3, [r1, r3]
 8009074:	f003 031f 	and.w	r3, r3, #31
 8009078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800907c:	4618      	mov	r0, r3
 800907e:	bd80      	pop	{r7, pc}
 8009080:	58024400 	.word	0x58024400
 8009084:	08012ae0 	.word	0x08012ae0

08009088 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800908c:	b0ca      	sub	sp, #296	; 0x128
 800908e:	af00      	add	r7, sp, #0
 8009090:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009094:	2300      	movs	r3, #0
 8009096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800909a:	2300      	movs	r3, #0
 800909c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80090a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80090ac:	2500      	movs	r5, #0
 80090ae:	ea54 0305 	orrs.w	r3, r4, r5
 80090b2:	d049      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80090b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090be:	d02f      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80090c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090c4:	d828      	bhi.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80090c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090ca:	d01a      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80090cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090d0:	d822      	bhi.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80090d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090da:	d007      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80090dc:	e01c      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090de:	4bb8      	ldr	r3, [pc, #736]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e2:	4ab7      	ldr	r2, [pc, #732]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80090ea:	e01a      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f0:	3308      	adds	r3, #8
 80090f2:	2102      	movs	r1, #2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f002 fb61 	bl	800b7bc <RCCEx_PLL2_Config>
 80090fa:	4603      	mov	r3, r0
 80090fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009100:	e00f      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009106:	3328      	adds	r3, #40	; 0x28
 8009108:	2102      	movs	r1, #2
 800910a:	4618      	mov	r0, r3
 800910c:	f002 fc08 	bl	800b920 <RCCEx_PLL3_Config>
 8009110:	4603      	mov	r3, r0
 8009112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009116:	e004      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800911e:	e000      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10a      	bne.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800912a:	4ba5      	ldr	r3, [pc, #660]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800912c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009138:	4aa1      	ldr	r2, [pc, #644]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800913a:	430b      	orrs	r3, r1
 800913c:	6513      	str	r3, [r2, #80]	; 0x50
 800913e:	e003      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009154:	f04f 0900 	mov.w	r9, #0
 8009158:	ea58 0309 	orrs.w	r3, r8, r9
 800915c:	d047      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009164:	2b04      	cmp	r3, #4
 8009166:	d82a      	bhi.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009168:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	08009185 	.word	0x08009185
 8009174:	08009193 	.word	0x08009193
 8009178:	080091a9 	.word	0x080091a9
 800917c:	080091c7 	.word	0x080091c7
 8009180:	080091c7 	.word	0x080091c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009184:	4b8e      	ldr	r3, [pc, #568]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009188:	4a8d      	ldr	r2, [pc, #564]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800918a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800918e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009190:	e01a      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009196:	3308      	adds	r3, #8
 8009198:	2100      	movs	r1, #0
 800919a:	4618      	mov	r0, r3
 800919c:	f002 fb0e 	bl	800b7bc <RCCEx_PLL2_Config>
 80091a0:	4603      	mov	r3, r0
 80091a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091a6:	e00f      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ac:	3328      	adds	r3, #40	; 0x28
 80091ae:	2100      	movs	r1, #0
 80091b0:	4618      	mov	r0, r3
 80091b2:	f002 fbb5 	bl	800b920 <RCCEx_PLL3_Config>
 80091b6:	4603      	mov	r3, r0
 80091b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091bc:	e004      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091c4:	e000      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80091c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80091d0:	4b7b      	ldr	r3, [pc, #492]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d4:	f023 0107 	bic.w	r1, r3, #7
 80091d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091de:	4a78      	ldr	r2, [pc, #480]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091e0:	430b      	orrs	r3, r1
 80091e2:	6513      	str	r3, [r2, #80]	; 0x50
 80091e4:	e003      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80091fa:	f04f 0b00 	mov.w	fp, #0
 80091fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8009202:	d04c      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800920a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800920e:	d030      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009214:	d829      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009216:	2bc0      	cmp	r3, #192	; 0xc0
 8009218:	d02d      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800921a:	2bc0      	cmp	r3, #192	; 0xc0
 800921c:	d825      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800921e:	2b80      	cmp	r3, #128	; 0x80
 8009220:	d018      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009222:	2b80      	cmp	r3, #128	; 0x80
 8009224:	d821      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800922a:	2b40      	cmp	r3, #64	; 0x40
 800922c:	d007      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800922e:	e01c      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009230:	4b63      	ldr	r3, [pc, #396]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	4a62      	ldr	r2, [pc, #392]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800923a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800923c:	e01c      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800923e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009242:	3308      	adds	r3, #8
 8009244:	2100      	movs	r1, #0
 8009246:	4618      	mov	r0, r3
 8009248:	f002 fab8 	bl	800b7bc <RCCEx_PLL2_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009252:	e011      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009258:	3328      	adds	r3, #40	; 0x28
 800925a:	2100      	movs	r1, #0
 800925c:	4618      	mov	r0, r3
 800925e:	f002 fb5f 	bl	800b920 <RCCEx_PLL3_Config>
 8009262:	4603      	mov	r3, r0
 8009264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009268:	e006      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009270:	e002      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009272:	bf00      	nop
 8009274:	e000      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009280:	4b4f      	ldr	r3, [pc, #316]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009284:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800928c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800928e:	4a4c      	ldr	r2, [pc, #304]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009290:	430b      	orrs	r3, r1
 8009292:	6513      	str	r3, [r2, #80]	; 0x50
 8009294:	e003      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800929a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800929e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80092aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80092ae:	2300      	movs	r3, #0
 80092b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80092b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80092b8:	460b      	mov	r3, r1
 80092ba:	4313      	orrs	r3, r2
 80092bc:	d053      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80092be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80092c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092ca:	d035      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80092cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092d0:	d82e      	bhi.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80092d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80092d6:	d031      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80092d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80092dc:	d828      	bhi.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80092de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092e2:	d01a      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80092e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092e8:	d822      	bhi.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80092ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092f2:	d007      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80092f4:	e01c      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092f6:	4b32      	ldr	r3, [pc, #200]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fa:	4a31      	ldr	r2, [pc, #196]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009300:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009302:	e01c      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009308:	3308      	adds	r3, #8
 800930a:	2100      	movs	r1, #0
 800930c:	4618      	mov	r0, r3
 800930e:	f002 fa55 	bl	800b7bc <RCCEx_PLL2_Config>
 8009312:	4603      	mov	r3, r0
 8009314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009318:	e011      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800931a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800931e:	3328      	adds	r3, #40	; 0x28
 8009320:	2100      	movs	r1, #0
 8009322:	4618      	mov	r0, r3
 8009324:	f002 fafc 	bl	800b920 <RCCEx_PLL3_Config>
 8009328:	4603      	mov	r3, r0
 800932a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800932e:	e006      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009336:	e002      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009338:	bf00      	nop
 800933a:	e000      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800933c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800933e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10b      	bne.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009346:	4b1e      	ldr	r3, [pc, #120]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800934a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800934e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009352:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009356:	4a1a      	ldr	r2, [pc, #104]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009358:	430b      	orrs	r3, r1
 800935a:	6593      	str	r3, [r2, #88]	; 0x58
 800935c:	e003      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800935e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009372:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009376:	2300      	movs	r3, #0
 8009378:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800937c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009380:	460b      	mov	r3, r1
 8009382:	4313      	orrs	r3, r2
 8009384:	d056      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800938e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009392:	d038      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009398:	d831      	bhi.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800939a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800939e:	d034      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80093a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093a4:	d82b      	bhi.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80093a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093aa:	d01d      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80093ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093b0:	d825      	bhi.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d006      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80093b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093ba:	d00a      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80093bc:	e01f      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80093be:	bf00      	nop
 80093c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c4:	4ba2      	ldr	r3, [pc, #648]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	4aa1      	ldr	r2, [pc, #644]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093d0:	e01c      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d6:	3308      	adds	r3, #8
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 f9ee 	bl	800b7bc <RCCEx_PLL2_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80093e6:	e011      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ec:	3328      	adds	r3, #40	; 0x28
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f002 fa95 	bl	800b920 <RCCEx_PLL3_Config>
 80093f6:	4603      	mov	r3, r0
 80093f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093fc:	e006      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009404:	e002      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009406:	bf00      	nop
 8009408:	e000      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800940a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800940c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10b      	bne.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009414:	4b8e      	ldr	r3, [pc, #568]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009418:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800941c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009420:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009424:	4a8a      	ldr	r2, [pc, #552]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009426:	430b      	orrs	r3, r1
 8009428:	6593      	str	r3, [r2, #88]	; 0x58
 800942a:	e003      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009430:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009444:	2300      	movs	r3, #0
 8009446:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800944a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800944e:	460b      	mov	r3, r1
 8009450:	4313      	orrs	r3, r2
 8009452:	d03a      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800945a:	2b30      	cmp	r3, #48	; 0x30
 800945c:	d01f      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800945e:	2b30      	cmp	r3, #48	; 0x30
 8009460:	d819      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009462:	2b20      	cmp	r3, #32
 8009464:	d00c      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009466:	2b20      	cmp	r3, #32
 8009468:	d815      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d019      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800946e:	2b10      	cmp	r3, #16
 8009470:	d111      	bne.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009472:	4b77      	ldr	r3, [pc, #476]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	4a76      	ldr	r2, [pc, #472]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800947c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800947e:	e011      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009484:	3308      	adds	r3, #8
 8009486:	2102      	movs	r1, #2
 8009488:	4618      	mov	r0, r3
 800948a:	f002 f997 	bl	800b7bc <RCCEx_PLL2_Config>
 800948e:	4603      	mov	r3, r0
 8009490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009494:	e006      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800949c:	e002      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800949e:	bf00      	nop
 80094a0:	e000      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80094a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10a      	bne.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80094ac:	4b68      	ldr	r3, [pc, #416]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80094b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ba:	4a65      	ldr	r2, [pc, #404]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094bc:	430b      	orrs	r3, r1
 80094be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80094c0:	e003      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80094ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80094d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80094da:	2300      	movs	r3, #0
 80094dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80094e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4313      	orrs	r3, r2
 80094e8:	d051      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80094ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094f4:	d035      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80094f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094fa:	d82e      	bhi.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009500:	d031      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009502:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009506:	d828      	bhi.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800950c:	d01a      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800950e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009512:	d822      	bhi.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800951c:	d007      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800951e:	e01c      	b.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009520:	4b4b      	ldr	r3, [pc, #300]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009524:	4a4a      	ldr	r2, [pc, #296]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800952a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800952c:	e01c      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800952e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009532:	3308      	adds	r3, #8
 8009534:	2100      	movs	r1, #0
 8009536:	4618      	mov	r0, r3
 8009538:	f002 f940 	bl	800b7bc <RCCEx_PLL2_Config>
 800953c:	4603      	mov	r3, r0
 800953e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009542:	e011      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009548:	3328      	adds	r3, #40	; 0x28
 800954a:	2100      	movs	r1, #0
 800954c:	4618      	mov	r0, r3
 800954e:	f002 f9e7 	bl	800b920 <RCCEx_PLL3_Config>
 8009552:	4603      	mov	r3, r0
 8009554:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009558:	e006      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009560:	e002      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009562:	bf00      	nop
 8009564:	e000      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10a      	bne.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009570:	4b37      	ldr	r3, [pc, #220]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009574:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800957c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800957e:	4a34      	ldr	r2, [pc, #208]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009580:	430b      	orrs	r3, r1
 8009582:	6513      	str	r3, [r2, #80]	; 0x50
 8009584:	e003      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800958a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800958e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800959a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800959e:	2300      	movs	r3, #0
 80095a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80095a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80095a8:	460b      	mov	r3, r1
 80095aa:	4313      	orrs	r3, r2
 80095ac:	d056      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80095ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095b8:	d033      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80095ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095be:	d82c      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095c4:	d02f      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80095c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095ca:	d826      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095d0:	d02b      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80095d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095d6:	d820      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095dc:	d012      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80095de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095e2:	d81a      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d022      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80095e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ec:	d115      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f2:	3308      	adds	r3, #8
 80095f4:	2101      	movs	r1, #1
 80095f6:	4618      	mov	r0, r3
 80095f8:	f002 f8e0 	bl	800b7bc <RCCEx_PLL2_Config>
 80095fc:	4603      	mov	r3, r0
 80095fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009602:	e015      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009608:	3328      	adds	r3, #40	; 0x28
 800960a:	2101      	movs	r1, #1
 800960c:	4618      	mov	r0, r3
 800960e:	f002 f987 	bl	800b920 <RCCEx_PLL3_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009618:	e00a      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009620:	e006      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009622:	bf00      	nop
 8009624:	e004      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009626:	bf00      	nop
 8009628:	e002      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800962a:	bf00      	nop
 800962c:	e000      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800962e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10d      	bne.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009638:	4b05      	ldr	r3, [pc, #20]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800963a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800963c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009646:	4a02      	ldr	r2, [pc, #8]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009648:	430b      	orrs	r3, r1
 800964a:	6513      	str	r3, [r2, #80]	; 0x50
 800964c:	e006      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800964e:	bf00      	nop
 8009650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009658:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800965c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800966c:	2300      	movs	r3, #0
 800966e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009672:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009676:	460b      	mov	r3, r1
 8009678:	4313      	orrs	r3, r2
 800967a:	d055      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800967c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009680:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009688:	d033      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800968a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800968e:	d82c      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009694:	d02f      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969a:	d826      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800969c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096a0:	d02b      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x672>
 80096a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096a6:	d820      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80096a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ac:	d012      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80096ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096b2:	d81a      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d022      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x676>
 80096b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096bc:	d115      	bne.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c2:	3308      	adds	r3, #8
 80096c4:	2101      	movs	r1, #1
 80096c6:	4618      	mov	r0, r3
 80096c8:	f002 f878 	bl	800b7bc <RCCEx_PLL2_Config>
 80096cc:	4603      	mov	r3, r0
 80096ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096d2:	e015      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d8:	3328      	adds	r3, #40	; 0x28
 80096da:	2101      	movs	r1, #1
 80096dc:	4618      	mov	r0, r3
 80096de:	f002 f91f 	bl	800b920 <RCCEx_PLL3_Config>
 80096e2:	4603      	mov	r3, r0
 80096e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096e8:	e00a      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096f0:	e006      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096f2:	bf00      	nop
 80096f4:	e004      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096f6:	bf00      	nop
 80096f8:	e002      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096fa:	bf00      	nop
 80096fc:	e000      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10b      	bne.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009708:	4ba3      	ldr	r3, [pc, #652]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800970a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800970c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009714:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009718:	4a9f      	ldr	r2, [pc, #636]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800971a:	430b      	orrs	r3, r1
 800971c:	6593      	str	r3, [r2, #88]	; 0x58
 800971e:	e003      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009724:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009730:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009734:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009738:	2300      	movs	r3, #0
 800973a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800973e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009742:	460b      	mov	r3, r1
 8009744:	4313      	orrs	r3, r2
 8009746:	d037      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800974c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800974e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009752:	d00e      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009758:	d816      	bhi.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800975a:	2b00      	cmp	r3, #0
 800975c:	d018      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800975e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009762:	d111      	bne.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009764:	4b8c      	ldr	r3, [pc, #560]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	4a8b      	ldr	r2, [pc, #556]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800976a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800976e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009770:	e00f      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009776:	3308      	adds	r3, #8
 8009778:	2101      	movs	r1, #1
 800977a:	4618      	mov	r0, r3
 800977c:	f002 f81e 	bl	800b7bc <RCCEx_PLL2_Config>
 8009780:	4603      	mov	r3, r0
 8009782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009786:	e004      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800978e:	e000      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10a      	bne.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800979a:	4b7f      	ldr	r3, [pc, #508]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800979c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80097a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a8:	4a7b      	ldr	r2, [pc, #492]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097aa:	430b      	orrs	r3, r1
 80097ac:	6513      	str	r3, [r2, #80]	; 0x50
 80097ae:	e003      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80097b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80097c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097c8:	2300      	movs	r3, #0
 80097ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80097ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80097d2:	460b      	mov	r3, r1
 80097d4:	4313      	orrs	r3, r2
 80097d6:	d039      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80097d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d81c      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80097e2:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80097e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e8:	08009825 	.word	0x08009825
 80097ec:	080097f9 	.word	0x080097f9
 80097f0:	08009807 	.word	0x08009807
 80097f4:	08009825 	.word	0x08009825
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f8:	4b67      	ldr	r3, [pc, #412]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	4a66      	ldr	r2, [pc, #408]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009804:	e00f      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980a:	3308      	adds	r3, #8
 800980c:	2102      	movs	r1, #2
 800980e:	4618      	mov	r0, r3
 8009810:	f001 ffd4 	bl	800b7bc <RCCEx_PLL2_Config>
 8009814:	4603      	mov	r3, r0
 8009816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800981a:	e004      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009822:	e000      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10a      	bne.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800982e:	4b5a      	ldr	r3, [pc, #360]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009832:	f023 0103 	bic.w	r1, r3, #3
 8009836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800983a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800983c:	4a56      	ldr	r2, [pc, #344]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800983e:	430b      	orrs	r3, r1
 8009840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009842:	e003      	b.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009844:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009848:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800984c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009854:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009858:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800985c:	2300      	movs	r3, #0
 800985e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009862:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009866:	460b      	mov	r3, r1
 8009868:	4313      	orrs	r3, r2
 800986a:	f000 809f 	beq.w	80099ac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800986e:	4b4b      	ldr	r3, [pc, #300]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a4a      	ldr	r2, [pc, #296]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009878:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800987a:	f7f9 fa63 	bl	8002d44 <HAL_GetTick>
 800987e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009882:	e00b      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009884:	f7f9 fa5e 	bl	8002d44 <HAL_GetTick>
 8009888:	4602      	mov	r2, r0
 800988a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	2b64      	cmp	r3, #100	; 0x64
 8009892:	d903      	bls.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800989a:	e005      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800989c:	4b3f      	ldr	r3, [pc, #252]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d0ed      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80098a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d179      	bne.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80098b0:	4b39      	ldr	r3, [pc, #228]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098bc:	4053      	eors	r3, r2
 80098be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d015      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098c6:	4b34      	ldr	r3, [pc, #208]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098d2:	4b31      	ldr	r3, [pc, #196]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d6:	4a30      	ldr	r2, [pc, #192]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098dc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098de:	4b2e      	ldr	r3, [pc, #184]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e2:	4a2d      	ldr	r2, [pc, #180]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098e8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80098ea:	4a2b      	ldr	r2, [pc, #172]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80098f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80098f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098fe:	d118      	bne.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009900:	f7f9 fa20 	bl	8002d44 <HAL_GetTick>
 8009904:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009908:	e00d      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800990a:	f7f9 fa1b 	bl	8002d44 <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009914:	1ad2      	subs	r2, r2, r3
 8009916:	f241 3388 	movw	r3, #5000	; 0x1388
 800991a:	429a      	cmp	r2, r3
 800991c:	d903      	bls.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009924:	e005      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009926:	4b1c      	ldr	r3, [pc, #112]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992a:	f003 0302 	and.w	r3, r3, #2
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0eb      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009936:	2b00      	cmp	r3, #0
 8009938:	d129      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800993a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800994a:	d10e      	bne.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800994c:	4b12      	ldr	r3, [pc, #72]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009958:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800995c:	091a      	lsrs	r2, r3, #4
 800995e:	4b10      	ldr	r3, [pc, #64]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009960:	4013      	ands	r3, r2
 8009962:	4a0d      	ldr	r2, [pc, #52]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009964:	430b      	orrs	r3, r1
 8009966:	6113      	str	r3, [r2, #16]
 8009968:	e005      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800996a:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	4a0a      	ldr	r2, [pc, #40]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009970:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009974:	6113      	str	r3, [r2, #16]
 8009976:	4b08      	ldr	r3, [pc, #32]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009978:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800997a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009986:	4a04      	ldr	r2, [pc, #16]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009988:	430b      	orrs	r3, r1
 800998a:	6713      	str	r3, [r2, #112]	; 0x70
 800998c:	e00e      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800998e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009992:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009996:	e009      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009998:	58024400 	.word	0x58024400
 800999c:	58024800 	.word	0x58024800
 80099a0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b4:	f002 0301 	and.w	r3, r2, #1
 80099b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099bc:	2300      	movs	r3, #0
 80099be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80099c6:	460b      	mov	r3, r1
 80099c8:	4313      	orrs	r3, r2
 80099ca:	f000 8089 	beq.w	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80099ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099d4:	2b28      	cmp	r3, #40	; 0x28
 80099d6:	d86b      	bhi.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80099d8:	a201      	add	r2, pc, #4	; (adr r2, 80099e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80099da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099de:	bf00      	nop
 80099e0:	08009ab9 	.word	0x08009ab9
 80099e4:	08009ab1 	.word	0x08009ab1
 80099e8:	08009ab1 	.word	0x08009ab1
 80099ec:	08009ab1 	.word	0x08009ab1
 80099f0:	08009ab1 	.word	0x08009ab1
 80099f4:	08009ab1 	.word	0x08009ab1
 80099f8:	08009ab1 	.word	0x08009ab1
 80099fc:	08009ab1 	.word	0x08009ab1
 8009a00:	08009a85 	.word	0x08009a85
 8009a04:	08009ab1 	.word	0x08009ab1
 8009a08:	08009ab1 	.word	0x08009ab1
 8009a0c:	08009ab1 	.word	0x08009ab1
 8009a10:	08009ab1 	.word	0x08009ab1
 8009a14:	08009ab1 	.word	0x08009ab1
 8009a18:	08009ab1 	.word	0x08009ab1
 8009a1c:	08009ab1 	.word	0x08009ab1
 8009a20:	08009a9b 	.word	0x08009a9b
 8009a24:	08009ab1 	.word	0x08009ab1
 8009a28:	08009ab1 	.word	0x08009ab1
 8009a2c:	08009ab1 	.word	0x08009ab1
 8009a30:	08009ab1 	.word	0x08009ab1
 8009a34:	08009ab1 	.word	0x08009ab1
 8009a38:	08009ab1 	.word	0x08009ab1
 8009a3c:	08009ab1 	.word	0x08009ab1
 8009a40:	08009ab9 	.word	0x08009ab9
 8009a44:	08009ab1 	.word	0x08009ab1
 8009a48:	08009ab1 	.word	0x08009ab1
 8009a4c:	08009ab1 	.word	0x08009ab1
 8009a50:	08009ab1 	.word	0x08009ab1
 8009a54:	08009ab1 	.word	0x08009ab1
 8009a58:	08009ab1 	.word	0x08009ab1
 8009a5c:	08009ab1 	.word	0x08009ab1
 8009a60:	08009ab9 	.word	0x08009ab9
 8009a64:	08009ab1 	.word	0x08009ab1
 8009a68:	08009ab1 	.word	0x08009ab1
 8009a6c:	08009ab1 	.word	0x08009ab1
 8009a70:	08009ab1 	.word	0x08009ab1
 8009a74:	08009ab1 	.word	0x08009ab1
 8009a78:	08009ab1 	.word	0x08009ab1
 8009a7c:	08009ab1 	.word	0x08009ab1
 8009a80:	08009ab9 	.word	0x08009ab9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a88:	3308      	adds	r3, #8
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f001 fe95 	bl	800b7bc <RCCEx_PLL2_Config>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a98:	e00f      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a9e:	3328      	adds	r3, #40	; 0x28
 8009aa0:	2101      	movs	r1, #1
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 ff3c 	bl	800b920 <RCCEx_PLL3_Config>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009aae:	e004      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ab6:	e000      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10a      	bne.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ac2:	4bbf      	ldr	r3, [pc, #764]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ac6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ad0:	4abb      	ldr	r2, [pc, #748]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	6553      	str	r3, [r2, #84]	; 0x54
 8009ad6:	e003      	b.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009adc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f002 0302 	and.w	r3, r2, #2
 8009aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009af0:	2300      	movs	r3, #0
 8009af2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009af6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009afa:	460b      	mov	r3, r1
 8009afc:	4313      	orrs	r3, r2
 8009afe:	d041      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b06:	2b05      	cmp	r3, #5
 8009b08:	d824      	bhi.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009b0a:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b10:	08009b5d 	.word	0x08009b5d
 8009b14:	08009b29 	.word	0x08009b29
 8009b18:	08009b3f 	.word	0x08009b3f
 8009b1c:	08009b5d 	.word	0x08009b5d
 8009b20:	08009b5d 	.word	0x08009b5d
 8009b24:	08009b5d 	.word	0x08009b5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	2101      	movs	r1, #1
 8009b30:	4618      	mov	r0, r3
 8009b32:	f001 fe43 	bl	800b7bc <RCCEx_PLL2_Config>
 8009b36:	4603      	mov	r3, r0
 8009b38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b3c:	e00f      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b42:	3328      	adds	r3, #40	; 0x28
 8009b44:	2101      	movs	r1, #1
 8009b46:	4618      	mov	r0, r3
 8009b48:	f001 feea 	bl	800b920 <RCCEx_PLL3_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b52:	e004      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b5a:	e000      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10a      	bne.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b66:	4b96      	ldr	r3, [pc, #600]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6a:	f023 0107 	bic.w	r1, r3, #7
 8009b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b74:	4a92      	ldr	r2, [pc, #584]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b76:	430b      	orrs	r3, r1
 8009b78:	6553      	str	r3, [r2, #84]	; 0x54
 8009b7a:	e003      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8c:	f002 0304 	and.w	r3, r2, #4
 8009b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b94:	2300      	movs	r3, #0
 8009b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	d044      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bac:	2b05      	cmp	r3, #5
 8009bae:	d825      	bhi.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009bb0:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb6:	bf00      	nop
 8009bb8:	08009c05 	.word	0x08009c05
 8009bbc:	08009bd1 	.word	0x08009bd1
 8009bc0:	08009be7 	.word	0x08009be7
 8009bc4:	08009c05 	.word	0x08009c05
 8009bc8:	08009c05 	.word	0x08009c05
 8009bcc:	08009c05 	.word	0x08009c05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd4:	3308      	adds	r3, #8
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f001 fdef 	bl	800b7bc <RCCEx_PLL2_Config>
 8009bde:	4603      	mov	r3, r0
 8009be0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009be4:	e00f      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bea:	3328      	adds	r3, #40	; 0x28
 8009bec:	2101      	movs	r1, #1
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f001 fe96 	bl	800b920 <RCCEx_PLL3_Config>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009bfa:	e004      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c02:	e000      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10b      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c0e:	4b6c      	ldr	r3, [pc, #432]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c12:	f023 0107 	bic.w	r1, r3, #7
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c1e:	4a68      	ldr	r2, [pc, #416]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c20:	430b      	orrs	r3, r1
 8009c22:	6593      	str	r3, [r2, #88]	; 0x58
 8009c24:	e003      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f002 0320 	and.w	r3, r2, #32
 8009c3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c3e:	2300      	movs	r3, #0
 8009c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	d055      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c5a:	d033      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c60:	d82c      	bhi.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c66:	d02f      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c6c:	d826      	bhi.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c72:	d02b      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009c74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c78:	d820      	bhi.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c7e:	d012      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c84:	d81a      	bhi.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d022      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c8e:	d115      	bne.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c94:	3308      	adds	r3, #8
 8009c96:	2100      	movs	r1, #0
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f001 fd8f 	bl	800b7bc <RCCEx_PLL2_Config>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ca4:	e015      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009caa:	3328      	adds	r3, #40	; 0x28
 8009cac:	2102      	movs	r1, #2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f001 fe36 	bl	800b920 <RCCEx_PLL3_Config>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009cba:	e00a      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cc2:	e006      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cc4:	bf00      	nop
 8009cc6:	e004      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cc8:	bf00      	nop
 8009cca:	e002      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ccc:	bf00      	nop
 8009cce:	e000      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10b      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cda:	4b39      	ldr	r3, [pc, #228]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cde:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cea:	4a35      	ldr	r2, [pc, #212]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cec:	430b      	orrs	r3, r1
 8009cee:	6553      	str	r3, [r2, #84]	; 0x54
 8009cf0:	e003      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009d14:	460b      	mov	r3, r1
 8009d16:	4313      	orrs	r3, r2
 8009d18:	d058      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d26:	d033      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009d28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d2c:	d82c      	bhi.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d32:	d02f      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d38:	d826      	bhi.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d3e:	d02b      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009d40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d44:	d820      	bhi.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d4a:	d012      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d50:	d81a      	bhi.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d022      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d5a:	d115      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d60:	3308      	adds	r3, #8
 8009d62:	2100      	movs	r1, #0
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 fd29 	bl	800b7bc <RCCEx_PLL2_Config>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d70:	e015      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d76:	3328      	adds	r3, #40	; 0x28
 8009d78:	2102      	movs	r1, #2
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f001 fdd0 	bl	800b920 <RCCEx_PLL3_Config>
 8009d80:	4603      	mov	r3, r0
 8009d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d86:	e00a      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d8e:	e006      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d90:	bf00      	nop
 8009d92:	e004      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d94:	bf00      	nop
 8009d96:	e002      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d98:	bf00      	nop
 8009d9a:	e000      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10e      	bne.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009da6:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009daa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009db6:	4a02      	ldr	r2, [pc, #8]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009db8:	430b      	orrs	r3, r1
 8009dba:	6593      	str	r3, [r2, #88]	; 0x58
 8009dbc:	e006      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009dbe:	bf00      	nop
 8009dc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009de2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009de6:	460b      	mov	r3, r1
 8009de8:	4313      	orrs	r3, r2
 8009dea:	d055      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009df4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009df8:	d033      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009dfa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009dfe:	d82c      	bhi.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e04:	d02f      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e0a:	d826      	bhi.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e0c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e10:	d02b      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009e12:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e16:	d820      	bhi.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e1c:	d012      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e22:	d81a      	bhi.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d022      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e2c:	d115      	bne.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e32:	3308      	adds	r3, #8
 8009e34:	2100      	movs	r1, #0
 8009e36:	4618      	mov	r0, r3
 8009e38:	f001 fcc0 	bl	800b7bc <RCCEx_PLL2_Config>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e42:	e015      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e48:	3328      	adds	r3, #40	; 0x28
 8009e4a:	2102      	movs	r1, #2
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f001 fd67 	bl	800b920 <RCCEx_PLL3_Config>
 8009e52:	4603      	mov	r3, r0
 8009e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e58:	e00a      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e60:	e006      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e62:	bf00      	nop
 8009e64:	e004      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e66:	bf00      	nop
 8009e68:	e002      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e6a:	bf00      	nop
 8009e6c:	e000      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10b      	bne.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e78:	4ba1      	ldr	r3, [pc, #644]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e7c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e88:	4a9d      	ldr	r2, [pc, #628]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e8a:	430b      	orrs	r3, r1
 8009e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8009e8e:	e003      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea0:	f002 0308 	and.w	r3, r2, #8
 8009ea4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009eae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	d01e      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec4:	d10c      	bne.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eca:	3328      	adds	r3, #40	; 0x28
 8009ecc:	2102      	movs	r1, #2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f001 fd26 	bl	800b920 <RCCEx_PLL3_Config>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009ee0:	4b87      	ldr	r3, [pc, #540]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ef0:	4a83      	ldr	r2, [pc, #524]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ef2:	430b      	orrs	r3, r1
 8009ef4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	f002 0310 	and.w	r3, r2, #16
 8009f02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f06:	2300      	movs	r3, #0
 8009f08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009f0c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009f10:	460b      	mov	r3, r1
 8009f12:	4313      	orrs	r3, r2
 8009f14:	d01e      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f22:	d10c      	bne.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f28:	3328      	adds	r3, #40	; 0x28
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f001 fcf7 	bl	800b920 <RCCEx_PLL3_Config>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f3e:	4b70      	ldr	r3, [pc, #448]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f4e:	4a6c      	ldr	r2, [pc, #432]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f50:	430b      	orrs	r3, r1
 8009f52:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009f60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f64:	2300      	movs	r3, #0
 8009f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f6a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4313      	orrs	r3, r2
 8009f72:	d03e      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f80:	d022      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009f82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f86:	d81b      	bhi.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f90:	d00b      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009f92:	e015      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f98:	3308      	adds	r3, #8
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f001 fc0d 	bl	800b7bc <RCCEx_PLL2_Config>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009fa8:	e00f      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fae:	3328      	adds	r3, #40	; 0x28
 8009fb0:	2102      	movs	r1, #2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 fcb4 	bl	800b920 <RCCEx_PLL3_Config>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009fbe:	e004      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fc6:	e000      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10b      	bne.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009fd2:	4b4b      	ldr	r3, [pc, #300]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fe2:	4a47      	ldr	r2, [pc, #284]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fe4:	430b      	orrs	r3, r1
 8009fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8009fe8:	e003      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009ffe:	67bb      	str	r3, [r7, #120]	; 0x78
 800a000:	2300      	movs	r3, #0
 800a002:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a004:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a008:	460b      	mov	r3, r1
 800a00a:	4313      	orrs	r3, r2
 800a00c:	d03b      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a016:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a01a:	d01f      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a01c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a020:	d818      	bhi.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a026:	d003      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a02c:	d007      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a02e:	e011      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a030:	4b33      	ldr	r3, [pc, #204]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a034:	4a32      	ldr	r2, [pc, #200]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a03a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a03c:	e00f      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a042:	3328      	adds	r3, #40	; 0x28
 800a044:	2101      	movs	r1, #1
 800a046:	4618      	mov	r0, r3
 800a048:	f001 fc6a 	bl	800b920 <RCCEx_PLL3_Config>
 800a04c:	4603      	mov	r3, r0
 800a04e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a052:	e004      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a05a:	e000      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a05c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a05e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10b      	bne.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a066:	4b26      	ldr	r3, [pc, #152]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a06a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a076:	4a22      	ldr	r2, [pc, #136]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a078:	430b      	orrs	r3, r1
 800a07a:	6553      	str	r3, [r2, #84]	; 0x54
 800a07c:	e003      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a07e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a082:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a092:	673b      	str	r3, [r7, #112]	; 0x70
 800a094:	2300      	movs	r3, #0
 800a096:	677b      	str	r3, [r7, #116]	; 0x74
 800a098:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a09c:	460b      	mov	r3, r1
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	d034      	beq.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d003      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a0ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0b0:	d007      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a0b2:	e011      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0b4:	4b12      	ldr	r3, [pc, #72]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b8:	4a11      	ldr	r2, [pc, #68]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0c0:	e00e      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	2102      	movs	r1, #2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f001 fb76 	bl	800b7bc <RCCEx_PLL2_Config>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0d6:	e003      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10d      	bne.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a0e8:	4b05      	ldr	r3, [pc, #20]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f6:	4a02      	ldr	r2, [pc, #8]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0f8:	430b      	orrs	r3, r1
 800a0fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a0fc:	e006      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a0fe:	bf00      	nop
 800a100:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a118:	66bb      	str	r3, [r7, #104]	; 0x68
 800a11a:	2300      	movs	r3, #0
 800a11c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a11e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a122:	460b      	mov	r3, r1
 800a124:	4313      	orrs	r3, r2
 800a126:	d00c      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a12c:	3328      	adds	r3, #40	; 0x28
 800a12e:	2102      	movs	r1, #2
 800a130:	4618      	mov	r0, r3
 800a132:	f001 fbf5 	bl	800b920 <RCCEx_PLL3_Config>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a14e:	663b      	str	r3, [r7, #96]	; 0x60
 800a150:	2300      	movs	r3, #0
 800a152:	667b      	str	r3, [r7, #100]	; 0x64
 800a154:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a158:	460b      	mov	r3, r1
 800a15a:	4313      	orrs	r3, r2
 800a15c:	d038      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a16a:	d018      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a16c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a170:	d811      	bhi.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a176:	d014      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a17c:	d80b      	bhi.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d011      	beq.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a186:	d106      	bne.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a188:	4bc3      	ldr	r3, [pc, #780]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18c:	4ac2      	ldr	r2, [pc, #776]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a18e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a194:	e008      	b.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a19c:	e004      	b.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a19e:	bf00      	nop
 800a1a0:	e002      	b.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a1a2:	bf00      	nop
 800a1a4:	e000      	b.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a1a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10b      	bne.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a1b0:	4bb9      	ldr	r3, [pc, #740]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a1b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1c0:	4ab5      	ldr	r2, [pc, #724]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1c2:	430b      	orrs	r3, r1
 800a1c4:	6553      	str	r3, [r2, #84]	; 0x54
 800a1c6:	e003      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a1dc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1de:	2300      	movs	r3, #0
 800a1e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	d009      	beq.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a1ec:	4baa      	ldr	r3, [pc, #680]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1fa:	4aa7      	ldr	r2, [pc, #668]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1fc:	430b      	orrs	r3, r1
 800a1fe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a20c:	653b      	str	r3, [r7, #80]	; 0x50
 800a20e:	2300      	movs	r3, #0
 800a210:	657b      	str	r3, [r7, #84]	; 0x54
 800a212:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a216:	460b      	mov	r3, r1
 800a218:	4313      	orrs	r3, r2
 800a21a:	d00a      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a21c:	4b9e      	ldr	r3, [pc, #632]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a228:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a22c:	4a9a      	ldr	r2, [pc, #616]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a22e:	430b      	orrs	r3, r1
 800a230:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a23e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a240:	2300      	movs	r3, #0
 800a242:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a244:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a248:	460b      	mov	r3, r1
 800a24a:	4313      	orrs	r3, r2
 800a24c:	d009      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a24e:	4b92      	ldr	r3, [pc, #584]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a252:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a25c:	4a8e      	ldr	r2, [pc, #568]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a25e:	430b      	orrs	r3, r1
 800a260:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a26e:	643b      	str	r3, [r7, #64]	; 0x40
 800a270:	2300      	movs	r3, #0
 800a272:	647b      	str	r3, [r7, #68]	; 0x44
 800a274:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a278:	460b      	mov	r3, r1
 800a27a:	4313      	orrs	r3, r2
 800a27c:	d00e      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a27e:	4b86      	ldr	r3, [pc, #536]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	4a85      	ldr	r2, [pc, #532]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a284:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a288:	6113      	str	r3, [r2, #16]
 800a28a:	4b83      	ldr	r3, [pc, #524]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a28c:	6919      	ldr	r1, [r3, #16]
 800a28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a292:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a296:	4a80      	ldr	r2, [pc, #512]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a298:	430b      	orrs	r3, r1
 800a29a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a2a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	d009      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a2b8:	4b77      	ldr	r3, [pc, #476]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2bc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c6:	4a74      	ldr	r2, [pc, #464]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2c8:	430b      	orrs	r3, r1
 800a2ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a2d8:	633b      	str	r3, [r7, #48]	; 0x30
 800a2da:	2300      	movs	r3, #0
 800a2dc:	637b      	str	r3, [r7, #52]	; 0x34
 800a2de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	d00a      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a2e8:	4b6b      	ldr	r3, [pc, #428]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ec:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2f8:	4a67      	ldr	r2, [pc, #412]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2fa:	430b      	orrs	r3, r1
 800a2fc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	2100      	movs	r1, #0
 800a308:	62b9      	str	r1, [r7, #40]	; 0x28
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a310:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a314:	460b      	mov	r3, r1
 800a316:	4313      	orrs	r3, r2
 800a318:	d011      	beq.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a31e:	3308      	adds	r3, #8
 800a320:	2100      	movs	r1, #0
 800a322:	4618      	mov	r0, r3
 800a324:	f001 fa4a 	bl	800b7bc <RCCEx_PLL2_Config>
 800a328:	4603      	mov	r3, r0
 800a32a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a32e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a33a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	2100      	movs	r1, #0
 800a348:	6239      	str	r1, [r7, #32]
 800a34a:	f003 0302 	and.w	r3, r3, #2
 800a34e:	627b      	str	r3, [r7, #36]	; 0x24
 800a350:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a354:	460b      	mov	r3, r1
 800a356:	4313      	orrs	r3, r2
 800a358:	d011      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a35e:	3308      	adds	r3, #8
 800a360:	2101      	movs	r1, #1
 800a362:	4618      	mov	r0, r3
 800a364:	f001 fa2a 	bl	800b7bc <RCCEx_PLL2_Config>
 800a368:	4603      	mov	r3, r0
 800a36a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a36e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a37a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	2100      	movs	r1, #0
 800a388:	61b9      	str	r1, [r7, #24]
 800a38a:	f003 0304 	and.w	r3, r3, #4
 800a38e:	61fb      	str	r3, [r7, #28]
 800a390:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a394:	460b      	mov	r3, r1
 800a396:	4313      	orrs	r3, r2
 800a398:	d011      	beq.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39e:	3308      	adds	r3, #8
 800a3a0:	2102      	movs	r1, #2
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f001 fa0a 	bl	800b7bc <RCCEx_PLL2_Config>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a3ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	6139      	str	r1, [r7, #16]
 800a3ca:	f003 0308 	and.w	r3, r3, #8
 800a3ce:	617b      	str	r3, [r7, #20]
 800a3d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	d011      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3de:	3328      	adds	r3, #40	; 0x28
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f001 fa9c 	bl	800b920 <RCCEx_PLL3_Config>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a3ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	2100      	movs	r1, #0
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	f003 0310 	and.w	r3, r3, #16
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a414:	460b      	mov	r3, r1
 800a416:	4313      	orrs	r3, r2
 800a418:	d011      	beq.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a41e:	3328      	adds	r3, #40	; 0x28
 800a420:	2101      	movs	r1, #1
 800a422:	4618      	mov	r0, r3
 800a424:	f001 fa7c 	bl	800b920 <RCCEx_PLL3_Config>
 800a428:	4603      	mov	r3, r0
 800a42a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a42e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a432:	2b00      	cmp	r3, #0
 800a434:	d003      	beq.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a43a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	2100      	movs	r1, #0
 800a448:	6039      	str	r1, [r7, #0]
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	607b      	str	r3, [r7, #4]
 800a450:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a454:	460b      	mov	r3, r1
 800a456:	4313      	orrs	r3, r2
 800a458:	d011      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a45e:	3328      	adds	r3, #40	; 0x28
 800a460:	2102      	movs	r1, #2
 800a462:	4618      	mov	r0, r3
 800a464:	f001 fa5c 	bl	800b920 <RCCEx_PLL3_Config>
 800a468:	4603      	mov	r3, r0
 800a46a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a46e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a472:	2b00      	cmp	r3, #0
 800a474:	d003      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a47a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a47e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	e000      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a492:	46bd      	mov	sp, r7
 800a494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a498:	58024400 	.word	0x58024400

0800a49c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b090      	sub	sp, #64	; 0x40
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a4a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4aa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a4ae:	430b      	orrs	r3, r1
 800a4b0:	f040 8094 	bne.w	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a4b4:	4b9e      	ldr	r3, [pc, #632]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b8:	f003 0307 	and.w	r3, r3, #7
 800a4bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	2b04      	cmp	r3, #4
 800a4c2:	f200 8087 	bhi.w	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a4c6:	a201      	add	r2, pc, #4	; (adr r2, 800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4cc:	0800a4e1 	.word	0x0800a4e1
 800a4d0:	0800a509 	.word	0x0800a509
 800a4d4:	0800a531 	.word	0x0800a531
 800a4d8:	0800a5cd 	.word	0x0800a5cd
 800a4dc:	0800a559 	.word	0x0800a559
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4e0:	4b93      	ldr	r3, [pc, #588]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4ec:	d108      	bne.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f001 f810 	bl	800b518 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4fc:	f000 bd45 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a500:	2300      	movs	r3, #0
 800a502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a504:	f000 bd41 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a508:	4b89      	ldr	r3, [pc, #548]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a514:	d108      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a516:	f107 0318 	add.w	r3, r7, #24
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 fd54 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a524:	f000 bd31 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a52c:	f000 bd2d 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a530:	4b7f      	ldr	r3, [pc, #508]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a53c:	d108      	bne.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a53e:	f107 030c 	add.w	r3, r7, #12
 800a542:	4618      	mov	r0, r3
 800a544:	f000 fe94 	bl	800b270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a54c:	f000 bd1d 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a554:	f000 bd19 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a558:	4b75      	ldr	r3, [pc, #468]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a55a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a560:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a562:	4b73      	ldr	r3, [pc, #460]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0304 	and.w	r3, r3, #4
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	d10c      	bne.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a570:	2b00      	cmp	r3, #0
 800a572:	d109      	bne.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a574:	4b6e      	ldr	r3, [pc, #440]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	08db      	lsrs	r3, r3, #3
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	4a6d      	ldr	r2, [pc, #436]	; (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a580:	fa22 f303 	lsr.w	r3, r2, r3
 800a584:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a586:	e01f      	b.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a588:	4b69      	ldr	r3, [pc, #420]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a594:	d106      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a598:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a59c:	d102      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a59e:	4b66      	ldr	r3, [pc, #408]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5a2:	e011      	b.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5a4:	4b62      	ldr	r3, [pc, #392]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5b0:	d106      	bne.n	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5b8:	d102      	bne.n	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5ba:	4b60      	ldr	r3, [pc, #384]	; (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5be:	e003      	b.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a5c4:	f000 bce1 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5c8:	f000 bcdf 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5cc:	4b5c      	ldr	r3, [pc, #368]	; (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5d0:	f000 bcdb 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5d8:	f000 bcd7 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a5dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5e0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a5e4:	430b      	orrs	r3, r1
 800a5e6:	f040 80ad 	bne.w	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a5ea:	4b51      	ldr	r3, [pc, #324]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a5f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5fa:	d056      	beq.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a602:	f200 8090 	bhi.w	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	2bc0      	cmp	r3, #192	; 0xc0
 800a60a:	f000 8088 	beq.w	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	2bc0      	cmp	r3, #192	; 0xc0
 800a612:	f200 8088 	bhi.w	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	2b80      	cmp	r3, #128	; 0x80
 800a61a:	d032      	beq.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61e:	2b80      	cmp	r3, #128	; 0x80
 800a620:	f200 8081 	bhi.w	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	2b40      	cmp	r3, #64	; 0x40
 800a62e:	d014      	beq.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a630:	e079      	b.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a632:	4b3f      	ldr	r3, [pc, #252]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a63a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a63e:	d108      	bne.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a644:	4618      	mov	r0, r3
 800a646:	f000 ff67 	bl	800b518 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a64e:	f000 bc9c 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a656:	f000 bc98 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a65a:	4b35      	ldr	r3, [pc, #212]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a666:	d108      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a668:	f107 0318 	add.w	r3, r7, #24
 800a66c:	4618      	mov	r0, r3
 800a66e:	f000 fcab 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a676:	f000 bc88 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a67e:	f000 bc84 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a682:	4b2b      	ldr	r3, [pc, #172]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a68a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a68e:	d108      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a690:	f107 030c 	add.w	r3, r7, #12
 800a694:	4618      	mov	r0, r3
 800a696:	f000 fdeb 	bl	800b270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a69e:	f000 bc74 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6a6:	f000 bc70 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6aa:	4b21      	ldr	r3, [pc, #132]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6b4:	4b1e      	ldr	r3, [pc, #120]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 0304 	and.w	r3, r3, #4
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	d10c      	bne.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d109      	bne.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6c6:	4b1a      	ldr	r3, [pc, #104]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	08db      	lsrs	r3, r3, #3
 800a6cc:	f003 0303 	and.w	r3, r3, #3
 800a6d0:	4a18      	ldr	r2, [pc, #96]	; (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6d8:	e01f      	b.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6da:	4b15      	ldr	r3, [pc, #84]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6e6:	d106      	bne.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6ee:	d102      	bne.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6f0:	4b11      	ldr	r3, [pc, #68]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6f4:	e011      	b.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6f6:	4b0e      	ldr	r3, [pc, #56]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a702:	d106      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a70a:	d102      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a70c:	4b0b      	ldr	r3, [pc, #44]	; (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a70e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a710:	e003      	b.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a716:	f000 bc38 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a71a:	f000 bc36 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a71e:	4b08      	ldr	r3, [pc, #32]	; (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a722:	f000 bc32 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a72a:	f000 bc2e 	b.w	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a72e:	bf00      	nop
 800a730:	58024400 	.word	0x58024400
 800a734:	03d09000 	.word	0x03d09000
 800a738:	003d0900 	.word	0x003d0900
 800a73c:	017d7840 	.word	0x017d7840
 800a740:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a744:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a748:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a74c:	430b      	orrs	r3, r1
 800a74e:	f040 809c 	bne.w	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a752:	4b9e      	ldr	r3, [pc, #632]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a756:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a75a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a762:	d054      	beq.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a76a:	f200 808b 	bhi.w	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a770:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a774:	f000 8083 	beq.w	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a77e:	f200 8081 	bhi.w	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a788:	d02f      	beq.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a790:	d878      	bhi.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	2b00      	cmp	r3, #0
 800a796:	d004      	beq.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a79e:	d012      	beq.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a7a0:	e070      	b.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7a2:	4b8a      	ldr	r3, [pc, #552]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7ae:	d107      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 feaf 	bl	800b518 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7be:	e3e4      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7c4:	e3e1      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7c6:	4b81      	ldr	r3, [pc, #516]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7d2:	d107      	bne.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7d4:	f107 0318 	add.w	r3, r7, #24
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 fbf5 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e2:	e3d2      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7e8:	e3cf      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7ea:	4b78      	ldr	r3, [pc, #480]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7f6:	d107      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7f8:	f107 030c 	add.w	r3, r7, #12
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 fd37 	bl	800b270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a806:	e3c0      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a80c:	e3bd      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a80e:	4b6f      	ldr	r3, [pc, #444]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a816:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a818:	4b6c      	ldr	r3, [pc, #432]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 0304 	and.w	r3, r3, #4
 800a820:	2b04      	cmp	r3, #4
 800a822:	d10c      	bne.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a826:	2b00      	cmp	r3, #0
 800a828:	d109      	bne.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a82a:	4b68      	ldr	r3, [pc, #416]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	08db      	lsrs	r3, r3, #3
 800a830:	f003 0303 	and.w	r3, r3, #3
 800a834:	4a66      	ldr	r2, [pc, #408]	; (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a836:	fa22 f303 	lsr.w	r3, r2, r3
 800a83a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a83c:	e01e      	b.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a83e:	4b63      	ldr	r3, [pc, #396]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a84a:	d106      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a852:	d102      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a854:	4b5f      	ldr	r3, [pc, #380]	; (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a856:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a858:	e010      	b.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a85a:	4b5c      	ldr	r3, [pc, #368]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a866:	d106      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a86e:	d102      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a870:	4b59      	ldr	r3, [pc, #356]	; (800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a872:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a874:	e002      	b.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a87a:	e386      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a87c:	e385      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a87e:	4b57      	ldr	r3, [pc, #348]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a882:	e382      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a888:	e37f      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a88a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a88e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a892:	430b      	orrs	r3, r1
 800a894:	f040 80a7 	bne.w	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a898:	4b4c      	ldr	r3, [pc, #304]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a89c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a8a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8a8:	d055      	beq.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8b0:	f200 8096 	bhi.w	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a8ba:	f000 8084 	beq.w	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a8c4:	f200 808c 	bhi.w	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8ce:	d030      	beq.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8d6:	f200 8083 	bhi.w	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d004      	beq.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8e6:	d012      	beq.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a8e8:	e07a      	b.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8ea:	4b38      	ldr	r3, [pc, #224]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8f6:	d107      	bne.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fe0b 	bl	800b518 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a904:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a906:	e340      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a90c:	e33d      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a90e:	4b2f      	ldr	r3, [pc, #188]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a91a:	d107      	bne.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a91c:	f107 0318 	add.w	r3, r7, #24
 800a920:	4618      	mov	r0, r3
 800a922:	f000 fb51 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a92a:	e32e      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a930:	e32b      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a932:	4b26      	ldr	r3, [pc, #152]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a93a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a93e:	d107      	bne.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a940:	f107 030c 	add.w	r3, r7, #12
 800a944:	4618      	mov	r0, r3
 800a946:	f000 fc93 	bl	800b270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a94e:	e31c      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a950:	2300      	movs	r3, #0
 800a952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a954:	e319      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a956:	4b1d      	ldr	r3, [pc, #116]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a95a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a95e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a960:	4b1a      	ldr	r3, [pc, #104]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0304 	and.w	r3, r3, #4
 800a968:	2b04      	cmp	r3, #4
 800a96a:	d10c      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d109      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a972:	4b16      	ldr	r3, [pc, #88]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	08db      	lsrs	r3, r3, #3
 800a978:	f003 0303 	and.w	r3, r3, #3
 800a97c:	4a14      	ldr	r2, [pc, #80]	; (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a97e:	fa22 f303 	lsr.w	r3, r2, r3
 800a982:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a984:	e01e      	b.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a986:	4b11      	ldr	r3, [pc, #68]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a98e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a992:	d106      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a99a:	d102      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a99c:	4b0d      	ldr	r3, [pc, #52]	; (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9a0:	e010      	b.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9a2:	4b0a      	ldr	r3, [pc, #40]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9ae:	d106      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9b6:	d102      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9b8:	4b07      	ldr	r3, [pc, #28]	; (800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9bc:	e002      	b.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a9c2:	e2e2      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9c4:	e2e1      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9c6:	4b05      	ldr	r3, [pc, #20]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ca:	e2de      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9cc:	58024400 	.word	0x58024400
 800a9d0:	03d09000 	.word	0x03d09000
 800a9d4:	003d0900 	.word	0x003d0900
 800a9d8:	017d7840 	.word	0x017d7840
 800a9dc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9e4:	e2d1      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a9e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ea:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a9ee:	430b      	orrs	r3, r1
 800a9f0:	f040 809c 	bne.w	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a9f4:	4b93      	ldr	r3, [pc, #588]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a9fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa04:	d054      	beq.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa0c:	f200 808b 	bhi.w	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa16:	f000 8083 	beq.w	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa20:	f200 8081 	bhi.w	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa2a:	d02f      	beq.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa32:	d878      	bhi.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d004      	beq.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa40:	d012      	beq.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800aa42:	e070      	b.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa44:	4b7f      	ldr	r3, [pc, #508]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa50:	d107      	bne.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 fd5e 	bl	800b518 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa60:	e293      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa62:	2300      	movs	r3, #0
 800aa64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa66:	e290      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa68:	4b76      	ldr	r3, [pc, #472]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa74:	d107      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa76:	f107 0318 	add.w	r3, r7, #24
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 faa4 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa84:	e281      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa8a:	e27e      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa8c:	4b6d      	ldr	r3, [pc, #436]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa98:	d107      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa9a:	f107 030c 	add.w	r3, r7, #12
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 fbe6 	bl	800b270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaa8:	e26f      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaae:	e26c      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aab0:	4b64      	ldr	r3, [pc, #400]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aab8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aaba:	4b62      	ldr	r3, [pc, #392]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 0304 	and.w	r3, r3, #4
 800aac2:	2b04      	cmp	r3, #4
 800aac4:	d10c      	bne.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800aac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d109      	bne.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aacc:	4b5d      	ldr	r3, [pc, #372]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	08db      	lsrs	r3, r3, #3
 800aad2:	f003 0303 	and.w	r3, r3, #3
 800aad6:	4a5c      	ldr	r2, [pc, #368]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aad8:	fa22 f303 	lsr.w	r3, r2, r3
 800aadc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aade:	e01e      	b.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aae0:	4b58      	ldr	r3, [pc, #352]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaec:	d106      	bne.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800aaee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aaf4:	d102      	bne.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aaf6:	4b55      	ldr	r3, [pc, #340]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aaf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aafa:	e010      	b.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aafc:	4b51      	ldr	r3, [pc, #324]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab08:	d106      	bne.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ab0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab10:	d102      	bne.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab12:	4b4f      	ldr	r3, [pc, #316]	; (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ab14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab16:	e002      	b.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ab1c:	e235      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab1e:	e234      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab20:	4b4c      	ldr	r3, [pc, #304]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ab22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab24:	e231      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab2a:	e22e      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ab2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab30:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ab34:	430b      	orrs	r3, r1
 800ab36:	f040 808f 	bne.w	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ab3a:	4b42      	ldr	r3, [pc, #264]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab3e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ab42:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ab44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab4a:	d06b      	beq.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab52:	d874      	bhi.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab5a:	d056      	beq.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ab5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab62:	d86c      	bhi.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab6a:	d03b      	beq.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ab6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab72:	d864      	bhi.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab7a:	d021      	beq.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab82:	d85c      	bhi.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d004      	beq.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ab8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab90:	d004      	beq.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ab92:	e054      	b.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ab94:	f7fe fa4c 	bl	8009030 <HAL_RCC_GetPCLK1Freq>
 800ab98:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab9a:	e1f6      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab9c:	4b29      	ldr	r3, [pc, #164]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aba8:	d107      	bne.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abaa:	f107 0318 	add.w	r3, r7, #24
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 fa0a 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abb8:	e1e7      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abbe:	e1e4      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abc0:	4b20      	ldr	r3, [pc, #128]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abcc:	d107      	bne.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abce:	f107 030c 	add.w	r3, r7, #12
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 fb4c 	bl	800b270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abdc:	e1d5      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abe2:	e1d2      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abe4:	4b17      	ldr	r3, [pc, #92]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b04      	cmp	r3, #4
 800abee:	d109      	bne.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abf0:	4b14      	ldr	r3, [pc, #80]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	08db      	lsrs	r3, r3, #3
 800abf6:	f003 0303 	and.w	r3, r3, #3
 800abfa:	4a13      	ldr	r2, [pc, #76]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800abfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ac00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac02:	e1c2      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac08:	e1bf      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac0a:	4b0e      	ldr	r3, [pc, #56]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac16:	d102      	bne.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ac18:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac1c:	e1b5      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac22:	e1b2      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac24:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac30:	d102      	bne.n	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ac32:	4b07      	ldr	r3, [pc, #28]	; (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ac34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac36:	e1a8      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac3c:	e1a5      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac42:	e1a2      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac44:	58024400 	.word	0x58024400
 800ac48:	03d09000 	.word	0x03d09000
 800ac4c:	003d0900 	.word	0x003d0900
 800ac50:	017d7840 	.word	0x017d7840
 800ac54:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac5c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ac60:	430b      	orrs	r3, r1
 800ac62:	d173      	bne.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac64:	4b9c      	ldr	r3, [pc, #624]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac6c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac74:	d02f      	beq.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ac76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac7c:	d863      	bhi.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d004      	beq.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac8a:	d012      	beq.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ac8c:	e05b      	b.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac8e:	4b92      	ldr	r3, [pc, #584]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac9a:	d107      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac9c:	f107 0318 	add.w	r3, r7, #24
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 f991 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acaa:	e16e      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb0:	e16b      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acb2:	4b89      	ldr	r3, [pc, #548]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acbe:	d107      	bne.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acc0:	f107 030c 	add.w	r3, r7, #12
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 fad3 	bl	800b270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acce:	e15c      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acd4:	e159      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acd6:	4b80      	ldr	r3, [pc, #512]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800acde:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ace0:	4b7d      	ldr	r3, [pc, #500]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0304 	and.w	r3, r3, #4
 800ace8:	2b04      	cmp	r3, #4
 800acea:	d10c      	bne.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800acec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d109      	bne.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acf2:	4b79      	ldr	r3, [pc, #484]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	08db      	lsrs	r3, r3, #3
 800acf8:	f003 0303 	and.w	r3, r3, #3
 800acfc:	4a77      	ldr	r2, [pc, #476]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800acfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ad02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad04:	e01e      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad06:	4b74      	ldr	r3, [pc, #464]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad12:	d106      	bne.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ad14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad1a:	d102      	bne.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad1c:	4b70      	ldr	r3, [pc, #448]	; (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ad1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad20:	e010      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad22:	4b6d      	ldr	r3, [pc, #436]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad2e:	d106      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ad30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad36:	d102      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad38:	4b6a      	ldr	r3, [pc, #424]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ad3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad3c:	e002      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad42:	e122      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad44:	e121      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad4a:	e11e      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ad4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad50:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ad54:	430b      	orrs	r3, r1
 800ad56:	d133      	bne.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ad58:	4b5f      	ldr	r3, [pc, #380]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d004      	beq.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ad68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad6e:	d012      	beq.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ad70:	e023      	b.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad72:	4b59      	ldr	r3, [pc, #356]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad7e:	d107      	bne.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 fbc7 	bl	800b518 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad8e:	e0fc      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad94:	e0f9      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad96:	4b50      	ldr	r3, [pc, #320]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ada2:	d107      	bne.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ada4:	f107 0318 	add.w	r3, r7, #24
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 f90d 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adb2:	e0ea      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adb8:	e0e7      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adbe:	e0e4      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800adc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adc4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800adc8:	430b      	orrs	r3, r1
 800adca:	f040 808d 	bne.w	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800adce:	4b42      	ldr	r3, [pc, #264]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800add0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800add6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800add8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adde:	d06b      	beq.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ade6:	d874      	bhi.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ade8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adee:	d056      	beq.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800adf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adf6:	d86c      	bhi.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800adf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adfe:	d03b      	beq.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ae00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae06:	d864      	bhi.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ae08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae0e:	d021      	beq.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ae10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae16:	d85c      	bhi.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae24:	d004      	beq.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ae26:	e054      	b.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ae28:	f000 f8b8 	bl	800af9c <HAL_RCCEx_GetD3PCLK1Freq>
 800ae2c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae2e:	e0ac      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae30:	4b29      	ldr	r3, [pc, #164]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae3c:	d107      	bne.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae3e:	f107 0318 	add.w	r3, r7, #24
 800ae42:	4618      	mov	r0, r3
 800ae44:	f000 f8c0 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae4c:	e09d      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae52:	e09a      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae54:	4b20      	ldr	r3, [pc, #128]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae60:	d107      	bne.n	800ae72 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae62:	f107 030c 	add.w	r3, r7, #12
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 fa02 	bl	800b270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae70:	e08b      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae76:	e088      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae78:	4b17      	ldr	r3, [pc, #92]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 0304 	and.w	r3, r3, #4
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d109      	bne.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae84:	4b14      	ldr	r3, [pc, #80]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	08db      	lsrs	r3, r3, #3
 800ae8a:	f003 0303 	and.w	r3, r3, #3
 800ae8e:	4a13      	ldr	r2, [pc, #76]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ae90:	fa22 f303 	lsr.w	r3, r2, r3
 800ae94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae96:	e078      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae9c:	e075      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae9e:	4b0e      	ldr	r3, [pc, #56]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeaa:	d102      	bne.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800aeac:	4b0c      	ldr	r3, [pc, #48]	; (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aeae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb0:	e06b      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeb6:	e068      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aeb8:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aec4:	d102      	bne.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800aec6:	4b07      	ldr	r3, [pc, #28]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeca:	e05e      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed0:	e05b      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed6:	e058      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aed8:	58024400 	.word	0x58024400
 800aedc:	03d09000 	.word	0x03d09000
 800aee0:	003d0900 	.word	0x003d0900
 800aee4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800aef0:	430b      	orrs	r3, r1
 800aef2:	d148      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aef4:	4b27      	ldr	r3, [pc, #156]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aefc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af04:	d02a      	beq.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800af06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af0c:	d838      	bhi.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	2b00      	cmp	r3, #0
 800af12:	d004      	beq.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800af14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af1a:	d00d      	beq.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800af1c:	e030      	b.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af1e:	4b1d      	ldr	r3, [pc, #116]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af2a:	d102      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800af2c:	4b1a      	ldr	r3, [pc, #104]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af30:	e02b      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af36:	e028      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af38:	4b16      	ldr	r3, [pc, #88]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af44:	d107      	bne.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 fae4 	bl	800b518 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af54:	e019      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af5a:	e016      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af5c:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af68:	d107      	bne.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af6a:	f107 0318 	add.w	r3, r7, #24
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 f82a 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af78:	e007      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af7e:	e004      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af84:	e001      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800af8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3740      	adds	r7, #64	; 0x40
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	58024400 	.word	0x58024400
 800af98:	017d7840 	.word	0x017d7840

0800af9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800afa0:	f7fe f816 	bl	8008fd0 <HAL_RCC_GetHCLKFreq>
 800afa4:	4602      	mov	r2, r0
 800afa6:	4b06      	ldr	r3, [pc, #24]	; (800afc0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	091b      	lsrs	r3, r3, #4
 800afac:	f003 0307 	and.w	r3, r3, #7
 800afb0:	4904      	ldr	r1, [pc, #16]	; (800afc4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800afb2:	5ccb      	ldrb	r3, [r1, r3]
 800afb4:	f003 031f 	and.w	r3, r3, #31
 800afb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	58024400 	.word	0x58024400
 800afc4:	08012ae0 	.word	0x08012ae0

0800afc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800afc8:	b480      	push	{r7}
 800afca:	b089      	sub	sp, #36	; 0x24
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afd0:	4ba1      	ldr	r3, [pc, #644]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd4:	f003 0303 	and.w	r3, r3, #3
 800afd8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800afda:	4b9f      	ldr	r3, [pc, #636]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afde:	0b1b      	lsrs	r3, r3, #12
 800afe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afe4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800afe6:	4b9c      	ldr	r3, [pc, #624]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afea:	091b      	lsrs	r3, r3, #4
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aff2:	4b99      	ldr	r3, [pc, #612]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff6:	08db      	lsrs	r3, r3, #3
 800aff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	fb02 f303 	mul.w	r3, r2, r3
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 8111 	beq.w	800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	2b02      	cmp	r3, #2
 800b01a:	f000 8083 	beq.w	800b124 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	2b02      	cmp	r3, #2
 800b022:	f200 80a1 	bhi.w	800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d003      	beq.n	800b034 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d056      	beq.n	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b032:	e099      	b.n	800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b034:	4b88      	ldr	r3, [pc, #544]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0320 	and.w	r3, r3, #32
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d02d      	beq.n	800b09c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b040:	4b85      	ldr	r3, [pc, #532]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	08db      	lsrs	r3, r3, #3
 800b046:	f003 0303 	and.w	r3, r3, #3
 800b04a:	4a84      	ldr	r2, [pc, #528]	; (800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b04c:	fa22 f303 	lsr.w	r3, r2, r3
 800b050:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	ee07 3a90 	vmov	s15, r3
 800b058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	ee07 3a90 	vmov	s15, r3
 800b062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b06a:	4b7b      	ldr	r3, [pc, #492]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b072:	ee07 3a90 	vmov	s15, r3
 800b076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b07a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b07e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b260 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b08a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b096:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b09a:	e087      	b.n	800b1ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	ee07 3a90 	vmov	s15, r3
 800b0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ae:	4b6a      	ldr	r3, [pc, #424]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b6:	ee07 3a90 	vmov	s15, r3
 800b0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b260 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0de:	e065      	b.n	800b1ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	ee07 3a90 	vmov	s15, r3
 800b0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0f2:	4b59      	ldr	r3, [pc, #356]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b102:	ed97 6a03 	vldr	s12, [r7, #12]
 800b106:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b260 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b122:	e043      	b.n	800b1ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b136:	4b48      	ldr	r3, [pc, #288]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b146:	ed97 6a03 	vldr	s12, [r7, #12]
 800b14a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b260 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b166:	e021      	b.n	800b1ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b172:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b17a:	4b37      	ldr	r3, [pc, #220]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b18a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b18e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b260 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b19a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b19e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b1ac:	4b2a      	ldr	r3, [pc, #168]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b0:	0a5b      	lsrs	r3, r3, #9
 800b1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1b6:	ee07 3a90 	vmov	s15, r3
 800b1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1d2:	ee17 2a90 	vmov	r2, s15
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b1da:	4b1f      	ldr	r3, [pc, #124]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1de:	0c1b      	lsrs	r3, r3, #16
 800b1e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1e4:	ee07 3a90 	vmov	s15, r3
 800b1e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b200:	ee17 2a90 	vmov	r2, s15
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b208:	4b13      	ldr	r3, [pc, #76]	; (800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20c:	0e1b      	lsrs	r3, r3, #24
 800b20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b212:	ee07 3a90 	vmov	s15, r3
 800b216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b21e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b222:	edd7 6a07 	vldr	s13, [r7, #28]
 800b226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b22a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b22e:	ee17 2a90 	vmov	r2, s15
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b236:	e008      	b.n	800b24a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	609a      	str	r2, [r3, #8]
}
 800b24a:	bf00      	nop
 800b24c:	3724      	adds	r7, #36	; 0x24
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	58024400 	.word	0x58024400
 800b25c:	03d09000 	.word	0x03d09000
 800b260:	46000000 	.word	0x46000000
 800b264:	4c742400 	.word	0x4c742400
 800b268:	4a742400 	.word	0x4a742400
 800b26c:	4bbebc20 	.word	0x4bbebc20

0800b270 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b270:	b480      	push	{r7}
 800b272:	b089      	sub	sp, #36	; 0x24
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b278:	4ba1      	ldr	r3, [pc, #644]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b27c:	f003 0303 	and.w	r3, r3, #3
 800b280:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b282:	4b9f      	ldr	r3, [pc, #636]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b286:	0d1b      	lsrs	r3, r3, #20
 800b288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b28c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b28e:	4b9c      	ldr	r3, [pc, #624]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b292:	0a1b      	lsrs	r3, r3, #8
 800b294:	f003 0301 	and.w	r3, r3, #1
 800b298:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b29a:	4b99      	ldr	r3, [pc, #612]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b29e:	08db      	lsrs	r3, r3, #3
 800b2a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	fb02 f303 	mul.w	r3, r2, r3
 800b2aa:	ee07 3a90 	vmov	s15, r3
 800b2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f000 8111 	beq.w	800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	f000 8083 	beq.w	800b3cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	f200 80a1 	bhi.w	800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d003      	beq.n	800b2dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d056      	beq.n	800b388 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b2da:	e099      	b.n	800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2dc:	4b88      	ldr	r3, [pc, #544]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 0320 	and.w	r3, r3, #32
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d02d      	beq.n	800b344 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2e8:	4b85      	ldr	r3, [pc, #532]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	08db      	lsrs	r3, r3, #3
 800b2ee:	f003 0303 	and.w	r3, r3, #3
 800b2f2:	4a84      	ldr	r2, [pc, #528]	; (800b504 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b2f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	ee07 3a90 	vmov	s15, r3
 800b300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b30e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b312:	4b7b      	ldr	r3, [pc, #492]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b31a:	ee07 3a90 	vmov	s15, r3
 800b31e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b322:	ed97 6a03 	vldr	s12, [r7, #12]
 800b326:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b508 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b32a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b32e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b33e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b342:	e087      	b.n	800b454 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b34e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b356:	4b6a      	ldr	r3, [pc, #424]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b35e:	ee07 3a90 	vmov	s15, r3
 800b362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b366:	ed97 6a03 	vldr	s12, [r7, #12]
 800b36a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b508 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b36e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b37a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b386:	e065      	b.n	800b454 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	ee07 3a90 	vmov	s15, r3
 800b38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b392:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b510 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b39a:	4b59      	ldr	r3, [pc, #356]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a2:	ee07 3a90 	vmov	s15, r3
 800b3a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b508 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3ca:	e043      	b.n	800b454 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	ee07 3a90 	vmov	s15, r3
 800b3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b3da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3de:	4b48      	ldr	r3, [pc, #288]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e6:	ee07 3a90 	vmov	s15, r3
 800b3ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b508 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b40a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b40e:	e021      	b.n	800b454 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	ee07 3a90 	vmov	s15, r3
 800b416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b41a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b510 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b41e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b422:	4b37      	ldr	r3, [pc, #220]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b42a:	ee07 3a90 	vmov	s15, r3
 800b42e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b432:	ed97 6a03 	vldr	s12, [r7, #12]
 800b436:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b508 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b43a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b43e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b44a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b44e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b452:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b454:	4b2a      	ldr	r3, [pc, #168]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b458:	0a5b      	lsrs	r3, r3, #9
 800b45a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b45e:	ee07 3a90 	vmov	s15, r3
 800b462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b46a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b46e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b47a:	ee17 2a90 	vmov	r2, s15
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b482:	4b1f      	ldr	r3, [pc, #124]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b486:	0c1b      	lsrs	r3, r3, #16
 800b488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b48c:	ee07 3a90 	vmov	s15, r3
 800b490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b498:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b49c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4a8:	ee17 2a90 	vmov	r2, s15
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b4b0:	4b13      	ldr	r3, [pc, #76]	; (800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b4:	0e1b      	lsrs	r3, r3, #24
 800b4b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4ba:	ee07 3a90 	vmov	s15, r3
 800b4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4d6:	ee17 2a90 	vmov	r2, s15
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b4de:	e008      	b.n	800b4f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	609a      	str	r2, [r3, #8]
}
 800b4f2:	bf00      	nop
 800b4f4:	3724      	adds	r7, #36	; 0x24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	58024400 	.word	0x58024400
 800b504:	03d09000 	.word	0x03d09000
 800b508:	46000000 	.word	0x46000000
 800b50c:	4c742400 	.word	0x4c742400
 800b510:	4a742400 	.word	0x4a742400
 800b514:	4bbebc20 	.word	0x4bbebc20

0800b518 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b518:	b480      	push	{r7}
 800b51a:	b089      	sub	sp, #36	; 0x24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b520:	4ba0      	ldr	r3, [pc, #640]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b524:	f003 0303 	and.w	r3, r3, #3
 800b528:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b52a:	4b9e      	ldr	r3, [pc, #632]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52e:	091b      	lsrs	r3, r3, #4
 800b530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b534:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b536:	4b9b      	ldr	r3, [pc, #620]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b540:	4b98      	ldr	r3, [pc, #608]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b544:	08db      	lsrs	r3, r3, #3
 800b546:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	fb02 f303 	mul.w	r3, r2, r3
 800b550:	ee07 3a90 	vmov	s15, r3
 800b554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b558:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f000 8111 	beq.w	800b786 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	2b02      	cmp	r3, #2
 800b568:	f000 8083 	beq.w	800b672 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	2b02      	cmp	r3, #2
 800b570:	f200 80a1 	bhi.w	800b6b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d003      	beq.n	800b582 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d056      	beq.n	800b62e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b580:	e099      	b.n	800b6b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b582:	4b88      	ldr	r3, [pc, #544]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0320 	and.w	r3, r3, #32
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d02d      	beq.n	800b5ea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b58e:	4b85      	ldr	r3, [pc, #532]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	08db      	lsrs	r3, r3, #3
 800b594:	f003 0303 	and.w	r3, r3, #3
 800b598:	4a83      	ldr	r2, [pc, #524]	; (800b7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b59a:	fa22 f303 	lsr.w	r3, r2, r3
 800b59e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	ee07 3a90 	vmov	s15, r3
 800b5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	ee07 3a90 	vmov	s15, r3
 800b5b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5b8:	4b7a      	ldr	r3, [pc, #488]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c0:	ee07 3a90 	vmov	s15, r3
 800b5c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b7ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5e8:	e087      	b.n	800b6fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	ee07 3a90 	vmov	s15, r3
 800b5f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5fc:	4b69      	ldr	r3, [pc, #420]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b604:	ee07 3a90 	vmov	s15, r3
 800b608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b60c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b610:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b7ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b61c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b624:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b628:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b62c:	e065      	b.n	800b6fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	ee07 3a90 	vmov	s15, r3
 800b634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b638:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b63c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b640:	4b58      	ldr	r3, [pc, #352]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b648:	ee07 3a90 	vmov	s15, r3
 800b64c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b650:	ed97 6a03 	vldr	s12, [r7, #12]
 800b654:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b7ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b65c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b66c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b670:	e043      	b.n	800b6fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	ee07 3a90 	vmov	s15, r3
 800b678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b67c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b684:	4b47      	ldr	r3, [pc, #284]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b68c:	ee07 3a90 	vmov	s15, r3
 800b690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b694:	ed97 6a03 	vldr	s12, [r7, #12]
 800b698:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b7ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b69c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6b4:	e021      	b.n	800b6fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	ee07 3a90 	vmov	s15, r3
 800b6bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b6c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6c8:	4b36      	ldr	r3, [pc, #216]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d0:	ee07 3a90 	vmov	s15, r3
 800b6d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b7ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6f8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b6fa:	4b2a      	ldr	r3, [pc, #168]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fe:	0a5b      	lsrs	r3, r3, #9
 800b700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b704:	ee07 3a90 	vmov	s15, r3
 800b708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b710:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b714:	edd7 6a07 	vldr	s13, [r7, #28]
 800b718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b71c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b720:	ee17 2a90 	vmov	r2, s15
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b728:	4b1e      	ldr	r3, [pc, #120]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72c:	0c1b      	lsrs	r3, r3, #16
 800b72e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b732:	ee07 3a90 	vmov	s15, r3
 800b736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b73e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b742:	edd7 6a07 	vldr	s13, [r7, #28]
 800b746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b74a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b74e:	ee17 2a90 	vmov	r2, s15
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b756:	4b13      	ldr	r3, [pc, #76]	; (800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75a:	0e1b      	lsrs	r3, r3, #24
 800b75c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b760:	ee07 3a90 	vmov	s15, r3
 800b764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b76c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b770:	edd7 6a07 	vldr	s13, [r7, #28]
 800b774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b77c:	ee17 2a90 	vmov	r2, s15
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b784:	e008      	b.n	800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	609a      	str	r2, [r3, #8]
}
 800b798:	bf00      	nop
 800b79a:	3724      	adds	r7, #36	; 0x24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	58024400 	.word	0x58024400
 800b7a8:	03d09000 	.word	0x03d09000
 800b7ac:	46000000 	.word	0x46000000
 800b7b0:	4c742400 	.word	0x4c742400
 800b7b4:	4a742400 	.word	0x4a742400
 800b7b8:	4bbebc20 	.word	0x4bbebc20

0800b7bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7ca:	4b53      	ldr	r3, [pc, #332]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ce:	f003 0303 	and.w	r3, r3, #3
 800b7d2:	2b03      	cmp	r3, #3
 800b7d4:	d101      	bne.n	800b7da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e099      	b.n	800b90e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b7da:	4b4f      	ldr	r3, [pc, #316]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a4e      	ldr	r2, [pc, #312]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b7e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b7e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7e6:	f7f7 faad 	bl	8002d44 <HAL_GetTick>
 800b7ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7ec:	e008      	b.n	800b800 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b7ee:	f7f7 faa9 	bl	8002d44 <HAL_GetTick>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d901      	bls.n	800b800 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	e086      	b.n	800b90e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b800:	4b45      	ldr	r3, [pc, #276]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1f0      	bne.n	800b7ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b80c:	4b42      	ldr	r3, [pc, #264]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b810:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	031b      	lsls	r3, r3, #12
 800b81a:	493f      	ldr	r1, [pc, #252]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b81c:	4313      	orrs	r3, r2
 800b81e:	628b      	str	r3, [r1, #40]	; 0x28
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	3b01      	subs	r3, #1
 800b826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	3b01      	subs	r3, #1
 800b830:	025b      	lsls	r3, r3, #9
 800b832:	b29b      	uxth	r3, r3
 800b834:	431a      	orrs	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	041b      	lsls	r3, r3, #16
 800b83e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b842:	431a      	orrs	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	3b01      	subs	r3, #1
 800b84a:	061b      	lsls	r3, r3, #24
 800b84c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b850:	4931      	ldr	r1, [pc, #196]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b852:	4313      	orrs	r3, r2
 800b854:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b856:	4b30      	ldr	r3, [pc, #192]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	492d      	ldr	r1, [pc, #180]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b864:	4313      	orrs	r3, r2
 800b866:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b868:	4b2b      	ldr	r3, [pc, #172]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	f023 0220 	bic.w	r2, r3, #32
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	4928      	ldr	r1, [pc, #160]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b876:	4313      	orrs	r3, r2
 800b878:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b87a:	4b27      	ldr	r3, [pc, #156]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87e:	4a26      	ldr	r2, [pc, #152]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b880:	f023 0310 	bic.w	r3, r3, #16
 800b884:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b886:	4b24      	ldr	r3, [pc, #144]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b88a:	4b24      	ldr	r3, [pc, #144]	; (800b91c <RCCEx_PLL2_Config+0x160>)
 800b88c:	4013      	ands	r3, r2
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	69d2      	ldr	r2, [r2, #28]
 800b892:	00d2      	lsls	r2, r2, #3
 800b894:	4920      	ldr	r1, [pc, #128]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b896:	4313      	orrs	r3, r2
 800b898:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b89a:	4b1f      	ldr	r3, [pc, #124]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89e:	4a1e      	ldr	r2, [pc, #120]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b8a0:	f043 0310 	orr.w	r3, r3, #16
 800b8a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d106      	bne.n	800b8ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b8ac:	4b1a      	ldr	r3, [pc, #104]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b0:	4a19      	ldr	r2, [pc, #100]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b8b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b8b8:	e00f      	b.n	800b8da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d106      	bne.n	800b8ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b8c0:	4b15      	ldr	r3, [pc, #84]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c4:	4a14      	ldr	r2, [pc, #80]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b8c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b8cc:	e005      	b.n	800b8da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b8ce:	4b12      	ldr	r3, [pc, #72]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d2:	4a11      	ldr	r2, [pc, #68]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b8d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b8da:	4b0f      	ldr	r3, [pc, #60]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a0e      	ldr	r2, [pc, #56]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b8e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b8e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8e6:	f7f7 fa2d 	bl	8002d44 <HAL_GetTick>
 800b8ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8ec:	e008      	b.n	800b900 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b8ee:	f7f7 fa29 	bl	8002d44 <HAL_GetTick>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d901      	bls.n	800b900 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e006      	b.n	800b90e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b900:	4b05      	ldr	r3, [pc, #20]	; (800b918 <RCCEx_PLL2_Config+0x15c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d0f0      	beq.n	800b8ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	58024400 	.word	0x58024400
 800b91c:	ffff0007 	.word	0xffff0007

0800b920 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b92e:	4b53      	ldr	r3, [pc, #332]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b932:	f003 0303 	and.w	r3, r3, #3
 800b936:	2b03      	cmp	r3, #3
 800b938:	d101      	bne.n	800b93e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e099      	b.n	800ba72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b93e:	4b4f      	ldr	r3, [pc, #316]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a4e      	ldr	r2, [pc, #312]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b94a:	f7f7 f9fb 	bl	8002d44 <HAL_GetTick>
 800b94e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b950:	e008      	b.n	800b964 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b952:	f7f7 f9f7 	bl	8002d44 <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d901      	bls.n	800b964 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b960:	2303      	movs	r3, #3
 800b962:	e086      	b.n	800ba72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b964:	4b45      	ldr	r3, [pc, #276]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1f0      	bne.n	800b952 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b970:	4b42      	ldr	r3, [pc, #264]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b974:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	051b      	lsls	r3, r3, #20
 800b97e:	493f      	ldr	r1, [pc, #252]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b980:	4313      	orrs	r3, r2
 800b982:	628b      	str	r3, [r1, #40]	; 0x28
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	3b01      	subs	r3, #1
 800b98a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	3b01      	subs	r3, #1
 800b994:	025b      	lsls	r3, r3, #9
 800b996:	b29b      	uxth	r3, r3
 800b998:	431a      	orrs	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	041b      	lsls	r3, r3, #16
 800b9a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b9a6:	431a      	orrs	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	061b      	lsls	r3, r3, #24
 800b9b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b9b4:	4931      	ldr	r1, [pc, #196]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b9ba:	4b30      	ldr	r3, [pc, #192]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	492d      	ldr	r1, [pc, #180]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b9cc:	4b2b      	ldr	r3, [pc, #172]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	4928      	ldr	r1, [pc, #160]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b9de:	4b27      	ldr	r3, [pc, #156]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e2:	4a26      	ldr	r2, [pc, #152]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b9e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b9ea:	4b24      	ldr	r3, [pc, #144]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b9ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9ee:	4b24      	ldr	r3, [pc, #144]	; (800ba80 <RCCEx_PLL3_Config+0x160>)
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	69d2      	ldr	r2, [r2, #28]
 800b9f6:	00d2      	lsls	r2, r2, #3
 800b9f8:	4920      	ldr	r1, [pc, #128]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b9fe:	4b1f      	ldr	r3, [pc, #124]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800ba00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba02:	4a1e      	ldr	r2, [pc, #120]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800ba04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d106      	bne.n	800ba1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba10:	4b1a      	ldr	r3, [pc, #104]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800ba12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba14:	4a19      	ldr	r2, [pc, #100]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800ba16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ba1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba1c:	e00f      	b.n	800ba3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d106      	bne.n	800ba32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ba24:	4b15      	ldr	r3, [pc, #84]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	4a14      	ldr	r2, [pc, #80]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800ba2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ba2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba30:	e005      	b.n	800ba3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ba32:	4b12      	ldr	r3, [pc, #72]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800ba34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba36:	4a11      	ldr	r2, [pc, #68]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800ba38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ba3e:	4b0f      	ldr	r3, [pc, #60]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a0e      	ldr	r2, [pc, #56]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800ba44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba4a:	f7f7 f97b 	bl	8002d44 <HAL_GetTick>
 800ba4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba50:	e008      	b.n	800ba64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba52:	f7f7 f977 	bl	8002d44 <HAL_GetTick>
 800ba56:	4602      	mov	r2, r0
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d901      	bls.n	800ba64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba60:	2303      	movs	r3, #3
 800ba62:	e006      	b.n	800ba72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba64:	4b05      	ldr	r3, [pc, #20]	; (800ba7c <RCCEx_PLL3_Config+0x15c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d0f0      	beq.n	800ba52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	58024400 	.word	0x58024400
 800ba80:	ffff0007 	.word	0xffff0007

0800ba84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e049      	b.n	800bb2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d106      	bne.n	800bab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7f6 fd8a 	bl	80025c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2202      	movs	r2, #2
 800bab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	3304      	adds	r3, #4
 800bac0:	4619      	mov	r1, r3
 800bac2:	4610      	mov	r0, r2
 800bac4:	f001 fa9e 	bl	800d004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2201      	movs	r2, #1
 800bae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d001      	beq.n	800bb4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e054      	b.n	800bbf6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2202      	movs	r2, #2
 800bb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68da      	ldr	r2, [r3, #12]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f042 0201 	orr.w	r2, r2, #1
 800bb62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a26      	ldr	r2, [pc, #152]	; (800bc04 <HAL_TIM_Base_Start_IT+0xd0>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d022      	beq.n	800bbb4 <HAL_TIM_Base_Start_IT+0x80>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb76:	d01d      	beq.n	800bbb4 <HAL_TIM_Base_Start_IT+0x80>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a22      	ldr	r2, [pc, #136]	; (800bc08 <HAL_TIM_Base_Start_IT+0xd4>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d018      	beq.n	800bbb4 <HAL_TIM_Base_Start_IT+0x80>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a21      	ldr	r2, [pc, #132]	; (800bc0c <HAL_TIM_Base_Start_IT+0xd8>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d013      	beq.n	800bbb4 <HAL_TIM_Base_Start_IT+0x80>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a1f      	ldr	r2, [pc, #124]	; (800bc10 <HAL_TIM_Base_Start_IT+0xdc>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d00e      	beq.n	800bbb4 <HAL_TIM_Base_Start_IT+0x80>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a1e      	ldr	r2, [pc, #120]	; (800bc14 <HAL_TIM_Base_Start_IT+0xe0>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d009      	beq.n	800bbb4 <HAL_TIM_Base_Start_IT+0x80>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a1c      	ldr	r2, [pc, #112]	; (800bc18 <HAL_TIM_Base_Start_IT+0xe4>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d004      	beq.n	800bbb4 <HAL_TIM_Base_Start_IT+0x80>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a1b      	ldr	r2, [pc, #108]	; (800bc1c <HAL_TIM_Base_Start_IT+0xe8>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d115      	bne.n	800bbe0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	689a      	ldr	r2, [r3, #8]
 800bbba:	4b19      	ldr	r3, [pc, #100]	; (800bc20 <HAL_TIM_Base_Start_IT+0xec>)
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2b06      	cmp	r3, #6
 800bbc4:	d015      	beq.n	800bbf2 <HAL_TIM_Base_Start_IT+0xbe>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbcc:	d011      	beq.n	800bbf2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f042 0201 	orr.w	r2, r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbde:	e008      	b.n	800bbf2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f042 0201 	orr.w	r2, r2, #1
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	e000      	b.n	800bbf4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3714      	adds	r7, #20
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	40010000 	.word	0x40010000
 800bc08:	40000400 	.word	0x40000400
 800bc0c:	40000800 	.word	0x40000800
 800bc10:	40000c00 	.word	0x40000c00
 800bc14:	40010400 	.word	0x40010400
 800bc18:	40001800 	.word	0x40001800
 800bc1c:	40014000 	.word	0x40014000
 800bc20:	00010007 	.word	0x00010007

0800bc24 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68da      	ldr	r2, [r3, #12]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f022 0201 	bic.w	r2, r2, #1
 800bc3a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6a1a      	ldr	r2, [r3, #32]
 800bc42:	f241 1311 	movw	r3, #4369	; 0x1111
 800bc46:	4013      	ands	r3, r2
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10f      	bne.n	800bc6c <HAL_TIM_Base_Stop_IT+0x48>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6a1a      	ldr	r2, [r3, #32]
 800bc52:	f240 4344 	movw	r3, #1092	; 0x444
 800bc56:	4013      	ands	r3, r2
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d107      	bne.n	800bc6c <HAL_TIM_Base_Stop_IT+0x48>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f022 0201 	bic.w	r2, r2, #1
 800bc6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b082      	sub	sp, #8
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	e049      	b.n	800bd28 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d106      	bne.n	800bcae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 f841 	bl	800bd30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2202      	movs	r2, #2
 800bcb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	f001 f99f 	bl	800d004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2201      	movs	r2, #1
 800bce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2201      	movs	r2, #1
 800bcea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d109      	bne.n	800bd68 <HAL_TIM_PWM_Start+0x24>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	bf14      	ite	ne
 800bd60:	2301      	movne	r3, #1
 800bd62:	2300      	moveq	r3, #0
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	e03c      	b.n	800bde2 <HAL_TIM_PWM_Start+0x9e>
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	2b04      	cmp	r3, #4
 800bd6c:	d109      	bne.n	800bd82 <HAL_TIM_PWM_Start+0x3e>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	bf14      	ite	ne
 800bd7a:	2301      	movne	r3, #1
 800bd7c:	2300      	moveq	r3, #0
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	e02f      	b.n	800bde2 <HAL_TIM_PWM_Start+0x9e>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b08      	cmp	r3, #8
 800bd86:	d109      	bne.n	800bd9c <HAL_TIM_PWM_Start+0x58>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	bf14      	ite	ne
 800bd94:	2301      	movne	r3, #1
 800bd96:	2300      	moveq	r3, #0
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	e022      	b.n	800bde2 <HAL_TIM_PWM_Start+0x9e>
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2b0c      	cmp	r3, #12
 800bda0:	d109      	bne.n	800bdb6 <HAL_TIM_PWM_Start+0x72>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	bf14      	ite	ne
 800bdae:	2301      	movne	r3, #1
 800bdb0:	2300      	moveq	r3, #0
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	e015      	b.n	800bde2 <HAL_TIM_PWM_Start+0x9e>
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	2b10      	cmp	r3, #16
 800bdba:	d109      	bne.n	800bdd0 <HAL_TIM_PWM_Start+0x8c>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	bf14      	ite	ne
 800bdc8:	2301      	movne	r3, #1
 800bdca:	2300      	moveq	r3, #0
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	e008      	b.n	800bde2 <HAL_TIM_PWM_Start+0x9e>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	bf14      	ite	ne
 800bddc:	2301      	movne	r3, #1
 800bdde:	2300      	moveq	r3, #0
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e0a1      	b.n	800bf2e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d104      	bne.n	800bdfa <HAL_TIM_PWM_Start+0xb6>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2202      	movs	r2, #2
 800bdf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdf8:	e023      	b.n	800be42 <HAL_TIM_PWM_Start+0xfe>
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	d104      	bne.n	800be0a <HAL_TIM_PWM_Start+0xc6>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2202      	movs	r2, #2
 800be04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be08:	e01b      	b.n	800be42 <HAL_TIM_PWM_Start+0xfe>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b08      	cmp	r3, #8
 800be0e:	d104      	bne.n	800be1a <HAL_TIM_PWM_Start+0xd6>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2202      	movs	r2, #2
 800be14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be18:	e013      	b.n	800be42 <HAL_TIM_PWM_Start+0xfe>
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	2b0c      	cmp	r3, #12
 800be1e:	d104      	bne.n	800be2a <HAL_TIM_PWM_Start+0xe6>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be28:	e00b      	b.n	800be42 <HAL_TIM_PWM_Start+0xfe>
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	2b10      	cmp	r3, #16
 800be2e:	d104      	bne.n	800be3a <HAL_TIM_PWM_Start+0xf6>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2202      	movs	r2, #2
 800be34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be38:	e003      	b.n	800be42 <HAL_TIM_PWM_Start+0xfe>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2202      	movs	r2, #2
 800be3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2201      	movs	r2, #1
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f001 fefc 	bl	800dc48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a38      	ldr	r2, [pc, #224]	; (800bf38 <HAL_TIM_PWM_Start+0x1f4>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d013      	beq.n	800be82 <HAL_TIM_PWM_Start+0x13e>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a37      	ldr	r2, [pc, #220]	; (800bf3c <HAL_TIM_PWM_Start+0x1f8>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d00e      	beq.n	800be82 <HAL_TIM_PWM_Start+0x13e>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a35      	ldr	r2, [pc, #212]	; (800bf40 <HAL_TIM_PWM_Start+0x1fc>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d009      	beq.n	800be82 <HAL_TIM_PWM_Start+0x13e>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a34      	ldr	r2, [pc, #208]	; (800bf44 <HAL_TIM_PWM_Start+0x200>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d004      	beq.n	800be82 <HAL_TIM_PWM_Start+0x13e>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a32      	ldr	r2, [pc, #200]	; (800bf48 <HAL_TIM_PWM_Start+0x204>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d101      	bne.n	800be86 <HAL_TIM_PWM_Start+0x142>
 800be82:	2301      	movs	r3, #1
 800be84:	e000      	b.n	800be88 <HAL_TIM_PWM_Start+0x144>
 800be86:	2300      	movs	r3, #0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d007      	beq.n	800be9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a25      	ldr	r2, [pc, #148]	; (800bf38 <HAL_TIM_PWM_Start+0x1f4>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d022      	beq.n	800beec <HAL_TIM_PWM_Start+0x1a8>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beae:	d01d      	beq.n	800beec <HAL_TIM_PWM_Start+0x1a8>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a25      	ldr	r2, [pc, #148]	; (800bf4c <HAL_TIM_PWM_Start+0x208>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d018      	beq.n	800beec <HAL_TIM_PWM_Start+0x1a8>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a24      	ldr	r2, [pc, #144]	; (800bf50 <HAL_TIM_PWM_Start+0x20c>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d013      	beq.n	800beec <HAL_TIM_PWM_Start+0x1a8>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a22      	ldr	r2, [pc, #136]	; (800bf54 <HAL_TIM_PWM_Start+0x210>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d00e      	beq.n	800beec <HAL_TIM_PWM_Start+0x1a8>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a1a      	ldr	r2, [pc, #104]	; (800bf3c <HAL_TIM_PWM_Start+0x1f8>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d009      	beq.n	800beec <HAL_TIM_PWM_Start+0x1a8>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a1e      	ldr	r2, [pc, #120]	; (800bf58 <HAL_TIM_PWM_Start+0x214>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d004      	beq.n	800beec <HAL_TIM_PWM_Start+0x1a8>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a16      	ldr	r2, [pc, #88]	; (800bf40 <HAL_TIM_PWM_Start+0x1fc>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d115      	bne.n	800bf18 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	689a      	ldr	r2, [r3, #8]
 800bef2:	4b1a      	ldr	r3, [pc, #104]	; (800bf5c <HAL_TIM_PWM_Start+0x218>)
 800bef4:	4013      	ands	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2b06      	cmp	r3, #6
 800befc:	d015      	beq.n	800bf2a <HAL_TIM_PWM_Start+0x1e6>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf04:	d011      	beq.n	800bf2a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f042 0201 	orr.w	r2, r2, #1
 800bf14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf16:	e008      	b.n	800bf2a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f042 0201 	orr.w	r2, r2, #1
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	e000      	b.n	800bf2c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	40010000 	.word	0x40010000
 800bf3c:	40010400 	.word	0x40010400
 800bf40:	40014000 	.word	0x40014000
 800bf44:	40014400 	.word	0x40014400
 800bf48:	40014800 	.word	0x40014800
 800bf4c:	40000400 	.word	0x40000400
 800bf50:	40000800 	.word	0x40000800
 800bf54:	40000c00 	.word	0x40000c00
 800bf58:	40001800 	.word	0x40001800
 800bf5c:	00010007 	.word	0x00010007

0800bf60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d101      	bne.n	800bf72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e049      	b.n	800c006 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d106      	bne.n	800bf8c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f841 	bl	800c00e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	f001 f830 	bl	800d004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c00e:	b480      	push	{r7}
 800c010:	b083      	sub	sp, #12
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c016:	bf00      	nop
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
	...

0800c024 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d104      	bne.n	800c03e <HAL_TIM_IC_Start+0x1a>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	e023      	b.n	800c086 <HAL_TIM_IC_Start+0x62>
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	2b04      	cmp	r3, #4
 800c042:	d104      	bne.n	800c04e <HAL_TIM_IC_Start+0x2a>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	e01b      	b.n	800c086 <HAL_TIM_IC_Start+0x62>
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b08      	cmp	r3, #8
 800c052:	d104      	bne.n	800c05e <HAL_TIM_IC_Start+0x3a>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	e013      	b.n	800c086 <HAL_TIM_IC_Start+0x62>
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	2b0c      	cmp	r3, #12
 800c062:	d104      	bne.n	800c06e <HAL_TIM_IC_Start+0x4a>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	e00b      	b.n	800c086 <HAL_TIM_IC_Start+0x62>
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	2b10      	cmp	r3, #16
 800c072:	d104      	bne.n	800c07e <HAL_TIM_IC_Start+0x5a>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	e003      	b.n	800c086 <HAL_TIM_IC_Start+0x62>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c084:	b2db      	uxtb	r3, r3
 800c086:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d104      	bne.n	800c098 <HAL_TIM_IC_Start+0x74>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c094:	b2db      	uxtb	r3, r3
 800c096:	e013      	b.n	800c0c0 <HAL_TIM_IC_Start+0x9c>
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	2b04      	cmp	r3, #4
 800c09c:	d104      	bne.n	800c0a8 <HAL_TIM_IC_Start+0x84>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	e00b      	b.n	800c0c0 <HAL_TIM_IC_Start+0x9c>
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	2b08      	cmp	r3, #8
 800c0ac:	d104      	bne.n	800c0b8 <HAL_TIM_IC_Start+0x94>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	e003      	b.n	800c0c0 <HAL_TIM_IC_Start+0x9c>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d102      	bne.n	800c0ce <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d001      	beq.n	800c0d2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e097      	b.n	800c202 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d104      	bne.n	800c0e2 <HAL_TIM_IC_Start+0xbe>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2202      	movs	r2, #2
 800c0dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0e0:	e023      	b.n	800c12a <HAL_TIM_IC_Start+0x106>
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	2b04      	cmp	r3, #4
 800c0e6:	d104      	bne.n	800c0f2 <HAL_TIM_IC_Start+0xce>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0f0:	e01b      	b.n	800c12a <HAL_TIM_IC_Start+0x106>
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	2b08      	cmp	r3, #8
 800c0f6:	d104      	bne.n	800c102 <HAL_TIM_IC_Start+0xde>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c100:	e013      	b.n	800c12a <HAL_TIM_IC_Start+0x106>
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	2b0c      	cmp	r3, #12
 800c106:	d104      	bne.n	800c112 <HAL_TIM_IC_Start+0xee>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2202      	movs	r2, #2
 800c10c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c110:	e00b      	b.n	800c12a <HAL_TIM_IC_Start+0x106>
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	2b10      	cmp	r3, #16
 800c116:	d104      	bne.n	800c122 <HAL_TIM_IC_Start+0xfe>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2202      	movs	r2, #2
 800c11c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c120:	e003      	b.n	800c12a <HAL_TIM_IC_Start+0x106>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2202      	movs	r2, #2
 800c126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d104      	bne.n	800c13a <HAL_TIM_IC_Start+0x116>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2202      	movs	r2, #2
 800c134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c138:	e013      	b.n	800c162 <HAL_TIM_IC_Start+0x13e>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b04      	cmp	r3, #4
 800c13e:	d104      	bne.n	800c14a <HAL_TIM_IC_Start+0x126>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2202      	movs	r2, #2
 800c144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c148:	e00b      	b.n	800c162 <HAL_TIM_IC_Start+0x13e>
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	2b08      	cmp	r3, #8
 800c14e:	d104      	bne.n	800c15a <HAL_TIM_IC_Start+0x136>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2202      	movs	r2, #2
 800c154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c158:	e003      	b.n	800c162 <HAL_TIM_IC_Start+0x13e>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2202      	movs	r2, #2
 800c15e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2201      	movs	r2, #1
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f001 fd6c 	bl	800dc48 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a25      	ldr	r2, [pc, #148]	; (800c20c <HAL_TIM_IC_Start+0x1e8>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d022      	beq.n	800c1c0 <HAL_TIM_IC_Start+0x19c>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c182:	d01d      	beq.n	800c1c0 <HAL_TIM_IC_Start+0x19c>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a21      	ldr	r2, [pc, #132]	; (800c210 <HAL_TIM_IC_Start+0x1ec>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d018      	beq.n	800c1c0 <HAL_TIM_IC_Start+0x19c>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4a20      	ldr	r2, [pc, #128]	; (800c214 <HAL_TIM_IC_Start+0x1f0>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d013      	beq.n	800c1c0 <HAL_TIM_IC_Start+0x19c>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a1e      	ldr	r2, [pc, #120]	; (800c218 <HAL_TIM_IC_Start+0x1f4>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d00e      	beq.n	800c1c0 <HAL_TIM_IC_Start+0x19c>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a1d      	ldr	r2, [pc, #116]	; (800c21c <HAL_TIM_IC_Start+0x1f8>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d009      	beq.n	800c1c0 <HAL_TIM_IC_Start+0x19c>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a1b      	ldr	r2, [pc, #108]	; (800c220 <HAL_TIM_IC_Start+0x1fc>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d004      	beq.n	800c1c0 <HAL_TIM_IC_Start+0x19c>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a1a      	ldr	r2, [pc, #104]	; (800c224 <HAL_TIM_IC_Start+0x200>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d115      	bne.n	800c1ec <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	689a      	ldr	r2, [r3, #8]
 800c1c6:	4b18      	ldr	r3, [pc, #96]	; (800c228 <HAL_TIM_IC_Start+0x204>)
 800c1c8:	4013      	ands	r3, r2
 800c1ca:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	2b06      	cmp	r3, #6
 800c1d0:	d015      	beq.n	800c1fe <HAL_TIM_IC_Start+0x1da>
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1d8:	d011      	beq.n	800c1fe <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f042 0201 	orr.w	r2, r2, #1
 800c1e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1ea:	e008      	b.n	800c1fe <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 0201 	orr.w	r2, r2, #1
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	e000      	b.n	800c200 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	40010000 	.word	0x40010000
 800c210:	40000400 	.word	0x40000400
 800c214:	40000800 	.word	0x40000800
 800c218:	40000c00 	.word	0x40000c00
 800c21c:	40010400 	.word	0x40010400
 800c220:	40001800 	.word	0x40001800
 800c224:	40014000 	.word	0x40014000
 800c228:	00010007 	.word	0x00010007

0800c22c <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2200      	movs	r2, #0
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	4618      	mov	r0, r3
 800c240:	f001 fd02 	bl	800dc48 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6a1a      	ldr	r2, [r3, #32]
 800c24a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c24e:	4013      	ands	r3, r2
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10f      	bne.n	800c274 <HAL_TIM_IC_Stop+0x48>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	6a1a      	ldr	r2, [r3, #32]
 800c25a:	f240 4344 	movw	r3, #1092	; 0x444
 800c25e:	4013      	ands	r3, r2
 800c260:	2b00      	cmp	r3, #0
 800c262:	d107      	bne.n	800c274 <HAL_TIM_IC_Stop+0x48>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f022 0201 	bic.w	r2, r2, #1
 800c272:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d104      	bne.n	800c284 <HAL_TIM_IC_Stop+0x58>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c282:	e023      	b.n	800c2cc <HAL_TIM_IC_Stop+0xa0>
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	2b04      	cmp	r3, #4
 800c288:	d104      	bne.n	800c294 <HAL_TIM_IC_Stop+0x68>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c292:	e01b      	b.n	800c2cc <HAL_TIM_IC_Stop+0xa0>
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	2b08      	cmp	r3, #8
 800c298:	d104      	bne.n	800c2a4 <HAL_TIM_IC_Stop+0x78>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2201      	movs	r2, #1
 800c29e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c2a2:	e013      	b.n	800c2cc <HAL_TIM_IC_Stop+0xa0>
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b0c      	cmp	r3, #12
 800c2a8:	d104      	bne.n	800c2b4 <HAL_TIM_IC_Stop+0x88>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c2b2:	e00b      	b.n	800c2cc <HAL_TIM_IC_Stop+0xa0>
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b10      	cmp	r3, #16
 800c2b8:	d104      	bne.n	800c2c4 <HAL_TIM_IC_Stop+0x98>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c2c2:	e003      	b.n	800c2cc <HAL_TIM_IC_Stop+0xa0>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d104      	bne.n	800c2dc <HAL_TIM_IC_Stop+0xb0>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2da:	e013      	b.n	800c304 <HAL_TIM_IC_Stop+0xd8>
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	2b04      	cmp	r3, #4
 800c2e0:	d104      	bne.n	800c2ec <HAL_TIM_IC_Stop+0xc0>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2ea:	e00b      	b.n	800c304 <HAL_TIM_IC_Stop+0xd8>
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2b08      	cmp	r3, #8
 800c2f0:	d104      	bne.n	800c2fc <HAL_TIM_IC_Stop+0xd0>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2fa:	e003      	b.n	800c304 <HAL_TIM_IC_Stop+0xd8>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
	...

0800c310 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d104      	bne.n	800c32e <HAL_TIM_IC_Start_IT+0x1e>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	e023      	b.n	800c376 <HAL_TIM_IC_Start_IT+0x66>
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	2b04      	cmp	r3, #4
 800c332:	d104      	bne.n	800c33e <HAL_TIM_IC_Start_IT+0x2e>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	e01b      	b.n	800c376 <HAL_TIM_IC_Start_IT+0x66>
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b08      	cmp	r3, #8
 800c342:	d104      	bne.n	800c34e <HAL_TIM_IC_Start_IT+0x3e>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	e013      	b.n	800c376 <HAL_TIM_IC_Start_IT+0x66>
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b0c      	cmp	r3, #12
 800c352:	d104      	bne.n	800c35e <HAL_TIM_IC_Start_IT+0x4e>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	e00b      	b.n	800c376 <HAL_TIM_IC_Start_IT+0x66>
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b10      	cmp	r3, #16
 800c362:	d104      	bne.n	800c36e <HAL_TIM_IC_Start_IT+0x5e>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	e003      	b.n	800c376 <HAL_TIM_IC_Start_IT+0x66>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c374:	b2db      	uxtb	r3, r3
 800c376:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d104      	bne.n	800c388 <HAL_TIM_IC_Start_IT+0x78>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c384:	b2db      	uxtb	r3, r3
 800c386:	e013      	b.n	800c3b0 <HAL_TIM_IC_Start_IT+0xa0>
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	2b04      	cmp	r3, #4
 800c38c:	d104      	bne.n	800c398 <HAL_TIM_IC_Start_IT+0x88>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c394:	b2db      	uxtb	r3, r3
 800c396:	e00b      	b.n	800c3b0 <HAL_TIM_IC_Start_IT+0xa0>
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2b08      	cmp	r3, #8
 800c39c:	d104      	bne.n	800c3a8 <HAL_TIM_IC_Start_IT+0x98>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	e003      	b.n	800c3b0 <HAL_TIM_IC_Start_IT+0xa0>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c3b2:	7bbb      	ldrb	r3, [r7, #14]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d102      	bne.n	800c3be <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c3b8:	7b7b      	ldrb	r3, [r7, #13]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d001      	beq.n	800c3c2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e0e2      	b.n	800c588 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d104      	bne.n	800c3d2 <HAL_TIM_IC_Start_IT+0xc2>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3d0:	e023      	b.n	800c41a <HAL_TIM_IC_Start_IT+0x10a>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	2b04      	cmp	r3, #4
 800c3d6:	d104      	bne.n	800c3e2 <HAL_TIM_IC_Start_IT+0xd2>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2202      	movs	r2, #2
 800c3dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3e0:	e01b      	b.n	800c41a <HAL_TIM_IC_Start_IT+0x10a>
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	2b08      	cmp	r3, #8
 800c3e6:	d104      	bne.n	800c3f2 <HAL_TIM_IC_Start_IT+0xe2>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3f0:	e013      	b.n	800c41a <HAL_TIM_IC_Start_IT+0x10a>
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	2b0c      	cmp	r3, #12
 800c3f6:	d104      	bne.n	800c402 <HAL_TIM_IC_Start_IT+0xf2>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c400:	e00b      	b.n	800c41a <HAL_TIM_IC_Start_IT+0x10a>
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2b10      	cmp	r3, #16
 800c406:	d104      	bne.n	800c412 <HAL_TIM_IC_Start_IT+0x102>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2202      	movs	r2, #2
 800c40c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c410:	e003      	b.n	800c41a <HAL_TIM_IC_Start_IT+0x10a>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2202      	movs	r2, #2
 800c416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d104      	bne.n	800c42a <HAL_TIM_IC_Start_IT+0x11a>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2202      	movs	r2, #2
 800c424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c428:	e013      	b.n	800c452 <HAL_TIM_IC_Start_IT+0x142>
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b04      	cmp	r3, #4
 800c42e:	d104      	bne.n	800c43a <HAL_TIM_IC_Start_IT+0x12a>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2202      	movs	r2, #2
 800c434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c438:	e00b      	b.n	800c452 <HAL_TIM_IC_Start_IT+0x142>
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b08      	cmp	r3, #8
 800c43e:	d104      	bne.n	800c44a <HAL_TIM_IC_Start_IT+0x13a>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2202      	movs	r2, #2
 800c444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c448:	e003      	b.n	800c452 <HAL_TIM_IC_Start_IT+0x142>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2202      	movs	r2, #2
 800c44e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	2b0c      	cmp	r3, #12
 800c456:	d841      	bhi.n	800c4dc <HAL_TIM_IC_Start_IT+0x1cc>
 800c458:	a201      	add	r2, pc, #4	; (adr r2, 800c460 <HAL_TIM_IC_Start_IT+0x150>)
 800c45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45e:	bf00      	nop
 800c460:	0800c495 	.word	0x0800c495
 800c464:	0800c4dd 	.word	0x0800c4dd
 800c468:	0800c4dd 	.word	0x0800c4dd
 800c46c:	0800c4dd 	.word	0x0800c4dd
 800c470:	0800c4a7 	.word	0x0800c4a7
 800c474:	0800c4dd 	.word	0x0800c4dd
 800c478:	0800c4dd 	.word	0x0800c4dd
 800c47c:	0800c4dd 	.word	0x0800c4dd
 800c480:	0800c4b9 	.word	0x0800c4b9
 800c484:	0800c4dd 	.word	0x0800c4dd
 800c488:	0800c4dd 	.word	0x0800c4dd
 800c48c:	0800c4dd 	.word	0x0800c4dd
 800c490:	0800c4cb 	.word	0x0800c4cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68da      	ldr	r2, [r3, #12]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f042 0202 	orr.w	r2, r2, #2
 800c4a2:	60da      	str	r2, [r3, #12]
      break;
 800c4a4:	e01d      	b.n	800c4e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68da      	ldr	r2, [r3, #12]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f042 0204 	orr.w	r2, r2, #4
 800c4b4:	60da      	str	r2, [r3, #12]
      break;
 800c4b6:	e014      	b.n	800c4e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68da      	ldr	r2, [r3, #12]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f042 0208 	orr.w	r2, r2, #8
 800c4c6:	60da      	str	r2, [r3, #12]
      break;
 800c4c8:	e00b      	b.n	800c4e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	68da      	ldr	r2, [r3, #12]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f042 0210 	orr.w	r2, r2, #16
 800c4d8:	60da      	str	r2, [r3, #12]
      break;
 800c4da:	e002      	b.n	800c4e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	73fb      	strb	r3, [r7, #15]
      break;
 800c4e0:	bf00      	nop
  }

  if (status == HAL_OK)
 800c4e2:	7bfb      	ldrb	r3, [r7, #15]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d14e      	bne.n	800c586 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	6839      	ldr	r1, [r7, #0]
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f001 fba9 	bl	800dc48 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a25      	ldr	r2, [pc, #148]	; (800c590 <HAL_TIM_IC_Start_IT+0x280>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d022      	beq.n	800c546 <HAL_TIM_IC_Start_IT+0x236>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c508:	d01d      	beq.n	800c546 <HAL_TIM_IC_Start_IT+0x236>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a21      	ldr	r2, [pc, #132]	; (800c594 <HAL_TIM_IC_Start_IT+0x284>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d018      	beq.n	800c546 <HAL_TIM_IC_Start_IT+0x236>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a1f      	ldr	r2, [pc, #124]	; (800c598 <HAL_TIM_IC_Start_IT+0x288>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d013      	beq.n	800c546 <HAL_TIM_IC_Start_IT+0x236>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a1e      	ldr	r2, [pc, #120]	; (800c59c <HAL_TIM_IC_Start_IT+0x28c>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d00e      	beq.n	800c546 <HAL_TIM_IC_Start_IT+0x236>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a1c      	ldr	r2, [pc, #112]	; (800c5a0 <HAL_TIM_IC_Start_IT+0x290>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d009      	beq.n	800c546 <HAL_TIM_IC_Start_IT+0x236>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a1b      	ldr	r2, [pc, #108]	; (800c5a4 <HAL_TIM_IC_Start_IT+0x294>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d004      	beq.n	800c546 <HAL_TIM_IC_Start_IT+0x236>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a19      	ldr	r2, [pc, #100]	; (800c5a8 <HAL_TIM_IC_Start_IT+0x298>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d115      	bne.n	800c572 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	689a      	ldr	r2, [r3, #8]
 800c54c:	4b17      	ldr	r3, [pc, #92]	; (800c5ac <HAL_TIM_IC_Start_IT+0x29c>)
 800c54e:	4013      	ands	r3, r2
 800c550:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2b06      	cmp	r3, #6
 800c556:	d015      	beq.n	800c584 <HAL_TIM_IC_Start_IT+0x274>
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c55e:	d011      	beq.n	800c584 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f042 0201 	orr.w	r2, r2, #1
 800c56e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c570:	e008      	b.n	800c584 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f042 0201 	orr.w	r2, r2, #1
 800c580:	601a      	str	r2, [r3, #0]
 800c582:	e000      	b.n	800c586 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c584:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c586:	7bfb      	ldrb	r3, [r7, #15]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	40010000 	.word	0x40010000
 800c594:	40000400 	.word	0x40000400
 800c598:	40000800 	.word	0x40000800
 800c59c:	40000c00 	.word	0x40000c00
 800c5a0:	40010400 	.word	0x40010400
 800c5a4:	40001800 	.word	0x40001800
 800c5a8:	40014000 	.word	0x40014000
 800c5ac:	00010007 	.word	0x00010007

0800c5b0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b0c      	cmp	r3, #12
 800c5c2:	d841      	bhi.n	800c648 <HAL_TIM_IC_Stop_IT+0x98>
 800c5c4:	a201      	add	r2, pc, #4	; (adr r2, 800c5cc <HAL_TIM_IC_Stop_IT+0x1c>)
 800c5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ca:	bf00      	nop
 800c5cc:	0800c601 	.word	0x0800c601
 800c5d0:	0800c649 	.word	0x0800c649
 800c5d4:	0800c649 	.word	0x0800c649
 800c5d8:	0800c649 	.word	0x0800c649
 800c5dc:	0800c613 	.word	0x0800c613
 800c5e0:	0800c649 	.word	0x0800c649
 800c5e4:	0800c649 	.word	0x0800c649
 800c5e8:	0800c649 	.word	0x0800c649
 800c5ec:	0800c625 	.word	0x0800c625
 800c5f0:	0800c649 	.word	0x0800c649
 800c5f4:	0800c649 	.word	0x0800c649
 800c5f8:	0800c649 	.word	0x0800c649
 800c5fc:	0800c637 	.word	0x0800c637
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68da      	ldr	r2, [r3, #12]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f022 0202 	bic.w	r2, r2, #2
 800c60e:	60da      	str	r2, [r3, #12]
      break;
 800c610:	e01d      	b.n	800c64e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68da      	ldr	r2, [r3, #12]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f022 0204 	bic.w	r2, r2, #4
 800c620:	60da      	str	r2, [r3, #12]
      break;
 800c622:	e014      	b.n	800c64e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	68da      	ldr	r2, [r3, #12]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f022 0208 	bic.w	r2, r2, #8
 800c632:	60da      	str	r2, [r3, #12]
      break;
 800c634:	e00b      	b.n	800c64e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	68da      	ldr	r2, [r3, #12]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f022 0210 	bic.w	r2, r2, #16
 800c644:	60da      	str	r2, [r3, #12]
      break;
 800c646:	e002      	b.n	800c64e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	73fb      	strb	r3, [r7, #15]
      break;
 800c64c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c64e:	7bfb      	ldrb	r3, [r7, #15]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d166      	bne.n	800c722 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2200      	movs	r2, #0
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f001 faf3 	bl	800dc48 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	6a1a      	ldr	r2, [r3, #32]
 800c668:	f241 1311 	movw	r3, #4369	; 0x1111
 800c66c:	4013      	ands	r3, r2
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10f      	bne.n	800c692 <HAL_TIM_IC_Stop_IT+0xe2>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	6a1a      	ldr	r2, [r3, #32]
 800c678:	f240 4344 	movw	r3, #1092	; 0x444
 800c67c:	4013      	ands	r3, r2
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d107      	bne.n	800c692 <HAL_TIM_IC_Stop_IT+0xe2>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f022 0201 	bic.w	r2, r2, #1
 800c690:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d104      	bne.n	800c6a2 <HAL_TIM_IC_Stop_IT+0xf2>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6a0:	e023      	b.n	800c6ea <HAL_TIM_IC_Stop_IT+0x13a>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d104      	bne.n	800c6b2 <HAL_TIM_IC_Stop_IT+0x102>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6b0:	e01b      	b.n	800c6ea <HAL_TIM_IC_Stop_IT+0x13a>
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b08      	cmp	r3, #8
 800c6b6:	d104      	bne.n	800c6c2 <HAL_TIM_IC_Stop_IT+0x112>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6c0:	e013      	b.n	800c6ea <HAL_TIM_IC_Stop_IT+0x13a>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b0c      	cmp	r3, #12
 800c6c6:	d104      	bne.n	800c6d2 <HAL_TIM_IC_Stop_IT+0x122>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6d0:	e00b      	b.n	800c6ea <HAL_TIM_IC_Stop_IT+0x13a>
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	2b10      	cmp	r3, #16
 800c6d6:	d104      	bne.n	800c6e2 <HAL_TIM_IC_Stop_IT+0x132>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6e0:	e003      	b.n	800c6ea <HAL_TIM_IC_Stop_IT+0x13a>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d104      	bne.n	800c6fa <HAL_TIM_IC_Stop_IT+0x14a>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6f8:	e013      	b.n	800c722 <HAL_TIM_IC_Stop_IT+0x172>
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	2b04      	cmp	r3, #4
 800c6fe:	d104      	bne.n	800c70a <HAL_TIM_IC_Stop_IT+0x15a>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c708:	e00b      	b.n	800c722 <HAL_TIM_IC_Stop_IT+0x172>
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2b08      	cmp	r3, #8
 800c70e:	d104      	bne.n	800c71a <HAL_TIM_IC_Stop_IT+0x16a>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c718:	e003      	b.n	800c722 <HAL_TIM_IC_Stop_IT+0x172>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800c722:	7bfb      	ldrb	r3, [r7, #15]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	f003 0302 	and.w	r3, r3, #2
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d122      	bne.n	800c788 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	f003 0302 	and.w	r3, r3, #2
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d11b      	bne.n	800c788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f06f 0202 	mvn.w	r2, #2
 800c758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	699b      	ldr	r3, [r3, #24]
 800c766:	f003 0303 	and.w	r3, r3, #3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d003      	beq.n	800c776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7f4 ff62 	bl	8001638 <HAL_TIM_IC_CaptureCallback>
 800c774:	e005      	b.n	800c782 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fc26 	bl	800cfc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 fc2d 	bl	800cfdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	f003 0304 	and.w	r3, r3, #4
 800c792:	2b04      	cmp	r3, #4
 800c794:	d122      	bne.n	800c7dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	f003 0304 	and.w	r3, r3, #4
 800c7a0:	2b04      	cmp	r3, #4
 800c7a2:	d11b      	bne.n	800c7dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f06f 0204 	mvn.w	r2, #4
 800c7ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d003      	beq.n	800c7ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f7f4 ff38 	bl	8001638 <HAL_TIM_IC_CaptureCallback>
 800c7c8:	e005      	b.n	800c7d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 fbfc 	bl	800cfc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fc03 	bl	800cfdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	f003 0308 	and.w	r3, r3, #8
 800c7e6:	2b08      	cmp	r3, #8
 800c7e8:	d122      	bne.n	800c830 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	f003 0308 	and.w	r3, r3, #8
 800c7f4:	2b08      	cmp	r3, #8
 800c7f6:	d11b      	bne.n	800c830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f06f 0208 	mvn.w	r2, #8
 800c800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2204      	movs	r2, #4
 800c806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	f003 0303 	and.w	r3, r3, #3
 800c812:	2b00      	cmp	r3, #0
 800c814:	d003      	beq.n	800c81e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f7f4 ff0e 	bl	8001638 <HAL_TIM_IC_CaptureCallback>
 800c81c:	e005      	b.n	800c82a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fbd2 	bl	800cfc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 fbd9 	bl	800cfdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	f003 0310 	and.w	r3, r3, #16
 800c83a:	2b10      	cmp	r3, #16
 800c83c:	d122      	bne.n	800c884 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	f003 0310 	and.w	r3, r3, #16
 800c848:	2b10      	cmp	r3, #16
 800c84a:	d11b      	bne.n	800c884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f06f 0210 	mvn.w	r2, #16
 800c854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2208      	movs	r2, #8
 800c85a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	69db      	ldr	r3, [r3, #28]
 800c862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c866:	2b00      	cmp	r3, #0
 800c868:	d003      	beq.n	800c872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7f4 fee4 	bl	8001638 <HAL_TIM_IC_CaptureCallback>
 800c870:	e005      	b.n	800c87e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 fba8 	bl	800cfc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fbaf 	bl	800cfdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	f003 0301 	and.w	r3, r3, #1
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d10e      	bne.n	800c8b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	f003 0301 	and.w	r3, r3, #1
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d107      	bne.n	800c8b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f06f 0201 	mvn.w	r2, #1
 800c8a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7f4 fe96 	bl	80015dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ba:	2b80      	cmp	r3, #128	; 0x80
 800c8bc:	d10e      	bne.n	800c8dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8c8:	2b80      	cmp	r3, #128	; 0x80
 800c8ca:	d107      	bne.n	800c8dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c8d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f001 fa74 	bl	800ddc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ea:	d10e      	bne.n	800c90a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8f6:	2b80      	cmp	r3, #128	; 0x80
 800c8f8:	d107      	bne.n	800c90a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f001 fa67 	bl	800ddd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c914:	2b40      	cmp	r3, #64	; 0x40
 800c916:	d10e      	bne.n	800c936 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c922:	2b40      	cmp	r3, #64	; 0x40
 800c924:	d107      	bne.n	800c936 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c92e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fb5d 	bl	800cff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	f003 0320 	and.w	r3, r3, #32
 800c940:	2b20      	cmp	r3, #32
 800c942:	d10e      	bne.n	800c962 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	f003 0320 	and.w	r3, r3, #32
 800c94e:	2b20      	cmp	r3, #32
 800c950:	d107      	bne.n	800c962 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f06f 0220 	mvn.w	r2, #32
 800c95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f001 fa27 	bl	800ddb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c962:	bf00      	nop
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b086      	sub	sp, #24
 800c96e:	af00      	add	r7, sp, #0
 800c970:	60f8      	str	r0, [r7, #12]
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c980:	2b01      	cmp	r3, #1
 800c982:	d101      	bne.n	800c988 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c984:	2302      	movs	r3, #2
 800c986:	e088      	b.n	800ca9a <HAL_TIM_IC_ConfigChannel+0x130>
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d11b      	bne.n	800c9ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800c9a6:	f000 ff87 	bl	800d8b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	699a      	ldr	r2, [r3, #24]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f022 020c 	bic.w	r2, r2, #12
 800c9b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	6999      	ldr	r1, [r3, #24]
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	689a      	ldr	r2, [r3, #8]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	430a      	orrs	r2, r1
 800c9ca:	619a      	str	r2, [r3, #24]
 800c9cc:	e060      	b.n	800ca90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2b04      	cmp	r3, #4
 800c9d2:	d11c      	bne.n	800ca0e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800c9e4:	f001 f80b 	bl	800d9fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	699a      	ldr	r2, [r3, #24]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c9f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6999      	ldr	r1, [r3, #24]
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	021a      	lsls	r2, r3, #8
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	430a      	orrs	r2, r1
 800ca0a:	619a      	str	r2, [r3, #24]
 800ca0c:	e040      	b.n	800ca90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b08      	cmp	r3, #8
 800ca12:	d11b      	bne.n	800ca4c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ca24:	f001 f858 	bl	800dad8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	69da      	ldr	r2, [r3, #28]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f022 020c 	bic.w	r2, r2, #12
 800ca36:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	69d9      	ldr	r1, [r3, #28]
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	689a      	ldr	r2, [r3, #8]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	430a      	orrs	r2, r1
 800ca48:	61da      	str	r2, [r3, #28]
 800ca4a:	e021      	b.n	800ca90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b0c      	cmp	r3, #12
 800ca50:	d11c      	bne.n	800ca8c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ca62:	f001 f875 	bl	800db50 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	69da      	ldr	r2, [r3, #28]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ca74:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	69d9      	ldr	r1, [r3, #28]
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	021a      	lsls	r2, r3, #8
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	430a      	orrs	r2, r1
 800ca88:	61da      	str	r2, [r3, #28]
 800ca8a:	e001      	b.n	800ca90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
	...

0800caa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b086      	sub	sp, #24
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cab0:	2300      	movs	r3, #0
 800cab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d101      	bne.n	800cac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cabe:	2302      	movs	r3, #2
 800cac0:	e0ff      	b.n	800ccc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2201      	movs	r2, #1
 800cac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2b14      	cmp	r3, #20
 800cace:	f200 80f0 	bhi.w	800ccb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cad2:	a201      	add	r2, pc, #4	; (adr r2, 800cad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad8:	0800cb2d 	.word	0x0800cb2d
 800cadc:	0800ccb3 	.word	0x0800ccb3
 800cae0:	0800ccb3 	.word	0x0800ccb3
 800cae4:	0800ccb3 	.word	0x0800ccb3
 800cae8:	0800cb6d 	.word	0x0800cb6d
 800caec:	0800ccb3 	.word	0x0800ccb3
 800caf0:	0800ccb3 	.word	0x0800ccb3
 800caf4:	0800ccb3 	.word	0x0800ccb3
 800caf8:	0800cbaf 	.word	0x0800cbaf
 800cafc:	0800ccb3 	.word	0x0800ccb3
 800cb00:	0800ccb3 	.word	0x0800ccb3
 800cb04:	0800ccb3 	.word	0x0800ccb3
 800cb08:	0800cbef 	.word	0x0800cbef
 800cb0c:	0800ccb3 	.word	0x0800ccb3
 800cb10:	0800ccb3 	.word	0x0800ccb3
 800cb14:	0800ccb3 	.word	0x0800ccb3
 800cb18:	0800cc31 	.word	0x0800cc31
 800cb1c:	0800ccb3 	.word	0x0800ccb3
 800cb20:	0800ccb3 	.word	0x0800ccb3
 800cb24:	0800ccb3 	.word	0x0800ccb3
 800cb28:	0800cc71 	.word	0x0800cc71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68b9      	ldr	r1, [r7, #8]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 fb00 	bl	800d138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	699a      	ldr	r2, [r3, #24]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f042 0208 	orr.w	r2, r2, #8
 800cb46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	699a      	ldr	r2, [r3, #24]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f022 0204 	bic.w	r2, r2, #4
 800cb56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	6999      	ldr	r1, [r3, #24]
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	691a      	ldr	r2, [r3, #16]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	430a      	orrs	r2, r1
 800cb68:	619a      	str	r2, [r3, #24]
      break;
 800cb6a:	e0a5      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68b9      	ldr	r1, [r7, #8]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 fb70 	bl	800d258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	699a      	ldr	r2, [r3, #24]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	699a      	ldr	r2, [r3, #24]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	6999      	ldr	r1, [r3, #24]
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	691b      	ldr	r3, [r3, #16]
 800cba2:	021a      	lsls	r2, r3, #8
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	430a      	orrs	r2, r1
 800cbaa:	619a      	str	r2, [r3, #24]
      break;
 800cbac:	e084      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68b9      	ldr	r1, [r7, #8]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f000 fbd9 	bl	800d36c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	69da      	ldr	r2, [r3, #28]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f042 0208 	orr.w	r2, r2, #8
 800cbc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	69da      	ldr	r2, [r3, #28]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f022 0204 	bic.w	r2, r2, #4
 800cbd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	69d9      	ldr	r1, [r3, #28]
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	691a      	ldr	r2, [r3, #16]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	430a      	orrs	r2, r1
 800cbea:	61da      	str	r2, [r3, #28]
      break;
 800cbec:	e064      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	68b9      	ldr	r1, [r7, #8]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f000 fc41 	bl	800d47c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	69da      	ldr	r2, [r3, #28]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	69da      	ldr	r2, [r3, #28]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	69d9      	ldr	r1, [r3, #28]
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	021a      	lsls	r2, r3, #8
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	430a      	orrs	r2, r1
 800cc2c:	61da      	str	r2, [r3, #28]
      break;
 800cc2e:	e043      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68b9      	ldr	r1, [r7, #8]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 fc8a 	bl	800d550 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f042 0208 	orr.w	r2, r2, #8
 800cc4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f022 0204 	bic.w	r2, r2, #4
 800cc5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	691a      	ldr	r2, [r3, #16]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	430a      	orrs	r2, r1
 800cc6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc6e:	e023      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	68b9      	ldr	r1, [r7, #8]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 fcce 	bl	800d618 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	021a      	lsls	r2, r3, #8
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	430a      	orrs	r2, r1
 800ccae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ccb0:	e002      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	75fb      	strb	r3, [r7, #23]
      break;
 800ccb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3718      	adds	r7, #24
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop

0800cccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d101      	bne.n	800cce8 <HAL_TIM_ConfigClockSource+0x1c>
 800cce4:	2302      	movs	r3, #2
 800cce6:	e0dc      	b.n	800cea2 <HAL_TIM_ConfigClockSource+0x1d6>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2201      	movs	r2, #1
 800ccec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	689b      	ldr	r3, [r3, #8]
 800ccfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	4b6a      	ldr	r3, [pc, #424]	; (800ceac <HAL_TIM_ConfigClockSource+0x1e0>)
 800cd04:	4013      	ands	r3, r2
 800cd06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a64      	ldr	r2, [pc, #400]	; (800ceb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	f000 80a9 	beq.w	800ce76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd24:	4a62      	ldr	r2, [pc, #392]	; (800ceb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	f200 80ae 	bhi.w	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd2c:	4a61      	ldr	r2, [pc, #388]	; (800ceb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	f000 80a1 	beq.w	800ce76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd34:	4a5f      	ldr	r2, [pc, #380]	; (800ceb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	f200 80a6 	bhi.w	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd3c:	4a5e      	ldr	r2, [pc, #376]	; (800ceb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	f000 8099 	beq.w	800ce76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd44:	4a5c      	ldr	r2, [pc, #368]	; (800ceb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	f200 809e 	bhi.w	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cd50:	f000 8091 	beq.w	800ce76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cd58:	f200 8096 	bhi.w	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd60:	f000 8089 	beq.w	800ce76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd68:	f200 808e 	bhi.w	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd70:	d03e      	beq.n	800cdf0 <HAL_TIM_ConfigClockSource+0x124>
 800cd72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd76:	f200 8087 	bhi.w	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd7e:	f000 8086 	beq.w	800ce8e <HAL_TIM_ConfigClockSource+0x1c2>
 800cd82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd86:	d87f      	bhi.n	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd88:	2b70      	cmp	r3, #112	; 0x70
 800cd8a:	d01a      	beq.n	800cdc2 <HAL_TIM_ConfigClockSource+0xf6>
 800cd8c:	2b70      	cmp	r3, #112	; 0x70
 800cd8e:	d87b      	bhi.n	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd90:	2b60      	cmp	r3, #96	; 0x60
 800cd92:	d050      	beq.n	800ce36 <HAL_TIM_ConfigClockSource+0x16a>
 800cd94:	2b60      	cmp	r3, #96	; 0x60
 800cd96:	d877      	bhi.n	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd98:	2b50      	cmp	r3, #80	; 0x50
 800cd9a:	d03c      	beq.n	800ce16 <HAL_TIM_ConfigClockSource+0x14a>
 800cd9c:	2b50      	cmp	r3, #80	; 0x50
 800cd9e:	d873      	bhi.n	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cda0:	2b40      	cmp	r3, #64	; 0x40
 800cda2:	d058      	beq.n	800ce56 <HAL_TIM_ConfigClockSource+0x18a>
 800cda4:	2b40      	cmp	r3, #64	; 0x40
 800cda6:	d86f      	bhi.n	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cda8:	2b30      	cmp	r3, #48	; 0x30
 800cdaa:	d064      	beq.n	800ce76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cdac:	2b30      	cmp	r3, #48	; 0x30
 800cdae:	d86b      	bhi.n	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdb0:	2b20      	cmp	r3, #32
 800cdb2:	d060      	beq.n	800ce76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cdb4:	2b20      	cmp	r3, #32
 800cdb6:	d867      	bhi.n	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d05c      	beq.n	800ce76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cdbc:	2b10      	cmp	r3, #16
 800cdbe:	d05a      	beq.n	800ce76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cdc0:	e062      	b.n	800ce88 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cdd2:	f000 ff19 	bl	800dc08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	689b      	ldr	r3, [r3, #8]
 800cddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cde4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	609a      	str	r2, [r3, #8]
      break;
 800cdee:	e04f      	b.n	800ce90 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ce00:	f000 ff02 	bl	800dc08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	689a      	ldr	r2, [r3, #8]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce12:	609a      	str	r2, [r3, #8]
      break;
 800ce14:	e03c      	b.n	800ce90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce22:	461a      	mov	r2, r3
 800ce24:	f000 fdbc 	bl	800d9a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2150      	movs	r1, #80	; 0x50
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f000 fecc 	bl	800dbcc <TIM_ITRx_SetConfig>
      break;
 800ce34:	e02c      	b.n	800ce90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce42:	461a      	mov	r2, r3
 800ce44:	f000 fe18 	bl	800da78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2160      	movs	r1, #96	; 0x60
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 febc 	bl	800dbcc <TIM_ITRx_SetConfig>
      break;
 800ce54:	e01c      	b.n	800ce90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce62:	461a      	mov	r2, r3
 800ce64:	f000 fd9c 	bl	800d9a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2140      	movs	r1, #64	; 0x40
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f000 feac 	bl	800dbcc <TIM_ITRx_SetConfig>
      break;
 800ce74:	e00c      	b.n	800ce90 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	4610      	mov	r0, r2
 800ce82:	f000 fea3 	bl	800dbcc <TIM_ITRx_SetConfig>
      break;
 800ce86:	e003      	b.n	800ce90 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ce8c:	e000      	b.n	800ce90 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ce8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	ffceff88 	.word	0xffceff88
 800ceb0:	00100040 	.word	0x00100040
 800ceb4:	00100030 	.word	0x00100030
 800ceb8:	00100020 	.word	0x00100020

0800cebc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d101      	bne.n	800ced4 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ced0:	2302      	movs	r3, #2
 800ced2:	e031      	b.n	800cf38 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2202      	movs	r2, #2
 800cee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800cee4:	6839      	ldr	r1, [r7, #0]
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 fbfc 	bl	800d6e4 <TIM_SlaveTimer_SetConfig>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d009      	beq.n	800cf06 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2201      	movs	r2, #1
 800cef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e018      	b.n	800cf38 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	68da      	ldr	r2, [r3, #12]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf14:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68da      	ldr	r2, [r3, #12]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cf24:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b0c      	cmp	r3, #12
 800cf52:	d831      	bhi.n	800cfb8 <HAL_TIM_ReadCapturedValue+0x78>
 800cf54:	a201      	add	r2, pc, #4	; (adr r2, 800cf5c <HAL_TIM_ReadCapturedValue+0x1c>)
 800cf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5a:	bf00      	nop
 800cf5c:	0800cf91 	.word	0x0800cf91
 800cf60:	0800cfb9 	.word	0x0800cfb9
 800cf64:	0800cfb9 	.word	0x0800cfb9
 800cf68:	0800cfb9 	.word	0x0800cfb9
 800cf6c:	0800cf9b 	.word	0x0800cf9b
 800cf70:	0800cfb9 	.word	0x0800cfb9
 800cf74:	0800cfb9 	.word	0x0800cfb9
 800cf78:	0800cfb9 	.word	0x0800cfb9
 800cf7c:	0800cfa5 	.word	0x0800cfa5
 800cf80:	0800cfb9 	.word	0x0800cfb9
 800cf84:	0800cfb9 	.word	0x0800cfb9
 800cf88:	0800cfb9 	.word	0x0800cfb9
 800cf8c:	0800cfaf 	.word	0x0800cfaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf96:	60fb      	str	r3, [r7, #12]

      break;
 800cf98:	e00f      	b.n	800cfba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa0:	60fb      	str	r3, [r7, #12]

      break;
 800cfa2:	e00a      	b.n	800cfba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfaa:	60fb      	str	r3, [r7, #12]

      break;
 800cfac:	e005      	b.n	800cfba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb4:	60fb      	str	r3, [r7, #12]

      break;
 800cfb6:	e000      	b.n	800cfba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800cfb8:	bf00      	nop
  }

  return tmpreg;
 800cfba:	68fb      	ldr	r3, [r7, #12]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3714      	adds	r7, #20
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d004:	b480      	push	{r7}
 800d006:	b085      	sub	sp, #20
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4a40      	ldr	r2, [pc, #256]	; (800d118 <TIM_Base_SetConfig+0x114>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d013      	beq.n	800d044 <TIM_Base_SetConfig+0x40>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d022:	d00f      	beq.n	800d044 <TIM_Base_SetConfig+0x40>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a3d      	ldr	r2, [pc, #244]	; (800d11c <TIM_Base_SetConfig+0x118>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d00b      	beq.n	800d044 <TIM_Base_SetConfig+0x40>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a3c      	ldr	r2, [pc, #240]	; (800d120 <TIM_Base_SetConfig+0x11c>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d007      	beq.n	800d044 <TIM_Base_SetConfig+0x40>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a3b      	ldr	r2, [pc, #236]	; (800d124 <TIM_Base_SetConfig+0x120>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d003      	beq.n	800d044 <TIM_Base_SetConfig+0x40>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a3a      	ldr	r2, [pc, #232]	; (800d128 <TIM_Base_SetConfig+0x124>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d108      	bne.n	800d056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d04a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	68fa      	ldr	r2, [r7, #12]
 800d052:	4313      	orrs	r3, r2
 800d054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4a2f      	ldr	r2, [pc, #188]	; (800d118 <TIM_Base_SetConfig+0x114>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d01f      	beq.n	800d09e <TIM_Base_SetConfig+0x9a>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d064:	d01b      	beq.n	800d09e <TIM_Base_SetConfig+0x9a>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4a2c      	ldr	r2, [pc, #176]	; (800d11c <TIM_Base_SetConfig+0x118>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d017      	beq.n	800d09e <TIM_Base_SetConfig+0x9a>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4a2b      	ldr	r2, [pc, #172]	; (800d120 <TIM_Base_SetConfig+0x11c>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d013      	beq.n	800d09e <TIM_Base_SetConfig+0x9a>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4a2a      	ldr	r2, [pc, #168]	; (800d124 <TIM_Base_SetConfig+0x120>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d00f      	beq.n	800d09e <TIM_Base_SetConfig+0x9a>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a29      	ldr	r2, [pc, #164]	; (800d128 <TIM_Base_SetConfig+0x124>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d00b      	beq.n	800d09e <TIM_Base_SetConfig+0x9a>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4a28      	ldr	r2, [pc, #160]	; (800d12c <TIM_Base_SetConfig+0x128>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d007      	beq.n	800d09e <TIM_Base_SetConfig+0x9a>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	4a27      	ldr	r2, [pc, #156]	; (800d130 <TIM_Base_SetConfig+0x12c>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d003      	beq.n	800d09e <TIM_Base_SetConfig+0x9a>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	4a26      	ldr	r2, [pc, #152]	; (800d134 <TIM_Base_SetConfig+0x130>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d108      	bne.n	800d0b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	695b      	ldr	r3, [r3, #20]
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	689a      	ldr	r2, [r3, #8]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	4a10      	ldr	r2, [pc, #64]	; (800d118 <TIM_Base_SetConfig+0x114>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d00f      	beq.n	800d0fc <TIM_Base_SetConfig+0xf8>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	4a12      	ldr	r2, [pc, #72]	; (800d128 <TIM_Base_SetConfig+0x124>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d00b      	beq.n	800d0fc <TIM_Base_SetConfig+0xf8>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4a11      	ldr	r2, [pc, #68]	; (800d12c <TIM_Base_SetConfig+0x128>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d007      	beq.n	800d0fc <TIM_Base_SetConfig+0xf8>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	4a10      	ldr	r2, [pc, #64]	; (800d130 <TIM_Base_SetConfig+0x12c>)
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d003      	beq.n	800d0fc <TIM_Base_SetConfig+0xf8>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	4a0f      	ldr	r2, [pc, #60]	; (800d134 <TIM_Base_SetConfig+0x130>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d103      	bne.n	800d104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	691a      	ldr	r2, [r3, #16]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	615a      	str	r2, [r3, #20]
}
 800d10a:	bf00      	nop
 800d10c:	3714      	adds	r7, #20
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	40010000 	.word	0x40010000
 800d11c:	40000400 	.word	0x40000400
 800d120:	40000800 	.word	0x40000800
 800d124:	40000c00 	.word	0x40000c00
 800d128:	40010400 	.word	0x40010400
 800d12c:	40014000 	.word	0x40014000
 800d130:	40014400 	.word	0x40014400
 800d134:	40014800 	.word	0x40014800

0800d138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d138:	b480      	push	{r7}
 800d13a:	b087      	sub	sp, #28
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6a1b      	ldr	r3, [r3, #32]
 800d146:	f023 0201 	bic.w	r2, r3, #1
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a1b      	ldr	r3, [r3, #32]
 800d152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	699b      	ldr	r3, [r3, #24]
 800d15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	4b37      	ldr	r3, [pc, #220]	; (800d240 <TIM_OC1_SetConfig+0x108>)
 800d164:	4013      	ands	r3, r2
 800d166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f023 0303 	bic.w	r3, r3, #3
 800d16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	4313      	orrs	r3, r2
 800d178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f023 0302 	bic.w	r3, r3, #2
 800d180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	697a      	ldr	r2, [r7, #20]
 800d188:	4313      	orrs	r3, r2
 800d18a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	4a2d      	ldr	r2, [pc, #180]	; (800d244 <TIM_OC1_SetConfig+0x10c>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d00f      	beq.n	800d1b4 <TIM_OC1_SetConfig+0x7c>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	4a2c      	ldr	r2, [pc, #176]	; (800d248 <TIM_OC1_SetConfig+0x110>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d00b      	beq.n	800d1b4 <TIM_OC1_SetConfig+0x7c>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4a2b      	ldr	r2, [pc, #172]	; (800d24c <TIM_OC1_SetConfig+0x114>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d007      	beq.n	800d1b4 <TIM_OC1_SetConfig+0x7c>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4a2a      	ldr	r2, [pc, #168]	; (800d250 <TIM_OC1_SetConfig+0x118>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d003      	beq.n	800d1b4 <TIM_OC1_SetConfig+0x7c>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a29      	ldr	r2, [pc, #164]	; (800d254 <TIM_OC1_SetConfig+0x11c>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d10c      	bne.n	800d1ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	f023 0308 	bic.w	r3, r3, #8
 800d1ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	697a      	ldr	r2, [r7, #20]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f023 0304 	bic.w	r3, r3, #4
 800d1cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4a1c      	ldr	r2, [pc, #112]	; (800d244 <TIM_OC1_SetConfig+0x10c>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d00f      	beq.n	800d1f6 <TIM_OC1_SetConfig+0xbe>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4a1b      	ldr	r2, [pc, #108]	; (800d248 <TIM_OC1_SetConfig+0x110>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d00b      	beq.n	800d1f6 <TIM_OC1_SetConfig+0xbe>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4a1a      	ldr	r2, [pc, #104]	; (800d24c <TIM_OC1_SetConfig+0x114>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d007      	beq.n	800d1f6 <TIM_OC1_SetConfig+0xbe>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4a19      	ldr	r2, [pc, #100]	; (800d250 <TIM_OC1_SetConfig+0x118>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d003      	beq.n	800d1f6 <TIM_OC1_SetConfig+0xbe>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4a18      	ldr	r2, [pc, #96]	; (800d254 <TIM_OC1_SetConfig+0x11c>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d111      	bne.n	800d21a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	695b      	ldr	r3, [r3, #20]
 800d20a:	693a      	ldr	r2, [r7, #16]
 800d20c:	4313      	orrs	r3, r2
 800d20e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	699b      	ldr	r3, [r3, #24]
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	4313      	orrs	r3, r2
 800d218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	693a      	ldr	r2, [r7, #16]
 800d21e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	68fa      	ldr	r2, [r7, #12]
 800d224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	685a      	ldr	r2, [r3, #4]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	621a      	str	r2, [r3, #32]
}
 800d234:	bf00      	nop
 800d236:	371c      	adds	r7, #28
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	fffeff8f 	.word	0xfffeff8f
 800d244:	40010000 	.word	0x40010000
 800d248:	40010400 	.word	0x40010400
 800d24c:	40014000 	.word	0x40014000
 800d250:	40014400 	.word	0x40014400
 800d254:	40014800 	.word	0x40014800

0800d258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d258:	b480      	push	{r7}
 800d25a:	b087      	sub	sp, #28
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a1b      	ldr	r3, [r3, #32]
 800d266:	f023 0210 	bic.w	r2, r3, #16
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6a1b      	ldr	r3, [r3, #32]
 800d272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	699b      	ldr	r3, [r3, #24]
 800d27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	4b34      	ldr	r3, [pc, #208]	; (800d354 <TIM_OC2_SetConfig+0xfc>)
 800d284:	4013      	ands	r3, r2
 800d286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d28e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	021b      	lsls	r3, r3, #8
 800d296:	68fa      	ldr	r2, [r7, #12]
 800d298:	4313      	orrs	r3, r2
 800d29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	f023 0320 	bic.w	r3, r3, #32
 800d2a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	011b      	lsls	r3, r3, #4
 800d2aa:	697a      	ldr	r2, [r7, #20]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	4a29      	ldr	r2, [pc, #164]	; (800d358 <TIM_OC2_SetConfig+0x100>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d003      	beq.n	800d2c0 <TIM_OC2_SetConfig+0x68>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4a28      	ldr	r2, [pc, #160]	; (800d35c <TIM_OC2_SetConfig+0x104>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d10d      	bne.n	800d2dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	011b      	lsls	r3, r3, #4
 800d2ce:	697a      	ldr	r2, [r7, #20]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a1e      	ldr	r2, [pc, #120]	; (800d358 <TIM_OC2_SetConfig+0x100>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d00f      	beq.n	800d304 <TIM_OC2_SetConfig+0xac>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a1d      	ldr	r2, [pc, #116]	; (800d35c <TIM_OC2_SetConfig+0x104>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d00b      	beq.n	800d304 <TIM_OC2_SetConfig+0xac>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a1c      	ldr	r2, [pc, #112]	; (800d360 <TIM_OC2_SetConfig+0x108>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d007      	beq.n	800d304 <TIM_OC2_SetConfig+0xac>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4a1b      	ldr	r2, [pc, #108]	; (800d364 <TIM_OC2_SetConfig+0x10c>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d003      	beq.n	800d304 <TIM_OC2_SetConfig+0xac>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4a1a      	ldr	r2, [pc, #104]	; (800d368 <TIM_OC2_SetConfig+0x110>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d113      	bne.n	800d32c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d30a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	695b      	ldr	r3, [r3, #20]
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	693a      	ldr	r2, [r7, #16]
 800d31c:	4313      	orrs	r3, r2
 800d31e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	699b      	ldr	r3, [r3, #24]
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	4313      	orrs	r3, r2
 800d32a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	693a      	ldr	r2, [r7, #16]
 800d330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	68fa      	ldr	r2, [r7, #12]
 800d336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	685a      	ldr	r2, [r3, #4]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	697a      	ldr	r2, [r7, #20]
 800d344:	621a      	str	r2, [r3, #32]
}
 800d346:	bf00      	nop
 800d348:	371c      	adds	r7, #28
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	feff8fff 	.word	0xfeff8fff
 800d358:	40010000 	.word	0x40010000
 800d35c:	40010400 	.word	0x40010400
 800d360:	40014000 	.word	0x40014000
 800d364:	40014400 	.word	0x40014400
 800d368:	40014800 	.word	0x40014800

0800d36c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b087      	sub	sp, #28
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6a1b      	ldr	r3, [r3, #32]
 800d37a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6a1b      	ldr	r3, [r3, #32]
 800d386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	69db      	ldr	r3, [r3, #28]
 800d392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	4b33      	ldr	r3, [pc, #204]	; (800d464 <TIM_OC3_SetConfig+0xf8>)
 800d398:	4013      	ands	r3, r2
 800d39a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f023 0303 	bic.w	r3, r3, #3
 800d3a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	021b      	lsls	r3, r3, #8
 800d3bc:	697a      	ldr	r2, [r7, #20]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4a28      	ldr	r2, [pc, #160]	; (800d468 <TIM_OC3_SetConfig+0xfc>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d003      	beq.n	800d3d2 <TIM_OC3_SetConfig+0x66>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4a27      	ldr	r2, [pc, #156]	; (800d46c <TIM_OC3_SetConfig+0x100>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d10d      	bne.n	800d3ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	021b      	lsls	r3, r3, #8
 800d3e0:	697a      	ldr	r2, [r7, #20]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d3ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	4a1d      	ldr	r2, [pc, #116]	; (800d468 <TIM_OC3_SetConfig+0xfc>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d00f      	beq.n	800d416 <TIM_OC3_SetConfig+0xaa>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	4a1c      	ldr	r2, [pc, #112]	; (800d46c <TIM_OC3_SetConfig+0x100>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d00b      	beq.n	800d416 <TIM_OC3_SetConfig+0xaa>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	4a1b      	ldr	r2, [pc, #108]	; (800d470 <TIM_OC3_SetConfig+0x104>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d007      	beq.n	800d416 <TIM_OC3_SetConfig+0xaa>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4a1a      	ldr	r2, [pc, #104]	; (800d474 <TIM_OC3_SetConfig+0x108>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d003      	beq.n	800d416 <TIM_OC3_SetConfig+0xaa>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4a19      	ldr	r2, [pc, #100]	; (800d478 <TIM_OC3_SetConfig+0x10c>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d113      	bne.n	800d43e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d41c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	695b      	ldr	r3, [r3, #20]
 800d42a:	011b      	lsls	r3, r3, #4
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	4313      	orrs	r3, r2
 800d430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	011b      	lsls	r3, r3, #4
 800d438:	693a      	ldr	r2, [r7, #16]
 800d43a:	4313      	orrs	r3, r2
 800d43c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	685a      	ldr	r2, [r3, #4]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	697a      	ldr	r2, [r7, #20]
 800d456:	621a      	str	r2, [r3, #32]
}
 800d458:	bf00      	nop
 800d45a:	371c      	adds	r7, #28
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr
 800d464:	fffeff8f 	.word	0xfffeff8f
 800d468:	40010000 	.word	0x40010000
 800d46c:	40010400 	.word	0x40010400
 800d470:	40014000 	.word	0x40014000
 800d474:	40014400 	.word	0x40014400
 800d478:	40014800 	.word	0x40014800

0800d47c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b087      	sub	sp, #28
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6a1b      	ldr	r3, [r3, #32]
 800d48a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	69db      	ldr	r3, [r3, #28]
 800d4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	4b24      	ldr	r3, [pc, #144]	; (800d538 <TIM_OC4_SetConfig+0xbc>)
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	021b      	lsls	r3, r3, #8
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	031b      	lsls	r3, r3, #12
 800d4ce:	693a      	ldr	r2, [r7, #16]
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	4a19      	ldr	r2, [pc, #100]	; (800d53c <TIM_OC4_SetConfig+0xc0>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d00f      	beq.n	800d4fc <TIM_OC4_SetConfig+0x80>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4a18      	ldr	r2, [pc, #96]	; (800d540 <TIM_OC4_SetConfig+0xc4>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d00b      	beq.n	800d4fc <TIM_OC4_SetConfig+0x80>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4a17      	ldr	r2, [pc, #92]	; (800d544 <TIM_OC4_SetConfig+0xc8>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d007      	beq.n	800d4fc <TIM_OC4_SetConfig+0x80>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4a16      	ldr	r2, [pc, #88]	; (800d548 <TIM_OC4_SetConfig+0xcc>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d003      	beq.n	800d4fc <TIM_OC4_SetConfig+0x80>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4a15      	ldr	r2, [pc, #84]	; (800d54c <TIM_OC4_SetConfig+0xd0>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d109      	bne.n	800d510 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	695b      	ldr	r3, [r3, #20]
 800d508:	019b      	lsls	r3, r3, #6
 800d50a:	697a      	ldr	r2, [r7, #20]
 800d50c:	4313      	orrs	r3, r2
 800d50e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	685a      	ldr	r2, [r3, #4]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	693a      	ldr	r2, [r7, #16]
 800d528:	621a      	str	r2, [r3, #32]
}
 800d52a:	bf00      	nop
 800d52c:	371c      	adds	r7, #28
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop
 800d538:	feff8fff 	.word	0xfeff8fff
 800d53c:	40010000 	.word	0x40010000
 800d540:	40010400 	.word	0x40010400
 800d544:	40014000 	.word	0x40014000
 800d548:	40014400 	.word	0x40014400
 800d54c:	40014800 	.word	0x40014800

0800d550 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d550:	b480      	push	{r7}
 800d552:	b087      	sub	sp, #28
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6a1b      	ldr	r3, [r3, #32]
 800d55e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a1b      	ldr	r3, [r3, #32]
 800d56a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	4b21      	ldr	r3, [pc, #132]	; (800d600 <TIM_OC5_SetConfig+0xb0>)
 800d57c:	4013      	ands	r3, r2
 800d57e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	4313      	orrs	r3, r2
 800d588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d590:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	689b      	ldr	r3, [r3, #8]
 800d596:	041b      	lsls	r3, r3, #16
 800d598:	693a      	ldr	r2, [r7, #16]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4a18      	ldr	r2, [pc, #96]	; (800d604 <TIM_OC5_SetConfig+0xb4>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d00f      	beq.n	800d5c6 <TIM_OC5_SetConfig+0x76>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4a17      	ldr	r2, [pc, #92]	; (800d608 <TIM_OC5_SetConfig+0xb8>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d00b      	beq.n	800d5c6 <TIM_OC5_SetConfig+0x76>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4a16      	ldr	r2, [pc, #88]	; (800d60c <TIM_OC5_SetConfig+0xbc>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d007      	beq.n	800d5c6 <TIM_OC5_SetConfig+0x76>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a15      	ldr	r2, [pc, #84]	; (800d610 <TIM_OC5_SetConfig+0xc0>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d003      	beq.n	800d5c6 <TIM_OC5_SetConfig+0x76>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4a14      	ldr	r2, [pc, #80]	; (800d614 <TIM_OC5_SetConfig+0xc4>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d109      	bne.n	800d5da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	695b      	ldr	r3, [r3, #20]
 800d5d2:	021b      	lsls	r3, r3, #8
 800d5d4:	697a      	ldr	r2, [r7, #20]
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	697a      	ldr	r2, [r7, #20]
 800d5de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	685a      	ldr	r2, [r3, #4]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	693a      	ldr	r2, [r7, #16]
 800d5f2:	621a      	str	r2, [r3, #32]
}
 800d5f4:	bf00      	nop
 800d5f6:	371c      	adds	r7, #28
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	fffeff8f 	.word	0xfffeff8f
 800d604:	40010000 	.word	0x40010000
 800d608:	40010400 	.word	0x40010400
 800d60c:	40014000 	.word	0x40014000
 800d610:	40014400 	.word	0x40014400
 800d614:	40014800 	.word	0x40014800

0800d618 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d618:	b480      	push	{r7}
 800d61a:	b087      	sub	sp, #28
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a1b      	ldr	r3, [r3, #32]
 800d626:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d640:	68fa      	ldr	r2, [r7, #12]
 800d642:	4b22      	ldr	r3, [pc, #136]	; (800d6cc <TIM_OC6_SetConfig+0xb4>)
 800d644:	4013      	ands	r3, r2
 800d646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	021b      	lsls	r3, r3, #8
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	4313      	orrs	r3, r2
 800d652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d65a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	051b      	lsls	r3, r3, #20
 800d662:	693a      	ldr	r2, [r7, #16]
 800d664:	4313      	orrs	r3, r2
 800d666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4a19      	ldr	r2, [pc, #100]	; (800d6d0 <TIM_OC6_SetConfig+0xb8>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d00f      	beq.n	800d690 <TIM_OC6_SetConfig+0x78>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4a18      	ldr	r2, [pc, #96]	; (800d6d4 <TIM_OC6_SetConfig+0xbc>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d00b      	beq.n	800d690 <TIM_OC6_SetConfig+0x78>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a17      	ldr	r2, [pc, #92]	; (800d6d8 <TIM_OC6_SetConfig+0xc0>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d007      	beq.n	800d690 <TIM_OC6_SetConfig+0x78>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a16      	ldr	r2, [pc, #88]	; (800d6dc <TIM_OC6_SetConfig+0xc4>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d003      	beq.n	800d690 <TIM_OC6_SetConfig+0x78>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a15      	ldr	r2, [pc, #84]	; (800d6e0 <TIM_OC6_SetConfig+0xc8>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d109      	bne.n	800d6a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	695b      	ldr	r3, [r3, #20]
 800d69c:	029b      	lsls	r3, r3, #10
 800d69e:	697a      	ldr	r2, [r7, #20]
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	697a      	ldr	r2, [r7, #20]
 800d6a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	685a      	ldr	r2, [r3, #4]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	693a      	ldr	r2, [r7, #16]
 800d6bc:	621a      	str	r2, [r3, #32]
}
 800d6be:	bf00      	nop
 800d6c0:	371c      	adds	r7, #28
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	feff8fff 	.word	0xfeff8fff
 800d6d0:	40010000 	.word	0x40010000
 800d6d4:	40010400 	.word	0x40010400
 800d6d8:	40014000 	.word	0x40014000
 800d6dc:	40014400 	.word	0x40014400
 800d6e0:	40014800 	.word	0x40014800

0800d6e4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	4b65      	ldr	r3, [pc, #404]	; (800d894 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800d6fe:	4013      	ands	r3, r2
 800d700:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	693a      	ldr	r2, [r7, #16]
 800d708:	4313      	orrs	r3, r2
 800d70a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	4b62      	ldr	r3, [pc, #392]	; (800d898 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800d710:	4013      	ands	r3, r2
 800d712:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	693a      	ldr	r2, [r7, #16]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	693a      	ldr	r2, [r7, #16]
 800d724:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	4a5c      	ldr	r2, [pc, #368]	; (800d89c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	f000 80ab 	beq.w	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d732:	4a5a      	ldr	r2, [pc, #360]	; (800d89c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d734:	4293      	cmp	r3, r2
 800d736:	f200 80a4 	bhi.w	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d73a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d73e:	f000 80a3 	beq.w	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d746:	f200 809c 	bhi.w	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d74a:	4a55      	ldr	r2, [pc, #340]	; (800d8a0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	f000 809b 	beq.w	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d752:	4a53      	ldr	r2, [pc, #332]	; (800d8a0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d754:	4293      	cmp	r3, r2
 800d756:	f200 8094 	bhi.w	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d75a:	4a52      	ldr	r2, [pc, #328]	; (800d8a4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	f000 8093 	beq.w	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d762:	4a50      	ldr	r2, [pc, #320]	; (800d8a4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d764:	4293      	cmp	r3, r2
 800d766:	f200 808c 	bhi.w	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d76a:	4a4f      	ldr	r2, [pc, #316]	; (800d8a8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	f000 808b 	beq.w	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d772:	4a4d      	ldr	r2, [pc, #308]	; (800d8a8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d774:	4293      	cmp	r3, r2
 800d776:	f200 8084 	bhi.w	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d77a:	4a4c      	ldr	r2, [pc, #304]	; (800d8ac <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	f000 8083 	beq.w	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d782:	4a4a      	ldr	r2, [pc, #296]	; (800d8ac <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d87c      	bhi.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d788:	4a49      	ldr	r2, [pc, #292]	; (800d8b0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d07c      	beq.n	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d78e:	4a48      	ldr	r2, [pc, #288]	; (800d8b0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d876      	bhi.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d794:	4a47      	ldr	r2, [pc, #284]	; (800d8b4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d076      	beq.n	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d79a:	4a46      	ldr	r2, [pc, #280]	; (800d8b4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d870      	bhi.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d7a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d7a4:	d070      	beq.n	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d7a6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d7aa:	d86a      	bhi.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d7ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7b0:	d06a      	beq.n	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d7b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7b6:	d864      	bhi.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d7b8:	2b70      	cmp	r3, #112	; 0x70
 800d7ba:	d01a      	beq.n	800d7f2 <TIM_SlaveTimer_SetConfig+0x10e>
 800d7bc:	2b70      	cmp	r3, #112	; 0x70
 800d7be:	d860      	bhi.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d7c0:	2b60      	cmp	r3, #96	; 0x60
 800d7c2:	d054      	beq.n	800d86e <TIM_SlaveTimer_SetConfig+0x18a>
 800d7c4:	2b60      	cmp	r3, #96	; 0x60
 800d7c6:	d85c      	bhi.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d7c8:	2b50      	cmp	r3, #80	; 0x50
 800d7ca:	d046      	beq.n	800d85a <TIM_SlaveTimer_SetConfig+0x176>
 800d7cc:	2b50      	cmp	r3, #80	; 0x50
 800d7ce:	d858      	bhi.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d7d0:	2b40      	cmp	r3, #64	; 0x40
 800d7d2:	d019      	beq.n	800d808 <TIM_SlaveTimer_SetConfig+0x124>
 800d7d4:	2b40      	cmp	r3, #64	; 0x40
 800d7d6:	d854      	bhi.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d7d8:	2b30      	cmp	r3, #48	; 0x30
 800d7da:	d055      	beq.n	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d7dc:	2b30      	cmp	r3, #48	; 0x30
 800d7de:	d850      	bhi.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d7e0:	2b20      	cmp	r3, #32
 800d7e2:	d051      	beq.n	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d7e4:	2b20      	cmp	r3, #32
 800d7e6:	d84c      	bhi.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d04d      	beq.n	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d7ec:	2b10      	cmp	r3, #16
 800d7ee:	d04b      	beq.n	800d888 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d7f0:	e047      	b.n	800d882 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800d802:	f000 fa01 	bl	800dc08 <TIM_ETR_SetConfig>
      break;
 800d806:	e040      	b.n	800d88a <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b05      	cmp	r3, #5
 800d80e:	d101      	bne.n	800d814 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800d810:	2301      	movs	r3, #1
 800d812:	e03b      	b.n	800d88c <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	6a1b      	ldr	r3, [r3, #32]
 800d81a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	6a1a      	ldr	r2, [r3, #32]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f022 0201 	bic.w	r2, r2, #1
 800d82a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d83a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	011b      	lsls	r3, r3, #4
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	4313      	orrs	r3, r2
 800d846:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	68ba      	ldr	r2, [r7, #8]
 800d84e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	621a      	str	r2, [r3, #32]
      break;
 800d858:	e017      	b.n	800d88a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d866:	461a      	mov	r2, r3
 800d868:	f000 f89a 	bl	800d9a0 <TIM_TI1_ConfigInputStage>
      break;
 800d86c:	e00d      	b.n	800d88a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d87a:	461a      	mov	r2, r3
 800d87c:	f000 f8fc 	bl	800da78 <TIM_TI2_ConfigInputStage>
      break;
 800d880:	e003      	b.n	800d88a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800d882:	2301      	movs	r3, #1
 800d884:	75fb      	strb	r3, [r7, #23]
      break;
 800d886:	e000      	b.n	800d88a <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800d888:	bf00      	nop
  }

  return status;
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3718      	adds	r7, #24
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	ffcfff8f 	.word	0xffcfff8f
 800d898:	fffefff8 	.word	0xfffefff8
 800d89c:	00200010 	.word	0x00200010
 800d8a0:	00100070 	.word	0x00100070
 800d8a4:	00100060 	.word	0x00100060
 800d8a8:	00100050 	.word	0x00100050
 800d8ac:	00100040 	.word	0x00100040
 800d8b0:	00100030 	.word	0x00100030
 800d8b4:	00100020 	.word	0x00100020

0800d8b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b087      	sub	sp, #28
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	607a      	str	r2, [r7, #4]
 800d8c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6a1b      	ldr	r3, [r3, #32]
 800d8ca:	f023 0201 	bic.w	r2, r3, #1
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	6a1b      	ldr	r3, [r3, #32]
 800d8dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	4a28      	ldr	r2, [pc, #160]	; (800d984 <TIM_TI1_SetConfig+0xcc>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d01b      	beq.n	800d91e <TIM_TI1_SetConfig+0x66>
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8ec:	d017      	beq.n	800d91e <TIM_TI1_SetConfig+0x66>
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	4a25      	ldr	r2, [pc, #148]	; (800d988 <TIM_TI1_SetConfig+0xd0>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d013      	beq.n	800d91e <TIM_TI1_SetConfig+0x66>
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	4a24      	ldr	r2, [pc, #144]	; (800d98c <TIM_TI1_SetConfig+0xd4>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d00f      	beq.n	800d91e <TIM_TI1_SetConfig+0x66>
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	4a23      	ldr	r2, [pc, #140]	; (800d990 <TIM_TI1_SetConfig+0xd8>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d00b      	beq.n	800d91e <TIM_TI1_SetConfig+0x66>
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	4a22      	ldr	r2, [pc, #136]	; (800d994 <TIM_TI1_SetConfig+0xdc>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d007      	beq.n	800d91e <TIM_TI1_SetConfig+0x66>
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	4a21      	ldr	r2, [pc, #132]	; (800d998 <TIM_TI1_SetConfig+0xe0>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d003      	beq.n	800d91e <TIM_TI1_SetConfig+0x66>
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	4a20      	ldr	r2, [pc, #128]	; (800d99c <TIM_TI1_SetConfig+0xe4>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d101      	bne.n	800d922 <TIM_TI1_SetConfig+0x6a>
 800d91e:	2301      	movs	r3, #1
 800d920:	e000      	b.n	800d924 <TIM_TI1_SetConfig+0x6c>
 800d922:	2300      	movs	r3, #0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d008      	beq.n	800d93a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	f023 0303 	bic.w	r3, r3, #3
 800d92e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d930:	697a      	ldr	r2, [r7, #20]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	4313      	orrs	r3, r2
 800d936:	617b      	str	r3, [r7, #20]
 800d938:	e003      	b.n	800d942 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	f043 0301 	orr.w	r3, r3, #1
 800d940:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	011b      	lsls	r3, r3, #4
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	697a      	ldr	r2, [r7, #20]
 800d952:	4313      	orrs	r3, r2
 800d954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	f023 030a 	bic.w	r3, r3, #10
 800d95c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	f003 030a 	and.w	r3, r3, #10
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	4313      	orrs	r3, r2
 800d968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	621a      	str	r2, [r3, #32]
}
 800d976:	bf00      	nop
 800d978:	371c      	adds	r7, #28
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop
 800d984:	40010000 	.word	0x40010000
 800d988:	40000400 	.word	0x40000400
 800d98c:	40000800 	.word	0x40000800
 800d990:	40000c00 	.word	0x40000c00
 800d994:	40010400 	.word	0x40010400
 800d998:	40001800 	.word	0x40001800
 800d99c:	40014000 	.word	0x40014000

0800d9a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b087      	sub	sp, #28
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6a1b      	ldr	r3, [r3, #32]
 800d9b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	6a1b      	ldr	r3, [r3, #32]
 800d9b6:	f023 0201 	bic.w	r2, r3, #1
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	699b      	ldr	r3, [r3, #24]
 800d9c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d9ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	011b      	lsls	r3, r3, #4
 800d9d0:	693a      	ldr	r2, [r7, #16]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	f023 030a 	bic.w	r3, r3, #10
 800d9dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	693a      	ldr	r2, [r7, #16]
 800d9ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	621a      	str	r2, [r3, #32]
}
 800d9f2:	bf00      	nop
 800d9f4:	371c      	adds	r7, #28
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr

0800d9fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d9fe:	b480      	push	{r7}
 800da00:	b087      	sub	sp, #28
 800da02:	af00      	add	r7, sp, #0
 800da04:	60f8      	str	r0, [r7, #12]
 800da06:	60b9      	str	r1, [r7, #8]
 800da08:	607a      	str	r2, [r7, #4]
 800da0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6a1b      	ldr	r3, [r3, #32]
 800da10:	f023 0210 	bic.w	r2, r3, #16
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	6a1b      	ldr	r3, [r3, #32]
 800da22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	021b      	lsls	r3, r3, #8
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	4313      	orrs	r3, r2
 800da34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800da3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	031b      	lsls	r3, r3, #12
 800da42:	b29b      	uxth	r3, r3
 800da44:	697a      	ldr	r2, [r7, #20]
 800da46:	4313      	orrs	r3, r2
 800da48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	011b      	lsls	r3, r3, #4
 800da56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800da5a:	693a      	ldr	r2, [r7, #16]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	697a      	ldr	r2, [r7, #20]
 800da64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	693a      	ldr	r2, [r7, #16]
 800da6a:	621a      	str	r2, [r3, #32]
}
 800da6c:	bf00      	nop
 800da6e:	371c      	adds	r7, #28
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da78:	b480      	push	{r7}
 800da7a:	b087      	sub	sp, #28
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6a1b      	ldr	r3, [r3, #32]
 800da88:	f023 0210 	bic.w	r2, r3, #16
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	699b      	ldr	r3, [r3, #24]
 800da94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6a1b      	ldr	r3, [r3, #32]
 800da9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800daa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	031b      	lsls	r3, r3, #12
 800daa8:	697a      	ldr	r2, [r7, #20]
 800daaa:	4313      	orrs	r3, r2
 800daac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	011b      	lsls	r3, r3, #4
 800daba:	693a      	ldr	r2, [r7, #16]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	693a      	ldr	r2, [r7, #16]
 800daca:	621a      	str	r2, [r3, #32]
}
 800dacc:	bf00      	nop
 800dace:	371c      	adds	r7, #28
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dad8:	b480      	push	{r7}
 800dada:	b087      	sub	sp, #28
 800dadc:	af00      	add	r7, sp, #0
 800dade:	60f8      	str	r0, [r7, #12]
 800dae0:	60b9      	str	r1, [r7, #8]
 800dae2:	607a      	str	r2, [r7, #4]
 800dae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6a1b      	ldr	r3, [r3, #32]
 800daea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	69db      	ldr	r3, [r3, #28]
 800daf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6a1b      	ldr	r3, [r3, #32]
 800dafc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	f023 0303 	bic.w	r3, r3, #3
 800db04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800db06:	697a      	ldr	r2, [r7, #20]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	011b      	lsls	r3, r3, #4
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	697a      	ldr	r2, [r7, #20]
 800db1e:	4313      	orrs	r3, r2
 800db20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800db28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	021b      	lsls	r3, r3, #8
 800db2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	4313      	orrs	r3, r2
 800db36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	697a      	ldr	r2, [r7, #20]
 800db3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	693a      	ldr	r2, [r7, #16]
 800db42:	621a      	str	r2, [r3, #32]
}
 800db44:	bf00      	nop
 800db46:	371c      	adds	r7, #28
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800db50:	b480      	push	{r7}
 800db52:	b087      	sub	sp, #28
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
 800db5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6a1b      	ldr	r3, [r3, #32]
 800db62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	69db      	ldr	r3, [r3, #28]
 800db6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	6a1b      	ldr	r3, [r3, #32]
 800db74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	021b      	lsls	r3, r3, #8
 800db82:	697a      	ldr	r2, [r7, #20]
 800db84:	4313      	orrs	r3, r2
 800db86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	031b      	lsls	r3, r3, #12
 800db94:	b29b      	uxth	r3, r3
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	4313      	orrs	r3, r2
 800db9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800dba2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	031b      	lsls	r3, r3, #12
 800dba8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800dbac:	693a      	ldr	r2, [r7, #16]
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	697a      	ldr	r2, [r7, #20]
 800dbb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	693a      	ldr	r2, [r7, #16]
 800dbbc:	621a      	str	r2, [r3, #32]
}
 800dbbe:	bf00      	nop
 800dbc0:	371c      	adds	r7, #28
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr
	...

0800dbcc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4b09      	ldr	r3, [pc, #36]	; (800dc04 <TIM_ITRx_SetConfig+0x38>)
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dbe4:	683a      	ldr	r2, [r7, #0]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	f043 0307 	orr.w	r3, r3, #7
 800dbee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	68fa      	ldr	r2, [r7, #12]
 800dbf4:	609a      	str	r2, [r3, #8]
}
 800dbf6:	bf00      	nop
 800dbf8:	3714      	adds	r7, #20
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	ffcfff8f 	.word	0xffcfff8f

0800dc08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b087      	sub	sp, #28
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]
 800dc14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	021a      	lsls	r2, r3, #8
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	431a      	orrs	r2, r3
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	4313      	orrs	r3, r2
 800dc34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	697a      	ldr	r2, [r7, #20]
 800dc3a:	609a      	str	r2, [r3, #8]
}
 800dc3c:	bf00      	nop
 800dc3e:	371c      	adds	r7, #28
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b087      	sub	sp, #28
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	f003 031f 	and.w	r3, r3, #31
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6a1a      	ldr	r2, [r3, #32]
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	43db      	mvns	r3, r3
 800dc6a:	401a      	ands	r2, r3
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6a1a      	ldr	r2, [r3, #32]
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	f003 031f 	and.w	r3, r3, #31
 800dc7a:	6879      	ldr	r1, [r7, #4]
 800dc7c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc80:	431a      	orrs	r2, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	621a      	str	r2, [r3, #32]
}
 800dc86:	bf00      	nop
 800dc88:	371c      	adds	r7, #28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
	...

0800dc94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d101      	bne.n	800dcac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dca8:	2302      	movs	r3, #2
 800dcaa:	e06d      	b.n	800dd88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a30      	ldr	r2, [pc, #192]	; (800dd94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d004      	beq.n	800dce0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a2f      	ldr	r2, [pc, #188]	; (800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d108      	bne.n	800dcf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dce6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a20      	ldr	r2, [pc, #128]	; (800dd94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d022      	beq.n	800dd5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd1e:	d01d      	beq.n	800dd5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a1d      	ldr	r2, [pc, #116]	; (800dd9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d018      	beq.n	800dd5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a1c      	ldr	r2, [pc, #112]	; (800dda0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d013      	beq.n	800dd5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4a1a      	ldr	r2, [pc, #104]	; (800dda4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d00e      	beq.n	800dd5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4a15      	ldr	r2, [pc, #84]	; (800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d009      	beq.n	800dd5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a16      	ldr	r2, [pc, #88]	; (800dda8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d004      	beq.n	800dd5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a15      	ldr	r2, [pc, #84]	; (800ddac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d10c      	bne.n	800dd76 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	68ba      	ldr	r2, [r7, #8]
 800dd74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3714      	adds	r7, #20
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr
 800dd94:	40010000 	.word	0x40010000
 800dd98:	40010400 	.word	0x40010400
 800dd9c:	40000400 	.word	0x40000400
 800dda0:	40000800 	.word	0x40000800
 800dda4:	40000c00 	.word	0x40000c00
 800dda8:	40001800 	.word	0x40001800
 800ddac:	40014000 	.word	0x40014000

0800ddb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddb8:	bf00      	nop
 800ddba:	370c      	adds	r7, #12
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e042      	b.n	800de84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de04:	2b00      	cmp	r3, #0
 800de06:	d106      	bne.n	800de16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7f4 fa2f 	bl	8002274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2224      	movs	r2, #36	; 0x24
 800de1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f022 0201 	bic.w	r2, r2, #1
 800de2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 fce0 	bl	800e7f4 <UART_SetConfig>
 800de34:	4603      	mov	r3, r0
 800de36:	2b01      	cmp	r3, #1
 800de38:	d101      	bne.n	800de3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800de3a:	2301      	movs	r3, #1
 800de3c:	e022      	b.n	800de84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de42:	2b00      	cmp	r3, #0
 800de44:	d002      	beq.n	800de4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f001 fa3c 	bl	800f2c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	685a      	ldr	r2, [r3, #4]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	689a      	ldr	r2, [r3, #8]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f042 0201 	orr.w	r2, r2, #1
 800de7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f001 fac3 	bl	800f408 <UART_CheckIdleState>
 800de82:	4603      	mov	r3, r0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b08a      	sub	sp, #40	; 0x28
 800de90:	af02      	add	r7, sp, #8
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	4613      	mov	r3, r2
 800de9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dea2:	2b20      	cmp	r3, #32
 800dea4:	d17b      	bne.n	800df9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <HAL_UART_Transmit+0x26>
 800deac:	88fb      	ldrh	r3, [r7, #6]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	e074      	b.n	800dfa0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2221      	movs	r2, #33	; 0x21
 800dec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dec6:	f7f4 ff3d 	bl	8002d44 <HAL_GetTick>
 800deca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	88fa      	ldrh	r2, [r7, #6]
 800ded0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	88fa      	ldrh	r2, [r7, #6]
 800ded8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dee4:	d108      	bne.n	800def8 <HAL_UART_Transmit+0x6c>
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	691b      	ldr	r3, [r3, #16]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d104      	bne.n	800def8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800deee:	2300      	movs	r3, #0
 800def0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	61bb      	str	r3, [r7, #24]
 800def6:	e003      	b.n	800df00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800defc:	2300      	movs	r3, #0
 800defe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800df00:	e030      	b.n	800df64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	9300      	str	r3, [sp, #0]
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	2200      	movs	r2, #0
 800df0a:	2180      	movs	r1, #128	; 0x80
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f001 fb25 	bl	800f55c <UART_WaitOnFlagUntilTimeout>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d005      	beq.n	800df24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2220      	movs	r2, #32
 800df1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800df20:	2303      	movs	r3, #3
 800df22:	e03d      	b.n	800dfa0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800df24:	69fb      	ldr	r3, [r7, #28]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10b      	bne.n	800df42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	881b      	ldrh	r3, [r3, #0]
 800df2e:	461a      	mov	r2, r3
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	3302      	adds	r3, #2
 800df3e:	61bb      	str	r3, [r7, #24]
 800df40:	e007      	b.n	800df52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	781a      	ldrb	r2, [r3, #0]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	3301      	adds	r3, #1
 800df50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df58:	b29b      	uxth	r3, r3
 800df5a:	3b01      	subs	r3, #1
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d1c8      	bne.n	800df02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	9300      	str	r3, [sp, #0]
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	2200      	movs	r2, #0
 800df78:	2140      	movs	r1, #64	; 0x40
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f001 faee 	bl	800f55c <UART_WaitOnFlagUntilTimeout>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d005      	beq.n	800df92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2220      	movs	r2, #32
 800df8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800df8e:	2303      	movs	r3, #3
 800df90:	e006      	b.n	800dfa0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2220      	movs	r2, #32
 800df96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800df9a:	2300      	movs	r3, #0
 800df9c:	e000      	b.n	800dfa0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800df9e:	2302      	movs	r3, #2
  }
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3720      	adds	r7, #32
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b08a      	sub	sp, #40	; 0x28
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfbc:	2b20      	cmp	r3, #32
 800dfbe:	d137      	bne.n	800e030 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <HAL_UART_Receive_DMA+0x24>
 800dfc6:	88fb      	ldrh	r3, [r7, #6]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d101      	bne.n	800dfd0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e030      	b.n	800e032 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a18      	ldr	r2, [pc, #96]	; (800e03c <HAL_UART_Receive_DMA+0x94>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d01f      	beq.n	800e020 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d018      	beq.n	800e020 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	e853 3f00 	ldrex	r3, [r3]
 800dffa:	613b      	str	r3, [r7, #16]
   return(result);
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e002:	627b      	str	r3, [r7, #36]	; 0x24
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	461a      	mov	r2, r3
 800e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00c:	623b      	str	r3, [r7, #32]
 800e00e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e010:	69f9      	ldr	r1, [r7, #28]
 800e012:	6a3a      	ldr	r2, [r7, #32]
 800e014:	e841 2300 	strex	r3, r2, [r1]
 800e018:	61bb      	str	r3, [r7, #24]
   return(result);
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d1e6      	bne.n	800dfee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e020:	88fb      	ldrh	r3, [r7, #6]
 800e022:	461a      	mov	r2, r3
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f001 fb00 	bl	800f62c <UART_Start_Receive_DMA>
 800e02c:	4603      	mov	r3, r0
 800e02e:	e000      	b.n	800e032 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e030:	2302      	movs	r3, #2
  }
}
 800e032:	4618      	mov	r0, r3
 800e034:	3728      	adds	r7, #40	; 0x28
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	58000c00 	.word	0x58000c00

0800e040 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b0ba      	sub	sp, #232	; 0xe8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	69db      	ldr	r3, [r3, #28]
 800e04e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e066:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e06a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e06e:	4013      	ands	r3, r2
 800e070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d11b      	bne.n	800e0b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e080:	f003 0320 	and.w	r3, r3, #32
 800e084:	2b00      	cmp	r3, #0
 800e086:	d015      	beq.n	800e0b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e08c:	f003 0320 	and.w	r3, r3, #32
 800e090:	2b00      	cmp	r3, #0
 800e092:	d105      	bne.n	800e0a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d009      	beq.n	800e0b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f000 8377 	beq.w	800e798 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	4798      	blx	r3
      }
      return;
 800e0b2:	e371      	b.n	800e798 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e0b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	f000 8123 	beq.w	800e304 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e0be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e0c2:	4b8d      	ldr	r3, [pc, #564]	; (800e2f8 <HAL_UART_IRQHandler+0x2b8>)
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d106      	bne.n	800e0d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e0ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e0ce:	4b8b      	ldr	r3, [pc, #556]	; (800e2fc <HAL_UART_IRQHandler+0x2bc>)
 800e0d0:	4013      	ands	r3, r2
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f000 8116 	beq.w	800e304 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0dc:	f003 0301 	and.w	r3, r3, #1
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d011      	beq.n	800e108 <HAL_UART_IRQHandler+0xc8>
 800e0e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00b      	beq.n	800e108 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0fe:	f043 0201 	orr.w	r2, r3, #1
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e10c:	f003 0302 	and.w	r3, r3, #2
 800e110:	2b00      	cmp	r3, #0
 800e112:	d011      	beq.n	800e138 <HAL_UART_IRQHandler+0xf8>
 800e114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e118:	f003 0301 	and.w	r3, r3, #1
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00b      	beq.n	800e138 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2202      	movs	r2, #2
 800e126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e12e:	f043 0204 	orr.w	r2, r3, #4
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e13c:	f003 0304 	and.w	r3, r3, #4
 800e140:	2b00      	cmp	r3, #0
 800e142:	d011      	beq.n	800e168 <HAL_UART_IRQHandler+0x128>
 800e144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e148:	f003 0301 	and.w	r3, r3, #1
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00b      	beq.n	800e168 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2204      	movs	r2, #4
 800e156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e15e:	f043 0202 	orr.w	r2, r3, #2
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e16c:	f003 0308 	and.w	r3, r3, #8
 800e170:	2b00      	cmp	r3, #0
 800e172:	d017      	beq.n	800e1a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e178:	f003 0320 	and.w	r3, r3, #32
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d105      	bne.n	800e18c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e180:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e184:	4b5c      	ldr	r3, [pc, #368]	; (800e2f8 <HAL_UART_IRQHandler+0x2b8>)
 800e186:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00b      	beq.n	800e1a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2208      	movs	r2, #8
 800e192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e19a:	f043 0208 	orr.w	r2, r3, #8
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d012      	beq.n	800e1d6 <HAL_UART_IRQHandler+0x196>
 800e1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d00c      	beq.n	800e1d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1cc:	f043 0220 	orr.w	r2, r3, #32
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 82dd 	beq.w	800e79c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1e6:	f003 0320 	and.w	r3, r3, #32
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d013      	beq.n	800e216 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e1ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1f2:	f003 0320 	and.w	r3, r3, #32
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d105      	bne.n	800e206 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e202:	2b00      	cmp	r3, #0
 800e204:	d007      	beq.n	800e216 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d003      	beq.n	800e216 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e21c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	689b      	ldr	r3, [r3, #8]
 800e226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e22a:	2b40      	cmp	r3, #64	; 0x40
 800e22c:	d005      	beq.n	800e23a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e22e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e232:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e236:	2b00      	cmp	r3, #0
 800e238:	d054      	beq.n	800e2e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f001 fade 	bl	800f7fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e24a:	2b40      	cmp	r3, #64	; 0x40
 800e24c:	d146      	bne.n	800e2dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	3308      	adds	r3, #8
 800e254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e25c:	e853 3f00 	ldrex	r3, [r3]
 800e260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e26c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	3308      	adds	r3, #8
 800e276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e27a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e27e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e28a:	e841 2300 	strex	r3, r2, [r1]
 800e28e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1d9      	bne.n	800e24e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d017      	beq.n	800e2d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2aa:	4a15      	ldr	r2, [pc, #84]	; (800e300 <HAL_UART_IRQHandler+0x2c0>)
 800e2ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7f7 fcf5 	bl	8005ca4 <HAL_DMA_Abort_IT>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d019      	beq.n	800e2f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2d2:	e00f      	b.n	800e2f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7f3 f969 	bl	80015ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2da:	e00b      	b.n	800e2f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f7f3 f965 	bl	80015ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2e2:	e007      	b.n	800e2f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f7f3 f961 	bl	80015ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e2f2:	e253      	b.n	800e79c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2f4:	bf00      	nop
    return;
 800e2f6:	e251      	b.n	800e79c <HAL_UART_IRQHandler+0x75c>
 800e2f8:	10000001 	.word	0x10000001
 800e2fc:	04000120 	.word	0x04000120
 800e300:	0800faaf 	.word	0x0800faaf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e308:	2b01      	cmp	r3, #1
 800e30a:	f040 81e7 	bne.w	800e6dc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e312:	f003 0310 	and.w	r3, r3, #16
 800e316:	2b00      	cmp	r3, #0
 800e318:	f000 81e0 	beq.w	800e6dc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e31c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e320:	f003 0310 	and.w	r3, r3, #16
 800e324:	2b00      	cmp	r3, #0
 800e326:	f000 81d9 	beq.w	800e6dc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2210      	movs	r2, #16
 800e330:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e33c:	2b40      	cmp	r3, #64	; 0x40
 800e33e:	f040 8151 	bne.w	800e5e4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a96      	ldr	r2, [pc, #600]	; (800e5a4 <HAL_UART_IRQHandler+0x564>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d068      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a93      	ldr	r2, [pc, #588]	; (800e5a8 <HAL_UART_IRQHandler+0x568>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d061      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4a91      	ldr	r2, [pc, #580]	; (800e5ac <HAL_UART_IRQHandler+0x56c>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d05a      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4a8e      	ldr	r2, [pc, #568]	; (800e5b0 <HAL_UART_IRQHandler+0x570>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d053      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a8c      	ldr	r2, [pc, #560]	; (800e5b4 <HAL_UART_IRQHandler+0x574>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d04c      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a89      	ldr	r2, [pc, #548]	; (800e5b8 <HAL_UART_IRQHandler+0x578>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d045      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4a87      	ldr	r2, [pc, #540]	; (800e5bc <HAL_UART_IRQHandler+0x57c>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d03e      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a84      	ldr	r2, [pc, #528]	; (800e5c0 <HAL_UART_IRQHandler+0x580>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d037      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a82      	ldr	r2, [pc, #520]	; (800e5c4 <HAL_UART_IRQHandler+0x584>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d030      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a7f      	ldr	r2, [pc, #508]	; (800e5c8 <HAL_UART_IRQHandler+0x588>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d029      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4a7d      	ldr	r2, [pc, #500]	; (800e5cc <HAL_UART_IRQHandler+0x58c>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d022      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4a7a      	ldr	r2, [pc, #488]	; (800e5d0 <HAL_UART_IRQHandler+0x590>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d01b      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4a78      	ldr	r2, [pc, #480]	; (800e5d4 <HAL_UART_IRQHandler+0x594>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d014      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a75      	ldr	r2, [pc, #468]	; (800e5d8 <HAL_UART_IRQHandler+0x598>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d00d      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a73      	ldr	r2, [pc, #460]	; (800e5dc <HAL_UART_IRQHandler+0x59c>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d006      	beq.n	800e422 <HAL_UART_IRQHandler+0x3e2>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a70      	ldr	r2, [pc, #448]	; (800e5e0 <HAL_UART_IRQHandler+0x5a0>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d106      	bne.n	800e430 <HAL_UART_IRQHandler+0x3f0>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	e005      	b.n	800e43c <HAL_UART_IRQHandler+0x3fc>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e444:	2b00      	cmp	r3, #0
 800e446:	f000 81ab 	beq.w	800e7a0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e450:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e454:	429a      	cmp	r2, r3
 800e456:	f080 81a3 	bcs.w	800e7a0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e460:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e46a:	69db      	ldr	r3, [r3, #28]
 800e46c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e470:	f000 8087 	beq.w	800e582 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e480:	e853 3f00 	ldrex	r3, [r3]
 800e484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e48c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	461a      	mov	r2, r3
 800e49a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e49e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e4a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e4aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e4ae:	e841 2300 	strex	r3, r2, [r1]
 800e4b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e4b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1da      	bne.n	800e474 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	3308      	adds	r3, #8
 800e4c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4c8:	e853 3f00 	ldrex	r3, [r3]
 800e4cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e4ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4d0:	f023 0301 	bic.w	r3, r3, #1
 800e4d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	3308      	adds	r3, #8
 800e4de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e4e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e4e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e4ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e4ee:	e841 2300 	strex	r3, r2, [r1]
 800e4f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e4f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d1e1      	bne.n	800e4be <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	3308      	adds	r3, #8
 800e500:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e504:	e853 3f00 	ldrex	r3, [r3]
 800e508:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e50a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e50c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	3308      	adds	r3, #8
 800e51a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e51e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e520:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e522:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e524:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e526:	e841 2300 	strex	r3, r2, [r1]
 800e52a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e52c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1e3      	bne.n	800e4fa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2220      	movs	r2, #32
 800e536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e548:	e853 3f00 	ldrex	r3, [r3]
 800e54c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e54e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e550:	f023 0310 	bic.w	r3, r3, #16
 800e554:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	461a      	mov	r2, r3
 800e55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e562:	65bb      	str	r3, [r7, #88]	; 0x58
 800e564:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e566:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e568:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e56a:	e841 2300 	strex	r3, r2, [r1]
 800e56e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e572:	2b00      	cmp	r3, #0
 800e574:	d1e4      	bne.n	800e540 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7f7 f873 	bl	8005668 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2202      	movs	r2, #2
 800e586:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e594:	b29b      	uxth	r3, r3
 800e596:	1ad3      	subs	r3, r2, r3
 800e598:	b29b      	uxth	r3, r3
 800e59a:	4619      	mov	r1, r3
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 f91d 	bl	800e7dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5a2:	e0fd      	b.n	800e7a0 <HAL_UART_IRQHandler+0x760>
 800e5a4:	40020010 	.word	0x40020010
 800e5a8:	40020028 	.word	0x40020028
 800e5ac:	40020040 	.word	0x40020040
 800e5b0:	40020058 	.word	0x40020058
 800e5b4:	40020070 	.word	0x40020070
 800e5b8:	40020088 	.word	0x40020088
 800e5bc:	400200a0 	.word	0x400200a0
 800e5c0:	400200b8 	.word	0x400200b8
 800e5c4:	40020410 	.word	0x40020410
 800e5c8:	40020428 	.word	0x40020428
 800e5cc:	40020440 	.word	0x40020440
 800e5d0:	40020458 	.word	0x40020458
 800e5d4:	40020470 	.word	0x40020470
 800e5d8:	40020488 	.word	0x40020488
 800e5dc:	400204a0 	.word	0x400204a0
 800e5e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	2b00      	cmp	r3, #0
 800e602:	f000 80cf 	beq.w	800e7a4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e606:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f000 80ca 	beq.w	800e7a4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e618:	e853 3f00 	ldrex	r3, [r3]
 800e61c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e624:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	461a      	mov	r2, r3
 800e62e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e632:	647b      	str	r3, [r7, #68]	; 0x44
 800e634:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e636:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e63a:	e841 2300 	strex	r3, r2, [r1]
 800e63e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1e4      	bne.n	800e610 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	3308      	adds	r3, #8
 800e64c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e650:	e853 3f00 	ldrex	r3, [r3]
 800e654:	623b      	str	r3, [r7, #32]
   return(result);
 800e656:	6a3a      	ldr	r2, [r7, #32]
 800e658:	4b55      	ldr	r3, [pc, #340]	; (800e7b0 <HAL_UART_IRQHandler+0x770>)
 800e65a:	4013      	ands	r3, r2
 800e65c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	3308      	adds	r3, #8
 800e666:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e66a:	633a      	str	r2, [r7, #48]	; 0x30
 800e66c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e672:	e841 2300 	strex	r3, r2, [r1]
 800e676:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d1e3      	bne.n	800e646 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2220      	movs	r2, #32
 800e682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2200      	movs	r2, #0
 800e68a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	e853 3f00 	ldrex	r3, [r3]
 800e69e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f023 0310 	bic.w	r3, r3, #16
 800e6a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e6b4:	61fb      	str	r3, [r7, #28]
 800e6b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b8:	69b9      	ldr	r1, [r7, #24]
 800e6ba:	69fa      	ldr	r2, [r7, #28]
 800e6bc:	e841 2300 	strex	r3, r2, [r1]
 800e6c0:	617b      	str	r3, [r7, #20]
   return(result);
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d1e4      	bne.n	800e692 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f881 	bl	800e7dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6da:	e063      	b.n	800e7a4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d00e      	beq.n	800e706 <HAL_UART_IRQHandler+0x6c6>
 800e6e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d008      	beq.n	800e706 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e6fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f001 fa16 	bl	800fb30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e704:	e051      	b.n	800e7aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d014      	beq.n	800e73c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d105      	bne.n	800e72a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e71e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e726:	2b00      	cmp	r3, #0
 800e728:	d008      	beq.n	800e73c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d03a      	beq.n	800e7a8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	4798      	blx	r3
    }
    return;
 800e73a:	e035      	b.n	800e7a8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e744:	2b00      	cmp	r3, #0
 800e746:	d009      	beq.n	800e75c <HAL_UART_IRQHandler+0x71c>
 800e748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e750:	2b00      	cmp	r3, #0
 800e752:	d003      	beq.n	800e75c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f001 f9c0 	bl	800fada <UART_EndTransmit_IT>
    return;
 800e75a:	e026      	b.n	800e7aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e764:	2b00      	cmp	r3, #0
 800e766:	d009      	beq.n	800e77c <HAL_UART_IRQHandler+0x73c>
 800e768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e76c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e770:	2b00      	cmp	r3, #0
 800e772:	d003      	beq.n	800e77c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f001 f9ef 	bl	800fb58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e77a:	e016      	b.n	800e7aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e784:	2b00      	cmp	r3, #0
 800e786:	d010      	beq.n	800e7aa <HAL_UART_IRQHandler+0x76a>
 800e788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	da0c      	bge.n	800e7aa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f001 f9d7 	bl	800fb44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e796:	e008      	b.n	800e7aa <HAL_UART_IRQHandler+0x76a>
      return;
 800e798:	bf00      	nop
 800e79a:	e006      	b.n	800e7aa <HAL_UART_IRQHandler+0x76a>
    return;
 800e79c:	bf00      	nop
 800e79e:	e004      	b.n	800e7aa <HAL_UART_IRQHandler+0x76a>
      return;
 800e7a0:	bf00      	nop
 800e7a2:	e002      	b.n	800e7aa <HAL_UART_IRQHandler+0x76a>
      return;
 800e7a4:	bf00      	nop
 800e7a6:	e000      	b.n	800e7aa <HAL_UART_IRQHandler+0x76a>
    return;
 800e7a8:	bf00      	nop
  }
}
 800e7aa:	37e8      	adds	r7, #232	; 0xe8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	effffffe 	.word	0xeffffffe

0800e7b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e7bc:	bf00      	nop
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e7d0:	bf00      	nop
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e7e8:	bf00      	nop
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e7f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e7f8:	b092      	sub	sp, #72	; 0x48
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	689a      	ldr	r2, [r3, #8]
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	431a      	orrs	r2, r3
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	695b      	ldr	r3, [r3, #20]
 800e812:	431a      	orrs	r2, r3
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	69db      	ldr	r3, [r3, #28]
 800e818:	4313      	orrs	r3, r2
 800e81a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	4bbe      	ldr	r3, [pc, #760]	; (800eb1c <UART_SetConfig+0x328>)
 800e824:	4013      	ands	r3, r2
 800e826:	697a      	ldr	r2, [r7, #20]
 800e828:	6812      	ldr	r2, [r2, #0]
 800e82a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e82c:	430b      	orrs	r3, r1
 800e82e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	68da      	ldr	r2, [r3, #12]
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	430a      	orrs	r2, r1
 800e844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	699b      	ldr	r3, [r3, #24]
 800e84a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4ab3      	ldr	r2, [pc, #716]	; (800eb20 <UART_SetConfig+0x32c>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d004      	beq.n	800e860 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	6a1b      	ldr	r3, [r3, #32]
 800e85a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e85c:	4313      	orrs	r3, r2
 800e85e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	689a      	ldr	r2, [r3, #8]
 800e866:	4baf      	ldr	r3, [pc, #700]	; (800eb24 <UART_SetConfig+0x330>)
 800e868:	4013      	ands	r3, r2
 800e86a:	697a      	ldr	r2, [r7, #20]
 800e86c:	6812      	ldr	r2, [r2, #0]
 800e86e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e870:	430b      	orrs	r3, r1
 800e872:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e87a:	f023 010f 	bic.w	r1, r3, #15
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	430a      	orrs	r2, r1
 800e888:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4aa6      	ldr	r2, [pc, #664]	; (800eb28 <UART_SetConfig+0x334>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d177      	bne.n	800e984 <UART_SetConfig+0x190>
 800e894:	4ba5      	ldr	r3, [pc, #660]	; (800eb2c <UART_SetConfig+0x338>)
 800e896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e898:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e89c:	2b28      	cmp	r3, #40	; 0x28
 800e89e:	d86d      	bhi.n	800e97c <UART_SetConfig+0x188>
 800e8a0:	a201      	add	r2, pc, #4	; (adr r2, 800e8a8 <UART_SetConfig+0xb4>)
 800e8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a6:	bf00      	nop
 800e8a8:	0800e94d 	.word	0x0800e94d
 800e8ac:	0800e97d 	.word	0x0800e97d
 800e8b0:	0800e97d 	.word	0x0800e97d
 800e8b4:	0800e97d 	.word	0x0800e97d
 800e8b8:	0800e97d 	.word	0x0800e97d
 800e8bc:	0800e97d 	.word	0x0800e97d
 800e8c0:	0800e97d 	.word	0x0800e97d
 800e8c4:	0800e97d 	.word	0x0800e97d
 800e8c8:	0800e955 	.word	0x0800e955
 800e8cc:	0800e97d 	.word	0x0800e97d
 800e8d0:	0800e97d 	.word	0x0800e97d
 800e8d4:	0800e97d 	.word	0x0800e97d
 800e8d8:	0800e97d 	.word	0x0800e97d
 800e8dc:	0800e97d 	.word	0x0800e97d
 800e8e0:	0800e97d 	.word	0x0800e97d
 800e8e4:	0800e97d 	.word	0x0800e97d
 800e8e8:	0800e95d 	.word	0x0800e95d
 800e8ec:	0800e97d 	.word	0x0800e97d
 800e8f0:	0800e97d 	.word	0x0800e97d
 800e8f4:	0800e97d 	.word	0x0800e97d
 800e8f8:	0800e97d 	.word	0x0800e97d
 800e8fc:	0800e97d 	.word	0x0800e97d
 800e900:	0800e97d 	.word	0x0800e97d
 800e904:	0800e97d 	.word	0x0800e97d
 800e908:	0800e965 	.word	0x0800e965
 800e90c:	0800e97d 	.word	0x0800e97d
 800e910:	0800e97d 	.word	0x0800e97d
 800e914:	0800e97d 	.word	0x0800e97d
 800e918:	0800e97d 	.word	0x0800e97d
 800e91c:	0800e97d 	.word	0x0800e97d
 800e920:	0800e97d 	.word	0x0800e97d
 800e924:	0800e97d 	.word	0x0800e97d
 800e928:	0800e96d 	.word	0x0800e96d
 800e92c:	0800e97d 	.word	0x0800e97d
 800e930:	0800e97d 	.word	0x0800e97d
 800e934:	0800e97d 	.word	0x0800e97d
 800e938:	0800e97d 	.word	0x0800e97d
 800e93c:	0800e97d 	.word	0x0800e97d
 800e940:	0800e97d 	.word	0x0800e97d
 800e944:	0800e97d 	.word	0x0800e97d
 800e948:	0800e975 	.word	0x0800e975
 800e94c:	2301      	movs	r3, #1
 800e94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e952:	e222      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e954:	2304      	movs	r3, #4
 800e956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e95a:	e21e      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e95c:	2308      	movs	r3, #8
 800e95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e962:	e21a      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e964:	2310      	movs	r3, #16
 800e966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96a:	e216      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e96c:	2320      	movs	r3, #32
 800e96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e972:	e212      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e974:	2340      	movs	r3, #64	; 0x40
 800e976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97a:	e20e      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e97c:	2380      	movs	r3, #128	; 0x80
 800e97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e982:	e20a      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4a69      	ldr	r2, [pc, #420]	; (800eb30 <UART_SetConfig+0x33c>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d130      	bne.n	800e9f0 <UART_SetConfig+0x1fc>
 800e98e:	4b67      	ldr	r3, [pc, #412]	; (800eb2c <UART_SetConfig+0x338>)
 800e990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e992:	f003 0307 	and.w	r3, r3, #7
 800e996:	2b05      	cmp	r3, #5
 800e998:	d826      	bhi.n	800e9e8 <UART_SetConfig+0x1f4>
 800e99a:	a201      	add	r2, pc, #4	; (adr r2, 800e9a0 <UART_SetConfig+0x1ac>)
 800e99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a0:	0800e9b9 	.word	0x0800e9b9
 800e9a4:	0800e9c1 	.word	0x0800e9c1
 800e9a8:	0800e9c9 	.word	0x0800e9c9
 800e9ac:	0800e9d1 	.word	0x0800e9d1
 800e9b0:	0800e9d9 	.word	0x0800e9d9
 800e9b4:	0800e9e1 	.word	0x0800e9e1
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9be:	e1ec      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e9c0:	2304      	movs	r3, #4
 800e9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9c6:	e1e8      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e9c8:	2308      	movs	r3, #8
 800e9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ce:	e1e4      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e9d0:	2310      	movs	r3, #16
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d6:	e1e0      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e9d8:	2320      	movs	r3, #32
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9de:	e1dc      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e9e0:	2340      	movs	r3, #64	; 0x40
 800e9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e6:	e1d8      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e9e8:	2380      	movs	r3, #128	; 0x80
 800e9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ee:	e1d4      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a4f      	ldr	r2, [pc, #316]	; (800eb34 <UART_SetConfig+0x340>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d130      	bne.n	800ea5c <UART_SetConfig+0x268>
 800e9fa:	4b4c      	ldr	r3, [pc, #304]	; (800eb2c <UART_SetConfig+0x338>)
 800e9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9fe:	f003 0307 	and.w	r3, r3, #7
 800ea02:	2b05      	cmp	r3, #5
 800ea04:	d826      	bhi.n	800ea54 <UART_SetConfig+0x260>
 800ea06:	a201      	add	r2, pc, #4	; (adr r2, 800ea0c <UART_SetConfig+0x218>)
 800ea08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea0c:	0800ea25 	.word	0x0800ea25
 800ea10:	0800ea2d 	.word	0x0800ea2d
 800ea14:	0800ea35 	.word	0x0800ea35
 800ea18:	0800ea3d 	.word	0x0800ea3d
 800ea1c:	0800ea45 	.word	0x0800ea45
 800ea20:	0800ea4d 	.word	0x0800ea4d
 800ea24:	2300      	movs	r3, #0
 800ea26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea2a:	e1b6      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ea2c:	2304      	movs	r3, #4
 800ea2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea32:	e1b2      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ea34:	2308      	movs	r3, #8
 800ea36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea3a:	e1ae      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ea3c:	2310      	movs	r3, #16
 800ea3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea42:	e1aa      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ea44:	2320      	movs	r3, #32
 800ea46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4a:	e1a6      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ea4c:	2340      	movs	r3, #64	; 0x40
 800ea4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea52:	e1a2      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ea54:	2380      	movs	r3, #128	; 0x80
 800ea56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5a:	e19e      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a35      	ldr	r2, [pc, #212]	; (800eb38 <UART_SetConfig+0x344>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d130      	bne.n	800eac8 <UART_SetConfig+0x2d4>
 800ea66:	4b31      	ldr	r3, [pc, #196]	; (800eb2c <UART_SetConfig+0x338>)
 800ea68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea6a:	f003 0307 	and.w	r3, r3, #7
 800ea6e:	2b05      	cmp	r3, #5
 800ea70:	d826      	bhi.n	800eac0 <UART_SetConfig+0x2cc>
 800ea72:	a201      	add	r2, pc, #4	; (adr r2, 800ea78 <UART_SetConfig+0x284>)
 800ea74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea78:	0800ea91 	.word	0x0800ea91
 800ea7c:	0800ea99 	.word	0x0800ea99
 800ea80:	0800eaa1 	.word	0x0800eaa1
 800ea84:	0800eaa9 	.word	0x0800eaa9
 800ea88:	0800eab1 	.word	0x0800eab1
 800ea8c:	0800eab9 	.word	0x0800eab9
 800ea90:	2300      	movs	r3, #0
 800ea92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea96:	e180      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ea98:	2304      	movs	r3, #4
 800ea9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea9e:	e17c      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eaa0:	2308      	movs	r3, #8
 800eaa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaa6:	e178      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eaa8:	2310      	movs	r3, #16
 800eaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaae:	e174      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eab0:	2320      	movs	r3, #32
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab6:	e170      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eab8:	2340      	movs	r3, #64	; 0x40
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eabe:	e16c      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eac0:	2380      	movs	r3, #128	; 0x80
 800eac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eac6:	e168      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a1b      	ldr	r2, [pc, #108]	; (800eb3c <UART_SetConfig+0x348>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d142      	bne.n	800eb58 <UART_SetConfig+0x364>
 800ead2:	4b16      	ldr	r3, [pc, #88]	; (800eb2c <UART_SetConfig+0x338>)
 800ead4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ead6:	f003 0307 	and.w	r3, r3, #7
 800eada:	2b05      	cmp	r3, #5
 800eadc:	d838      	bhi.n	800eb50 <UART_SetConfig+0x35c>
 800eade:	a201      	add	r2, pc, #4	; (adr r2, 800eae4 <UART_SetConfig+0x2f0>)
 800eae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae4:	0800eafd 	.word	0x0800eafd
 800eae8:	0800eb05 	.word	0x0800eb05
 800eaec:	0800eb0d 	.word	0x0800eb0d
 800eaf0:	0800eb15 	.word	0x0800eb15
 800eaf4:	0800eb41 	.word	0x0800eb41
 800eaf8:	0800eb49 	.word	0x0800eb49
 800eafc:	2300      	movs	r3, #0
 800eafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb02:	e14a      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eb04:	2304      	movs	r3, #4
 800eb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb0a:	e146      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eb0c:	2308      	movs	r3, #8
 800eb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb12:	e142      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eb14:	2310      	movs	r3, #16
 800eb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb1a:	e13e      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eb1c:	cfff69f3 	.word	0xcfff69f3
 800eb20:	58000c00 	.word	0x58000c00
 800eb24:	11fff4ff 	.word	0x11fff4ff
 800eb28:	40011000 	.word	0x40011000
 800eb2c:	58024400 	.word	0x58024400
 800eb30:	40004400 	.word	0x40004400
 800eb34:	40004800 	.word	0x40004800
 800eb38:	40004c00 	.word	0x40004c00
 800eb3c:	40005000 	.word	0x40005000
 800eb40:	2320      	movs	r3, #32
 800eb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb46:	e128      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eb48:	2340      	movs	r3, #64	; 0x40
 800eb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb4e:	e124      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eb50:	2380      	movs	r3, #128	; 0x80
 800eb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb56:	e120      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4acb      	ldr	r2, [pc, #812]	; (800ee8c <UART_SetConfig+0x698>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d176      	bne.n	800ec50 <UART_SetConfig+0x45c>
 800eb62:	4bcb      	ldr	r3, [pc, #812]	; (800ee90 <UART_SetConfig+0x69c>)
 800eb64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb6a:	2b28      	cmp	r3, #40	; 0x28
 800eb6c:	d86c      	bhi.n	800ec48 <UART_SetConfig+0x454>
 800eb6e:	a201      	add	r2, pc, #4	; (adr r2, 800eb74 <UART_SetConfig+0x380>)
 800eb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb74:	0800ec19 	.word	0x0800ec19
 800eb78:	0800ec49 	.word	0x0800ec49
 800eb7c:	0800ec49 	.word	0x0800ec49
 800eb80:	0800ec49 	.word	0x0800ec49
 800eb84:	0800ec49 	.word	0x0800ec49
 800eb88:	0800ec49 	.word	0x0800ec49
 800eb8c:	0800ec49 	.word	0x0800ec49
 800eb90:	0800ec49 	.word	0x0800ec49
 800eb94:	0800ec21 	.word	0x0800ec21
 800eb98:	0800ec49 	.word	0x0800ec49
 800eb9c:	0800ec49 	.word	0x0800ec49
 800eba0:	0800ec49 	.word	0x0800ec49
 800eba4:	0800ec49 	.word	0x0800ec49
 800eba8:	0800ec49 	.word	0x0800ec49
 800ebac:	0800ec49 	.word	0x0800ec49
 800ebb0:	0800ec49 	.word	0x0800ec49
 800ebb4:	0800ec29 	.word	0x0800ec29
 800ebb8:	0800ec49 	.word	0x0800ec49
 800ebbc:	0800ec49 	.word	0x0800ec49
 800ebc0:	0800ec49 	.word	0x0800ec49
 800ebc4:	0800ec49 	.word	0x0800ec49
 800ebc8:	0800ec49 	.word	0x0800ec49
 800ebcc:	0800ec49 	.word	0x0800ec49
 800ebd0:	0800ec49 	.word	0x0800ec49
 800ebd4:	0800ec31 	.word	0x0800ec31
 800ebd8:	0800ec49 	.word	0x0800ec49
 800ebdc:	0800ec49 	.word	0x0800ec49
 800ebe0:	0800ec49 	.word	0x0800ec49
 800ebe4:	0800ec49 	.word	0x0800ec49
 800ebe8:	0800ec49 	.word	0x0800ec49
 800ebec:	0800ec49 	.word	0x0800ec49
 800ebf0:	0800ec49 	.word	0x0800ec49
 800ebf4:	0800ec39 	.word	0x0800ec39
 800ebf8:	0800ec49 	.word	0x0800ec49
 800ebfc:	0800ec49 	.word	0x0800ec49
 800ec00:	0800ec49 	.word	0x0800ec49
 800ec04:	0800ec49 	.word	0x0800ec49
 800ec08:	0800ec49 	.word	0x0800ec49
 800ec0c:	0800ec49 	.word	0x0800ec49
 800ec10:	0800ec49 	.word	0x0800ec49
 800ec14:	0800ec41 	.word	0x0800ec41
 800ec18:	2301      	movs	r3, #1
 800ec1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec1e:	e0bc      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ec20:	2304      	movs	r3, #4
 800ec22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec26:	e0b8      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ec28:	2308      	movs	r3, #8
 800ec2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec2e:	e0b4      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ec30:	2310      	movs	r3, #16
 800ec32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec36:	e0b0      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ec38:	2320      	movs	r3, #32
 800ec3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3e:	e0ac      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ec40:	2340      	movs	r3, #64	; 0x40
 800ec42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec46:	e0a8      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ec48:	2380      	movs	r3, #128	; 0x80
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4e:	e0a4      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a8f      	ldr	r2, [pc, #572]	; (800ee94 <UART_SetConfig+0x6a0>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d130      	bne.n	800ecbc <UART_SetConfig+0x4c8>
 800ec5a:	4b8d      	ldr	r3, [pc, #564]	; (800ee90 <UART_SetConfig+0x69c>)
 800ec5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec5e:	f003 0307 	and.w	r3, r3, #7
 800ec62:	2b05      	cmp	r3, #5
 800ec64:	d826      	bhi.n	800ecb4 <UART_SetConfig+0x4c0>
 800ec66:	a201      	add	r2, pc, #4	; (adr r2, 800ec6c <UART_SetConfig+0x478>)
 800ec68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6c:	0800ec85 	.word	0x0800ec85
 800ec70:	0800ec8d 	.word	0x0800ec8d
 800ec74:	0800ec95 	.word	0x0800ec95
 800ec78:	0800ec9d 	.word	0x0800ec9d
 800ec7c:	0800eca5 	.word	0x0800eca5
 800ec80:	0800ecad 	.word	0x0800ecad
 800ec84:	2300      	movs	r3, #0
 800ec86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8a:	e086      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ec8c:	2304      	movs	r3, #4
 800ec8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec92:	e082      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ec94:	2308      	movs	r3, #8
 800ec96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9a:	e07e      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ec9c:	2310      	movs	r3, #16
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca2:	e07a      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800eca4:	2320      	movs	r3, #32
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecaa:	e076      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ecac:	2340      	movs	r3, #64	; 0x40
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb2:	e072      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ecb4:	2380      	movs	r3, #128	; 0x80
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecba:	e06e      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a75      	ldr	r2, [pc, #468]	; (800ee98 <UART_SetConfig+0x6a4>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d130      	bne.n	800ed28 <UART_SetConfig+0x534>
 800ecc6:	4b72      	ldr	r3, [pc, #456]	; (800ee90 <UART_SetConfig+0x69c>)
 800ecc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecca:	f003 0307 	and.w	r3, r3, #7
 800ecce:	2b05      	cmp	r3, #5
 800ecd0:	d826      	bhi.n	800ed20 <UART_SetConfig+0x52c>
 800ecd2:	a201      	add	r2, pc, #4	; (adr r2, 800ecd8 <UART_SetConfig+0x4e4>)
 800ecd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd8:	0800ecf1 	.word	0x0800ecf1
 800ecdc:	0800ecf9 	.word	0x0800ecf9
 800ece0:	0800ed01 	.word	0x0800ed01
 800ece4:	0800ed09 	.word	0x0800ed09
 800ece8:	0800ed11 	.word	0x0800ed11
 800ecec:	0800ed19 	.word	0x0800ed19
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecf6:	e050      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ecf8:	2304      	movs	r3, #4
 800ecfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecfe:	e04c      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed00:	2308      	movs	r3, #8
 800ed02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed06:	e048      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed08:	2310      	movs	r3, #16
 800ed0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed0e:	e044      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed10:	2320      	movs	r3, #32
 800ed12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed16:	e040      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed18:	2340      	movs	r3, #64	; 0x40
 800ed1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed1e:	e03c      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed20:	2380      	movs	r3, #128	; 0x80
 800ed22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed26:	e038      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a5b      	ldr	r2, [pc, #364]	; (800ee9c <UART_SetConfig+0x6a8>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d130      	bne.n	800ed94 <UART_SetConfig+0x5a0>
 800ed32:	4b57      	ldr	r3, [pc, #348]	; (800ee90 <UART_SetConfig+0x69c>)
 800ed34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed36:	f003 0307 	and.w	r3, r3, #7
 800ed3a:	2b05      	cmp	r3, #5
 800ed3c:	d826      	bhi.n	800ed8c <UART_SetConfig+0x598>
 800ed3e:	a201      	add	r2, pc, #4	; (adr r2, 800ed44 <UART_SetConfig+0x550>)
 800ed40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed44:	0800ed5d 	.word	0x0800ed5d
 800ed48:	0800ed65 	.word	0x0800ed65
 800ed4c:	0800ed6d 	.word	0x0800ed6d
 800ed50:	0800ed75 	.word	0x0800ed75
 800ed54:	0800ed7d 	.word	0x0800ed7d
 800ed58:	0800ed85 	.word	0x0800ed85
 800ed5c:	2302      	movs	r3, #2
 800ed5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed62:	e01a      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed64:	2304      	movs	r3, #4
 800ed66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed6a:	e016      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed6c:	2308      	movs	r3, #8
 800ed6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed72:	e012      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed74:	2310      	movs	r3, #16
 800ed76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed7a:	e00e      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed7c:	2320      	movs	r3, #32
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed82:	e00a      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed84:	2340      	movs	r3, #64	; 0x40
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8a:	e006      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed8c:	2380      	movs	r3, #128	; 0x80
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed92:	e002      	b.n	800ed9a <UART_SetConfig+0x5a6>
 800ed94:	2380      	movs	r3, #128	; 0x80
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4a3f      	ldr	r2, [pc, #252]	; (800ee9c <UART_SetConfig+0x6a8>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	f040 80f8 	bne.w	800ef96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eda6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800edaa:	2b20      	cmp	r3, #32
 800edac:	dc46      	bgt.n	800ee3c <UART_SetConfig+0x648>
 800edae:	2b02      	cmp	r3, #2
 800edb0:	f2c0 8082 	blt.w	800eeb8 <UART_SetConfig+0x6c4>
 800edb4:	3b02      	subs	r3, #2
 800edb6:	2b1e      	cmp	r3, #30
 800edb8:	d87e      	bhi.n	800eeb8 <UART_SetConfig+0x6c4>
 800edba:	a201      	add	r2, pc, #4	; (adr r2, 800edc0 <UART_SetConfig+0x5cc>)
 800edbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc0:	0800ee43 	.word	0x0800ee43
 800edc4:	0800eeb9 	.word	0x0800eeb9
 800edc8:	0800ee4b 	.word	0x0800ee4b
 800edcc:	0800eeb9 	.word	0x0800eeb9
 800edd0:	0800eeb9 	.word	0x0800eeb9
 800edd4:	0800eeb9 	.word	0x0800eeb9
 800edd8:	0800ee5b 	.word	0x0800ee5b
 800eddc:	0800eeb9 	.word	0x0800eeb9
 800ede0:	0800eeb9 	.word	0x0800eeb9
 800ede4:	0800eeb9 	.word	0x0800eeb9
 800ede8:	0800eeb9 	.word	0x0800eeb9
 800edec:	0800eeb9 	.word	0x0800eeb9
 800edf0:	0800eeb9 	.word	0x0800eeb9
 800edf4:	0800eeb9 	.word	0x0800eeb9
 800edf8:	0800ee6b 	.word	0x0800ee6b
 800edfc:	0800eeb9 	.word	0x0800eeb9
 800ee00:	0800eeb9 	.word	0x0800eeb9
 800ee04:	0800eeb9 	.word	0x0800eeb9
 800ee08:	0800eeb9 	.word	0x0800eeb9
 800ee0c:	0800eeb9 	.word	0x0800eeb9
 800ee10:	0800eeb9 	.word	0x0800eeb9
 800ee14:	0800eeb9 	.word	0x0800eeb9
 800ee18:	0800eeb9 	.word	0x0800eeb9
 800ee1c:	0800eeb9 	.word	0x0800eeb9
 800ee20:	0800eeb9 	.word	0x0800eeb9
 800ee24:	0800eeb9 	.word	0x0800eeb9
 800ee28:	0800eeb9 	.word	0x0800eeb9
 800ee2c:	0800eeb9 	.word	0x0800eeb9
 800ee30:	0800eeb9 	.word	0x0800eeb9
 800ee34:	0800eeb9 	.word	0x0800eeb9
 800ee38:	0800eeab 	.word	0x0800eeab
 800ee3c:	2b40      	cmp	r3, #64	; 0x40
 800ee3e:	d037      	beq.n	800eeb0 <UART_SetConfig+0x6bc>
 800ee40:	e03a      	b.n	800eeb8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ee42:	f7fc f8ab 	bl	800af9c <HAL_RCCEx_GetD3PCLK1Freq>
 800ee46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ee48:	e03c      	b.n	800eec4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fc f8ba 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee58:	e034      	b.n	800eec4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee5a:	f107 0318 	add.w	r3, r7, #24
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fc fa06 	bl	800b270 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee68:	e02c      	b.n	800eec4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee6a:	4b09      	ldr	r3, [pc, #36]	; (800ee90 <UART_SetConfig+0x69c>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f003 0320 	and.w	r3, r3, #32
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d016      	beq.n	800eea4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee76:	4b06      	ldr	r3, [pc, #24]	; (800ee90 <UART_SetConfig+0x69c>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	08db      	lsrs	r3, r3, #3
 800ee7c:	f003 0303 	and.w	r3, r3, #3
 800ee80:	4a07      	ldr	r2, [pc, #28]	; (800eea0 <UART_SetConfig+0x6ac>)
 800ee82:	fa22 f303 	lsr.w	r3, r2, r3
 800ee86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee88:	e01c      	b.n	800eec4 <UART_SetConfig+0x6d0>
 800ee8a:	bf00      	nop
 800ee8c:	40011400 	.word	0x40011400
 800ee90:	58024400 	.word	0x58024400
 800ee94:	40007800 	.word	0x40007800
 800ee98:	40007c00 	.word	0x40007c00
 800ee9c:	58000c00 	.word	0x58000c00
 800eea0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800eea4:	4b9d      	ldr	r3, [pc, #628]	; (800f11c <UART_SetConfig+0x928>)
 800eea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eea8:	e00c      	b.n	800eec4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eeaa:	4b9d      	ldr	r3, [pc, #628]	; (800f120 <UART_SetConfig+0x92c>)
 800eeac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eeae:	e009      	b.n	800eec4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eeb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eeb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eeb6:	e005      	b.n	800eec4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eebc:	2301      	movs	r3, #1
 800eebe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eec2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f000 81de 	beq.w	800f288 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed0:	4a94      	ldr	r2, [pc, #592]	; (800f124 <UART_SetConfig+0x930>)
 800eed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eed6:	461a      	mov	r2, r3
 800eed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeda:	fbb3 f3f2 	udiv	r3, r3, r2
 800eede:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	685a      	ldr	r2, [r3, #4]
 800eee4:	4613      	mov	r3, r2
 800eee6:	005b      	lsls	r3, r3, #1
 800eee8:	4413      	add	r3, r2
 800eeea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d305      	bcc.n	800eefc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d903      	bls.n	800ef04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800eefc:	2301      	movs	r3, #1
 800eefe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ef02:	e1c1      	b.n	800f288 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef06:	2200      	movs	r2, #0
 800ef08:	60bb      	str	r3, [r7, #8]
 800ef0a:	60fa      	str	r2, [r7, #12]
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef10:	4a84      	ldr	r2, [pc, #528]	; (800f124 <UART_SetConfig+0x930>)
 800ef12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	2200      	movs	r2, #0
 800ef1a:	603b      	str	r3, [r7, #0]
 800ef1c:	607a      	str	r2, [r7, #4]
 800ef1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ef26:	f7f1 fa33 	bl	8000390 <__aeabi_uldivmod>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	4610      	mov	r0, r2
 800ef30:	4619      	mov	r1, r3
 800ef32:	f04f 0200 	mov.w	r2, #0
 800ef36:	f04f 0300 	mov.w	r3, #0
 800ef3a:	020b      	lsls	r3, r1, #8
 800ef3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef40:	0202      	lsls	r2, r0, #8
 800ef42:	6979      	ldr	r1, [r7, #20]
 800ef44:	6849      	ldr	r1, [r1, #4]
 800ef46:	0849      	lsrs	r1, r1, #1
 800ef48:	2000      	movs	r0, #0
 800ef4a:	460c      	mov	r4, r1
 800ef4c:	4605      	mov	r5, r0
 800ef4e:	eb12 0804 	adds.w	r8, r2, r4
 800ef52:	eb43 0905 	adc.w	r9, r3, r5
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	469a      	mov	sl, r3
 800ef5e:	4693      	mov	fp, r2
 800ef60:	4652      	mov	r2, sl
 800ef62:	465b      	mov	r3, fp
 800ef64:	4640      	mov	r0, r8
 800ef66:	4649      	mov	r1, r9
 800ef68:	f7f1 fa12 	bl	8000390 <__aeabi_uldivmod>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	4613      	mov	r3, r2
 800ef72:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef7a:	d308      	bcc.n	800ef8e <UART_SetConfig+0x79a>
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef82:	d204      	bcs.n	800ef8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef8a:	60da      	str	r2, [r3, #12]
 800ef8c:	e17c      	b.n	800f288 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ef94:	e178      	b.n	800f288 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	69db      	ldr	r3, [r3, #28]
 800ef9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef9e:	f040 80c5 	bne.w	800f12c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800efa2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800efa6:	2b20      	cmp	r3, #32
 800efa8:	dc48      	bgt.n	800f03c <UART_SetConfig+0x848>
 800efaa:	2b00      	cmp	r3, #0
 800efac:	db7b      	blt.n	800f0a6 <UART_SetConfig+0x8b2>
 800efae:	2b20      	cmp	r3, #32
 800efb0:	d879      	bhi.n	800f0a6 <UART_SetConfig+0x8b2>
 800efb2:	a201      	add	r2, pc, #4	; (adr r2, 800efb8 <UART_SetConfig+0x7c4>)
 800efb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb8:	0800f043 	.word	0x0800f043
 800efbc:	0800f04b 	.word	0x0800f04b
 800efc0:	0800f0a7 	.word	0x0800f0a7
 800efc4:	0800f0a7 	.word	0x0800f0a7
 800efc8:	0800f053 	.word	0x0800f053
 800efcc:	0800f0a7 	.word	0x0800f0a7
 800efd0:	0800f0a7 	.word	0x0800f0a7
 800efd4:	0800f0a7 	.word	0x0800f0a7
 800efd8:	0800f063 	.word	0x0800f063
 800efdc:	0800f0a7 	.word	0x0800f0a7
 800efe0:	0800f0a7 	.word	0x0800f0a7
 800efe4:	0800f0a7 	.word	0x0800f0a7
 800efe8:	0800f0a7 	.word	0x0800f0a7
 800efec:	0800f0a7 	.word	0x0800f0a7
 800eff0:	0800f0a7 	.word	0x0800f0a7
 800eff4:	0800f0a7 	.word	0x0800f0a7
 800eff8:	0800f073 	.word	0x0800f073
 800effc:	0800f0a7 	.word	0x0800f0a7
 800f000:	0800f0a7 	.word	0x0800f0a7
 800f004:	0800f0a7 	.word	0x0800f0a7
 800f008:	0800f0a7 	.word	0x0800f0a7
 800f00c:	0800f0a7 	.word	0x0800f0a7
 800f010:	0800f0a7 	.word	0x0800f0a7
 800f014:	0800f0a7 	.word	0x0800f0a7
 800f018:	0800f0a7 	.word	0x0800f0a7
 800f01c:	0800f0a7 	.word	0x0800f0a7
 800f020:	0800f0a7 	.word	0x0800f0a7
 800f024:	0800f0a7 	.word	0x0800f0a7
 800f028:	0800f0a7 	.word	0x0800f0a7
 800f02c:	0800f0a7 	.word	0x0800f0a7
 800f030:	0800f0a7 	.word	0x0800f0a7
 800f034:	0800f0a7 	.word	0x0800f0a7
 800f038:	0800f099 	.word	0x0800f099
 800f03c:	2b40      	cmp	r3, #64	; 0x40
 800f03e:	d02e      	beq.n	800f09e <UART_SetConfig+0x8aa>
 800f040:	e031      	b.n	800f0a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f042:	f7f9 fff5 	bl	8009030 <HAL_RCC_GetPCLK1Freq>
 800f046:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f048:	e033      	b.n	800f0b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f04a:	f7fa f807 	bl	800905c <HAL_RCC_GetPCLK2Freq>
 800f04e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f050:	e02f      	b.n	800f0b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f056:	4618      	mov	r0, r3
 800f058:	f7fb ffb6 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f060:	e027      	b.n	800f0b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f062:	f107 0318 	add.w	r3, r7, #24
 800f066:	4618      	mov	r0, r3
 800f068:	f7fc f902 	bl	800b270 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f070:	e01f      	b.n	800f0b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f072:	4b2d      	ldr	r3, [pc, #180]	; (800f128 <UART_SetConfig+0x934>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f003 0320 	and.w	r3, r3, #32
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d009      	beq.n	800f092 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f07e:	4b2a      	ldr	r3, [pc, #168]	; (800f128 <UART_SetConfig+0x934>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	08db      	lsrs	r3, r3, #3
 800f084:	f003 0303 	and.w	r3, r3, #3
 800f088:	4a24      	ldr	r2, [pc, #144]	; (800f11c <UART_SetConfig+0x928>)
 800f08a:	fa22 f303 	lsr.w	r3, r2, r3
 800f08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f090:	e00f      	b.n	800f0b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f092:	4b22      	ldr	r3, [pc, #136]	; (800f11c <UART_SetConfig+0x928>)
 800f094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f096:	e00c      	b.n	800f0b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f098:	4b21      	ldr	r3, [pc, #132]	; (800f120 <UART_SetConfig+0x92c>)
 800f09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f09c:	e009      	b.n	800f0b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f09e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0a4:	e005      	b.n	800f0b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f0b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f000 80e7 	beq.w	800f288 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0be:	4a19      	ldr	r2, [pc, #100]	; (800f124 <UART_SetConfig+0x930>)
 800f0c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0cc:	005a      	lsls	r2, r3, #1
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	085b      	lsrs	r3, r3, #1
 800f0d4:	441a      	add	r2, r3
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e2:	2b0f      	cmp	r3, #15
 800f0e4:	d916      	bls.n	800f114 <UART_SetConfig+0x920>
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0ec:	d212      	bcs.n	800f114 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	f023 030f 	bic.w	r3, r3, #15
 800f0f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fa:	085b      	lsrs	r3, r3, #1
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	f003 0307 	and.w	r3, r3, #7
 800f102:	b29a      	uxth	r2, r3
 800f104:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f106:	4313      	orrs	r3, r2
 800f108:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f110:	60da      	str	r2, [r3, #12]
 800f112:	e0b9      	b.n	800f288 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f114:	2301      	movs	r3, #1
 800f116:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f11a:	e0b5      	b.n	800f288 <UART_SetConfig+0xa94>
 800f11c:	03d09000 	.word	0x03d09000
 800f120:	003d0900 	.word	0x003d0900
 800f124:	08012af8 	.word	0x08012af8
 800f128:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f12c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f130:	2b20      	cmp	r3, #32
 800f132:	dc49      	bgt.n	800f1c8 <UART_SetConfig+0x9d4>
 800f134:	2b00      	cmp	r3, #0
 800f136:	db7c      	blt.n	800f232 <UART_SetConfig+0xa3e>
 800f138:	2b20      	cmp	r3, #32
 800f13a:	d87a      	bhi.n	800f232 <UART_SetConfig+0xa3e>
 800f13c:	a201      	add	r2, pc, #4	; (adr r2, 800f144 <UART_SetConfig+0x950>)
 800f13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f142:	bf00      	nop
 800f144:	0800f1cf 	.word	0x0800f1cf
 800f148:	0800f1d7 	.word	0x0800f1d7
 800f14c:	0800f233 	.word	0x0800f233
 800f150:	0800f233 	.word	0x0800f233
 800f154:	0800f1df 	.word	0x0800f1df
 800f158:	0800f233 	.word	0x0800f233
 800f15c:	0800f233 	.word	0x0800f233
 800f160:	0800f233 	.word	0x0800f233
 800f164:	0800f1ef 	.word	0x0800f1ef
 800f168:	0800f233 	.word	0x0800f233
 800f16c:	0800f233 	.word	0x0800f233
 800f170:	0800f233 	.word	0x0800f233
 800f174:	0800f233 	.word	0x0800f233
 800f178:	0800f233 	.word	0x0800f233
 800f17c:	0800f233 	.word	0x0800f233
 800f180:	0800f233 	.word	0x0800f233
 800f184:	0800f1ff 	.word	0x0800f1ff
 800f188:	0800f233 	.word	0x0800f233
 800f18c:	0800f233 	.word	0x0800f233
 800f190:	0800f233 	.word	0x0800f233
 800f194:	0800f233 	.word	0x0800f233
 800f198:	0800f233 	.word	0x0800f233
 800f19c:	0800f233 	.word	0x0800f233
 800f1a0:	0800f233 	.word	0x0800f233
 800f1a4:	0800f233 	.word	0x0800f233
 800f1a8:	0800f233 	.word	0x0800f233
 800f1ac:	0800f233 	.word	0x0800f233
 800f1b0:	0800f233 	.word	0x0800f233
 800f1b4:	0800f233 	.word	0x0800f233
 800f1b8:	0800f233 	.word	0x0800f233
 800f1bc:	0800f233 	.word	0x0800f233
 800f1c0:	0800f233 	.word	0x0800f233
 800f1c4:	0800f225 	.word	0x0800f225
 800f1c8:	2b40      	cmp	r3, #64	; 0x40
 800f1ca:	d02e      	beq.n	800f22a <UART_SetConfig+0xa36>
 800f1cc:	e031      	b.n	800f232 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1ce:	f7f9 ff2f 	bl	8009030 <HAL_RCC_GetPCLK1Freq>
 800f1d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f1d4:	e033      	b.n	800f23e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1d6:	f7f9 ff41 	bl	800905c <HAL_RCC_GetPCLK2Freq>
 800f1da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f1dc:	e02f      	b.n	800f23e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fb fef0 	bl	800afc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1ec:	e027      	b.n	800f23e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1ee:	f107 0318 	add.w	r3, r7, #24
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fc f83c 	bl	800b270 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1fc:	e01f      	b.n	800f23e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1fe:	4b2d      	ldr	r3, [pc, #180]	; (800f2b4 <UART_SetConfig+0xac0>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f003 0320 	and.w	r3, r3, #32
 800f206:	2b00      	cmp	r3, #0
 800f208:	d009      	beq.n	800f21e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f20a:	4b2a      	ldr	r3, [pc, #168]	; (800f2b4 <UART_SetConfig+0xac0>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	08db      	lsrs	r3, r3, #3
 800f210:	f003 0303 	and.w	r3, r3, #3
 800f214:	4a28      	ldr	r2, [pc, #160]	; (800f2b8 <UART_SetConfig+0xac4>)
 800f216:	fa22 f303 	lsr.w	r3, r2, r3
 800f21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f21c:	e00f      	b.n	800f23e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f21e:	4b26      	ldr	r3, [pc, #152]	; (800f2b8 <UART_SetConfig+0xac4>)
 800f220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f222:	e00c      	b.n	800f23e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f224:	4b25      	ldr	r3, [pc, #148]	; (800f2bc <UART_SetConfig+0xac8>)
 800f226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f228:	e009      	b.n	800f23e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f22a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f230:	e005      	b.n	800f23e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f232:	2300      	movs	r3, #0
 800f234:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f236:	2301      	movs	r3, #1
 800f238:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f23c:	bf00      	nop
    }

    if (pclk != 0U)
 800f23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f240:	2b00      	cmp	r3, #0
 800f242:	d021      	beq.n	800f288 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f248:	4a1d      	ldr	r2, [pc, #116]	; (800f2c0 <UART_SetConfig+0xacc>)
 800f24a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f24e:	461a      	mov	r2, r3
 800f250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f252:	fbb3 f2f2 	udiv	r2, r3, r2
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	085b      	lsrs	r3, r3, #1
 800f25c:	441a      	add	r2, r3
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	fbb2 f3f3 	udiv	r3, r2, r3
 800f266:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26a:	2b0f      	cmp	r3, #15
 800f26c:	d909      	bls.n	800f282 <UART_SetConfig+0xa8e>
 800f26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f274:	d205      	bcs.n	800f282 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f278:	b29a      	uxth	r2, r3
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	60da      	str	r2, [r3, #12]
 800f280:	e002      	b.n	800f288 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f282:	2301      	movs	r3, #1
 800f284:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	2201      	movs	r2, #1
 800f28c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	2201      	movs	r2, #1
 800f294:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	2200      	movs	r2, #0
 800f29c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f2a4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3748      	adds	r7, #72	; 0x48
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f2b2:	bf00      	nop
 800f2b4:	58024400 	.word	0x58024400
 800f2b8:	03d09000 	.word	0x03d09000
 800f2bc:	003d0900 	.word	0x003d0900
 800f2c0:	08012af8 	.word	0x08012af8

0800f2c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2d0:	f003 0301 	and.w	r3, r3, #1
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00a      	beq.n	800f2ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	430a      	orrs	r2, r1
 800f2ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2f2:	f003 0302 	and.w	r3, r3, #2
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00a      	beq.n	800f310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	430a      	orrs	r2, r1
 800f30e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f314:	f003 0304 	and.w	r3, r3, #4
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00a      	beq.n	800f332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	430a      	orrs	r2, r1
 800f330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f336:	f003 0308 	and.w	r3, r3, #8
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00a      	beq.n	800f354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	430a      	orrs	r2, r1
 800f352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f358:	f003 0310 	and.w	r3, r3, #16
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d00a      	beq.n	800f376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	430a      	orrs	r2, r1
 800f374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f37a:	f003 0320 	and.w	r3, r3, #32
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00a      	beq.n	800f398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	430a      	orrs	r2, r1
 800f396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d01a      	beq.n	800f3da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	430a      	orrs	r2, r1
 800f3b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3c2:	d10a      	bne.n	800f3da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	430a      	orrs	r2, r1
 800f3d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d00a      	beq.n	800f3fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	430a      	orrs	r2, r1
 800f3fa:	605a      	str	r2, [r3, #4]
  }
}
 800f3fc:	bf00      	nop
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b098      	sub	sp, #96	; 0x60
 800f40c:	af02      	add	r7, sp, #8
 800f40e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f418:	f7f3 fc94 	bl	8002d44 <HAL_GetTick>
 800f41c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f003 0308 	and.w	r3, r3, #8
 800f428:	2b08      	cmp	r3, #8
 800f42a:	d12f      	bne.n	800f48c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f42c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f434:	2200      	movs	r2, #0
 800f436:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 f88e 	bl	800f55c <UART_WaitOnFlagUntilTimeout>
 800f440:	4603      	mov	r3, r0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d022      	beq.n	800f48c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44e:	e853 3f00 	ldrex	r3, [r3]
 800f452:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f45a:	653b      	str	r3, [r7, #80]	; 0x50
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	461a      	mov	r2, r3
 800f462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f464:	647b      	str	r3, [r7, #68]	; 0x44
 800f466:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f468:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f46a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f46c:	e841 2300 	strex	r3, r2, [r1]
 800f470:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f474:	2b00      	cmp	r3, #0
 800f476:	d1e6      	bne.n	800f446 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2220      	movs	r2, #32
 800f47c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f488:	2303      	movs	r3, #3
 800f48a:	e063      	b.n	800f554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f003 0304 	and.w	r3, r3, #4
 800f496:	2b04      	cmp	r3, #4
 800f498:	d149      	bne.n	800f52e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f49a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f49e:	9300      	str	r3, [sp, #0]
 800f4a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 f857 	bl	800f55c <UART_WaitOnFlagUntilTimeout>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d03c      	beq.n	800f52e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4bc:	e853 3f00 	ldrex	r3, [r3]
 800f4c0:	623b      	str	r3, [r7, #32]
   return(result);
 800f4c2:	6a3b      	ldr	r3, [r7, #32]
 800f4c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4d2:	633b      	str	r3, [r7, #48]	; 0x30
 800f4d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4da:	e841 2300 	strex	r3, r2, [r1]
 800f4de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d1e6      	bne.n	800f4b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	3308      	adds	r3, #8
 800f4ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	e853 3f00 	ldrex	r3, [r3]
 800f4f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f023 0301 	bic.w	r3, r3, #1
 800f4fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	3308      	adds	r3, #8
 800f504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f506:	61fa      	str	r2, [r7, #28]
 800f508:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f50a:	69b9      	ldr	r1, [r7, #24]
 800f50c:	69fa      	ldr	r2, [r7, #28]
 800f50e:	e841 2300 	strex	r3, r2, [r1]
 800f512:	617b      	str	r3, [r7, #20]
   return(result);
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d1e5      	bne.n	800f4e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2220      	movs	r2, #32
 800f51e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2200      	movs	r2, #0
 800f526:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f52a:	2303      	movs	r3, #3
 800f52c:	e012      	b.n	800f554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2220      	movs	r2, #32
 800f532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2220      	movs	r2, #32
 800f53a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2200      	movs	r2, #0
 800f542:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2200      	movs	r2, #0
 800f548:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2200      	movs	r2, #0
 800f54e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f552:	2300      	movs	r3, #0
}
 800f554:	4618      	mov	r0, r3
 800f556:	3758      	adds	r7, #88	; 0x58
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	603b      	str	r3, [r7, #0]
 800f568:	4613      	mov	r3, r2
 800f56a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f56c:	e049      	b.n	800f602 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f574:	d045      	beq.n	800f602 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f576:	f7f3 fbe5 	bl	8002d44 <HAL_GetTick>
 800f57a:	4602      	mov	r2, r0
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	1ad3      	subs	r3, r2, r3
 800f580:	69ba      	ldr	r2, [r7, #24]
 800f582:	429a      	cmp	r2, r3
 800f584:	d302      	bcc.n	800f58c <UART_WaitOnFlagUntilTimeout+0x30>
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d101      	bne.n	800f590 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f58c:	2303      	movs	r3, #3
 800f58e:	e048      	b.n	800f622 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f003 0304 	and.w	r3, r3, #4
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d031      	beq.n	800f602 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	69db      	ldr	r3, [r3, #28]
 800f5a4:	f003 0308 	and.w	r3, r3, #8
 800f5a8:	2b08      	cmp	r3, #8
 800f5aa:	d110      	bne.n	800f5ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2208      	movs	r2, #8
 800f5b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f000 f921 	bl	800f7fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2208      	movs	r2, #8
 800f5be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e029      	b.n	800f622 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	69db      	ldr	r3, [r3, #28]
 800f5d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f5dc:	d111      	bne.n	800f602 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	f000 f907 	bl	800f7fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2220      	movs	r2, #32
 800f5f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f5fe:	2303      	movs	r3, #3
 800f600:	e00f      	b.n	800f622 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	69da      	ldr	r2, [r3, #28]
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	4013      	ands	r3, r2
 800f60c:	68ba      	ldr	r2, [r7, #8]
 800f60e:	429a      	cmp	r2, r3
 800f610:	bf0c      	ite	eq
 800f612:	2301      	moveq	r3, #1
 800f614:	2300      	movne	r3, #0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	461a      	mov	r2, r3
 800f61a:	79fb      	ldrb	r3, [r7, #7]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d0a6      	beq.n	800f56e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f620:	2300      	movs	r3, #0
}
 800f622:	4618      	mov	r0, r3
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
	...

0800f62c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b096      	sub	sp, #88	; 0x58
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	4613      	mov	r3, r2
 800f638:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	88fa      	ldrh	r2, [r7, #6]
 800f644:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2200      	movs	r2, #0
 800f64c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2222      	movs	r2, #34	; 0x22
 800f654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d02d      	beq.n	800f6be <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f668:	4a40      	ldr	r2, [pc, #256]	; (800f76c <UART_Start_Receive_DMA+0x140>)
 800f66a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f672:	4a3f      	ldr	r2, [pc, #252]	; (800f770 <UART_Start_Receive_DMA+0x144>)
 800f674:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f67c:	4a3d      	ldr	r2, [pc, #244]	; (800f774 <UART_Start_Receive_DMA+0x148>)
 800f67e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f686:	2200      	movs	r2, #0
 800f688:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	3324      	adds	r3, #36	; 0x24
 800f696:	4619      	mov	r1, r3
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f69c:	461a      	mov	r2, r3
 800f69e:	88fb      	ldrh	r3, [r7, #6]
 800f6a0:	f7f5 fd78 	bl	8005194 <HAL_DMA_Start_IT>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d009      	beq.n	800f6be <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2210      	movs	r2, #16
 800f6ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2220      	movs	r2, #32
 800f6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	e051      	b.n	800f762 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	691b      	ldr	r3, [r3, #16]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d018      	beq.n	800f6f8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ce:	e853 3f00 	ldrex	r3, [r3]
 800f6d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f6da:	657b      	str	r3, [r7, #84]	; 0x54
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6e6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6ec:	e841 2300 	strex	r3, r2, [r1]
 800f6f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d1e6      	bne.n	800f6c6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	3308      	adds	r3, #8
 800f6fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f702:	e853 3f00 	ldrex	r3, [r3]
 800f706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70a:	f043 0301 	orr.w	r3, r3, #1
 800f70e:	653b      	str	r3, [r7, #80]	; 0x50
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	3308      	adds	r3, #8
 800f716:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f718:	637a      	str	r2, [r7, #52]	; 0x34
 800f71a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f71c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f71e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f720:	e841 2300 	strex	r3, r2, [r1]
 800f724:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1e5      	bne.n	800f6f8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	3308      	adds	r3, #8
 800f732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	e853 3f00 	ldrex	r3, [r3]
 800f73a:	613b      	str	r3, [r7, #16]
   return(result);
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f742:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	3308      	adds	r3, #8
 800f74a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f74c:	623a      	str	r2, [r7, #32]
 800f74e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f750:	69f9      	ldr	r1, [r7, #28]
 800f752:	6a3a      	ldr	r2, [r7, #32]
 800f754:	e841 2300 	strex	r3, r2, [r1]
 800f758:	61bb      	str	r3, [r7, #24]
   return(result);
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d1e5      	bne.n	800f72c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f760:	2300      	movs	r3, #0
}
 800f762:	4618      	mov	r0, r3
 800f764:	3758      	adds	r7, #88	; 0x58
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	0800f8c9 	.word	0x0800f8c9
 800f770:	0800f9f1 	.word	0x0800f9f1
 800f774:	0800fa2f 	.word	0x0800fa2f

0800f778 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f778:	b480      	push	{r7}
 800f77a:	b08f      	sub	sp, #60	; 0x3c
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f786:	6a3b      	ldr	r3, [r7, #32]
 800f788:	e853 3f00 	ldrex	r3, [r3]
 800f78c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f794:	637b      	str	r3, [r7, #52]	; 0x34
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	461a      	mov	r2, r3
 800f79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f79e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7a0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7a6:	e841 2300 	strex	r3, r2, [r1]
 800f7aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d1e6      	bne.n	800f780 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	3308      	adds	r3, #8
 800f7b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	e853 3f00 	ldrex	r3, [r3]
 800f7c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f7c8:	633b      	str	r3, [r7, #48]	; 0x30
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	3308      	adds	r3, #8
 800f7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7d2:	61ba      	str	r2, [r7, #24]
 800f7d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d6:	6979      	ldr	r1, [r7, #20]
 800f7d8:	69ba      	ldr	r2, [r7, #24]
 800f7da:	e841 2300 	strex	r3, r2, [r1]
 800f7de:	613b      	str	r3, [r7, #16]
   return(result);
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1e5      	bne.n	800f7b2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2220      	movs	r2, #32
 800f7ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f7ee:	bf00      	nop
 800f7f0:	373c      	adds	r7, #60	; 0x3c
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr
	...

0800f7fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b095      	sub	sp, #84	; 0x54
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f80c:	e853 3f00 	ldrex	r3, [r3]
 800f810:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f818:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	461a      	mov	r2, r3
 800f820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f822:	643b      	str	r3, [r7, #64]	; 0x40
 800f824:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f82a:	e841 2300 	strex	r3, r2, [r1]
 800f82e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1e6      	bne.n	800f804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	3308      	adds	r3, #8
 800f83c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f83e:	6a3b      	ldr	r3, [r7, #32]
 800f840:	e853 3f00 	ldrex	r3, [r3]
 800f844:	61fb      	str	r3, [r7, #28]
   return(result);
 800f846:	69fa      	ldr	r2, [r7, #28]
 800f848:	4b1e      	ldr	r3, [pc, #120]	; (800f8c4 <UART_EndRxTransfer+0xc8>)
 800f84a:	4013      	ands	r3, r2
 800f84c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	3308      	adds	r3, #8
 800f854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f856:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f85a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f85e:	e841 2300 	strex	r3, r2, [r1]
 800f862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f866:	2b00      	cmp	r3, #0
 800f868:	d1e5      	bne.n	800f836 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d118      	bne.n	800f8a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	e853 3f00 	ldrex	r3, [r3]
 800f87e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	f023 0310 	bic.w	r3, r3, #16
 800f886:	647b      	str	r3, [r7, #68]	; 0x44
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	461a      	mov	r2, r3
 800f88e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f890:	61bb      	str	r3, [r7, #24]
 800f892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f894:	6979      	ldr	r1, [r7, #20]
 800f896:	69ba      	ldr	r2, [r7, #24]
 800f898:	e841 2300 	strex	r3, r2, [r1]
 800f89c:	613b      	str	r3, [r7, #16]
   return(result);
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d1e6      	bne.n	800f872 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2220      	movs	r2, #32
 800f8a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f8b8:	bf00      	nop
 800f8ba:	3754      	adds	r7, #84	; 0x54
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr
 800f8c4:	effffffe 	.word	0xeffffffe

0800f8c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b09c      	sub	sp, #112	; 0x70
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8d4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	69db      	ldr	r3, [r3, #28]
 800f8da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8de:	d071      	beq.n	800f9c4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f8e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8f0:	e853 3f00 	ldrex	r3, [r3]
 800f8f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f8f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8fc:	66bb      	str	r3, [r7, #104]	; 0x68
 800f8fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	461a      	mov	r2, r3
 800f904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f906:	65bb      	str	r3, [r7, #88]	; 0x58
 800f908:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f90a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f90c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f90e:	e841 2300 	strex	r3, r2, [r1]
 800f912:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f916:	2b00      	cmp	r3, #0
 800f918:	d1e6      	bne.n	800f8e8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	3308      	adds	r3, #8
 800f920:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f924:	e853 3f00 	ldrex	r3, [r3]
 800f928:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f92c:	f023 0301 	bic.w	r3, r3, #1
 800f930:	667b      	str	r3, [r7, #100]	; 0x64
 800f932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	3308      	adds	r3, #8
 800f938:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f93a:	647a      	str	r2, [r7, #68]	; 0x44
 800f93c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f93e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f942:	e841 2300 	strex	r3, r2, [r1]
 800f946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1e5      	bne.n	800f91a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f94e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	3308      	adds	r3, #8
 800f954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f958:	e853 3f00 	ldrex	r3, [r3]
 800f95c:	623b      	str	r3, [r7, #32]
   return(result);
 800f95e:	6a3b      	ldr	r3, [r7, #32]
 800f960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f964:	663b      	str	r3, [r7, #96]	; 0x60
 800f966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	3308      	adds	r3, #8
 800f96c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f96e:	633a      	str	r2, [r7, #48]	; 0x30
 800f970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f976:	e841 2300 	strex	r3, r2, [r1]
 800f97a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1e5      	bne.n	800f94e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f984:	2220      	movs	r2, #32
 800f986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f98a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f98c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d118      	bne.n	800f9c4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	e853 3f00 	ldrex	r3, [r3]
 800f99e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f023 0310 	bic.w	r3, r3, #16
 800f9a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f9a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9b0:	61fb      	str	r3, [r7, #28]
 800f9b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b4:	69b9      	ldr	r1, [r7, #24]
 800f9b6:	69fa      	ldr	r2, [r7, #28]
 800f9b8:	e841 2300 	strex	r3, r2, [r1]
 800f9bc:	617b      	str	r3, [r7, #20]
   return(result);
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d1e6      	bne.n	800f992 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f9c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d107      	bne.n	800f9e2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f9d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9d8:	4619      	mov	r1, r3
 800f9da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f9dc:	f7fe fefe 	bl	800e7dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f9e0:	e002      	b.n	800f9e8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f9e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f9e4:	f7f1 fd40 	bl	8001468 <HAL_UART_RxCpltCallback>
}
 800f9e8:	bf00      	nop
 800f9ea:	3770      	adds	r7, #112	; 0x70
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2201      	movs	r2, #1
 800fa02:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d109      	bne.n	800fa20 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa12:	085b      	lsrs	r3, r3, #1
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	4619      	mov	r1, r3
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	f7fe fedf 	bl	800e7dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa1e:	e002      	b.n	800fa26 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f7fe fed1 	bl	800e7c8 <HAL_UART_RxHalfCpltCallback>
}
 800fa26:	bf00      	nop
 800fa28:	3710      	adds	r7, #16
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}

0800fa2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b086      	sub	sp, #24
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa56:	2b80      	cmp	r3, #128	; 0x80
 800fa58:	d109      	bne.n	800fa6e <UART_DMAError+0x40>
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	2b21      	cmp	r3, #33	; 0x21
 800fa5e:	d106      	bne.n	800fa6e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fa68:	6978      	ldr	r0, [r7, #20]
 800fa6a:	f7ff fe85 	bl	800f778 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	689b      	ldr	r3, [r3, #8]
 800fa74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa78:	2b40      	cmp	r3, #64	; 0x40
 800fa7a:	d109      	bne.n	800fa90 <UART_DMAError+0x62>
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2b22      	cmp	r3, #34	; 0x22
 800fa80:	d106      	bne.n	800fa90 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	2200      	movs	r2, #0
 800fa86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fa8a:	6978      	ldr	r0, [r7, #20]
 800fa8c:	f7ff feb6 	bl	800f7fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa96:	f043 0210 	orr.w	r2, r3, #16
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800faa0:	6978      	ldr	r0, [r7, #20]
 800faa2:	f7f1 fd83 	bl	80015ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800faa6:	bf00      	nop
 800faa8:	3718      	adds	r7, #24
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800faae:	b580      	push	{r7, lr}
 800fab0:	b084      	sub	sp, #16
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2200      	movs	r2, #0
 800fac0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	f7f1 fd6d 	bl	80015ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fad2:	bf00      	nop
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}

0800fada <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fada:	b580      	push	{r7, lr}
 800fadc:	b088      	sub	sp, #32
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	e853 3f00 	ldrex	r3, [r3]
 800faee:	60bb      	str	r3, [r7, #8]
   return(result);
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faf6:	61fb      	str	r3, [r7, #28]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	461a      	mov	r2, r3
 800fafe:	69fb      	ldr	r3, [r7, #28]
 800fb00:	61bb      	str	r3, [r7, #24]
 800fb02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb04:	6979      	ldr	r1, [r7, #20]
 800fb06:	69ba      	ldr	r2, [r7, #24]
 800fb08:	e841 2300 	strex	r3, r2, [r1]
 800fb0c:	613b      	str	r3, [r7, #16]
   return(result);
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1e6      	bne.n	800fae2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2220      	movs	r2, #32
 800fb18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7fe fe46 	bl	800e7b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb28:	bf00      	nop
 800fb2a:	3720      	adds	r7, #32
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb38:	bf00      	nop
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb4c:	bf00      	nop
 800fb4e:	370c      	adds	r7, #12
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr

0800fb58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb60:	bf00      	nop
 800fb62:	370c      	adds	r7, #12
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr

0800fb6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b085      	sub	sp, #20
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fb7a:	2b01      	cmp	r3, #1
 800fb7c:	d101      	bne.n	800fb82 <HAL_UARTEx_DisableFifoMode+0x16>
 800fb7e:	2302      	movs	r3, #2
 800fb80:	e027      	b.n	800fbd2 <HAL_UARTEx_DisableFifoMode+0x66>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2201      	movs	r2, #1
 800fb86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2224      	movs	r2, #36	; 0x24
 800fb8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	f022 0201 	bic.w	r2, r2, #1
 800fba8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fbb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2220      	movs	r2, #32
 800fbc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fbd0:	2300      	movs	r3, #0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3714      	adds	r7, #20
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbdc:	4770      	bx	lr

0800fbde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b084      	sub	sp, #16
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
 800fbe6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d101      	bne.n	800fbf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fbf2:	2302      	movs	r3, #2
 800fbf4:	e02d      	b.n	800fc52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2224      	movs	r2, #36	; 0x24
 800fc02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	681a      	ldr	r2, [r3, #0]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f022 0201 	bic.w	r2, r2, #1
 800fc1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	689b      	ldr	r3, [r3, #8]
 800fc24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	683a      	ldr	r2, [r7, #0]
 800fc2e:	430a      	orrs	r2, r1
 800fc30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 f850 	bl	800fcd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	68fa      	ldr	r2, [r7, #12]
 800fc3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2220      	movs	r2, #32
 800fc44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fc50:	2300      	movs	r3, #0
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b084      	sub	sp, #16
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
 800fc62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	d101      	bne.n	800fc72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc6e:	2302      	movs	r3, #2
 800fc70:	e02d      	b.n	800fcce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2201      	movs	r2, #1
 800fc76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2224      	movs	r2, #36	; 0x24
 800fc7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f022 0201 	bic.w	r2, r2, #1
 800fc98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	683a      	ldr	r2, [r7, #0]
 800fcaa:	430a      	orrs	r2, r1
 800fcac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f000 f812 	bl	800fcd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2220      	movs	r2, #32
 800fcc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fccc:	2300      	movs	r3, #0
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3710      	adds	r7, #16
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
	...

0800fcd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b085      	sub	sp, #20
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d108      	bne.n	800fcfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2201      	movs	r2, #1
 800fcec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fcf8:	e031      	b.n	800fd5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fcfa:	2310      	movs	r3, #16
 800fcfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fcfe:	2310      	movs	r3, #16
 800fd00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	0e5b      	lsrs	r3, r3, #25
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	f003 0307 	and.w	r3, r3, #7
 800fd10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	689b      	ldr	r3, [r3, #8]
 800fd18:	0f5b      	lsrs	r3, r3, #29
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	f003 0307 	and.w	r3, r3, #7
 800fd20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd22:	7bbb      	ldrb	r3, [r7, #14]
 800fd24:	7b3a      	ldrb	r2, [r7, #12]
 800fd26:	4911      	ldr	r1, [pc, #68]	; (800fd6c <UARTEx_SetNbDataToProcess+0x94>)
 800fd28:	5c8a      	ldrb	r2, [r1, r2]
 800fd2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd2e:	7b3a      	ldrb	r2, [r7, #12]
 800fd30:	490f      	ldr	r1, [pc, #60]	; (800fd70 <UARTEx_SetNbDataToProcess+0x98>)
 800fd32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd34:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd40:	7bfb      	ldrb	r3, [r7, #15]
 800fd42:	7b7a      	ldrb	r2, [r7, #13]
 800fd44:	4909      	ldr	r1, [pc, #36]	; (800fd6c <UARTEx_SetNbDataToProcess+0x94>)
 800fd46:	5c8a      	ldrb	r2, [r1, r2]
 800fd48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd4c:	7b7a      	ldrb	r2, [r7, #13]
 800fd4e:	4908      	ldr	r1, [pc, #32]	; (800fd70 <UARTEx_SetNbDataToProcess+0x98>)
 800fd50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd52:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fd5e:	bf00      	nop
 800fd60:	3714      	adds	r7, #20
 800fd62:	46bd      	mov	sp, r7
 800fd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop
 800fd6c:	08012b10 	.word	0x08012b10
 800fd70:	08012b18 	.word	0x08012b18

0800fd74 <__cvt>:
 800fd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd76:	ed2d 8b02 	vpush	{d8}
 800fd7a:	eeb0 8b40 	vmov.f64	d8, d0
 800fd7e:	b085      	sub	sp, #20
 800fd80:	4617      	mov	r7, r2
 800fd82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fd84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fd86:	ee18 2a90 	vmov	r2, s17
 800fd8a:	f025 0520 	bic.w	r5, r5, #32
 800fd8e:	2a00      	cmp	r2, #0
 800fd90:	bfb6      	itet	lt
 800fd92:	222d      	movlt	r2, #45	; 0x2d
 800fd94:	2200      	movge	r2, #0
 800fd96:	eeb1 8b40 	vneglt.f64	d8, d0
 800fd9a:	2d46      	cmp	r5, #70	; 0x46
 800fd9c:	460c      	mov	r4, r1
 800fd9e:	701a      	strb	r2, [r3, #0]
 800fda0:	d004      	beq.n	800fdac <__cvt+0x38>
 800fda2:	2d45      	cmp	r5, #69	; 0x45
 800fda4:	d100      	bne.n	800fda8 <__cvt+0x34>
 800fda6:	3401      	adds	r4, #1
 800fda8:	2102      	movs	r1, #2
 800fdaa:	e000      	b.n	800fdae <__cvt+0x3a>
 800fdac:	2103      	movs	r1, #3
 800fdae:	ab03      	add	r3, sp, #12
 800fdb0:	9301      	str	r3, [sp, #4]
 800fdb2:	ab02      	add	r3, sp, #8
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	4622      	mov	r2, r4
 800fdb8:	4633      	mov	r3, r6
 800fdba:	eeb0 0b48 	vmov.f64	d0, d8
 800fdbe:	f000 fe53 	bl	8010a68 <_dtoa_r>
 800fdc2:	2d47      	cmp	r5, #71	; 0x47
 800fdc4:	d101      	bne.n	800fdca <__cvt+0x56>
 800fdc6:	07fb      	lsls	r3, r7, #31
 800fdc8:	d51a      	bpl.n	800fe00 <__cvt+0x8c>
 800fdca:	2d46      	cmp	r5, #70	; 0x46
 800fdcc:	eb00 0204 	add.w	r2, r0, r4
 800fdd0:	d10c      	bne.n	800fdec <__cvt+0x78>
 800fdd2:	7803      	ldrb	r3, [r0, #0]
 800fdd4:	2b30      	cmp	r3, #48	; 0x30
 800fdd6:	d107      	bne.n	800fde8 <__cvt+0x74>
 800fdd8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fde0:	bf1c      	itt	ne
 800fde2:	f1c4 0401 	rsbne	r4, r4, #1
 800fde6:	6034      	strne	r4, [r6, #0]
 800fde8:	6833      	ldr	r3, [r6, #0]
 800fdea:	441a      	add	r2, r3
 800fdec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fdf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf4:	bf08      	it	eq
 800fdf6:	9203      	streq	r2, [sp, #12]
 800fdf8:	2130      	movs	r1, #48	; 0x30
 800fdfa:	9b03      	ldr	r3, [sp, #12]
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d307      	bcc.n	800fe10 <__cvt+0x9c>
 800fe00:	9b03      	ldr	r3, [sp, #12]
 800fe02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe04:	1a1b      	subs	r3, r3, r0
 800fe06:	6013      	str	r3, [r2, #0]
 800fe08:	b005      	add	sp, #20
 800fe0a:	ecbd 8b02 	vpop	{d8}
 800fe0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe10:	1c5c      	adds	r4, r3, #1
 800fe12:	9403      	str	r4, [sp, #12]
 800fe14:	7019      	strb	r1, [r3, #0]
 800fe16:	e7f0      	b.n	800fdfa <__cvt+0x86>

0800fe18 <__exponent>:
 800fe18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2900      	cmp	r1, #0
 800fe1e:	bfb8      	it	lt
 800fe20:	4249      	neglt	r1, r1
 800fe22:	f803 2b02 	strb.w	r2, [r3], #2
 800fe26:	bfb4      	ite	lt
 800fe28:	222d      	movlt	r2, #45	; 0x2d
 800fe2a:	222b      	movge	r2, #43	; 0x2b
 800fe2c:	2909      	cmp	r1, #9
 800fe2e:	7042      	strb	r2, [r0, #1]
 800fe30:	dd2a      	ble.n	800fe88 <__exponent+0x70>
 800fe32:	f10d 0207 	add.w	r2, sp, #7
 800fe36:	4617      	mov	r7, r2
 800fe38:	260a      	movs	r6, #10
 800fe3a:	4694      	mov	ip, r2
 800fe3c:	fb91 f5f6 	sdiv	r5, r1, r6
 800fe40:	fb06 1415 	mls	r4, r6, r5, r1
 800fe44:	3430      	adds	r4, #48	; 0x30
 800fe46:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800fe4a:	460c      	mov	r4, r1
 800fe4c:	2c63      	cmp	r4, #99	; 0x63
 800fe4e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800fe52:	4629      	mov	r1, r5
 800fe54:	dcf1      	bgt.n	800fe3a <__exponent+0x22>
 800fe56:	3130      	adds	r1, #48	; 0x30
 800fe58:	f1ac 0402 	sub.w	r4, ip, #2
 800fe5c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fe60:	1c41      	adds	r1, r0, #1
 800fe62:	4622      	mov	r2, r4
 800fe64:	42ba      	cmp	r2, r7
 800fe66:	d30a      	bcc.n	800fe7e <__exponent+0x66>
 800fe68:	f10d 0209 	add.w	r2, sp, #9
 800fe6c:	eba2 020c 	sub.w	r2, r2, ip
 800fe70:	42bc      	cmp	r4, r7
 800fe72:	bf88      	it	hi
 800fe74:	2200      	movhi	r2, #0
 800fe76:	4413      	add	r3, r2
 800fe78:	1a18      	subs	r0, r3, r0
 800fe7a:	b003      	add	sp, #12
 800fe7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe7e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fe82:	f801 5f01 	strb.w	r5, [r1, #1]!
 800fe86:	e7ed      	b.n	800fe64 <__exponent+0x4c>
 800fe88:	2330      	movs	r3, #48	; 0x30
 800fe8a:	3130      	adds	r1, #48	; 0x30
 800fe8c:	7083      	strb	r3, [r0, #2]
 800fe8e:	70c1      	strb	r1, [r0, #3]
 800fe90:	1d03      	adds	r3, r0, #4
 800fe92:	e7f1      	b.n	800fe78 <__exponent+0x60>
 800fe94:	0000      	movs	r0, r0
	...

0800fe98 <_printf_float>:
 800fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9c:	b08b      	sub	sp, #44	; 0x2c
 800fe9e:	460c      	mov	r4, r1
 800fea0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fea4:	4616      	mov	r6, r2
 800fea6:	461f      	mov	r7, r3
 800fea8:	4605      	mov	r5, r0
 800feaa:	f000 fccd 	bl	8010848 <_localeconv_r>
 800feae:	f8d0 b000 	ldr.w	fp, [r0]
 800feb2:	4658      	mov	r0, fp
 800feb4:	f7f0 fa64 	bl	8000380 <strlen>
 800feb8:	2300      	movs	r3, #0
 800feba:	9308      	str	r3, [sp, #32]
 800febc:	f8d8 3000 	ldr.w	r3, [r8]
 800fec0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fec4:	6822      	ldr	r2, [r4, #0]
 800fec6:	3307      	adds	r3, #7
 800fec8:	f023 0307 	bic.w	r3, r3, #7
 800fecc:	f103 0108 	add.w	r1, r3, #8
 800fed0:	f8c8 1000 	str.w	r1, [r8]
 800fed4:	ed93 0b00 	vldr	d0, [r3]
 800fed8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8010138 <_printf_float+0x2a0>
 800fedc:	eeb0 7bc0 	vabs.f64	d7, d0
 800fee0:	eeb4 7b46 	vcmp.f64	d7, d6
 800fee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800feec:	4682      	mov	sl, r0
 800feee:	dd24      	ble.n	800ff3a <_printf_float+0xa2>
 800fef0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef8:	d502      	bpl.n	800ff00 <_printf_float+0x68>
 800fefa:	232d      	movs	r3, #45	; 0x2d
 800fefc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff00:	498f      	ldr	r1, [pc, #572]	; (8010140 <_printf_float+0x2a8>)
 800ff02:	4b90      	ldr	r3, [pc, #576]	; (8010144 <_printf_float+0x2ac>)
 800ff04:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ff08:	bf94      	ite	ls
 800ff0a:	4688      	movls	r8, r1
 800ff0c:	4698      	movhi	r8, r3
 800ff0e:	2303      	movs	r3, #3
 800ff10:	6123      	str	r3, [r4, #16]
 800ff12:	f022 0204 	bic.w	r2, r2, #4
 800ff16:	2300      	movs	r3, #0
 800ff18:	6022      	str	r2, [r4, #0]
 800ff1a:	9304      	str	r3, [sp, #16]
 800ff1c:	9700      	str	r7, [sp, #0]
 800ff1e:	4633      	mov	r3, r6
 800ff20:	aa09      	add	r2, sp, #36	; 0x24
 800ff22:	4621      	mov	r1, r4
 800ff24:	4628      	mov	r0, r5
 800ff26:	f000 f9d1 	bl	80102cc <_printf_common>
 800ff2a:	3001      	adds	r0, #1
 800ff2c:	f040 808a 	bne.w	8010044 <_printf_float+0x1ac>
 800ff30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff34:	b00b      	add	sp, #44	; 0x2c
 800ff36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ff3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff42:	d709      	bvc.n	800ff58 <_printf_float+0xc0>
 800ff44:	ee10 3a90 	vmov	r3, s1
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	bfbc      	itt	lt
 800ff4c:	232d      	movlt	r3, #45	; 0x2d
 800ff4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ff52:	497d      	ldr	r1, [pc, #500]	; (8010148 <_printf_float+0x2b0>)
 800ff54:	4b7d      	ldr	r3, [pc, #500]	; (801014c <_printf_float+0x2b4>)
 800ff56:	e7d5      	b.n	800ff04 <_printf_float+0x6c>
 800ff58:	6863      	ldr	r3, [r4, #4]
 800ff5a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ff5e:	9104      	str	r1, [sp, #16]
 800ff60:	1c59      	adds	r1, r3, #1
 800ff62:	d13c      	bne.n	800ffde <_printf_float+0x146>
 800ff64:	2306      	movs	r3, #6
 800ff66:	6063      	str	r3, [r4, #4]
 800ff68:	2300      	movs	r3, #0
 800ff6a:	9303      	str	r3, [sp, #12]
 800ff6c:	ab08      	add	r3, sp, #32
 800ff6e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ff72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ff76:	ab07      	add	r3, sp, #28
 800ff78:	6861      	ldr	r1, [r4, #4]
 800ff7a:	9300      	str	r3, [sp, #0]
 800ff7c:	6022      	str	r2, [r4, #0]
 800ff7e:	f10d 031b 	add.w	r3, sp, #27
 800ff82:	4628      	mov	r0, r5
 800ff84:	f7ff fef6 	bl	800fd74 <__cvt>
 800ff88:	9b04      	ldr	r3, [sp, #16]
 800ff8a:	9907      	ldr	r1, [sp, #28]
 800ff8c:	2b47      	cmp	r3, #71	; 0x47
 800ff8e:	4680      	mov	r8, r0
 800ff90:	d108      	bne.n	800ffa4 <_printf_float+0x10c>
 800ff92:	1cc8      	adds	r0, r1, #3
 800ff94:	db02      	blt.n	800ff9c <_printf_float+0x104>
 800ff96:	6863      	ldr	r3, [r4, #4]
 800ff98:	4299      	cmp	r1, r3
 800ff9a:	dd41      	ble.n	8010020 <_printf_float+0x188>
 800ff9c:	f1a9 0902 	sub.w	r9, r9, #2
 800ffa0:	fa5f f989 	uxtb.w	r9, r9
 800ffa4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ffa8:	d820      	bhi.n	800ffec <_printf_float+0x154>
 800ffaa:	3901      	subs	r1, #1
 800ffac:	464a      	mov	r2, r9
 800ffae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ffb2:	9107      	str	r1, [sp, #28]
 800ffb4:	f7ff ff30 	bl	800fe18 <__exponent>
 800ffb8:	9a08      	ldr	r2, [sp, #32]
 800ffba:	9004      	str	r0, [sp, #16]
 800ffbc:	1813      	adds	r3, r2, r0
 800ffbe:	2a01      	cmp	r2, #1
 800ffc0:	6123      	str	r3, [r4, #16]
 800ffc2:	dc02      	bgt.n	800ffca <_printf_float+0x132>
 800ffc4:	6822      	ldr	r2, [r4, #0]
 800ffc6:	07d2      	lsls	r2, r2, #31
 800ffc8:	d501      	bpl.n	800ffce <_printf_float+0x136>
 800ffca:	3301      	adds	r3, #1
 800ffcc:	6123      	str	r3, [r4, #16]
 800ffce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d0a2      	beq.n	800ff1c <_printf_float+0x84>
 800ffd6:	232d      	movs	r3, #45	; 0x2d
 800ffd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffdc:	e79e      	b.n	800ff1c <_printf_float+0x84>
 800ffde:	9904      	ldr	r1, [sp, #16]
 800ffe0:	2947      	cmp	r1, #71	; 0x47
 800ffe2:	d1c1      	bne.n	800ff68 <_printf_float+0xd0>
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d1bf      	bne.n	800ff68 <_printf_float+0xd0>
 800ffe8:	2301      	movs	r3, #1
 800ffea:	e7bc      	b.n	800ff66 <_printf_float+0xce>
 800ffec:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fff0:	d118      	bne.n	8010024 <_printf_float+0x18c>
 800fff2:	2900      	cmp	r1, #0
 800fff4:	6863      	ldr	r3, [r4, #4]
 800fff6:	dd0b      	ble.n	8010010 <_printf_float+0x178>
 800fff8:	6121      	str	r1, [r4, #16]
 800fffa:	b913      	cbnz	r3, 8010002 <_printf_float+0x16a>
 800fffc:	6822      	ldr	r2, [r4, #0]
 800fffe:	07d0      	lsls	r0, r2, #31
 8010000:	d502      	bpl.n	8010008 <_printf_float+0x170>
 8010002:	3301      	adds	r3, #1
 8010004:	440b      	add	r3, r1
 8010006:	6123      	str	r3, [r4, #16]
 8010008:	2300      	movs	r3, #0
 801000a:	65a1      	str	r1, [r4, #88]	; 0x58
 801000c:	9304      	str	r3, [sp, #16]
 801000e:	e7de      	b.n	800ffce <_printf_float+0x136>
 8010010:	b913      	cbnz	r3, 8010018 <_printf_float+0x180>
 8010012:	6822      	ldr	r2, [r4, #0]
 8010014:	07d2      	lsls	r2, r2, #31
 8010016:	d501      	bpl.n	801001c <_printf_float+0x184>
 8010018:	3302      	adds	r3, #2
 801001a:	e7f4      	b.n	8010006 <_printf_float+0x16e>
 801001c:	2301      	movs	r3, #1
 801001e:	e7f2      	b.n	8010006 <_printf_float+0x16e>
 8010020:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010024:	9b08      	ldr	r3, [sp, #32]
 8010026:	4299      	cmp	r1, r3
 8010028:	db05      	blt.n	8010036 <_printf_float+0x19e>
 801002a:	6823      	ldr	r3, [r4, #0]
 801002c:	6121      	str	r1, [r4, #16]
 801002e:	07d8      	lsls	r0, r3, #31
 8010030:	d5ea      	bpl.n	8010008 <_printf_float+0x170>
 8010032:	1c4b      	adds	r3, r1, #1
 8010034:	e7e7      	b.n	8010006 <_printf_float+0x16e>
 8010036:	2900      	cmp	r1, #0
 8010038:	bfd4      	ite	le
 801003a:	f1c1 0202 	rsble	r2, r1, #2
 801003e:	2201      	movgt	r2, #1
 8010040:	4413      	add	r3, r2
 8010042:	e7e0      	b.n	8010006 <_printf_float+0x16e>
 8010044:	6823      	ldr	r3, [r4, #0]
 8010046:	055a      	lsls	r2, r3, #21
 8010048:	d407      	bmi.n	801005a <_printf_float+0x1c2>
 801004a:	6923      	ldr	r3, [r4, #16]
 801004c:	4642      	mov	r2, r8
 801004e:	4631      	mov	r1, r6
 8010050:	4628      	mov	r0, r5
 8010052:	47b8      	blx	r7
 8010054:	3001      	adds	r0, #1
 8010056:	d12a      	bne.n	80100ae <_printf_float+0x216>
 8010058:	e76a      	b.n	800ff30 <_printf_float+0x98>
 801005a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801005e:	f240 80e0 	bls.w	8010222 <_printf_float+0x38a>
 8010062:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010066:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801006a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801006e:	d133      	bne.n	80100d8 <_printf_float+0x240>
 8010070:	4a37      	ldr	r2, [pc, #220]	; (8010150 <_printf_float+0x2b8>)
 8010072:	2301      	movs	r3, #1
 8010074:	4631      	mov	r1, r6
 8010076:	4628      	mov	r0, r5
 8010078:	47b8      	blx	r7
 801007a:	3001      	adds	r0, #1
 801007c:	f43f af58 	beq.w	800ff30 <_printf_float+0x98>
 8010080:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010084:	429a      	cmp	r2, r3
 8010086:	db02      	blt.n	801008e <_printf_float+0x1f6>
 8010088:	6823      	ldr	r3, [r4, #0]
 801008a:	07d8      	lsls	r0, r3, #31
 801008c:	d50f      	bpl.n	80100ae <_printf_float+0x216>
 801008e:	4653      	mov	r3, sl
 8010090:	465a      	mov	r2, fp
 8010092:	4631      	mov	r1, r6
 8010094:	4628      	mov	r0, r5
 8010096:	47b8      	blx	r7
 8010098:	3001      	adds	r0, #1
 801009a:	f43f af49 	beq.w	800ff30 <_printf_float+0x98>
 801009e:	f04f 0800 	mov.w	r8, #0
 80100a2:	f104 091a 	add.w	r9, r4, #26
 80100a6:	9b08      	ldr	r3, [sp, #32]
 80100a8:	3b01      	subs	r3, #1
 80100aa:	4543      	cmp	r3, r8
 80100ac:	dc09      	bgt.n	80100c2 <_printf_float+0x22a>
 80100ae:	6823      	ldr	r3, [r4, #0]
 80100b0:	079b      	lsls	r3, r3, #30
 80100b2:	f100 8106 	bmi.w	80102c2 <_printf_float+0x42a>
 80100b6:	68e0      	ldr	r0, [r4, #12]
 80100b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100ba:	4298      	cmp	r0, r3
 80100bc:	bfb8      	it	lt
 80100be:	4618      	movlt	r0, r3
 80100c0:	e738      	b.n	800ff34 <_printf_float+0x9c>
 80100c2:	2301      	movs	r3, #1
 80100c4:	464a      	mov	r2, r9
 80100c6:	4631      	mov	r1, r6
 80100c8:	4628      	mov	r0, r5
 80100ca:	47b8      	blx	r7
 80100cc:	3001      	adds	r0, #1
 80100ce:	f43f af2f 	beq.w	800ff30 <_printf_float+0x98>
 80100d2:	f108 0801 	add.w	r8, r8, #1
 80100d6:	e7e6      	b.n	80100a6 <_printf_float+0x20e>
 80100d8:	9b07      	ldr	r3, [sp, #28]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	dc3a      	bgt.n	8010154 <_printf_float+0x2bc>
 80100de:	4a1c      	ldr	r2, [pc, #112]	; (8010150 <_printf_float+0x2b8>)
 80100e0:	2301      	movs	r3, #1
 80100e2:	4631      	mov	r1, r6
 80100e4:	4628      	mov	r0, r5
 80100e6:	47b8      	blx	r7
 80100e8:	3001      	adds	r0, #1
 80100ea:	f43f af21 	beq.w	800ff30 <_printf_float+0x98>
 80100ee:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80100f2:	4313      	orrs	r3, r2
 80100f4:	d102      	bne.n	80100fc <_printf_float+0x264>
 80100f6:	6823      	ldr	r3, [r4, #0]
 80100f8:	07d9      	lsls	r1, r3, #31
 80100fa:	d5d8      	bpl.n	80100ae <_printf_float+0x216>
 80100fc:	4653      	mov	r3, sl
 80100fe:	465a      	mov	r2, fp
 8010100:	4631      	mov	r1, r6
 8010102:	4628      	mov	r0, r5
 8010104:	47b8      	blx	r7
 8010106:	3001      	adds	r0, #1
 8010108:	f43f af12 	beq.w	800ff30 <_printf_float+0x98>
 801010c:	f04f 0900 	mov.w	r9, #0
 8010110:	f104 0a1a 	add.w	sl, r4, #26
 8010114:	9b07      	ldr	r3, [sp, #28]
 8010116:	425b      	negs	r3, r3
 8010118:	454b      	cmp	r3, r9
 801011a:	dc01      	bgt.n	8010120 <_printf_float+0x288>
 801011c:	9b08      	ldr	r3, [sp, #32]
 801011e:	e795      	b.n	801004c <_printf_float+0x1b4>
 8010120:	2301      	movs	r3, #1
 8010122:	4652      	mov	r2, sl
 8010124:	4631      	mov	r1, r6
 8010126:	4628      	mov	r0, r5
 8010128:	47b8      	blx	r7
 801012a:	3001      	adds	r0, #1
 801012c:	f43f af00 	beq.w	800ff30 <_printf_float+0x98>
 8010130:	f109 0901 	add.w	r9, r9, #1
 8010134:	e7ee      	b.n	8010114 <_printf_float+0x27c>
 8010136:	bf00      	nop
 8010138:	ffffffff 	.word	0xffffffff
 801013c:	7fefffff 	.word	0x7fefffff
 8010140:	08012b20 	.word	0x08012b20
 8010144:	08012b24 	.word	0x08012b24
 8010148:	08012b28 	.word	0x08012b28
 801014c:	08012b2c 	.word	0x08012b2c
 8010150:	08012b30 	.word	0x08012b30
 8010154:	9a08      	ldr	r2, [sp, #32]
 8010156:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010158:	429a      	cmp	r2, r3
 801015a:	bfa8      	it	ge
 801015c:	461a      	movge	r2, r3
 801015e:	2a00      	cmp	r2, #0
 8010160:	4691      	mov	r9, r2
 8010162:	dc38      	bgt.n	80101d6 <_printf_float+0x33e>
 8010164:	2300      	movs	r3, #0
 8010166:	9305      	str	r3, [sp, #20]
 8010168:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801016c:	f104 021a 	add.w	r2, r4, #26
 8010170:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010172:	9905      	ldr	r1, [sp, #20]
 8010174:	9304      	str	r3, [sp, #16]
 8010176:	eba3 0309 	sub.w	r3, r3, r9
 801017a:	428b      	cmp	r3, r1
 801017c:	dc33      	bgt.n	80101e6 <_printf_float+0x34e>
 801017e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010182:	429a      	cmp	r2, r3
 8010184:	db3c      	blt.n	8010200 <_printf_float+0x368>
 8010186:	6823      	ldr	r3, [r4, #0]
 8010188:	07da      	lsls	r2, r3, #31
 801018a:	d439      	bmi.n	8010200 <_printf_float+0x368>
 801018c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010190:	eba2 0903 	sub.w	r9, r2, r3
 8010194:	9b04      	ldr	r3, [sp, #16]
 8010196:	1ad2      	subs	r2, r2, r3
 8010198:	4591      	cmp	r9, r2
 801019a:	bfa8      	it	ge
 801019c:	4691      	movge	r9, r2
 801019e:	f1b9 0f00 	cmp.w	r9, #0
 80101a2:	dc35      	bgt.n	8010210 <_printf_float+0x378>
 80101a4:	f04f 0800 	mov.w	r8, #0
 80101a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80101ac:	f104 0a1a 	add.w	sl, r4, #26
 80101b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80101b4:	1a9b      	subs	r3, r3, r2
 80101b6:	eba3 0309 	sub.w	r3, r3, r9
 80101ba:	4543      	cmp	r3, r8
 80101bc:	f77f af77 	ble.w	80100ae <_printf_float+0x216>
 80101c0:	2301      	movs	r3, #1
 80101c2:	4652      	mov	r2, sl
 80101c4:	4631      	mov	r1, r6
 80101c6:	4628      	mov	r0, r5
 80101c8:	47b8      	blx	r7
 80101ca:	3001      	adds	r0, #1
 80101cc:	f43f aeb0 	beq.w	800ff30 <_printf_float+0x98>
 80101d0:	f108 0801 	add.w	r8, r8, #1
 80101d4:	e7ec      	b.n	80101b0 <_printf_float+0x318>
 80101d6:	4613      	mov	r3, r2
 80101d8:	4631      	mov	r1, r6
 80101da:	4642      	mov	r2, r8
 80101dc:	4628      	mov	r0, r5
 80101de:	47b8      	blx	r7
 80101e0:	3001      	adds	r0, #1
 80101e2:	d1bf      	bne.n	8010164 <_printf_float+0x2cc>
 80101e4:	e6a4      	b.n	800ff30 <_printf_float+0x98>
 80101e6:	2301      	movs	r3, #1
 80101e8:	4631      	mov	r1, r6
 80101ea:	4628      	mov	r0, r5
 80101ec:	9204      	str	r2, [sp, #16]
 80101ee:	47b8      	blx	r7
 80101f0:	3001      	adds	r0, #1
 80101f2:	f43f ae9d 	beq.w	800ff30 <_printf_float+0x98>
 80101f6:	9b05      	ldr	r3, [sp, #20]
 80101f8:	9a04      	ldr	r2, [sp, #16]
 80101fa:	3301      	adds	r3, #1
 80101fc:	9305      	str	r3, [sp, #20]
 80101fe:	e7b7      	b.n	8010170 <_printf_float+0x2d8>
 8010200:	4653      	mov	r3, sl
 8010202:	465a      	mov	r2, fp
 8010204:	4631      	mov	r1, r6
 8010206:	4628      	mov	r0, r5
 8010208:	47b8      	blx	r7
 801020a:	3001      	adds	r0, #1
 801020c:	d1be      	bne.n	801018c <_printf_float+0x2f4>
 801020e:	e68f      	b.n	800ff30 <_printf_float+0x98>
 8010210:	9a04      	ldr	r2, [sp, #16]
 8010212:	464b      	mov	r3, r9
 8010214:	4442      	add	r2, r8
 8010216:	4631      	mov	r1, r6
 8010218:	4628      	mov	r0, r5
 801021a:	47b8      	blx	r7
 801021c:	3001      	adds	r0, #1
 801021e:	d1c1      	bne.n	80101a4 <_printf_float+0x30c>
 8010220:	e686      	b.n	800ff30 <_printf_float+0x98>
 8010222:	9a08      	ldr	r2, [sp, #32]
 8010224:	2a01      	cmp	r2, #1
 8010226:	dc01      	bgt.n	801022c <_printf_float+0x394>
 8010228:	07db      	lsls	r3, r3, #31
 801022a:	d537      	bpl.n	801029c <_printf_float+0x404>
 801022c:	2301      	movs	r3, #1
 801022e:	4642      	mov	r2, r8
 8010230:	4631      	mov	r1, r6
 8010232:	4628      	mov	r0, r5
 8010234:	47b8      	blx	r7
 8010236:	3001      	adds	r0, #1
 8010238:	f43f ae7a 	beq.w	800ff30 <_printf_float+0x98>
 801023c:	4653      	mov	r3, sl
 801023e:	465a      	mov	r2, fp
 8010240:	4631      	mov	r1, r6
 8010242:	4628      	mov	r0, r5
 8010244:	47b8      	blx	r7
 8010246:	3001      	adds	r0, #1
 8010248:	f43f ae72 	beq.w	800ff30 <_printf_float+0x98>
 801024c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010250:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010258:	9b08      	ldr	r3, [sp, #32]
 801025a:	d01a      	beq.n	8010292 <_printf_float+0x3fa>
 801025c:	3b01      	subs	r3, #1
 801025e:	f108 0201 	add.w	r2, r8, #1
 8010262:	4631      	mov	r1, r6
 8010264:	4628      	mov	r0, r5
 8010266:	47b8      	blx	r7
 8010268:	3001      	adds	r0, #1
 801026a:	d10e      	bne.n	801028a <_printf_float+0x3f2>
 801026c:	e660      	b.n	800ff30 <_printf_float+0x98>
 801026e:	2301      	movs	r3, #1
 8010270:	464a      	mov	r2, r9
 8010272:	4631      	mov	r1, r6
 8010274:	4628      	mov	r0, r5
 8010276:	47b8      	blx	r7
 8010278:	3001      	adds	r0, #1
 801027a:	f43f ae59 	beq.w	800ff30 <_printf_float+0x98>
 801027e:	f108 0801 	add.w	r8, r8, #1
 8010282:	9b08      	ldr	r3, [sp, #32]
 8010284:	3b01      	subs	r3, #1
 8010286:	4543      	cmp	r3, r8
 8010288:	dcf1      	bgt.n	801026e <_printf_float+0x3d6>
 801028a:	9b04      	ldr	r3, [sp, #16]
 801028c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010290:	e6dd      	b.n	801004e <_printf_float+0x1b6>
 8010292:	f04f 0800 	mov.w	r8, #0
 8010296:	f104 091a 	add.w	r9, r4, #26
 801029a:	e7f2      	b.n	8010282 <_printf_float+0x3ea>
 801029c:	2301      	movs	r3, #1
 801029e:	4642      	mov	r2, r8
 80102a0:	e7df      	b.n	8010262 <_printf_float+0x3ca>
 80102a2:	2301      	movs	r3, #1
 80102a4:	464a      	mov	r2, r9
 80102a6:	4631      	mov	r1, r6
 80102a8:	4628      	mov	r0, r5
 80102aa:	47b8      	blx	r7
 80102ac:	3001      	adds	r0, #1
 80102ae:	f43f ae3f 	beq.w	800ff30 <_printf_float+0x98>
 80102b2:	f108 0801 	add.w	r8, r8, #1
 80102b6:	68e3      	ldr	r3, [r4, #12]
 80102b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102ba:	1a5b      	subs	r3, r3, r1
 80102bc:	4543      	cmp	r3, r8
 80102be:	dcf0      	bgt.n	80102a2 <_printf_float+0x40a>
 80102c0:	e6f9      	b.n	80100b6 <_printf_float+0x21e>
 80102c2:	f04f 0800 	mov.w	r8, #0
 80102c6:	f104 0919 	add.w	r9, r4, #25
 80102ca:	e7f4      	b.n	80102b6 <_printf_float+0x41e>

080102cc <_printf_common>:
 80102cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102d0:	4616      	mov	r6, r2
 80102d2:	4699      	mov	r9, r3
 80102d4:	688a      	ldr	r2, [r1, #8]
 80102d6:	690b      	ldr	r3, [r1, #16]
 80102d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80102dc:	4293      	cmp	r3, r2
 80102de:	bfb8      	it	lt
 80102e0:	4613      	movlt	r3, r2
 80102e2:	6033      	str	r3, [r6, #0]
 80102e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80102e8:	4607      	mov	r7, r0
 80102ea:	460c      	mov	r4, r1
 80102ec:	b10a      	cbz	r2, 80102f2 <_printf_common+0x26>
 80102ee:	3301      	adds	r3, #1
 80102f0:	6033      	str	r3, [r6, #0]
 80102f2:	6823      	ldr	r3, [r4, #0]
 80102f4:	0699      	lsls	r1, r3, #26
 80102f6:	bf42      	ittt	mi
 80102f8:	6833      	ldrmi	r3, [r6, #0]
 80102fa:	3302      	addmi	r3, #2
 80102fc:	6033      	strmi	r3, [r6, #0]
 80102fe:	6825      	ldr	r5, [r4, #0]
 8010300:	f015 0506 	ands.w	r5, r5, #6
 8010304:	d106      	bne.n	8010314 <_printf_common+0x48>
 8010306:	f104 0a19 	add.w	sl, r4, #25
 801030a:	68e3      	ldr	r3, [r4, #12]
 801030c:	6832      	ldr	r2, [r6, #0]
 801030e:	1a9b      	subs	r3, r3, r2
 8010310:	42ab      	cmp	r3, r5
 8010312:	dc26      	bgt.n	8010362 <_printf_common+0x96>
 8010314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010318:	1e13      	subs	r3, r2, #0
 801031a:	6822      	ldr	r2, [r4, #0]
 801031c:	bf18      	it	ne
 801031e:	2301      	movne	r3, #1
 8010320:	0692      	lsls	r2, r2, #26
 8010322:	d42b      	bmi.n	801037c <_printf_common+0xb0>
 8010324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010328:	4649      	mov	r1, r9
 801032a:	4638      	mov	r0, r7
 801032c:	47c0      	blx	r8
 801032e:	3001      	adds	r0, #1
 8010330:	d01e      	beq.n	8010370 <_printf_common+0xa4>
 8010332:	6823      	ldr	r3, [r4, #0]
 8010334:	6922      	ldr	r2, [r4, #16]
 8010336:	f003 0306 	and.w	r3, r3, #6
 801033a:	2b04      	cmp	r3, #4
 801033c:	bf02      	ittt	eq
 801033e:	68e5      	ldreq	r5, [r4, #12]
 8010340:	6833      	ldreq	r3, [r6, #0]
 8010342:	1aed      	subeq	r5, r5, r3
 8010344:	68a3      	ldr	r3, [r4, #8]
 8010346:	bf0c      	ite	eq
 8010348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801034c:	2500      	movne	r5, #0
 801034e:	4293      	cmp	r3, r2
 8010350:	bfc4      	itt	gt
 8010352:	1a9b      	subgt	r3, r3, r2
 8010354:	18ed      	addgt	r5, r5, r3
 8010356:	2600      	movs	r6, #0
 8010358:	341a      	adds	r4, #26
 801035a:	42b5      	cmp	r5, r6
 801035c:	d11a      	bne.n	8010394 <_printf_common+0xc8>
 801035e:	2000      	movs	r0, #0
 8010360:	e008      	b.n	8010374 <_printf_common+0xa8>
 8010362:	2301      	movs	r3, #1
 8010364:	4652      	mov	r2, sl
 8010366:	4649      	mov	r1, r9
 8010368:	4638      	mov	r0, r7
 801036a:	47c0      	blx	r8
 801036c:	3001      	adds	r0, #1
 801036e:	d103      	bne.n	8010378 <_printf_common+0xac>
 8010370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010378:	3501      	adds	r5, #1
 801037a:	e7c6      	b.n	801030a <_printf_common+0x3e>
 801037c:	18e1      	adds	r1, r4, r3
 801037e:	1c5a      	adds	r2, r3, #1
 8010380:	2030      	movs	r0, #48	; 0x30
 8010382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010386:	4422      	add	r2, r4
 8010388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801038c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010390:	3302      	adds	r3, #2
 8010392:	e7c7      	b.n	8010324 <_printf_common+0x58>
 8010394:	2301      	movs	r3, #1
 8010396:	4622      	mov	r2, r4
 8010398:	4649      	mov	r1, r9
 801039a:	4638      	mov	r0, r7
 801039c:	47c0      	blx	r8
 801039e:	3001      	adds	r0, #1
 80103a0:	d0e6      	beq.n	8010370 <_printf_common+0xa4>
 80103a2:	3601      	adds	r6, #1
 80103a4:	e7d9      	b.n	801035a <_printf_common+0x8e>
	...

080103a8 <_printf_i>:
 80103a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103ac:	7e0f      	ldrb	r7, [r1, #24]
 80103ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103b0:	2f78      	cmp	r7, #120	; 0x78
 80103b2:	4691      	mov	r9, r2
 80103b4:	4680      	mov	r8, r0
 80103b6:	460c      	mov	r4, r1
 80103b8:	469a      	mov	sl, r3
 80103ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80103be:	d807      	bhi.n	80103d0 <_printf_i+0x28>
 80103c0:	2f62      	cmp	r7, #98	; 0x62
 80103c2:	d80a      	bhi.n	80103da <_printf_i+0x32>
 80103c4:	2f00      	cmp	r7, #0
 80103c6:	f000 80d4 	beq.w	8010572 <_printf_i+0x1ca>
 80103ca:	2f58      	cmp	r7, #88	; 0x58
 80103cc:	f000 80c0 	beq.w	8010550 <_printf_i+0x1a8>
 80103d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80103d8:	e03a      	b.n	8010450 <_printf_i+0xa8>
 80103da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80103de:	2b15      	cmp	r3, #21
 80103e0:	d8f6      	bhi.n	80103d0 <_printf_i+0x28>
 80103e2:	a101      	add	r1, pc, #4	; (adr r1, 80103e8 <_printf_i+0x40>)
 80103e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103e8:	08010441 	.word	0x08010441
 80103ec:	08010455 	.word	0x08010455
 80103f0:	080103d1 	.word	0x080103d1
 80103f4:	080103d1 	.word	0x080103d1
 80103f8:	080103d1 	.word	0x080103d1
 80103fc:	080103d1 	.word	0x080103d1
 8010400:	08010455 	.word	0x08010455
 8010404:	080103d1 	.word	0x080103d1
 8010408:	080103d1 	.word	0x080103d1
 801040c:	080103d1 	.word	0x080103d1
 8010410:	080103d1 	.word	0x080103d1
 8010414:	08010559 	.word	0x08010559
 8010418:	08010481 	.word	0x08010481
 801041c:	08010513 	.word	0x08010513
 8010420:	080103d1 	.word	0x080103d1
 8010424:	080103d1 	.word	0x080103d1
 8010428:	0801057b 	.word	0x0801057b
 801042c:	080103d1 	.word	0x080103d1
 8010430:	08010481 	.word	0x08010481
 8010434:	080103d1 	.word	0x080103d1
 8010438:	080103d1 	.word	0x080103d1
 801043c:	0801051b 	.word	0x0801051b
 8010440:	682b      	ldr	r3, [r5, #0]
 8010442:	1d1a      	adds	r2, r3, #4
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	602a      	str	r2, [r5, #0]
 8010448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801044c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010450:	2301      	movs	r3, #1
 8010452:	e09f      	b.n	8010594 <_printf_i+0x1ec>
 8010454:	6820      	ldr	r0, [r4, #0]
 8010456:	682b      	ldr	r3, [r5, #0]
 8010458:	0607      	lsls	r7, r0, #24
 801045a:	f103 0104 	add.w	r1, r3, #4
 801045e:	6029      	str	r1, [r5, #0]
 8010460:	d501      	bpl.n	8010466 <_printf_i+0xbe>
 8010462:	681e      	ldr	r6, [r3, #0]
 8010464:	e003      	b.n	801046e <_printf_i+0xc6>
 8010466:	0646      	lsls	r6, r0, #25
 8010468:	d5fb      	bpl.n	8010462 <_printf_i+0xba>
 801046a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801046e:	2e00      	cmp	r6, #0
 8010470:	da03      	bge.n	801047a <_printf_i+0xd2>
 8010472:	232d      	movs	r3, #45	; 0x2d
 8010474:	4276      	negs	r6, r6
 8010476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801047a:	485a      	ldr	r0, [pc, #360]	; (80105e4 <_printf_i+0x23c>)
 801047c:	230a      	movs	r3, #10
 801047e:	e012      	b.n	80104a6 <_printf_i+0xfe>
 8010480:	682b      	ldr	r3, [r5, #0]
 8010482:	6820      	ldr	r0, [r4, #0]
 8010484:	1d19      	adds	r1, r3, #4
 8010486:	6029      	str	r1, [r5, #0]
 8010488:	0605      	lsls	r5, r0, #24
 801048a:	d501      	bpl.n	8010490 <_printf_i+0xe8>
 801048c:	681e      	ldr	r6, [r3, #0]
 801048e:	e002      	b.n	8010496 <_printf_i+0xee>
 8010490:	0641      	lsls	r1, r0, #25
 8010492:	d5fb      	bpl.n	801048c <_printf_i+0xe4>
 8010494:	881e      	ldrh	r6, [r3, #0]
 8010496:	4853      	ldr	r0, [pc, #332]	; (80105e4 <_printf_i+0x23c>)
 8010498:	2f6f      	cmp	r7, #111	; 0x6f
 801049a:	bf0c      	ite	eq
 801049c:	2308      	moveq	r3, #8
 801049e:	230a      	movne	r3, #10
 80104a0:	2100      	movs	r1, #0
 80104a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80104a6:	6865      	ldr	r5, [r4, #4]
 80104a8:	60a5      	str	r5, [r4, #8]
 80104aa:	2d00      	cmp	r5, #0
 80104ac:	bfa2      	ittt	ge
 80104ae:	6821      	ldrge	r1, [r4, #0]
 80104b0:	f021 0104 	bicge.w	r1, r1, #4
 80104b4:	6021      	strge	r1, [r4, #0]
 80104b6:	b90e      	cbnz	r6, 80104bc <_printf_i+0x114>
 80104b8:	2d00      	cmp	r5, #0
 80104ba:	d04b      	beq.n	8010554 <_printf_i+0x1ac>
 80104bc:	4615      	mov	r5, r2
 80104be:	fbb6 f1f3 	udiv	r1, r6, r3
 80104c2:	fb03 6711 	mls	r7, r3, r1, r6
 80104c6:	5dc7      	ldrb	r7, [r0, r7]
 80104c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80104cc:	4637      	mov	r7, r6
 80104ce:	42bb      	cmp	r3, r7
 80104d0:	460e      	mov	r6, r1
 80104d2:	d9f4      	bls.n	80104be <_printf_i+0x116>
 80104d4:	2b08      	cmp	r3, #8
 80104d6:	d10b      	bne.n	80104f0 <_printf_i+0x148>
 80104d8:	6823      	ldr	r3, [r4, #0]
 80104da:	07de      	lsls	r6, r3, #31
 80104dc:	d508      	bpl.n	80104f0 <_printf_i+0x148>
 80104de:	6923      	ldr	r3, [r4, #16]
 80104e0:	6861      	ldr	r1, [r4, #4]
 80104e2:	4299      	cmp	r1, r3
 80104e4:	bfde      	ittt	le
 80104e6:	2330      	movle	r3, #48	; 0x30
 80104e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80104ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80104f0:	1b52      	subs	r2, r2, r5
 80104f2:	6122      	str	r2, [r4, #16]
 80104f4:	f8cd a000 	str.w	sl, [sp]
 80104f8:	464b      	mov	r3, r9
 80104fa:	aa03      	add	r2, sp, #12
 80104fc:	4621      	mov	r1, r4
 80104fe:	4640      	mov	r0, r8
 8010500:	f7ff fee4 	bl	80102cc <_printf_common>
 8010504:	3001      	adds	r0, #1
 8010506:	d14a      	bne.n	801059e <_printf_i+0x1f6>
 8010508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801050c:	b004      	add	sp, #16
 801050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010512:	6823      	ldr	r3, [r4, #0]
 8010514:	f043 0320 	orr.w	r3, r3, #32
 8010518:	6023      	str	r3, [r4, #0]
 801051a:	4833      	ldr	r0, [pc, #204]	; (80105e8 <_printf_i+0x240>)
 801051c:	2778      	movs	r7, #120	; 0x78
 801051e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010522:	6823      	ldr	r3, [r4, #0]
 8010524:	6829      	ldr	r1, [r5, #0]
 8010526:	061f      	lsls	r7, r3, #24
 8010528:	f851 6b04 	ldr.w	r6, [r1], #4
 801052c:	d402      	bmi.n	8010534 <_printf_i+0x18c>
 801052e:	065f      	lsls	r7, r3, #25
 8010530:	bf48      	it	mi
 8010532:	b2b6      	uxthmi	r6, r6
 8010534:	07df      	lsls	r7, r3, #31
 8010536:	bf48      	it	mi
 8010538:	f043 0320 	orrmi.w	r3, r3, #32
 801053c:	6029      	str	r1, [r5, #0]
 801053e:	bf48      	it	mi
 8010540:	6023      	strmi	r3, [r4, #0]
 8010542:	b91e      	cbnz	r6, 801054c <_printf_i+0x1a4>
 8010544:	6823      	ldr	r3, [r4, #0]
 8010546:	f023 0320 	bic.w	r3, r3, #32
 801054a:	6023      	str	r3, [r4, #0]
 801054c:	2310      	movs	r3, #16
 801054e:	e7a7      	b.n	80104a0 <_printf_i+0xf8>
 8010550:	4824      	ldr	r0, [pc, #144]	; (80105e4 <_printf_i+0x23c>)
 8010552:	e7e4      	b.n	801051e <_printf_i+0x176>
 8010554:	4615      	mov	r5, r2
 8010556:	e7bd      	b.n	80104d4 <_printf_i+0x12c>
 8010558:	682b      	ldr	r3, [r5, #0]
 801055a:	6826      	ldr	r6, [r4, #0]
 801055c:	6961      	ldr	r1, [r4, #20]
 801055e:	1d18      	adds	r0, r3, #4
 8010560:	6028      	str	r0, [r5, #0]
 8010562:	0635      	lsls	r5, r6, #24
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	d501      	bpl.n	801056c <_printf_i+0x1c4>
 8010568:	6019      	str	r1, [r3, #0]
 801056a:	e002      	b.n	8010572 <_printf_i+0x1ca>
 801056c:	0670      	lsls	r0, r6, #25
 801056e:	d5fb      	bpl.n	8010568 <_printf_i+0x1c0>
 8010570:	8019      	strh	r1, [r3, #0]
 8010572:	2300      	movs	r3, #0
 8010574:	6123      	str	r3, [r4, #16]
 8010576:	4615      	mov	r5, r2
 8010578:	e7bc      	b.n	80104f4 <_printf_i+0x14c>
 801057a:	682b      	ldr	r3, [r5, #0]
 801057c:	1d1a      	adds	r2, r3, #4
 801057e:	602a      	str	r2, [r5, #0]
 8010580:	681d      	ldr	r5, [r3, #0]
 8010582:	6862      	ldr	r2, [r4, #4]
 8010584:	2100      	movs	r1, #0
 8010586:	4628      	mov	r0, r5
 8010588:	f7ef feaa 	bl	80002e0 <memchr>
 801058c:	b108      	cbz	r0, 8010592 <_printf_i+0x1ea>
 801058e:	1b40      	subs	r0, r0, r5
 8010590:	6060      	str	r0, [r4, #4]
 8010592:	6863      	ldr	r3, [r4, #4]
 8010594:	6123      	str	r3, [r4, #16]
 8010596:	2300      	movs	r3, #0
 8010598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801059c:	e7aa      	b.n	80104f4 <_printf_i+0x14c>
 801059e:	6923      	ldr	r3, [r4, #16]
 80105a0:	462a      	mov	r2, r5
 80105a2:	4649      	mov	r1, r9
 80105a4:	4640      	mov	r0, r8
 80105a6:	47d0      	blx	sl
 80105a8:	3001      	adds	r0, #1
 80105aa:	d0ad      	beq.n	8010508 <_printf_i+0x160>
 80105ac:	6823      	ldr	r3, [r4, #0]
 80105ae:	079b      	lsls	r3, r3, #30
 80105b0:	d413      	bmi.n	80105da <_printf_i+0x232>
 80105b2:	68e0      	ldr	r0, [r4, #12]
 80105b4:	9b03      	ldr	r3, [sp, #12]
 80105b6:	4298      	cmp	r0, r3
 80105b8:	bfb8      	it	lt
 80105ba:	4618      	movlt	r0, r3
 80105bc:	e7a6      	b.n	801050c <_printf_i+0x164>
 80105be:	2301      	movs	r3, #1
 80105c0:	4632      	mov	r2, r6
 80105c2:	4649      	mov	r1, r9
 80105c4:	4640      	mov	r0, r8
 80105c6:	47d0      	blx	sl
 80105c8:	3001      	adds	r0, #1
 80105ca:	d09d      	beq.n	8010508 <_printf_i+0x160>
 80105cc:	3501      	adds	r5, #1
 80105ce:	68e3      	ldr	r3, [r4, #12]
 80105d0:	9903      	ldr	r1, [sp, #12]
 80105d2:	1a5b      	subs	r3, r3, r1
 80105d4:	42ab      	cmp	r3, r5
 80105d6:	dcf2      	bgt.n	80105be <_printf_i+0x216>
 80105d8:	e7eb      	b.n	80105b2 <_printf_i+0x20a>
 80105da:	2500      	movs	r5, #0
 80105dc:	f104 0619 	add.w	r6, r4, #25
 80105e0:	e7f5      	b.n	80105ce <_printf_i+0x226>
 80105e2:	bf00      	nop
 80105e4:	08012b32 	.word	0x08012b32
 80105e8:	08012b43 	.word	0x08012b43

080105ec <std>:
 80105ec:	2300      	movs	r3, #0
 80105ee:	b510      	push	{r4, lr}
 80105f0:	4604      	mov	r4, r0
 80105f2:	e9c0 3300 	strd	r3, r3, [r0]
 80105f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105fa:	6083      	str	r3, [r0, #8]
 80105fc:	8181      	strh	r1, [r0, #12]
 80105fe:	6643      	str	r3, [r0, #100]	; 0x64
 8010600:	81c2      	strh	r2, [r0, #14]
 8010602:	6183      	str	r3, [r0, #24]
 8010604:	4619      	mov	r1, r3
 8010606:	2208      	movs	r2, #8
 8010608:	305c      	adds	r0, #92	; 0x5c
 801060a:	f000 f914 	bl	8010836 <memset>
 801060e:	4b0d      	ldr	r3, [pc, #52]	; (8010644 <std+0x58>)
 8010610:	6263      	str	r3, [r4, #36]	; 0x24
 8010612:	4b0d      	ldr	r3, [pc, #52]	; (8010648 <std+0x5c>)
 8010614:	62a3      	str	r3, [r4, #40]	; 0x28
 8010616:	4b0d      	ldr	r3, [pc, #52]	; (801064c <std+0x60>)
 8010618:	62e3      	str	r3, [r4, #44]	; 0x2c
 801061a:	4b0d      	ldr	r3, [pc, #52]	; (8010650 <std+0x64>)
 801061c:	6323      	str	r3, [r4, #48]	; 0x30
 801061e:	4b0d      	ldr	r3, [pc, #52]	; (8010654 <std+0x68>)
 8010620:	6224      	str	r4, [r4, #32]
 8010622:	429c      	cmp	r4, r3
 8010624:	d006      	beq.n	8010634 <std+0x48>
 8010626:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801062a:	4294      	cmp	r4, r2
 801062c:	d002      	beq.n	8010634 <std+0x48>
 801062e:	33d0      	adds	r3, #208	; 0xd0
 8010630:	429c      	cmp	r4, r3
 8010632:	d105      	bne.n	8010640 <std+0x54>
 8010634:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801063c:	f000 b978 	b.w	8010930 <__retarget_lock_init_recursive>
 8010640:	bd10      	pop	{r4, pc}
 8010642:	bf00      	nop
 8010644:	080107b1 	.word	0x080107b1
 8010648:	080107d3 	.word	0x080107d3
 801064c:	0801080b 	.word	0x0801080b
 8010650:	0801082f 	.word	0x0801082f
 8010654:	24000864 	.word	0x24000864

08010658 <stdio_exit_handler>:
 8010658:	4a02      	ldr	r2, [pc, #8]	; (8010664 <stdio_exit_handler+0xc>)
 801065a:	4903      	ldr	r1, [pc, #12]	; (8010668 <stdio_exit_handler+0x10>)
 801065c:	4803      	ldr	r0, [pc, #12]	; (801066c <stdio_exit_handler+0x14>)
 801065e:	f000 b869 	b.w	8010734 <_fwalk_sglue>
 8010662:	bf00      	nop
 8010664:	24000014 	.word	0x24000014
 8010668:	080121f5 	.word	0x080121f5
 801066c:	24000020 	.word	0x24000020

08010670 <cleanup_stdio>:
 8010670:	6841      	ldr	r1, [r0, #4]
 8010672:	4b0c      	ldr	r3, [pc, #48]	; (80106a4 <cleanup_stdio+0x34>)
 8010674:	4299      	cmp	r1, r3
 8010676:	b510      	push	{r4, lr}
 8010678:	4604      	mov	r4, r0
 801067a:	d001      	beq.n	8010680 <cleanup_stdio+0x10>
 801067c:	f001 fdba 	bl	80121f4 <_fflush_r>
 8010680:	68a1      	ldr	r1, [r4, #8]
 8010682:	4b09      	ldr	r3, [pc, #36]	; (80106a8 <cleanup_stdio+0x38>)
 8010684:	4299      	cmp	r1, r3
 8010686:	d002      	beq.n	801068e <cleanup_stdio+0x1e>
 8010688:	4620      	mov	r0, r4
 801068a:	f001 fdb3 	bl	80121f4 <_fflush_r>
 801068e:	68e1      	ldr	r1, [r4, #12]
 8010690:	4b06      	ldr	r3, [pc, #24]	; (80106ac <cleanup_stdio+0x3c>)
 8010692:	4299      	cmp	r1, r3
 8010694:	d004      	beq.n	80106a0 <cleanup_stdio+0x30>
 8010696:	4620      	mov	r0, r4
 8010698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801069c:	f001 bdaa 	b.w	80121f4 <_fflush_r>
 80106a0:	bd10      	pop	{r4, pc}
 80106a2:	bf00      	nop
 80106a4:	24000864 	.word	0x24000864
 80106a8:	240008cc 	.word	0x240008cc
 80106ac:	24000934 	.word	0x24000934

080106b0 <global_stdio_init.part.0>:
 80106b0:	b510      	push	{r4, lr}
 80106b2:	4b0b      	ldr	r3, [pc, #44]	; (80106e0 <global_stdio_init.part.0+0x30>)
 80106b4:	4c0b      	ldr	r4, [pc, #44]	; (80106e4 <global_stdio_init.part.0+0x34>)
 80106b6:	4a0c      	ldr	r2, [pc, #48]	; (80106e8 <global_stdio_init.part.0+0x38>)
 80106b8:	601a      	str	r2, [r3, #0]
 80106ba:	4620      	mov	r0, r4
 80106bc:	2200      	movs	r2, #0
 80106be:	2104      	movs	r1, #4
 80106c0:	f7ff ff94 	bl	80105ec <std>
 80106c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80106c8:	2201      	movs	r2, #1
 80106ca:	2109      	movs	r1, #9
 80106cc:	f7ff ff8e 	bl	80105ec <std>
 80106d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80106d4:	2202      	movs	r2, #2
 80106d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106da:	2112      	movs	r1, #18
 80106dc:	f7ff bf86 	b.w	80105ec <std>
 80106e0:	2400099c 	.word	0x2400099c
 80106e4:	24000864 	.word	0x24000864
 80106e8:	08010659 	.word	0x08010659

080106ec <__sfp_lock_acquire>:
 80106ec:	4801      	ldr	r0, [pc, #4]	; (80106f4 <__sfp_lock_acquire+0x8>)
 80106ee:	f000 b920 	b.w	8010932 <__retarget_lock_acquire_recursive>
 80106f2:	bf00      	nop
 80106f4:	240009a5 	.word	0x240009a5

080106f8 <__sfp_lock_release>:
 80106f8:	4801      	ldr	r0, [pc, #4]	; (8010700 <__sfp_lock_release+0x8>)
 80106fa:	f000 b91b 	b.w	8010934 <__retarget_lock_release_recursive>
 80106fe:	bf00      	nop
 8010700:	240009a5 	.word	0x240009a5

08010704 <__sinit>:
 8010704:	b510      	push	{r4, lr}
 8010706:	4604      	mov	r4, r0
 8010708:	f7ff fff0 	bl	80106ec <__sfp_lock_acquire>
 801070c:	6a23      	ldr	r3, [r4, #32]
 801070e:	b11b      	cbz	r3, 8010718 <__sinit+0x14>
 8010710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010714:	f7ff bff0 	b.w	80106f8 <__sfp_lock_release>
 8010718:	4b04      	ldr	r3, [pc, #16]	; (801072c <__sinit+0x28>)
 801071a:	6223      	str	r3, [r4, #32]
 801071c:	4b04      	ldr	r3, [pc, #16]	; (8010730 <__sinit+0x2c>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1f5      	bne.n	8010710 <__sinit+0xc>
 8010724:	f7ff ffc4 	bl	80106b0 <global_stdio_init.part.0>
 8010728:	e7f2      	b.n	8010710 <__sinit+0xc>
 801072a:	bf00      	nop
 801072c:	08010671 	.word	0x08010671
 8010730:	2400099c 	.word	0x2400099c

08010734 <_fwalk_sglue>:
 8010734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010738:	4607      	mov	r7, r0
 801073a:	4688      	mov	r8, r1
 801073c:	4614      	mov	r4, r2
 801073e:	2600      	movs	r6, #0
 8010740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010744:	f1b9 0901 	subs.w	r9, r9, #1
 8010748:	d505      	bpl.n	8010756 <_fwalk_sglue+0x22>
 801074a:	6824      	ldr	r4, [r4, #0]
 801074c:	2c00      	cmp	r4, #0
 801074e:	d1f7      	bne.n	8010740 <_fwalk_sglue+0xc>
 8010750:	4630      	mov	r0, r6
 8010752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010756:	89ab      	ldrh	r3, [r5, #12]
 8010758:	2b01      	cmp	r3, #1
 801075a:	d907      	bls.n	801076c <_fwalk_sglue+0x38>
 801075c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010760:	3301      	adds	r3, #1
 8010762:	d003      	beq.n	801076c <_fwalk_sglue+0x38>
 8010764:	4629      	mov	r1, r5
 8010766:	4638      	mov	r0, r7
 8010768:	47c0      	blx	r8
 801076a:	4306      	orrs	r6, r0
 801076c:	3568      	adds	r5, #104	; 0x68
 801076e:	e7e9      	b.n	8010744 <_fwalk_sglue+0x10>

08010770 <siprintf>:
 8010770:	b40e      	push	{r1, r2, r3}
 8010772:	b500      	push	{lr}
 8010774:	b09c      	sub	sp, #112	; 0x70
 8010776:	ab1d      	add	r3, sp, #116	; 0x74
 8010778:	9002      	str	r0, [sp, #8]
 801077a:	9006      	str	r0, [sp, #24]
 801077c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010780:	4809      	ldr	r0, [pc, #36]	; (80107a8 <siprintf+0x38>)
 8010782:	9107      	str	r1, [sp, #28]
 8010784:	9104      	str	r1, [sp, #16]
 8010786:	4909      	ldr	r1, [pc, #36]	; (80107ac <siprintf+0x3c>)
 8010788:	f853 2b04 	ldr.w	r2, [r3], #4
 801078c:	9105      	str	r1, [sp, #20]
 801078e:	6800      	ldr	r0, [r0, #0]
 8010790:	9301      	str	r3, [sp, #4]
 8010792:	a902      	add	r1, sp, #8
 8010794:	f001 fbaa 	bl	8011eec <_svfiprintf_r>
 8010798:	9b02      	ldr	r3, [sp, #8]
 801079a:	2200      	movs	r2, #0
 801079c:	701a      	strb	r2, [r3, #0]
 801079e:	b01c      	add	sp, #112	; 0x70
 80107a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80107a4:	b003      	add	sp, #12
 80107a6:	4770      	bx	lr
 80107a8:	2400006c 	.word	0x2400006c
 80107ac:	ffff0208 	.word	0xffff0208

080107b0 <__sread>:
 80107b0:	b510      	push	{r4, lr}
 80107b2:	460c      	mov	r4, r1
 80107b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107b8:	f000 f86c 	bl	8010894 <_read_r>
 80107bc:	2800      	cmp	r0, #0
 80107be:	bfab      	itete	ge
 80107c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80107c2:	89a3      	ldrhlt	r3, [r4, #12]
 80107c4:	181b      	addge	r3, r3, r0
 80107c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80107ca:	bfac      	ite	ge
 80107cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80107ce:	81a3      	strhlt	r3, [r4, #12]
 80107d0:	bd10      	pop	{r4, pc}

080107d2 <__swrite>:
 80107d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d6:	461f      	mov	r7, r3
 80107d8:	898b      	ldrh	r3, [r1, #12]
 80107da:	05db      	lsls	r3, r3, #23
 80107dc:	4605      	mov	r5, r0
 80107de:	460c      	mov	r4, r1
 80107e0:	4616      	mov	r6, r2
 80107e2:	d505      	bpl.n	80107f0 <__swrite+0x1e>
 80107e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107e8:	2302      	movs	r3, #2
 80107ea:	2200      	movs	r2, #0
 80107ec:	f000 f840 	bl	8010870 <_lseek_r>
 80107f0:	89a3      	ldrh	r3, [r4, #12]
 80107f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107fa:	81a3      	strh	r3, [r4, #12]
 80107fc:	4632      	mov	r2, r6
 80107fe:	463b      	mov	r3, r7
 8010800:	4628      	mov	r0, r5
 8010802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010806:	f000 b857 	b.w	80108b8 <_write_r>

0801080a <__sseek>:
 801080a:	b510      	push	{r4, lr}
 801080c:	460c      	mov	r4, r1
 801080e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010812:	f000 f82d 	bl	8010870 <_lseek_r>
 8010816:	1c43      	adds	r3, r0, #1
 8010818:	89a3      	ldrh	r3, [r4, #12]
 801081a:	bf15      	itete	ne
 801081c:	6560      	strne	r0, [r4, #84]	; 0x54
 801081e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010826:	81a3      	strheq	r3, [r4, #12]
 8010828:	bf18      	it	ne
 801082a:	81a3      	strhne	r3, [r4, #12]
 801082c:	bd10      	pop	{r4, pc}

0801082e <__sclose>:
 801082e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010832:	f000 b80d 	b.w	8010850 <_close_r>

08010836 <memset>:
 8010836:	4402      	add	r2, r0
 8010838:	4603      	mov	r3, r0
 801083a:	4293      	cmp	r3, r2
 801083c:	d100      	bne.n	8010840 <memset+0xa>
 801083e:	4770      	bx	lr
 8010840:	f803 1b01 	strb.w	r1, [r3], #1
 8010844:	e7f9      	b.n	801083a <memset+0x4>
	...

08010848 <_localeconv_r>:
 8010848:	4800      	ldr	r0, [pc, #0]	; (801084c <_localeconv_r+0x4>)
 801084a:	4770      	bx	lr
 801084c:	24000160 	.word	0x24000160

08010850 <_close_r>:
 8010850:	b538      	push	{r3, r4, r5, lr}
 8010852:	4d06      	ldr	r5, [pc, #24]	; (801086c <_close_r+0x1c>)
 8010854:	2300      	movs	r3, #0
 8010856:	4604      	mov	r4, r0
 8010858:	4608      	mov	r0, r1
 801085a:	602b      	str	r3, [r5, #0]
 801085c:	f7f2 f8cf 	bl	80029fe <_close>
 8010860:	1c43      	adds	r3, r0, #1
 8010862:	d102      	bne.n	801086a <_close_r+0x1a>
 8010864:	682b      	ldr	r3, [r5, #0]
 8010866:	b103      	cbz	r3, 801086a <_close_r+0x1a>
 8010868:	6023      	str	r3, [r4, #0]
 801086a:	bd38      	pop	{r3, r4, r5, pc}
 801086c:	240009a0 	.word	0x240009a0

08010870 <_lseek_r>:
 8010870:	b538      	push	{r3, r4, r5, lr}
 8010872:	4d07      	ldr	r5, [pc, #28]	; (8010890 <_lseek_r+0x20>)
 8010874:	4604      	mov	r4, r0
 8010876:	4608      	mov	r0, r1
 8010878:	4611      	mov	r1, r2
 801087a:	2200      	movs	r2, #0
 801087c:	602a      	str	r2, [r5, #0]
 801087e:	461a      	mov	r2, r3
 8010880:	f7f2 f8e4 	bl	8002a4c <_lseek>
 8010884:	1c43      	adds	r3, r0, #1
 8010886:	d102      	bne.n	801088e <_lseek_r+0x1e>
 8010888:	682b      	ldr	r3, [r5, #0]
 801088a:	b103      	cbz	r3, 801088e <_lseek_r+0x1e>
 801088c:	6023      	str	r3, [r4, #0]
 801088e:	bd38      	pop	{r3, r4, r5, pc}
 8010890:	240009a0 	.word	0x240009a0

08010894 <_read_r>:
 8010894:	b538      	push	{r3, r4, r5, lr}
 8010896:	4d07      	ldr	r5, [pc, #28]	; (80108b4 <_read_r+0x20>)
 8010898:	4604      	mov	r4, r0
 801089a:	4608      	mov	r0, r1
 801089c:	4611      	mov	r1, r2
 801089e:	2200      	movs	r2, #0
 80108a0:	602a      	str	r2, [r5, #0]
 80108a2:	461a      	mov	r2, r3
 80108a4:	f7f2 f872 	bl	800298c <_read>
 80108a8:	1c43      	adds	r3, r0, #1
 80108aa:	d102      	bne.n	80108b2 <_read_r+0x1e>
 80108ac:	682b      	ldr	r3, [r5, #0]
 80108ae:	b103      	cbz	r3, 80108b2 <_read_r+0x1e>
 80108b0:	6023      	str	r3, [r4, #0]
 80108b2:	bd38      	pop	{r3, r4, r5, pc}
 80108b4:	240009a0 	.word	0x240009a0

080108b8 <_write_r>:
 80108b8:	b538      	push	{r3, r4, r5, lr}
 80108ba:	4d07      	ldr	r5, [pc, #28]	; (80108d8 <_write_r+0x20>)
 80108bc:	4604      	mov	r4, r0
 80108be:	4608      	mov	r0, r1
 80108c0:	4611      	mov	r1, r2
 80108c2:	2200      	movs	r2, #0
 80108c4:	602a      	str	r2, [r5, #0]
 80108c6:	461a      	mov	r2, r3
 80108c8:	f7f2 f87d 	bl	80029c6 <_write>
 80108cc:	1c43      	adds	r3, r0, #1
 80108ce:	d102      	bne.n	80108d6 <_write_r+0x1e>
 80108d0:	682b      	ldr	r3, [r5, #0]
 80108d2:	b103      	cbz	r3, 80108d6 <_write_r+0x1e>
 80108d4:	6023      	str	r3, [r4, #0]
 80108d6:	bd38      	pop	{r3, r4, r5, pc}
 80108d8:	240009a0 	.word	0x240009a0

080108dc <__errno>:
 80108dc:	4b01      	ldr	r3, [pc, #4]	; (80108e4 <__errno+0x8>)
 80108de:	6818      	ldr	r0, [r3, #0]
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	2400006c 	.word	0x2400006c

080108e8 <__libc_init_array>:
 80108e8:	b570      	push	{r4, r5, r6, lr}
 80108ea:	4d0d      	ldr	r5, [pc, #52]	; (8010920 <__libc_init_array+0x38>)
 80108ec:	4c0d      	ldr	r4, [pc, #52]	; (8010924 <__libc_init_array+0x3c>)
 80108ee:	1b64      	subs	r4, r4, r5
 80108f0:	10a4      	asrs	r4, r4, #2
 80108f2:	2600      	movs	r6, #0
 80108f4:	42a6      	cmp	r6, r4
 80108f6:	d109      	bne.n	801090c <__libc_init_array+0x24>
 80108f8:	4d0b      	ldr	r5, [pc, #44]	; (8010928 <__libc_init_array+0x40>)
 80108fa:	4c0c      	ldr	r4, [pc, #48]	; (801092c <__libc_init_array+0x44>)
 80108fc:	f002 f810 	bl	8012920 <_init>
 8010900:	1b64      	subs	r4, r4, r5
 8010902:	10a4      	asrs	r4, r4, #2
 8010904:	2600      	movs	r6, #0
 8010906:	42a6      	cmp	r6, r4
 8010908:	d105      	bne.n	8010916 <__libc_init_array+0x2e>
 801090a:	bd70      	pop	{r4, r5, r6, pc}
 801090c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010910:	4798      	blx	r3
 8010912:	3601      	adds	r6, #1
 8010914:	e7ee      	b.n	80108f4 <__libc_init_array+0xc>
 8010916:	f855 3b04 	ldr.w	r3, [r5], #4
 801091a:	4798      	blx	r3
 801091c:	3601      	adds	r6, #1
 801091e:	e7f2      	b.n	8010906 <__libc_init_array+0x1e>
 8010920:	08012e9c 	.word	0x08012e9c
 8010924:	08012e9c 	.word	0x08012e9c
 8010928:	08012e9c 	.word	0x08012e9c
 801092c:	08012ea0 	.word	0x08012ea0

08010930 <__retarget_lock_init_recursive>:
 8010930:	4770      	bx	lr

08010932 <__retarget_lock_acquire_recursive>:
 8010932:	4770      	bx	lr

08010934 <__retarget_lock_release_recursive>:
 8010934:	4770      	bx	lr

08010936 <memcpy>:
 8010936:	440a      	add	r2, r1
 8010938:	4291      	cmp	r1, r2
 801093a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801093e:	d100      	bne.n	8010942 <memcpy+0xc>
 8010940:	4770      	bx	lr
 8010942:	b510      	push	{r4, lr}
 8010944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010948:	f803 4f01 	strb.w	r4, [r3, #1]!
 801094c:	4291      	cmp	r1, r2
 801094e:	d1f9      	bne.n	8010944 <memcpy+0xe>
 8010950:	bd10      	pop	{r4, pc}

08010952 <quorem>:
 8010952:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010956:	6903      	ldr	r3, [r0, #16]
 8010958:	690c      	ldr	r4, [r1, #16]
 801095a:	42a3      	cmp	r3, r4
 801095c:	4607      	mov	r7, r0
 801095e:	db7e      	blt.n	8010a5e <quorem+0x10c>
 8010960:	3c01      	subs	r4, #1
 8010962:	f101 0814 	add.w	r8, r1, #20
 8010966:	f100 0514 	add.w	r5, r0, #20
 801096a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801096e:	9301      	str	r3, [sp, #4]
 8010970:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010978:	3301      	adds	r3, #1
 801097a:	429a      	cmp	r2, r3
 801097c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010980:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010984:	fbb2 f6f3 	udiv	r6, r2, r3
 8010988:	d331      	bcc.n	80109ee <quorem+0x9c>
 801098a:	f04f 0e00 	mov.w	lr, #0
 801098e:	4640      	mov	r0, r8
 8010990:	46ac      	mov	ip, r5
 8010992:	46f2      	mov	sl, lr
 8010994:	f850 2b04 	ldr.w	r2, [r0], #4
 8010998:	b293      	uxth	r3, r2
 801099a:	fb06 e303 	mla	r3, r6, r3, lr
 801099e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80109a2:	0c1a      	lsrs	r2, r3, #16
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	ebaa 0303 	sub.w	r3, sl, r3
 80109aa:	f8dc a000 	ldr.w	sl, [ip]
 80109ae:	fa13 f38a 	uxtah	r3, r3, sl
 80109b2:	fb06 220e 	mla	r2, r6, lr, r2
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	9b00      	ldr	r3, [sp, #0]
 80109ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80109be:	b292      	uxth	r2, r2
 80109c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80109c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80109cc:	4581      	cmp	r9, r0
 80109ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109d2:	f84c 3b04 	str.w	r3, [ip], #4
 80109d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80109da:	d2db      	bcs.n	8010994 <quorem+0x42>
 80109dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80109e0:	b92b      	cbnz	r3, 80109ee <quorem+0x9c>
 80109e2:	9b01      	ldr	r3, [sp, #4]
 80109e4:	3b04      	subs	r3, #4
 80109e6:	429d      	cmp	r5, r3
 80109e8:	461a      	mov	r2, r3
 80109ea:	d32c      	bcc.n	8010a46 <quorem+0xf4>
 80109ec:	613c      	str	r4, [r7, #16]
 80109ee:	4638      	mov	r0, r7
 80109f0:	f001 f922 	bl	8011c38 <__mcmp>
 80109f4:	2800      	cmp	r0, #0
 80109f6:	db22      	blt.n	8010a3e <quorem+0xec>
 80109f8:	3601      	adds	r6, #1
 80109fa:	4629      	mov	r1, r5
 80109fc:	2000      	movs	r0, #0
 80109fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8010a02:	f8d1 c000 	ldr.w	ip, [r1]
 8010a06:	b293      	uxth	r3, r2
 8010a08:	1ac3      	subs	r3, r0, r3
 8010a0a:	0c12      	lsrs	r2, r2, #16
 8010a0c:	fa13 f38c 	uxtah	r3, r3, ip
 8010a10:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010a14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a1e:	45c1      	cmp	r9, r8
 8010a20:	f841 3b04 	str.w	r3, [r1], #4
 8010a24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010a28:	d2e9      	bcs.n	80109fe <quorem+0xac>
 8010a2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a32:	b922      	cbnz	r2, 8010a3e <quorem+0xec>
 8010a34:	3b04      	subs	r3, #4
 8010a36:	429d      	cmp	r5, r3
 8010a38:	461a      	mov	r2, r3
 8010a3a:	d30a      	bcc.n	8010a52 <quorem+0x100>
 8010a3c:	613c      	str	r4, [r7, #16]
 8010a3e:	4630      	mov	r0, r6
 8010a40:	b003      	add	sp, #12
 8010a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a46:	6812      	ldr	r2, [r2, #0]
 8010a48:	3b04      	subs	r3, #4
 8010a4a:	2a00      	cmp	r2, #0
 8010a4c:	d1ce      	bne.n	80109ec <quorem+0x9a>
 8010a4e:	3c01      	subs	r4, #1
 8010a50:	e7c9      	b.n	80109e6 <quorem+0x94>
 8010a52:	6812      	ldr	r2, [r2, #0]
 8010a54:	3b04      	subs	r3, #4
 8010a56:	2a00      	cmp	r2, #0
 8010a58:	d1f0      	bne.n	8010a3c <quorem+0xea>
 8010a5a:	3c01      	subs	r4, #1
 8010a5c:	e7eb      	b.n	8010a36 <quorem+0xe4>
 8010a5e:	2000      	movs	r0, #0
 8010a60:	e7ee      	b.n	8010a40 <quorem+0xee>
 8010a62:	0000      	movs	r0, r0
 8010a64:	0000      	movs	r0, r0
	...

08010a68 <_dtoa_r>:
 8010a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a6c:	ed2d 8b02 	vpush	{d8}
 8010a70:	69c5      	ldr	r5, [r0, #28]
 8010a72:	b091      	sub	sp, #68	; 0x44
 8010a74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010a78:	ec59 8b10 	vmov	r8, r9, d0
 8010a7c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8010a7e:	9106      	str	r1, [sp, #24]
 8010a80:	4606      	mov	r6, r0
 8010a82:	9208      	str	r2, [sp, #32]
 8010a84:	930c      	str	r3, [sp, #48]	; 0x30
 8010a86:	b975      	cbnz	r5, 8010aa6 <_dtoa_r+0x3e>
 8010a88:	2010      	movs	r0, #16
 8010a8a:	f000 fda5 	bl	80115d8 <malloc>
 8010a8e:	4602      	mov	r2, r0
 8010a90:	61f0      	str	r0, [r6, #28]
 8010a92:	b920      	cbnz	r0, 8010a9e <_dtoa_r+0x36>
 8010a94:	4ba6      	ldr	r3, [pc, #664]	; (8010d30 <_dtoa_r+0x2c8>)
 8010a96:	21ef      	movs	r1, #239	; 0xef
 8010a98:	48a6      	ldr	r0, [pc, #664]	; (8010d34 <_dtoa_r+0x2cc>)
 8010a9a:	f001 fbfd 	bl	8012298 <__assert_func>
 8010a9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010aa2:	6005      	str	r5, [r0, #0]
 8010aa4:	60c5      	str	r5, [r0, #12]
 8010aa6:	69f3      	ldr	r3, [r6, #28]
 8010aa8:	6819      	ldr	r1, [r3, #0]
 8010aaa:	b151      	cbz	r1, 8010ac2 <_dtoa_r+0x5a>
 8010aac:	685a      	ldr	r2, [r3, #4]
 8010aae:	604a      	str	r2, [r1, #4]
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	4093      	lsls	r3, r2
 8010ab4:	608b      	str	r3, [r1, #8]
 8010ab6:	4630      	mov	r0, r6
 8010ab8:	f000 fe82 	bl	80117c0 <_Bfree>
 8010abc:	69f3      	ldr	r3, [r6, #28]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	601a      	str	r2, [r3, #0]
 8010ac2:	f1b9 0300 	subs.w	r3, r9, #0
 8010ac6:	bfbb      	ittet	lt
 8010ac8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010acc:	9303      	strlt	r3, [sp, #12]
 8010ace:	2300      	movge	r3, #0
 8010ad0:	2201      	movlt	r2, #1
 8010ad2:	bfac      	ite	ge
 8010ad4:	6023      	strge	r3, [r4, #0]
 8010ad6:	6022      	strlt	r2, [r4, #0]
 8010ad8:	4b97      	ldr	r3, [pc, #604]	; (8010d38 <_dtoa_r+0x2d0>)
 8010ada:	9c03      	ldr	r4, [sp, #12]
 8010adc:	43a3      	bics	r3, r4
 8010ade:	d11c      	bne.n	8010b1a <_dtoa_r+0xb2>
 8010ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ae2:	f242 730f 	movw	r3, #9999	; 0x270f
 8010ae6:	6013      	str	r3, [r2, #0]
 8010ae8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010aec:	ea53 0308 	orrs.w	r3, r3, r8
 8010af0:	f000 84fb 	beq.w	80114ea <_dtoa_r+0xa82>
 8010af4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010af6:	b963      	cbnz	r3, 8010b12 <_dtoa_r+0xaa>
 8010af8:	4b90      	ldr	r3, [pc, #576]	; (8010d3c <_dtoa_r+0x2d4>)
 8010afa:	e020      	b.n	8010b3e <_dtoa_r+0xd6>
 8010afc:	4b90      	ldr	r3, [pc, #576]	; (8010d40 <_dtoa_r+0x2d8>)
 8010afe:	9301      	str	r3, [sp, #4]
 8010b00:	3308      	adds	r3, #8
 8010b02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010b04:	6013      	str	r3, [r2, #0]
 8010b06:	9801      	ldr	r0, [sp, #4]
 8010b08:	b011      	add	sp, #68	; 0x44
 8010b0a:	ecbd 8b02 	vpop	{d8}
 8010b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b12:	4b8a      	ldr	r3, [pc, #552]	; (8010d3c <_dtoa_r+0x2d4>)
 8010b14:	9301      	str	r3, [sp, #4]
 8010b16:	3303      	adds	r3, #3
 8010b18:	e7f3      	b.n	8010b02 <_dtoa_r+0x9a>
 8010b1a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010b1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b26:	d10c      	bne.n	8010b42 <_dtoa_r+0xda>
 8010b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	6013      	str	r3, [r2, #0]
 8010b2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	f000 84d7 	beq.w	80114e4 <_dtoa_r+0xa7c>
 8010b36:	4b83      	ldr	r3, [pc, #524]	; (8010d44 <_dtoa_r+0x2dc>)
 8010b38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010b3a:	6013      	str	r3, [r2, #0]
 8010b3c:	3b01      	subs	r3, #1
 8010b3e:	9301      	str	r3, [sp, #4]
 8010b40:	e7e1      	b.n	8010b06 <_dtoa_r+0x9e>
 8010b42:	aa0e      	add	r2, sp, #56	; 0x38
 8010b44:	a90f      	add	r1, sp, #60	; 0x3c
 8010b46:	4630      	mov	r0, r6
 8010b48:	eeb0 0b48 	vmov.f64	d0, d8
 8010b4c:	f001 f91a 	bl	8011d84 <__d2b>
 8010b50:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8010b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b56:	4605      	mov	r5, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d046      	beq.n	8010bea <_dtoa_r+0x182>
 8010b5c:	eeb0 7b48 	vmov.f64	d7, d8
 8010b60:	ee18 1a90 	vmov	r1, s17
 8010b64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010b68:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010b6c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010b70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010b74:	2000      	movs	r0, #0
 8010b76:	ee07 1a90 	vmov	s15, r1
 8010b7a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8010b7e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010d18 <_dtoa_r+0x2b0>
 8010b82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010b86:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010d20 <_dtoa_r+0x2b8>
 8010b8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010b8e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010d28 <_dtoa_r+0x2c0>
 8010b92:	ee07 3a90 	vmov	s15, r3
 8010b96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010b9a:	eeb0 7b46 	vmov.f64	d7, d6
 8010b9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010ba2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010ba6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bae:	ee16 ba90 	vmov	fp, s13
 8010bb2:	9009      	str	r0, [sp, #36]	; 0x24
 8010bb4:	d508      	bpl.n	8010bc8 <_dtoa_r+0x160>
 8010bb6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010bba:	eeb4 6b47 	vcmp.f64	d6, d7
 8010bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc2:	bf18      	it	ne
 8010bc4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8010bc8:	f1bb 0f16 	cmp.w	fp, #22
 8010bcc:	d82b      	bhi.n	8010c26 <_dtoa_r+0x1be>
 8010bce:	495e      	ldr	r1, [pc, #376]	; (8010d48 <_dtoa_r+0x2e0>)
 8010bd0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8010bd4:	ed91 7b00 	vldr	d7, [r1]
 8010bd8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be0:	d501      	bpl.n	8010be6 <_dtoa_r+0x17e>
 8010be2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010be6:	2100      	movs	r1, #0
 8010be8:	e01e      	b.n	8010c28 <_dtoa_r+0x1c0>
 8010bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bec:	4413      	add	r3, r2
 8010bee:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8010bf2:	2920      	cmp	r1, #32
 8010bf4:	bfc1      	itttt	gt
 8010bf6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8010bfa:	408c      	lslgt	r4, r1
 8010bfc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8010c00:	fa28 f101 	lsrgt.w	r1, r8, r1
 8010c04:	bfd6      	itet	le
 8010c06:	f1c1 0120 	rsble	r1, r1, #32
 8010c0a:	4321      	orrgt	r1, r4
 8010c0c:	fa08 f101 	lslle.w	r1, r8, r1
 8010c10:	ee07 1a90 	vmov	s15, r1
 8010c14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	ee17 1a90 	vmov	r1, s15
 8010c1e:	2001      	movs	r0, #1
 8010c20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010c24:	e7a7      	b.n	8010b76 <_dtoa_r+0x10e>
 8010c26:	2101      	movs	r1, #1
 8010c28:	1ad2      	subs	r2, r2, r3
 8010c2a:	1e53      	subs	r3, r2, #1
 8010c2c:	9305      	str	r3, [sp, #20]
 8010c2e:	bf45      	ittet	mi
 8010c30:	f1c2 0301 	rsbmi	r3, r2, #1
 8010c34:	9304      	strmi	r3, [sp, #16]
 8010c36:	2300      	movpl	r3, #0
 8010c38:	2300      	movmi	r3, #0
 8010c3a:	bf4c      	ite	mi
 8010c3c:	9305      	strmi	r3, [sp, #20]
 8010c3e:	9304      	strpl	r3, [sp, #16]
 8010c40:	f1bb 0f00 	cmp.w	fp, #0
 8010c44:	910b      	str	r1, [sp, #44]	; 0x2c
 8010c46:	db18      	blt.n	8010c7a <_dtoa_r+0x212>
 8010c48:	9b05      	ldr	r3, [sp, #20]
 8010c4a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010c4e:	445b      	add	r3, fp
 8010c50:	9305      	str	r3, [sp, #20]
 8010c52:	2300      	movs	r3, #0
 8010c54:	9a06      	ldr	r2, [sp, #24]
 8010c56:	2a09      	cmp	r2, #9
 8010c58:	d848      	bhi.n	8010cec <_dtoa_r+0x284>
 8010c5a:	2a05      	cmp	r2, #5
 8010c5c:	bfc4      	itt	gt
 8010c5e:	3a04      	subgt	r2, #4
 8010c60:	9206      	strgt	r2, [sp, #24]
 8010c62:	9a06      	ldr	r2, [sp, #24]
 8010c64:	f1a2 0202 	sub.w	r2, r2, #2
 8010c68:	bfcc      	ite	gt
 8010c6a:	2400      	movgt	r4, #0
 8010c6c:	2401      	movle	r4, #1
 8010c6e:	2a03      	cmp	r2, #3
 8010c70:	d847      	bhi.n	8010d02 <_dtoa_r+0x29a>
 8010c72:	e8df f002 	tbb	[pc, r2]
 8010c76:	2d0b      	.short	0x2d0b
 8010c78:	392b      	.short	0x392b
 8010c7a:	9b04      	ldr	r3, [sp, #16]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	eba3 030b 	sub.w	r3, r3, fp
 8010c82:	9304      	str	r3, [sp, #16]
 8010c84:	920a      	str	r2, [sp, #40]	; 0x28
 8010c86:	f1cb 0300 	rsb	r3, fp, #0
 8010c8a:	e7e3      	b.n	8010c54 <_dtoa_r+0x1ec>
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	9207      	str	r2, [sp, #28]
 8010c90:	9a08      	ldr	r2, [sp, #32]
 8010c92:	2a00      	cmp	r2, #0
 8010c94:	dc38      	bgt.n	8010d08 <_dtoa_r+0x2a0>
 8010c96:	f04f 0a01 	mov.w	sl, #1
 8010c9a:	46d1      	mov	r9, sl
 8010c9c:	4652      	mov	r2, sl
 8010c9e:	f8cd a020 	str.w	sl, [sp, #32]
 8010ca2:	69f7      	ldr	r7, [r6, #28]
 8010ca4:	2100      	movs	r1, #0
 8010ca6:	2004      	movs	r0, #4
 8010ca8:	f100 0c14 	add.w	ip, r0, #20
 8010cac:	4594      	cmp	ip, r2
 8010cae:	d930      	bls.n	8010d12 <_dtoa_r+0x2aa>
 8010cb0:	6079      	str	r1, [r7, #4]
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	930d      	str	r3, [sp, #52]	; 0x34
 8010cb6:	f000 fd43 	bl	8011740 <_Balloc>
 8010cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cbc:	9001      	str	r0, [sp, #4]
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	d145      	bne.n	8010d50 <_dtoa_r+0x2e8>
 8010cc4:	4b21      	ldr	r3, [pc, #132]	; (8010d4c <_dtoa_r+0x2e4>)
 8010cc6:	f240 11af 	movw	r1, #431	; 0x1af
 8010cca:	e6e5      	b.n	8010a98 <_dtoa_r+0x30>
 8010ccc:	2201      	movs	r2, #1
 8010cce:	e7de      	b.n	8010c8e <_dtoa_r+0x226>
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	9207      	str	r2, [sp, #28]
 8010cd4:	9a08      	ldr	r2, [sp, #32]
 8010cd6:	eb0b 0a02 	add.w	sl, fp, r2
 8010cda:	f10a 0901 	add.w	r9, sl, #1
 8010cde:	464a      	mov	r2, r9
 8010ce0:	2a01      	cmp	r2, #1
 8010ce2:	bfb8      	it	lt
 8010ce4:	2201      	movlt	r2, #1
 8010ce6:	e7dc      	b.n	8010ca2 <_dtoa_r+0x23a>
 8010ce8:	2201      	movs	r2, #1
 8010cea:	e7f2      	b.n	8010cd2 <_dtoa_r+0x26a>
 8010cec:	2401      	movs	r4, #1
 8010cee:	2200      	movs	r2, #0
 8010cf0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8010cf4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010cf8:	2100      	movs	r1, #0
 8010cfa:	46d1      	mov	r9, sl
 8010cfc:	2212      	movs	r2, #18
 8010cfe:	9108      	str	r1, [sp, #32]
 8010d00:	e7cf      	b.n	8010ca2 <_dtoa_r+0x23a>
 8010d02:	2201      	movs	r2, #1
 8010d04:	9207      	str	r2, [sp, #28]
 8010d06:	e7f5      	b.n	8010cf4 <_dtoa_r+0x28c>
 8010d08:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010d0c:	46d1      	mov	r9, sl
 8010d0e:	4652      	mov	r2, sl
 8010d10:	e7c7      	b.n	8010ca2 <_dtoa_r+0x23a>
 8010d12:	3101      	adds	r1, #1
 8010d14:	0040      	lsls	r0, r0, #1
 8010d16:	e7c7      	b.n	8010ca8 <_dtoa_r+0x240>
 8010d18:	636f4361 	.word	0x636f4361
 8010d1c:	3fd287a7 	.word	0x3fd287a7
 8010d20:	8b60c8b3 	.word	0x8b60c8b3
 8010d24:	3fc68a28 	.word	0x3fc68a28
 8010d28:	509f79fb 	.word	0x509f79fb
 8010d2c:	3fd34413 	.word	0x3fd34413
 8010d30:	08012b61 	.word	0x08012b61
 8010d34:	08012b78 	.word	0x08012b78
 8010d38:	7ff00000 	.word	0x7ff00000
 8010d3c:	08012b5d 	.word	0x08012b5d
 8010d40:	08012b54 	.word	0x08012b54
 8010d44:	08012b31 	.word	0x08012b31
 8010d48:	08012c68 	.word	0x08012c68
 8010d4c:	08012bd0 	.word	0x08012bd0
 8010d50:	69f2      	ldr	r2, [r6, #28]
 8010d52:	9901      	ldr	r1, [sp, #4]
 8010d54:	6011      	str	r1, [r2, #0]
 8010d56:	f1b9 0f0e 	cmp.w	r9, #14
 8010d5a:	d86c      	bhi.n	8010e36 <_dtoa_r+0x3ce>
 8010d5c:	2c00      	cmp	r4, #0
 8010d5e:	d06a      	beq.n	8010e36 <_dtoa_r+0x3ce>
 8010d60:	f1bb 0f00 	cmp.w	fp, #0
 8010d64:	f340 80a0 	ble.w	8010ea8 <_dtoa_r+0x440>
 8010d68:	4ac1      	ldr	r2, [pc, #772]	; (8011070 <_dtoa_r+0x608>)
 8010d6a:	f00b 010f 	and.w	r1, fp, #15
 8010d6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010d72:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010d76:	ed92 7b00 	vldr	d7, [r2]
 8010d7a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8010d7e:	f000 8087 	beq.w	8010e90 <_dtoa_r+0x428>
 8010d82:	49bc      	ldr	r1, [pc, #752]	; (8011074 <_dtoa_r+0x60c>)
 8010d84:	ed91 6b08 	vldr	d6, [r1, #32]
 8010d88:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010d8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010d90:	f002 020f 	and.w	r2, r2, #15
 8010d94:	2103      	movs	r1, #3
 8010d96:	48b7      	ldr	r0, [pc, #732]	; (8011074 <_dtoa_r+0x60c>)
 8010d98:	2a00      	cmp	r2, #0
 8010d9a:	d17b      	bne.n	8010e94 <_dtoa_r+0x42c>
 8010d9c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010da0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010da4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010daa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010dae:	2a00      	cmp	r2, #0
 8010db0:	f000 80a0 	beq.w	8010ef4 <_dtoa_r+0x48c>
 8010db4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010db8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc0:	f140 8098 	bpl.w	8010ef4 <_dtoa_r+0x48c>
 8010dc4:	f1b9 0f00 	cmp.w	r9, #0
 8010dc8:	f000 8094 	beq.w	8010ef4 <_dtoa_r+0x48c>
 8010dcc:	f1ba 0f00 	cmp.w	sl, #0
 8010dd0:	dd2f      	ble.n	8010e32 <_dtoa_r+0x3ca>
 8010dd2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010dd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010dda:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010dde:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8010de2:	3101      	adds	r1, #1
 8010de4:	4654      	mov	r4, sl
 8010de6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010dea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010dee:	ee07 1a90 	vmov	s15, r1
 8010df2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010df6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010dfa:	ee15 7a90 	vmov	r7, s11
 8010dfe:	ec51 0b15 	vmov	r0, r1, d5
 8010e02:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8010e06:	2c00      	cmp	r4, #0
 8010e08:	d177      	bne.n	8010efa <_dtoa_r+0x492>
 8010e0a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010e0e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010e12:	ec41 0b17 	vmov	d7, r0, r1
 8010e16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e1e:	f300 826a 	bgt.w	80112f6 <_dtoa_r+0x88e>
 8010e22:	eeb1 7b47 	vneg.f64	d7, d7
 8010e26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e2e:	f100 8260 	bmi.w	80112f2 <_dtoa_r+0x88a>
 8010e32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010e36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010e38:	2a00      	cmp	r2, #0
 8010e3a:	f2c0 811d 	blt.w	8011078 <_dtoa_r+0x610>
 8010e3e:	f1bb 0f0e 	cmp.w	fp, #14
 8010e42:	f300 8119 	bgt.w	8011078 <_dtoa_r+0x610>
 8010e46:	4b8a      	ldr	r3, [pc, #552]	; (8011070 <_dtoa_r+0x608>)
 8010e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010e4c:	ed93 6b00 	vldr	d6, [r3]
 8010e50:	9b08      	ldr	r3, [sp, #32]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f280 80b7 	bge.w	8010fc6 <_dtoa_r+0x55e>
 8010e58:	f1b9 0f00 	cmp.w	r9, #0
 8010e5c:	f300 80b3 	bgt.w	8010fc6 <_dtoa_r+0x55e>
 8010e60:	f040 8246 	bne.w	80112f0 <_dtoa_r+0x888>
 8010e64:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010e68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010e6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e78:	464c      	mov	r4, r9
 8010e7a:	464f      	mov	r7, r9
 8010e7c:	f280 821c 	bge.w	80112b8 <_dtoa_r+0x850>
 8010e80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010e84:	2331      	movs	r3, #49	; 0x31
 8010e86:	f808 3b01 	strb.w	r3, [r8], #1
 8010e8a:	f10b 0b01 	add.w	fp, fp, #1
 8010e8e:	e218      	b.n	80112c2 <_dtoa_r+0x85a>
 8010e90:	2102      	movs	r1, #2
 8010e92:	e780      	b.n	8010d96 <_dtoa_r+0x32e>
 8010e94:	07d4      	lsls	r4, r2, #31
 8010e96:	d504      	bpl.n	8010ea2 <_dtoa_r+0x43a>
 8010e98:	ed90 6b00 	vldr	d6, [r0]
 8010e9c:	3101      	adds	r1, #1
 8010e9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ea2:	1052      	asrs	r2, r2, #1
 8010ea4:	3008      	adds	r0, #8
 8010ea6:	e777      	b.n	8010d98 <_dtoa_r+0x330>
 8010ea8:	d022      	beq.n	8010ef0 <_dtoa_r+0x488>
 8010eaa:	f1cb 0200 	rsb	r2, fp, #0
 8010eae:	4970      	ldr	r1, [pc, #448]	; (8011070 <_dtoa_r+0x608>)
 8010eb0:	f002 000f 	and.w	r0, r2, #15
 8010eb4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010eb8:	ed91 7b00 	vldr	d7, [r1]
 8010ebc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010ec0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ec4:	486b      	ldr	r0, [pc, #428]	; (8011074 <_dtoa_r+0x60c>)
 8010ec6:	1112      	asrs	r2, r2, #4
 8010ec8:	2400      	movs	r4, #0
 8010eca:	2102      	movs	r1, #2
 8010ecc:	b92a      	cbnz	r2, 8010eda <_dtoa_r+0x472>
 8010ece:	2c00      	cmp	r4, #0
 8010ed0:	f43f af6a 	beq.w	8010da8 <_dtoa_r+0x340>
 8010ed4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ed8:	e766      	b.n	8010da8 <_dtoa_r+0x340>
 8010eda:	07d7      	lsls	r7, r2, #31
 8010edc:	d505      	bpl.n	8010eea <_dtoa_r+0x482>
 8010ede:	ed90 6b00 	vldr	d6, [r0]
 8010ee2:	3101      	adds	r1, #1
 8010ee4:	2401      	movs	r4, #1
 8010ee6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010eea:	1052      	asrs	r2, r2, #1
 8010eec:	3008      	adds	r0, #8
 8010eee:	e7ed      	b.n	8010ecc <_dtoa_r+0x464>
 8010ef0:	2102      	movs	r1, #2
 8010ef2:	e759      	b.n	8010da8 <_dtoa_r+0x340>
 8010ef4:	465a      	mov	r2, fp
 8010ef6:	464c      	mov	r4, r9
 8010ef8:	e775      	b.n	8010de6 <_dtoa_r+0x37e>
 8010efa:	ec41 0b17 	vmov	d7, r0, r1
 8010efe:	495c      	ldr	r1, [pc, #368]	; (8011070 <_dtoa_r+0x608>)
 8010f00:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8010f04:	ed11 4b02 	vldr	d4, [r1, #-8]
 8010f08:	9901      	ldr	r1, [sp, #4]
 8010f0a:	440c      	add	r4, r1
 8010f0c:	9907      	ldr	r1, [sp, #28]
 8010f0e:	b351      	cbz	r1, 8010f66 <_dtoa_r+0x4fe>
 8010f10:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010f14:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010f18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010f1c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010f20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010f24:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010f28:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010f2c:	ee14 1a90 	vmov	r1, s9
 8010f30:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010f34:	3130      	adds	r1, #48	; 0x30
 8010f36:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010f3a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f42:	f808 1b01 	strb.w	r1, [r8], #1
 8010f46:	d439      	bmi.n	8010fbc <_dtoa_r+0x554>
 8010f48:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010f4c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f54:	d472      	bmi.n	801103c <_dtoa_r+0x5d4>
 8010f56:	45a0      	cmp	r8, r4
 8010f58:	f43f af6b 	beq.w	8010e32 <_dtoa_r+0x3ca>
 8010f5c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010f60:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010f64:	e7e0      	b.n	8010f28 <_dtoa_r+0x4c0>
 8010f66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010f6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010f6e:	4620      	mov	r0, r4
 8010f70:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010f74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010f78:	ee14 1a90 	vmov	r1, s9
 8010f7c:	3130      	adds	r1, #48	; 0x30
 8010f7e:	f808 1b01 	strb.w	r1, [r8], #1
 8010f82:	45a0      	cmp	r8, r4
 8010f84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010f88:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010f8c:	d118      	bne.n	8010fc0 <_dtoa_r+0x558>
 8010f8e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010f92:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010f96:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9e:	dc4d      	bgt.n	801103c <_dtoa_r+0x5d4>
 8010fa0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010fa4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fac:	f57f af41 	bpl.w	8010e32 <_dtoa_r+0x3ca>
 8010fb0:	4680      	mov	r8, r0
 8010fb2:	3801      	subs	r0, #1
 8010fb4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010fb8:	2b30      	cmp	r3, #48	; 0x30
 8010fba:	d0f9      	beq.n	8010fb0 <_dtoa_r+0x548>
 8010fbc:	4693      	mov	fp, r2
 8010fbe:	e02a      	b.n	8011016 <_dtoa_r+0x5ae>
 8010fc0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010fc4:	e7d6      	b.n	8010f74 <_dtoa_r+0x50c>
 8010fc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010fca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010fce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010fd2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010fd6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010fda:	ee15 3a10 	vmov	r3, s10
 8010fde:	3330      	adds	r3, #48	; 0x30
 8010fe0:	f808 3b01 	strb.w	r3, [r8], #1
 8010fe4:	9b01      	ldr	r3, [sp, #4]
 8010fe6:	eba8 0303 	sub.w	r3, r8, r3
 8010fea:	4599      	cmp	r9, r3
 8010fec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010ff0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010ff4:	d133      	bne.n	801105e <_dtoa_r+0x5f6>
 8010ff6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010ffa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011002:	dc1a      	bgt.n	801103a <_dtoa_r+0x5d2>
 8011004:	eeb4 7b46 	vcmp.f64	d7, d6
 8011008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100c:	d103      	bne.n	8011016 <_dtoa_r+0x5ae>
 801100e:	ee15 3a10 	vmov	r3, s10
 8011012:	07d9      	lsls	r1, r3, #31
 8011014:	d411      	bmi.n	801103a <_dtoa_r+0x5d2>
 8011016:	4629      	mov	r1, r5
 8011018:	4630      	mov	r0, r6
 801101a:	f000 fbd1 	bl	80117c0 <_Bfree>
 801101e:	2300      	movs	r3, #0
 8011020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011022:	f888 3000 	strb.w	r3, [r8]
 8011026:	f10b 0301 	add.w	r3, fp, #1
 801102a:	6013      	str	r3, [r2, #0]
 801102c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801102e:	2b00      	cmp	r3, #0
 8011030:	f43f ad69 	beq.w	8010b06 <_dtoa_r+0x9e>
 8011034:	f8c3 8000 	str.w	r8, [r3]
 8011038:	e565      	b.n	8010b06 <_dtoa_r+0x9e>
 801103a:	465a      	mov	r2, fp
 801103c:	4643      	mov	r3, r8
 801103e:	4698      	mov	r8, r3
 8011040:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8011044:	2939      	cmp	r1, #57	; 0x39
 8011046:	d106      	bne.n	8011056 <_dtoa_r+0x5ee>
 8011048:	9901      	ldr	r1, [sp, #4]
 801104a:	4299      	cmp	r1, r3
 801104c:	d1f7      	bne.n	801103e <_dtoa_r+0x5d6>
 801104e:	9801      	ldr	r0, [sp, #4]
 8011050:	2130      	movs	r1, #48	; 0x30
 8011052:	3201      	adds	r2, #1
 8011054:	7001      	strb	r1, [r0, #0]
 8011056:	7819      	ldrb	r1, [r3, #0]
 8011058:	3101      	adds	r1, #1
 801105a:	7019      	strb	r1, [r3, #0]
 801105c:	e7ae      	b.n	8010fbc <_dtoa_r+0x554>
 801105e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011062:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801106a:	d1b2      	bne.n	8010fd2 <_dtoa_r+0x56a>
 801106c:	e7d3      	b.n	8011016 <_dtoa_r+0x5ae>
 801106e:	bf00      	nop
 8011070:	08012c68 	.word	0x08012c68
 8011074:	08012c40 	.word	0x08012c40
 8011078:	9907      	ldr	r1, [sp, #28]
 801107a:	2900      	cmp	r1, #0
 801107c:	f000 80d0 	beq.w	8011220 <_dtoa_r+0x7b8>
 8011080:	9906      	ldr	r1, [sp, #24]
 8011082:	2901      	cmp	r1, #1
 8011084:	f300 80b4 	bgt.w	80111f0 <_dtoa_r+0x788>
 8011088:	9909      	ldr	r1, [sp, #36]	; 0x24
 801108a:	2900      	cmp	r1, #0
 801108c:	f000 80ac 	beq.w	80111e8 <_dtoa_r+0x780>
 8011090:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011094:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011098:	461c      	mov	r4, r3
 801109a:	9309      	str	r3, [sp, #36]	; 0x24
 801109c:	9b04      	ldr	r3, [sp, #16]
 801109e:	4413      	add	r3, r2
 80110a0:	9304      	str	r3, [sp, #16]
 80110a2:	9b05      	ldr	r3, [sp, #20]
 80110a4:	2101      	movs	r1, #1
 80110a6:	4413      	add	r3, r2
 80110a8:	4630      	mov	r0, r6
 80110aa:	9305      	str	r3, [sp, #20]
 80110ac:	f000 fc3e 	bl	801192c <__i2b>
 80110b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110b2:	4607      	mov	r7, r0
 80110b4:	f1b8 0f00 	cmp.w	r8, #0
 80110b8:	d00d      	beq.n	80110d6 <_dtoa_r+0x66e>
 80110ba:	9a05      	ldr	r2, [sp, #20]
 80110bc:	2a00      	cmp	r2, #0
 80110be:	dd0a      	ble.n	80110d6 <_dtoa_r+0x66e>
 80110c0:	4542      	cmp	r2, r8
 80110c2:	9904      	ldr	r1, [sp, #16]
 80110c4:	bfa8      	it	ge
 80110c6:	4642      	movge	r2, r8
 80110c8:	1a89      	subs	r1, r1, r2
 80110ca:	9104      	str	r1, [sp, #16]
 80110cc:	9905      	ldr	r1, [sp, #20]
 80110ce:	eba8 0802 	sub.w	r8, r8, r2
 80110d2:	1a8a      	subs	r2, r1, r2
 80110d4:	9205      	str	r2, [sp, #20]
 80110d6:	b303      	cbz	r3, 801111a <_dtoa_r+0x6b2>
 80110d8:	9a07      	ldr	r2, [sp, #28]
 80110da:	2a00      	cmp	r2, #0
 80110dc:	f000 80a5 	beq.w	801122a <_dtoa_r+0x7c2>
 80110e0:	2c00      	cmp	r4, #0
 80110e2:	dd13      	ble.n	801110c <_dtoa_r+0x6a4>
 80110e4:	4639      	mov	r1, r7
 80110e6:	4622      	mov	r2, r4
 80110e8:	4630      	mov	r0, r6
 80110ea:	930d      	str	r3, [sp, #52]	; 0x34
 80110ec:	f000 fcde 	bl	8011aac <__pow5mult>
 80110f0:	462a      	mov	r2, r5
 80110f2:	4601      	mov	r1, r0
 80110f4:	4607      	mov	r7, r0
 80110f6:	4630      	mov	r0, r6
 80110f8:	f000 fc2e 	bl	8011958 <__multiply>
 80110fc:	4629      	mov	r1, r5
 80110fe:	9009      	str	r0, [sp, #36]	; 0x24
 8011100:	4630      	mov	r0, r6
 8011102:	f000 fb5d 	bl	80117c0 <_Bfree>
 8011106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801110a:	4615      	mov	r5, r2
 801110c:	1b1a      	subs	r2, r3, r4
 801110e:	d004      	beq.n	801111a <_dtoa_r+0x6b2>
 8011110:	4629      	mov	r1, r5
 8011112:	4630      	mov	r0, r6
 8011114:	f000 fcca 	bl	8011aac <__pow5mult>
 8011118:	4605      	mov	r5, r0
 801111a:	2101      	movs	r1, #1
 801111c:	4630      	mov	r0, r6
 801111e:	f000 fc05 	bl	801192c <__i2b>
 8011122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011124:	2b00      	cmp	r3, #0
 8011126:	4604      	mov	r4, r0
 8011128:	f340 8081 	ble.w	801122e <_dtoa_r+0x7c6>
 801112c:	461a      	mov	r2, r3
 801112e:	4601      	mov	r1, r0
 8011130:	4630      	mov	r0, r6
 8011132:	f000 fcbb 	bl	8011aac <__pow5mult>
 8011136:	9b06      	ldr	r3, [sp, #24]
 8011138:	2b01      	cmp	r3, #1
 801113a:	4604      	mov	r4, r0
 801113c:	dd7a      	ble.n	8011234 <_dtoa_r+0x7cc>
 801113e:	2300      	movs	r3, #0
 8011140:	9309      	str	r3, [sp, #36]	; 0x24
 8011142:	6922      	ldr	r2, [r4, #16]
 8011144:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011148:	6910      	ldr	r0, [r2, #16]
 801114a:	f000 fba1 	bl	8011890 <__hi0bits>
 801114e:	f1c0 0020 	rsb	r0, r0, #32
 8011152:	9b05      	ldr	r3, [sp, #20]
 8011154:	4418      	add	r0, r3
 8011156:	f010 001f 	ands.w	r0, r0, #31
 801115a:	f000 8093 	beq.w	8011284 <_dtoa_r+0x81c>
 801115e:	f1c0 0220 	rsb	r2, r0, #32
 8011162:	2a04      	cmp	r2, #4
 8011164:	f340 8085 	ble.w	8011272 <_dtoa_r+0x80a>
 8011168:	9b04      	ldr	r3, [sp, #16]
 801116a:	f1c0 001c 	rsb	r0, r0, #28
 801116e:	4403      	add	r3, r0
 8011170:	9304      	str	r3, [sp, #16]
 8011172:	9b05      	ldr	r3, [sp, #20]
 8011174:	4480      	add	r8, r0
 8011176:	4403      	add	r3, r0
 8011178:	9305      	str	r3, [sp, #20]
 801117a:	9b04      	ldr	r3, [sp, #16]
 801117c:	2b00      	cmp	r3, #0
 801117e:	dd05      	ble.n	801118c <_dtoa_r+0x724>
 8011180:	4629      	mov	r1, r5
 8011182:	461a      	mov	r2, r3
 8011184:	4630      	mov	r0, r6
 8011186:	f000 fceb 	bl	8011b60 <__lshift>
 801118a:	4605      	mov	r5, r0
 801118c:	9b05      	ldr	r3, [sp, #20]
 801118e:	2b00      	cmp	r3, #0
 8011190:	dd05      	ble.n	801119e <_dtoa_r+0x736>
 8011192:	4621      	mov	r1, r4
 8011194:	461a      	mov	r2, r3
 8011196:	4630      	mov	r0, r6
 8011198:	f000 fce2 	bl	8011b60 <__lshift>
 801119c:	4604      	mov	r4, r0
 801119e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d071      	beq.n	8011288 <_dtoa_r+0x820>
 80111a4:	4621      	mov	r1, r4
 80111a6:	4628      	mov	r0, r5
 80111a8:	f000 fd46 	bl	8011c38 <__mcmp>
 80111ac:	2800      	cmp	r0, #0
 80111ae:	da6b      	bge.n	8011288 <_dtoa_r+0x820>
 80111b0:	2300      	movs	r3, #0
 80111b2:	4629      	mov	r1, r5
 80111b4:	220a      	movs	r2, #10
 80111b6:	4630      	mov	r0, r6
 80111b8:	f000 fb24 	bl	8011804 <__multadd>
 80111bc:	9b07      	ldr	r3, [sp, #28]
 80111be:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80111c2:	4605      	mov	r5, r0
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	f000 8197 	beq.w	80114f8 <_dtoa_r+0xa90>
 80111ca:	4639      	mov	r1, r7
 80111cc:	2300      	movs	r3, #0
 80111ce:	220a      	movs	r2, #10
 80111d0:	4630      	mov	r0, r6
 80111d2:	f000 fb17 	bl	8011804 <__multadd>
 80111d6:	f1ba 0f00 	cmp.w	sl, #0
 80111da:	4607      	mov	r7, r0
 80111dc:	f300 8093 	bgt.w	8011306 <_dtoa_r+0x89e>
 80111e0:	9b06      	ldr	r3, [sp, #24]
 80111e2:	2b02      	cmp	r3, #2
 80111e4:	dc57      	bgt.n	8011296 <_dtoa_r+0x82e>
 80111e6:	e08e      	b.n	8011306 <_dtoa_r+0x89e>
 80111e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80111ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80111ee:	e751      	b.n	8011094 <_dtoa_r+0x62c>
 80111f0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80111f4:	42a3      	cmp	r3, r4
 80111f6:	bfbf      	itttt	lt
 80111f8:	1ae2      	sublt	r2, r4, r3
 80111fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80111fc:	189b      	addlt	r3, r3, r2
 80111fe:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011200:	bfae      	itee	ge
 8011202:	1b1c      	subge	r4, r3, r4
 8011204:	4623      	movlt	r3, r4
 8011206:	2400      	movlt	r4, #0
 8011208:	f1b9 0f00 	cmp.w	r9, #0
 801120c:	bfb5      	itete	lt
 801120e:	9a04      	ldrlt	r2, [sp, #16]
 8011210:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8011214:	eba2 0809 	sublt.w	r8, r2, r9
 8011218:	464a      	movge	r2, r9
 801121a:	bfb8      	it	lt
 801121c:	2200      	movlt	r2, #0
 801121e:	e73c      	b.n	801109a <_dtoa_r+0x632>
 8011220:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011224:	9f07      	ldr	r7, [sp, #28]
 8011226:	461c      	mov	r4, r3
 8011228:	e744      	b.n	80110b4 <_dtoa_r+0x64c>
 801122a:	461a      	mov	r2, r3
 801122c:	e770      	b.n	8011110 <_dtoa_r+0x6a8>
 801122e:	9b06      	ldr	r3, [sp, #24]
 8011230:	2b01      	cmp	r3, #1
 8011232:	dc18      	bgt.n	8011266 <_dtoa_r+0x7fe>
 8011234:	9b02      	ldr	r3, [sp, #8]
 8011236:	b9b3      	cbnz	r3, 8011266 <_dtoa_r+0x7fe>
 8011238:	9b03      	ldr	r3, [sp, #12]
 801123a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801123e:	b9a2      	cbnz	r2, 801126a <_dtoa_r+0x802>
 8011240:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011244:	0d12      	lsrs	r2, r2, #20
 8011246:	0512      	lsls	r2, r2, #20
 8011248:	b18a      	cbz	r2, 801126e <_dtoa_r+0x806>
 801124a:	9b04      	ldr	r3, [sp, #16]
 801124c:	3301      	adds	r3, #1
 801124e:	9304      	str	r3, [sp, #16]
 8011250:	9b05      	ldr	r3, [sp, #20]
 8011252:	3301      	adds	r3, #1
 8011254:	9305      	str	r3, [sp, #20]
 8011256:	2301      	movs	r3, #1
 8011258:	9309      	str	r3, [sp, #36]	; 0x24
 801125a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801125c:	2b00      	cmp	r3, #0
 801125e:	f47f af70 	bne.w	8011142 <_dtoa_r+0x6da>
 8011262:	2001      	movs	r0, #1
 8011264:	e775      	b.n	8011152 <_dtoa_r+0x6ea>
 8011266:	2300      	movs	r3, #0
 8011268:	e7f6      	b.n	8011258 <_dtoa_r+0x7f0>
 801126a:	9b02      	ldr	r3, [sp, #8]
 801126c:	e7f4      	b.n	8011258 <_dtoa_r+0x7f0>
 801126e:	9209      	str	r2, [sp, #36]	; 0x24
 8011270:	e7f3      	b.n	801125a <_dtoa_r+0x7f2>
 8011272:	d082      	beq.n	801117a <_dtoa_r+0x712>
 8011274:	9b04      	ldr	r3, [sp, #16]
 8011276:	321c      	adds	r2, #28
 8011278:	4413      	add	r3, r2
 801127a:	9304      	str	r3, [sp, #16]
 801127c:	9b05      	ldr	r3, [sp, #20]
 801127e:	4490      	add	r8, r2
 8011280:	4413      	add	r3, r2
 8011282:	e779      	b.n	8011178 <_dtoa_r+0x710>
 8011284:	4602      	mov	r2, r0
 8011286:	e7f5      	b.n	8011274 <_dtoa_r+0x80c>
 8011288:	f1b9 0f00 	cmp.w	r9, #0
 801128c:	dc36      	bgt.n	80112fc <_dtoa_r+0x894>
 801128e:	9b06      	ldr	r3, [sp, #24]
 8011290:	2b02      	cmp	r3, #2
 8011292:	dd33      	ble.n	80112fc <_dtoa_r+0x894>
 8011294:	46ca      	mov	sl, r9
 8011296:	f1ba 0f00 	cmp.w	sl, #0
 801129a:	d10d      	bne.n	80112b8 <_dtoa_r+0x850>
 801129c:	4621      	mov	r1, r4
 801129e:	4653      	mov	r3, sl
 80112a0:	2205      	movs	r2, #5
 80112a2:	4630      	mov	r0, r6
 80112a4:	f000 faae 	bl	8011804 <__multadd>
 80112a8:	4601      	mov	r1, r0
 80112aa:	4604      	mov	r4, r0
 80112ac:	4628      	mov	r0, r5
 80112ae:	f000 fcc3 	bl	8011c38 <__mcmp>
 80112b2:	2800      	cmp	r0, #0
 80112b4:	f73f ade4 	bgt.w	8010e80 <_dtoa_r+0x418>
 80112b8:	9b08      	ldr	r3, [sp, #32]
 80112ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80112be:	ea6f 0b03 	mvn.w	fp, r3
 80112c2:	f04f 0900 	mov.w	r9, #0
 80112c6:	4621      	mov	r1, r4
 80112c8:	4630      	mov	r0, r6
 80112ca:	f000 fa79 	bl	80117c0 <_Bfree>
 80112ce:	2f00      	cmp	r7, #0
 80112d0:	f43f aea1 	beq.w	8011016 <_dtoa_r+0x5ae>
 80112d4:	f1b9 0f00 	cmp.w	r9, #0
 80112d8:	d005      	beq.n	80112e6 <_dtoa_r+0x87e>
 80112da:	45b9      	cmp	r9, r7
 80112dc:	d003      	beq.n	80112e6 <_dtoa_r+0x87e>
 80112de:	4649      	mov	r1, r9
 80112e0:	4630      	mov	r0, r6
 80112e2:	f000 fa6d 	bl	80117c0 <_Bfree>
 80112e6:	4639      	mov	r1, r7
 80112e8:	4630      	mov	r0, r6
 80112ea:	f000 fa69 	bl	80117c0 <_Bfree>
 80112ee:	e692      	b.n	8011016 <_dtoa_r+0x5ae>
 80112f0:	2400      	movs	r4, #0
 80112f2:	4627      	mov	r7, r4
 80112f4:	e7e0      	b.n	80112b8 <_dtoa_r+0x850>
 80112f6:	4693      	mov	fp, r2
 80112f8:	4627      	mov	r7, r4
 80112fa:	e5c1      	b.n	8010e80 <_dtoa_r+0x418>
 80112fc:	9b07      	ldr	r3, [sp, #28]
 80112fe:	46ca      	mov	sl, r9
 8011300:	2b00      	cmp	r3, #0
 8011302:	f000 8100 	beq.w	8011506 <_dtoa_r+0xa9e>
 8011306:	f1b8 0f00 	cmp.w	r8, #0
 801130a:	dd05      	ble.n	8011318 <_dtoa_r+0x8b0>
 801130c:	4639      	mov	r1, r7
 801130e:	4642      	mov	r2, r8
 8011310:	4630      	mov	r0, r6
 8011312:	f000 fc25 	bl	8011b60 <__lshift>
 8011316:	4607      	mov	r7, r0
 8011318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801131a:	2b00      	cmp	r3, #0
 801131c:	d05d      	beq.n	80113da <_dtoa_r+0x972>
 801131e:	6879      	ldr	r1, [r7, #4]
 8011320:	4630      	mov	r0, r6
 8011322:	f000 fa0d 	bl	8011740 <_Balloc>
 8011326:	4680      	mov	r8, r0
 8011328:	b928      	cbnz	r0, 8011336 <_dtoa_r+0x8ce>
 801132a:	4b82      	ldr	r3, [pc, #520]	; (8011534 <_dtoa_r+0xacc>)
 801132c:	4602      	mov	r2, r0
 801132e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011332:	f7ff bbb1 	b.w	8010a98 <_dtoa_r+0x30>
 8011336:	693a      	ldr	r2, [r7, #16]
 8011338:	3202      	adds	r2, #2
 801133a:	0092      	lsls	r2, r2, #2
 801133c:	f107 010c 	add.w	r1, r7, #12
 8011340:	300c      	adds	r0, #12
 8011342:	f7ff faf8 	bl	8010936 <memcpy>
 8011346:	2201      	movs	r2, #1
 8011348:	4641      	mov	r1, r8
 801134a:	4630      	mov	r0, r6
 801134c:	f000 fc08 	bl	8011b60 <__lshift>
 8011350:	9b01      	ldr	r3, [sp, #4]
 8011352:	3301      	adds	r3, #1
 8011354:	9304      	str	r3, [sp, #16]
 8011356:	9b01      	ldr	r3, [sp, #4]
 8011358:	4453      	add	r3, sl
 801135a:	9308      	str	r3, [sp, #32]
 801135c:	9b02      	ldr	r3, [sp, #8]
 801135e:	f003 0301 	and.w	r3, r3, #1
 8011362:	46b9      	mov	r9, r7
 8011364:	9307      	str	r3, [sp, #28]
 8011366:	4607      	mov	r7, r0
 8011368:	9b04      	ldr	r3, [sp, #16]
 801136a:	4621      	mov	r1, r4
 801136c:	3b01      	subs	r3, #1
 801136e:	4628      	mov	r0, r5
 8011370:	9302      	str	r3, [sp, #8]
 8011372:	f7ff faee 	bl	8010952 <quorem>
 8011376:	4603      	mov	r3, r0
 8011378:	3330      	adds	r3, #48	; 0x30
 801137a:	9005      	str	r0, [sp, #20]
 801137c:	4649      	mov	r1, r9
 801137e:	4628      	mov	r0, r5
 8011380:	9309      	str	r3, [sp, #36]	; 0x24
 8011382:	f000 fc59 	bl	8011c38 <__mcmp>
 8011386:	463a      	mov	r2, r7
 8011388:	4682      	mov	sl, r0
 801138a:	4621      	mov	r1, r4
 801138c:	4630      	mov	r0, r6
 801138e:	f000 fc6f 	bl	8011c70 <__mdiff>
 8011392:	68c2      	ldr	r2, [r0, #12]
 8011394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011396:	4680      	mov	r8, r0
 8011398:	bb0a      	cbnz	r2, 80113de <_dtoa_r+0x976>
 801139a:	4601      	mov	r1, r0
 801139c:	4628      	mov	r0, r5
 801139e:	f000 fc4b 	bl	8011c38 <__mcmp>
 80113a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113a4:	4602      	mov	r2, r0
 80113a6:	4641      	mov	r1, r8
 80113a8:	4630      	mov	r0, r6
 80113aa:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80113ae:	f000 fa07 	bl	80117c0 <_Bfree>
 80113b2:	9b06      	ldr	r3, [sp, #24]
 80113b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113b6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80113ba:	ea43 0102 	orr.w	r1, r3, r2
 80113be:	9b07      	ldr	r3, [sp, #28]
 80113c0:	4319      	orrs	r1, r3
 80113c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113c4:	d10d      	bne.n	80113e2 <_dtoa_r+0x97a>
 80113c6:	2b39      	cmp	r3, #57	; 0x39
 80113c8:	d029      	beq.n	801141e <_dtoa_r+0x9b6>
 80113ca:	f1ba 0f00 	cmp.w	sl, #0
 80113ce:	dd01      	ble.n	80113d4 <_dtoa_r+0x96c>
 80113d0:	9b05      	ldr	r3, [sp, #20]
 80113d2:	3331      	adds	r3, #49	; 0x31
 80113d4:	9a02      	ldr	r2, [sp, #8]
 80113d6:	7013      	strb	r3, [r2, #0]
 80113d8:	e775      	b.n	80112c6 <_dtoa_r+0x85e>
 80113da:	4638      	mov	r0, r7
 80113dc:	e7b8      	b.n	8011350 <_dtoa_r+0x8e8>
 80113de:	2201      	movs	r2, #1
 80113e0:	e7e1      	b.n	80113a6 <_dtoa_r+0x93e>
 80113e2:	f1ba 0f00 	cmp.w	sl, #0
 80113e6:	db06      	blt.n	80113f6 <_dtoa_r+0x98e>
 80113e8:	9906      	ldr	r1, [sp, #24]
 80113ea:	ea41 0a0a 	orr.w	sl, r1, sl
 80113ee:	9907      	ldr	r1, [sp, #28]
 80113f0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80113f4:	d120      	bne.n	8011438 <_dtoa_r+0x9d0>
 80113f6:	2a00      	cmp	r2, #0
 80113f8:	ddec      	ble.n	80113d4 <_dtoa_r+0x96c>
 80113fa:	4629      	mov	r1, r5
 80113fc:	2201      	movs	r2, #1
 80113fe:	4630      	mov	r0, r6
 8011400:	9304      	str	r3, [sp, #16]
 8011402:	f000 fbad 	bl	8011b60 <__lshift>
 8011406:	4621      	mov	r1, r4
 8011408:	4605      	mov	r5, r0
 801140a:	f000 fc15 	bl	8011c38 <__mcmp>
 801140e:	2800      	cmp	r0, #0
 8011410:	9b04      	ldr	r3, [sp, #16]
 8011412:	dc02      	bgt.n	801141a <_dtoa_r+0x9b2>
 8011414:	d1de      	bne.n	80113d4 <_dtoa_r+0x96c>
 8011416:	07da      	lsls	r2, r3, #31
 8011418:	d5dc      	bpl.n	80113d4 <_dtoa_r+0x96c>
 801141a:	2b39      	cmp	r3, #57	; 0x39
 801141c:	d1d8      	bne.n	80113d0 <_dtoa_r+0x968>
 801141e:	9a02      	ldr	r2, [sp, #8]
 8011420:	2339      	movs	r3, #57	; 0x39
 8011422:	7013      	strb	r3, [r2, #0]
 8011424:	4643      	mov	r3, r8
 8011426:	4698      	mov	r8, r3
 8011428:	3b01      	subs	r3, #1
 801142a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801142e:	2a39      	cmp	r2, #57	; 0x39
 8011430:	d051      	beq.n	80114d6 <_dtoa_r+0xa6e>
 8011432:	3201      	adds	r2, #1
 8011434:	701a      	strb	r2, [r3, #0]
 8011436:	e746      	b.n	80112c6 <_dtoa_r+0x85e>
 8011438:	2a00      	cmp	r2, #0
 801143a:	dd03      	ble.n	8011444 <_dtoa_r+0x9dc>
 801143c:	2b39      	cmp	r3, #57	; 0x39
 801143e:	d0ee      	beq.n	801141e <_dtoa_r+0x9b6>
 8011440:	3301      	adds	r3, #1
 8011442:	e7c7      	b.n	80113d4 <_dtoa_r+0x96c>
 8011444:	9a04      	ldr	r2, [sp, #16]
 8011446:	9908      	ldr	r1, [sp, #32]
 8011448:	f802 3c01 	strb.w	r3, [r2, #-1]
 801144c:	428a      	cmp	r2, r1
 801144e:	d02b      	beq.n	80114a8 <_dtoa_r+0xa40>
 8011450:	4629      	mov	r1, r5
 8011452:	2300      	movs	r3, #0
 8011454:	220a      	movs	r2, #10
 8011456:	4630      	mov	r0, r6
 8011458:	f000 f9d4 	bl	8011804 <__multadd>
 801145c:	45b9      	cmp	r9, r7
 801145e:	4605      	mov	r5, r0
 8011460:	f04f 0300 	mov.w	r3, #0
 8011464:	f04f 020a 	mov.w	r2, #10
 8011468:	4649      	mov	r1, r9
 801146a:	4630      	mov	r0, r6
 801146c:	d107      	bne.n	801147e <_dtoa_r+0xa16>
 801146e:	f000 f9c9 	bl	8011804 <__multadd>
 8011472:	4681      	mov	r9, r0
 8011474:	4607      	mov	r7, r0
 8011476:	9b04      	ldr	r3, [sp, #16]
 8011478:	3301      	adds	r3, #1
 801147a:	9304      	str	r3, [sp, #16]
 801147c:	e774      	b.n	8011368 <_dtoa_r+0x900>
 801147e:	f000 f9c1 	bl	8011804 <__multadd>
 8011482:	4639      	mov	r1, r7
 8011484:	4681      	mov	r9, r0
 8011486:	2300      	movs	r3, #0
 8011488:	220a      	movs	r2, #10
 801148a:	4630      	mov	r0, r6
 801148c:	f000 f9ba 	bl	8011804 <__multadd>
 8011490:	4607      	mov	r7, r0
 8011492:	e7f0      	b.n	8011476 <_dtoa_r+0xa0e>
 8011494:	f1ba 0f00 	cmp.w	sl, #0
 8011498:	9a01      	ldr	r2, [sp, #4]
 801149a:	bfcc      	ite	gt
 801149c:	46d0      	movgt	r8, sl
 801149e:	f04f 0801 	movle.w	r8, #1
 80114a2:	4490      	add	r8, r2
 80114a4:	f04f 0900 	mov.w	r9, #0
 80114a8:	4629      	mov	r1, r5
 80114aa:	2201      	movs	r2, #1
 80114ac:	4630      	mov	r0, r6
 80114ae:	9302      	str	r3, [sp, #8]
 80114b0:	f000 fb56 	bl	8011b60 <__lshift>
 80114b4:	4621      	mov	r1, r4
 80114b6:	4605      	mov	r5, r0
 80114b8:	f000 fbbe 	bl	8011c38 <__mcmp>
 80114bc:	2800      	cmp	r0, #0
 80114be:	dcb1      	bgt.n	8011424 <_dtoa_r+0x9bc>
 80114c0:	d102      	bne.n	80114c8 <_dtoa_r+0xa60>
 80114c2:	9b02      	ldr	r3, [sp, #8]
 80114c4:	07db      	lsls	r3, r3, #31
 80114c6:	d4ad      	bmi.n	8011424 <_dtoa_r+0x9bc>
 80114c8:	4643      	mov	r3, r8
 80114ca:	4698      	mov	r8, r3
 80114cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114d0:	2a30      	cmp	r2, #48	; 0x30
 80114d2:	d0fa      	beq.n	80114ca <_dtoa_r+0xa62>
 80114d4:	e6f7      	b.n	80112c6 <_dtoa_r+0x85e>
 80114d6:	9a01      	ldr	r2, [sp, #4]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d1a4      	bne.n	8011426 <_dtoa_r+0x9be>
 80114dc:	f10b 0b01 	add.w	fp, fp, #1
 80114e0:	2331      	movs	r3, #49	; 0x31
 80114e2:	e778      	b.n	80113d6 <_dtoa_r+0x96e>
 80114e4:	4b14      	ldr	r3, [pc, #80]	; (8011538 <_dtoa_r+0xad0>)
 80114e6:	f7ff bb2a 	b.w	8010b3e <_dtoa_r+0xd6>
 80114ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	f47f ab05 	bne.w	8010afc <_dtoa_r+0x94>
 80114f2:	4b12      	ldr	r3, [pc, #72]	; (801153c <_dtoa_r+0xad4>)
 80114f4:	f7ff bb23 	b.w	8010b3e <_dtoa_r+0xd6>
 80114f8:	f1ba 0f00 	cmp.w	sl, #0
 80114fc:	dc03      	bgt.n	8011506 <_dtoa_r+0xa9e>
 80114fe:	9b06      	ldr	r3, [sp, #24]
 8011500:	2b02      	cmp	r3, #2
 8011502:	f73f aec8 	bgt.w	8011296 <_dtoa_r+0x82e>
 8011506:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801150a:	4621      	mov	r1, r4
 801150c:	4628      	mov	r0, r5
 801150e:	f7ff fa20 	bl	8010952 <quorem>
 8011512:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011516:	f808 3b01 	strb.w	r3, [r8], #1
 801151a:	9a01      	ldr	r2, [sp, #4]
 801151c:	eba8 0202 	sub.w	r2, r8, r2
 8011520:	4592      	cmp	sl, r2
 8011522:	ddb7      	ble.n	8011494 <_dtoa_r+0xa2c>
 8011524:	4629      	mov	r1, r5
 8011526:	2300      	movs	r3, #0
 8011528:	220a      	movs	r2, #10
 801152a:	4630      	mov	r0, r6
 801152c:	f000 f96a 	bl	8011804 <__multadd>
 8011530:	4605      	mov	r5, r0
 8011532:	e7ea      	b.n	801150a <_dtoa_r+0xaa2>
 8011534:	08012bd0 	.word	0x08012bd0
 8011538:	08012b30 	.word	0x08012b30
 801153c:	08012b54 	.word	0x08012b54

08011540 <_free_r>:
 8011540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011542:	2900      	cmp	r1, #0
 8011544:	d044      	beq.n	80115d0 <_free_r+0x90>
 8011546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801154a:	9001      	str	r0, [sp, #4]
 801154c:	2b00      	cmp	r3, #0
 801154e:	f1a1 0404 	sub.w	r4, r1, #4
 8011552:	bfb8      	it	lt
 8011554:	18e4      	addlt	r4, r4, r3
 8011556:	f000 f8e7 	bl	8011728 <__malloc_lock>
 801155a:	4a1e      	ldr	r2, [pc, #120]	; (80115d4 <_free_r+0x94>)
 801155c:	9801      	ldr	r0, [sp, #4]
 801155e:	6813      	ldr	r3, [r2, #0]
 8011560:	b933      	cbnz	r3, 8011570 <_free_r+0x30>
 8011562:	6063      	str	r3, [r4, #4]
 8011564:	6014      	str	r4, [r2, #0]
 8011566:	b003      	add	sp, #12
 8011568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801156c:	f000 b8e2 	b.w	8011734 <__malloc_unlock>
 8011570:	42a3      	cmp	r3, r4
 8011572:	d908      	bls.n	8011586 <_free_r+0x46>
 8011574:	6825      	ldr	r5, [r4, #0]
 8011576:	1961      	adds	r1, r4, r5
 8011578:	428b      	cmp	r3, r1
 801157a:	bf01      	itttt	eq
 801157c:	6819      	ldreq	r1, [r3, #0]
 801157e:	685b      	ldreq	r3, [r3, #4]
 8011580:	1949      	addeq	r1, r1, r5
 8011582:	6021      	streq	r1, [r4, #0]
 8011584:	e7ed      	b.n	8011562 <_free_r+0x22>
 8011586:	461a      	mov	r2, r3
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	b10b      	cbz	r3, 8011590 <_free_r+0x50>
 801158c:	42a3      	cmp	r3, r4
 801158e:	d9fa      	bls.n	8011586 <_free_r+0x46>
 8011590:	6811      	ldr	r1, [r2, #0]
 8011592:	1855      	adds	r5, r2, r1
 8011594:	42a5      	cmp	r5, r4
 8011596:	d10b      	bne.n	80115b0 <_free_r+0x70>
 8011598:	6824      	ldr	r4, [r4, #0]
 801159a:	4421      	add	r1, r4
 801159c:	1854      	adds	r4, r2, r1
 801159e:	42a3      	cmp	r3, r4
 80115a0:	6011      	str	r1, [r2, #0]
 80115a2:	d1e0      	bne.n	8011566 <_free_r+0x26>
 80115a4:	681c      	ldr	r4, [r3, #0]
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	6053      	str	r3, [r2, #4]
 80115aa:	440c      	add	r4, r1
 80115ac:	6014      	str	r4, [r2, #0]
 80115ae:	e7da      	b.n	8011566 <_free_r+0x26>
 80115b0:	d902      	bls.n	80115b8 <_free_r+0x78>
 80115b2:	230c      	movs	r3, #12
 80115b4:	6003      	str	r3, [r0, #0]
 80115b6:	e7d6      	b.n	8011566 <_free_r+0x26>
 80115b8:	6825      	ldr	r5, [r4, #0]
 80115ba:	1961      	adds	r1, r4, r5
 80115bc:	428b      	cmp	r3, r1
 80115be:	bf04      	itt	eq
 80115c0:	6819      	ldreq	r1, [r3, #0]
 80115c2:	685b      	ldreq	r3, [r3, #4]
 80115c4:	6063      	str	r3, [r4, #4]
 80115c6:	bf04      	itt	eq
 80115c8:	1949      	addeq	r1, r1, r5
 80115ca:	6021      	streq	r1, [r4, #0]
 80115cc:	6054      	str	r4, [r2, #4]
 80115ce:	e7ca      	b.n	8011566 <_free_r+0x26>
 80115d0:	b003      	add	sp, #12
 80115d2:	bd30      	pop	{r4, r5, pc}
 80115d4:	240009a8 	.word	0x240009a8

080115d8 <malloc>:
 80115d8:	4b02      	ldr	r3, [pc, #8]	; (80115e4 <malloc+0xc>)
 80115da:	4601      	mov	r1, r0
 80115dc:	6818      	ldr	r0, [r3, #0]
 80115de:	f000 b823 	b.w	8011628 <_malloc_r>
 80115e2:	bf00      	nop
 80115e4:	2400006c 	.word	0x2400006c

080115e8 <sbrk_aligned>:
 80115e8:	b570      	push	{r4, r5, r6, lr}
 80115ea:	4e0e      	ldr	r6, [pc, #56]	; (8011624 <sbrk_aligned+0x3c>)
 80115ec:	460c      	mov	r4, r1
 80115ee:	6831      	ldr	r1, [r6, #0]
 80115f0:	4605      	mov	r5, r0
 80115f2:	b911      	cbnz	r1, 80115fa <sbrk_aligned+0x12>
 80115f4:	f000 fe40 	bl	8012278 <_sbrk_r>
 80115f8:	6030      	str	r0, [r6, #0]
 80115fa:	4621      	mov	r1, r4
 80115fc:	4628      	mov	r0, r5
 80115fe:	f000 fe3b 	bl	8012278 <_sbrk_r>
 8011602:	1c43      	adds	r3, r0, #1
 8011604:	d00a      	beq.n	801161c <sbrk_aligned+0x34>
 8011606:	1cc4      	adds	r4, r0, #3
 8011608:	f024 0403 	bic.w	r4, r4, #3
 801160c:	42a0      	cmp	r0, r4
 801160e:	d007      	beq.n	8011620 <sbrk_aligned+0x38>
 8011610:	1a21      	subs	r1, r4, r0
 8011612:	4628      	mov	r0, r5
 8011614:	f000 fe30 	bl	8012278 <_sbrk_r>
 8011618:	3001      	adds	r0, #1
 801161a:	d101      	bne.n	8011620 <sbrk_aligned+0x38>
 801161c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011620:	4620      	mov	r0, r4
 8011622:	bd70      	pop	{r4, r5, r6, pc}
 8011624:	240009ac 	.word	0x240009ac

08011628 <_malloc_r>:
 8011628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801162c:	1ccd      	adds	r5, r1, #3
 801162e:	f025 0503 	bic.w	r5, r5, #3
 8011632:	3508      	adds	r5, #8
 8011634:	2d0c      	cmp	r5, #12
 8011636:	bf38      	it	cc
 8011638:	250c      	movcc	r5, #12
 801163a:	2d00      	cmp	r5, #0
 801163c:	4607      	mov	r7, r0
 801163e:	db01      	blt.n	8011644 <_malloc_r+0x1c>
 8011640:	42a9      	cmp	r1, r5
 8011642:	d905      	bls.n	8011650 <_malloc_r+0x28>
 8011644:	230c      	movs	r3, #12
 8011646:	603b      	str	r3, [r7, #0]
 8011648:	2600      	movs	r6, #0
 801164a:	4630      	mov	r0, r6
 801164c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011650:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011724 <_malloc_r+0xfc>
 8011654:	f000 f868 	bl	8011728 <__malloc_lock>
 8011658:	f8d8 3000 	ldr.w	r3, [r8]
 801165c:	461c      	mov	r4, r3
 801165e:	bb5c      	cbnz	r4, 80116b8 <_malloc_r+0x90>
 8011660:	4629      	mov	r1, r5
 8011662:	4638      	mov	r0, r7
 8011664:	f7ff ffc0 	bl	80115e8 <sbrk_aligned>
 8011668:	1c43      	adds	r3, r0, #1
 801166a:	4604      	mov	r4, r0
 801166c:	d155      	bne.n	801171a <_malloc_r+0xf2>
 801166e:	f8d8 4000 	ldr.w	r4, [r8]
 8011672:	4626      	mov	r6, r4
 8011674:	2e00      	cmp	r6, #0
 8011676:	d145      	bne.n	8011704 <_malloc_r+0xdc>
 8011678:	2c00      	cmp	r4, #0
 801167a:	d048      	beq.n	801170e <_malloc_r+0xe6>
 801167c:	6823      	ldr	r3, [r4, #0]
 801167e:	4631      	mov	r1, r6
 8011680:	4638      	mov	r0, r7
 8011682:	eb04 0903 	add.w	r9, r4, r3
 8011686:	f000 fdf7 	bl	8012278 <_sbrk_r>
 801168a:	4581      	cmp	r9, r0
 801168c:	d13f      	bne.n	801170e <_malloc_r+0xe6>
 801168e:	6821      	ldr	r1, [r4, #0]
 8011690:	1a6d      	subs	r5, r5, r1
 8011692:	4629      	mov	r1, r5
 8011694:	4638      	mov	r0, r7
 8011696:	f7ff ffa7 	bl	80115e8 <sbrk_aligned>
 801169a:	3001      	adds	r0, #1
 801169c:	d037      	beq.n	801170e <_malloc_r+0xe6>
 801169e:	6823      	ldr	r3, [r4, #0]
 80116a0:	442b      	add	r3, r5
 80116a2:	6023      	str	r3, [r4, #0]
 80116a4:	f8d8 3000 	ldr.w	r3, [r8]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d038      	beq.n	801171e <_malloc_r+0xf6>
 80116ac:	685a      	ldr	r2, [r3, #4]
 80116ae:	42a2      	cmp	r2, r4
 80116b0:	d12b      	bne.n	801170a <_malloc_r+0xe2>
 80116b2:	2200      	movs	r2, #0
 80116b4:	605a      	str	r2, [r3, #4]
 80116b6:	e00f      	b.n	80116d8 <_malloc_r+0xb0>
 80116b8:	6822      	ldr	r2, [r4, #0]
 80116ba:	1b52      	subs	r2, r2, r5
 80116bc:	d41f      	bmi.n	80116fe <_malloc_r+0xd6>
 80116be:	2a0b      	cmp	r2, #11
 80116c0:	d917      	bls.n	80116f2 <_malloc_r+0xca>
 80116c2:	1961      	adds	r1, r4, r5
 80116c4:	42a3      	cmp	r3, r4
 80116c6:	6025      	str	r5, [r4, #0]
 80116c8:	bf18      	it	ne
 80116ca:	6059      	strne	r1, [r3, #4]
 80116cc:	6863      	ldr	r3, [r4, #4]
 80116ce:	bf08      	it	eq
 80116d0:	f8c8 1000 	streq.w	r1, [r8]
 80116d4:	5162      	str	r2, [r4, r5]
 80116d6:	604b      	str	r3, [r1, #4]
 80116d8:	4638      	mov	r0, r7
 80116da:	f104 060b 	add.w	r6, r4, #11
 80116de:	f000 f829 	bl	8011734 <__malloc_unlock>
 80116e2:	f026 0607 	bic.w	r6, r6, #7
 80116e6:	1d23      	adds	r3, r4, #4
 80116e8:	1af2      	subs	r2, r6, r3
 80116ea:	d0ae      	beq.n	801164a <_malloc_r+0x22>
 80116ec:	1b9b      	subs	r3, r3, r6
 80116ee:	50a3      	str	r3, [r4, r2]
 80116f0:	e7ab      	b.n	801164a <_malloc_r+0x22>
 80116f2:	42a3      	cmp	r3, r4
 80116f4:	6862      	ldr	r2, [r4, #4]
 80116f6:	d1dd      	bne.n	80116b4 <_malloc_r+0x8c>
 80116f8:	f8c8 2000 	str.w	r2, [r8]
 80116fc:	e7ec      	b.n	80116d8 <_malloc_r+0xb0>
 80116fe:	4623      	mov	r3, r4
 8011700:	6864      	ldr	r4, [r4, #4]
 8011702:	e7ac      	b.n	801165e <_malloc_r+0x36>
 8011704:	4634      	mov	r4, r6
 8011706:	6876      	ldr	r6, [r6, #4]
 8011708:	e7b4      	b.n	8011674 <_malloc_r+0x4c>
 801170a:	4613      	mov	r3, r2
 801170c:	e7cc      	b.n	80116a8 <_malloc_r+0x80>
 801170e:	230c      	movs	r3, #12
 8011710:	603b      	str	r3, [r7, #0]
 8011712:	4638      	mov	r0, r7
 8011714:	f000 f80e 	bl	8011734 <__malloc_unlock>
 8011718:	e797      	b.n	801164a <_malloc_r+0x22>
 801171a:	6025      	str	r5, [r4, #0]
 801171c:	e7dc      	b.n	80116d8 <_malloc_r+0xb0>
 801171e:	605b      	str	r3, [r3, #4]
 8011720:	deff      	udf	#255	; 0xff
 8011722:	bf00      	nop
 8011724:	240009a8 	.word	0x240009a8

08011728 <__malloc_lock>:
 8011728:	4801      	ldr	r0, [pc, #4]	; (8011730 <__malloc_lock+0x8>)
 801172a:	f7ff b902 	b.w	8010932 <__retarget_lock_acquire_recursive>
 801172e:	bf00      	nop
 8011730:	240009a4 	.word	0x240009a4

08011734 <__malloc_unlock>:
 8011734:	4801      	ldr	r0, [pc, #4]	; (801173c <__malloc_unlock+0x8>)
 8011736:	f7ff b8fd 	b.w	8010934 <__retarget_lock_release_recursive>
 801173a:	bf00      	nop
 801173c:	240009a4 	.word	0x240009a4

08011740 <_Balloc>:
 8011740:	b570      	push	{r4, r5, r6, lr}
 8011742:	69c6      	ldr	r6, [r0, #28]
 8011744:	4604      	mov	r4, r0
 8011746:	460d      	mov	r5, r1
 8011748:	b976      	cbnz	r6, 8011768 <_Balloc+0x28>
 801174a:	2010      	movs	r0, #16
 801174c:	f7ff ff44 	bl	80115d8 <malloc>
 8011750:	4602      	mov	r2, r0
 8011752:	61e0      	str	r0, [r4, #28]
 8011754:	b920      	cbnz	r0, 8011760 <_Balloc+0x20>
 8011756:	4b18      	ldr	r3, [pc, #96]	; (80117b8 <_Balloc+0x78>)
 8011758:	4818      	ldr	r0, [pc, #96]	; (80117bc <_Balloc+0x7c>)
 801175a:	216b      	movs	r1, #107	; 0x6b
 801175c:	f000 fd9c 	bl	8012298 <__assert_func>
 8011760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011764:	6006      	str	r6, [r0, #0]
 8011766:	60c6      	str	r6, [r0, #12]
 8011768:	69e6      	ldr	r6, [r4, #28]
 801176a:	68f3      	ldr	r3, [r6, #12]
 801176c:	b183      	cbz	r3, 8011790 <_Balloc+0x50>
 801176e:	69e3      	ldr	r3, [r4, #28]
 8011770:	68db      	ldr	r3, [r3, #12]
 8011772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011776:	b9b8      	cbnz	r0, 80117a8 <_Balloc+0x68>
 8011778:	2101      	movs	r1, #1
 801177a:	fa01 f605 	lsl.w	r6, r1, r5
 801177e:	1d72      	adds	r2, r6, #5
 8011780:	0092      	lsls	r2, r2, #2
 8011782:	4620      	mov	r0, r4
 8011784:	f000 fda6 	bl	80122d4 <_calloc_r>
 8011788:	b160      	cbz	r0, 80117a4 <_Balloc+0x64>
 801178a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801178e:	e00e      	b.n	80117ae <_Balloc+0x6e>
 8011790:	2221      	movs	r2, #33	; 0x21
 8011792:	2104      	movs	r1, #4
 8011794:	4620      	mov	r0, r4
 8011796:	f000 fd9d 	bl	80122d4 <_calloc_r>
 801179a:	69e3      	ldr	r3, [r4, #28]
 801179c:	60f0      	str	r0, [r6, #12]
 801179e:	68db      	ldr	r3, [r3, #12]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d1e4      	bne.n	801176e <_Balloc+0x2e>
 80117a4:	2000      	movs	r0, #0
 80117a6:	bd70      	pop	{r4, r5, r6, pc}
 80117a8:	6802      	ldr	r2, [r0, #0]
 80117aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80117ae:	2300      	movs	r3, #0
 80117b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80117b4:	e7f7      	b.n	80117a6 <_Balloc+0x66>
 80117b6:	bf00      	nop
 80117b8:	08012b61 	.word	0x08012b61
 80117bc:	08012be1 	.word	0x08012be1

080117c0 <_Bfree>:
 80117c0:	b570      	push	{r4, r5, r6, lr}
 80117c2:	69c6      	ldr	r6, [r0, #28]
 80117c4:	4605      	mov	r5, r0
 80117c6:	460c      	mov	r4, r1
 80117c8:	b976      	cbnz	r6, 80117e8 <_Bfree+0x28>
 80117ca:	2010      	movs	r0, #16
 80117cc:	f7ff ff04 	bl	80115d8 <malloc>
 80117d0:	4602      	mov	r2, r0
 80117d2:	61e8      	str	r0, [r5, #28]
 80117d4:	b920      	cbnz	r0, 80117e0 <_Bfree+0x20>
 80117d6:	4b09      	ldr	r3, [pc, #36]	; (80117fc <_Bfree+0x3c>)
 80117d8:	4809      	ldr	r0, [pc, #36]	; (8011800 <_Bfree+0x40>)
 80117da:	218f      	movs	r1, #143	; 0x8f
 80117dc:	f000 fd5c 	bl	8012298 <__assert_func>
 80117e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80117e4:	6006      	str	r6, [r0, #0]
 80117e6:	60c6      	str	r6, [r0, #12]
 80117e8:	b13c      	cbz	r4, 80117fa <_Bfree+0x3a>
 80117ea:	69eb      	ldr	r3, [r5, #28]
 80117ec:	6862      	ldr	r2, [r4, #4]
 80117ee:	68db      	ldr	r3, [r3, #12]
 80117f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80117f4:	6021      	str	r1, [r4, #0]
 80117f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80117fa:	bd70      	pop	{r4, r5, r6, pc}
 80117fc:	08012b61 	.word	0x08012b61
 8011800:	08012be1 	.word	0x08012be1

08011804 <__multadd>:
 8011804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011808:	690d      	ldr	r5, [r1, #16]
 801180a:	4607      	mov	r7, r0
 801180c:	460c      	mov	r4, r1
 801180e:	461e      	mov	r6, r3
 8011810:	f101 0c14 	add.w	ip, r1, #20
 8011814:	2000      	movs	r0, #0
 8011816:	f8dc 3000 	ldr.w	r3, [ip]
 801181a:	b299      	uxth	r1, r3
 801181c:	fb02 6101 	mla	r1, r2, r1, r6
 8011820:	0c1e      	lsrs	r6, r3, #16
 8011822:	0c0b      	lsrs	r3, r1, #16
 8011824:	fb02 3306 	mla	r3, r2, r6, r3
 8011828:	b289      	uxth	r1, r1
 801182a:	3001      	adds	r0, #1
 801182c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011830:	4285      	cmp	r5, r0
 8011832:	f84c 1b04 	str.w	r1, [ip], #4
 8011836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801183a:	dcec      	bgt.n	8011816 <__multadd+0x12>
 801183c:	b30e      	cbz	r6, 8011882 <__multadd+0x7e>
 801183e:	68a3      	ldr	r3, [r4, #8]
 8011840:	42ab      	cmp	r3, r5
 8011842:	dc19      	bgt.n	8011878 <__multadd+0x74>
 8011844:	6861      	ldr	r1, [r4, #4]
 8011846:	4638      	mov	r0, r7
 8011848:	3101      	adds	r1, #1
 801184a:	f7ff ff79 	bl	8011740 <_Balloc>
 801184e:	4680      	mov	r8, r0
 8011850:	b928      	cbnz	r0, 801185e <__multadd+0x5a>
 8011852:	4602      	mov	r2, r0
 8011854:	4b0c      	ldr	r3, [pc, #48]	; (8011888 <__multadd+0x84>)
 8011856:	480d      	ldr	r0, [pc, #52]	; (801188c <__multadd+0x88>)
 8011858:	21ba      	movs	r1, #186	; 0xba
 801185a:	f000 fd1d 	bl	8012298 <__assert_func>
 801185e:	6922      	ldr	r2, [r4, #16]
 8011860:	3202      	adds	r2, #2
 8011862:	f104 010c 	add.w	r1, r4, #12
 8011866:	0092      	lsls	r2, r2, #2
 8011868:	300c      	adds	r0, #12
 801186a:	f7ff f864 	bl	8010936 <memcpy>
 801186e:	4621      	mov	r1, r4
 8011870:	4638      	mov	r0, r7
 8011872:	f7ff ffa5 	bl	80117c0 <_Bfree>
 8011876:	4644      	mov	r4, r8
 8011878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801187c:	3501      	adds	r5, #1
 801187e:	615e      	str	r6, [r3, #20]
 8011880:	6125      	str	r5, [r4, #16]
 8011882:	4620      	mov	r0, r4
 8011884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011888:	08012bd0 	.word	0x08012bd0
 801188c:	08012be1 	.word	0x08012be1

08011890 <__hi0bits>:
 8011890:	0c03      	lsrs	r3, r0, #16
 8011892:	041b      	lsls	r3, r3, #16
 8011894:	b9d3      	cbnz	r3, 80118cc <__hi0bits+0x3c>
 8011896:	0400      	lsls	r0, r0, #16
 8011898:	2310      	movs	r3, #16
 801189a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801189e:	bf04      	itt	eq
 80118a0:	0200      	lsleq	r0, r0, #8
 80118a2:	3308      	addeq	r3, #8
 80118a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80118a8:	bf04      	itt	eq
 80118aa:	0100      	lsleq	r0, r0, #4
 80118ac:	3304      	addeq	r3, #4
 80118ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80118b2:	bf04      	itt	eq
 80118b4:	0080      	lsleq	r0, r0, #2
 80118b6:	3302      	addeq	r3, #2
 80118b8:	2800      	cmp	r0, #0
 80118ba:	db05      	blt.n	80118c8 <__hi0bits+0x38>
 80118bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80118c0:	f103 0301 	add.w	r3, r3, #1
 80118c4:	bf08      	it	eq
 80118c6:	2320      	moveq	r3, #32
 80118c8:	4618      	mov	r0, r3
 80118ca:	4770      	bx	lr
 80118cc:	2300      	movs	r3, #0
 80118ce:	e7e4      	b.n	801189a <__hi0bits+0xa>

080118d0 <__lo0bits>:
 80118d0:	6803      	ldr	r3, [r0, #0]
 80118d2:	f013 0207 	ands.w	r2, r3, #7
 80118d6:	d00c      	beq.n	80118f2 <__lo0bits+0x22>
 80118d8:	07d9      	lsls	r1, r3, #31
 80118da:	d422      	bmi.n	8011922 <__lo0bits+0x52>
 80118dc:	079a      	lsls	r2, r3, #30
 80118de:	bf49      	itett	mi
 80118e0:	085b      	lsrmi	r3, r3, #1
 80118e2:	089b      	lsrpl	r3, r3, #2
 80118e4:	6003      	strmi	r3, [r0, #0]
 80118e6:	2201      	movmi	r2, #1
 80118e8:	bf5c      	itt	pl
 80118ea:	6003      	strpl	r3, [r0, #0]
 80118ec:	2202      	movpl	r2, #2
 80118ee:	4610      	mov	r0, r2
 80118f0:	4770      	bx	lr
 80118f2:	b299      	uxth	r1, r3
 80118f4:	b909      	cbnz	r1, 80118fa <__lo0bits+0x2a>
 80118f6:	0c1b      	lsrs	r3, r3, #16
 80118f8:	2210      	movs	r2, #16
 80118fa:	b2d9      	uxtb	r1, r3
 80118fc:	b909      	cbnz	r1, 8011902 <__lo0bits+0x32>
 80118fe:	3208      	adds	r2, #8
 8011900:	0a1b      	lsrs	r3, r3, #8
 8011902:	0719      	lsls	r1, r3, #28
 8011904:	bf04      	itt	eq
 8011906:	091b      	lsreq	r3, r3, #4
 8011908:	3204      	addeq	r2, #4
 801190a:	0799      	lsls	r1, r3, #30
 801190c:	bf04      	itt	eq
 801190e:	089b      	lsreq	r3, r3, #2
 8011910:	3202      	addeq	r2, #2
 8011912:	07d9      	lsls	r1, r3, #31
 8011914:	d403      	bmi.n	801191e <__lo0bits+0x4e>
 8011916:	085b      	lsrs	r3, r3, #1
 8011918:	f102 0201 	add.w	r2, r2, #1
 801191c:	d003      	beq.n	8011926 <__lo0bits+0x56>
 801191e:	6003      	str	r3, [r0, #0]
 8011920:	e7e5      	b.n	80118ee <__lo0bits+0x1e>
 8011922:	2200      	movs	r2, #0
 8011924:	e7e3      	b.n	80118ee <__lo0bits+0x1e>
 8011926:	2220      	movs	r2, #32
 8011928:	e7e1      	b.n	80118ee <__lo0bits+0x1e>
	...

0801192c <__i2b>:
 801192c:	b510      	push	{r4, lr}
 801192e:	460c      	mov	r4, r1
 8011930:	2101      	movs	r1, #1
 8011932:	f7ff ff05 	bl	8011740 <_Balloc>
 8011936:	4602      	mov	r2, r0
 8011938:	b928      	cbnz	r0, 8011946 <__i2b+0x1a>
 801193a:	4b05      	ldr	r3, [pc, #20]	; (8011950 <__i2b+0x24>)
 801193c:	4805      	ldr	r0, [pc, #20]	; (8011954 <__i2b+0x28>)
 801193e:	f240 1145 	movw	r1, #325	; 0x145
 8011942:	f000 fca9 	bl	8012298 <__assert_func>
 8011946:	2301      	movs	r3, #1
 8011948:	6144      	str	r4, [r0, #20]
 801194a:	6103      	str	r3, [r0, #16]
 801194c:	bd10      	pop	{r4, pc}
 801194e:	bf00      	nop
 8011950:	08012bd0 	.word	0x08012bd0
 8011954:	08012be1 	.word	0x08012be1

08011958 <__multiply>:
 8011958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801195c:	4691      	mov	r9, r2
 801195e:	690a      	ldr	r2, [r1, #16]
 8011960:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011964:	429a      	cmp	r2, r3
 8011966:	bfb8      	it	lt
 8011968:	460b      	movlt	r3, r1
 801196a:	460c      	mov	r4, r1
 801196c:	bfbc      	itt	lt
 801196e:	464c      	movlt	r4, r9
 8011970:	4699      	movlt	r9, r3
 8011972:	6927      	ldr	r7, [r4, #16]
 8011974:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011978:	68a3      	ldr	r3, [r4, #8]
 801197a:	6861      	ldr	r1, [r4, #4]
 801197c:	eb07 060a 	add.w	r6, r7, sl
 8011980:	42b3      	cmp	r3, r6
 8011982:	b085      	sub	sp, #20
 8011984:	bfb8      	it	lt
 8011986:	3101      	addlt	r1, #1
 8011988:	f7ff feda 	bl	8011740 <_Balloc>
 801198c:	b930      	cbnz	r0, 801199c <__multiply+0x44>
 801198e:	4602      	mov	r2, r0
 8011990:	4b44      	ldr	r3, [pc, #272]	; (8011aa4 <__multiply+0x14c>)
 8011992:	4845      	ldr	r0, [pc, #276]	; (8011aa8 <__multiply+0x150>)
 8011994:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011998:	f000 fc7e 	bl	8012298 <__assert_func>
 801199c:	f100 0514 	add.w	r5, r0, #20
 80119a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80119a4:	462b      	mov	r3, r5
 80119a6:	2200      	movs	r2, #0
 80119a8:	4543      	cmp	r3, r8
 80119aa:	d321      	bcc.n	80119f0 <__multiply+0x98>
 80119ac:	f104 0314 	add.w	r3, r4, #20
 80119b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80119b4:	f109 0314 	add.w	r3, r9, #20
 80119b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80119bc:	9202      	str	r2, [sp, #8]
 80119be:	1b3a      	subs	r2, r7, r4
 80119c0:	3a15      	subs	r2, #21
 80119c2:	f022 0203 	bic.w	r2, r2, #3
 80119c6:	3204      	adds	r2, #4
 80119c8:	f104 0115 	add.w	r1, r4, #21
 80119cc:	428f      	cmp	r7, r1
 80119ce:	bf38      	it	cc
 80119d0:	2204      	movcc	r2, #4
 80119d2:	9201      	str	r2, [sp, #4]
 80119d4:	9a02      	ldr	r2, [sp, #8]
 80119d6:	9303      	str	r3, [sp, #12]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d80c      	bhi.n	80119f6 <__multiply+0x9e>
 80119dc:	2e00      	cmp	r6, #0
 80119de:	dd03      	ble.n	80119e8 <__multiply+0x90>
 80119e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d05b      	beq.n	8011aa0 <__multiply+0x148>
 80119e8:	6106      	str	r6, [r0, #16]
 80119ea:	b005      	add	sp, #20
 80119ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119f0:	f843 2b04 	str.w	r2, [r3], #4
 80119f4:	e7d8      	b.n	80119a8 <__multiply+0x50>
 80119f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80119fa:	f1ba 0f00 	cmp.w	sl, #0
 80119fe:	d024      	beq.n	8011a4a <__multiply+0xf2>
 8011a00:	f104 0e14 	add.w	lr, r4, #20
 8011a04:	46a9      	mov	r9, r5
 8011a06:	f04f 0c00 	mov.w	ip, #0
 8011a0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011a0e:	f8d9 1000 	ldr.w	r1, [r9]
 8011a12:	fa1f fb82 	uxth.w	fp, r2
 8011a16:	b289      	uxth	r1, r1
 8011a18:	fb0a 110b 	mla	r1, sl, fp, r1
 8011a1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011a20:	f8d9 2000 	ldr.w	r2, [r9]
 8011a24:	4461      	add	r1, ip
 8011a26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011a2a:	fb0a c20b 	mla	r2, sl, fp, ip
 8011a2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011a32:	b289      	uxth	r1, r1
 8011a34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011a38:	4577      	cmp	r7, lr
 8011a3a:	f849 1b04 	str.w	r1, [r9], #4
 8011a3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011a42:	d8e2      	bhi.n	8011a0a <__multiply+0xb2>
 8011a44:	9a01      	ldr	r2, [sp, #4]
 8011a46:	f845 c002 	str.w	ip, [r5, r2]
 8011a4a:	9a03      	ldr	r2, [sp, #12]
 8011a4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011a50:	3304      	adds	r3, #4
 8011a52:	f1b9 0f00 	cmp.w	r9, #0
 8011a56:	d021      	beq.n	8011a9c <__multiply+0x144>
 8011a58:	6829      	ldr	r1, [r5, #0]
 8011a5a:	f104 0c14 	add.w	ip, r4, #20
 8011a5e:	46ae      	mov	lr, r5
 8011a60:	f04f 0a00 	mov.w	sl, #0
 8011a64:	f8bc b000 	ldrh.w	fp, [ip]
 8011a68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011a6c:	fb09 220b 	mla	r2, r9, fp, r2
 8011a70:	4452      	add	r2, sl
 8011a72:	b289      	uxth	r1, r1
 8011a74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011a78:	f84e 1b04 	str.w	r1, [lr], #4
 8011a7c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011a80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a84:	f8be 1000 	ldrh.w	r1, [lr]
 8011a88:	fb09 110a 	mla	r1, r9, sl, r1
 8011a8c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011a90:	4567      	cmp	r7, ip
 8011a92:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a96:	d8e5      	bhi.n	8011a64 <__multiply+0x10c>
 8011a98:	9a01      	ldr	r2, [sp, #4]
 8011a9a:	50a9      	str	r1, [r5, r2]
 8011a9c:	3504      	adds	r5, #4
 8011a9e:	e799      	b.n	80119d4 <__multiply+0x7c>
 8011aa0:	3e01      	subs	r6, #1
 8011aa2:	e79b      	b.n	80119dc <__multiply+0x84>
 8011aa4:	08012bd0 	.word	0x08012bd0
 8011aa8:	08012be1 	.word	0x08012be1

08011aac <__pow5mult>:
 8011aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ab0:	4615      	mov	r5, r2
 8011ab2:	f012 0203 	ands.w	r2, r2, #3
 8011ab6:	4606      	mov	r6, r0
 8011ab8:	460f      	mov	r7, r1
 8011aba:	d007      	beq.n	8011acc <__pow5mult+0x20>
 8011abc:	4c25      	ldr	r4, [pc, #148]	; (8011b54 <__pow5mult+0xa8>)
 8011abe:	3a01      	subs	r2, #1
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011ac6:	f7ff fe9d 	bl	8011804 <__multadd>
 8011aca:	4607      	mov	r7, r0
 8011acc:	10ad      	asrs	r5, r5, #2
 8011ace:	d03d      	beq.n	8011b4c <__pow5mult+0xa0>
 8011ad0:	69f4      	ldr	r4, [r6, #28]
 8011ad2:	b97c      	cbnz	r4, 8011af4 <__pow5mult+0x48>
 8011ad4:	2010      	movs	r0, #16
 8011ad6:	f7ff fd7f 	bl	80115d8 <malloc>
 8011ada:	4602      	mov	r2, r0
 8011adc:	61f0      	str	r0, [r6, #28]
 8011ade:	b928      	cbnz	r0, 8011aec <__pow5mult+0x40>
 8011ae0:	4b1d      	ldr	r3, [pc, #116]	; (8011b58 <__pow5mult+0xac>)
 8011ae2:	481e      	ldr	r0, [pc, #120]	; (8011b5c <__pow5mult+0xb0>)
 8011ae4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011ae8:	f000 fbd6 	bl	8012298 <__assert_func>
 8011aec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011af0:	6004      	str	r4, [r0, #0]
 8011af2:	60c4      	str	r4, [r0, #12]
 8011af4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011af8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011afc:	b94c      	cbnz	r4, 8011b12 <__pow5mult+0x66>
 8011afe:	f240 2171 	movw	r1, #625	; 0x271
 8011b02:	4630      	mov	r0, r6
 8011b04:	f7ff ff12 	bl	801192c <__i2b>
 8011b08:	2300      	movs	r3, #0
 8011b0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011b0e:	4604      	mov	r4, r0
 8011b10:	6003      	str	r3, [r0, #0]
 8011b12:	f04f 0900 	mov.w	r9, #0
 8011b16:	07eb      	lsls	r3, r5, #31
 8011b18:	d50a      	bpl.n	8011b30 <__pow5mult+0x84>
 8011b1a:	4639      	mov	r1, r7
 8011b1c:	4622      	mov	r2, r4
 8011b1e:	4630      	mov	r0, r6
 8011b20:	f7ff ff1a 	bl	8011958 <__multiply>
 8011b24:	4639      	mov	r1, r7
 8011b26:	4680      	mov	r8, r0
 8011b28:	4630      	mov	r0, r6
 8011b2a:	f7ff fe49 	bl	80117c0 <_Bfree>
 8011b2e:	4647      	mov	r7, r8
 8011b30:	106d      	asrs	r5, r5, #1
 8011b32:	d00b      	beq.n	8011b4c <__pow5mult+0xa0>
 8011b34:	6820      	ldr	r0, [r4, #0]
 8011b36:	b938      	cbnz	r0, 8011b48 <__pow5mult+0x9c>
 8011b38:	4622      	mov	r2, r4
 8011b3a:	4621      	mov	r1, r4
 8011b3c:	4630      	mov	r0, r6
 8011b3e:	f7ff ff0b 	bl	8011958 <__multiply>
 8011b42:	6020      	str	r0, [r4, #0]
 8011b44:	f8c0 9000 	str.w	r9, [r0]
 8011b48:	4604      	mov	r4, r0
 8011b4a:	e7e4      	b.n	8011b16 <__pow5mult+0x6a>
 8011b4c:	4638      	mov	r0, r7
 8011b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b52:	bf00      	nop
 8011b54:	08012d30 	.word	0x08012d30
 8011b58:	08012b61 	.word	0x08012b61
 8011b5c:	08012be1 	.word	0x08012be1

08011b60 <__lshift>:
 8011b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b64:	460c      	mov	r4, r1
 8011b66:	6849      	ldr	r1, [r1, #4]
 8011b68:	6923      	ldr	r3, [r4, #16]
 8011b6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b6e:	68a3      	ldr	r3, [r4, #8]
 8011b70:	4607      	mov	r7, r0
 8011b72:	4691      	mov	r9, r2
 8011b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b78:	f108 0601 	add.w	r6, r8, #1
 8011b7c:	42b3      	cmp	r3, r6
 8011b7e:	db0b      	blt.n	8011b98 <__lshift+0x38>
 8011b80:	4638      	mov	r0, r7
 8011b82:	f7ff fddd 	bl	8011740 <_Balloc>
 8011b86:	4605      	mov	r5, r0
 8011b88:	b948      	cbnz	r0, 8011b9e <__lshift+0x3e>
 8011b8a:	4602      	mov	r2, r0
 8011b8c:	4b28      	ldr	r3, [pc, #160]	; (8011c30 <__lshift+0xd0>)
 8011b8e:	4829      	ldr	r0, [pc, #164]	; (8011c34 <__lshift+0xd4>)
 8011b90:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011b94:	f000 fb80 	bl	8012298 <__assert_func>
 8011b98:	3101      	adds	r1, #1
 8011b9a:	005b      	lsls	r3, r3, #1
 8011b9c:	e7ee      	b.n	8011b7c <__lshift+0x1c>
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	f100 0114 	add.w	r1, r0, #20
 8011ba4:	f100 0210 	add.w	r2, r0, #16
 8011ba8:	4618      	mov	r0, r3
 8011baa:	4553      	cmp	r3, sl
 8011bac:	db33      	blt.n	8011c16 <__lshift+0xb6>
 8011bae:	6920      	ldr	r0, [r4, #16]
 8011bb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011bb4:	f104 0314 	add.w	r3, r4, #20
 8011bb8:	f019 091f 	ands.w	r9, r9, #31
 8011bbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011bc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011bc4:	d02b      	beq.n	8011c1e <__lshift+0xbe>
 8011bc6:	f1c9 0e20 	rsb	lr, r9, #32
 8011bca:	468a      	mov	sl, r1
 8011bcc:	2200      	movs	r2, #0
 8011bce:	6818      	ldr	r0, [r3, #0]
 8011bd0:	fa00 f009 	lsl.w	r0, r0, r9
 8011bd4:	4310      	orrs	r0, r2
 8011bd6:	f84a 0b04 	str.w	r0, [sl], #4
 8011bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bde:	459c      	cmp	ip, r3
 8011be0:	fa22 f20e 	lsr.w	r2, r2, lr
 8011be4:	d8f3      	bhi.n	8011bce <__lshift+0x6e>
 8011be6:	ebac 0304 	sub.w	r3, ip, r4
 8011bea:	3b15      	subs	r3, #21
 8011bec:	f023 0303 	bic.w	r3, r3, #3
 8011bf0:	3304      	adds	r3, #4
 8011bf2:	f104 0015 	add.w	r0, r4, #21
 8011bf6:	4584      	cmp	ip, r0
 8011bf8:	bf38      	it	cc
 8011bfa:	2304      	movcc	r3, #4
 8011bfc:	50ca      	str	r2, [r1, r3]
 8011bfe:	b10a      	cbz	r2, 8011c04 <__lshift+0xa4>
 8011c00:	f108 0602 	add.w	r6, r8, #2
 8011c04:	3e01      	subs	r6, #1
 8011c06:	4638      	mov	r0, r7
 8011c08:	612e      	str	r6, [r5, #16]
 8011c0a:	4621      	mov	r1, r4
 8011c0c:	f7ff fdd8 	bl	80117c0 <_Bfree>
 8011c10:	4628      	mov	r0, r5
 8011c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c16:	f842 0f04 	str.w	r0, [r2, #4]!
 8011c1a:	3301      	adds	r3, #1
 8011c1c:	e7c5      	b.n	8011baa <__lshift+0x4a>
 8011c1e:	3904      	subs	r1, #4
 8011c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c24:	f841 2f04 	str.w	r2, [r1, #4]!
 8011c28:	459c      	cmp	ip, r3
 8011c2a:	d8f9      	bhi.n	8011c20 <__lshift+0xc0>
 8011c2c:	e7ea      	b.n	8011c04 <__lshift+0xa4>
 8011c2e:	bf00      	nop
 8011c30:	08012bd0 	.word	0x08012bd0
 8011c34:	08012be1 	.word	0x08012be1

08011c38 <__mcmp>:
 8011c38:	b530      	push	{r4, r5, lr}
 8011c3a:	6902      	ldr	r2, [r0, #16]
 8011c3c:	690c      	ldr	r4, [r1, #16]
 8011c3e:	1b12      	subs	r2, r2, r4
 8011c40:	d10e      	bne.n	8011c60 <__mcmp+0x28>
 8011c42:	f100 0314 	add.w	r3, r0, #20
 8011c46:	3114      	adds	r1, #20
 8011c48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011c4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011c50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011c54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011c58:	42a5      	cmp	r5, r4
 8011c5a:	d003      	beq.n	8011c64 <__mcmp+0x2c>
 8011c5c:	d305      	bcc.n	8011c6a <__mcmp+0x32>
 8011c5e:	2201      	movs	r2, #1
 8011c60:	4610      	mov	r0, r2
 8011c62:	bd30      	pop	{r4, r5, pc}
 8011c64:	4283      	cmp	r3, r0
 8011c66:	d3f3      	bcc.n	8011c50 <__mcmp+0x18>
 8011c68:	e7fa      	b.n	8011c60 <__mcmp+0x28>
 8011c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c6e:	e7f7      	b.n	8011c60 <__mcmp+0x28>

08011c70 <__mdiff>:
 8011c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c74:	460c      	mov	r4, r1
 8011c76:	4606      	mov	r6, r0
 8011c78:	4611      	mov	r1, r2
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	4690      	mov	r8, r2
 8011c7e:	f7ff ffdb 	bl	8011c38 <__mcmp>
 8011c82:	1e05      	subs	r5, r0, #0
 8011c84:	d110      	bne.n	8011ca8 <__mdiff+0x38>
 8011c86:	4629      	mov	r1, r5
 8011c88:	4630      	mov	r0, r6
 8011c8a:	f7ff fd59 	bl	8011740 <_Balloc>
 8011c8e:	b930      	cbnz	r0, 8011c9e <__mdiff+0x2e>
 8011c90:	4b3a      	ldr	r3, [pc, #232]	; (8011d7c <__mdiff+0x10c>)
 8011c92:	4602      	mov	r2, r0
 8011c94:	f240 2137 	movw	r1, #567	; 0x237
 8011c98:	4839      	ldr	r0, [pc, #228]	; (8011d80 <__mdiff+0x110>)
 8011c9a:	f000 fafd 	bl	8012298 <__assert_func>
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca8:	bfa4      	itt	ge
 8011caa:	4643      	movge	r3, r8
 8011cac:	46a0      	movge	r8, r4
 8011cae:	4630      	mov	r0, r6
 8011cb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011cb4:	bfa6      	itte	ge
 8011cb6:	461c      	movge	r4, r3
 8011cb8:	2500      	movge	r5, #0
 8011cba:	2501      	movlt	r5, #1
 8011cbc:	f7ff fd40 	bl	8011740 <_Balloc>
 8011cc0:	b920      	cbnz	r0, 8011ccc <__mdiff+0x5c>
 8011cc2:	4b2e      	ldr	r3, [pc, #184]	; (8011d7c <__mdiff+0x10c>)
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	f240 2145 	movw	r1, #581	; 0x245
 8011cca:	e7e5      	b.n	8011c98 <__mdiff+0x28>
 8011ccc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011cd0:	6926      	ldr	r6, [r4, #16]
 8011cd2:	60c5      	str	r5, [r0, #12]
 8011cd4:	f104 0914 	add.w	r9, r4, #20
 8011cd8:	f108 0514 	add.w	r5, r8, #20
 8011cdc:	f100 0e14 	add.w	lr, r0, #20
 8011ce0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011ce4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011ce8:	f108 0210 	add.w	r2, r8, #16
 8011cec:	46f2      	mov	sl, lr
 8011cee:	2100      	movs	r1, #0
 8011cf0:	f859 3b04 	ldr.w	r3, [r9], #4
 8011cf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011cf8:	fa11 f88b 	uxtah	r8, r1, fp
 8011cfc:	b299      	uxth	r1, r3
 8011cfe:	0c1b      	lsrs	r3, r3, #16
 8011d00:	eba8 0801 	sub.w	r8, r8, r1
 8011d04:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011d08:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011d0c:	fa1f f888 	uxth.w	r8, r8
 8011d10:	1419      	asrs	r1, r3, #16
 8011d12:	454e      	cmp	r6, r9
 8011d14:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011d18:	f84a 3b04 	str.w	r3, [sl], #4
 8011d1c:	d8e8      	bhi.n	8011cf0 <__mdiff+0x80>
 8011d1e:	1b33      	subs	r3, r6, r4
 8011d20:	3b15      	subs	r3, #21
 8011d22:	f023 0303 	bic.w	r3, r3, #3
 8011d26:	3304      	adds	r3, #4
 8011d28:	3415      	adds	r4, #21
 8011d2a:	42a6      	cmp	r6, r4
 8011d2c:	bf38      	it	cc
 8011d2e:	2304      	movcc	r3, #4
 8011d30:	441d      	add	r5, r3
 8011d32:	4473      	add	r3, lr
 8011d34:	469e      	mov	lr, r3
 8011d36:	462e      	mov	r6, r5
 8011d38:	4566      	cmp	r6, ip
 8011d3a:	d30e      	bcc.n	8011d5a <__mdiff+0xea>
 8011d3c:	f10c 0203 	add.w	r2, ip, #3
 8011d40:	1b52      	subs	r2, r2, r5
 8011d42:	f022 0203 	bic.w	r2, r2, #3
 8011d46:	3d03      	subs	r5, #3
 8011d48:	45ac      	cmp	ip, r5
 8011d4a:	bf38      	it	cc
 8011d4c:	2200      	movcc	r2, #0
 8011d4e:	4413      	add	r3, r2
 8011d50:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011d54:	b17a      	cbz	r2, 8011d76 <__mdiff+0x106>
 8011d56:	6107      	str	r7, [r0, #16]
 8011d58:	e7a4      	b.n	8011ca4 <__mdiff+0x34>
 8011d5a:	f856 8b04 	ldr.w	r8, [r6], #4
 8011d5e:	fa11 f288 	uxtah	r2, r1, r8
 8011d62:	1414      	asrs	r4, r2, #16
 8011d64:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011d68:	b292      	uxth	r2, r2
 8011d6a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011d6e:	f84e 2b04 	str.w	r2, [lr], #4
 8011d72:	1421      	asrs	r1, r4, #16
 8011d74:	e7e0      	b.n	8011d38 <__mdiff+0xc8>
 8011d76:	3f01      	subs	r7, #1
 8011d78:	e7ea      	b.n	8011d50 <__mdiff+0xe0>
 8011d7a:	bf00      	nop
 8011d7c:	08012bd0 	.word	0x08012bd0
 8011d80:	08012be1 	.word	0x08012be1

08011d84 <__d2b>:
 8011d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d88:	460f      	mov	r7, r1
 8011d8a:	2101      	movs	r1, #1
 8011d8c:	ec59 8b10 	vmov	r8, r9, d0
 8011d90:	4616      	mov	r6, r2
 8011d92:	f7ff fcd5 	bl	8011740 <_Balloc>
 8011d96:	4604      	mov	r4, r0
 8011d98:	b930      	cbnz	r0, 8011da8 <__d2b+0x24>
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	4b24      	ldr	r3, [pc, #144]	; (8011e30 <__d2b+0xac>)
 8011d9e:	4825      	ldr	r0, [pc, #148]	; (8011e34 <__d2b+0xb0>)
 8011da0:	f240 310f 	movw	r1, #783	; 0x30f
 8011da4:	f000 fa78 	bl	8012298 <__assert_func>
 8011da8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011dac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011db0:	bb2d      	cbnz	r5, 8011dfe <__d2b+0x7a>
 8011db2:	9301      	str	r3, [sp, #4]
 8011db4:	f1b8 0300 	subs.w	r3, r8, #0
 8011db8:	d026      	beq.n	8011e08 <__d2b+0x84>
 8011dba:	4668      	mov	r0, sp
 8011dbc:	9300      	str	r3, [sp, #0]
 8011dbe:	f7ff fd87 	bl	80118d0 <__lo0bits>
 8011dc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011dc6:	b1e8      	cbz	r0, 8011e04 <__d2b+0x80>
 8011dc8:	f1c0 0320 	rsb	r3, r0, #32
 8011dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8011dd0:	430b      	orrs	r3, r1
 8011dd2:	40c2      	lsrs	r2, r0
 8011dd4:	6163      	str	r3, [r4, #20]
 8011dd6:	9201      	str	r2, [sp, #4]
 8011dd8:	9b01      	ldr	r3, [sp, #4]
 8011dda:	61a3      	str	r3, [r4, #24]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	bf14      	ite	ne
 8011de0:	2202      	movne	r2, #2
 8011de2:	2201      	moveq	r2, #1
 8011de4:	6122      	str	r2, [r4, #16]
 8011de6:	b1bd      	cbz	r5, 8011e18 <__d2b+0x94>
 8011de8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011dec:	4405      	add	r5, r0
 8011dee:	603d      	str	r5, [r7, #0]
 8011df0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011df4:	6030      	str	r0, [r6, #0]
 8011df6:	4620      	mov	r0, r4
 8011df8:	b003      	add	sp, #12
 8011dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e02:	e7d6      	b.n	8011db2 <__d2b+0x2e>
 8011e04:	6161      	str	r1, [r4, #20]
 8011e06:	e7e7      	b.n	8011dd8 <__d2b+0x54>
 8011e08:	a801      	add	r0, sp, #4
 8011e0a:	f7ff fd61 	bl	80118d0 <__lo0bits>
 8011e0e:	9b01      	ldr	r3, [sp, #4]
 8011e10:	6163      	str	r3, [r4, #20]
 8011e12:	3020      	adds	r0, #32
 8011e14:	2201      	movs	r2, #1
 8011e16:	e7e5      	b.n	8011de4 <__d2b+0x60>
 8011e18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011e1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011e20:	6038      	str	r0, [r7, #0]
 8011e22:	6918      	ldr	r0, [r3, #16]
 8011e24:	f7ff fd34 	bl	8011890 <__hi0bits>
 8011e28:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011e2c:	e7e2      	b.n	8011df4 <__d2b+0x70>
 8011e2e:	bf00      	nop
 8011e30:	08012bd0 	.word	0x08012bd0
 8011e34:	08012be1 	.word	0x08012be1

08011e38 <__ssputs_r>:
 8011e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e3c:	688e      	ldr	r6, [r1, #8]
 8011e3e:	461f      	mov	r7, r3
 8011e40:	42be      	cmp	r6, r7
 8011e42:	680b      	ldr	r3, [r1, #0]
 8011e44:	4682      	mov	sl, r0
 8011e46:	460c      	mov	r4, r1
 8011e48:	4690      	mov	r8, r2
 8011e4a:	d82c      	bhi.n	8011ea6 <__ssputs_r+0x6e>
 8011e4c:	898a      	ldrh	r2, [r1, #12]
 8011e4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e52:	d026      	beq.n	8011ea2 <__ssputs_r+0x6a>
 8011e54:	6965      	ldr	r5, [r4, #20]
 8011e56:	6909      	ldr	r1, [r1, #16]
 8011e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e5c:	eba3 0901 	sub.w	r9, r3, r1
 8011e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e64:	1c7b      	adds	r3, r7, #1
 8011e66:	444b      	add	r3, r9
 8011e68:	106d      	asrs	r5, r5, #1
 8011e6a:	429d      	cmp	r5, r3
 8011e6c:	bf38      	it	cc
 8011e6e:	461d      	movcc	r5, r3
 8011e70:	0553      	lsls	r3, r2, #21
 8011e72:	d527      	bpl.n	8011ec4 <__ssputs_r+0x8c>
 8011e74:	4629      	mov	r1, r5
 8011e76:	f7ff fbd7 	bl	8011628 <_malloc_r>
 8011e7a:	4606      	mov	r6, r0
 8011e7c:	b360      	cbz	r0, 8011ed8 <__ssputs_r+0xa0>
 8011e7e:	6921      	ldr	r1, [r4, #16]
 8011e80:	464a      	mov	r2, r9
 8011e82:	f7fe fd58 	bl	8010936 <memcpy>
 8011e86:	89a3      	ldrh	r3, [r4, #12]
 8011e88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e90:	81a3      	strh	r3, [r4, #12]
 8011e92:	6126      	str	r6, [r4, #16]
 8011e94:	6165      	str	r5, [r4, #20]
 8011e96:	444e      	add	r6, r9
 8011e98:	eba5 0509 	sub.w	r5, r5, r9
 8011e9c:	6026      	str	r6, [r4, #0]
 8011e9e:	60a5      	str	r5, [r4, #8]
 8011ea0:	463e      	mov	r6, r7
 8011ea2:	42be      	cmp	r6, r7
 8011ea4:	d900      	bls.n	8011ea8 <__ssputs_r+0x70>
 8011ea6:	463e      	mov	r6, r7
 8011ea8:	6820      	ldr	r0, [r4, #0]
 8011eaa:	4632      	mov	r2, r6
 8011eac:	4641      	mov	r1, r8
 8011eae:	f000 f9c9 	bl	8012244 <memmove>
 8011eb2:	68a3      	ldr	r3, [r4, #8]
 8011eb4:	1b9b      	subs	r3, r3, r6
 8011eb6:	60a3      	str	r3, [r4, #8]
 8011eb8:	6823      	ldr	r3, [r4, #0]
 8011eba:	4433      	add	r3, r6
 8011ebc:	6023      	str	r3, [r4, #0]
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ec4:	462a      	mov	r2, r5
 8011ec6:	f000 fa2d 	bl	8012324 <_realloc_r>
 8011eca:	4606      	mov	r6, r0
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	d1e0      	bne.n	8011e92 <__ssputs_r+0x5a>
 8011ed0:	6921      	ldr	r1, [r4, #16]
 8011ed2:	4650      	mov	r0, sl
 8011ed4:	f7ff fb34 	bl	8011540 <_free_r>
 8011ed8:	230c      	movs	r3, #12
 8011eda:	f8ca 3000 	str.w	r3, [sl]
 8011ede:	89a3      	ldrh	r3, [r4, #12]
 8011ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ee4:	81a3      	strh	r3, [r4, #12]
 8011ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011eea:	e7e9      	b.n	8011ec0 <__ssputs_r+0x88>

08011eec <_svfiprintf_r>:
 8011eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef0:	4698      	mov	r8, r3
 8011ef2:	898b      	ldrh	r3, [r1, #12]
 8011ef4:	061b      	lsls	r3, r3, #24
 8011ef6:	b09d      	sub	sp, #116	; 0x74
 8011ef8:	4607      	mov	r7, r0
 8011efa:	460d      	mov	r5, r1
 8011efc:	4614      	mov	r4, r2
 8011efe:	d50e      	bpl.n	8011f1e <_svfiprintf_r+0x32>
 8011f00:	690b      	ldr	r3, [r1, #16]
 8011f02:	b963      	cbnz	r3, 8011f1e <_svfiprintf_r+0x32>
 8011f04:	2140      	movs	r1, #64	; 0x40
 8011f06:	f7ff fb8f 	bl	8011628 <_malloc_r>
 8011f0a:	6028      	str	r0, [r5, #0]
 8011f0c:	6128      	str	r0, [r5, #16]
 8011f0e:	b920      	cbnz	r0, 8011f1a <_svfiprintf_r+0x2e>
 8011f10:	230c      	movs	r3, #12
 8011f12:	603b      	str	r3, [r7, #0]
 8011f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f18:	e0d0      	b.n	80120bc <_svfiprintf_r+0x1d0>
 8011f1a:	2340      	movs	r3, #64	; 0x40
 8011f1c:	616b      	str	r3, [r5, #20]
 8011f1e:	2300      	movs	r3, #0
 8011f20:	9309      	str	r3, [sp, #36]	; 0x24
 8011f22:	2320      	movs	r3, #32
 8011f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f2c:	2330      	movs	r3, #48	; 0x30
 8011f2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80120d4 <_svfiprintf_r+0x1e8>
 8011f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f36:	f04f 0901 	mov.w	r9, #1
 8011f3a:	4623      	mov	r3, r4
 8011f3c:	469a      	mov	sl, r3
 8011f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f42:	b10a      	cbz	r2, 8011f48 <_svfiprintf_r+0x5c>
 8011f44:	2a25      	cmp	r2, #37	; 0x25
 8011f46:	d1f9      	bne.n	8011f3c <_svfiprintf_r+0x50>
 8011f48:	ebba 0b04 	subs.w	fp, sl, r4
 8011f4c:	d00b      	beq.n	8011f66 <_svfiprintf_r+0x7a>
 8011f4e:	465b      	mov	r3, fp
 8011f50:	4622      	mov	r2, r4
 8011f52:	4629      	mov	r1, r5
 8011f54:	4638      	mov	r0, r7
 8011f56:	f7ff ff6f 	bl	8011e38 <__ssputs_r>
 8011f5a:	3001      	adds	r0, #1
 8011f5c:	f000 80a9 	beq.w	80120b2 <_svfiprintf_r+0x1c6>
 8011f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f62:	445a      	add	r2, fp
 8011f64:	9209      	str	r2, [sp, #36]	; 0x24
 8011f66:	f89a 3000 	ldrb.w	r3, [sl]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	f000 80a1 	beq.w	80120b2 <_svfiprintf_r+0x1c6>
 8011f70:	2300      	movs	r3, #0
 8011f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f7a:	f10a 0a01 	add.w	sl, sl, #1
 8011f7e:	9304      	str	r3, [sp, #16]
 8011f80:	9307      	str	r3, [sp, #28]
 8011f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f86:	931a      	str	r3, [sp, #104]	; 0x68
 8011f88:	4654      	mov	r4, sl
 8011f8a:	2205      	movs	r2, #5
 8011f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f90:	4850      	ldr	r0, [pc, #320]	; (80120d4 <_svfiprintf_r+0x1e8>)
 8011f92:	f7ee f9a5 	bl	80002e0 <memchr>
 8011f96:	9a04      	ldr	r2, [sp, #16]
 8011f98:	b9d8      	cbnz	r0, 8011fd2 <_svfiprintf_r+0xe6>
 8011f9a:	06d0      	lsls	r0, r2, #27
 8011f9c:	bf44      	itt	mi
 8011f9e:	2320      	movmi	r3, #32
 8011fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fa4:	0711      	lsls	r1, r2, #28
 8011fa6:	bf44      	itt	mi
 8011fa8:	232b      	movmi	r3, #43	; 0x2b
 8011faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fae:	f89a 3000 	ldrb.w	r3, [sl]
 8011fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8011fb4:	d015      	beq.n	8011fe2 <_svfiprintf_r+0xf6>
 8011fb6:	9a07      	ldr	r2, [sp, #28]
 8011fb8:	4654      	mov	r4, sl
 8011fba:	2000      	movs	r0, #0
 8011fbc:	f04f 0c0a 	mov.w	ip, #10
 8011fc0:	4621      	mov	r1, r4
 8011fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fc6:	3b30      	subs	r3, #48	; 0x30
 8011fc8:	2b09      	cmp	r3, #9
 8011fca:	d94d      	bls.n	8012068 <_svfiprintf_r+0x17c>
 8011fcc:	b1b0      	cbz	r0, 8011ffc <_svfiprintf_r+0x110>
 8011fce:	9207      	str	r2, [sp, #28]
 8011fd0:	e014      	b.n	8011ffc <_svfiprintf_r+0x110>
 8011fd2:	eba0 0308 	sub.w	r3, r0, r8
 8011fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8011fda:	4313      	orrs	r3, r2
 8011fdc:	9304      	str	r3, [sp, #16]
 8011fde:	46a2      	mov	sl, r4
 8011fe0:	e7d2      	b.n	8011f88 <_svfiprintf_r+0x9c>
 8011fe2:	9b03      	ldr	r3, [sp, #12]
 8011fe4:	1d19      	adds	r1, r3, #4
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	9103      	str	r1, [sp, #12]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	bfbb      	ittet	lt
 8011fee:	425b      	neglt	r3, r3
 8011ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8011ff4:	9307      	strge	r3, [sp, #28]
 8011ff6:	9307      	strlt	r3, [sp, #28]
 8011ff8:	bfb8      	it	lt
 8011ffa:	9204      	strlt	r2, [sp, #16]
 8011ffc:	7823      	ldrb	r3, [r4, #0]
 8011ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8012000:	d10c      	bne.n	801201c <_svfiprintf_r+0x130>
 8012002:	7863      	ldrb	r3, [r4, #1]
 8012004:	2b2a      	cmp	r3, #42	; 0x2a
 8012006:	d134      	bne.n	8012072 <_svfiprintf_r+0x186>
 8012008:	9b03      	ldr	r3, [sp, #12]
 801200a:	1d1a      	adds	r2, r3, #4
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	9203      	str	r2, [sp, #12]
 8012010:	2b00      	cmp	r3, #0
 8012012:	bfb8      	it	lt
 8012014:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012018:	3402      	adds	r4, #2
 801201a:	9305      	str	r3, [sp, #20]
 801201c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80120e4 <_svfiprintf_r+0x1f8>
 8012020:	7821      	ldrb	r1, [r4, #0]
 8012022:	2203      	movs	r2, #3
 8012024:	4650      	mov	r0, sl
 8012026:	f7ee f95b 	bl	80002e0 <memchr>
 801202a:	b138      	cbz	r0, 801203c <_svfiprintf_r+0x150>
 801202c:	9b04      	ldr	r3, [sp, #16]
 801202e:	eba0 000a 	sub.w	r0, r0, sl
 8012032:	2240      	movs	r2, #64	; 0x40
 8012034:	4082      	lsls	r2, r0
 8012036:	4313      	orrs	r3, r2
 8012038:	3401      	adds	r4, #1
 801203a:	9304      	str	r3, [sp, #16]
 801203c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012040:	4825      	ldr	r0, [pc, #148]	; (80120d8 <_svfiprintf_r+0x1ec>)
 8012042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012046:	2206      	movs	r2, #6
 8012048:	f7ee f94a 	bl	80002e0 <memchr>
 801204c:	2800      	cmp	r0, #0
 801204e:	d038      	beq.n	80120c2 <_svfiprintf_r+0x1d6>
 8012050:	4b22      	ldr	r3, [pc, #136]	; (80120dc <_svfiprintf_r+0x1f0>)
 8012052:	bb1b      	cbnz	r3, 801209c <_svfiprintf_r+0x1b0>
 8012054:	9b03      	ldr	r3, [sp, #12]
 8012056:	3307      	adds	r3, #7
 8012058:	f023 0307 	bic.w	r3, r3, #7
 801205c:	3308      	adds	r3, #8
 801205e:	9303      	str	r3, [sp, #12]
 8012060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012062:	4433      	add	r3, r6
 8012064:	9309      	str	r3, [sp, #36]	; 0x24
 8012066:	e768      	b.n	8011f3a <_svfiprintf_r+0x4e>
 8012068:	fb0c 3202 	mla	r2, ip, r2, r3
 801206c:	460c      	mov	r4, r1
 801206e:	2001      	movs	r0, #1
 8012070:	e7a6      	b.n	8011fc0 <_svfiprintf_r+0xd4>
 8012072:	2300      	movs	r3, #0
 8012074:	3401      	adds	r4, #1
 8012076:	9305      	str	r3, [sp, #20]
 8012078:	4619      	mov	r1, r3
 801207a:	f04f 0c0a 	mov.w	ip, #10
 801207e:	4620      	mov	r0, r4
 8012080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012084:	3a30      	subs	r2, #48	; 0x30
 8012086:	2a09      	cmp	r2, #9
 8012088:	d903      	bls.n	8012092 <_svfiprintf_r+0x1a6>
 801208a:	2b00      	cmp	r3, #0
 801208c:	d0c6      	beq.n	801201c <_svfiprintf_r+0x130>
 801208e:	9105      	str	r1, [sp, #20]
 8012090:	e7c4      	b.n	801201c <_svfiprintf_r+0x130>
 8012092:	fb0c 2101 	mla	r1, ip, r1, r2
 8012096:	4604      	mov	r4, r0
 8012098:	2301      	movs	r3, #1
 801209a:	e7f0      	b.n	801207e <_svfiprintf_r+0x192>
 801209c:	ab03      	add	r3, sp, #12
 801209e:	9300      	str	r3, [sp, #0]
 80120a0:	462a      	mov	r2, r5
 80120a2:	4b0f      	ldr	r3, [pc, #60]	; (80120e0 <_svfiprintf_r+0x1f4>)
 80120a4:	a904      	add	r1, sp, #16
 80120a6:	4638      	mov	r0, r7
 80120a8:	f7fd fef6 	bl	800fe98 <_printf_float>
 80120ac:	1c42      	adds	r2, r0, #1
 80120ae:	4606      	mov	r6, r0
 80120b0:	d1d6      	bne.n	8012060 <_svfiprintf_r+0x174>
 80120b2:	89ab      	ldrh	r3, [r5, #12]
 80120b4:	065b      	lsls	r3, r3, #25
 80120b6:	f53f af2d 	bmi.w	8011f14 <_svfiprintf_r+0x28>
 80120ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120bc:	b01d      	add	sp, #116	; 0x74
 80120be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c2:	ab03      	add	r3, sp, #12
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	462a      	mov	r2, r5
 80120c8:	4b05      	ldr	r3, [pc, #20]	; (80120e0 <_svfiprintf_r+0x1f4>)
 80120ca:	a904      	add	r1, sp, #16
 80120cc:	4638      	mov	r0, r7
 80120ce:	f7fe f96b 	bl	80103a8 <_printf_i>
 80120d2:	e7eb      	b.n	80120ac <_svfiprintf_r+0x1c0>
 80120d4:	08012d3c 	.word	0x08012d3c
 80120d8:	08012d46 	.word	0x08012d46
 80120dc:	0800fe99 	.word	0x0800fe99
 80120e0:	08011e39 	.word	0x08011e39
 80120e4:	08012d42 	.word	0x08012d42

080120e8 <__sflush_r>:
 80120e8:	898a      	ldrh	r2, [r1, #12]
 80120ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ee:	4605      	mov	r5, r0
 80120f0:	0710      	lsls	r0, r2, #28
 80120f2:	460c      	mov	r4, r1
 80120f4:	d458      	bmi.n	80121a8 <__sflush_r+0xc0>
 80120f6:	684b      	ldr	r3, [r1, #4]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	dc05      	bgt.n	8012108 <__sflush_r+0x20>
 80120fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80120fe:	2b00      	cmp	r3, #0
 8012100:	dc02      	bgt.n	8012108 <__sflush_r+0x20>
 8012102:	2000      	movs	r0, #0
 8012104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801210a:	2e00      	cmp	r6, #0
 801210c:	d0f9      	beq.n	8012102 <__sflush_r+0x1a>
 801210e:	2300      	movs	r3, #0
 8012110:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012114:	682f      	ldr	r7, [r5, #0]
 8012116:	6a21      	ldr	r1, [r4, #32]
 8012118:	602b      	str	r3, [r5, #0]
 801211a:	d032      	beq.n	8012182 <__sflush_r+0x9a>
 801211c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801211e:	89a3      	ldrh	r3, [r4, #12]
 8012120:	075a      	lsls	r2, r3, #29
 8012122:	d505      	bpl.n	8012130 <__sflush_r+0x48>
 8012124:	6863      	ldr	r3, [r4, #4]
 8012126:	1ac0      	subs	r0, r0, r3
 8012128:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801212a:	b10b      	cbz	r3, 8012130 <__sflush_r+0x48>
 801212c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801212e:	1ac0      	subs	r0, r0, r3
 8012130:	2300      	movs	r3, #0
 8012132:	4602      	mov	r2, r0
 8012134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012136:	6a21      	ldr	r1, [r4, #32]
 8012138:	4628      	mov	r0, r5
 801213a:	47b0      	blx	r6
 801213c:	1c43      	adds	r3, r0, #1
 801213e:	89a3      	ldrh	r3, [r4, #12]
 8012140:	d106      	bne.n	8012150 <__sflush_r+0x68>
 8012142:	6829      	ldr	r1, [r5, #0]
 8012144:	291d      	cmp	r1, #29
 8012146:	d82b      	bhi.n	80121a0 <__sflush_r+0xb8>
 8012148:	4a29      	ldr	r2, [pc, #164]	; (80121f0 <__sflush_r+0x108>)
 801214a:	410a      	asrs	r2, r1
 801214c:	07d6      	lsls	r6, r2, #31
 801214e:	d427      	bmi.n	80121a0 <__sflush_r+0xb8>
 8012150:	2200      	movs	r2, #0
 8012152:	6062      	str	r2, [r4, #4]
 8012154:	04d9      	lsls	r1, r3, #19
 8012156:	6922      	ldr	r2, [r4, #16]
 8012158:	6022      	str	r2, [r4, #0]
 801215a:	d504      	bpl.n	8012166 <__sflush_r+0x7e>
 801215c:	1c42      	adds	r2, r0, #1
 801215e:	d101      	bne.n	8012164 <__sflush_r+0x7c>
 8012160:	682b      	ldr	r3, [r5, #0]
 8012162:	b903      	cbnz	r3, 8012166 <__sflush_r+0x7e>
 8012164:	6560      	str	r0, [r4, #84]	; 0x54
 8012166:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012168:	602f      	str	r7, [r5, #0]
 801216a:	2900      	cmp	r1, #0
 801216c:	d0c9      	beq.n	8012102 <__sflush_r+0x1a>
 801216e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012172:	4299      	cmp	r1, r3
 8012174:	d002      	beq.n	801217c <__sflush_r+0x94>
 8012176:	4628      	mov	r0, r5
 8012178:	f7ff f9e2 	bl	8011540 <_free_r>
 801217c:	2000      	movs	r0, #0
 801217e:	6360      	str	r0, [r4, #52]	; 0x34
 8012180:	e7c0      	b.n	8012104 <__sflush_r+0x1c>
 8012182:	2301      	movs	r3, #1
 8012184:	4628      	mov	r0, r5
 8012186:	47b0      	blx	r6
 8012188:	1c41      	adds	r1, r0, #1
 801218a:	d1c8      	bne.n	801211e <__sflush_r+0x36>
 801218c:	682b      	ldr	r3, [r5, #0]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d0c5      	beq.n	801211e <__sflush_r+0x36>
 8012192:	2b1d      	cmp	r3, #29
 8012194:	d001      	beq.n	801219a <__sflush_r+0xb2>
 8012196:	2b16      	cmp	r3, #22
 8012198:	d101      	bne.n	801219e <__sflush_r+0xb6>
 801219a:	602f      	str	r7, [r5, #0]
 801219c:	e7b1      	b.n	8012102 <__sflush_r+0x1a>
 801219e:	89a3      	ldrh	r3, [r4, #12]
 80121a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121a4:	81a3      	strh	r3, [r4, #12]
 80121a6:	e7ad      	b.n	8012104 <__sflush_r+0x1c>
 80121a8:	690f      	ldr	r7, [r1, #16]
 80121aa:	2f00      	cmp	r7, #0
 80121ac:	d0a9      	beq.n	8012102 <__sflush_r+0x1a>
 80121ae:	0793      	lsls	r3, r2, #30
 80121b0:	680e      	ldr	r6, [r1, #0]
 80121b2:	bf08      	it	eq
 80121b4:	694b      	ldreq	r3, [r1, #20]
 80121b6:	600f      	str	r7, [r1, #0]
 80121b8:	bf18      	it	ne
 80121ba:	2300      	movne	r3, #0
 80121bc:	eba6 0807 	sub.w	r8, r6, r7
 80121c0:	608b      	str	r3, [r1, #8]
 80121c2:	f1b8 0f00 	cmp.w	r8, #0
 80121c6:	dd9c      	ble.n	8012102 <__sflush_r+0x1a>
 80121c8:	6a21      	ldr	r1, [r4, #32]
 80121ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80121cc:	4643      	mov	r3, r8
 80121ce:	463a      	mov	r2, r7
 80121d0:	4628      	mov	r0, r5
 80121d2:	47b0      	blx	r6
 80121d4:	2800      	cmp	r0, #0
 80121d6:	dc06      	bgt.n	80121e6 <__sflush_r+0xfe>
 80121d8:	89a3      	ldrh	r3, [r4, #12]
 80121da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121de:	81a3      	strh	r3, [r4, #12]
 80121e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121e4:	e78e      	b.n	8012104 <__sflush_r+0x1c>
 80121e6:	4407      	add	r7, r0
 80121e8:	eba8 0800 	sub.w	r8, r8, r0
 80121ec:	e7e9      	b.n	80121c2 <__sflush_r+0xda>
 80121ee:	bf00      	nop
 80121f0:	dfbffffe 	.word	0xdfbffffe

080121f4 <_fflush_r>:
 80121f4:	b538      	push	{r3, r4, r5, lr}
 80121f6:	690b      	ldr	r3, [r1, #16]
 80121f8:	4605      	mov	r5, r0
 80121fa:	460c      	mov	r4, r1
 80121fc:	b913      	cbnz	r3, 8012204 <_fflush_r+0x10>
 80121fe:	2500      	movs	r5, #0
 8012200:	4628      	mov	r0, r5
 8012202:	bd38      	pop	{r3, r4, r5, pc}
 8012204:	b118      	cbz	r0, 801220e <_fflush_r+0x1a>
 8012206:	6a03      	ldr	r3, [r0, #32]
 8012208:	b90b      	cbnz	r3, 801220e <_fflush_r+0x1a>
 801220a:	f7fe fa7b 	bl	8010704 <__sinit>
 801220e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d0f3      	beq.n	80121fe <_fflush_r+0xa>
 8012216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012218:	07d0      	lsls	r0, r2, #31
 801221a:	d404      	bmi.n	8012226 <_fflush_r+0x32>
 801221c:	0599      	lsls	r1, r3, #22
 801221e:	d402      	bmi.n	8012226 <_fflush_r+0x32>
 8012220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012222:	f7fe fb86 	bl	8010932 <__retarget_lock_acquire_recursive>
 8012226:	4628      	mov	r0, r5
 8012228:	4621      	mov	r1, r4
 801222a:	f7ff ff5d 	bl	80120e8 <__sflush_r>
 801222e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012230:	07da      	lsls	r2, r3, #31
 8012232:	4605      	mov	r5, r0
 8012234:	d4e4      	bmi.n	8012200 <_fflush_r+0xc>
 8012236:	89a3      	ldrh	r3, [r4, #12]
 8012238:	059b      	lsls	r3, r3, #22
 801223a:	d4e1      	bmi.n	8012200 <_fflush_r+0xc>
 801223c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801223e:	f7fe fb79 	bl	8010934 <__retarget_lock_release_recursive>
 8012242:	e7dd      	b.n	8012200 <_fflush_r+0xc>

08012244 <memmove>:
 8012244:	4288      	cmp	r0, r1
 8012246:	b510      	push	{r4, lr}
 8012248:	eb01 0402 	add.w	r4, r1, r2
 801224c:	d902      	bls.n	8012254 <memmove+0x10>
 801224e:	4284      	cmp	r4, r0
 8012250:	4623      	mov	r3, r4
 8012252:	d807      	bhi.n	8012264 <memmove+0x20>
 8012254:	1e43      	subs	r3, r0, #1
 8012256:	42a1      	cmp	r1, r4
 8012258:	d008      	beq.n	801226c <memmove+0x28>
 801225a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801225e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012262:	e7f8      	b.n	8012256 <memmove+0x12>
 8012264:	4402      	add	r2, r0
 8012266:	4601      	mov	r1, r0
 8012268:	428a      	cmp	r2, r1
 801226a:	d100      	bne.n	801226e <memmove+0x2a>
 801226c:	bd10      	pop	{r4, pc}
 801226e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012276:	e7f7      	b.n	8012268 <memmove+0x24>

08012278 <_sbrk_r>:
 8012278:	b538      	push	{r3, r4, r5, lr}
 801227a:	4d06      	ldr	r5, [pc, #24]	; (8012294 <_sbrk_r+0x1c>)
 801227c:	2300      	movs	r3, #0
 801227e:	4604      	mov	r4, r0
 8012280:	4608      	mov	r0, r1
 8012282:	602b      	str	r3, [r5, #0]
 8012284:	f7f0 fbf0 	bl	8002a68 <_sbrk>
 8012288:	1c43      	adds	r3, r0, #1
 801228a:	d102      	bne.n	8012292 <_sbrk_r+0x1a>
 801228c:	682b      	ldr	r3, [r5, #0]
 801228e:	b103      	cbz	r3, 8012292 <_sbrk_r+0x1a>
 8012290:	6023      	str	r3, [r4, #0]
 8012292:	bd38      	pop	{r3, r4, r5, pc}
 8012294:	240009a0 	.word	0x240009a0

08012298 <__assert_func>:
 8012298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801229a:	4614      	mov	r4, r2
 801229c:	461a      	mov	r2, r3
 801229e:	4b09      	ldr	r3, [pc, #36]	; (80122c4 <__assert_func+0x2c>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	4605      	mov	r5, r0
 80122a4:	68d8      	ldr	r0, [r3, #12]
 80122a6:	b14c      	cbz	r4, 80122bc <__assert_func+0x24>
 80122a8:	4b07      	ldr	r3, [pc, #28]	; (80122c8 <__assert_func+0x30>)
 80122aa:	9100      	str	r1, [sp, #0]
 80122ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80122b0:	4906      	ldr	r1, [pc, #24]	; (80122cc <__assert_func+0x34>)
 80122b2:	462b      	mov	r3, r5
 80122b4:	f000 f872 	bl	801239c <fiprintf>
 80122b8:	f000 f882 	bl	80123c0 <abort>
 80122bc:	4b04      	ldr	r3, [pc, #16]	; (80122d0 <__assert_func+0x38>)
 80122be:	461c      	mov	r4, r3
 80122c0:	e7f3      	b.n	80122aa <__assert_func+0x12>
 80122c2:	bf00      	nop
 80122c4:	2400006c 	.word	0x2400006c
 80122c8:	08012d57 	.word	0x08012d57
 80122cc:	08012d64 	.word	0x08012d64
 80122d0:	08012d92 	.word	0x08012d92

080122d4 <_calloc_r>:
 80122d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122d6:	fba1 2402 	umull	r2, r4, r1, r2
 80122da:	b94c      	cbnz	r4, 80122f0 <_calloc_r+0x1c>
 80122dc:	4611      	mov	r1, r2
 80122de:	9201      	str	r2, [sp, #4]
 80122e0:	f7ff f9a2 	bl	8011628 <_malloc_r>
 80122e4:	9a01      	ldr	r2, [sp, #4]
 80122e6:	4605      	mov	r5, r0
 80122e8:	b930      	cbnz	r0, 80122f8 <_calloc_r+0x24>
 80122ea:	4628      	mov	r0, r5
 80122ec:	b003      	add	sp, #12
 80122ee:	bd30      	pop	{r4, r5, pc}
 80122f0:	220c      	movs	r2, #12
 80122f2:	6002      	str	r2, [r0, #0]
 80122f4:	2500      	movs	r5, #0
 80122f6:	e7f8      	b.n	80122ea <_calloc_r+0x16>
 80122f8:	4621      	mov	r1, r4
 80122fa:	f7fe fa9c 	bl	8010836 <memset>
 80122fe:	e7f4      	b.n	80122ea <_calloc_r+0x16>

08012300 <__ascii_mbtowc>:
 8012300:	b082      	sub	sp, #8
 8012302:	b901      	cbnz	r1, 8012306 <__ascii_mbtowc+0x6>
 8012304:	a901      	add	r1, sp, #4
 8012306:	b142      	cbz	r2, 801231a <__ascii_mbtowc+0x1a>
 8012308:	b14b      	cbz	r3, 801231e <__ascii_mbtowc+0x1e>
 801230a:	7813      	ldrb	r3, [r2, #0]
 801230c:	600b      	str	r3, [r1, #0]
 801230e:	7812      	ldrb	r2, [r2, #0]
 8012310:	1e10      	subs	r0, r2, #0
 8012312:	bf18      	it	ne
 8012314:	2001      	movne	r0, #1
 8012316:	b002      	add	sp, #8
 8012318:	4770      	bx	lr
 801231a:	4610      	mov	r0, r2
 801231c:	e7fb      	b.n	8012316 <__ascii_mbtowc+0x16>
 801231e:	f06f 0001 	mvn.w	r0, #1
 8012322:	e7f8      	b.n	8012316 <__ascii_mbtowc+0x16>

08012324 <_realloc_r>:
 8012324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012328:	4680      	mov	r8, r0
 801232a:	4614      	mov	r4, r2
 801232c:	460e      	mov	r6, r1
 801232e:	b921      	cbnz	r1, 801233a <_realloc_r+0x16>
 8012330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012334:	4611      	mov	r1, r2
 8012336:	f7ff b977 	b.w	8011628 <_malloc_r>
 801233a:	b92a      	cbnz	r2, 8012348 <_realloc_r+0x24>
 801233c:	f7ff f900 	bl	8011540 <_free_r>
 8012340:	4625      	mov	r5, r4
 8012342:	4628      	mov	r0, r5
 8012344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012348:	f000 f841 	bl	80123ce <_malloc_usable_size_r>
 801234c:	4284      	cmp	r4, r0
 801234e:	4607      	mov	r7, r0
 8012350:	d802      	bhi.n	8012358 <_realloc_r+0x34>
 8012352:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012356:	d812      	bhi.n	801237e <_realloc_r+0x5a>
 8012358:	4621      	mov	r1, r4
 801235a:	4640      	mov	r0, r8
 801235c:	f7ff f964 	bl	8011628 <_malloc_r>
 8012360:	4605      	mov	r5, r0
 8012362:	2800      	cmp	r0, #0
 8012364:	d0ed      	beq.n	8012342 <_realloc_r+0x1e>
 8012366:	42bc      	cmp	r4, r7
 8012368:	4622      	mov	r2, r4
 801236a:	4631      	mov	r1, r6
 801236c:	bf28      	it	cs
 801236e:	463a      	movcs	r2, r7
 8012370:	f7fe fae1 	bl	8010936 <memcpy>
 8012374:	4631      	mov	r1, r6
 8012376:	4640      	mov	r0, r8
 8012378:	f7ff f8e2 	bl	8011540 <_free_r>
 801237c:	e7e1      	b.n	8012342 <_realloc_r+0x1e>
 801237e:	4635      	mov	r5, r6
 8012380:	e7df      	b.n	8012342 <_realloc_r+0x1e>

08012382 <__ascii_wctomb>:
 8012382:	b149      	cbz	r1, 8012398 <__ascii_wctomb+0x16>
 8012384:	2aff      	cmp	r2, #255	; 0xff
 8012386:	bf85      	ittet	hi
 8012388:	238a      	movhi	r3, #138	; 0x8a
 801238a:	6003      	strhi	r3, [r0, #0]
 801238c:	700a      	strbls	r2, [r1, #0]
 801238e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012392:	bf98      	it	ls
 8012394:	2001      	movls	r0, #1
 8012396:	4770      	bx	lr
 8012398:	4608      	mov	r0, r1
 801239a:	4770      	bx	lr

0801239c <fiprintf>:
 801239c:	b40e      	push	{r1, r2, r3}
 801239e:	b503      	push	{r0, r1, lr}
 80123a0:	4601      	mov	r1, r0
 80123a2:	ab03      	add	r3, sp, #12
 80123a4:	4805      	ldr	r0, [pc, #20]	; (80123bc <fiprintf+0x20>)
 80123a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80123aa:	6800      	ldr	r0, [r0, #0]
 80123ac:	9301      	str	r3, [sp, #4]
 80123ae:	f000 f83f 	bl	8012430 <_vfiprintf_r>
 80123b2:	b002      	add	sp, #8
 80123b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80123b8:	b003      	add	sp, #12
 80123ba:	4770      	bx	lr
 80123bc:	2400006c 	.word	0x2400006c

080123c0 <abort>:
 80123c0:	b508      	push	{r3, lr}
 80123c2:	2006      	movs	r0, #6
 80123c4:	f000 fa0c 	bl	80127e0 <raise>
 80123c8:	2001      	movs	r0, #1
 80123ca:	f7f0 fad5 	bl	8002978 <_exit>

080123ce <_malloc_usable_size_r>:
 80123ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123d2:	1f18      	subs	r0, r3, #4
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	bfbc      	itt	lt
 80123d8:	580b      	ldrlt	r3, [r1, r0]
 80123da:	18c0      	addlt	r0, r0, r3
 80123dc:	4770      	bx	lr

080123de <__sfputc_r>:
 80123de:	6893      	ldr	r3, [r2, #8]
 80123e0:	3b01      	subs	r3, #1
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	b410      	push	{r4}
 80123e6:	6093      	str	r3, [r2, #8]
 80123e8:	da08      	bge.n	80123fc <__sfputc_r+0x1e>
 80123ea:	6994      	ldr	r4, [r2, #24]
 80123ec:	42a3      	cmp	r3, r4
 80123ee:	db01      	blt.n	80123f4 <__sfputc_r+0x16>
 80123f0:	290a      	cmp	r1, #10
 80123f2:	d103      	bne.n	80123fc <__sfputc_r+0x1e>
 80123f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123f8:	f000 b934 	b.w	8012664 <__swbuf_r>
 80123fc:	6813      	ldr	r3, [r2, #0]
 80123fe:	1c58      	adds	r0, r3, #1
 8012400:	6010      	str	r0, [r2, #0]
 8012402:	7019      	strb	r1, [r3, #0]
 8012404:	4608      	mov	r0, r1
 8012406:	f85d 4b04 	ldr.w	r4, [sp], #4
 801240a:	4770      	bx	lr

0801240c <__sfputs_r>:
 801240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801240e:	4606      	mov	r6, r0
 8012410:	460f      	mov	r7, r1
 8012412:	4614      	mov	r4, r2
 8012414:	18d5      	adds	r5, r2, r3
 8012416:	42ac      	cmp	r4, r5
 8012418:	d101      	bne.n	801241e <__sfputs_r+0x12>
 801241a:	2000      	movs	r0, #0
 801241c:	e007      	b.n	801242e <__sfputs_r+0x22>
 801241e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012422:	463a      	mov	r2, r7
 8012424:	4630      	mov	r0, r6
 8012426:	f7ff ffda 	bl	80123de <__sfputc_r>
 801242a:	1c43      	adds	r3, r0, #1
 801242c:	d1f3      	bne.n	8012416 <__sfputs_r+0xa>
 801242e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012430 <_vfiprintf_r>:
 8012430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012434:	460d      	mov	r5, r1
 8012436:	b09d      	sub	sp, #116	; 0x74
 8012438:	4614      	mov	r4, r2
 801243a:	4698      	mov	r8, r3
 801243c:	4606      	mov	r6, r0
 801243e:	b118      	cbz	r0, 8012448 <_vfiprintf_r+0x18>
 8012440:	6a03      	ldr	r3, [r0, #32]
 8012442:	b90b      	cbnz	r3, 8012448 <_vfiprintf_r+0x18>
 8012444:	f7fe f95e 	bl	8010704 <__sinit>
 8012448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801244a:	07d9      	lsls	r1, r3, #31
 801244c:	d405      	bmi.n	801245a <_vfiprintf_r+0x2a>
 801244e:	89ab      	ldrh	r3, [r5, #12]
 8012450:	059a      	lsls	r2, r3, #22
 8012452:	d402      	bmi.n	801245a <_vfiprintf_r+0x2a>
 8012454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012456:	f7fe fa6c 	bl	8010932 <__retarget_lock_acquire_recursive>
 801245a:	89ab      	ldrh	r3, [r5, #12]
 801245c:	071b      	lsls	r3, r3, #28
 801245e:	d501      	bpl.n	8012464 <_vfiprintf_r+0x34>
 8012460:	692b      	ldr	r3, [r5, #16]
 8012462:	b99b      	cbnz	r3, 801248c <_vfiprintf_r+0x5c>
 8012464:	4629      	mov	r1, r5
 8012466:	4630      	mov	r0, r6
 8012468:	f000 f93a 	bl	80126e0 <__swsetup_r>
 801246c:	b170      	cbz	r0, 801248c <_vfiprintf_r+0x5c>
 801246e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012470:	07dc      	lsls	r4, r3, #31
 8012472:	d504      	bpl.n	801247e <_vfiprintf_r+0x4e>
 8012474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012478:	b01d      	add	sp, #116	; 0x74
 801247a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801247e:	89ab      	ldrh	r3, [r5, #12]
 8012480:	0598      	lsls	r0, r3, #22
 8012482:	d4f7      	bmi.n	8012474 <_vfiprintf_r+0x44>
 8012484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012486:	f7fe fa55 	bl	8010934 <__retarget_lock_release_recursive>
 801248a:	e7f3      	b.n	8012474 <_vfiprintf_r+0x44>
 801248c:	2300      	movs	r3, #0
 801248e:	9309      	str	r3, [sp, #36]	; 0x24
 8012490:	2320      	movs	r3, #32
 8012492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012496:	f8cd 800c 	str.w	r8, [sp, #12]
 801249a:	2330      	movs	r3, #48	; 0x30
 801249c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012650 <_vfiprintf_r+0x220>
 80124a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80124a4:	f04f 0901 	mov.w	r9, #1
 80124a8:	4623      	mov	r3, r4
 80124aa:	469a      	mov	sl, r3
 80124ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124b0:	b10a      	cbz	r2, 80124b6 <_vfiprintf_r+0x86>
 80124b2:	2a25      	cmp	r2, #37	; 0x25
 80124b4:	d1f9      	bne.n	80124aa <_vfiprintf_r+0x7a>
 80124b6:	ebba 0b04 	subs.w	fp, sl, r4
 80124ba:	d00b      	beq.n	80124d4 <_vfiprintf_r+0xa4>
 80124bc:	465b      	mov	r3, fp
 80124be:	4622      	mov	r2, r4
 80124c0:	4629      	mov	r1, r5
 80124c2:	4630      	mov	r0, r6
 80124c4:	f7ff ffa2 	bl	801240c <__sfputs_r>
 80124c8:	3001      	adds	r0, #1
 80124ca:	f000 80a9 	beq.w	8012620 <_vfiprintf_r+0x1f0>
 80124ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124d0:	445a      	add	r2, fp
 80124d2:	9209      	str	r2, [sp, #36]	; 0x24
 80124d4:	f89a 3000 	ldrb.w	r3, [sl]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	f000 80a1 	beq.w	8012620 <_vfiprintf_r+0x1f0>
 80124de:	2300      	movs	r3, #0
 80124e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124e8:	f10a 0a01 	add.w	sl, sl, #1
 80124ec:	9304      	str	r3, [sp, #16]
 80124ee:	9307      	str	r3, [sp, #28]
 80124f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80124f4:	931a      	str	r3, [sp, #104]	; 0x68
 80124f6:	4654      	mov	r4, sl
 80124f8:	2205      	movs	r2, #5
 80124fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124fe:	4854      	ldr	r0, [pc, #336]	; (8012650 <_vfiprintf_r+0x220>)
 8012500:	f7ed feee 	bl	80002e0 <memchr>
 8012504:	9a04      	ldr	r2, [sp, #16]
 8012506:	b9d8      	cbnz	r0, 8012540 <_vfiprintf_r+0x110>
 8012508:	06d1      	lsls	r1, r2, #27
 801250a:	bf44      	itt	mi
 801250c:	2320      	movmi	r3, #32
 801250e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012512:	0713      	lsls	r3, r2, #28
 8012514:	bf44      	itt	mi
 8012516:	232b      	movmi	r3, #43	; 0x2b
 8012518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801251c:	f89a 3000 	ldrb.w	r3, [sl]
 8012520:	2b2a      	cmp	r3, #42	; 0x2a
 8012522:	d015      	beq.n	8012550 <_vfiprintf_r+0x120>
 8012524:	9a07      	ldr	r2, [sp, #28]
 8012526:	4654      	mov	r4, sl
 8012528:	2000      	movs	r0, #0
 801252a:	f04f 0c0a 	mov.w	ip, #10
 801252e:	4621      	mov	r1, r4
 8012530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012534:	3b30      	subs	r3, #48	; 0x30
 8012536:	2b09      	cmp	r3, #9
 8012538:	d94d      	bls.n	80125d6 <_vfiprintf_r+0x1a6>
 801253a:	b1b0      	cbz	r0, 801256a <_vfiprintf_r+0x13a>
 801253c:	9207      	str	r2, [sp, #28]
 801253e:	e014      	b.n	801256a <_vfiprintf_r+0x13a>
 8012540:	eba0 0308 	sub.w	r3, r0, r8
 8012544:	fa09 f303 	lsl.w	r3, r9, r3
 8012548:	4313      	orrs	r3, r2
 801254a:	9304      	str	r3, [sp, #16]
 801254c:	46a2      	mov	sl, r4
 801254e:	e7d2      	b.n	80124f6 <_vfiprintf_r+0xc6>
 8012550:	9b03      	ldr	r3, [sp, #12]
 8012552:	1d19      	adds	r1, r3, #4
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	9103      	str	r1, [sp, #12]
 8012558:	2b00      	cmp	r3, #0
 801255a:	bfbb      	ittet	lt
 801255c:	425b      	neglt	r3, r3
 801255e:	f042 0202 	orrlt.w	r2, r2, #2
 8012562:	9307      	strge	r3, [sp, #28]
 8012564:	9307      	strlt	r3, [sp, #28]
 8012566:	bfb8      	it	lt
 8012568:	9204      	strlt	r2, [sp, #16]
 801256a:	7823      	ldrb	r3, [r4, #0]
 801256c:	2b2e      	cmp	r3, #46	; 0x2e
 801256e:	d10c      	bne.n	801258a <_vfiprintf_r+0x15a>
 8012570:	7863      	ldrb	r3, [r4, #1]
 8012572:	2b2a      	cmp	r3, #42	; 0x2a
 8012574:	d134      	bne.n	80125e0 <_vfiprintf_r+0x1b0>
 8012576:	9b03      	ldr	r3, [sp, #12]
 8012578:	1d1a      	adds	r2, r3, #4
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	9203      	str	r2, [sp, #12]
 801257e:	2b00      	cmp	r3, #0
 8012580:	bfb8      	it	lt
 8012582:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012586:	3402      	adds	r4, #2
 8012588:	9305      	str	r3, [sp, #20]
 801258a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012660 <_vfiprintf_r+0x230>
 801258e:	7821      	ldrb	r1, [r4, #0]
 8012590:	2203      	movs	r2, #3
 8012592:	4650      	mov	r0, sl
 8012594:	f7ed fea4 	bl	80002e0 <memchr>
 8012598:	b138      	cbz	r0, 80125aa <_vfiprintf_r+0x17a>
 801259a:	9b04      	ldr	r3, [sp, #16]
 801259c:	eba0 000a 	sub.w	r0, r0, sl
 80125a0:	2240      	movs	r2, #64	; 0x40
 80125a2:	4082      	lsls	r2, r0
 80125a4:	4313      	orrs	r3, r2
 80125a6:	3401      	adds	r4, #1
 80125a8:	9304      	str	r3, [sp, #16]
 80125aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125ae:	4829      	ldr	r0, [pc, #164]	; (8012654 <_vfiprintf_r+0x224>)
 80125b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80125b4:	2206      	movs	r2, #6
 80125b6:	f7ed fe93 	bl	80002e0 <memchr>
 80125ba:	2800      	cmp	r0, #0
 80125bc:	d03f      	beq.n	801263e <_vfiprintf_r+0x20e>
 80125be:	4b26      	ldr	r3, [pc, #152]	; (8012658 <_vfiprintf_r+0x228>)
 80125c0:	bb1b      	cbnz	r3, 801260a <_vfiprintf_r+0x1da>
 80125c2:	9b03      	ldr	r3, [sp, #12]
 80125c4:	3307      	adds	r3, #7
 80125c6:	f023 0307 	bic.w	r3, r3, #7
 80125ca:	3308      	adds	r3, #8
 80125cc:	9303      	str	r3, [sp, #12]
 80125ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125d0:	443b      	add	r3, r7
 80125d2:	9309      	str	r3, [sp, #36]	; 0x24
 80125d4:	e768      	b.n	80124a8 <_vfiprintf_r+0x78>
 80125d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80125da:	460c      	mov	r4, r1
 80125dc:	2001      	movs	r0, #1
 80125de:	e7a6      	b.n	801252e <_vfiprintf_r+0xfe>
 80125e0:	2300      	movs	r3, #0
 80125e2:	3401      	adds	r4, #1
 80125e4:	9305      	str	r3, [sp, #20]
 80125e6:	4619      	mov	r1, r3
 80125e8:	f04f 0c0a 	mov.w	ip, #10
 80125ec:	4620      	mov	r0, r4
 80125ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125f2:	3a30      	subs	r2, #48	; 0x30
 80125f4:	2a09      	cmp	r2, #9
 80125f6:	d903      	bls.n	8012600 <_vfiprintf_r+0x1d0>
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d0c6      	beq.n	801258a <_vfiprintf_r+0x15a>
 80125fc:	9105      	str	r1, [sp, #20]
 80125fe:	e7c4      	b.n	801258a <_vfiprintf_r+0x15a>
 8012600:	fb0c 2101 	mla	r1, ip, r1, r2
 8012604:	4604      	mov	r4, r0
 8012606:	2301      	movs	r3, #1
 8012608:	e7f0      	b.n	80125ec <_vfiprintf_r+0x1bc>
 801260a:	ab03      	add	r3, sp, #12
 801260c:	9300      	str	r3, [sp, #0]
 801260e:	462a      	mov	r2, r5
 8012610:	4b12      	ldr	r3, [pc, #72]	; (801265c <_vfiprintf_r+0x22c>)
 8012612:	a904      	add	r1, sp, #16
 8012614:	4630      	mov	r0, r6
 8012616:	f7fd fc3f 	bl	800fe98 <_printf_float>
 801261a:	4607      	mov	r7, r0
 801261c:	1c78      	adds	r0, r7, #1
 801261e:	d1d6      	bne.n	80125ce <_vfiprintf_r+0x19e>
 8012620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012622:	07d9      	lsls	r1, r3, #31
 8012624:	d405      	bmi.n	8012632 <_vfiprintf_r+0x202>
 8012626:	89ab      	ldrh	r3, [r5, #12]
 8012628:	059a      	lsls	r2, r3, #22
 801262a:	d402      	bmi.n	8012632 <_vfiprintf_r+0x202>
 801262c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801262e:	f7fe f981 	bl	8010934 <__retarget_lock_release_recursive>
 8012632:	89ab      	ldrh	r3, [r5, #12]
 8012634:	065b      	lsls	r3, r3, #25
 8012636:	f53f af1d 	bmi.w	8012474 <_vfiprintf_r+0x44>
 801263a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801263c:	e71c      	b.n	8012478 <_vfiprintf_r+0x48>
 801263e:	ab03      	add	r3, sp, #12
 8012640:	9300      	str	r3, [sp, #0]
 8012642:	462a      	mov	r2, r5
 8012644:	4b05      	ldr	r3, [pc, #20]	; (801265c <_vfiprintf_r+0x22c>)
 8012646:	a904      	add	r1, sp, #16
 8012648:	4630      	mov	r0, r6
 801264a:	f7fd fead 	bl	80103a8 <_printf_i>
 801264e:	e7e4      	b.n	801261a <_vfiprintf_r+0x1ea>
 8012650:	08012d3c 	.word	0x08012d3c
 8012654:	08012d46 	.word	0x08012d46
 8012658:	0800fe99 	.word	0x0800fe99
 801265c:	0801240d 	.word	0x0801240d
 8012660:	08012d42 	.word	0x08012d42

08012664 <__swbuf_r>:
 8012664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012666:	460e      	mov	r6, r1
 8012668:	4614      	mov	r4, r2
 801266a:	4605      	mov	r5, r0
 801266c:	b118      	cbz	r0, 8012676 <__swbuf_r+0x12>
 801266e:	6a03      	ldr	r3, [r0, #32]
 8012670:	b90b      	cbnz	r3, 8012676 <__swbuf_r+0x12>
 8012672:	f7fe f847 	bl	8010704 <__sinit>
 8012676:	69a3      	ldr	r3, [r4, #24]
 8012678:	60a3      	str	r3, [r4, #8]
 801267a:	89a3      	ldrh	r3, [r4, #12]
 801267c:	071a      	lsls	r2, r3, #28
 801267e:	d525      	bpl.n	80126cc <__swbuf_r+0x68>
 8012680:	6923      	ldr	r3, [r4, #16]
 8012682:	b31b      	cbz	r3, 80126cc <__swbuf_r+0x68>
 8012684:	6823      	ldr	r3, [r4, #0]
 8012686:	6922      	ldr	r2, [r4, #16]
 8012688:	1a98      	subs	r0, r3, r2
 801268a:	6963      	ldr	r3, [r4, #20]
 801268c:	b2f6      	uxtb	r6, r6
 801268e:	4283      	cmp	r3, r0
 8012690:	4637      	mov	r7, r6
 8012692:	dc04      	bgt.n	801269e <__swbuf_r+0x3a>
 8012694:	4621      	mov	r1, r4
 8012696:	4628      	mov	r0, r5
 8012698:	f7ff fdac 	bl	80121f4 <_fflush_r>
 801269c:	b9e0      	cbnz	r0, 80126d8 <__swbuf_r+0x74>
 801269e:	68a3      	ldr	r3, [r4, #8]
 80126a0:	3b01      	subs	r3, #1
 80126a2:	60a3      	str	r3, [r4, #8]
 80126a4:	6823      	ldr	r3, [r4, #0]
 80126a6:	1c5a      	adds	r2, r3, #1
 80126a8:	6022      	str	r2, [r4, #0]
 80126aa:	701e      	strb	r6, [r3, #0]
 80126ac:	6962      	ldr	r2, [r4, #20]
 80126ae:	1c43      	adds	r3, r0, #1
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d004      	beq.n	80126be <__swbuf_r+0x5a>
 80126b4:	89a3      	ldrh	r3, [r4, #12]
 80126b6:	07db      	lsls	r3, r3, #31
 80126b8:	d506      	bpl.n	80126c8 <__swbuf_r+0x64>
 80126ba:	2e0a      	cmp	r6, #10
 80126bc:	d104      	bne.n	80126c8 <__swbuf_r+0x64>
 80126be:	4621      	mov	r1, r4
 80126c0:	4628      	mov	r0, r5
 80126c2:	f7ff fd97 	bl	80121f4 <_fflush_r>
 80126c6:	b938      	cbnz	r0, 80126d8 <__swbuf_r+0x74>
 80126c8:	4638      	mov	r0, r7
 80126ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126cc:	4621      	mov	r1, r4
 80126ce:	4628      	mov	r0, r5
 80126d0:	f000 f806 	bl	80126e0 <__swsetup_r>
 80126d4:	2800      	cmp	r0, #0
 80126d6:	d0d5      	beq.n	8012684 <__swbuf_r+0x20>
 80126d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80126dc:	e7f4      	b.n	80126c8 <__swbuf_r+0x64>
	...

080126e0 <__swsetup_r>:
 80126e0:	b538      	push	{r3, r4, r5, lr}
 80126e2:	4b2a      	ldr	r3, [pc, #168]	; (801278c <__swsetup_r+0xac>)
 80126e4:	4605      	mov	r5, r0
 80126e6:	6818      	ldr	r0, [r3, #0]
 80126e8:	460c      	mov	r4, r1
 80126ea:	b118      	cbz	r0, 80126f4 <__swsetup_r+0x14>
 80126ec:	6a03      	ldr	r3, [r0, #32]
 80126ee:	b90b      	cbnz	r3, 80126f4 <__swsetup_r+0x14>
 80126f0:	f7fe f808 	bl	8010704 <__sinit>
 80126f4:	89a3      	ldrh	r3, [r4, #12]
 80126f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126fa:	0718      	lsls	r0, r3, #28
 80126fc:	d422      	bmi.n	8012744 <__swsetup_r+0x64>
 80126fe:	06d9      	lsls	r1, r3, #27
 8012700:	d407      	bmi.n	8012712 <__swsetup_r+0x32>
 8012702:	2309      	movs	r3, #9
 8012704:	602b      	str	r3, [r5, #0]
 8012706:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801270a:	81a3      	strh	r3, [r4, #12]
 801270c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012710:	e034      	b.n	801277c <__swsetup_r+0x9c>
 8012712:	0758      	lsls	r0, r3, #29
 8012714:	d512      	bpl.n	801273c <__swsetup_r+0x5c>
 8012716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012718:	b141      	cbz	r1, 801272c <__swsetup_r+0x4c>
 801271a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801271e:	4299      	cmp	r1, r3
 8012720:	d002      	beq.n	8012728 <__swsetup_r+0x48>
 8012722:	4628      	mov	r0, r5
 8012724:	f7fe ff0c 	bl	8011540 <_free_r>
 8012728:	2300      	movs	r3, #0
 801272a:	6363      	str	r3, [r4, #52]	; 0x34
 801272c:	89a3      	ldrh	r3, [r4, #12]
 801272e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012732:	81a3      	strh	r3, [r4, #12]
 8012734:	2300      	movs	r3, #0
 8012736:	6063      	str	r3, [r4, #4]
 8012738:	6923      	ldr	r3, [r4, #16]
 801273a:	6023      	str	r3, [r4, #0]
 801273c:	89a3      	ldrh	r3, [r4, #12]
 801273e:	f043 0308 	orr.w	r3, r3, #8
 8012742:	81a3      	strh	r3, [r4, #12]
 8012744:	6923      	ldr	r3, [r4, #16]
 8012746:	b94b      	cbnz	r3, 801275c <__swsetup_r+0x7c>
 8012748:	89a3      	ldrh	r3, [r4, #12]
 801274a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801274e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012752:	d003      	beq.n	801275c <__swsetup_r+0x7c>
 8012754:	4621      	mov	r1, r4
 8012756:	4628      	mov	r0, r5
 8012758:	f000 f884 	bl	8012864 <__smakebuf_r>
 801275c:	89a0      	ldrh	r0, [r4, #12]
 801275e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012762:	f010 0301 	ands.w	r3, r0, #1
 8012766:	d00a      	beq.n	801277e <__swsetup_r+0x9e>
 8012768:	2300      	movs	r3, #0
 801276a:	60a3      	str	r3, [r4, #8]
 801276c:	6963      	ldr	r3, [r4, #20]
 801276e:	425b      	negs	r3, r3
 8012770:	61a3      	str	r3, [r4, #24]
 8012772:	6923      	ldr	r3, [r4, #16]
 8012774:	b943      	cbnz	r3, 8012788 <__swsetup_r+0xa8>
 8012776:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801277a:	d1c4      	bne.n	8012706 <__swsetup_r+0x26>
 801277c:	bd38      	pop	{r3, r4, r5, pc}
 801277e:	0781      	lsls	r1, r0, #30
 8012780:	bf58      	it	pl
 8012782:	6963      	ldrpl	r3, [r4, #20]
 8012784:	60a3      	str	r3, [r4, #8]
 8012786:	e7f4      	b.n	8012772 <__swsetup_r+0x92>
 8012788:	2000      	movs	r0, #0
 801278a:	e7f7      	b.n	801277c <__swsetup_r+0x9c>
 801278c:	2400006c 	.word	0x2400006c

08012790 <_raise_r>:
 8012790:	291f      	cmp	r1, #31
 8012792:	b538      	push	{r3, r4, r5, lr}
 8012794:	4604      	mov	r4, r0
 8012796:	460d      	mov	r5, r1
 8012798:	d904      	bls.n	80127a4 <_raise_r+0x14>
 801279a:	2316      	movs	r3, #22
 801279c:	6003      	str	r3, [r0, #0]
 801279e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127a2:	bd38      	pop	{r3, r4, r5, pc}
 80127a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80127a6:	b112      	cbz	r2, 80127ae <_raise_r+0x1e>
 80127a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80127ac:	b94b      	cbnz	r3, 80127c2 <_raise_r+0x32>
 80127ae:	4620      	mov	r0, r4
 80127b0:	f000 f830 	bl	8012814 <_getpid_r>
 80127b4:	462a      	mov	r2, r5
 80127b6:	4601      	mov	r1, r0
 80127b8:	4620      	mov	r0, r4
 80127ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127be:	f000 b817 	b.w	80127f0 <_kill_r>
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d00a      	beq.n	80127dc <_raise_r+0x4c>
 80127c6:	1c59      	adds	r1, r3, #1
 80127c8:	d103      	bne.n	80127d2 <_raise_r+0x42>
 80127ca:	2316      	movs	r3, #22
 80127cc:	6003      	str	r3, [r0, #0]
 80127ce:	2001      	movs	r0, #1
 80127d0:	e7e7      	b.n	80127a2 <_raise_r+0x12>
 80127d2:	2400      	movs	r4, #0
 80127d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80127d8:	4628      	mov	r0, r5
 80127da:	4798      	blx	r3
 80127dc:	2000      	movs	r0, #0
 80127de:	e7e0      	b.n	80127a2 <_raise_r+0x12>

080127e0 <raise>:
 80127e0:	4b02      	ldr	r3, [pc, #8]	; (80127ec <raise+0xc>)
 80127e2:	4601      	mov	r1, r0
 80127e4:	6818      	ldr	r0, [r3, #0]
 80127e6:	f7ff bfd3 	b.w	8012790 <_raise_r>
 80127ea:	bf00      	nop
 80127ec:	2400006c 	.word	0x2400006c

080127f0 <_kill_r>:
 80127f0:	b538      	push	{r3, r4, r5, lr}
 80127f2:	4d07      	ldr	r5, [pc, #28]	; (8012810 <_kill_r+0x20>)
 80127f4:	2300      	movs	r3, #0
 80127f6:	4604      	mov	r4, r0
 80127f8:	4608      	mov	r0, r1
 80127fa:	4611      	mov	r1, r2
 80127fc:	602b      	str	r3, [r5, #0]
 80127fe:	f7f0 f8ab 	bl	8002958 <_kill>
 8012802:	1c43      	adds	r3, r0, #1
 8012804:	d102      	bne.n	801280c <_kill_r+0x1c>
 8012806:	682b      	ldr	r3, [r5, #0]
 8012808:	b103      	cbz	r3, 801280c <_kill_r+0x1c>
 801280a:	6023      	str	r3, [r4, #0]
 801280c:	bd38      	pop	{r3, r4, r5, pc}
 801280e:	bf00      	nop
 8012810:	240009a0 	.word	0x240009a0

08012814 <_getpid_r>:
 8012814:	f7f0 b898 	b.w	8002948 <_getpid>

08012818 <__swhatbuf_r>:
 8012818:	b570      	push	{r4, r5, r6, lr}
 801281a:	460c      	mov	r4, r1
 801281c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012820:	2900      	cmp	r1, #0
 8012822:	b096      	sub	sp, #88	; 0x58
 8012824:	4615      	mov	r5, r2
 8012826:	461e      	mov	r6, r3
 8012828:	da0d      	bge.n	8012846 <__swhatbuf_r+0x2e>
 801282a:	89a3      	ldrh	r3, [r4, #12]
 801282c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012830:	f04f 0100 	mov.w	r1, #0
 8012834:	bf0c      	ite	eq
 8012836:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801283a:	2340      	movne	r3, #64	; 0x40
 801283c:	2000      	movs	r0, #0
 801283e:	6031      	str	r1, [r6, #0]
 8012840:	602b      	str	r3, [r5, #0]
 8012842:	b016      	add	sp, #88	; 0x58
 8012844:	bd70      	pop	{r4, r5, r6, pc}
 8012846:	466a      	mov	r2, sp
 8012848:	f000 f848 	bl	80128dc <_fstat_r>
 801284c:	2800      	cmp	r0, #0
 801284e:	dbec      	blt.n	801282a <__swhatbuf_r+0x12>
 8012850:	9901      	ldr	r1, [sp, #4]
 8012852:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012856:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801285a:	4259      	negs	r1, r3
 801285c:	4159      	adcs	r1, r3
 801285e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012862:	e7eb      	b.n	801283c <__swhatbuf_r+0x24>

08012864 <__smakebuf_r>:
 8012864:	898b      	ldrh	r3, [r1, #12]
 8012866:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012868:	079d      	lsls	r5, r3, #30
 801286a:	4606      	mov	r6, r0
 801286c:	460c      	mov	r4, r1
 801286e:	d507      	bpl.n	8012880 <__smakebuf_r+0x1c>
 8012870:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012874:	6023      	str	r3, [r4, #0]
 8012876:	6123      	str	r3, [r4, #16]
 8012878:	2301      	movs	r3, #1
 801287a:	6163      	str	r3, [r4, #20]
 801287c:	b002      	add	sp, #8
 801287e:	bd70      	pop	{r4, r5, r6, pc}
 8012880:	ab01      	add	r3, sp, #4
 8012882:	466a      	mov	r2, sp
 8012884:	f7ff ffc8 	bl	8012818 <__swhatbuf_r>
 8012888:	9900      	ldr	r1, [sp, #0]
 801288a:	4605      	mov	r5, r0
 801288c:	4630      	mov	r0, r6
 801288e:	f7fe fecb 	bl	8011628 <_malloc_r>
 8012892:	b948      	cbnz	r0, 80128a8 <__smakebuf_r+0x44>
 8012894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012898:	059a      	lsls	r2, r3, #22
 801289a:	d4ef      	bmi.n	801287c <__smakebuf_r+0x18>
 801289c:	f023 0303 	bic.w	r3, r3, #3
 80128a0:	f043 0302 	orr.w	r3, r3, #2
 80128a4:	81a3      	strh	r3, [r4, #12]
 80128a6:	e7e3      	b.n	8012870 <__smakebuf_r+0xc>
 80128a8:	89a3      	ldrh	r3, [r4, #12]
 80128aa:	6020      	str	r0, [r4, #0]
 80128ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128b0:	81a3      	strh	r3, [r4, #12]
 80128b2:	9b00      	ldr	r3, [sp, #0]
 80128b4:	6163      	str	r3, [r4, #20]
 80128b6:	9b01      	ldr	r3, [sp, #4]
 80128b8:	6120      	str	r0, [r4, #16]
 80128ba:	b15b      	cbz	r3, 80128d4 <__smakebuf_r+0x70>
 80128bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128c0:	4630      	mov	r0, r6
 80128c2:	f000 f81d 	bl	8012900 <_isatty_r>
 80128c6:	b128      	cbz	r0, 80128d4 <__smakebuf_r+0x70>
 80128c8:	89a3      	ldrh	r3, [r4, #12]
 80128ca:	f023 0303 	bic.w	r3, r3, #3
 80128ce:	f043 0301 	orr.w	r3, r3, #1
 80128d2:	81a3      	strh	r3, [r4, #12]
 80128d4:	89a3      	ldrh	r3, [r4, #12]
 80128d6:	431d      	orrs	r5, r3
 80128d8:	81a5      	strh	r5, [r4, #12]
 80128da:	e7cf      	b.n	801287c <__smakebuf_r+0x18>

080128dc <_fstat_r>:
 80128dc:	b538      	push	{r3, r4, r5, lr}
 80128de:	4d07      	ldr	r5, [pc, #28]	; (80128fc <_fstat_r+0x20>)
 80128e0:	2300      	movs	r3, #0
 80128e2:	4604      	mov	r4, r0
 80128e4:	4608      	mov	r0, r1
 80128e6:	4611      	mov	r1, r2
 80128e8:	602b      	str	r3, [r5, #0]
 80128ea:	f7f0 f894 	bl	8002a16 <_fstat>
 80128ee:	1c43      	adds	r3, r0, #1
 80128f0:	d102      	bne.n	80128f8 <_fstat_r+0x1c>
 80128f2:	682b      	ldr	r3, [r5, #0]
 80128f4:	b103      	cbz	r3, 80128f8 <_fstat_r+0x1c>
 80128f6:	6023      	str	r3, [r4, #0]
 80128f8:	bd38      	pop	{r3, r4, r5, pc}
 80128fa:	bf00      	nop
 80128fc:	240009a0 	.word	0x240009a0

08012900 <_isatty_r>:
 8012900:	b538      	push	{r3, r4, r5, lr}
 8012902:	4d06      	ldr	r5, [pc, #24]	; (801291c <_isatty_r+0x1c>)
 8012904:	2300      	movs	r3, #0
 8012906:	4604      	mov	r4, r0
 8012908:	4608      	mov	r0, r1
 801290a:	602b      	str	r3, [r5, #0]
 801290c:	f7f0 f893 	bl	8002a36 <_isatty>
 8012910:	1c43      	adds	r3, r0, #1
 8012912:	d102      	bne.n	801291a <_isatty_r+0x1a>
 8012914:	682b      	ldr	r3, [r5, #0]
 8012916:	b103      	cbz	r3, 801291a <_isatty_r+0x1a>
 8012918:	6023      	str	r3, [r4, #0]
 801291a:	bd38      	pop	{r3, r4, r5, pc}
 801291c:	240009a0 	.word	0x240009a0

08012920 <_init>:
 8012920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012922:	bf00      	nop
 8012924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012926:	bc08      	pop	{r3}
 8012928:	469e      	mov	lr, r3
 801292a:	4770      	bx	lr

0801292c <_fini>:
 801292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801292e:	bf00      	nop
 8012930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012932:	bc08      	pop	{r3}
 8012934:	469e      	mov	lr, r3
 8012936:	4770      	bx	lr
